[
  {
    "owner": "vuestorefront",
    "repo": "storefront-ui",
    "content": "TITLE: Implementing Order Summary Component in React\nDESCRIPTION: React/TSX implementation of an Order Summary component that displays order details and handles promo code functionality. The component validates promo codes, applies discounts, and provides visual feedback through alerts for different user actions.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/OrderSummary.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/OrderSummary/OrderSummary.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Arrow Key Navigation in React\nDESCRIPTION: React implementation of the Gallery with keyboard navigation support. When focus is on a thumbnail, users can navigate through images using arrow keys - up/right for next image and down/left for previous image.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Gallery/GalleryHorizontalArrowKeyNavigation.tsx\n```\n\n----------------------------------------\n\nTITLE: StorefrontUI Components and Composables List\nDESCRIPTION: Comprehensive listing of available base components and composable hooks that are part of the StorefrontUI library. Components include basic UI elements like buttons, inputs, and modals, while composables provide reusable functionality for common UI patterns.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/vue/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Base components\n\n- AccordionItem component\n- Button component\n- Checkbox component\n- Checkbox\n- Chip component\n- Counter component\n- Drawer component\n- Dropdown component\n- IconBase component\n- Input component\n- Link component\n- ListItem component\n- LoaderCircular component\n- LoaderLinear component\n- Modal component\n- ProgressCircular component\n- ProgressLinear component\n- Radio component\n- Rating component\n- Select component\n- Switch component\n- Thumbnail component\n- Tooltip component\n\n### Composables\n\n- useDisclosure\n- useDropdown\n- usePopover\n- useTooltip\n- useTrapFocus\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Custom Icon in Vue\nDESCRIPTION: A Vue implementation of a search component with a custom icon and categorized result suggestions. It enhances the basic search with additional visual elements and structured results.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Search/SearchWithIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing MegaMenu with Extended Navigation in Vue\nDESCRIPTION: Code snippet showing how to implement a MegaMenu with extended navigation in Vue. Features an additional navigation bar for general categories and responsive design for mobile devices with side drawer navigation.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/MegaMenu.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/MegaMenu/MegaMenuNavigation.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search with Autocomplete in React\nDESCRIPTION: A React/TypeScript implementation of a basic search component with autocomplete functionality. It provides user hints as they type and supports keyboard navigation.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Search/SearchBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Combobox Basic Implementation\nDESCRIPTION: Vue implementation of a basic Combobox component that allows searching and selecting country names from a dropdown list. Includes keyboard navigation support and accessibility features.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Combobox.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Combobox/ComboboxBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Sizes in Vue\nDESCRIPTION: Demonstrates how to use the SfButton component with different sizes in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonSizes.vue\n```\n\n----------------------------------------\n\nTITLE: React Drawer Component Implementation\nDESCRIPTION: Core implementation of the SfDrawer component in React with TypeScript support and all available props and event handlers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfDrawer/SfDrawer.tsx\n```\n\n----------------------------------------\n\nTITLE: SfSelect Vue Component Implementation\nDESCRIPTION: The full source code for the SfSelect component in Vue, including all props, events, and slots.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfSelect/SfSelect.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Fields with Required Validation in React\nDESCRIPTION: React/TSX implementation of the Form Fields showcase demonstrating required field validation. This code shows how to create a form with various input types and handle validation for required fields.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/FormFields.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/FormFields/FormFieldsRequired.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Filters in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement rating filters in a Vue application using Storefront UI components. This allows users to filter products by selecting specific rating values, with only one rating option selectable at a time.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Rating.vue\n```\n\n----------------------------------------\n\nTITLE: SfSwitch Component Implementation in React\nDESCRIPTION: This code snippet shows the complete implementation of the SfSwitch component for React. It includes the component structure, props, and functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfSwitch/SfSwitch.tsx\n```\n\n----------------------------------------\n\nTITLE: SfRating Component Source Code in Vue\nDESCRIPTION: Complete implementation of the SfRating component in Vue with all supported features and accessibility considerations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfRating/SfRating.vue\n```\n\n----------------------------------------\n\nTITLE: SfModal Implementation in Vue\nDESCRIPTION: Source code for the SfModal component in Vue, showing the implementation details of focus trapping, keyboard accessibility, and click-away handling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfModal/SfModal.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Fields with Required Validation in Vue\nDESCRIPTION: Vue implementation of the Form Fields showcase demonstrating required field validation. This code shows how to create a form with various input types and handle validation for required fields.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/FormFields.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/FormFields/FormFieldsRequired.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form for Checkout in Vue\nDESCRIPTION: A Vue component that creates a contact form with fields for email (including validation) and phone number with separate country code selection. Allows customers to provide their contact information during checkout.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkout/CheckoutContactForm.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Comprehensive Filters Sidepanel in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement a comprehensive filters sidepanel in a React application using Storefront UI components. This combines multiple filter types into a single interface for advanced product filtering.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/FiltersSidepanel.tsx\n```\n\n----------------------------------------\n\nTITLE: Building Payment Method Selection in Vue\nDESCRIPTION: A Vue component for selecting payment methods during checkout. It presents payment options in a clear, user-friendly interface that helps customers choose their preferred payment method.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkout/CheckoutPaymentMethod.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Form for Checkout in Vue\nDESCRIPTION: A Vue component that creates a structured address form for checkout with validation. The form includes fields for first name, last name, street address (with error state handling), city, state, and zip code.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkout/CheckoutAddressForm.vue\n```\n\n----------------------------------------\n\nTITLE: SfRating Component Source Code in React\nDESCRIPTION: Complete implementation of the SfRating component in React with all supported features and accessibility considerations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfRating/SfRating.tsx\n```\n\n----------------------------------------\n\nTITLE: SfIconBase Component Implementation for React\nDESCRIPTION: The source code for the SfIconBase React component. This implementation handles size variations and custom SVG content for the React version of Storefront UI.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfIconBase/SfIconBase.tsx\n```\n\n----------------------------------------\n\nTITLE: SfInput Component Implementation in Vue\nDESCRIPTION: The source code for the SfInput component implementation in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfInput/SfInput.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Alert in React\nDESCRIPTION: Example of an error alert implementation in React/TSX that displays important problem notifications with appropriate styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Alert/AlertError.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component with usePopover in Vue\nDESCRIPTION: Example implementation of a tooltip component using usePopover composable in Vue. The component uses template refs and reactive state to manage a floating tooltip element positioned relative to its trigger.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePopover.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { usePopover } from '@storefront-ui/vue';\n\ndefineProps({\n  text: {\n    type: String,\n    default: '',\n  },\n});\n\nconst isOpen = ref(false);\nconst { referenceRef, floatingRef, style } = usePopover({ isOpen });\n</script>\n\n<template>\n  <span ref=\"referenceRef\" @mouseenter=\"isOpen = true\" @mouseleave=\"isOpen = false\">\n    <slot />\n    <div\n      v-if=\"isOpen\"\n      ref=\"floatingRef\"\n      class=\"p-2 rounded bg-black text-white\"\n      :style=\"style\"\n    >\n      {{ text }}\n    </div>\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Custom Button in React\nDESCRIPTION: A React/TypeScript implementation of a search component with a custom button, categorized result suggestions, and thumbnails. This provides a comprehensive search experience with thumbnails and categorization.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Search/SearchWithButton.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical ProductCard in React\nDESCRIPTION: This snippet demonstrates the implementation of a vertical ProductCard component in React for StorefrontUI. It showcases the structure for displaying detailed product information in a grouped format.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProductCard/ProductCardVertical.tsx\n```\n\n----------------------------------------\n\nTITLE: SfScrollable Component Implementation in Vue\nDESCRIPTION: The full source code for the SfScrollable component in Vue, showing its implementation details and available functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfScrollable/SfScrollable.vue\n```\n\n----------------------------------------\n\nTITLE: SfIconBase Component Implementation for Vue\nDESCRIPTION: The source code for the SfIconBase Vue component. This component serves as the foundation for all icons in Storefront UI and handles size variations and custom SVG content.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfIconBase/SfIconBase.vue\n```\n\n----------------------------------------\n\nTITLE: SfButton Component Implementation in React\nDESCRIPTION: The source code for the SfButton component implementation in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfButton/SfButton.tsx\n```\n\n----------------------------------------\n\nTITLE: Building Payment Method Selection in React\nDESCRIPTION: A React component for selecting payment methods during checkout. It presents payment options in a clear, user-friendly interface that helps customers choose their preferred payment method.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_5\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkout/CheckoutPaymentMethod.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Horizontal Thumbnails in React\nDESCRIPTION: React implementation of the Gallery with horizontal thumbnails. Features image selection via thumbnail clicks or main image dragging, with navigation buttons for the thumbnail strip.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Gallery/GalleryHorizontal.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical ProductCard in Vue\nDESCRIPTION: This snippet shows how to create a vertical ProductCard component in Vue for StorefrontUI. It demonstrates the layout and structure for presenting detailed product information in a group format.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProductCard/ProductCardVertical.vue\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with White Background Implementation\nDESCRIPTION: Implementation of a NavbarTop component with a white background. This component serves as the main navigation bar typically containing elements like company logo, category links, search input, and action buttons for cart, wishlist, or login functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/NavbarTop/NavbarTop.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Custom Icon in React\nDESCRIPTION: A React/TypeScript implementation of a search component with a custom icon and categorized result suggestions. It enhances the basic search with improved visual elements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Search/SearchWithIcon.tsx\n```\n\n----------------------------------------\n\nTITLE: SfScrollable Component Implementation in React\nDESCRIPTION: The full source code for the SfScrollable component in React, showing its implementation details and available functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_7\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfScrollable/SfScrollable.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with White Background and Simple Mobile Bar in React\nDESCRIPTION: React implementation of the NavbarTop with white background and simplified mobile navigation. This version is optimized to pair with NavbarBottom, creating a complete mobile navigation system.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_5\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/NavbarTop/NavbarTopSimpleMobile.tsx\n```\n\n----------------------------------------\n\nTITLE: SfProgressCircular Component Implementation in React\nDESCRIPTION: This is the source code for the SfProgressCircular component implemented in React. It defines the component's props, internal logic, and JSX structure.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfProgressCircular/SfProgressCircular.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dropdown in React using useDropdown hook\nDESCRIPTION: This example demonstrates how to create a basic dropdown menu in React using the useDropdown hook. It shows how to toggle visibility, position the floating element relative to a reference element, and handle closing events.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDropdown.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useDropdown, SfButton } from '@storefront-ui/react';\n\nfunction Dropdown() {\n  const [isOpen, setOpen] = React.useState(false);\n\n  const close = () => setOpen(false);\n  const toggle = () => setOpen((isOpen) => !isOpen);\n\n  const { refs, style } = useDropdown({ isOpen, onClose: close });\n\n  return (\n    <div ref={refs.setReference} className=\"w-max\">\n      <SfButton onClick={toggle}>Toggle</SfButton>\n      {isOpen && (\n        <ul ref={refs.setFloating} style={style.floating} className=\"absolute p-2 w-max rounded bg-gray-100\">\n          <li>More</li>\n          <li>About</li>\n          <li>Settings</li>\n        </ul>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Form for Checkout in React\nDESCRIPTION: A React component that creates a structured address form for checkout with validation. The form includes fields for first name, last name, street address (with error state handling), city, state, and zip code.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkout/CheckoutAddressForm.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with Filled Background and Simple Mobile Bar in Vue\nDESCRIPTION: Vue implementation of NavbarTop with a filled background and simplified mobile navigation bar. This component combines the visual impact of a colored background with optimized mobile navigation features.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/NavbarTop/NavbarTopFilledSimpleMobile.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Summary Component in Vue\nDESCRIPTION: Vue implementation of an Order Summary component that displays order details and handles promo code application. It includes functionality to validate codes, apply discounts, and show appropriate alert messages for both successful and error cases.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/OrderSummary.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/OrderSummary/OrderSummary.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form for Checkout in React\nDESCRIPTION: A React component that creates a contact form with fields for email (including validation) and phone number with separate country code selection. Allows customers to provide their contact information during checkout.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_7\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkout/CheckoutContactForm.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Arrow Key Navigation in Vue\nDESCRIPTION: Enhanced Vue implementation of the Gallery that adds keyboard navigation support. Users can navigate images using arrow keys when a thumbnail is focused - up/right arrows show the next image while down/left arrows show the previous image.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Gallery/GalleryHorizontalArrowKeyNavigation.vue\n```\n\n----------------------------------------\n\nTITLE: SfBadge Component Implementation in React\nDESCRIPTION: Source code for the SfBadge component implementation in React framework, showing the component's structure and functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfBadge/SfBadge.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal ProductCard in Vue\nDESCRIPTION: This code snippet illustrates how to implement a horizontal ProductCard component in Vue for StorefrontUI. It's designed for presenting products in a checkout summary with easy access to increase, decrease, and remove particular products.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProductCard/ProductCardHorizontal.vue\n```\n\n----------------------------------------\n\nTITLE: SfListItem Component Implementation in React\nDESCRIPTION: The source code for the SfListItem component in React. It includes the component's structure, props, and TypeScript types.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfListItem/SfListItem.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component with usePopover in React\nDESCRIPTION: Example implementation of a tooltip component using usePopover hook in React. The component handles mouse enter/leave events to show/hide a floating tooltip element positioned relative to its trigger.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePopover.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { usePopover } from '@storefront-ui/react';\n\ninterface TooltipProps {\n  children?: React.ReactNode;\n  text?: string;\n}\n\nfunction Tooltip({ children, text }: TooltipProps) {\n  const [isOpen, setOpen] = React.useState(false);\n  const { refs, style } = usePopover({ isOpen });\n\n  return (\n    <span ref={refs.setReference} onMouseEnter={() => setOpen(true)} onMouseLeave={() => setOpen(false)>\n      {children}\n      {isOpen && (\n        <div ref={refs.setFloating} style={style} className=\"p-2 rounded bg-black text-white\">\n          {text}\n        </div>\n      )}\n    </span>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delivery Options Component in Vue\nDESCRIPTION: A Vue component that displays available delivery options for checkout. It allows customers to easily compare and select the best delivery method for their needs.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkout/CheckoutDeliveryOptions.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Product Rating Implementation\nDESCRIPTION: Implementation of a 1-5 star rating system using SfRatingButton and SfModal components. Provides a simple interface for users to rate products.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/RatingForms.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n../../../../preview/nuxt/pages/showcases/RatingForms/ProductRating.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n../../../../preview/next/pages/showcases/RatingForms/ProductRating.tsx\n```\n\n----------------------------------------\n\nTITLE: Product Rating with Review Form Implementation\nDESCRIPTION: Extended rating implementation that combines a 1-5 star rating system with a detailed review form. Uses responsive grid layout and can be displayed as a page, modal, or drawer.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/RatingForms.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n../../../../preview/nuxt/pages/showcases/RatingForms/ProductRatingWithReview.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n../../../../preview/next/pages/showcases/RatingForms/ProductRatingWithReview.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Footer in React\nDESCRIPTION: Example implementation of a basic Footer component in React/TSX. The Footer contains navigation links, contact information, social media links, and privacy policy references typically found at the bottom of web pages.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Footer.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Footer/FooterBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing MegaMenu with Extended Navigation in React\nDESCRIPTION: Code snippet showing how to implement a MegaMenu with extended navigation in React. This version includes an additional navigation bar under the main header for easier category access, with mobile support for nested categories.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/MegaMenu.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/MegaMenu/MegaMenuNavigation.tsx\n```\n\n----------------------------------------\n\nTITLE: React Implementation of SfRatingButton Component\nDESCRIPTION: Source code for the SfRatingButton component implementation in React, showing the core functionality and structure of the component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfRatingButton/SfRatingButton.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Usage in Vue\nDESCRIPTION: Example of basic SfModal usage in Vue, demonstrating how to control modal visibility with v-model and the useDisclosure hook.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Modal/ModalBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Component in React\nDESCRIPTION: Example of creating a custom tooltip component in React using useTooltip hook. The implementation includes transition effects and demonstrates usage of refs, trigger props, tooltip props, and arrow props.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useTooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useTooltip } from '@storefront-ui/react';\nimport { Transition } from 'react-transition-group';\n\nconst transitionStyles = {\n  entering: { opacity: 1 },\n  entered: { opacity: 1 },\n  exiting: { opacity: 0 },\n  exited: { opacity: 0 },\n};\n\ninterface Props {\n  children?: React.ReactNode;\n  label?: string;\n}\n\nfunction CustomTooltip(props: Props) {\n  const { children, label } = props;\n  const { refs, isOpen, getTriggerProps, getTooltipProps, getArrowProps } = useTooltip();\n\n  return (\n    <span {...getTriggerProps()}>\n      {children}<\n      <Transition nodeRef={refs.floating} in={isOpen} timeout={300} unmountOnExit mountOnEnter>\n        {(state) => (\n          <div\n            {...getTooltipProps({\n              style: transitionStyles[state],\n              className: 'bg-green-800 p-1 rounded text-white w-max transition-opacity duration-300',\n            })}\n          >\n            {label}\n            <span {...getArrowProps({ className: 'bg-green-800 w-[8px] h-[8px] rotate-45' })} />\n          </div>\n        )}\n      </Transition>\n    </span>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Search with Custom Button in Vue\nDESCRIPTION: A Vue implementation of a search component with a custom button, categorized result suggestions, and thumbnails. This provides the most feature-rich search experience with visual enhancements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Search/SearchWithButton.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Comprehensive Filters Sidepanel in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement a comprehensive filters sidepanel in a Vue application using Storefront UI components. This combines multiple filter types into a single interface for advanced product filtering.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/FiltersSidepanel.vue\n```\n\n----------------------------------------\n\nTITLE: SfChip with Thumbnail in React\nDESCRIPTION: Example showing how to use the slotPrefix and slotSuffix props to add custom content like thumbnails to the SfChip component in React. This demonstrates adding visual elements alongside the chip content.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Chip/ChipWithThumbnail.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ProductSlider in React\nDESCRIPTION: Example implementation of a basic ProductSlider component in React. The component provides a scrollable interface for displaying product cards with navigation functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductSlider.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProductSlider/Basic.tsx\n```\n\n----------------------------------------\n\nTITLE: React NewsletterBox Implementation\nDESCRIPTION: React TypeScript implementation of a newsletter subscription box with email validation and alert handling. It shows success alerts for valid email submissions and warning alerts for duplicate email addresses.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NewsletterBox.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/NewsletterBox/NewsletterBox.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Vertical Thumbnails in React\nDESCRIPTION: React implementation of the Gallery component with vertical thumbnails. Provides image navigation through thumbnail interaction and main image dragging with up/down scrolling buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Gallery/GalleryVertical.tsx\n```\n\n----------------------------------------\n\nTITLE: React AccordionItem Component Source\nDESCRIPTION: Source code for the React implementation of SfAccordionItem component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfAccordionItem/SfAccordionItem.tsx\n```\n\n----------------------------------------\n\nTITLE: Full SfInput Example with Character Count in Vue\nDESCRIPTION: A comprehensive example of SfInput in Vue, featuring a label, help text, and character counting.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputCharacters.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Detailed ProductCard View in React\nDESCRIPTION: This snippet illustrates the implementation of a detailed ProductCard view in React for StorefrontUI. It's suitable for use in product details pages or for creating components that display products from various categories.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_5\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProductCard/Details.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Error State in React\nDESCRIPTION: Example of a SelectDropdown component in React displaying an error state. This setup demonstrates how to provide visual feedback for validation errors in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/SelectDropdown/SelectDropdownError.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search with Autocomplete in Vue\nDESCRIPTION: A Vue implementation of a basic search component with autocomplete functionality. It provides user hints as they type and supports keyboard navigation between the search input and suggestions list.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Search.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Search/SearchBasic.vue\n```\n\n----------------------------------------\n\nTITLE: React ProgressLinear Component Implementation\nDESCRIPTION: React component implementation of SfProgressLinear that provides a customizable progress bar interface. The component allows size customization and accepts aria labels for accessibility.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresslinear.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SfProgressLinearSize, SfProgressSize } from '@storefront-ui/shared';\n\nexport interface SfProgressLinearProps {\n  value?: number;\n  size?: SfProgressLinearSize | SfProgressSize;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport function SfProgressLinear({\n  value = 0,\n  size = 'base',\n  ariaLabel = 'Progress linear',\n  className,\n}: SfProgressLinearProps) {\n  return (\n    <progress\n      className={classNames(styles.base, styles.size[size], className)}\n      value={value}\n      max={100}\n      aria-label={ariaLabel}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal ProductCard in React\nDESCRIPTION: This snippet shows the implementation of a horizontal ProductCard component in React for StorefrontUI. It's used for displaying products in a checkout summary, allowing customers to easily modify quantities or remove items.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProductCard/ProductCardHorizontal.tsx\n```\n\n----------------------------------------\n\nTITLE: React Drawer with Transition and Close Button\nDESCRIPTION: Enhanced React drawer implementation featuring CSS transition animations and a close button with focus trap functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Drawer/TransitionAndCloseButton.tsx\n```\n\n----------------------------------------\n\nTITLE: React Pagination Component Implementation\nDESCRIPTION: A React component that implements pagination using StorefrontUI hooks and components. Features include next/previous navigation, page number selection, and ellipsis for long page ranges. Uses the usePagination hook to manage pagination state.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePagination.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePagination, SfButton, SfIconChevronLeft, SfIconChevronRight } from '@storefront-ui/react';\n\nfunction CustomPagination() {\n   const { totalPages, pages, selectedPage, startPage, endPage, next, prev, setPage, maxVisiblePages } = usePagination({\n    totalItems: 150\n  });\n\n  return (\n    <nav className=\"flex justify-between border-t border-neutral-200\" role=\"navigation\" aria-label=\"pagination\">\n      <SfButton\n        type=\"button\"\n        aria-label=\"Go to previous page\"\n        disabled={selectedPage <= 1}\n        variant=\"tertiary\"\n        slotPrefix={<SfIconChevronLeft />}\n        onClick={() => prev()}\n      />\n      <ul className=\"flex justify-center\">\n        {!pages.find((page: number) => page === 1) && (\n          <li>\n            <div\n              className={classNames('flex pt-1 border-t-4 border-transparent', {\n                'font-medium border-t-4 !border-primary-500': selectedPage === 1,\n              })}\n            >\n              <button\n                type=\"button\"\n                className=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900\"\n                aria-current={selectedPage === 1}\n                onClick={() => setPage(1)}\n              >\n                1\n              </button>\n            </div>\n          </li>\n        )}\n        {startPage > 2 && (\n          <li>\n            <div className=\"flex border-t-4 border-transparent\">\n              <button\n                type=\"button\"\n                disabled\n                aria-hidden=\"true\"\n                className=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 \"\n              >\n                ...\n              </button>\n            </div>\n          </li>\n        )}\n        {pages.map((page: number) => (\n          <>\n            {maxVisiblePages === 1 && selectedPage === totalPages && (\n              <li>\n                <div className=\"flex pt-1 border-t-4 border-transparent\">\n                  <button\n                    type=\"button\"\n                    className=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 \"\n                    aria-current={endPage - 1 === selectedPage}\n                    onClick={() => setPage(endPage - 1)}\n                  >\n                    {endPage - 1}\n                  </button>\n                </div>\n              </li>\n            )}\n            <li key={`page-${page}`}>\n              <div\n                className={classNames('flex pt-1 border-t-4 border-transparent ', {\n                  'font-medium border-t-4 !border-primary-500': selectedPage === page,\n                })}\n              >\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'px-4 py-3 text-neutral-500 rounded-md hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900',\n                    { '!text-neutral-900 hover:!text-primary-800 active:!text-primary-900': selectedPage === page },\n                  )}\n                  aria-label={`Page ${page} of ${totalPages}`}\n                  aria-current={selectedPage === page}\n                  onClick={() => setPage(page)}\n                >\n                  {page}\n                </button>\n              </div>\n            </li>\n            {maxVisiblePages === 1 && selectedPage === 1 && (\n              <li>\n                <div className=\"flex pt-1 border-t-4 border-transparent\">\n                  <button\n                    type=\"button\"\n                    className=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 \"\n                    aria-current={selectedPage === 1}\n                    onClick={() => setPage(2)}\n                  >\n                    2\n                  </button>\n                </div>\n              </li>\n            )}\n          </>\n        ))}\n        {endPage < totalPages - 1 && (\n          <li>\n            <div className=\"flex pt-1 border-t-4 border-transparent\">\n              <button type=\"button\" disabled aria-hidden=\"true\" className=\"px-4 py-3 rounded-md text-neutral-500 \">\n                ...\n              </button>\n            </div>\n          </li>\n        )}\n        {!pages.find((page: number) => page === totalPages) && (\n          <li>\n            <div\n              className={classNames('flex pt-1 border-t-4 border-transparent ', {\n                'font-medium border-t-4 !border-primary-500': selectedPage === totalPages,\n              })}\n            >\n              <button\n                type=\"button\"\n                className=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 \"\n                aria-current={totalPages === selectedPage}\n                onClick={() => setPage(totalPages)}\n              >\n                {totalPages}\n              </button>\n            </div>\n          </li>\n        )}\n      </ul>\n      <SfButton\n        type=\"button\"\n        aria-label=\"Go to next page\"\n        disabled={selectedPage >= totalPages}\n        variant=\"tertiary\"\n        slotSuffix={<SfIconChevronRight />}\n        onClick={() => next()}\n      />\n    </nav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListItem Props for Custom Content in React\nDESCRIPTION: Demonstrates the use of slotPrefix and slotSuffix props in the SfListItem component for React. These props allow adding custom content before and after the main content.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ListItem/ListItemSlots.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Alert in Vue\nDESCRIPTION: Example of a warning alert implementation in Vue that includes both title and description content for more detailed notifications.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Alert/AlertWarning.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dropdown in Vue using useDropdown composable\nDESCRIPTION: This example shows how to create a dropdown menu in Vue using the useDropdown composable. It demonstrates binding template refs to reference and floating elements, toggling visibility, and applying positioning styles.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDropdown.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { useDropdown, SfButton } from '@storefront-ui/vue';\n\nconst isOpen = ref(false);\n\nconst { referenceRef, floatingRef, style } = useDropdown({ isOpen, onClose: () => isOpen.value = false });\n</script>\n\n<template>\n  <div ref=\"referenceRef\" class=\"w-max\">\n    <SfButton @click=\"isOpen = !isOpen\">Toggle</SfButton>\n    <ul v-if=\"isOpen\" ref=\"floatingRef\" :style=\"style\" class=\"absolute p-2 w-max rounded bg-gray-100\">\n      <li>More</li>\n      <li>About</li>\n      <li>Settings</li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Filters in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement size filters in a Vue application using Storefront UI components. This allows users to filter products by selecting different size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Size.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Vertical Thumbnails in Vue\nDESCRIPTION: This code demonstrates a Gallery component with vertically arranged thumbnails. Users can change the displayed image by hovering on a thumbnail or dragging the main image. Includes up/down buttons for scrolling through thumbnails.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Gallery/GalleryVertical.vue\n```\n\n----------------------------------------\n\nTITLE: QuantitySelector with Rounded Buttons in React\nDESCRIPTION: Demonstrates the QuantitySelector component with rounded button styles in React/TypeScript. This variant provides a different visual appearance for the increment/decrement buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/QuantitySelector/Rounded.tsx\n```\n\n----------------------------------------\n\nTITLE: SfModal Implementation in React\nDESCRIPTION: Source code for the SfModal component in React, showing the implementation details of focus trapping, keyboard accessibility, and click-away handling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfModal/SfModal.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Filters in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement size filters in a React application using Storefront UI components. This allows users to filter products by selecting different size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Size.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Card Component in Vue\nDESCRIPTION: This Vue code demonstrates the implementation of a Default Card component with rectangular images, titles, descriptions, and action buttons. It includes a clickable card with tabbing functionality through the use of anchor elements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Card/CardDefault.vue\n```\n\n----------------------------------------\n\nTITLE: Implementation of useFocusVisible Hook in React\nDESCRIPTION: This TypeScript code implements the useFocusVisible hook for React. It manages focus visibility state based on user interactions and provides a boolean value indicating whether keyboard focus is visible.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useFocusVisible.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\ntype UseFocusVisibleProps = {\n  isTextInput?: boolean;\n  autoFocus?: boolean;\n};\n\nexport function useFocusVisible({\n  isTextInput = false,\n  autoFocus = false,\n}: UseFocusVisibleProps = {}) {\n  const [isFocusVisible, setIsFocusVisible] = useState(autoFocus);\n  const hadKeyboardEvent = useRef(false);\n  const hadFocusVisibleRecently = useRef(false);\n  const hadFocusVisibleRecentlyTimeout = useRef<number | null>(null);\n\n  const inputModal = useCallback((event: KeyboardEvent) => {\n    if (event.metaKey || event.altKey || event.ctrlKey) {\n      return;\n    }\n\n    if (event.code === 'Tab') {\n      hadKeyboardEvent.current = true;\n    }\n  }, []);\n\n  const visibilityChange = useCallback(() => {\n    if (document.visibilityState === 'hidden') {\n      if (hadFocusVisibleRecently.current) {\n        hadKeyboardEvent.current = true;\n      }\n    }\n  }, []);\n\n  const onPointerDown = useCallback(() => {\n    hadKeyboardEvent.current = false;\n  }, []);\n\n  const onInitialPointerMove = useCallback((event: PointerEvent) => {\n    if (event.target && (event.target as HTMLElement).matches(':focus-visible')) {\n      hadKeyboardEvent.current = true;\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', inputModal, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', visibilityChange, true);\n    document.addEventListener('pointermove', onInitialPointerMove, true);\n\n    return () => {\n      document.removeEventListener('keydown', inputModal, true);\n      document.removeEventListener('mousedown', onPointerDown, true);\n      document.removeEventListener('pointerdown', onPointerDown, true);\n      document.removeEventListener('touchstart', onPointerDown, true);\n      document.removeEventListener('visibilitychange', visibilityChange, true);\n      document.removeEventListener('pointermove', onInitialPointerMove, true);\n    };\n  }, [inputModal, onPointerDown, visibilityChange, onInitialPointerMove]);\n\n  useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && (event.target as HTMLElement).matches(':focus-visible')) {\n        if (hadKeyboardEvent.current || isTextInput) {\n          setIsFocusVisible(true);\n          hadFocusVisibleRecently.current = true;\n          if (hadFocusVisibleRecentlyTimeout.current) {\n            window.clearTimeout(hadFocusVisibleRecentlyTimeout.current);\n          }\n          hadFocusVisibleRecentlyTimeout.current = window.setTimeout(() => {\n            hadFocusVisibleRecently.current = false;\n            if (hadFocusVisibleRecentlyTimeout.current) {\n              window.clearTimeout(hadFocusVisibleRecentlyTimeout.current);\n            }\n          }, 100);\n        }\n      }\n    };\n\n    const handleBlur = () => {\n      if (hadFocusVisibleRecently.current) {\n        setIsFocusVisible(false);\n        hadKeyboardEvent.current = true;\n      }\n    };\n\n    document.addEventListener('focus', handleFocus, true);\n    document.addEventListener('blur', handleBlur, true);\n\n    return () => {\n      document.removeEventListener('focus', handleFocus, true);\n      document.removeEventListener('blur', handleBlur, true);\n    };\n  }, [isTextInput]);\n\n  return { isFocusVisible };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs Component in React\nDESCRIPTION: This snippet shows the implementation of a basic Tabs component in React for the Storefront UI project. It provides the same functionality as the Vue version, including automatic activation, horizontal scrolling, and disabled tab support.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Tabs/TabsBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: Full SfInput Example with Character Count in React\nDESCRIPTION: A comprehensive example of SfInput in React, featuring a label, help text, and character counting.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputCharacters.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Navigation in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement category navigation in a React application using Storefront UI components. This allows users to browse different product categories with currently selected category being highlighted.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Category.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Footer in Vue\nDESCRIPTION: Example implementation of a basic Footer component in Vue. The Footer contains navigation links, contact information, social media links, and privacy policy references typically found at the bottom of web pages.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Footer.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Footer/FooterBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Trailing Control in React\nDESCRIPTION: This snippet illustrates how to use the SfSwitch component with a trailing control (label on the left) in a React application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Switch/SwitchTrailing.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue NewsletterBox Implementation\nDESCRIPTION: Vue implementation of a newsletter subscription box with email validation and alert handling. It shows success alerts for valid email submissions and warning alerts for duplicate email addresses.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NewsletterBox.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/NewsletterBox/NewsletterBox.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting Options in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement sorting options in a React application using Storefront UI components. This allows users to arrange products based on specific criteria like price or name.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Sorting.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Filters in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement color filters in a React application using Storefront UI components. This allows users to filter products by selecting different color options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Color.tsx\n```\n\n----------------------------------------\n\nTITLE: SfChip with Thumbnail in Vue\nDESCRIPTION: Example showing how to use the prefix and suffix slots to add custom content like thumbnails to the SfChip component in Vue. This demonstrates adding visual elements alongside the chip content.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Chip/ChipWithThumbnail.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Component with Show More Feature in React\nDESCRIPTION: This snippet shows how to implement a Review component with text truncation and a 'show more' feature in React. It handles long review descriptions by initially showing a shortened version that can be expanded.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Review.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Review/ShowMore.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Price Range Filters in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement price range filters in a React application using Storefront UI components. This allows users to filter products by setting minimum and maximum price values.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Price.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with White Background in React\nDESCRIPTION: React implementation of the NavbarTop component with a white background, providing the same navigation functionality as the Vue version with company logo, links, search and action buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/NavbarTop/NavbarTop.tsx\n```\n\n----------------------------------------\n\nTITLE: React Combobox Basic Implementation\nDESCRIPTION: React/TSX implementation of a basic Combobox component that allows searching and selecting country names from a dropdown list. Includes keyboard navigation support and accessibility features.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Combobox.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Combobox/ComboboxBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: RatingButton Size Variations in React\nDESCRIPTION: Example demonstrating the three different sizes of RatingButton component in React, which correspond to different icon sizes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RatingButton/Sizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Drawer Component Implementation\nDESCRIPTION: Core implementation of the SfDrawer component in Vue with all supported props, events, and slot functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfDrawer/SfDrawer.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Component with Avatar in Vue\nDESCRIPTION: This snippet demonstrates how to use the Review component with an avatar and Rating component in Vue. It displays a user's review with their name, avatar, rating, and feedback.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Review.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Review/WithAvatar.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Brand Filters in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement brand filters in a React application using Storefront UI components. This allows users to filter products by selecting specific brand options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Brand.tsx\n```\n\n----------------------------------------\n\nTITLE: Badge Placement in React\nDESCRIPTION: Examples of different Badge placement options in React, demonstrating how to align the Badge in every corner of the container.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Badge/BadgePlacement.tsx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useFocusVisible with Input Components in Vue\nDESCRIPTION: This Vue code snippet demonstrates the usage of useFocusVisible hook with input components. It shows the difference between default focus behavior and focus-visible behavior.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useFocusVisible.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { SfInput, useFocusVisible } from '@storefront-ui/vue';\n\nconst valueOne = ref('');\nconst valueTwo = ref('');\nconst { isFocusVisible } = useFocusVisible();\n</script>\n\n<template>\n  <div class=\"flex flex-col items-center gap-4\">\n    <SfInput v-model=\"valueOne\" wrapper-class=\"max-w-sm\" />\n    <SfInput\n      v-model=\"valueTwo\"\n      :wrapper-class=\"[\n        'max-w-sm',\n        {\n          'focus-visible:outline focus-visible:outline-offset': isFocusVisible,\n          'focus:outline-none': !isFocusVisible,\n        },\n      ]\"\n    />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Pagination Component Implementation\nDESCRIPTION: A Vue 3 component implementing pagination using StorefrontUI components. Provides the same functionality as the React version with next/previous navigation and page selection. Uses the usePagination composable for state management.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePagination.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { usePagination, SfIconChevronRight, SfIconChevronLeft, SfButton } from '@storefront-ui/vue';\n\nconst { totalPages, pages, selectedPage, startPage, endPage, next, prev, setPage, maxVisiblePages } = usePagination({\n  totalItems: 150\n});\n</script>\n\n<template>\n<nav class=\"flex justify-between border-t border-neutral-200\" role=\"navigation\" aria-label=\"pagination\">\n    {{ totalPages }}\n    <SfButton\n      type=\"button\"\n      aria-label=\"Go to previous page\"\n      :disabled=\"selectedPage <= 1\"\n      variant=\"tertiary\"\n      @click=\"prev\"\n    >\n      <template #prefix>\n        <SfIconChevronLeft />\n      </template>\n    </SfButton>\n    <ul class=\"flex justify-center\">\n      <li v-if=\"!pages.find((page) => page === 1)\">\n        <div\n          :class=\"[\n            'flex pt-1 border-t-4 border-transparent',\n            { 'font-medium border-t-4 !border-primary-500': selectedPage === 1 },\n          ]\"\n        >\n          <button\n            type=\"button\"\n            class=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900\"\n            :aria-current=\"selectedPage === 1\"\n            @click=\"setPage(1)\"\n          >\n            1\n          </button>\n        </div>\n      </li>\n      <li v-if=\"startPage > 2\">\n        <div class=\"flex pt-1 border-t-4 border-transparent\">\n          <button type=\"button\" disabled aria-hidden=\"true\" class=\"px-4 py-3 rounded-md text-neutral-500\">...</button>\n        </div>\n      </li>\n      <li v-if=\"maxVisiblePages === 1 && selectedPage === totalPages\">\n        <div class=\"flex pt-1 border-t-4 border-transparent\">\n          <button\n            type=\"button\"\n            class=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900\"\n            :aria-current=\"endPage - 1 === selectedPage\"\n            @click=\"setPage(endPage - 1)\"\n          >\n            {{ endPage - 1 }}\n          </button>\n        </div>\n      </li>\n      <li v-for=\"page in pages\" :key=\"`page-${page}`\">\n        <div\n          :class=\"[\n            'flex pt-1 border-t-4 border-transparent ',\n            { 'font-medium border-t-4 !border-primary-500': selectedPage === page },\n          ]\"\n        >\n          <button\n            type=\"button\"\n            :class=\"[\n              ' px-4 py-3 text-neutral-500 rounded-md hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900 ',\n              { '!text-neutral-900 hover:!text-primary-800 active:!text-primary-900': selectedPage === page },\n            ]\"\n            :aria-label=\"`Page ${page} of ${totalPages}`\"\n            :aria-current=\"selectedPage === page\"\n            @click=\"setPage(page)\"\n          >\n            {{ page }}\n          </button>\n        </div>\n      </li>\n      <li v-if=\"maxVisiblePages === 1 && selectedPage === 1\">\n        <div class=\"flex pt-1 border-t-4 border-transparent\">\n          <button\n            type=\"button\"\n            class=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900\"\n            :aria-label=\"`Page 2 of ${totalPages}`\"\n            @click=\"setPage(2)\"\n          >\n            2\n          </button>\n        </div>\n      </li>\n      <li v-if=\"endPage < totalPages - 1\">\n        <div class=\"flex pt-1 border-t-4 border-transparent\">\n          <button type=\"button\" disabled aria-hidden=\"true\" class=\"px-4 py-3 rounded-md text-neutral-500\">...</button>\n        </div>\n      </li>\n      <li v-if=\"!pages.find((page) => page === totalPages)\">\n        <div\n          :class=\"[\n            'flex pt-1 border-t-4 border-transparent ',\n            { 'font-medium border-t-4 !border-primary-500': selectedPage === totalPages },\n          ]\"\n        >\n          <button\n            type=\"button\"\n            class=\"px-4 py-3 rounded-md text-neutral-500 hover:bg-primary-100 hover:text-primary-800 active:bg-primary-200 active:text-primary-900\"\n            :aria-current=\"totalPages === selectedPage\"\n            @click=\"setPage(totalPages)\"\n          >\n            {{ totalPages }}\n          </button>\n        </div>\n      </li>\n    </ul>\n    <SfButton\n      type=\"button\"\n      aria-label=\"Go to next page\"\n      :disabled=\"selectedPage >= totalPages\"\n      variant=\"tertiary\"\n      @click=\"next\"\n    >\n      <template #suffix>\n        <SfIconChevronRight />\n      </template>\n    </SfButton>\n  </nav>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Feature Component in React\nDESCRIPTION: This React TSX code shows how to implement a Card Feature component with only a button for interaction. It follows the same pattern as the Vue implementation for this simplified card type.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Card/CardFeature.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Horizontal Thumbnails in Vue\nDESCRIPTION: Vue implementation of the Gallery with horizontally arranged thumbnails. Users can change images by clicking on thumbnails or dragging the main image, with buttons for scrolling through the thumbnail strip.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Gallery/GalleryHorizontal.vue\n```\n\n----------------------------------------\n\nTITLE: SfListItem Component Implementation in Vue\nDESCRIPTION: The source code for the SfListItem component in Vue. It includes the component's structure, props, and styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfListItem/SfListItem.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs Component in Vue\nDESCRIPTION: This snippet demonstrates how to implement a basic Tabs component in Vue for the Storefront UI project. It includes functionality for automatic activation on focus, horizontal scrolling, and support for disabled tabs.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Tabs/TabsBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in Vue\nDESCRIPTION: Vue implementation example of the Pagination component for navigating through multi-page content. This component is useful when there are numerous elements to display on a page, such as product listings.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Pagination/Pagination.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting Options in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement sorting options in a Vue application using Storefront UI components. This allows users to arrange products based on specific criteria like price or name.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Sorting.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage in React\nDESCRIPTION: Examples of basic Badge usage in React, including the dot variant and max value functionality. The badge component must be wrapped with a container that has 'class=\"relative\"'.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Badge/BadgeBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Placeholder in React\nDESCRIPTION: Example of using a placeholder in a React SelectDropdown component. This setup demonstrates how to add informative placeholder text for improved user experience in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/SelectDropdown/SelectDropdownWithPlaceholder.tsx\n```\n\n----------------------------------------\n\nTITLE: Controlled Vue Scrollable Implementation\nDESCRIPTION: Advanced implementation of useScrollable in Vue using controlled navigation with showNext and showPrev methods, including disabled state handling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useScrollable.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useScrollable } from '@storefront-ui/vue';\n\nconst { containerRef, state, showNext, showPrev } = useScrollable()\n</script>\n\n<template>\n  <div class=\"flex items-center\">\n    <button @click=\"showPrev\" :disabled=\"!state.hasPrev\">previous</button>\n    <div ref=\"containerRef\">\n      <div\n        v-for=\"(_, index) in Array.from({ length: 20 })\"\n        :key=\"index\"\n      >\n        thumbnail {{ index + 1 }}\n      </div>\n    </div>\n    <button @click=\"showNext\" :disabled=\"!state.hasNext\">next</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hero Banner Component\nDESCRIPTION: Code example for hero banner implementation with support for responsive background images and custom content placement.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Banners.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Banners/Hero.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Banners/Hero.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Bullet Navigation in React\nDESCRIPTION: React implementation of the Gallery with bullet-style navigation. Displays navigation buttons on hover and uses bullet indicators to show the current image position.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Gallery/GalleryWithBullets.tsx\n```\n\n----------------------------------------\n\nTITLE: SfTextarea Component Implementation in React\nDESCRIPTION: Core implementation of the SfTextarea component in React, containing the base functionality and styling for the textarea element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfTextarea/SfTextarea.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Component with Avatar in React\nDESCRIPTION: This snippet shows how to implement the Review component with an avatar and Rating component in React. It renders a user review including avatar, rating stars, and review text.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Review.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Review/WithAvatar.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumbs with Home Icon in Vue\nDESCRIPTION: Demonstrates how to create Breadcrumbs with a home icon as the first item in Vue. This variation enhances user orientation by providing a clear starting point.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Breadcrumbs/BreadcrumbsWithIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Error State in Vue\nDESCRIPTION: Example of a SelectDropdown component in Vue displaying an error state. This implementation shows how to provide visual cues to indicate validation errors.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/SelectDropdown/SelectDropdownError.vue\n```\n\n----------------------------------------\n\nTITLE: Animated Vue AccordionItem\nDESCRIPTION: Vue implementation of AccordionItem with smooth transition animations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/AccordionItem/AccordionAnimate.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Preselected Option in Vue\nDESCRIPTION: Example of a SelectDropdown component in Vue with a preselected option. This implementation demonstrates basic usage of the component with a predefined selection.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/SelectDropdown/SelectDropdownPreselected.vue\n```\n\n----------------------------------------\n\nTITLE: Animated Modal Transition in React\nDESCRIPTION: Example showing how to implement smooth transition animations for SfModal in React when opening and closing.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Modal/ModalTransition.tsx\n```\n\n----------------------------------------\n\nTITLE: Textarea with Character Counter in Vue\nDESCRIPTION: Implementation of a textarea with character counting functionality in Vue, allowing users to track the number of characters they have entered.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Textarea/TextareaCharacters.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Navigation in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement category navigation in a Vue application using Storefront UI components. This allows users to browse different product categories with currently selected category being highlighted.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Category.vue\n```\n\n----------------------------------------\n\nTITLE: SfRadio Component Implementation in Vue\nDESCRIPTION: The source code implementation of the SfRadio component in Vue. This defines the component's props, events, and template structure for the custom radio input.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfRadio/SfRadio.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Component with Show More Feature in Vue\nDESCRIPTION: This snippet demonstrates how to implement a Review component with truncated text and a 'show more' button in Vue. It allows users to expand long review descriptions when needed.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Review.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Review/ShowMore.vue\n```\n\n----------------------------------------\n\nTITLE: SfChip React Component Implementation\nDESCRIPTION: Source code for the React implementation of the SfChip component. This shows the internal structure and logic used to create the toggleable input element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfChip/SfChip.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useDisclosure in React\nDESCRIPTION: Demonstrates how to use the useDisclosure hook in a React component to control visibility with open, close, and toggle functions.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDisclosure.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SfButton, useDisclosure } from '@storefront-ui/react';\n\nfunction Basic() {\n  const { isOpen, toggle, open, close } = useDisclosure();\n\n  return (\n    <>\n      <SfButton onClick={open}>Open</SfButton>\n      <SfButton onClick={close}>Close</SfButton>\n      <SfButton onClick={toggle}>Toggle</SfButton>\n      {isOpen && <p>This text shows when isOpen value is true.</p>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React AccordionItem Implementation\nDESCRIPTION: Basic implementation of AccordionItem component in React, using the open prop to control accordion state.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/AccordionItem/BasicAccordion.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Scrollable Implementation\nDESCRIPTION: Basic implementation of useScrollable hook in Vue showing how to create a scrollable container with previous and next navigation buttons using containerRef and button props.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useScrollable.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useScrollable } from '@storefront-ui/vue';\n\nconst { containerRef, state, getNextButtonProps, getPrevButtonProps } = useScrollable()\n</script>\n\n<template>\n  <div class=\"flex items-center\">\n    <button v-bind=\"getPrevButtonProps\">previous</button>\n    <div ref=\"containerRef\">\n      <div\n        v-for=\"(_, index) in Array.from({ length: 20 })\"\n        :key=\"index\"\n      >\n        thumbnail {{ index + 1 }}\n      </div>\n    </div>\n    <button v-bind=\"getNextButtonProps\">next</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Usage in React\nDESCRIPTION: Example of basic SfModal usage in React, demonstrating how to control modal visibility with the open prop and the useDisclosure hook.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Modal/ModalBasic.tsx\n```\n\n----------------------------------------\n\nTITLE: Collapsable React Accordion Group\nDESCRIPTION: Implementation of accordion group in React where only one item can be open at a time.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/AccordionItem/CollapsableAccordion.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Gallery with Bullet Navigation in Vue\nDESCRIPTION: Vue implementation of the Gallery with bullet navigation indicators. Shows navigation buttons on hover and uses bullets below the main image to indicate the currently displayed image position.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Gallery.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Gallery/GalleryWithBullets.vue\n```\n\n----------------------------------------\n\nTITLE: SfLoaderCircular Implementation in Vue\nDESCRIPTION: Source code for the SfLoaderCircular component implementation in Vue. Contains the component structure, props definition, and styling for the animated circular loader.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfLoaderCircular/SfLoaderCircular.vue\n```\n\n----------------------------------------\n\nTITLE: SfInput Component Implementation in React\nDESCRIPTION: The source code for the SfInput component implementation in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfInput/SfInput.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Drawer Component with Placement Options\nDESCRIPTION: Example implementation of SfDrawer component in Vue showing different placement options (top, right, bottom, left) with v-model binding for open/close functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Drawer/Placement.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumbs in React\nDESCRIPTION: Shows the basic implementation of the Breadcrumbs component in React. It illustrates how to create and display a simple breadcrumb navigation.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Breadcrumbs/Breadcrumbs.tsx\n```\n\n----------------------------------------\n\nTITLE: Rating Colors Implementation in Vue\nDESCRIPTION: Example showing how to customize colors for the SfRating component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Rating/RatingColors.vue\n```\n\n----------------------------------------\n\nTITLE: Autoresizing Textarea Implementation in Vue\nDESCRIPTION: Example of a textarea that automatically resizes based on content in Vue, using the @frsource/autoresize-textarea library to enable this functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Textarea/TextareaAutoresize.vue\n```\n\n----------------------------------------\n\nTITLE: Autoresizing Textarea Implementation in React\nDESCRIPTION: Example of a textarea that automatically resizes based on content in React, using the @frsource/autoresize-textarea library to enable this functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Textarea/TextareaAutoresize.tsx\n```\n\n----------------------------------------\n\nTITLE: React Drawer Component with Placement Options\nDESCRIPTION: Example implementation of SfDrawer component in React showing different placement options with open prop and onClose event handling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Drawer/Placement.tsx\n```\n\n----------------------------------------\n\nTITLE: Deletable SfChip Behavior in React\nDESCRIPTION: Example showing how to implement deletable chip behavior in React by handling change events. When a chip is clicked, it can be removed from the array of chips by its index.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Chip/Deletable.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Base MegaMenu in Vue\nDESCRIPTION: Code snippet demonstrating how to implement a basic MegaMenu component in Vue. The component provides a navigation interface that opens when triggered, adapting its display based on screen size.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/MegaMenu.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/MegaMenu/BaseMegaMenu.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Filters in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement color filters in a Vue application using Storefront UI components. This allows users to filter products by selecting different color options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Color.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Alert in Vue\nDESCRIPTION: Example of an error alert implementation in Vue that displays important problem notifications with appropriate styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Alert/AlertError.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Filters in React for E-commerce\nDESCRIPTION: Code snippet showing how to implement rating filters in a React application using Storefront UI components. This allows users to filter products by selecting specific rating values, with only one rating option selectable at a time.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Filters/Rating.tsx\n```\n\n----------------------------------------\n\nTITLE: Deletable SfChip Behavior in Vue\nDESCRIPTION: Example showing how to implement deletable chip behavior in Vue by handling change events. When a chip is clicked, it can be removed from the array of chips by its index.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Chip/Deletable.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SfChip with Different Sizes in React\nDESCRIPTION: Example of SfChip component with different size options ('sm' and 'base') in React. The component is rendered with various styles to demonstrate the available size configurations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Chip/ChipSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Invalid State Textarea Implementation in Vue\nDESCRIPTION: Example showing how to implement a textarea in an invalid state using Vue, using the invalid prop to apply appropriate styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Textarea/TextareaInvalid.vue\n```\n\n----------------------------------------\n\nTITLE: Rating Values Implementation in React\nDESCRIPTION: Example demonstrating how to handle different rating values and half increments in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Rating/RatingValues.tsx\n```\n\n----------------------------------------\n\nTITLE: Customizing RatingButton Icons in React\nDESCRIPTION: Example demonstrating how to use render functions to customize icons in the RatingButton component in React, with access to useful props for icon management.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RatingButton/CustomIcon.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Price Range Filters in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement price range filters in a Vue application using Storefront UI components. This allows users to filter products by setting minimum and maximum price values.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Price.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Vue AccordionItem Implementation\nDESCRIPTION: Basic implementation of AccordionItem component in Vue, demonstrating the usage of modelValue prop for controlling accordion state.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/AccordionItem/BasicAccordion.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Alert in React\nDESCRIPTION: Example of a warning alert implementation in React/TSX that includes both title and description content for more detailed notifications.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Alert/AlertWarning.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with White Background and Simple Mobile Bar in Vue\nDESCRIPTION: Vue implementation of NavbarTop with a white background and simplified mobile navigation. This variant is designed to work with NavbarBottom for a cohesive mobile navigation experience, providing intuitive access to navigation options on mobile devices.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/NavbarTop/NavbarTopSimpleMobile.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants in React\nDESCRIPTION: Shows how to use different style variants of the SfButton component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonVariants.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox with Leading Label\nDESCRIPTION: Implementation of a checkbox with label aligned to the left in Vue, utilizing Tailwind's peer modifiers for label styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkbox/CheckboxLeading.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Content in React\nDESCRIPTION: Shows how to add custom content before and after the main button content in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonContent.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in React with TypeScript\nDESCRIPTION: React implementation with TypeScript for the Pagination component. This showcases how to integrate pagination functionality when displaying large sets of data across multiple pages.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Pagination/Pagination.tsx\n```\n\n----------------------------------------\n\nTITLE: LoaderCircular Colors Example in React\nDESCRIPTION: Example demonstrating how to customize the colors of the SfLoaderCircular component in React. Shows how to override the default primary-700 and neutral-300 colors.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/LoaderCircular/LoaderCircularColors.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Card Component in React\nDESCRIPTION: This React TSX code shows how to implement a Category Card component with circular images and category titles. Similar to the Vue version, the entire card functions as a clickable element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Card/CategoryCard.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Peer-Next Classes in HTML\nDESCRIPTION: Example HTML form demonstrating usage of peer-next classes for form validation styling. Shows how to target adjacent siblings with peer-next modifier classes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/tw-plugin-peer-next/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <label class=\"block\">\n    <span class=\"block text-sm font-medium text-slate-700\">Email</span>\n    <input type=\"email\" class=\"peer-next ...\"/>\n    <p class=\"invisible mt-2 text-sm text-pink-600 peer-next-invalid:visible\">\n      Please provide a valid email address.\n    </p>\n  </label>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic QuantitySelector Implementation in Vue\nDESCRIPTION: Shows the basic implementation of the QuantitySelector component in Vue. This component allows users to increment or decrement a numeric value.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/QuantitySelector/QuantitySelector.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Preselected Option in React\nDESCRIPTION: Example of a SelectDropdown component in React with a preselected option. This implementation shows how to set up the component with a predefined selection in React/TSX.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/SelectDropdown/SelectDropdownPreselected.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Sizes in React\nDESCRIPTION: Shows the implementation of SfSelect with various sizes in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Select/SelectSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Readonly Textarea Implementation in React\nDESCRIPTION: Example of implementing a readonly textarea component in React, demonstrating the readonly attribute with SfTextarea.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Textarea/TextareaReadonly.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic SfInput Component Usage in React\nDESCRIPTION: Demonstrates the basic usage of SfInput component in React, showcasing different sizes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputWithoutLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ProductSlider in Vue\nDESCRIPTION: Example implementation of a basic ProductSlider component in Vue. The component provides a scrollable interface for displaying product cards with navigation functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductSlider.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProductSlider/Basic.vue\n```\n\n----------------------------------------\n\nTITLE: Invalid State SfInput in Vue\nDESCRIPTION: Shows how to set and style an invalid state for SfInput in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputInvalid.vue\n```\n\n----------------------------------------\n\nTITLE: SfSelect React Component Implementation\nDESCRIPTION: The complete source code for the SfSelect component in React, including all props and functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfSelect/SfSelect.tsx\n```\n\n----------------------------------------\n\nTITLE: Invalid State Handling in React Select\nDESCRIPTION: Demonstrates handling and styling the invalid state of SfSelect in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Select/SelectInvalid.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic QuantitySelector Implementation in React\nDESCRIPTION: Shows the basic implementation of the QuantitySelector component in React/TypeScript. This component allows users to increment or decrement a numeric value.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/QuantitySelector/QuantitySelector.tsx\n```\n\n----------------------------------------\n\nTITLE: Radio with Leading Control in React\nDESCRIPTION: Implementation of SfRadio with a label positioned after the radio control in React. This demonstrates the leading control pattern for radio buttons with proper labeling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Radio/RadioLeading.tsx\n```\n\n----------------------------------------\n\nTITLE: Radio Group Alignment in React\nDESCRIPTION: Demonstration of radio components aligned in column or row layouts within a RadioGroup in React. This example shows different alignment options for organizing radio buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RadioGroup/RadioGroupAlignment.tsx\n```\n\n----------------------------------------\n\nTITLE: Readonly Textarea Implementation in Vue\nDESCRIPTION: Example of implementing a readonly textarea component in Vue, demonstrating the readonly attribute with SfTextarea.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Textarea/TextareaReadonly.vue\n```\n\n----------------------------------------\n\nTITLE: SfInput with Icons in Vue\nDESCRIPTION: Shows how to add icons to the SfInput component using prefix and suffix slots in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputIcons.vue\n```\n\n----------------------------------------\n\nTITLE: SfInput with Icons in React\nDESCRIPTION: Shows how to add icons to the SfInput component using slotPrefix and slotSuffix props in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputIcons.tsx\n```\n\n----------------------------------------\n\nTITLE: React Implementation of LoaderLinearColors Showcase\nDESCRIPTION: React example showing how to customize the colors of the SfLoaderLinear component. Demonstrates overriding the default primary-700 and neutral-300 colors.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/LoaderLinear/LoaderLinearColors.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Truncated ListItem in React\nDESCRIPTION: Demonstrates the implementation of a truncated list item using the SfListItem component and Tailwind's truncate class in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ListItem/ListItemTruncated.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Truncated ListItem in Vue\nDESCRIPTION: Shows how to create a truncated list item using the SfListItem component and Tailwind's truncate class in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ListItem/ListItemTruncated.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Card Component in Vue\nDESCRIPTION: This Vue code demonstrates the implementation of a Category Card component with circular images and category titles. The entire card is designed to be clickable as a single element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Card/CategoryCard.vue\n```\n\n----------------------------------------\n\nTITLE: LoaderCircular Colors Example in Vue\nDESCRIPTION: Example demonstrating how to customize the colors of the SfLoaderCircular component in Vue. Shows how to override the default primary-700 and neutral-300 colors.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/LoaderCircular/LoaderCircularColors.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown with Placeholder in Vue\nDESCRIPTION: Example of using a placeholder in a Vue SelectDropdown component. This implementation shows how to add informative placeholder text for better user experience.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/SelectDropdown/SelectDropdownWithPlaceholder.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown in Disabled State in React\nDESCRIPTION: Example of a disabled SelectDropdown component in React. This setup shows how to implement a disabled dropdown with proper accessibility attributes in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/SelectDropdown/SelectDropdownDisabled.tsx\n```\n\n----------------------------------------\n\nTITLE: Using SfButton as a Link in React\nDESCRIPTION: Demonstrates how to use the SfButton component as a link in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonAsLink.tsx\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea Implementation in React\nDESCRIPTION: Example of implementing a disabled textarea component in React, showing how to use the SfTextarea component with the disabled attribute.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Textarea/TextareaDisabled.tsx\n```\n\n----------------------------------------\n\nTITLE: React Checkbox with Leading Label\nDESCRIPTION: Implementation of a checkbox with label aligned to the left in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkbox/CheckboxLeading.tsx\n```\n\n----------------------------------------\n\nTITLE: QuantitySelector with Out of Stock State in React\nDESCRIPTION: Shows how the QuantitySelector component behaves when items are out of stock in React/TypeScript. This example demonstrates handling inventory limitations in the UI.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/QuantitySelector/OutOfStock.tsx\n```\n\n----------------------------------------\n\nTITLE: React Checkbox with Trailing Label\nDESCRIPTION: Implementation of a checkbox with label aligned to the right in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkbox/CheckboxTrailing.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic React Scrollable Implementation\nDESCRIPTION: Basic implementation of useScrollable hook in React showing how to create a scrollable container with previous and next navigation buttons using containerRef and button props.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useScrollable.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useScrollable } from '@storefront-ui/react';\n\nfunction BasicScrollable(props: Props) {\n  const { containerRef, state, getNextButtonProps, getPrevButtonProps } = useScrollable();\n\n  return (\n    <div className=\"flex items-center\">\n      <button {...getPrevButtonProps()}>previous</button>\n      <div ref={containerRef}>\n        {Array.from({ length: itemsLength }, (_, i) => (\n          <div\n            key={i}\n          >\n            thumbnail {i + 1}\n          </div>\n        ))}\n      </div>\n      <button {...getNextButtonProps()}>next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SfLoaderCircular Implementation in React\nDESCRIPTION: Source code for the SfLoaderCircular component implementation in React. Contains the component structure, props definition, and styling for the animated circular loader.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfLoaderCircular/SfLoaderCircular.tsx\n```\n\n----------------------------------------\n\nTITLE: SfRadio Component Implementation in React\nDESCRIPTION: The source code implementation of the SfRadio component in React using TypeScript. This defines the component's props, structure, and functionality for the custom radio input.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfRadio/SfRadio.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Variants in Vue\nDESCRIPTION: Shows how to use different style variants of the SfButton component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonVariants.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Leading Control in Vue\nDESCRIPTION: This code snippet demonstrates how to implement the SfSwitch component with a leading control (label on the right) in a Vue application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Switch/SwitchLeading.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Leading Control in React\nDESCRIPTION: This snippet shows how to use the SfSwitch component with a leading control (label on the right) in a React application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Switch/SwitchLeading.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Sizes in Vue\nDESCRIPTION: Demonstrates how to use the SfSelect component with different sizes in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Select/SelectSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Radio with Trailing Control in React\nDESCRIPTION: Implementation of SfRadio with a label positioned before the radio control in React. This shows how to implement the trailing control pattern for radio buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Radio/RadioTrailing.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Focus Trap Implementation\nDESCRIPTION: Example demonstrating focus trap implementation in a Vue component using useTrapFocus composable. Shows how to create a container with focusable elements where keyboard focus will be trapped.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useTrapFocus.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { useTrapFocus } from '@storefront-ui/vue';\n\nconst focusTrapElementRef = ref<HTMLDivElement>();\nuseTrapFocus(focusTrapElementRef)\n</script>\n\n<template>\n  <div ref=\"focusTrapElementRef\">\n    This container has <a href=\"#\">Focusable anchor</a> and another <button>Focusable button</button> or <span class=\"focus:outline\" tabindex=\"0\">Focusable span</span>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatars in Vue\nDESCRIPTION: Example of placing Badges on user avatars in Vue, a common use case for the Badge component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Badge/BadgeAvatar.vue\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Outline in React\nDESCRIPTION: Example of adding an outline to the Badge in React that separates it from an element, creating a more attractive visual effect.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Badge/BadgeOutline.tsx\n```\n\n----------------------------------------\n\nTITLE: SfSwitch Component Implementation in Vue\nDESCRIPTION: This snippet contains the full implementation of the SfSwitch component for Vue. It includes all the props, events, and template structure for the switch control.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfSwitch/SfSwitch.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Variants in React\nDESCRIPTION: Shows the implementation of SfLink component with different variants in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Link/LinkVariants.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with Filled Background in React\nDESCRIPTION: React implementation of the NavbarTop with a filled background, offering the same navigation functionality with a stronger visual appearance through the colored background.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/NavbarTop/NavbarTopFilled.tsx\n```\n\n----------------------------------------\n\nTITLE: SfBadge Component Implementation in Vue\nDESCRIPTION: Source code for the SfBadge component implementation in Vue framework, showing the component's structure and functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfBadge/SfBadge.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with Trailing Control in Vue\nDESCRIPTION: This code demonstrates the implementation of the SfSwitch component with a trailing control (label on the left) in a Vue application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Switch/SwitchTrailing.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useDisclosure in Vue\nDESCRIPTION: Shows how to implement the useDisclosure hook in a Vue component to manage visibility state with open, close, and toggle methods.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDisclosure.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { SfButton, useDisclosure } from '@storefront-ui/vue';\n\nconst { isOpen, toggle, open, close } = useDisclosure();\n</script>\n\n<template>\n  <SfButton @click=\"open\">Open</SfButton>\n  <SfButton @click=\"close\">Close</SfButton>\n  <SfButton @click=\"toggle()\">Toggle</SfButton>\n  <p v-if=\"isOpen\">This text shows when isOpen value is true.</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with Hidden Scrollbar in React\nDESCRIPTION: Example of using SfScrollable component with hidden scrollbar functionality in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Scrollable/HideScrollbar.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Card Component in React\nDESCRIPTION: This React TSX code shows how to implement a Default Card component with rectangular images, titles, descriptions, and action buttons. It includes the same tabbing and clickable functionality as the Vue version.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Card/CardDefault.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in React\nDESCRIPTION: A basic example of the SfTooltip component usage in React, displaying a tooltip when hovering over an element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Tooltip/BasicTooltip.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue ProgressLinear Component Implementation\nDESCRIPTION: Vue component implementation of SfProgressLinear that renders a customizable progress bar using native <progress> element. Supports different sizes and custom colors through Tailwind classes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresslinear.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <progress\n    :class=\"[\n      styles.base,\n      styles.size[size],\n    ]\"\n    :value=\"value\"\n    max=\"100\"\n    :aria-label=\"ariaLabel\"\n  />\n</template>\n\n<script lang=\"ts\" setup>\nwithdDefaults(defineProps<{\n  value?: number;\n  size?: SfProgressLinearSize | SfProgressSize;\n  ariaLabel?: string;\n}>(), {\n  value: 0,\n  size: 'base',\n  ariaLabel: 'Progress linear'\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Truncating Button Content in React\nDESCRIPTION: Demonstrates how to truncate button content using Tailwind CSS classes in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonTruncation.tsx\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with Filled Background in Vue\nDESCRIPTION: Implementation of a NavbarTop component with a filled background in Vue. This variant provides the same navigation functionality but with a colored background for stronger visual impact.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/NavbarTop/NavbarTopFilled.vue\n```\n\n----------------------------------------\n\nTITLE: Badge Placement in Vue\nDESCRIPTION: Examples of different Badge placement options in Vue, demonstrating how to align the Badge in every corner of the container.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Badge/BadgePlacement.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing SfLink in React\nDESCRIPTION: Demonstrates customization of the SfLink component in a React application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Link/Customization.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-width Button in Vue\nDESCRIPTION: Shows how to create a full-width button using Tailwind CSS classes in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonBlock.vue\n```\n\n----------------------------------------\n\nTITLE: Animated React AccordionItem\nDESCRIPTION: React implementation of AccordionItem with smooth transition animations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/AccordionItem/AccordionAnimate.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Base MegaMenu in React\nDESCRIPTION: Code snippet demonstrating how to implement a basic MegaMenu component in React. When a user clicks on a trigger element, the mega menu opens, and on mobile screens, clicking the hamburger button triggers a drawer from the left side.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/MegaMenu.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/MegaMenu/BaseMegaMenu.tsx\n```\n\n----------------------------------------\n\nTITLE: Invalid State Textarea Implementation in React\nDESCRIPTION: Example showing how to implement a textarea in an invalid state using React, using the invalid prop to apply appropriate styling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Textarea/TextareaInvalid.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Component in Vue\nDESCRIPTION: Example of creating a custom tooltip component in Vue using useTooltip composable. Shows how to implement a tooltip with props binding, transitions, and styling using Vue's template syntax.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useTooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { toRefs } from 'vue';\nimport { useTooltip } from '@storefront-ui/vue';\n\nconst props = defineProps({\n  label: {\n    type: String,\n    default: '',\n  },\n});\n\nconst { label } = toRefs(props);\nconst { isOpen, triggerProps, tooltipProps, arrowProps } = useTooltip();\n</script>\n\n<template>\n  <span v-bind=\"triggerProps\">\n    <slot />\n    <div\n      v-if=\"label && isOpen\"\n      class=\"bg-green-800 p-1 rounded text-white w-max transition-opacity duration-300\"\n      v-bind=\"tooltipProps\"\n    >\n      {{ label }}\n      <span v-bind=\"arrowProps\" class=\"bg-green-800 w-[8px] h-[8px] rotate-45\" />\n    </div>\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Typography Package Version Updates\nDESCRIPTION: Markdown changelog documenting version updates from 2.4.0 to 2.6.1, including dependency updates, styling rule changes, and addition of new typography classes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @storefront-ui/typography\n\n## 2.6.1\n\n### Patch Changes\n\n- [#3132](https://github.com/vuestorefront/storefront-ui/pull/3132) [`19fa774`](https://github.com/vuestorefront/storefront-ui/commit/19fa774b38a05801256ced7c8af7731ea19defb9) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Update dependencies\n\n## 2.6.0\n\n### Minor Changes\n\n- [#3070](https://github.com/vuestorefront/storefront-ui/pull/3070) [`e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6`](https://github.com/vuestorefront/storefront-ui/commit/e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change general rules for styling\n\n## 2.5.0\n\n### Minor Changes\n\n- [#3070](https://github.com/vuestorefront/storefront-ui/pull/3070) [`e15a3f6cb`](https://github.com/vuestorefront/storefront-ui/commit/e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change general rules for styling\n\n## 2.4.0\n\n### Minor Changes\n\n- [#3006](https://github.com/vuestorefront/storefront-ui/pull/3006) [`c753696d1`](https://github.com/vuestorefront/storefront-ui/commit/c753696d1a9a84be11072b58035febfd1bee215e) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Add typography-hint-xs and typography-error-xs classes\n```\n\n----------------------------------------\n\nTITLE: Rating Values Implementation in Vue\nDESCRIPTION: Example demonstrating how to handle different rating values and half increments in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Rating/RatingValues.vue\n```\n\n----------------------------------------\n\nTITLE: Controlled React Scrollable Implementation\nDESCRIPTION: Advanced implementation of useScrollable in React using controlled navigation with showNext and showPrev methods, including disabled state handling.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useScrollable.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useScrollable } from '@storefront-ui/react';\n\nfunction BasicScrollable(props: Props) {\n  const { containerRef, state, showNext, showPrev } = useScrollable();\n\n  return (\n    <div className=\"flex items-center\">\n      <button onClick={showPrev()} disabled={!state.hasPrev}>previous</button>\n      <div ref={containerRef}>\n        {Array.from({ length: itemsLength }, (_, i) => (\n          <div\n            key={i}\n          >\n            thumbnail {i + 1}\n          </div>\n        ))}\n      </div>\n      <button onClick={showNext()} disabled={!state.hasNext}>next</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Radio with Trailing Control in Vue\nDESCRIPTION: Implementation of SfRadio with a label positioned before the radio control in Vue. This alternative layout places the control at the end rather than the beginning.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Radio/RadioTrailing.vue\n```\n\n----------------------------------------\n\nTITLE: Creating a Full-width Button in React\nDESCRIPTION: Shows how to create a full-width button using Tailwind CSS classes in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonBlock.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Sizes in React\nDESCRIPTION: Demonstrates how to use the SfButton component with different sizes in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Button/ButtonSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Invalid State SfInput in React\nDESCRIPTION: Shows how to set and style an invalid state for SfInput in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputInvalid.tsx\n```\n\n----------------------------------------\n\nTITLE: Radio Without Label in React\nDESCRIPTION: A simple implementation of the SfRadio component without a label in React. This example shows the basic usage of the radio component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Radio/RadioWithoutLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: Radio Without Label in Vue\nDESCRIPTION: A simple implementation of the SfRadio component without a label in Vue. This basic example demonstrates how to use the radio component in its simplest form.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Radio/RadioWithoutLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Implementation in Vue\nDESCRIPTION: A basic example of the SfTooltip component usage in Vue, displaying a tooltip when hovering over an element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Tooltip/BasicTooltip.vue\n```\n\n----------------------------------------\n\nTITLE: Previous Version Update Entry in Markdown\nDESCRIPTION: Changelog entry for version 2.4.0 showing styling changes and font updates.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/config/tailwind/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.0\n\n### Minor Changes\n\n- [#3070](https://github.com/vuestorefront/storefront-ui/pull/3070) [`e15a3f6cb`](https://github.com/vuestorefront/storefront-ui/commit/e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change general rules for styling\n\n### Patch Changes\n\n- [#3073](https://github.com/vuestorefront/storefront-ui/pull/3073) [`a40579d26`](https://github.com/vuestorefront/storefront-ui/commit/a40579d26c2912c5d4d05e1a833801e3e87901b3) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change `Inter Display` into `Inter`\n```\n\n----------------------------------------\n\nTITLE: Rating Sizes Implementation in Vue\nDESCRIPTION: Example showing different size variations of the SfRating component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Rating/RatingSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Icons in Storefront UI\nDESCRIPTION: This snippet demonstrates how to create a component that displays all available icons in Storefront UI. It includes functionality to copy icon names to clipboard when clicked.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/IconBase/ListOfIcons.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/IconBase/ListOfIcons.tsx\n```\n\n----------------------------------------\n\nTITLE: Rating Colors Implementation in React\nDESCRIPTION: Example showing how to customize colors for the SfRating component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Rating/RatingColors.tsx\n```\n\n----------------------------------------\n\nTITLE: Truncating Button Content in Vue\nDESCRIPTION: Demonstrates how to truncate button content using Tailwind CSS classes in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonTruncation.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering ProgressCircular with Various Sizes in React\nDESCRIPTION: This snippet demonstrates how to use SfProgressCircular with different sizes in a React component. It showcases the 'xs', 'sm', 'base', 'lg', 'xl', '2xl', '3xl', and '4xl' size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProgressCircular/ProgressCircularSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Alert in React\nDESCRIPTION: Example of a secondary alert implementation in React/TSX that is more noticeable than the neutral type while still being informative.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Alert/AlertSecondary.tsx\n```\n\n----------------------------------------\n\nTITLE: Adjusting Maximum Rating Score in React\nDESCRIPTION: Example showing how to set a custom maximum rating score using the max prop in React, allowing for a different number of rating options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RatingButton/MaxNumber.tsx\n```\n\n----------------------------------------\n\nTITLE: Using SfButton as a Link in Vue\nDESCRIPTION: Demonstrates how to use the SfButton component as a link in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonAsLink.vue\n```\n\n----------------------------------------\n\nTITLE: Installing StorefrontUI Typography Plugin\nDESCRIPTION: NPM installation command for the StorefrontUI typography plugin\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storefront-ui/typography\n```\n\n----------------------------------------\n\nTITLE: Rating Sizes Implementation in React\nDESCRIPTION: Example showing different size variations of the SfRating component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Rating/RatingSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SVG Icons in Storefront UI\nDESCRIPTION: This example shows how to use the SfIconBase component to display custom SVG icons. For Vue, content can be passed via the 'content' prop or as a default slot. For React, content is passed as children.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/IconBase/CustomIcon.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/IconBase/CustomIcon.tsx\n```\n\n----------------------------------------\n\nTITLE: Invalid State Handling in Vue Select\nDESCRIPTION: Shows how to implement and style the invalid state of SfSelect in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Select/SelectInvalid.vue\n```\n\n----------------------------------------\n\nTITLE: Rounded SfChip Without Label in React\nDESCRIPTION: Example of the SfChip component with the square prop that sets equal paddings on all sides to create a rounded chip appearance. This example demonstrates usage without a text label in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Chip/WithoutLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Component in React\nDESCRIPTION: Example of basic SfCounter usage in React, showing different sizes and implementations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SfCounter } from '@storefront-ui/react';\n\nexport default function CounterExample() {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"typography-text-sm\">Different sizes:</div>\n      <div className=\"flex flex-wrap items-end gap-2\">\n        <div className=\"flex items-center gap-1\">\n          <span>3xs</span>\n          <SfCounter size=\"3xs\">123</SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>2xs</span>\n          <SfCounter size=\"2xs\">123</SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>xs</span>\n          <SfCounter size=\"xs\">123</SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>sm</span>\n          <SfCounter size=\"sm\">123</SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>base</span>\n          <SfCounter size=\"base\">123</SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>lg</span>\n          <SfCounter size=\"lg\">123</SfCounter>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Positive Alert in React\nDESCRIPTION: Example of a positive alert implementation in React/TSX with green color indicating a successful action.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Alert/AlertPositive.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItem Sizes in React\nDESCRIPTION: Shows the implementation of SfListItem with various sizes in React. The example includes small, base, and large sizes of the list item.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ListItem/ListItemSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Using ListItem Slots in Vue\nDESCRIPTION: Illustrates how to use prefix and suffix slots in the SfListItem component for Vue. This allows adding custom content before and after the main content.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ListItem/ListItemSlots.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Feature Component in Vue\nDESCRIPTION: This Vue code demonstrates the implementation of a Card Feature component that has only a button for interaction. It's a simplified card variation focused on a single action.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Card.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Card/CardFeature.vue\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 2.5.1\nDESCRIPTION: Documents dependency updates in version 2.5.1 patch release\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/shared/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.1\n\n### Patch Changes\n\n- [#3132](https://github.com/vuestorefront/storefront-ui/pull/3132) [`19fa774`](https://github.com/vuestorefront/storefront-ui/commit/19fa774b38a05801256ced7c8af7731ea19defb9) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Update dependencies\n```\n\n----------------------------------------\n\nTITLE: ProgressCircular with Floating Label in React\nDESCRIPTION: This snippet demonstrates how to add a floating label to the center of SfProgressCircular in a React component. It uses children props to insert SVG-compatible content inside the progress circle.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProgressCircular/ProgressCircularFloatingLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: LoaderCircular Sizes Example in React\nDESCRIPTION: Example showcasing different size options for the SfLoaderCircular component in React. Demonstrates the various predefined sizes from 'xs' to '4xl'.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/LoaderCircular/LoaderCircularSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RatingButton in React\nDESCRIPTION: Example of basic implementation of the RatingButton component in React, showing how to provide a state to make it work.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RatingButton/Basic.tsx\n```\n\n----------------------------------------\n\nTITLE: Animated Modal Transition in Vue\nDESCRIPTION: Example showing how to implement smooth transition animations for SfModal in Vue when opening and closing.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/modal.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Modal/ModalTransition.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SfChip with Different Sizes in Vue\nDESCRIPTION: Example of SfChip component with different size options ('sm' and 'base') in Vue. The component is rendered with various styles to demonstrate the available size configurations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Chip/ChipSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Positive Alert in Vue\nDESCRIPTION: Example of a positive alert implementation in Vue with green color indicating a successful action.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Alert/AlertPositive.vue\n```\n\n----------------------------------------\n\nTITLE: Readonly SfInput in React\nDESCRIPTION: Demonstrates the readonly state of SfInput component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputReadonly.tsx\n```\n\n----------------------------------------\n\nTITLE: ProgressCircular with Floating Label in Vue\nDESCRIPTION: This snippet demonstrates how to add a floating label to the center of SfProgressCircular in a Vue component. It uses the default slot to insert SVG-compatible content inside the progress circle.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProgressCircular/ProgressCircularFloatingLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Generating Icons Command for StorefrontUI\nDESCRIPTION: Commands to install dependencies and generate icons from SVG assets in the StorefrontUI package. First requires running yarn for dependency installation, followed by the icon generation command.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn generate-icons\n```\n\n----------------------------------------\n\nTITLE: Customizing ProgressCircular Colors in Vue\nDESCRIPTION: This example shows how to customize the colors of SfProgressCircular in a Vue component. It demonstrates overriding the default color values for the progress and background elements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProgressCircular/ProgressCircularColors.vue\n```\n\n----------------------------------------\n\nTITLE: React Implementation of LoaderLinearSizes Showcase\nDESCRIPTION: React example showing different size options for the SfLoaderLinear component. Demonstrates various predefined sizes from minimal to 4xl.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_1\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/LoaderLinear/LoaderLinearSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox Without Label Implementation\nDESCRIPTION: Example of a basic checkbox implementation without a label in Vue, using v-model for value binding.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkbox/CheckboxWithoutLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Chevron in Vue Select\nDESCRIPTION: Illustrates how to customize the chevron in SfSelect using Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Select/SelectCustomChevron.vue\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatars in React\nDESCRIPTION: Example of placing Badges on user avatars in React, a common use case for the Badge component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Badge/BadgeAvatar.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering ProgressCircular with Various Sizes in Vue\nDESCRIPTION: This snippet demonstrates how to use SfProgressCircular with different sizes in a Vue component. It showcases the 'xs', 'sm', 'base', 'lg', 'xl', '2xl', '3xl', and '4xl' size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProgressCircular/ProgressCircularSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Implementation of useFocusVisible Composable in Vue\nDESCRIPTION: This TypeScript code implements the useFocusVisible composable for Vue. It manages focus visibility state based on user interactions and provides a boolean value indicating whether keyboard focus is visible.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useFocusVisible.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, onMounted, onUnmounted } from 'vue';\n\ninterface UseFocusVisibleProps {\n  isTextInput?: boolean;\n  autoFocus?: boolean;\n}\n\nexport function useFocusVisible({\n  isTextInput = false,\n  autoFocus = false,\n}: UseFocusVisibleProps = {}) {\n  const hadKeyboardEvent = ref(false);\n  const hadFocusVisibleRecently = ref(false);\n  const hadFocusVisibleRecentlyTimeout = ref<number | null>(null);\n\n  const isFocusVisible = ref(autoFocus);\n\n  function inputModal(event: KeyboardEvent) {\n    if (event.metaKey || event.altKey || event.ctrlKey) {\n      return;\n    }\n\n    if (event.code === 'Tab') {\n      hadKeyboardEvent.value = true;\n    }\n  }\n\n  function visibilityChange() {\n    if (document.visibilityState === 'hidden') {\n      if (hadFocusVisibleRecently.value) {\n        hadKeyboardEvent.value = true;\n      }\n    }\n  }\n\n  function onPointerDown() {\n    hadKeyboardEvent.value = false;\n  }\n\n  function onInitialPointerMove(event: PointerEvent) {\n    if (event.target && (event.target as HTMLElement).matches(':focus-visible')) {\n      hadKeyboardEvent.value = true;\n    }\n  }\n\n  function handleFocus(event: FocusEvent) {\n    if (event.target && (event.target as HTMLElement).matches(':focus-visible')) {\n      if (hadKeyboardEvent.value || isTextInput) {\n        isFocusVisible.value = true;\n        hadFocusVisibleRecently.value = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout.value as number);\n        hadFocusVisibleRecentlyTimeout.value = window.setTimeout(() => {\n          hadFocusVisibleRecently.value = false;\n          window.clearTimeout(hadFocusVisibleRecentlyTimeout.value as number);\n        }, 100);\n      }\n    }\n  }\n\n  function handleBlur() {\n    if (hadFocusVisibleRecently.value) {\n      isFocusVisible.value = false;\n      hadKeyboardEvent.value = true;\n    }\n  }\n\n  onMounted(() => {\n    document.addEventListener('keydown', inputModal, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', visibilityChange, true);\n    document.addEventListener('pointermove', onInitialPointerMove, true);\n    document.addEventListener('focus', handleFocus, true);\n    document.addEventListener('blur', handleBlur, true);\n  });\n\n  onUnmounted(() => {\n    document.removeEventListener('keydown', inputModal, true);\n    document.removeEventListener('mousedown', onPointerDown, true);\n    document.removeEventListener('pointerdown', onPointerDown, true);\n    document.removeEventListener('touchstart', onPointerDown, true);\n    document.removeEventListener('visibilitychange', visibilityChange, true);\n    document.removeEventListener('pointermove', onInitialPointerMove, true);\n    document.removeEventListener('focus', handleFocus, true);\n    document.removeEventListener('blur', handleBlur, true);\n  });\n\n  return {\n    isFocusVisible,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea with Character Counter in React\nDESCRIPTION: Implementation of a textarea with character counting functionality in React, allowing users to track the number of characters they have entered.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Textarea/TextareaCharacters.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Peer-Next TailwindCSS Plugin\nDESCRIPTION: Command to install the peer-next plugin package via npm as a development dependency.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/tw-plugin-peer-next/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @storefront-ui/tw-plugin-peer-next\n```\n\n----------------------------------------\n\nTITLE: Radio with Leading Control in Vue\nDESCRIPTION: Implementation of SfRadio with a label positioned after the radio control in Vue. This follows best practices for radio inputs by including a descriptive label.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Radio/RadioLeading.vue\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Component in Vue\nDESCRIPTION: Example of basic SfCounter usage in Vue, showing different sizes and implementations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-2\">\n    <div class=\"typography-text-sm\">Different sizes:</div>\n    <div class=\"flex flex-wrap items-end gap-2\">\n      <div class=\"flex items-center gap-1\">\n        <span>3xs</span>\n        <SfCounter size=\"3xs\">123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>2xs</span>\n        <SfCounter size=\"2xs\">123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>xs</span>\n        <SfCounter size=\"xs\">123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>sm</span>\n        <SfCounter size=\"sm\">123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>base</span>\n        <SfCounter size=\"base\">123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>lg</span>\n        <SfCounter size=\"lg\">123</SfCounter>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing ProgressCircular Colors in React\nDESCRIPTION: This example shows how to customize the colors of SfProgressCircular in a React component. It demonstrates overriding the default color values for the progress and background elements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/ProgressCircular/ProgressCircularColors.tsx\n```\n\n----------------------------------------\n\nTITLE: List of SfChips in Vue\nDESCRIPTION: Example of implementing a list of SfChip components in Vue, demonstrating how to set attributes in the hidden checkbox input by passing an object to the inputProps prop.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Chip/ListOfChips.vue\n```\n\n----------------------------------------\n\nTITLE: Rendering ListItem Sizes in Vue\nDESCRIPTION: Demonstrates how to use the SfListItem component with different sizes in Vue. The example shows small, base, and large sizes of the list item.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/listitem.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ListItem/ListItemSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Content in Vue\nDESCRIPTION: Shows how to add custom content before and after the main button content in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Button/ButtonContent.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing SfLink in Vue\nDESCRIPTION: Illustrates how to customize the SfLink component in a Vue application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Link/Customization.vue\n```\n\n----------------------------------------\n\nTITLE: NavbarTop with Filled Background and Simple Mobile Bar in React\nDESCRIPTION: React implementation of NavbarTop featuring a filled background and simplified mobile navigation. This variant provides a colorful navigation experience while maintaining optimized mobile navigation capabilities.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarTop.md#2025-04-23_snippet_7\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/NavbarTop/NavbarTopFilledSimpleMobile.tsx\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 2.4.0\nDESCRIPTION: Details addition of SfBadge component, search blocks, and RatingButton component in version 2.4.0\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/shared/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.0\n\n### Minor Changes\n\n- [#2730](https://github.com/vuestorefront/storefront-ui/pull/2730) [`4094afe04`](https://github.com/vuestorefront/storefront-ui/commit/4094afe045b06a57c90f67826300aad95b1f5426) Thanks [@dkacper](https://github.com/dkacper)! - Added SfBadge component in react and vue\n\n- [#2746](https://github.com/vuestorefront/storefront-ui/pull/2746) [`74dfce2c8`](https://github.com/vuestorefront/storefront-ui/commit/74dfce2c8aab7e959de40672c787d489bfe31537) Thanks [@aniamusial](https://github.com/aniamusial)! - Added new search blocks with customized buttons\n\n- [#2833](https://github.com/vuestorefront/storefront-ui/pull/2833) [`623ed8ade`](https://github.com/vuestorefront/storefront-ui/commit/623ed8ade14c87ac1f29ab83a5ea53baf9fa6d22) Thanks [@github-actions](https://github.com/apps/github-actions)! - add RatingButton component (#2820)\n```\n\n----------------------------------------\n\nTITLE: Custom Background Counter in React\nDESCRIPTION: Example of SfCounter with custom background colors using Tailwind classes in React. Shows how to customize the appearance of the component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SfCounter } from '@storefront-ui/react';\n\nexport default function CounterCustomBackgroundExample() {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"typography-text-sm\">Custom background:</div>\n      <div className=\"flex flex-wrap items-end gap-2\">\n        <div className=\"flex items-center gap-1\">\n          <SfCounter size=\"lg\" className=\"bg-primary-500 text-white\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <SfCounter size=\"lg\" className=\"bg-negative-500 text-white\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <SfCounter size=\"lg\" className=\"bg-neutral-500 text-white\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <SfCounter size=\"lg\" className=\"bg-positive-500 text-white\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <SfCounter size=\"lg\" className=\"bg-warning-500 text-white\" pill>\n            123\n          </SfCounter>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Background Counter in Vue\nDESCRIPTION: Example of SfCounter with custom background colors using Tailwind classes in Vue. Shows how to customize the appearance of the component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-2\">\n    <div class=\"typography-text-sm\">Custom background:</div>\n    <div class=\"flex flex-wrap items-end gap-2\">\n      <div class=\"flex items-center gap-1\">\n        <SfCounter size=\"lg\" class=\"bg-primary-500 text-white\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <SfCounter size=\"lg\" class=\"bg-negative-500 text-white\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <SfCounter size=\"lg\" class=\"bg-neutral-500 text-white\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <SfCounter size=\"lg\" class=\"bg-positive-500 text-white\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <SfCounter size=\"lg\" class=\"bg-warning-500 text-white\" pill>123</SfCounter>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Checkbox with Trailing Label\nDESCRIPTION: Implementation of a checkbox with label aligned to the right in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Checkbox/CheckboxTrailing.vue\n```\n\n----------------------------------------\n\nTITLE: List of SfChips in React\nDESCRIPTION: Example of implementing a list of SfChip components in React, demonstrating how to set attributes in the hidden checkbox input by passing an object to the inputProps prop.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Chip/ListOfChips.tsx\n```\n\n----------------------------------------\n\nTITLE: useDisclosure with Initial Value in Vue\nDESCRIPTION: Shows how to use the useDisclosure hook with an initial open state by setting the initialValue option to true in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDisclosure.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { SfButton, useDisclosure } from '@storefront-ui/vue';\n\nconst { isOpen, toggle } = useDisclosure({ \n  initialValue: true\n});\n</script>\n\n<template>\n  <SfButton @click=\"toggle()\">Toggle</SfButton>\n  <p v-if=\"isOpen\">This will be open by default!</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: LoaderCircular Sizes Example in Vue\nDESCRIPTION: Example showcasing different size options for the SfLoaderCircular component in Vue. Demonstrates the various predefined sizes from 'xs' to '4xl'.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loadercircular.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/LoaderCircular/LoaderCircularSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Icon Size Options in Storefront UI\nDESCRIPTION: This example shows how to use different size variants of icons using the 'size' prop. Supported sizes include 'xs', 'sm', 'base', 'lg', 'xl', '2xl', '3xl', and '4xl'.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/IconBase/IconBaseSizes.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/IconBase/IconBaseSizes.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with Center Snap in React\nDESCRIPTION: Example of SfScrollable configured with center snap while dragging in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Scrollable/SnapCenter.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Neutral Alert in Vue\nDESCRIPTION: Example of a neutral alert implementation in Vue that displays a basic notification with a neutral grey color.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Alert/AlertNeutral.vue\n```\n\n----------------------------------------\n\nTITLE: Counter Pill Component in React\nDESCRIPTION: Example of SfCounter with pill style enabled in React. The pill style adds a border around the counter instead of parentheses.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SfCounter } from '@storefront-ui/react';\n\nexport default function CounterPillExample() {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"typography-text-sm\">Different sizes:</div>\n      <div className=\"flex flex-wrap items-end gap-2\">\n        <div className=\"flex items-center gap-1\">\n          <span>3xs</span>\n          <SfCounter size=\"3xs\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>2xs</span>\n          <SfCounter size=\"2xs\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>xs</span>\n          <SfCounter size=\"xs\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>sm</span>\n          <SfCounter size=\"sm\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>base</span>\n          <SfCounter size=\"base\" pill>\n            123\n          </SfCounter>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <span>lg</span>\n          <SfCounter size=\"lg\" pill>\n            123\n          </SfCounter>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsable Vue Accordion Group\nDESCRIPTION: Implementation of accordion group in Vue where only one item can be open at a time.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/AccordionItem/CollapsableAccordion.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Neutral Alert in React\nDESCRIPTION: Example of a neutral alert implementation in React/TSX that displays a basic notification with a neutral grey color.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Alert/AlertNeutral.tsx\n```\n\n----------------------------------------\n\nTITLE: Complete Typography Implementation Example\nDESCRIPTION: Provides a comprehensive example of all typography elements styled with the prose class.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/TypographyDefault.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/TypographyDefault.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with Hidden Scrollbar in Vue\nDESCRIPTION: Example of using SfScrollable component with hidden scrollbar functionality in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Scrollable/HideScrollbar.vue\n```\n\n----------------------------------------\n\nTITLE: QuantitySelector with Out of Stock State in Vue\nDESCRIPTION: Shows how the QuantitySelector component behaves when items are out of stock in Vue. This example demonstrates handling inventory limitations in the UI.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/QuantitySelector/OutOfStock.vue\n```\n\n----------------------------------------\n\nTITLE: Basic SfInput Component Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of SfInput component in Vue, showcasing different sizes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputWithoutLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Banner Display\nDESCRIPTION: Code example showing horizontal banner implementation with image and content side by side.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Banners.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Banners/DisplayHorizontal.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Banners/DisplayHorizontal.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Without Label in Vue\nDESCRIPTION: This snippet demonstrates how to use the SfSwitch component without a label in a Vue application. It shows the basic implementation of the switch control.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Switch/SwitchWithoutLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Legend in Vue\nDESCRIPTION: Example of a radio group with a legend element in Vue. The legend serves as a caption for the fieldset, providing context for the group of radio options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RadioGroup/RadioGroupWithLegend.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Alert in Vue\nDESCRIPTION: Example of a secondary alert implementation in Vue that is more noticeable than the neutral type while still being informative.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Alert.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Alert/AlertSecondary.vue\n```\n\n----------------------------------------\n\nTITLE: HTML Theme Class Comparison\nDESCRIPTION: Demonstrates the difference between using CSS variables versus Tailwind variants for theming. Shows how CSS variables can simplify theme implementation compared to explicit variant classes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nWithout CSS Variables, we need to specify the variant and color everywhere.\n<div class=\"bg-primary-500 dark:bg-gray-800\" />\n\nWith CSS Variables, we can use one class and change the color by changing the CSS variable\n<div class=\"bg-primary-500\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Variants in Vue\nDESCRIPTION: Demonstrates how to use SfLink component with different variants in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Link/LinkVariants.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Banner Display\nDESCRIPTION: Code example demonstrating vertical banner layout with image and content stacked vertically.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Banners.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Banners/DisplayVertical.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Banners/DisplayVertical.tsx\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Outline in Vue\nDESCRIPTION: Example of adding an outline to the Badge in Vue that separates it from an element, creating a more attractive visual effect.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Badge/BadgeOutline.vue\n```\n\n----------------------------------------\n\nTITLE: Creating Link Buttons in Vue\nDESCRIPTION: Demonstrates how to create a link button using the SfButton component in Vue. This snippet shows how to use the 'tag' prop to render the button as an anchor tag.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarBottom.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<SfButton tag=\"a\" href=\"#\">\n  Will render as an anchor tag\n</SfButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Without Label in React\nDESCRIPTION: This snippet shows the implementation of the SfSwitch component without a label in a React application. It demonstrates the basic usage of the switch control in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Switch/SwitchWithoutLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: Disabled SfInput in React\nDESCRIPTION: Illustrates the disabled state of SfInput component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Input/InputDisabled.tsx\n```\n\n----------------------------------------\n\nTITLE: React Focus Trap Implementation\nDESCRIPTION: Example showing how to implement focus trapping in a React component using useTrapFocus hook. Creates a container with focusable elements where keyboard focus will be trapped.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useTrapFocus.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useTrapFocus } from '@storefront-ui/react';\n\nfunction CustomTooltip(props: Props) {\n  const focusTrapElementRef = React.useRef(null);\n\n  useTrapFocus(focusTrapElementRef);\n\n  return (\n    <div ref={focusTrapElementRef}>\n      This container has <a href=\"#\">Focusable anchor</a> and another <button>Focusable button</button> or <span className=\"focus:outline\" tabindex=\"0\">Focusable span</span>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Headings in Vue/React\nDESCRIPTION: Demonstrates the application of prose class styling to heading elements (h1-h4) in both Vue and React implementations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Headings.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Headings.tsx\n```\n\n----------------------------------------\n\nTITLE: useDisclosure with Initial Value in React\nDESCRIPTION: Demonstrates how to initialize the useDisclosure hook with an open state by providing an initialValue parameter in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useDisclosure.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SfButton, useDisclosure } from '@storefront-ui/react';\n\nfunction OpenByDefault() {\n  const { isOpen, toggle } = useDisclosure({ \n    initialValue: true\n  });\n\n  return (\n    <>\n      <SfButton onClick={toggle}>Toggle</SfButton>\n      {isOpen && <p>This will be open by default!</p>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Typography\nDESCRIPTION: Shows implementation of blockquote styling with figcaption in Vue and React components.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Quote.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Quote.tsx\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RatingButton in Vue\nDESCRIPTION: Example of basic implementation of the RatingButton component in Vue, showing how to provide a state to make it work.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RatingButton/Basic.vue\n```\n\n----------------------------------------\n\nTITLE: React Checkbox Without Label Implementation\nDESCRIPTION: Example of a basic checkbox implementation without a label in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkbox/CheckboxWithoutLabel.tsx\n```\n\n----------------------------------------\n\nTITLE: Disabled SfInput in Vue\nDESCRIPTION: Illustrates the disabled state of SfInput component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputDisabled.vue\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea Implementation in Vue\nDESCRIPTION: Example of implementing a disabled textarea component in Vue, showing how to use the SfTextarea component with the disabled attribute.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Textarea/TextareaDisabled.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Group with Legend in React\nDESCRIPTION: Example of a radio group with a legend element in React. This implementation shows how to properly group related radio options with a descriptive legend.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RadioGroup/RadioGroupWithLegend.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Leading Text Typography\nDESCRIPTION: Shows how to implement leading text styling using the lead class in both Vue and React components.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Leading.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Leading.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Brand Filters in Vue for E-commerce\nDESCRIPTION: Code snippet showing how to implement brand filters in a Vue application using Storefront UI components. This allows users to filter products by selecting specific brand options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Filters.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Filters/Brand.vue\n```\n\n----------------------------------------\n\nTITLE: SfButton Component Implementation in Vue\nDESCRIPTION: The source code for the SfButton component implementation in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/button.md#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfButton/SfButton.vue\n```\n\n----------------------------------------\n\nTITLE: Custom Chevron in React Select\nDESCRIPTION: Demonstrates customizing the chevron in SfSelect for React applications.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/select.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Select/SelectCustomChevron.tsx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useFocusVisible with Input Components in React\nDESCRIPTION: This React code snippet demonstrates the usage of useFocusVisible hook with input components. It shows the difference between default focus behavior and focus-visible behavior.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/useFocusVisible.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\nimport { SfInput, useFocusVisible } from '@storefront-ui/react';\n\nexport default function InputWithFocusVisible() {\n  const [valueOne, setValueOne] = useState('');\n  const [valueTwo, setValueTwo] = useState('');\n  const { isFocusVisible } = useFocusVisible();\n\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <SfInput\n        value={valueOne}\n        onChange={(e) => setValueOne(e.target.value)}\n        wrapperClassName=\"max-w-sm\"\n      />\n      <SfInput\n        value={valueTwo}\n        onChange={(e) => setValueTwo(e.target.value)}\n        wrapperClassName={`max-w-sm ${isFocusVisible ? 'focus-visible:outline focus-visible:outline-offset' : 'focus:outline-none'}`}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly SfInput in Vue\nDESCRIPTION: Demonstrates the readonly state of SfInput component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/input.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Input/InputReadonly.vue\n```\n\n----------------------------------------\n\nTITLE: Single Star Rating Implementation in Vue\nDESCRIPTION: Example showing a minimal single star with text label implementation in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Rating/SingleStar.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectDropdown in Disabled State in Vue\nDESCRIPTION: Example of a disabled SelectDropdown component in Vue. This implementation demonstrates how to create a disabled dropdown with proper accessibility attributes (aria-disabled=\"true\").\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/SelectDropdown.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/SelectDropdown/SelectDropdownDisabled.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Paragraph Typography\nDESCRIPTION: Demonstrates paragraph styling implementation in Vue and React components using prose class.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Paragraph.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Paragraph.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Delivery Options Component in React\nDESCRIPTION: A React component that displays available delivery options for checkout. It allows customers to easily compare and select the best delivery method for their needs.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Checkout.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Checkout/CheckoutDeliveryOptions.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with Storefront UI Module\nDESCRIPTION: Configuration for adding the Storefront UI module to Nuxt project in the nuxt.config.ts file.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@storefront-ui/nuxt']\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Typography Theme Configuration\nDESCRIPTION: Example of extending the default typography theme with custom styles.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  plugins: [sfTypography],\n  theme: {\n    extend: {\n      sfTypography: ({ theme }) => ({\n        'headline-2': {\n          fontSize: theme('fontSize.4xl'),\n          lineHeight: '1.1',\n        },\n        'headline-8': {\n          fontSize: theme('fontSize.xs'),\n          lineHeight: theme('lineHeight.4'),\n          fontWeight: theme('fontWeight.light')\n        },\n      })\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Maximum Rating Score in Vue\nDESCRIPTION: Example showing how to set a custom maximum rating score using the max prop in Vue, allowing for a different number of rating options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RatingButton/MaxNumber.vue\n```\n\n----------------------------------------\n\nTITLE: Counter Pill Component in Vue\nDESCRIPTION: Example of SfCounter with pill style enabled in Vue. The pill style adds a border around the counter instead of parentheses.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/counter.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"space-y-2\">\n    <div class=\"typography-text-sm\">Different sizes:</div>\n    <div class=\"flex flex-wrap items-end gap-2\">\n      <div class=\"flex items-center gap-1\">\n        <span>3xs</span>\n        <SfCounter size=\"3xs\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>2xs</span>\n        <SfCounter size=\"2xs\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>xs</span>\n        <SfCounter size=\"xs\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>sm</span>\n        <SfCounter size=\"sm\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>base</span>\n        <SfCounter size=\"base\" pill>123</SfCounter>\n      </div>\n      <div class=\"flex items-center gap-1\">\n        <span>lg</span>\n        <SfCounter size=\"lg\" pill>123</SfCounter>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Detailed ProductCard View in Vue\nDESCRIPTION: This code demonstrates how to create a detailed ProductCard view in Vue for StorefrontUI. It can be used in product details pages or for building components that list products from multiple categories.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/ProductCard.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/ProductCard/Details.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families in Tailwind\nDESCRIPTION: Configuration example for setting custom font families in Tailwind config.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  theme: {\n    fontFamily: {\n      'sans': ['Inter', 'system-ui', ...],\n      'heading': ['Arial', 'Georgia', ...],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rounded SfChip Without Label in Vue\nDESCRIPTION: Example of the SfChip component with the square prop that sets equal paddings on all sides to create a rounded chip appearance. This example demonstrates usage without a text label in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Chip/WithoutLabel.vue\n```\n\n----------------------------------------\n\nTITLE: Vue Source Implementation of SfLoaderLinear Component\nDESCRIPTION: Source code for the Vue implementation of the SfLoaderLinear component. Shows the component structure, props definition, and rendering logic.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfLoaderLinear/SfLoaderLinear.vue\n```\n\n----------------------------------------\n\nTITLE: SfProgressCircular Component Implementation in Vue\nDESCRIPTION: This is the source code for the SfProgressCircular component implemented in Vue. It defines the component's props, computed properties, and template structure.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/progresscircular.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfProgressCircular/SfProgressCircular.vue\n```\n\n----------------------------------------\n\nTITLE: CSS Color Variables Definition\nDESCRIPTION: Example of defining CSS color variables for light and dark themes using RGB color channels. Shows how to implement theme switching using media queries.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --colors-primary-500: 10 171 69;\n}\n\n/* this may change depending on how you implement dark mode */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --colors-primary-500: 240 253 244;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with One Item Scrolling in Vue\nDESCRIPTION: Example of configuring SfScrollable to scroll by one item at a time when clicking next/previous buttons in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Scrollable/ScrollByOneItem.vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Vertical Banners\nDESCRIPTION: Code example showing implementation of multiple vertical banners arranged in a row for desktop view.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Banners.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Banners/DisplayVerticalMultiple.vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Banners/DisplayVerticalMultiple.tsx\n```\n\n----------------------------------------\n\nTITLE: Vue SfThumbnail Component Implementation\nDESCRIPTION: The Vue implementation of the SfThumbnail component that renders a thumbnail with different size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/thumbnail.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div\n    class=\"inline-flex rounded-md\"\n    :class=\"[\n      {\n        'h-6 w-6': size === 'sm',\n        'h-10 w-10': size === 'base',\n        'h-14 w-14': size === 'lg',\n      },\n    ]\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { type PropType } from 'vue';\nimport { SfThumbnailSize } from '@storefront-ui/shared';\n\ndefineProps({\n  size: {\n    type: String as PropType<SfThumbnailSize>,\n    default: 'base',\n  },\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Typography Theme\nDESCRIPTION: Example of completely overriding the default typography theme with custom configurations.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  plugins: [sfTypography],\n  theme: {\n    sfTypography: ({ theme }) => ({\n      'heading': {\n        fontSize: theme('fontSize.4xl'),\n        lineHeight: '1.1',\n      },\n      'label': {\n        fontSize: theme('fontSize.xs'),\n        lineHeight: theme('lineHeight.4'),\n        fontWeight: theme('fontWeight.light')\n      },\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: RatingButton Size Variations in Vue\nDESCRIPTION: Example demonstrating the three different sizes of RatingButton component in Vue, which correspond to different icon sizes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RatingButton/Sizes.vue\n```\n\n----------------------------------------\n\nTITLE: SfTooltip Component Implementation in React\nDESCRIPTION: The source code for the SfTooltip component in React, showing its implementation details including props and core functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/tooltip.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfTooltip/SfTooltip.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with Center Snap in Vue\nDESCRIPTION: Example of SfScrollable configured with center snap while dragging in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Scrollable/SnapCenter.vue\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Colors\nDESCRIPTION: Example of customizing StorefrontUI colors through Tailwind configuration by extending the theme colors object.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/theming.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  //...\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f5f9ff',\n          100: '#e9f3ff',\n          200: '#c8e0ff',\n          300: '#a6ccff',\n          400: '#6ea1ff',\n          500: '#3375ff',\n          600: '#2e6ae6',\n          700: '#264ebf',\n          800: '#1d3f99',\n          900: '#132f72',\n        }\n      },\n    },\n  },\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Tailwind CSS Base Configuration\nDESCRIPTION: Basic Tailwind CSS configuration file with required layer directives for base, components, and utilities.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* ~/assets/css/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Complete CSS Theme Variables\nDESCRIPTION: Full list of CSS variables defining the complete color palette including primary, secondary, positive, negative, warning, neutral, and disabled color scales.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/theming.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  /* Primary */\n  --colors-primary-50: 235 255 242;\n  --colors-primary-100: 217 253 228;\n  --colors-primary-200: 171 241 192;\n  --colors-primary-300: 130 234 158;\n  --colors-primary-400: 60 224 120;\n  --colors-primary-500: 19 195 96;\n  --colors-primary-600: 7 161 79;\n  --colors-primary-700: 13 127 63;\n  --colors-primary-800: 16 86 46;\n  --colors-primary-900: 15 50 30;\n\n  /* Secondary */\n  --colors-secondary-50: 247 245 253;\n  --colors-secondary-100: 239 236 251;\n  --colors-secondary-200: 225 218 246;\n  --colors-secondary-300: 216 203 245;\n  --colors-secondary-400: 198 177 246;\n  --colors-secondary-500: 180 151 249;\n  --colors-secondary-600: 151 111 238;\n  --colors-secondary-700: 119 79 209;\n  --colors-secondary-800: 82 52 153;\n  --colors-secondary-900: 48 32 86;\n\n  /* Positive */\n  --colors-positive-50: 235 255 242;\n  --colors-positive-100: 217 253 228;\n  --colors-positive-200: 171 241 192;\n  --colors-positive-300: 130 234 158;\n  --colors-positive-400: 60 224 120;\n  --colors-positive-500: 19 195 96;\n  --colors-positive-600: 7 161 79;\n  --colors-positive-700: 13 127 63;\n  --colors-positive-800: 16 86 46;\n  --colors-positive-900: 15 50 30;\n\n  /* Negative */\n  --colors-negative-50: 255 245 247;\n  --colors-negative-100: 255 232 237;\n  --colors-negative-200: 254 211 219;\n  --colors-negative-300: 253 193 202;\n  --colors-negative-400: 255 163 175;\n  --colors-negative-500: 255 127 143;\n  --colors-negative-600: 240 59 91;\n  --colors-negative-700: 208 13 48;\n  --colors-negative-800: 141 8 33;\n  --colors-negative-900: 76 15 23;\n\n  /* Warning */\n  --colors-warning-50: 254 247 236;\n  --colors-warning-100: 255 238 211;\n  --colors-warning-200: 254 220 165;\n  --colors-warning-300: 254 202 132;\n  --colors-warning-400: 255 181 77;\n  --colors-warning-500: 237 153 14;\n  --colors-warning-600: 191 121 17;\n  --colors-warning-700: 157 93 3;\n  --colors-warning-800: 109 63 9;\n  --colors-warning-900: 62 35 10;\n\n  /* Neutral */\n  --colors-neutral-50: 249 251 250;\n  --colors-neutral-100: 239 244 241;\n  --colors-neutral-200: 217 226 220;\n  --colors-neutral-300: 187 198 190;\n  --colors-neutral-400: 129 140 133;\n  --colors-neutral-500: 100 111 104;\n  --colors-neutral-600: 77 86 79;\n  --colors-neutral-700: 56 65 59;\n  --colors-neutral-800: 37 43 39;\n  --colors-neutral-900: 21 26 22;\n\n  /* Disabled */\n  --colors-disabled-50: 249 251 250;\n  --colors-disabled-100: 239 244 241;\n  --colors-disabled-200: 217 226 220;\n  --colors-disabled-300: 187 198 190;\n  --colors-disabled-400: 129 140 133;\n  --colors-disabled-500: 100 111 104;\n  --colors-disabled-600: 77 86 79;\n  --colors-disabled-700: 56 65 59;\n  --colors-disabled-800: 37 43 39;\n  --colors-disabled-900: 21 26 22;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typography Plugin in Tailwind\nDESCRIPTION: Basic configuration to add the typography plugin to Tailwind config file.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  //...\n  plugins: [sfTypography]\n};\n```\n\n----------------------------------------\n\nTITLE: Vue SfCheckbox Component Implementation\nDESCRIPTION: Core implementation of the SfCheckbox component in Vue.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfCheckbox/SfCheckbox.vue\n```\n\n----------------------------------------\n\nTITLE: Radio Group Alignment in Vue\nDESCRIPTION: Demonstration of radio components aligned in column or row layouts within a RadioGroup in Vue. This shows how to control the visual arrangement of radio buttons in a group.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RadioGroup/RadioGroupAlignment.vue\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Colors with Tailwind CSS in Storefront UI\nDESCRIPTION: This example demonstrates how to customize icon colors using Tailwind CSS text color classes. Icons inherit the current text color through the 'fill-current' class.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/iconbase.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/IconBase/IconBaseColors.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/IconBase/IconBaseColors.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuration Loading Priority\nDESCRIPTION: Specifies the order in which configuration files are loaded and applied in the StorefrontUI project. The brand color property is loaded according to this priority hierarchy.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/playground/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. tailwind.config\\n2. nuxt.config\\n3. default config\n```\n\n----------------------------------------\n\nTITLE: SfLink React Component Implementation\nDESCRIPTION: The source code for the SfLink component in React, detailing its implementation and available props.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfLink/SfLink.tsx\n```\n\n----------------------------------------\n\nTITLE: Pagination Parameters Configuration\nDESCRIPTION: Configuration parameters for pagination hook including total items, current page, page size, and maximum pages to display. Parameters should be passed as an object.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePagination.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationParams {\n  totalItems: number;     // total number of items to be displayed\n  currentPage?: number;   // current active page (default: 1)\n  pageSize?: number;      // number of items per page (default: 10)\n  maxPages?: number;      // maximum number of pages to display (default: 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Outline in Tailwind Configuration\nDESCRIPTION: Configuration example showing how to modify the default outline styles for interactive elements by setting outline properties in the Tailwind configuration file. This affects outline color, offset, and width for focused elements.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/overriding-default-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\nexport default {\n  theme: {\n    extend: {\n      outlineColor: {\n        DEFAULT: '#ff00ff', \n      },\n      outlineOffset: {\n        DEFAULT: '0px',\n      },\n      outlineWidth: {\n        DEFAULT: '2px',\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SfChip Vue Component Implementation\nDESCRIPTION: Source code for the Vue implementation of the SfChip component. This shows the internal structure and logic used to create the toggleable input element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/chip.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfChip/SfChip.vue\n```\n\n----------------------------------------\n\nTITLE: React Source Implementation of SfLoaderLinear Component\nDESCRIPTION: Source code for the React implementation of the SfLoaderLinear component. Shows the component structure, props definition, and rendering logic.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfLoaderLinear/SfLoaderLinear.tsx\n```\n\n----------------------------------------\n\nTITLE: Using SfLink with NextJS Link\nDESCRIPTION: Shows how to compose SfLink with NextJS Link component in a React application.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Link/NextLink.tsx\n```\n\n----------------------------------------\n\nTITLE: Version Release Details in Markdown\nDESCRIPTION: Detailed changelog entries documenting updates, improvements, bug fixes and new features across multiple versions of the Vue Storefront UI library.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/react/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2787](https://github.com/vuestorefront/storefront-ui/pull/2787) [`17e7e60d8`](https://github.com/vuestorefront/storefront-ui/commit/17e7e60d89dff3d3f4456266ebd5e53677bcf358) Thanks [@justyna-13](https://github.com/justyna-13)! - SfSelect wrapper as span tag\n\n- [#2747](https://github.com/vuestorefront/storefront-ui/pull/2747) [`0ab7b3967`](https://github.com/vuestorefront/storefront-ui/commit/0ab7b3967e0fab002ed0f59bd3491f6a3d046319) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Format SfSelect component, removal of extra unecessary lines\n\n- Updated dependencies [[`4094afe04`](https://github.com/vuestorefront/storefront-ui/commit/4094afe045b06a57c90f67826300aad95b1f5426), [`74dfce2c8`](https://github.com/vuestorefront/storefront-ui/commit/74dfce2c8aab7e959de40672c787d489bfe31537), [`623ed8ade`](https://github.com/vuestorefront/storefront-ui/commit/623ed8ade14c87ac1f29ab83a5ea53baf9fa6d22)]:\n  - @storefront-ui/shared@2.4.0\n```\n\n----------------------------------------\n\nTITLE: React SfThumbnail Component Implementation\nDESCRIPTION: The React implementation of the SfThumbnail component that renders a thumbnail with configurable size options.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/thumbnail.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { forwardRef, type ReactNode } from 'react';\nimport type { SfThumbnailSize } from '@storefront-ui/shared';\nimport { clsx } from 'clsx';\n\nexport interface SfThumbnailProps extends React.HTMLAttributes<HTMLDivElement> {\n  size?: SfThumbnailSize;\n  className?: string;\n  children?: ReactNode;\n}\n\nconst sizesClassMap = {\n  sm: 'h-6 w-6',\n  base: 'h-10 w-10',\n  lg: 'h-14 w-14',\n};\n\nconst SfThumbnail = forwardRef<HTMLDivElement, SfThumbnailProps>((props, ref) => {\n  const { size = 'base', className = '', children, ...attributes } = props;\n\n  return (\n    <div\n      ref={ref}\n      className={clsx('inline-flex rounded-md', sizesClassMap[size], className)}\n      {...attributes}\n    >\n      {children}\n    </div>\n  );\n});\n\nSfThumbnail.displayName = 'SfThumbnail';\n\nexport { SfThumbnail };\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront UI Dependencies for Next.js\nDESCRIPTION: Commands to install Storefront UI React library and required Tailwind CSS dependencies using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i @storefront-ui/react\nnpm i -D tailwindcss postcss autoprefixer\n\n# yarn\nyarn add @storefront-ui/react\nyarn add -D tailwindcss postcss autoprefixer\n\n# pnpm\npnpm add @storefront-ui/react\npnpm add -D tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Class Prefix\nDESCRIPTION: Configuration example for changing the default typography class prefix.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  plugins: [sfTypography({ utilityPrefix: 'custom-text' })]\n};\n```\n\n----------------------------------------\n\nTITLE: SfTextarea Component Implementation in Vue\nDESCRIPTION: Core implementation of the SfTextarea component in Vue, containing the base functionality and styling for the textarea element.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/textarea.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfTextarea/SfTextarea.vue\n```\n\n----------------------------------------\n\nTITLE: SfTooltip Component Implementation in Vue\nDESCRIPTION: The source code for the SfTooltip component in Vue, showing its implementation details including props, slots, and core functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/tooltip.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfTooltip/SfTooltip.vue\n```\n\n----------------------------------------\n\nTITLE: Using SfLink with Nuxt Link in Vue\nDESCRIPTION: Demonstrates how to use SfLink with Nuxt Link in a Vue application using the tag prop.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Link/NuxtLink.vue\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown Entry\nDESCRIPTION: Markdown-formatted version history documenting changes, updates and fixes to the @storefront-ui/vue package. Includes PR references, commit hashes and contributor acknowledgments.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/vue/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @storefront-ui/vue\n\n## 2.6.5\n\n### Patch Changes\n\n- [#3263](https://github.com/vuestorefront/storefront-ui/pull/3263) [`f534058`](https://github.com/vuestorefront/storefront-ui/commit/f534058e4be50f1fb4f3394c6aab525f901b3ee4) Thanks [@lsliwaradioluz](https://github.com/lsliwaradioluz)! - [FIXED] Fixed `<SfSelect />` value not updated when no `v-model` is used on the component.\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of SfRatingButton Component\nDESCRIPTION: Source code for the SfRatingButton component implementation in Vue, showing the core functionality and structure of the component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfRatingButton/SfRatingButton.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and Storefront UI Dependencies for Vite\nDESCRIPTION: Commands to install Tailwind CSS, PostCSS, and Storefront UI Vue library using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i -D tailwindcss postcss autoprefixer @storefront-ui/vue\n\n# yarn\nyarn add -D tailwindcss postcss autoprefixer @storefront-ui/vue\n\n# pnpm\npnpm add -D tailwindcss postcss autoprefixer @storefront-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Pagination Return Value Interface\nDESCRIPTION: Return value interface for pagination hook including page calculations and navigation functions.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_hooks/usePagination.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationReturn {\n  totalPages: number;          // total number of pages\n  maxVisiblePages: number;     // total number of visible pages\n  itemsPerPage: number;        // items per page\n  pages: number[];             // array of displayed pages\n  selectedPage: number;        // current page\n  endPage: number;             // last displayed page number\n  startPage: number;           // first displayed page number\n  next: () => void;            // jump to next page\n  prev: () => void;            // jump to previous page\n  setPage: (page: number) => void; // jump to specific page\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Next.js\nDESCRIPTION: Configuration file for Tailwind CSS including Storefront UI preset and content paths.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\nconst { tailwindConfig } = require('@storefront-ui/react/tailwind-config');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  presets: [tailwindConfig],\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './src/**/*.{js,ts,jsx,tsx}',\n    './node_modules/@storefront-ui/react/**/*.{js,mjs}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Typography Prefix\nDESCRIPTION: Example of using custom typography prefix in HTML markup\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"custom-text-headline-3\">Specifications</h2>\n\n<h3 class=\"custom-text-headline-2\">Fabric Content</h3>\n<p class=\"custom-text-text-lg\">Cotton blend</p>\n```\n\n----------------------------------------\n\nTITLE: SfLink Vue Component Implementation\nDESCRIPTION: The source code for the SfLink component in Vue, showing its full implementation and available props.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/link.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfLink/SfLink.vue\n```\n\n----------------------------------------\n\nTITLE: Single Star Rating Implementation in React\nDESCRIPTION: Example showing a minimal single star with text label implementation in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/rating.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Rating/SingleStar.tsx\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.3.2\nDESCRIPTION: Documents minor type fixes in version 2.3.2 of the package through pull request #3091.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/tw-plugin-peer-next/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.3.2\n\n### Patch Changes\n\n- [#3091](https://github.com/vuestorefront/storefront-ui/pull/3091) [`91d17b5346e2706ce0551f897f8753207b7a703f`](https://github.com/vuestorefront/storefront-ui/commit/91d17b5346e2706ce0551f897f8753207b7a703f) Thanks [@mattmaribojoc](https://github.com/mattmaribojoc)! - Minor type fixes\n```\n\n----------------------------------------\n\nTITLE: React SfCheckbox Component Implementation\nDESCRIPTION: Core implementation of the SfCheckbox component in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/checkbox.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/react/components/SfCheckbox/SfCheckbox.tsx\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to CSS for Vite\nDESCRIPTION: CSS code that includes the necessary Tailwind directives for base, components, and utilities layers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* src/style.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Storefront UI in Vite\nDESCRIPTION: Tailwind configuration file setup that imports Storefront UI preset and adds content paths for proper utility class detection.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// tailwind.config.js\nimport { tailwindConfig } from '@storefront-ui/vue/tailwind-config';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [tailwindConfig],\n  content: ['./index.html', './**/*.vue', './node_modules/@storefront-ui/vue/**/*.{js,mjs}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Framework-Specific Test Case Using Comments in TypeScript\nDESCRIPTION: Demonstrates how to mark framework-specific test cases using comments that will be removed when testing other frameworks\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('test scenario', () => {\n  it('common test case', () => { ... });\n  // vue\n  it('vue-specific test case', () => { ... });\n  // end vue\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable with One Item Scrolling in React\nDESCRIPTION: Example of configuring SfScrollable to scroll by one item at a time when clicking next/previous buttons in React.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/scrollable.md#2025-04-23_snippet_5\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Scrollable/ScrollByOneItem.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite Project with Vue 3 and TypeScript\nDESCRIPTION: Commands to initialize a new Vite project with Vue 3 and TypeScript using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm 6.x\nnpm create vite@latest my-vue-app --template vue-ts\n\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vue-app -- --template vue-ts\n\n# yarn\nyarn create vite my-vue-app --template vue-ts\n\n# pnpm\npnpm create vite my-vue-app --template vue-ts\n```\n\n----------------------------------------\n\nTITLE: Basic Tailwind Configuration\nDESCRIPTION: Initial setup of the typography plugin in Tailwind configuration file\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  content: ['your-components-source-directory/*.ts'],\n  plugins: [sfTypography]\n};\n```\n\n----------------------------------------\n\nTITLE: Vue AccordionItem Component Source\nDESCRIPTION: Source code for the Vue implementation of SfAccordionItem component.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/accordionitem.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../../packages/sfui/frameworks/vue/components/SfAccordionItem/SfAccordionItem.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront UI for Astro\nDESCRIPTION: Commands to install Storefront UI Vue library for an Astro project with different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i -D @storefront-ui/vue\n\n# yarn\nyarn add -D @storefront-ui/vue\n\n# pnpm\npnpm add -D @storefront-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Nuxt Project\nDESCRIPTION: Tailwind configuration file for a Nuxt project that specifies content paths for proper utility class detection.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\n\nexport default <Config>{\n  content: ['./**/*.vue'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TailwindCSS with Peer-Next Plugin\nDESCRIPTION: Configuration setup for the peer-next plugin in tailwind.config.ts file. Imports and adds the plugin to TailwindCSS configuration.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/tw-plugin-peer-next/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfPeerNext from '@storefront-ui/tw-plugin-peer-next';\n\nexport default {\n  content: ['your-components-source-directory/*.ts'],\n  plugins: [sfPeerNext]\n};\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Radio Group in React\nDESCRIPTION: Implementation of an uncontrolled radio group component in React. This demonstrates how to use radio buttons in an uncontrolled form pattern where the DOM handles the state.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/radio.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/RadioGroup/RadioGroupUncontrolled.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront UI Nuxt Module\nDESCRIPTION: Commands to install the Storefront UI Nuxt module, which automatically includes Tailwind CSS integration for Nuxt 3.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i -D @storefront-ui/nuxt\n\n# yarn\nyarn add -D @storefront-ui/nuxt\n\n# pnpm\npnpm add -D @storefront-ui/nuxt\n```\n\n----------------------------------------\n\nTITLE: Using Typography Classes\nDESCRIPTION: Example of using typography classes in HTML markup for headings and paragraphs\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"typography-headline-3\">Specifications</h2>\n\n<h3 class=\"typography-headline-2\">Fabric Content</h3>\n<p class=\"typography-text-lg\">Cotton blend</p>\n<h3 class=\"typography-headline-2\">Sleeve Length Style</h3>\n<p class=\"typography-text-lg\">Short sleeve</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project\nDESCRIPTION: Commands to create a new Vite project with React and TypeScript template using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# npm 6.x\nnpm create vite@latest my-sfui-app --template react-ts\n\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-sfui-app -- --template react-ts\n\n# yarn\nyarn create vite my-sfui-app --template react-ts\n\n# pnpm\npnpm create vite my-sfui-app --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Storefront UI in Astro\nDESCRIPTION: Tailwind configuration for an Astro project that includes Storefront UI preset and content paths for proper utility class detection.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// tailwind.config.cjs\nconst { tailwindConfig } = require('@storefront-ui/vue/tailwind-config');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  presets: [tailwindConfig],\n  content: ['./index.html', './src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}', './node_modules/@storefront-ui/vue/**/*.{js,mjs}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Vue and Tailwind to Astro Project\nDESCRIPTION: Commands to add Vue and Tailwind integrations to an existing Astro project using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx astro add vue tailwind\n\n# yarn\nyarn astro add vue tailwind\n\n# pnpm\npnpm astro add vue tailwind\n```\n\n----------------------------------------\n\nTITLE: Customizing RatingButton Icons in Vue\nDESCRIPTION: Example demonstrating how to use scoped slots to customize icons in the RatingButton component in Vue, with access to useful props for icon management.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/ratingbutton.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/RatingButton/CustomIcon.vue\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to CSS for Nuxt\nDESCRIPTION: CSS code with Tailwind directives for a Nuxt project, specifying the base, components, and utilities layers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* ~/assets/css/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography Class Prefix\nDESCRIPTION: Configuration example showing how to change the default typography class prefix\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  content: ['your-components-source-directory/*.ts'],\n  plugins: [sfTypography({ utilityPrefix: 'custom-text' })]\n};\n```\n\n----------------------------------------\n\nTITLE: Component Import Using useComponent Utility\nDESCRIPTION: Shows how to import framework-specific components using the useComponent utility for cross-framework compatibility\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {vue: SfRadioGroupVue, react: SfRadioGroupReact} = useComponent('SfRadioGroup');\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Vite\nDESCRIPTION: TypeScript configuration file for Tailwind CSS in Vite including Storefront UI preset and content paths.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.js\nimport { tailwindConfig } from '@storefront-ui/react/tailwind-config';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [tailwindConfig],\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}', './node_modules/@storefront-ui/react/**/*.{js,mjs}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Storefront UI\nDESCRIPTION: Nuxt configuration that adds the Storefront UI module to enable auto-imports and Tailwind CSS integration.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@storefront-ui/nuxt']\n})\n```\n\n----------------------------------------\n\nTITLE: Client Component Declaration\nDESCRIPTION: Implementation of 'use client' directive for various React components to enable client-side rendering.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/react/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse client\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumbs with Home Icon in React\nDESCRIPTION: Shows how to implement Breadcrumbs with a home icon as the first item in React. This approach improves navigation by providing a visual cue for the homepage.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_5\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Breadcrumbs/BreadcrumbsWithIcon.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Storefront UI Components in Astro\nDESCRIPTION: Example of importing and using a Storefront UI Vue component directly in an Astro component with frontmatter.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_13\n\nLANGUAGE: md\nCODE:\n```\n---\nimport { SfButton } from '@storefront-ui/vue';\n---\n\n<SfButton> Hello </SfButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing List Typography\nDESCRIPTION: Demonstrates list styling implementation using prose class in Vue and React components.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/List.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/List.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Custom Typography Prefix in HTML\nDESCRIPTION: Example of using custom prefixed typography classes in HTML templates.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"custom-text-headline-3\">Specifications</h2>\n<h3 class=\"custom-text-headline-2\">Fabric Content</h3>\n<p class=\"custom-text-text-lg\">Cotton blend</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs with Icon Separators in Vue\nDESCRIPTION: Demonstrates how to implement Breadcrumbs with icon separators in Vue. This variation uses icons to separate breadcrumb items for enhanced visual appeal.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Breadcrumbs/BreadcrumbsSeparator.vue\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration for ESM Modules\nDESCRIPTION: Configuration for Next.js to handle ESM modules correctly when not using App Router.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@storefront-ui/react'],\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Using Typography Classes in HTML\nDESCRIPTION: Example of using typography utility classes in HTML templates.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"typography-headline-2\">Specifications</h2>\n<h3 class=\"typography-headline-3\">Fabric Content</h3>\n<p class=\"typography-text-lg\">Cotton blend</p>\n<h3 class=\"typography-headline-2\">Sleeve Length Style</h3>\n<p class=\"typography-text-lg\">Short sleeve</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Typography\nDESCRIPTION: Shows table styling implementation using prose class in Vue and React components.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Table.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Table.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project with create-next-app\nDESCRIPTION: Commands to create a new Next.js project using create-next-app with different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx create-next-app@latest\n\n# yarn\nyarn create next-app\n\n# pnpm\npnpm create next-app\n```\n\n----------------------------------------\n\nTITLE: Creating Link Buttons in React\nDESCRIPTION: Illustrates how to create a link button using the SfButton component in React. This example uses the 'as' prop to render the button as an anchor tag.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/NavbarBottom.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<SfButton as=\"a\" href=\"#\">\n  Will render as an anchor tag\n</SfButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Figure Typography\nDESCRIPTION: Demonstrates figure and figcaption styling implementation in Vue and React components.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/prose.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Typography/Figure.vue\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Typography/Figure.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumbs in Vue\nDESCRIPTION: Demonstrates the basic implementation of the Breadcrumbs component in Vue. It shows how to structure and render a simple breadcrumb trail.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Breadcrumbs/Breadcrumbs.vue\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page layout and navigation settings.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/components.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: fullscreen\nnavigation: false\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront UI Nuxt Module Dependencies\nDESCRIPTION: Commands for installing @storefront-ui/nuxt package using different package managers (npm, yarn, pnpm).\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i -D @storefront-ui/nuxt\n\n# yarn\nyarn add -D @storefront-ui/nuxt\n\n# pnpm\npnpm add -D @storefront-ui/nuxt\n```\n\n----------------------------------------\n\nTITLE: Extending Default Typography Theme\nDESCRIPTION: Configuration example showing how to extend the default typography theme with custom styles\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  content: ['your-components-source-directory/*.ts'],\n  plugins: [sfTypography],\n\n  theme: {\n    extend: {\n      sfTypography: ({ theme }) => ({\n        'headline-2': {\n          fontSize: theme('fontSize.4xl'),\n          lineHeight: '1.1',\n        },\n        'headline-8': {\n          fontSize: theme('fontSize.xs'),\n          lineHeight: theme('lineHeight.4'),\n          fontWeight: theme('fontWeight.light')\n        },\n      })\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: QuantitySelector with Rounded Buttons in Vue\nDESCRIPTION: Demonstrates the QuantitySelector component with rounded button styles in Vue. This variant provides a different visual appearance for the increment/decrement buttons.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/QuantitySelector.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/QuantitySelector/Rounded.vue\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs with Icon Separators in React\nDESCRIPTION: Shows the implementation of Breadcrumbs with icon separators in React. It illustrates how to use icons as separators between breadcrumb items.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_blocks/Breadcrumbs.md#2025-04-23_snippet_3\n\nLANGUAGE: react\nCODE:\n```\n<<<../../../../preview/next/pages/showcases/Breadcrumbs/BreadcrumbsSeparator.tsx\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.3.3\nDESCRIPTION: Documents dependency updates in version 2.3.3 of the package through pull request #3132.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/tw-plugin-peer-next/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.3.3\n\n### Patch Changes\n\n- [#3132](https://github.com/vuestorefront/storefront-ui/pull/3132) [`19fa774`](https://github.com/vuestorefront/storefront-ui/commit/19fa774b38a05801256ced7c8af7731ea19defb9) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Update dependencies\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind CSS Configuration\nDESCRIPTION: Command to generate Tailwind CSS and PostCSS configuration files in the project's root directory.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of LoaderLinearSizes Showcase\nDESCRIPTION: Vue example showing different size options for the SfLoaderLinear component. Demonstrates various predefined sizes from minimal to 4xl.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/LoaderLinear/LoaderLinearSizes.vue\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Instructions\nDESCRIPTION: Instructions for setting up and running the Storefront UI project locally, including package installation and build steps for core dependencies.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn the `root` directory of this project run `yarn` command to install all needed dependencies.\nAfter dependencies has been installed run `yarn dev` command to run this project.\nNow both (Nuxt preview for Vue and Next preview for React) projects are running locally and you can start working on them.\nIf you need to run only one of them, you need to run a desired preview from its directory, so you need to go for Vue: `/apps/preview/nuxt` and for React: `/apps/preview/next`.\n\nNOTE:\nSubdependencies have to be build, such as\n- `@storefront-ui/shared` located in `/packages/sfui/shared`\n- `@storefront-ui/tw-plugin-peer-next` located in `/packages/sfui/tw-plugin-peer-next`\n- `@storefront-ui/typography` located in `/packages/sfui/typography`\n\nKnowing this we recommend using `yarn dev` in `root` directory.\n```\n\n----------------------------------------\n\nTITLE: Vue Drawer with Transition and Close Button\nDESCRIPTION: Enhanced Vue drawer implementation featuring transition animations and a close button with focus trap functionality.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/drawer.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Drawer/TransitionAndCloseButton.vue\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Base Configuration\nDESCRIPTION: CSS configuration to include Tailwind's base, components, and utilities layers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/react.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* src/style.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to CSS for Astro\nDESCRIPTION: CSS code with Tailwind directives for an Astro project, specifying the base, components, and utilities layers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/2.getting-started/vue.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n/* src/style.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Custom Typography Theme Configuration\nDESCRIPTION: Example of creating a completely custom typography palette overriding defaults\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/typography/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\n\nimport sfTypography from '@storefront-ui/typography';\n\nexport default {\n  content: ['your-components-source-directory/*.ts'],\n  plugins: [sfTypography],\n\n  theme: {\n    sfTypography: ({ theme }) => ({\n      'heading': {\n        fontSize: theme('fontSize.4xl'),\n        lineHeight: '1.1',\n      },\n      'label': {\n        fontSize: theme('fontSize.xs'),\n        lineHeight: theme('lineHeight.4'),\n        fontWeight: theme('fontWeight.light')\n      },\n    })\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Typography Plugin Dependencies\nDESCRIPTION: Commands to install the @storefront-ui/typography package using different package managers.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/3.customization/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i -D @storefront-ui/typography\n\n# yarn\nyarn add -D @storefront-ui/typography\n\n#pnpm\npnpm add -D @storefront-ui/typography\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for Storefront UI\nDESCRIPTION: Basic Tailwind configuration setup to detect Storefront UI component classes. Includes content path configuration for node_modules scanning.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\n\nexport default <Config>{\n  content: ['./**/*.vue'],\n};\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Component Configuration\nDESCRIPTION: Example of mounting a Vue component with configuration options supported by vue-test-utils package\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmount({\n    vue: {\n        component: SomeVueComponent,\n        props: {...},\n        slots: {...},\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Minor Version Update Entry in Markdown\nDESCRIPTION: Changelog entry for version 2.5.0 documenting styling rule changes, font updates, and type fixes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/config/tailwind/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.0\n\n### Minor Changes\n\n- [#3070](https://github.com/vuestorefront/storefront-ui/pull/3070) [`e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6`](https://github.com/vuestorefront/storefront-ui/commit/e15a3f6cb56fd28b2e9a0bd525e9fcbde44d29f6) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change general rules for styling\n\n### Patch Changes\n\n- [#3073](https://github.com/vuestorefront/storefront-ui/pull/3073) [`a40579d26c2912c5d4d05e1a833801e3e87901b3`](https://github.com/vuestorefront/storefront-ui/commit/a40579d26c2912c5d4d05e1a833801e3e87901b3) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Change `Inter Display` into `Inter`\n\n- [#3091](https://github.com/vuestorefront/storefront-ui/pull/3091) [`91d17b5346e2706ce0551f897f8753207b7a703f`](https://github.com/vuestorefront/storefront-ui/commit/91d17b5346e2706ce0551f897f8753207b7a703f) Thanks [@mattmaribojoc](https://github.com/mattmaribojoc)! - Minor type fixes\n\n- Updated dependencies [[`91d17b5346e2706ce0551f897f8753207b7a703f`](https://github.com/vuestorefront/storefront-ui/commit/91d17b5346e2706ce0551f897f8753207b7a703f)]:\n  - @storefront-ui/tw-plugin-peer-next@2.3.2\n```\n\n----------------------------------------\n\nTITLE: React Component Testing with Wrapper Component\nDESCRIPTION: Shows how to test React components using a Wrapper component that supports reactive props from Vue\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nit('some test', () => {\n  const someProp = ref();\n  mount({react:\n      <Wrapper\n          open={someProp}\n          onOpenChange={(e: boolean) => someProp.value = e}\n          component={SfNavigationTopReact}\n      />\n  });\n\n  expect(elementUIDependingOnThisProp).not.to.be.changed;\n  someProp.value = 'changed ref';\n  expect(elementUIDependingOnThisProp).to.be.changed;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Layout Configuration\nDESCRIPTION: YAML frontmatter configuration block that sets up the page layout and navigation settings for the documentation page.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: fullscreen\nnavigation: false\n---\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Entry in Markdown\nDESCRIPTION: Changelog entry documenting updates to dependencies and the peer plugin dependency in version 2.5.1.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/config/tailwind/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.1\n\n### Patch Changes\n\n- [#3132](https://github.com/vuestorefront/storefront-ui/pull/3132) [`19fa774`](https://github.com/vuestorefront/storefront-ui/commit/19fa774b38a05801256ced7c8af7731ea19defb9) Thanks [@Szymon-dziewonski](https://github.com/Szymon-dziewonski)! - Update dependencies\n\n- Updated dependencies [[`19fa774`](https://github.com/vuestorefront/storefront-ui/commit/19fa774b38a05801256ced7c8af7731ea19defb9)]:\n  - @storefront-ui/tw-plugin-peer-next@2.3.3\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing with Reactive Props\nDESCRIPTION: Demonstrates testing Vue components with reactive ref props that can be changed during test execution\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nit('some test', () => {\n  const someProp = ref();\n  mount({vue: { props: someProp }});\n\n  expect(elementUIDependingOnThisProp).not.to.be.changed;\n  someProp.value = 'changed ref';\n  expect(elementUIDependingOnThisProp).to.be.changed;\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 2.4.1\nDESCRIPTION: Notes fix for publishing error related to workspaces protocol handling\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/shared/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.1\n\n### Patch Changes\n\n- fixing publish error with workspaces protocol handling\n```\n\n----------------------------------------\n\nTITLE: Pull Request Reference\nDESCRIPTION: Git pull request reference showing migration to newer Nuxt.js version\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#3232](https://github.com/vuestorefront/storefront-ui/pull/3232) [`30bfa9a`](https://github.com/vuestorefront/storefront-ui/commit/30bfa9a327a0da0adb02bfda26a756e75ff80c83)\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Reference\nDESCRIPTION: Git commit reference showing dependency update for @storefront-ui/vue package\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/frameworks/nuxt/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`f534058`](https://github.com/vuestorefront/storefront-ui/commit/f534058e4be50f1fb4f3394c6aab525f901b3ee4)]:\n  - @storefront-ui/vue@2.6.5\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage in Vue\nDESCRIPTION: Examples of basic Badge usage in Vue, including the dot variant and max value functionality. The badge component must be wrapped with a container that has 'class=\"relative\"'.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/Badge/BadgeBasic.vue\n```\n\n----------------------------------------\n\nTITLE: Embedded YouTube Video Implementation\nDESCRIPTION: HTML iframe implementation for embedding a YouTube video about Storefront UI's component design philosophy. Includes security and accessibility attributes.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/components.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/dadJ29hNl-A\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" class=\"w-full max-w-lg mx-auto rounded aspect-video relative my-8 custom-block\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Vue Implementation of LoaderLinearColors Showcase\nDESCRIPTION: Vue example showing how to customize the colors of the SfLoaderLinear component. Demonstrates overriding the default primary-700 and neutral-300 colors.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/_components/loaderlinear.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<<<../../../../preview/nuxt/pages/showcases/LoaderLinear/LoaderLinearColors.vue\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Documentation Page\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting fullscreen layout and disabling navigation.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/apps/docs/components/content/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: fullscreen\nnavigation: false\n---\n```\n\n----------------------------------------\n\nTITLE: Documentation for StorefrontUI Test Configuration\nDESCRIPTION: Documentation explaining the purpose and limitations of the package used for modifying Cypress test files. Notes the lack of Cypress support in Nuxt and TypeScript limitations in Next.js configuration.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/config/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PURPOSE\n\nPackage used for altering `packages/tests/**/*.cy.tsx` files. This package exports regex rules that are used in `Next` and `Vue` (`Nuxt` does not provide support for Cypress [Github issue](https://github.com/nuxt/framework/issues/6496)) preview packages.\n\n> NOTE: Unfortunately there is no possibility to use typescript for Next.js configuration ([`next.config.ts` is not supported](https://github.com/vercel/next.js/discussions/35969)). This means that we need to transpile `next.config.ts` into `next.config.js` before using it in Next.js.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 2.5.0\nDESCRIPTION: Records the addition of textarea base component in version 2.5.0 minor release\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/shared/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.0\n\n### Minor Changes\n\n- [#2880](https://github.com/vuestorefront/storefront-ui/pull/2880) [`aa9c2f328`](https://github.com/vuestorefront/storefront-ui/commit/aa9c2f328df419a929f06aa7b2053baef9830d60) Thanks [@AdamPawlinski](https://github.com/AdamPawlinski)! - Added textarea base component\n```\n\n----------------------------------------\n\nTITLE: Installing StorefrontUI Shared Package\nDESCRIPTION: Package name definition for the shared utilities and typings used across StorefrontUI packages. This package provides common functionality and type definitions used by other @storefront-ui/* packages.\nSOURCE: https://github.com/vuestorefront/storefront-ui/blob/v2-develop/packages/sfui/shared/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@storefront-ui/shared\n```"
  }
]