[
  {
    "owner": "getalby",
    "repo": "js-sdk",
    "content": "TITLE: Implementing Full OAuth Authentication Flow in JavaScript\nDESCRIPTION: This snippet demonstrates the complete OAuth authentication flow using the Alby SDK. It includes generating an auth URL, requesting an access token, and initializing a client to make API calls.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authClient = new auth.OAuth2User({\n  client_id: process.env.CLIENT_ID,\n  client_secret: process.env.CLIENT_SECRET,\n  callback: \"http://localhost:8080/callback\",\n  scopes: [\n    \"invoices:read\",\n    \"account:read\",\n    \"balance:read\",\n    \"invoices:create\",\n    \"invoices:read\",\n    \"payments:send\",\n  ],\n  token: {\n    access_token: undefined,\n    refresh_token: undefined,\n    expires_at: undefined,\n  }, // initialize with existing token\n});\n\nconst authUrl = await authClient.generateAuthURL({\n  code_challenge_method: \"S256\",\n  // authorizeUrl: \"https://getalby.com/oauth\"  endpoint for authorization (replace with the appropriate URL based on the environment)\n});\n// open auth URL\n// `code` is passed as a query parameter when the user is redirected back after authorization\nawait authClient.requestAccessToken(code);\n\n// access the token response. You can store this securely for future client initializations\nconsole.log(authClient.token);\n\n// initialize a client\nconst client = new Client(authClient);\n\nconst result = await client.accountBalance();\n```\n\n----------------------------------------\n\nTITLE: Making Lightning Network Payments with LN Class in JavaScript\nDESCRIPTION: This snippet demonstrates various ways to make payments using the LN class, including paying a lightning invoice, paying to a lightning address with different currencies, and adding metadata to payments.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/lnclient.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LN, USD, SATS } from \"@getalby/sdk\";\nconst credentials = \"nostr+walletconnect://...\"; // the NWC connection credentials\nawait new LN(credentials).pay(\"lnbc...\"); // pay a lightning invoice\nawait new LN(credentials).pay(\"hello@getalby.com\", SATS(21)); // or pay 21 sats to a lightning address\nawait new LN(credentials).pay(\"hello@getalby.com\", USD(1)); // or pay $1 USD to a lightning address\nawait new LN(credentials).pay(\"hello@getalby.com\", new FiatAmount(1, \"THB\")); // or pay an amount in any currency to a lightning address\nawait new LN(credentials).pay(\"hello@getalby.com\", USD(1), {\n  metadata: { comment: \"Example comment\", payer_data: { name: \"Bob\" } },\n}); // set a comment for the payment you are making, and that the payment was made by Bob\n```\n\n----------------------------------------\n\nTITLE: Sending Payments with Alby SDK in JavaScript\nDESCRIPTION: This snippet illustrates how to send payments using the Alby SDK. It shows initializing a client with existing token details and then using the sendPayment and keysend methods to make payments.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = loadTokenForUser(); // {access_token: string, refresh_token: string, expires_at: number}\nconst authClient = new auth.OAuth2User({\n  client_id: process.env.CLIENT_ID,\n  callback: \"http://localhost:8080/callback\",\n  scopes: [\n    \"invoices:read\",\n    \"account:read\",\n    \"balance:read\",\n    \"invoices:create\",\n    \"invoices:read\",\n    \"payments:send\",\n  ],\n  token: token,\n});\n\nconst client = new Client(authClient);\n// the authClient will automatically refresh the access token if expired using the refresh token\n\nawait client.sendPayment({ invoice: bolt11 });\n\nawait client.keysend({\n  destination: nodekey,\n  amount: 10,\n  memo: memo,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Payment with NostrWebLNProvider in JavaScript\nDESCRIPTION: Demonstrates how to send a Lightning Network payment using the NostrWebLNProvider. This example shows the process of enabling the provider and sending a payment with error handling.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webln } from \"@getalby/sdk\";\nconst nwc = new webln.NostrWebLNProvider({ nostrWalletConnectUrl: loadNWCUrl });\nawait nwc.enable();\nconst response = await nwc.sendPayment(invoice);\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Requesting Lightning Network Payments\nDESCRIPTION: Example of creating a payment request using the Lightning Network client with callback handling for successful payments.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = await new LN(credentials).requestPayment(USD(1.0));\n// give request.invoice to someone...\nrequest.onPaid(giveAccess);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using NWCWalletService in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the NWCWalletService, publish wallet service info, create a keypair for client connection, and subscribe to handle NIP-47 method requests. It includes setting up the relay URL, specifying supported methods, and implementing a basic getInfo handler.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc-wallet-service.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nwc } from \"@getalby/sdk\";\n\nconst walletService = new nwc.NWCWalletService({\n  relayUrl: \"wss://relay.getalby.com/v1\",\n});\n\n// now for each client/app connection you can publish a NIP-47 info event and subscribe to requests\n\nawait walletService.publishWalletServiceInfoEvent(\n  walletServiceSecretKey,\n  [\"get_info\"], // NIP-47 methods supported by your wallet service\n  [],\n);\n\n// each client connection will have a unique keypair\n\nconst keypair = new nwc.NWCWalletServiceKeyPair(\n  walletServiceSecretKey,\n  clientPubkey,\n);\n\nconst unsub = await walletService.subscribe(keypair, {\n  getInfo: () => {\n    return Promise.resolve({\n      result: {\n        methods: [\"get_info\"],\n        alias: \"Alby Hub\",\n        //... add other fields here\n      },\n      error: undefined,\n    });\n  },\n  // ... handle other NIP-47 methods here\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Lightning Network Payments with LN Class in JavaScript\nDESCRIPTION: This snippet shows how to request a payment using the LN class, set up event handlers for successful payment, and implement a timeout for payment processing.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/lnclient.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = await new LN(credentials).requestPayment(USD(1.0));\n\n// give request.invoice to someone, then act upon it:\nrequest\n  .onPaid(giveAccess) // listen for incoming payment and then fire the given method\n  .onTimeout(60, showTimeout); // if they didn't pay within 60 seconds, do something else\n```\n\n----------------------------------------\n\nTITLE: Initializing NWCClient in JavaScript\nDESCRIPTION: Demonstrates how to initialize an NWCClient instance using the Alby SDK. This snippet shows the basic setup required to start using NWC functionality in a JavaScript application.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nwc } from \"@getalby/sdk\";\nconst nwcClient = new nwc.NWCClient({\n  nostrWalletConnectUrl: loadNWCUrl(),\n}); // loadNWCUrl is some function to get the NWC URL from some (encrypted) storage\n\n// now you can send payments by passing in the invoice in an object\nconst response = await nwcClient.payInvoice({ invoice });\n```\n\n----------------------------------------\n\nTITLE: Initializing NostrWebLNProvider in JavaScript\nDESCRIPTION: Demonstrates how to set up a NostrWebLNProvider instance, which provides a WebLN-compatible interface for NWC functionality. This snippet shows both the standard and shorthand initialization methods.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webln } from \"@getalby/sdk\";\nconst nwc = new webln.NostrWebLNProvider({\n  nostrWalletConnectUrl: loadNWCUrl(),\n}); // loadNWCUrl is some function to get the NWC URL from some (encrypted) storage\n// or use the short version\nconst nwc = new webln.NWC({ nostrWalletConnectUrl: loadNWCUrl });\n\n// connect to the relay\nawait nwc.enable();\n\n// now you can send payments by passing in the invoice\nconst response = await nwc.sendPayment(invoice);\n```\n\n----------------------------------------\n\nTITLE: Making Lightning Network Payments\nDESCRIPTION: Example of making payments using the Lightning Network client, including both invoice payments and lightning address payments with USD conversion.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LN, USD } from \"@getalby/sdk\";\nconst credentials = \"nostr+walletconnect://...\"; // the NWC connection credentials\nawait new LN(credentials).pay(\"lnbc...\"); // pay a lightning invoice\nawait new LN(credentials).pay(\"hello@getalby.com\", USD(1)); // or pay $1 USD to a lightning address\n```\n\n----------------------------------------\n\nTITLE: Initializing Alby Client from Existing Token in JavaScript\nDESCRIPTION: This snippet shows how to initialize an Alby client using existing token details. It demonstrates creating an OAuth2User instance and using it to initialize a Client object for making API calls.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = loadTokenForUser(); // {access_token: string, refresh_token: string, expires_at: number}\nconst authClient = new auth.OAuth2User({\n  client_id: process.env.CLIENT_ID,\n  callback: \"http://localhost:8080/callback\",\n  scopes: [\n    \"invoices:read\",\n    \"account:read\",\n    \"balance:read\",\n    \"invoices:create\",\n    \"invoices:read\",\n    \"payments:send\",\n  ],\n  token: token,\n});\n\nconst client = new Client(authClient);\n// the authClient will automatically refresh the access token if expired using the refresh token\nconst result = await client.createInvoice({ amount: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Creating NWCClient from Authorization URL in JavaScript\nDESCRIPTION: Shows how to create an NWCClient instance using a static method that generates a new random secret and requires user authorization. This method is useful for setting up new NWC connections.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nwcClient = await nwc.NWCClient.fromAuthorizationUrl(\n  \"https://my.albyhub.com/apps/new\",\n  {\n    name: \"My app name\",\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up WebLN compatibility with NostrWebLNProvider in JavaScript\nDESCRIPTION: Shows how to use NostrWebLNProvider as a WebLN-compatible object in a web application, allowing for universal payment functionality.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (!window.webln) {\n  // prompt the user to connect to NWC\n  window.webln = new webln.NostrWebLNProvider({\n    nostrWalletConnectUrl: loadNWCUrl,\n  });\n  // now use any webln code\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Boostagram with Alby SDK in JavaScript\nDESCRIPTION: This code demonstrates how to send a boostagram using the Alby SDK. It includes initializing a client and using the sendBoostagram method with detailed boostagram data according to the BLIP-10 specification.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = loadTokenForUser(); // {access_token: string, refresh_token: string, expires_at: number}\nconst authClient = new auth.OAuth2User({\n  client_id: process.env.CLIENT_ID,\n  callback: \"http://localhost:8080/callback\",\n  scopes: [\"payments:send\"],\n  token: token,\n});\n\nconst client = new Client(authClient);\n// the authClient will automatically refresh the access token if expired using the refresh token\n\n// pass in an array if you want to send multiple boostagrams with one call\nawait client.sendBoostagram({\n  recipient: {\n    address:\n      \"030a58b8653d32b99200a2334cfe913e51dc7d155aa0116c176657a4f1722677a3\",\n    customKey: \"696969\",\n    customValue: \"bNVHj0WZ0aLPPAesnn9M\",\n  },\n  amount: 10,\n  // spec: https://github.com/lightning/blips/blob/master/blip-0010.md\n  boostagram: {\n    app_name: \"Alby SDK Demo\",\n    value_msat_total: 49960, // TOTAL Number of millisats for the payment (all splits together, before fees. The actual number someone entered in their player, for numerology purposes.)\n    value_msat: 2121, // Number of millisats for this split payment\n    url: \"https://feeds.buzzsprout.com/xxx.rss\",\n    podcast: \"Podcast title\",\n    action: \"boost\",\n    episode: \"The episode title\",\n    episode_guid: \"Buzzsprout-xxx\",\n    ts: 574,\n    name: \"Podcaster - the recipient name\",\n    sender_name: \"Satoshi - the sender/listener name\",\n  },\n});\n\n// or manually through the keysend:\n\n// pass in an array if you want to do multiple keysend payments with one call\nawait client.keysend({\n  destination: nodekey,\n  amount: 10,\n  customRecords: {\n    7629169: JSON.stringify(boostagram),\n    696969: \"user\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Boostagrams with Alby SDK in JavaScript\nDESCRIPTION: This snippet shows how to send multiple boostagrams in a single API call using the Alby SDK. It demonstrates passing an array of boostagrams to the sendBoostagram method and handling the response.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await client.sendBoostagram([\n  boostagram1,\n  boostagram2,\n  boostagram3,\n]);\n\nconsole.log(response.keysends);\n```\n\n----------------------------------------\n\nTITLE: Using NostrWebLNProvider with Default Settings in JavaScript\nDESCRIPTION: Demonstrates how to use NostrWebLNProvider with default settings, connecting to Alby's relay and using window.nostr for signing requests. It includes enabling the provider, sending a payment, and closing the connection.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webln } from \"@getalby/sdk\";\n\nconst nwc = new webln.NostrWebLNProvider(); // use defaults (connects to Alby's relay, will use window.nostr to sign the request)\nawait nwc.enable(); // connect to the relay\nconst response = await nwc.sendPayment(invoice);\nconsole.log(response.preimage);\n\nnwc.close(); // close the websocket connection\n```\n\n----------------------------------------\n\nTITLE: Decoding Lightning Invoice with Alby SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to decode a Lightning invoice using the Alby Wallet API. It shows the usage of the decodeInvoice method and destructuring the returned invoice details.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst decodedInvoice = await client.decodeInvoice(paymentRequest);\nconst {payment_hash, amount, description, ...} = decodedInvoice;\n```\n\n----------------------------------------\n\nTITLE: Custom Nostr Wallet Connect URL with NostrWebLNProvider in JavaScript\nDESCRIPTION: Shows how to initialize NostrWebLNProvider with a custom, user-provided Nostr Wallet Connect URL. This example includes connecting to the relay, sending a payment, and closing the connection.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webln } from \"@getalby/sdk\";\n\nconst nwc = new webln.NostrWebLNProvider({\n  nostrWalletConnectUrl:\n    \"nostr+walletconnect://69effe7b49a6dd5cf525bd0905917a5005ffe480b58eeb8e861418cf3ae760d9?relay=wss://nostr.bitcoiner.social&secret=c60320b3ecb6c15557510d1518ef41194e9f9337c82621ddef3f979f668bfebd\",\n}); // use defaults\nawait nwc.enable(); // connect to the relay\nconst response = await nwc.sendPayment(invoice);\nconsole.log(response.preimage);\n\nnwc.close(); // close the websocket connection\n```\n\n----------------------------------------\n\nTITLE: Authorizing NostrWebLNProvider from URL in JavaScript\nDESCRIPTION: Shows how to create and authorize a NostrWebLNProvider instance using an authorization URL. This method opens a popup for user authorization and handles the connection process.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { webln } from \"@getalby/sdk\";\n\ntry {\n  const nwc = await webln.NostrWebLNProvider.fromAuthorizationUrl(\n    \"https://my.albyhub.com/apps/new\",\n    {\n      name: \"My app name\",\n    },\n  );\n} catch (e) {\n  console.error(e);\n}\nawait nwc.enable();\nlet response;\ntry {\n  response = await nwc.sendPayment(invoice);\n  // if success then the response.preimage will be only\n  console.info(`payment successful, the preimage is ${response.preimage}`);\n} catch (e) {\n  console.error(e.error || e);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New NWC Connect URL with Local Secret in JavaScript\nDESCRIPTION: Demonstrates how to generate a new Nostr Wallet Connect URL using a locally-generated secret. This method uses the fromAuthorizationUrl helper to open a popup for the connection flow.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// use the `fromAuthorizationUrl` helper which opens a popup to initiate the connection flow.\n// the promise resolves once the NWC app returned.\nconst nwc = await webln.NostrWebLNProvider.fromAuthorizationUrl(\n  \"https://my.albyhub.com/apps/new\",\n  {\n    name: \"My app name\",\n  },\n);\n\n// ... enable and send a payment\n\n// if you want to get the connect url with the secret:\n// const nostrWalletConnectUrl nwc.getNostrWalletConnectUrl(true)\n```\n\n----------------------------------------\n\nTITLE: Handling Token Refresh in Alby SDK\nDESCRIPTION: This code demonstrates how to handle token refresh events in the Alby SDK. It shows setting up listeners for tokenRefreshed and tokenRefreshFailed events to manage token updates and handle refresh failures.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = loadTokenForUser(); // {access_token: string, refresh_token: string, expires_at: number}\nconst authClient = new auth.OAuth2User({\n  client_id: process.env.CLIENT_ID,\n  callback: \"http://localhost:8080/callback\",\n  scopes: [\n    \"invoices:read\",\n    \"account:read\",\n    \"balance:read\",\n    \"invoices:create\",\n    \"invoices:read\",\n    \"payments:send\",\n  ],\n  token: token,\n});\n\n// listen to the tokenRefreshed event\nauthClient.on(\"tokenRefreshed\", (tokens) => {\n  // store the tokens in database\n  console.log(tokens);\n});\n\n// Listen to the tokenRefreshFailed event\nauthClient.on(\"tokenRefreshFailed\", (error) => {\n  // Handle the token refresh failure, for example, log the error or launch OAuth authentication flow\n  console.error(\"Token refresh failed:\", error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Accepting NWA URI Connection in Wallet Services with JavaScript\nDESCRIPTION: Demonstrates how to accept and create a connection from a Nostr Wallet Auth (NWA) URI in wallet services. This process involves parsing the NWA URL and handling the connection creation.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nwa } from \"@getalby/sdk\";\nconst nwaOptions = nwa.NWAClient.parseWalletAuthUrl(nwaUrl);\n\n// then use `nwaOptions` to display a confirmation page to the user and create a connection.\n```\n\n----------------------------------------\n\nTITLE: Generating NWA URI for Client Apps in JavaScript\nDESCRIPTION: Shows how to generate a Nostr Wallet Auth (NWA) URI for client applications. This URI can be used to initiate a connection with mobile-first or self-custodial wallets.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nwa } from \"@getalby/sdk\";\nconst connectionUri = new nwa.NWAClient({\n  relayUrl,\n  requestMethods: [\"get_info\"],\n}).connectionUri;\n\n// then allow the user to copy it / display it as a QR code to the user\n```\n\n----------------------------------------\n\nTITLE: Installing Alby SDK with NPM\nDESCRIPTION: Command to install the Alby SDK using NPM package manager.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @getalby/sdk\n```\n\n----------------------------------------\n\nTITLE: Node.js Setup for WebSocket Polyfill in JavaScript\nDESCRIPTION: This snippet shows how to set up the required WebSocket polyfill to use the Lightning Network client in a Node.js environment.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/lnclient.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"websocket-polyfill\";\n// or: require('websocket-polyfill');\n```\n\n----------------------------------------\n\nTITLE: Browser Module Import Setup\nDESCRIPTION: HTML script setup for using the SDK directly in browser without build tools. Uses ESM imports from CDN.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { LN /* or nwc, webln */ } from \"https://esm.sh/@getalby/sdk@5.0.0\"; // jsdelivr.net, skypack.dev also work\n\n  // ... then use the SDK as normal (see below)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Node.js Polyfill Setup for NostrWebLNProvider\nDESCRIPTION: Provides instructions for setting up necessary polyfills when using NostrWebLNProvider in a Node.js environment. This includes websocket and crypto polyfills.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/nwc.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"websocket-polyfill\";\n// or: require('websocket-polyfill');\n\nimport * as crypto from 'crypto'; // or 'node:crypto'\nglobalThis.crypto = crypto as any;\n//or: global.crypto = require('crypto');\n```\n\n----------------------------------------\n\nTITLE: Node.js WebSocket Polyfill Setup\nDESCRIPTION: Example of importing the required WebSocket polyfill for Node.js environments.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"websocket-polyfill\";\n// or: require('websocket-polyfill');\n```\n\n----------------------------------------\n\nTITLE: Node.js Crypto Module Setup in TypeScript/JavaScript\nDESCRIPTION: This snippet demonstrates how to resolve the 'crypto is not defined' error in Node.js environments by manually importing and setting up the crypto module.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/lnclient.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as crypto from 'crypto'; // or 'node:crypto'\nglobalThis.crypto = crypto as any;\n//or: global.crypto = require('crypto');\n```\n\n----------------------------------------\n\nTITLE: Installing Global Fetch Polyfill for Alby SDK in JavaScript\nDESCRIPTION: This snippet shows how to install a global fetch polyfill for environments that don't have native fetch support, which is required by the Alby SDK. It demonstrates two methods: manually installing a global fetch option and using a polyfill.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/docs/oauth.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from \"cross-fetch\"; // or \"@inrupt/universal-fetch\"\nglobalThis.fetch = fetch;\n\n// or as a polyfill:\nimport \"cross-fetch/polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Installing Alby SDK with Yarn\nDESCRIPTION: Command to install the Alby SDK using Yarn package manager.\nSOURCE: https://github.com/getalby/js-sdk/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @getalby/sdk\n```"
  }
]