[
  {
    "owner": "telerik",
    "repo": "maui-docs",
    "content": "TITLE: Configuring Telerik UI for .NET MAUI in MauiProgram.cs\nDESCRIPTION: This code snippet demonstrates how to configure a .NET MAUI project to use Telerik UI controls. It shows how to add the Telerik namespace, register the controls, and call the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .UseTelerik()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n            });\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting License Key File Path for Windows in C#\nDESCRIPTION: Specifies the file path for the Telerik license key on Windows systems. The license key file should be placed in the user's AppData folder.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/licensing/set-up-your-license.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"%AppData%\\Roaming\\Telerik\\telerik-license.txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Columns in DataGrid - XAML\nDESCRIPTION: This snippet demonstrates how to define columns manually in the RadDataGrid. It specifically highlights setting AutoGenerateColumns to False for custom column configurations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Define the columns here -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Handlers in MauiProgram.cs\nDESCRIPTION: Demonstrates how to register Telerik MAUI control handlers by calling the UseTelerik() extension method in the application's initialization code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/visual-studio.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Series to RadCartesianChart in XAML\nDESCRIPTION: This snippet shows how to add a BarSeries to the RadCartesianChart's Series collection, which binds data points to define the visual representation of the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n\t<telerik:RadCartesianChart.Series>\n\t\t<telerik:BarSeries ItemsSource=\"{Binding CategoricalData}\">\n\t\t\t<telerik:BarSeries.ValueBinding>\n\t\t\t\t<telerik:PropertyNameDataPointBinding PropertyName=\"Value\"/>\n\t\t\t</telerik:BarSeries.ValueBinding>\n\t\t\t<telerik:BarSeries.CategoryBinding>\n\t\t\t\t<telerik:PropertyNameDataPointBinding PropertyName=\"Category\"/>\n\t\t\t</telerik:BarSeries.CategoryBinding>\n\t\t</telerik:BarSeries>\n\t</telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Items Property Declaration for DataGrid (C#)\nDESCRIPTION: This code snippet shows the declaration of the `Items` property, which is of type `LoadOnDemandCollection<MyDataObject>`. This property will be bound to the DataGrid's ItemsSource to provide data on demand.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n        public LoadOnDemandCollection<MyDataObject> Items { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Two RadCollectionView Instances with Drag and Drop in .NET MAUI\nDESCRIPTION: XAML code for setting up two RadCollectionView instances with drag and drop functionality enabled. This snippet shows the UI configuration including layout, binding, and drag-drop settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-between-collectionviews.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Grid RowDefinitions=\"Auto, *, Auto, *\">\n    <Label Text=\"Telerik Items\" FontSize=\"15\" FontAttributes=\"Bold\" Margin=\"0,0,0,5\" />\n    <telerik:RadCollectionView Grid.Row=\"1\"\n                              x:Name=\"sourceCollectionView\"\n                              ItemsSource=\"{Binding TelerikItems}\">\n        <telerik:RadCollectionView.ItemTemplate>\n            <DataTemplate>\n                <telerik:CollectionViewItemContainer>\n                    <Grid HeightRequest=\"50\" \n                          BackgroundColor=\"LightBlue\">\n                        <Grid.Resources>\n                            <Style TargetType=\"Label\">\n                                <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n                                <Setter Property=\"Margin\" Value=\"10, 0\" />\n                            </Style>\n                        </Grid.Resources>\n                        <Label Text=\"{Binding Name}\" />\n                    </Grid>\n                </telerik:CollectionViewItemContainer>\n            </DataTemplate>\n        </telerik:RadCollectionView.ItemTemplate>\n        <telerik:RadCollectionView.DragDrop>\n            <telerik:DragDrop IsDropAreaSupported=\"True\" \n                            AllowDrag=\"True\" \n                            AllowDrop=\"True\"/>\n        </telerik:RadCollectionView.DragDrop>\n    </telerik:RadCollectionView>\n\n    <Label Text=\"Other Items\" \n           Grid.Row=\"2\" \n           FontSize=\"15\" \n           FontAttributes=\"Bold\" \n           Margin=\"0,15,0,5\" />\n    <telerik:RadCollectionView Grid.Row=\"3\"\n                              x:Name=\"targertCollectionView\"\n                              ItemsSource=\"{Binding OtherItems}\">\n        <telerik:RadCollectionView.ItemTemplate>\n            <DataTemplate>\n                <telerik:CollectionViewItemContainer>\n                    <Grid HeightRequest=\"50\" \n                          BackgroundColor=\"LightPink\">\n                        <Grid.Resources>\n                            <Style TargetType=\"Label\">\n                                <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n                                <Setter Property=\"Margin\" Value=\"10, 0\" />\n                            </Style>\n                        </Grid.Resources>\n                        <Label Text=\"{Binding Name}\" />\n                    </Grid>\n                </telerik:CollectionViewItemContainer>\n            </DataTemplate>\n        </telerik:RadCollectionView.ItemTemplate>\n        <telerik:RadCollectionView.DragDrop>\n            <telerik:DragDrop IsDropAreaSupported=\"True\" \n                            AllowDrag=\"True\" \n                            AllowDrop=\"True\"/>\n        </telerik:RadCollectionView.DragDrop>\n    </telerik:RadCollectionView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address in DataForm (.NET MAUI, C#)\nDESCRIPTION: This code snippet shows how to validate an email address field in a .NET MAUI DataForm using data annotations. It utilizes the `[Required]` and `[EmailAddress]` attributes to ensure the input is a valid email format.  The `[Display]` attribute sets the display name and prompt for the field.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dataform-net-maui-validation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\n[Required]\n[EmailAddress]\n[Display(Name = \"Email\", Prompt = \"Enter Email\")]\npublic string Email\n{\n    get => this.email;\n    set => this.UpdateValue(ref this.email, value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Shows how to register Telerik controls in the .NET MAUI application by calling the UseTelerik() extension method in the CreateMauiApp method of MauiProgram.cs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Popup Control in XAML with Entry Field and Button\nDESCRIPTION: XAML code for setting up a Popup control attached to a Button. The Popup contains an Entry control for user input and a Button for closing the popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='popup-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML code snippet adds the Telerik namespace to the XAML file, allowing the use of Telerik UI controls in the markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/viewport.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGrid Search Settings in XAML\nDESCRIPTION: Demonstrates how to set up the DataGrid with SearchSettings in XAML, including SearchPanelVisibilityMode, SearchTrigger, and TextMatchMode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                    ItemsSource=\"{Binding Countries}\">\n    <telerik:RadDataGrid.SearchSettings>\n        <telerik:DataGridSearchSettings SearchPanelVisibilityMode=\"AlwaysVisible\"\n                                       SearchTrigger=\"TextChanged\"\n                                       TextMatchMode=\"Contains\" />\n    </telerik:RadDataGrid.SearchSettings>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: Illustrates how to register Telerik controls in the MauiProgram.cs file using the UseTelerik extension method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for DataGrid Reordering in C#\nDESCRIPTION: This C# code snippet defines a `ViewModel` for the DataGrid reordering example. It includes properties like `Data` (an `ObservableCollection` of `PersonDetails`) and `CanUserReorderColumns` (a boolean to control column reordering).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace DataGridMAUI\n{\n    public class ViewModel : INotifyPropertyChanged\n    {\n        private bool canUserReorderColumns = true;\n\n        public ViewModel()\n        {\n            this.GenerateData();\n        }\n\n        public ObservableCollection<PersonDetails> Data { get; set; }\n\n        public bool CanUserReorderColumns\n        {\n            get\n            {\n                return this.canUserReorderColumns;\n            }\n            set\n            {\n                this.canUserReorderColumns = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        private void GenerateData()\n        {\n            var newData = new ObservableCollection<PersonDetails>();\n\n            newData.Add(new PersonDetails() { Name = \"Tom\", Age = 24, Email = \"tom@test.com\", Country = \"USA\" });\n            newData.Add(new PersonDetails() { Name = \"John\", Age = 31, Email = \"john@test.com\", Country = \"UK\" });\n            newData.Add(new PersonDetails() { Name = \"Alejandro\", Age = 44, Email = \"alejandro@test.com\", Country = \"Spain\" });\n            newData.Add(new PersonDetails() { Name = \"Maria\", Age = 28, Email = \"maria@test.com\", Country = \"Germany\" });\n\n            this.Data = newData;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram - C#\nDESCRIPTION: This C# snippet shows how to register Telerik controls using the UseTelerik method inside the MauiProgram's CreateMauiApp method. This is essential for enabling Telerik functionalities within the MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n using Telerik.Maui.Controls.Compatibility;\n\n public static class MauiProgram\n {\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n }\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls\nDESCRIPTION: This code snippet shows how to register Telerik controls within the `CreateMauiApp` method in `MauiProgram.cs`. This step is crucial to enable the usage of Telerik controls in your .NET MAUI application. The `UseTelerik()` extension method is essential for integrating the Telerik UI suite.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RadListView in .NET MAUI using XAML\nDESCRIPTION: This snippet demonstrates the setup of a RadListView with data binding, item template, and namespace inclusion in a .NET MAUI application. The ListView binds to a ViewModel and displays names using a Label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\" ItemsSource=\"{Binding Source}\">\n    <telerik:RadListView.BindingContext>\n        <local:ViewModel />\n    </telerik:RadListView.BindingContext>\n    <telerik:RadListView.ItemTemplate>\n        <DataTemplate>\n            <telerik:ListViewTemplateCell>\n                <telerik:ListViewTemplateCell.View>\n                    <Grid>\n                        <Label Margin=\"10\" Text=\"{Binding Name}\" />\n                    </Grid>\n                </telerik:ListViewTemplateCell.View>\n            </telerik:ListViewTemplateCell>\n        </DataTemplate>\n    </telerik:RadListView.ItemTemplate>\n</telerik:RadListView>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Handler for Android - .NET MAUI\nDESCRIPTION: This code defines a custom Editor handler for Android using C#, which overrides the CreatePlatformView method to attach a custom touch listener. This allows the parent view to manage touch events correctly, critical for enabling scrolling within a ScrollView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dotnet-maui-editor-scroll-inside-scrollview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEditorHandler : EditorHandler\n{\n#if ANDROID\n    protected override AppCompatEditText CreatePlatformView()\n    {\n        var platfromView = base.CreatePlatformView();\n        platfromView.SetOnTouchListener(new CustomTouchListener());\n        return platfromView;\n    }\n\n    class CustomTouchListener : Java.Lang.Object, IOnTouchListener\n    {\n        public bool OnTouch(Android.Views.View? v, MotionEvent? e)\n        {\n            v?.Parent?.RequestDisallowInterceptTouchEvent(true);\n            if ((e.Action & MotionEventActions.Up) != 0 &&\n                (e.ActionMasked & MotionEventActions.Up) != 0)\n            {\n                v?.Parent?.RequestDisallowInterceptTouchEvent(false);\n            }\n\n            return false;\n        }\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting and Grouping Logic in MAUI DataGrid - C#\nDESCRIPTION: This C# code snippet defines a custom column class 'CustomComboBoxColumn' that overrides methods to implement custom sorting and grouping logic using DelegateSortDescriptor and DelegateGroupDescriptor classes. The custom implementations ensure that the DataGrid maintains built-in UI features while applying specific sorting and grouping logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-sort-group-datagrid-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomComboBoxColumn : DataGridComboBoxColumn\n{\n    protected override GroupDescriptorBase CreateGroupDescriptor()\n    {\n        // Implement your custom grouping logic here\n        return new DelegateGroupDescriptor() { DisplayContent = \"\", KeyLookup = new CustomIKeyLookup() };\n    }\n\n    protected override SortDescriptorBase CreateSortDescriptor()\n    {\n        // Implement your custom sorting logic here\n        return new DelegateSortDescriptor() { KeyLookup = new CustomSortKeyLookup(), Comparer = new CustomComparer() };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Style in DataGrid with XAML using VisualStateManager\nDESCRIPTION: This XAML snippet demonstrates how to define a custom CellContentTemplate for a DataGridTextColumn in a Telerik UI for .NET MAUI RadDataGrid and apply hover styles using VisualStateManager. It defines Normal, Disabled, and PointerOver states to change the background and text color on hover, ensuring the visual feedback is maintained when the user interacts with the cell. This approach overrides the default behavior to add custom hover effects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-apply-hover-style-decorationstyle-cellcontenttemplate.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadDataGrid.Columns>\n    <telerik:DataGridTextColumn PropertyName=\"Name\" HeaderText=\"Name\">\n        <telerik:DataGridTextColumn.CellDecorationStyle>\n            <telerik:DataGridBorderStyle BorderColor=\"DarkBlue\" BorderThickness=\"3\" BackgroundColor=\"LightBlue\" />\n        </telerik:DataGridTextColumn.CellDecorationStyle>\n        <telerik:DataGridTextColumn.CellContentTemplate>\n            <DataTemplate>\n                <Label Text=\"{Binding Name}\">\n                    <VisualStateManager.VisualStateGroups>\n                        <VisualStateGroupList>\n                            <VisualStateGroup x:Name=\"CommonStates\">\n                                <VisualState x:Name=\"Normal\">\n                                    <VisualState.Setters>\n                                        <Setter Property=\"BackgroundColor\" Value=\"Lime\" />\n                                    </VisualState.Setters>\n                                </VisualState>\n                                <VisualState x:Name=\"Disabled\">\n                                    <VisualState.Setters>\n                                        <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                                    </VisualState.Setters>\n                                </VisualState>\n\t\t\t\t<!-- TAKEAWAY: This is the PointerOver state that is invoked during hover -->\n                                <VisualState x:Name=\"PointerOver\">\n                                    <VisualState.Setters>\n                                        <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n                                        <Setter Property=\"TextColor\" Value=\"Red\" />\n                                    </VisualState.Setters>\n                                </VisualState>\n                            </VisualStateGroup>\n                        </VisualStateGroupList>\n                    </VisualStateManager.VisualStateGroups>\n                </Label>\n            </DataTemplate>\n        </telerik:DataGridTextColumn.CellContentTemplate>\n    </telerik:DataGridTextColumn>\n</telerik:RadDataGrid.Columns>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This C# snippet shows how to register the Telerik controls within the `CreateMauiApp` method in `MauiProgram.cs`. This is done using the `UseTelerik` extension method. It ensures that Telerik controls are available for use in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \"\n```\n\n----------------------------------------\n\nTITLE: Implementing Excel File Import in .NET MAUI MainPage with File Picker\nDESCRIPTION: This code implements the complete Excel import functionality in the MainPage class. It manages the file picking, processing, and displaying data in the CollectionView, using an ObservableCollection for data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/import-excel-data-to-collectionview-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    ObservableCollection<DataEntry> entries = new ObservableCollection<DataEntry>();\n    public MainPage()\n    {\n        InitializeComponent();\n        this.entries = new ObservableCollection<DataEntry>();\n    }\n\n    // The following code executes when the button is clicked: \n    private async void Button_Clicked(object sender, EventArgs e)\n    {\n        try\n        {\n            var customFileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>\n            {\n                { DevicePlatform.MacCatalyst, new[] { \".csv\", \".xlsx\", } },\n                { DevicePlatform.WinUI, new[] { \".csv\", \".xlsx\", } },\n            });\n            var options = new PickOptions\n            {\n                PickerTitle = \"Please select a csv of xlsx file\",\n                FileTypes = customFileType,\n            };\n            var selectedFile = await FilePicker.PickAsync(options);\n\n\n            if (selectedFile != null)\n            {\n                var data = await selectedFile.OpenReadAsync();\n\n\n                using (IWorkbookImporter workBookImporter = SpreadImporter.CreateWorkbookImporter(SpreadDocumentFormat.Csv, data))\n                {\n                    foreach (IWorksheetImporter worksheetImporter in workBookImporter.WorksheetImporters)\n                    {\n                        foreach (IRowImporter rowImporter in worksheetImporter.Rows)\n                        {\n                            DataEntry entry = new DataEntry();\n\n                            bool shouldBreak = false;\n\n                            foreach (ICellImporter cell in rowImporter.Cells)\n                            {\n                                switch (cell.ColumnIndex)\n                                {\n                                    case 0:\n                                        entry.Cell1 = cell.Value;\n                                        break;\n                                    case 1:\n                                        entry.Cell2 = cell.Value;\n                                        break;\n                                    case 2:\n                                        entry.Cell3 = cell.Value;\n                                        break;\n                                    default:\n                                        shouldBreak = true;\n                                        break;\n                                }\n\n                                if (shouldBreak)\n                                {\n                                    break;\n                                }\n                            }\n\n                            this.entries.Add(entry);\n                        }\n                    }\n                }\n\n\n\n\n                this.collectionView.ItemsSource = this.entries;\n\n            }\n\n            return;\n\n        }\n        catch (Exception)\n        {\n\n        }\n    }\n}\n\n\n\nclass DataEntry\n{\n    public string Cell1 { get; set; }\n    public string Cell2 { get; set; }\n    public string Cell3 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Multi-Word Search Worker in C# for .NET MAUI PDF Viewer\nDESCRIPTION: This class extends PdfViewerTextSearchWorker to implement a custom search that treats multiple words as separate search terms. It overrides the Search method to use regular expressions for matching any of the entered words in the PDF document.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MultipleWordsSearchWorker : Telerik.Maui.Controls.PdfViewer.PdfViewerTextSearchWorker\n{\n    protected override PdfViewerTextSearchResult Search(PdfViewerSearchContext context)\n    {\n        string regex = GetMultiWordRegex(context.Text);\n        TextSearchOptions regexOptions = new TextSearchOptions { UseRegularExpression = true };\n        PdfViewerSearchContext newContext = new PdfViewerSearchContext(context.PdfViewer, context.Document, regex, regexOptions, context.SearchProgress, context.CancellationToken);\n\n        return base.Search(newContext);\n    }\n   \n    private static string GetMultiWordRegex(string text)\n    {\n        string[] words = text.Split(new string[] { \" \" }, StringSplitOptions.RemoveEmptyEntries);\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < words.Length; i++)\n        {\n            if (i > 0)\n            {\n                sb.Append(\"|\");\n            }\n\n            string expr = string.Format(@\"({0})\", words[i]);\n            sb.Append(expr);\n        }\n\n        return sb.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Item Class - C#\nDESCRIPTION: This snippet demonstrates how to define a sample class used to hold the necessary information for the Chat items in a .NET MAUI application. The class is structured to facilitate the binding of data in MVVM scenarios.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/mvvm-support.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chat-features-mvvm-chatitem'/>\n```\n\n----------------------------------------\n\nTITLE: Using Text Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define a TextFilterDescriptor in XAML to filter grid data based on a text property. The PropertyName, Operator, IsCaseSensitive, and Value properties need to be specified to properly filter the data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:TextFilterDescriptor PropertyName=\"Country\"\n                              Operator=\"StartsWith\"\n                              IsCaseSensitive=\"False\"\n                              Value=\"En\"/>\n```\n\n----------------------------------------\n\nTITLE: Data model for Club\nDESCRIPTION: This C# snippet defines a Club data model that implements property change notifications. It contains properties for name, time, number of registrations, and a list for combo box items, allowing for proper data binding in a DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-celledittemplate-picker-combobox.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Club : NotifyPropertyChangedBase\n{\n    private string name;\n    private TimeSpan time;\n    private string numregs;\n    private List<string> comboList;\n\n    public Club(string name, TimeSpan time)\n    {\n        Name = name;\n        Time = time;\n        comboList = new List<string>() { \"One\", \"Two\" };\n        numregs = \"One\";\n    }\n    public string Name\n    {\n        get { return this.name; }\n        set { this.UpdateValue(ref this.name, value); }\n    }\n\n    public TimeSpan Time\n    {\n        get { return this.time; }\n        set { this.UpdateValue(ref this.time, value); }\n    }\n    public List<string> ComboList\n    {\n        get { return this.comboList; }\n        set { this.UpdateValue(ref this.comboList, value); }\n    }\n    public string NumRegs\n    {\n        get { return this.numregs; }\n        set { this.UpdateValue(ref this.numregs, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Class\nDESCRIPTION: This C# snippet defines a simple `Data` class with two string properties: `Country` and `Capital`. This class serves as a basic data structure for populating the DataGrid with sample data. It doesn't depend on any external libraries.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Data\n{\n\tpublic string Country { get; set; }\n\tpublic string Capital { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Numerical Column with Custom Templates\nDESCRIPTION: Shows how to implement a numerical column with custom content and edit templates. Includes a slider for value editing and command buttons for commit and cancel operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/numerical-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridNumericalColumn PropertyName=\"StadiumCapacity\">\n\t<telerik:DataGridColumn.CellContenTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding StadiumCapacity}\"/>\n        </DataTemplate>\n    </telerik:DataGridColumn.CellContenTemplate>\n    <telerik:DataGridColumn.CellEditTemplate>\n        <DataTemplate>\n            <telerik:RadDockLayout>\n                <Button Text=\"OK\" Command=\"{Binding CommitEditCommand}\" telerik:RadDockLayout.Dock=\"Right\" />\n                <Button Text=\"X\" Command=\"{Binding CancelEditCommand}\"  telerik:RadDockLayout.Dock=\"Right\"/>\n                <Slider Maximum=\"80000\" Minimum=\"30000\" \n                        Value=\"{Binding Item.StadiumCapacity}\" \n                        HorizontalOptions=\"FillAndExpand\" />\n            </telerik:RadDockLayout>\n        </DataTemplate>\n    </telerik:DataGridColumn.CellEditTemplate>\n</telerik:DataGridNumericalColumn>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram for .NET MAUI\nDESCRIPTION: This snippet illustrates how to register the Telerik controls in a .NET MAUI application using the CreateMauiApp method. It involves calling the UseTelerik extension method during the app's builder configuration to ensure the Telerik components are available to the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\\n\\npublic static class MauiProgram\\n{\\n\\tpublic static MauiApp CreateMauiApp()\\n\\t{\\n\\t\\tvar builder = MauiApp.CreateBuilder();\\n\\t\\tbuilder\\n\\t\\t\\t.UseTelerik()\\n\\t\\t\\t.UseMauiApp<App>()\\n\\t\\t\\t.ConfigureFonts(fonts =>\\n\\t\\t\\t{\\n\\t\\t\\t\\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\\n\\t\\t\\t});\\n\\n\\t\\treturn builder.Build();\\n\\t} \\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete Control in C#\nDESCRIPTION: C# code snippet for programmatically defining the AutoComplete control in a .NET MAUI application. It shows how to create and configure the control in code-behind.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar autocomplete = new RadAutoComplete();\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: Shows how to register Telerik controls in the MauiProgram.cs file using the UseTelerik extension method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DelegateFilterDescriptor to RadDataGrid\nDESCRIPTION: This code snippet shows how to add a DelegateFilterDescriptor with a custom filter to a RadDataGrid instance. The descriptor uses the previously defined CustomFilter implementation to filter the grid's data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\ndataGrid.FilterDescriptors.Add(new DelegateFilterDescriptor() { Filter = new CustomFilter()});\n```\n\n----------------------------------------\n\nTITLE: Defining RadDataGrid in XAML\nDESCRIPTION: This snippet demonstrates how to add the RadDataGrid control to a .NET MAUI page using XAML. The `x:Name` attribute allows referencing the DataGrid in the code behind. No dependencies are required other than the Telerik UI for .NET MAUI library being added to the project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik NuGet Feed using .NET CLI\nDESCRIPTION: Command to add the Telerik NuGet package source to your development environment. Requires Telerik account credentials.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs-code.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source https://nuget.telerik.com/v3/index.json --name TelerikNuGetFeed --username <TELERIK EMAIL> --password <TELERIK PASSWORD> --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This code snippet demonstrates how to register the Telerik controls within the `CreateMauiApp` method in `MauiProgram.cs`. The `UseTelerik` extension method is crucial for making the Telerik UI components available throughout the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Content Template in .NET MAUI DataGrid XAML\nDESCRIPTION: This XAML snippet demonstrates how to use the CellContentTemplate property to customize DataGrid columns. It sets a RadDateTimePicker for the Date column and a Switch for the Boolean column.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/cell-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" ItemsSource=\"{Binding Clubs}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\" HeaderText=\"Name\"/>\n        <telerik:DataGridDateColumn PropertyName=\"DateEstablished\" HeaderText=\"Date Established\">\n            <telerik:DataGridDateColumn.CellContentTemplate>\n                <DataTemplate>\n                    <telerik:RadDateTimePicker Date=\"{Binding DataItem.DateEstablished}\" Margin=\"10\"/>\n                </DataTemplate>\n            </telerik:DataGridDateColumn.CellContentTemplate>\n        </telerik:DataGridDateColumn>\n        <telerik:DataGridBooleanColumn PropertyName=\"IsChampion\" HeaderText=\"Champion\">\n            <telerik:DataGridBooleanColumn.CellContentTemplate>\n                <DataTemplate>\n                    <Switch IsToggled=\"{Binding DataItem.IsChampion}\" Margin=\"10\"/>\n                </DataTemplate>\n            </telerik:DataGridBooleanColumn.CellContentTemplate>\n        </telerik:DataGridBooleanColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This code snippet demonstrates how to register Telerik controls within the `CreateMauiApp` method of the `MauiProgram.cs` file. By calling the `UseTelerik()` extension method on the `MauiAppBuilder`, the Telerik UI for .NET MAUI controls are registered and made available for use within the application. This registration is necessary for the application to recognize and utilize the Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace and Registering Controls in XAML\nDESCRIPTION: Demonstrates how to add the Telerik namespace and register Telerik controls in a .NET MAUI XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             x:Class=\"MauiApp.MainPage\">\n    <ContentPage.Content>\n        <!-- Your page content here -->\n    </ContentPage.Content>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting DataGrid ItemsSource\nDESCRIPTION: This C# snippet demonstrates how to populate the RadDataGrid with data by assigning a list of `Data` objects to the `ItemsSource` property. This allows the DataGrid to automatically generate rows based on the data provided. It requires the `Data` class definition from the previous snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nthis.dataGrid.ItemsSource = new List<Data>\n{\n\tnew Data { Country = \"India\", Capital = \"New Delhi\"},\n\tnew Data { Country = \"South Africa\", Capital = \"Cape Town\"},\n\tnew Data { Country = \"Nigeria\", Capital = \"Abuja\" },\n\tnew Data { Country = \"Singapore\", Capital = \"Singapore\" }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This code demonstrates how to register Telerik controls in your .NET MAUI application by calling the UseTelerik extension method in the CreateMauiApp method of the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DataGrid Column Headers in XAML\nDESCRIPTION: Example of setting HeaderStyle for a DataGridTextColumn to customize the column header appearance, including text positioning and sort indicator options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/columns-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTextColumn.HeaderStyle>\n\t<Style TargetType=\"telerik:DataGridColumnHeaderAppearance\">\n\t\t<Setter Property=\"TextHorizontalOptions\" Value=\"Center\" />\n\t\t<Setter Property=\"SortIndicatorHorizontalOptions\" Value=\"Center\" />\n\t</Style>\n</telerik:DataGridTextColumn.HeaderStyle>\n```\n\n----------------------------------------\n\nTITLE: AIPrompt ViewModel Example in C#\nDESCRIPTION: This snippet provides a sample ViewModel class that can be used with the AIPrompt control.  It likely contains properties and logic for managing the input, output, and commands of the AIPrompt.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='aiprompt-views-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining the Business Model for OHLC Data - C#\nDESCRIPTION: This snippet defines the data model used to represent OHLC financial data points in C#. It includes four key properties: open, high, low, and close, which are essential for tracking stock market trends.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/ohlc-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-ohlc-datapoint-csharp' />\n```\n\n----------------------------------------\n\nTITLE: DataGrid and DataPager XAML Definition\nDESCRIPTION: This XAML snippet defines the DataPager and DataGrid controls, binding the DataGrid's ItemsSource to a property in the ViewModel and associating the DataPager with the DataGrid for paging. The DataPager is configured with properties like PageSize and DisplayMode to control the paging behavior and appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/paging.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-datapager' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Demonstrates how to register Telerik UI for .NET MAUI controls in the application by calling the UseTelerik extension method in the MauiProgram.cs file. This registration is required for all Telerik MAUI controls to function properly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Customizing DataGrid Search Panel Control Template in MAUI\nDESCRIPTION: A comprehensive XAML control template that removes the options icon from the DataGrid search panel while preserving search entry and close button functionality. Uses Telerik MAUI controls and platform-specific styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-datagrid-search-panel-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ControlTemplate x:Key=\"DataGridSearchPanel_ControlTemplate\">\n    <telerik:RadToolbar BindingContext=\"{TemplateBinding DataGrid.SearchSettings}\"\n                        BackgroundColor=\"{OnPlatform Default=#F8F8F8, iOS=#33787880, WinUI=#E2E2E2}\"\n                        BorderThickness=\"1, 1, 1, 0\"\n                        ContentPadding=\"{OnPlatform Android='16, 0', iOS='16, 3', MacCatalyst='12, 4', WinUI='8, 2'}\"\n                        OverflowMode=\"Clip\">\n        <telerik:EntryToolbarItem PlacementOptions=\"ToolStrip\"\n                                  Text=\"{Binding IntermediateSearchText}\"\n                                  telerikMauiControls:EntryExtensions.CompletedCommand=\"{Binding SearchEntryCompletedCommand}\"\n                                  Style=\"{StaticResource DataGridSearchPanel_EntryToolbarItemView_Style}\" />\n       \n        <telerik:LabelToolbarItem Text=\"{Binding ResultsSummary}\"\n                                  IsVisible=\"{OnPlatform Android=False, iOS=False}\" />\n        <telerik:ButtonToolbarItem PlacementOptions=\"ToolStrip\"\n                                   Command=\"{Binding CloseSearchPanelCommand}\"\n                                   IsVisible=\"{Binding IsCloseSearchPanelButtonVisible}\"\n                                   Style=\"{StaticResource DataGridSearchPanel_CloseButtonToolbarItemView_Style}\">\n            <telerik:LabelToolbarItem.ImageSource>\n                <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconCross}\"\n                         FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                         Size=\"16\" />\n            </telerik:LabelToolbarItem.ImageSource>\n        </telerik:ButtonToolbarItem>\n    </telerik:RadToolbar>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to DataGrid's Commands Collection (C#)\nDESCRIPTION: This snippet demonstrates how to add the custom `LoadMoreData` command to the `Commands` collection of the DataGrid. This allows the custom command to be executed when the 'Load More' button is pressed, enabling custom data loading logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n        var command = new CustomLoadMoreDataCommand(this.dataGrid);\n        this.dataGrid.Commands.Add(new CommandDescriptor() {\n            Id = DataGridCommandId.LoadMoreData,\n            Command = command\n        });\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Edit Template in .NET MAUI DataGrid XAML\nDESCRIPTION: This XAML snippet shows how to use the CellEditTemplate property to customize the edit mode of DataGrid columns. It sets a custom edit template with a Switch and two Buttons for the Boolean column.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/cell-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" ItemsSource=\"{Binding Clubs}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\" HeaderText=\"Name\"/>\n        <telerik:DataGridDateColumn PropertyName=\"DateEstablished\" HeaderText=\"Date Established\"/>\n        <telerik:DataGridBooleanColumn PropertyName=\"IsChampion\" HeaderText=\"Champion\">\n            <telerik:DataGridBooleanColumn.CellEditTemplate>\n                <DataTemplate>\n                    <Grid>\n                        <Grid.ColumnDefinitions>\n                            <ColumnDefinition Width=\"*\"/>\n                            <ColumnDefinition Width=\"Auto\"/>\n                            <ColumnDefinition Width=\"Auto\"/>\n                        </Grid.ColumnDefinitions>\n                        <Switch Grid.Column=\"0\" IsToggled=\"{Binding IsChampion}\"/>\n                        <Button Grid.Column=\"1\" Text=\"OK\" BackgroundColor=\"#88FF88\"/>\n                        <Button Grid.Column=\"2\" Text=\"Cancel\" BackgroundColor=\"#FFCCCC\"/>\n                    </Grid>\n                </DataTemplate>\n            </telerik:DataGridBooleanColumn.CellEditTemplate>\n        </telerik:DataGridBooleanColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI Chart\nDESCRIPTION: This snippet shows how to add the Telerik namespace required for using the Telerik UI for .NET MAUI Chart in XAML pages. This is necessary for recognizing the Telerik components in the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This snippet illustrates how to register Telerik controls within the `CreateMauiApp` method of your `MauiProgram.cs` file.  This step is crucial for enabling the use of Telerik controls in your .NET MAUI application. It utilizes the `UseTelerik` extension method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Register Telerik Controls in .NET MAUI\nDESCRIPTION: This code snippet shows how to register the Telerik controls in a .NET MAUI application using the `UseTelerik` extension method within the `CreateMauiApp` method in `MauiProgram.cs`. This registration is necessary for using Telerik UI components in the application. It also configures fonts.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n```C#\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel BindingContext in .NET MAUI with C#\nDESCRIPTION: This snippet sets the ViewModel as the BindingContext for a page in a .NET MAUI application. It establishes the data context for data binding, allowing the UI to interact with the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/editing.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Colors in XAML Resource Dictionary\nDESCRIPTION: This XAML snippet demonstrates how to create a custom resource dictionary to override the primary colors of a Telerik UI for .NET MAUI theme swatch. It includes color definitions and color filters for various shades and opacities of the primary color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<?xaml-comp compile=\"true\" ?>\n<ResourceDictionary \n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\">\n\n    <!-- Primary -->\n    <Color x:Key=\"RadPrimarySubtleColor\">#D0E3EE</Color>\n    <Color x:Key=\"RadPrimarySubtleHoverColor\">#B8D5E6</Color>\n    <Color x:Key=\"RadPrimarySubtleActiveColor\">#A0C7DE</Color>\n    <Color x:Key=\"RadPrimaryColor\">#74AC12</Color>\n    <Color x:Key=\"RadPrimaryHoverColor\">#689B10</Color>\n    <Color x:Key=\"RadPrimaryActiveColor\">#5D8A0E</Color>\n    <Color x:Key=\"RadPrimaryEmphasisColor\">#ACCD71</Color>\n    <Color x:Key=\"RadPrimaryOnSubtleColor\">#2E4507</Color>\n    <Color x:Key=\"RadOnPrimaryColor\">#FFFFFF</Color>\n    <Color x:Key=\"RadPrimaryOnSurfaceColor\">#74AC12</Color>\n\n    <telerik:ColorFilter x:Key=\"RadPrimaryColorAlpha4\" Color=\"{StaticResource RadPrimaryColor}\" Alpha=\"0.04\" />\n    <telerik:ColorFilter x:Key=\"RadPrimaryColorAlpha16\" Color=\"{StaticResource RadPrimaryColor}\" Alpha=\"0.16\" />\n    <telerik:ColorFilter x:Key=\"RadPrimaryColorDarken4\" Color=\"{StaticResource RadPrimaryColor}\" Lighten=\"-0.04\" />\n    <telerik:ColorFilter x:Key=\"RadPrimaryColorDarken12\" Color=\"{StaticResource RadPrimaryColor}\" Lighten=\"-0.12\" />\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: LoadOnDemand Event Handler Implementation\nDESCRIPTION: Demonstrates handling the LoadOnDemand event to dynamically add items to the ListView, supporting both synchronous and asynchronous data loading strategies.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnLoadOnDemand(object sender, LoadOnDemandEventArgs e)\n{\n    // Load new items synchronously or asynchronously\n    var newItems = GetMoreItems();\n    foreach (var item in newItems)\n    {\n        Items.Add(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Control in XAML\nDESCRIPTION: This code snippet demonstrates how to define a Telerik RadEntry in XAML, setting up handlers for the TextChanged and Completed events. It includes a Numeric keyboard and a watermark text. Dependencies include Telerik UI for .NET MAUI. This setup is a prerequisite for handling the entry control events in C#.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadEntry x:Name=\"entry\"\n                      Keyboard=\"Numeric\"\n                      WatermarkText=\"Watermark Text\"\n                      TextChanged=\"Entry_TextChanged\"\n                      Completed=\"Entry_Completed\"/>\n    <Label x:Name=\"textChangedLabel\"/>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Setting GroupHeaderTemplate to RadListView in XAML\nDESCRIPTION: This code demonstrates how to set the defined GroupHeaderTemplate to a Telerik RadListView in XAML. It also shows how to bind the ItemsSource, define the BindingContext using a local ViewModel, and use PropertyGroupDescriptor to enable grouping based on the 'Country' property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/customize-group-header.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\" \n\t\t\t\t\t ItemsSource=\"{Binding Cities}\"\n                     GroupHeaderTemplate=\"{StaticResource ListViewGroupHeaderTemplate}\">\n    <telerik:RadListView.BindingContext>\n        <local:GroupingViewModel/>\n    </telerik:RadListView.BindingContext>\n    <telerik:RadListView.GroupDescriptors>\n        <telerikListView:PropertyGroupDescriptor PropertyName=\"Country\"/>\n    </telerik:RadListView.GroupDescriptors>\n</telerik:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Register Telerik Controls in C#\nDESCRIPTION: This snippet demonstrates how to register Telerik controls using the UseTelerik extension method within the CreateMauiApp method in your MauiProgram.cs file. This setup is crucial for integrating Telerik UI components into your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\\\"OpenSans-Regular.ttf\\\", \\\"OpenSansRegular\\\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Register Telerik Controls in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to register the Telerik controls within your .NET MAUI application.  It utilizes the `UseTelerik` extension method within the `CreateMauiApp` method of the `MauiProgram.cs` file to enable Telerik UI components. This registration is crucial for the application to recognize and utilize the Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronized Scrolling for Two DataGrids in MAUI\nDESCRIPTION: This code snippet demonstrates how to synchronize scrolling between two DataGrid controls. It includes methods for finding the RadScrollView within each DataGrid, attaching a Scrolled event handler, and programmatically scrolling the second DataGrid to match the first one's position.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/sync-scrolling-datagrid-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n\tpublic MainPage()\n\t{\n\t\tInitializeComponent();\n\n\t\tvar data = new ObservableCollection<Data>();\n\t\tfor (int i = 0; i < 30; i++)\n\t\t{\n\t\t\tdata.Add(new Data { Address = \"Address\" + i, Capital = \"Capital\" + i, Country = \"Country \" + i, MyData = \"My Data\" + i, Name = \"Name \" + i });\n\t\t}\n\t\tthis.grid1.ItemsSource = data;\n\n\n\t\tvar data2 = new ObservableCollection<Data>();\n\t\tfor (int i = 0; i < 30; i++)\n\t\t{\n\t\t\tdata2.Add(new Data { Address = \"Address\" + i, Capital = \"Capital\" + i, Country = \"Country \" + i, MyData = \"My Data\" + i, Name = \"Name \" + i });\n\t\t}\n\t\tthis.grid2.ItemsSource = data2;\n\n\t\tRadScrollView sv1 = FindRadScrollView(this.grid1);\n\t\tif (sv1 != null)\n\t\t{\n\t\t\tsv1.Scrolled += Sv_Scrolled;\n\t\t}\n\t}\n\n\tprivate void Sv_Scrolled(object? sender, ScrolledEventArgs e)\n\t{\n\t\tvar x = e.ScrollX;\n\t\tvar y = e.ScrollY;\n\n\t\tRadScrollView sv2 = FindRadScrollView(this.grid2);\n\t\tsv2?.ScrollToAsync(x, y, true);\n\t}\n\n\tprivate RadScrollView? FindRadScrollView(RadDataGrid grid)\n\t{\n\t\tforeach (var child in grid)\n\t\t{\n\t\t\tif (child is RadScrollView sv)\n\t\t\t{\n\t\t\t\treturn sv;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cartesian Chart with Bar Series in XAML for .NET MAUI\nDESCRIPTION: This snippet shows how to declare a RadCartesianChart in XAML, including setting up the binding context, defining horizontal and vertical axes, and adding a BarSeries. The chart is bound to a CategoricalDataViewModel and uses Category and Value bindings for the BarSeries.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:CategoricalDataViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries ValueBinding=\"Value\"\n                                CategoryBinding=\"Category\"\n                                ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Overriding OnHandlerChanged in Custom RadEntry Class in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom class that inherits from RadEntry and overrides the OnHandlerChanged method to customize the cursor color. It ensures that the base OnHandlerChanged method is called and then accesses the native platform view to apply platform-specific cursor color customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/entry-cursor-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n\"public class MyCustomTelerikEntry : Telerik.Maui.Controls.RadEntry\n{\n    protected override void OnHandlerChanged()\n    {\n        // DO NOT SKIP THIS, or you risk breaking internal logic\n        base.OnHandlerChanged();\n\n        // Step 1. Make sure the PlatformView is available\n        if (this.Handler?.PlatformView is RadMauiEntry nativeEntry)\n        {\n            // Step 2. change the desired native-specific properties\n#if ANDROID\n        nativeEntry.EditText.TextCursorDrawable?.SetColorFilter(new Android.Graphics.PorterDuffColorFilter(Android.Graphics.Color.Red, Android.Graphics.PorterDuff.Mode.Darken));\n#elif __IOS__\n            nativeEntry.TextField.TintColor = UIKit.UIColor.White;\n#endif\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring RadPieChart with Pie Series in XAML\nDESCRIPTION: This snippet demonstrates how to declare a RadPieChart in XAML and bind it to the ViewModel created for displaying Pie Series. Proper binding will ensure that the chart accurately reflects the data defined in the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/pie-series.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<RadPieChart ItemsSource=\"{Binding Items}\">\n    <RadPieChart.Series>\n        <PieSeries ValueBinding=\"{Binding Value}\" />\n    </RadPieChart.Series>\n</RadPieChart>\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete Control as Custom Editor in .NET MAUI DataForm\nDESCRIPTION: This example demonstrates how to create a custom editor in RadDataForm using an AutoComplete control. The XAML snippet defines the DataFormCustomEditor with an EditorTemplate that contains a RadAutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/custom-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\">\n    <telerik:RadDataForm.Editors>\n        <telerik:DataFormCustomEditor PropertyName=\"Country\">\n            <telerik:DataFormCustomEditor.EditorTemplate>\n                <ControlTemplate>\n                    <telerik:DataFormCustomEditorContentPresenter>\n                        <telerik:RadAutoComplete x:Name=\"autoComplete\" \n                                                  Watermark=\"{Binding Placeholder}\" \n                                                  DisplayMode=\"Plain\" \n                                                  SuggestionMode=\"Contains\" \n                                                  NoResultsMessage=\"No items found\"\n                                                  Text=\"{Binding EditorValue, Mode=TwoWay}\">\n                            <telerik:RadAutoComplete.DataSource>\n                                <local:CustomEditorViewModel/>\n                            </telerik:RadAutoComplete.DataSource>\n                            <telerik:RadAutoComplete.SuggestionItemTemplate>\n                                <DataTemplate>\n                                    <Label Margin=\"10\" VerticalOptions=\"Center\" Text=\"{Binding}\" />\n                                </DataTemplate>\n                            </telerik:RadAutoComplete.SuggestionItemTemplate>\n                        </telerik:RadAutoComplete>\n                    </telerik:DataFormCustomEditorContentPresenter>\n                </ControlTemplate>\n            </telerik:DataFormCustomEditor.EditorTemplate>\n        </telerik:DataFormCustomEditor>\n    </telerik:RadDataForm.Editors>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Control in XAML\nDESCRIPTION: This snippet shows how to add a RadDatePicker control in a .NET MAUI project. It requires setting up the .NET MAUI application and adding the Telerik UI namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker x:Name=\"datePicker\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Badge Position, Alignment and Offset in .NET MAUI BadgeView\nDESCRIPTION: This code snippet demonstrates how to position and align a Badge indicator by setting its horizontal and vertical position, alignment, and offset properties within a BadgeView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/position-alignment.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='badgeview-align-position-offset'/>\n```\n\n----------------------------------------\n\nTITLE: Including Telerik Namespace\nDESCRIPTION: The following namespace declaration is necessary to access Telerik controls in XAML files. It should be included at the top of your XAML file for proper linking.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik controls in MauiProgram.cs\nDESCRIPTION: This snippet shows how to register Telerik controls using the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to register the Telerik controls within the `CreateMauiApp` method in `MauiProgram.cs`. It utilizes the `UseTelerik` extension method to enable Telerik UI components. This is a crucial step to ensure Telerik controls function correctly within the .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PrivacyInfo.xcprivacy for .NET MAUI Apps\nDESCRIPTION: Sample XML configuration for the PrivacyInfo.xcprivacy file that declares API access types and their usage reasons. This configuration includes access declarations for file timestamps, system boot time, disk space, and user defaults, each with their corresponding reason codes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/apple-privacy-manifest-requirement.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>C617.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategorySystemBootTime</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>35F9.1</string>\n            </array>\n        </dict>\n        <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryDiskSpace</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>E174.1</string>\n            </array>\n        </dict>     \n\t    <dict>\n            <key>NSPrivacyAccessedAPIType</key>\n            <string>NSPrivacyAccessedAPICategoryUserDefaults</string>\n            <key>NSPrivacyAccessedAPITypeReasons</key>\n            <array>\n                <string>CA92.1</string>\n            </array>\n        </dict>\n    </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Filtering ViewModel Implementation\nDESCRIPTION: ViewModel class implementation for basic filtering functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<listview-features-filtering-viewmodel/>\n```\n\n----------------------------------------\n\nTITLE: Parsing Excel File Data with SpreadStreamProcessing in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to read data from an Excel file using the Telerik SpreadStreamProcessing library. It processes the first three columns of data from either CSV or XLSX files and stores them in a collection of DataEntry objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/import-excel-data-to-collectionview-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nList<DataEntry> entries = new List<DataEntry>();\n\nusing (System.IO.FileStream fs = new System.IO.FileStream(path, FileMode.Open))\n{\n    SpreadDocumentFormat format;\n    switch (Path.GetExtension(path))\n    {\n        case \".csv\":\n            format = SpreadDocumentFormat.Csv;\n            break;\n        case \".xlsx\": \n            format = SpreadDocumentFormat.Xlsx;\n            break;\n        default:\n            format = SpreadDocumentFormat.Xlsx;\n            break;  \n    }\n\n    using (IWorkbookImporter workBookImporter = SpreadImporter.CreateWorkbookImporter(format, fs))\n    {\n        foreach (IWorksheetImporter worksheetImporter in workBookImporter.WorksheetImporters)\n        {\n            foreach (IRowImporter rowImporter in worksheetImporter.Rows)\n            {\n                DataEntry entry = new DataEntry();\n\n                bool shouldBreak = false;\n\n                foreach (ICellImporter cell in rowImporter.Cells)\n                {\n                    switch (cell.ColumnIndex)\n                    {\n                        case 0:\n                            entry.Cell1 = cell.Value;\n                            break;\n                        case 1:\n                            entry.Cell2 = cell.Value;\n                            break;\n                        case 2:\n                            entry.Cell3 = cell.Value;\n                            break;\n                        default:\n                            shouldBreak = true;\n                            break;\n                    }\n                    \n                    if (shouldBreak)\n                    {\n                        break;\n                    }\n                }\n\n                entries.Add(entry);\n            }\n        }\n    }\n}\n\nclass DataEntry\n{\n    public string Cell1 { get; set; }\n    public string Cell2 { get; set; }\n    public string Cell3 { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring RadCartesianChart with TrackBall in XAML\nDESCRIPTION: Configures the RadCartesianChart in XAML and binds it to a ViewModel. It includes setting up horizontal and vertical axes, adding two line series for demonstration purposes, and enabling the ChartTrackBallBehavior for visual data point interaction. Dependencies include having Telerik UI for .NET MAUI installed and set up.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/trackball-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\"\n                                      PlotMode=\"OnTicks\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Category\"\n                                 DisplayName=\"Sales 1\"\n                                 ItemsSource=\"{Binding Data1}\" />\n        <telerik:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Category\"\n                                 DisplayName=\"Sales 2\"\n                                 ItemsSource=\"{Binding Data2}\" />\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.ChartBehaviors>\n        <telerik:ChartTrackBallBehavior ShowIntersectionPoints=\"True\"\n                                             ShowTrackInfo=\"True\" />\n    </telerik:RadCartesianChart.ChartBehaviors>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Defining All RichTextEditor Toolbar Items in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define all available toolbar items for the RichTextEditor. It includes various formatting options, alignment tools, color pickers, and specialized items for hyperlinks and images.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/toolbar/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRichTextEditorToolbar x:Name=\"toolbar\" RichTextEditor=\"{x:Reference richTextEditor}\">\n    <telerik:RadRichTextEditorToolbar.Items>\n        <telerik:RichTextEditorFontFamilyToolbarItem />\n        <telerik:RichTextEditorFontSizeToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorBoldToolbarItem />\n        <telerik:RichTextEditorItalicToolbarItem />\n        <telerik:RichTextEditorUnderlineToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorAlignLeftToolbarItem />\n        <telerik:RichTextEditorAlignCenterToolbarItem />\n        <telerik:RichTextEditorAlignRightToolbarItem />\n        <telerik:RichTextEditorAlignJustifyToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorTextColorToolbarItem />\n        <telerik:RichTextEditorHighlightTextColorToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorBulletingToolbarItem />\n        <telerik:RichTextEditorNumberingToolbarItem />\n        <telerik:RichTextEditorOutdentToolbarItem />\n        <telerik:RichTextEditorIndentToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorTextFormattingToolbarItem />\n        <telerik:RichTextEditorClearFormattingToolbarItem />\n        <telerik:RichTextEditorStrikethroughToolbarItem />\n        <telerik:RichTextEditorSuperscriptToolbarItem />\n        <telerik:RichTextEditorSubscriptToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorUndoToolbarItem />\n        <telerik:RichTextEditorRedoToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorColorPickerToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorCopyToolbarItem />\n        <telerik:RichTextEditorCutToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorAddOrEditHyperlinkToolbarItem />\n        <telerik:RichTextEditorAddHyperlinkToolbarItem />\n        <telerik:RichTextEditorRemoveHyperlinkToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorAddOrEditImageToolbarItem />\n        <telerik:SeparatorToolbarItem />\n        <telerik:RichTextEditorHyperlinkNavigationToolbarItem />\n        <telerik:RichTextEditorImageNavigationToolbarItem />\n    </telerik:RadRichTextEditorToolbar.Items>\n</telerik:RadRichTextEditorToolbar>\n```\n\n----------------------------------------\n\nTITLE: Adding RadCartesianChart with Spline Area Series\nDESCRIPTION: This snippet is included as a placeholder for incorporating a RadCartesianChart into the XAML layout of a .NET MAUI application. It specifies the Spline Area Series to visualize the data while handling null values appropriately.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/nullvalues.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:SplineAreaSeries ItemsSource=\"{Binding CategoryItems}\" ValueBinding=\"Value\" />\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Initializing Theme Change Detection in .NET MAUI App\nDESCRIPTION: App constructor implementation that sets up theme change detection and handling. It initializes the app with an unspecified theme, subscribes to theme change events, and applies the initial theme.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/change-telerik-theme-runtime.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic App()\n{\n    InitializeComponent();\n\n    Application.Current.UserAppTheme = AppTheme.Unspecified;\n    Application.Current.RequestedThemeChanged += (s, e) => ApplyTelerikTheme();\n    this.ApplyTelerikTheme();\n\n    this.MainPage = new AppShell();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Context Menu in Toolbar for .NET MAUI\nDESCRIPTION: This code demonstrates how to create a two-layer hierarchy menu in a Toolbar using DropDownButtonToolbarItem with a nested MenuFlyoutSubItem. The implementation uses the .NET MAUI Context Menu to create a dropdown with multiple menu levels, which is especially useful for desktop applications where users can access the nested menu through right-click functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/nested-menus-in-toolbar-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadToolbar>\n        <telerik:DropDownButtonToolbarItem Text=\"DropDownButton\">\n            <telerik:DropDownButtonToolbarItem.ImageSource>\n                <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconBulleting}\"\n                                 FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                                 Size=\"16\" />\n            </telerik:DropDownButtonToolbarItem.ImageSource>\n            <telerik:DropDownButtonToolbarItem.DropDownContentTemplate>\n                <ControlTemplate>\n                    <telerik:DropDownButtonToolbarItemViewContent>\n                        <VerticalStackLayout Padding=\"10\">\n                            <Label Text=\"Menu 1\">\n                                <FlyoutBase.ContextFlyout>\n                                    <MenuFlyout>\n                                        <MenuFlyoutItem Text=\"Item 1\"\n                                                        Clicked=\"MenuFlyoutItem_Clicked\"\n                                                        CommandParameter=\"Param1\" />\n                                        <MenuFlyoutSubItem Text=\"Item 2\">\n                                            <MenuFlyoutItem Text=\"Item 21\"\n                                                            Clicked=\"MenuFlyoutItem_Clicked_1\"\n                                                            CommandParameter=\"Param2\" />\n                                            <MenuFlyoutItem Text=\"Item 22\"\n                                                            Clicked=\"MenuFlyoutItem_Clicked_2\"\n                                                            CommandParameter=\"Param3\" />\n                                            <MenuFlyoutItem Text=\"Item 23\"\n                                                            Clicked=\"MenuFlyoutItem_Clicked_3\"\n                                                            CommandParameter=\"Param4\" />\n                                        </MenuFlyoutSubItem>\n                                    </MenuFlyout>\n                                </FlyoutBase.ContextFlyout>\n                            </Label>\n                            <Label Text=\"Numbered\" />\n                            <Label Text=\"Multilevel\" />\n                        </VerticalStackLayout>\n                    </telerik:DropDownButtonToolbarItemViewContent>\n                </ControlTemplate>\n            </telerik:DropDownButtonToolbarItem.DropDownContentTemplate>\n        </telerik:DropDownButtonToolbarItem>\n    </telerik:RadToolbar>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating an ObservableCollection in ViewModel - XAML\nDESCRIPTION: This snippet shows how to create an ObservableCollection in the ViewModel class. This collection will be bound to the RadDataGrid, enabling automatic updates when items are added or removed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Create an ObservableCollection in ViewModel here -->\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Chart Customization\nDESCRIPTION: Implementation of platform-specific chart styling through the HandlerChanged event, including customizations for Android, iOS/MacCatalyst, and Windows.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-pieseries-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void chart_HandlerChanged(object sender, EventArgs e)\n{\n    this.UpdateChart();\n}\n\nprivate void UpdateChart()\n{\n    var platformView = this.chart.Handler.PlatformView;\n\n    // Implementation on Android\n#if ANDROID\n    var platformChart = (Com.Telerik.Widget.Chart.Visualization.PieChart.RadPieChartView)platformView;\n    var platformSeries = (Com.Telerik.Widget.Chart.Visualization.PieChart.PieSeries)platformChart.Series.Get(0);\n\n    platformSeries.LabelFillColor = Android.Graphics.Color.Red;\n    platformSeries.LabelTextColor = Android.Graphics.Color.Blue;\n\n#elif IOS || MACCATALYST\n    var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n    var platformSeries = (TelerikUI.TKChartPieSeries)platformChart.Series[0];\n    platformSeries.Style.PointLabelStyle.TextColor = UIKit.UIColor.Green;\n    platformSeries.Style.PointLabelStyle.TextHidden = false;\n    platformSeries.Style.PointLabelStyle.StringFormat = \"$ %.0f\";\n\n#elif WINDOWS\n    var platformChart = (Telerik.UI.Xaml.Controls.Chart.RadPieChart)platformView;\n    var platformSeries = (Telerik.UI.Xaml.Controls.Chart.PieSeries)platformChart.Series[0];\n    platformSeries.LabelDefinitions.Clear();\n    platformSeries.LabelDefinitions.Add(new Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition \n    { \n        LabelTemplate = MauiWinUIApplication.Current.Resources[\"PieLabelTemplate\"] as Microsoft.UI.Xaml.DataTemplate\n    });\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshView with RadCollectionView in XAML\nDESCRIPTION: This snippet shows how to declare a RefreshView containing a RadCollectionView in XAML to implement pull-to-refresh functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/pull-to-refresh.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-pull-to-refresh-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command for Single Tap Editing in C#\nDESCRIPTION: Implements a custom command by inheriting from DataGridCommand. The Execute method triggers the default cell double-tap command logic when a cell is tapped. This command enables single tap editing functionality in the DataGrid for MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-single-tap-editing.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CellTapUserCommand : DataGridCommand\n{\n    public CellTapUserCommand()\n    {\n        Id = DataGridCommandId.CellTap;\n    }\n    public override bool CanExecute(object parameter)\n    {\n        return true;\n    }\n    public override void Execute(object parameter)\n    {\n        this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.CellDoubleTap, parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DataGrid Column Definition in XAML\nDESCRIPTION: XAML namespace declaration for Telerik controls in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SuggestionViewTemplate with RadDataGrid in XAML for AutoComplete\nDESCRIPTION: Shows how to implement a custom SuggestionViewTemplate for AutoComplete using RadDataGrid to display filtered items in a customized way.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionview-template.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-templates-suggestion-view-template-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Add RadDataGrid with Custom Filter Control Template\nDESCRIPTION: This snippet illustrates how to manually define the columns for a RadDataGrid and apply the custom Filter Control Template created previously through the FilterTemplate property. This process enables custom behavior for filtering operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/filter-control-template.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Snippet for RadDataGrid instance with custom filter control -->\n\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in .NET MAUI\nDESCRIPTION: Shows the registration of Telerik controls in a .NET MAUI application using the UseTelerik extension method in the MauiProgram.cs file. This setup is required to enable Telerik components, utilizing the Telerik.Maui.Controls.Compatibility namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Item and SelectedItem Templates in XAML\nDESCRIPTION: Example showing how to define custom ItemTemplate and SelectedItemTemplate for the ComboBox control with proper namespace declaration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Validation in Telerik .NET MAUI Entry Control\nDESCRIPTION: Demonstrates how to configure validation for a Telerik RadEntry control by setting a custom error message and validation state. The example shows setting validation properties and a placeholder with custom coloring.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry ValidationErrorMessage=\"Value is not valid\"\n\t\t\t\t  IsValueValid=\"False\"\n\t\t\t\t  Placeholder=\"Enter text here\"\n\t\t\t\t  PlaceholderColor=\"#99000000\">\n</telerik:RadEntry>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for Chat Items - C#\nDESCRIPTION: This snippet showcases how to create a ViewModel that contains a collection of SimpleChatItem instances. It also illustrates how to bind the Chat's Author property to represent the user typing messages in the chat interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/mvvm-support.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chat-features-mvvm-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Date Formats in .NET MAUI Scheduler\nDESCRIPTION: Example demonstrating how to set custom date formats for different Scheduler views including header text, day format, and time ruler formats. The code shows format customization for DayView, WeekView, and MonthView components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/customdateformats.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-custom-date-formats' />\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart in XAML\nDESCRIPTION: This snippet demonstrates how to define the RadCartesianChart control, which serves as the primary container for the Cartesian chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Manually Hiding Keyboard in Cross-Platform MAUI C# Code\nDESCRIPTION: Implements a cross-platform method to programmatically hide the soft keyboard using platform-specific InputMethodManager and UIKit techniques for Android and iOS\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-softkeyboard-without-losing-focus-maui-entry.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n    \n    public void HideKeyboard()\n    {\n#if ANDROID\n        var imm = (Android.Views.InputMethods.InputMethodManager)MauiApplication.Current.GetSystemService(Android.Content.Context.InputMethodService);\n        if (imm != null)\n        {\n            var activity = Microsoft.Maui.ApplicationModel.Platform.CurrentActivity;\n            Android.OS.IBinder wToken = activity.CurrentFocus?.WindowToken;\n            imm.HideSoftInputFromWindow(wToken, 0);\n        }\n#elif IOS\n        {\n            var window = UIKit.UIApplication.SharedApplication?.KeyWindow;\n            if (window != null)\n            {\n                window.EndEditing(true);\n            }\n        }\n#endif\n    }\n\n    private void Button_Clicked(object sender, EventArgs e)\n    {\n        this.HideKeyboard();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadRegexMaskedEntry in XAML\nDESCRIPTION: This snippet demonstrates how to define the RadRegexMaskedEntry control in your .NET MAUI application, including the necessary properties such as Mask and PlaceholderText. It requires adding a specific namespace related to Telerik UI for MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration for Telerik Controls\nDESCRIPTION: This XAML namespace declaration is necessary to use Telerik UI controls, such as the ImageEditor, within your .NET MAUI application.  It defines the \"telerik\" alias, allowing you to reference Telerik controls in your XAML markup.  Without this namespace declaration, the XAML parser will not recognize the Telerik control types, resulting in errors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Column Renderer Implementation\nDESCRIPTION: C# implementation of a custom DataGridCellRenderer class with overridden RenderContainer method for SkiaSharp rendering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-column-datagridcellrenderer' />\n```\n\n----------------------------------------\n\nTITLE: Customizing Line Series Stroke and Thickness in C#\nDESCRIPTION: This code snippet shows how to customize the appearance of a LineSeries in C# by setting the Stroke (color) and StrokeThickness properties. This provides more control over the visual representation of the line.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/line-series.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n```C#\nvar series = new LineSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Checkbox Column Renderer in C#\nDESCRIPTION: Implements a custom DataGridCellRenderer to draw a checkbox with SkiaSharp in a DataGrid column, supporting manual rendering of checked and unchecked states\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-selection-column.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CheckboxColumnRenderer : DataGridCellRenderer\n{\n    protected override void RenderContainer(DataGridCellRendererRenderContext renderContext)\n    {\n        EmployeeDto club = (EmployeeDto)renderContext.Item;\n\n        if (renderContext is DataGridSkiaSharpCellRendererRenderContext skRenderContext)\n        {\n            this.DrawCheckBox(club.OnLeave, skRenderContext, skRenderContext.Bounds);\n        }\n    }\n\n    private void DrawCheckBox(bool isChecked, DataGridSkiaSharpCellRendererRenderContext skRenderContext, Rect bounds)\n    {\n        // Custom checkbox drawing logic with SkiaSharp\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TimeSpan Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates the TimeSpanFilterDescriptor for filtering properties of type System.TimeSpan in XAML. It specifies PropertyName, Operator, and Value for the filtering criteria.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:TimeSpanFilterDescriptor PropertyName=\"Time\"\n                                  Operator=\"IsLessThan\"\n                                  Value=\"22/11/21\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView with Load Children on Demand Command in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a TreeView control with the Load Children on Demand command enabled. It sets the IsLoadChildrenOnDemandEnabled property and binds the LoadChildrenOnDemandCommand.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/load-children-on-demand.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                      ItemsSource=\"{Binding Source}\"\n                      IsLoadChildrenOnDemandEnabled=\"True\"\n                      LoadChildrenOnDemandCommand=\"{Binding LoadChildrenOnDemandCommand}\"\n                      DisplayMemberPath=\"Name\" />\n```\n\n----------------------------------------\n\nTITLE: LoadOnDemand Event Handling in DataGrid (C#)\nDESCRIPTION: This snippet demonstrates how to handle the `LoadOnDemand` event of the DataGrid. Inside the event handler, new items are added to the collection, and the `IsDataLoaded` property of the `LoadOnDemandEventArgs` is set to `true` to indicate that the data loading is complete.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n        private void RadDataGrid_LoadOnDemand(object sender, Telerik.Maui.Controls.LoadOnDemandEventArgs e)\n        {\n            Task.Run(async () =>\n            {\n                await Task.Delay(3000);\n\n                var result = Enumerable.Range(0, 20).Select(i => new MyDataObject { Text = $\"Item {i}\" });\n                foreach (var item in result)\n                {\n                    this.Items.Add(item);\n                }\n\n                e.IsDataLoaded = true;\n            });\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing DockLayout Control Structure in XAML\nDESCRIPTION: Demonstrates how to structure a DockLayout control with various child elements docked to different positions (top, left, bottom, and content area). Each docked element has a different background color and contains a label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDockLayout x:Name=\"dockLayout\">\n    <Grid HeightRequest=\"60\"\n          BackgroundColor=\"#009688\"\n          telerik:RadDockLayout.Dock=\"Top\">\n        <Label Margin=\"20\" Text=\"Title\"/>\n    </Grid>\n    <Grid BackgroundColor=\"#659BFC\"\n          telerik:RadDockLayout.Dock=\"Left\">\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\"/>\n        </Grid.ColumnDefinitions>\n        <Label Margin=\"20\" Text=\"Navigation\" />\n    </Grid>\n    <Grid BackgroundColor=\"#1455C9\"\n          telerik:RadDockLayout.Dock=\"Bottom\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n        </Grid.RowDefinitions>\n        <Label Margin=\"20\" Text=\"Bottom\" />\n    </Grid>\n    <Grid  BackgroundColor=\"#FCCFB0\">\n        <Label Margin=\"20\" Text=\"Content\" />\n    </Grid>\n</telerik:RadDockLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Width Calculator Helper Class\nDESCRIPTION: A helper class that implements an attached property for automatically calculating ComboBox dropdown width. Uses SKPaint's MeasureText to determine the widest item width and includes platform-specific adjustments for Windows and MacCatalyst.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-calculate-dropdown-width.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing System.Reflection;\nusing SkiaSharp;\nusing Telerik.Maui.Controls;\n\n#if WINDOWS\nusing System.Runtime.InteropServices;\nusing WinRT;\n#endif\n\nnamespace YOUR_APP;\n\npublic class ComboBoxHelper\n{\n    public static readonly BindableProperty AutoWidthEnabledProperty =\n        BindableProperty.CreateAttached(\"AutoWidthEnabled\", typeof(bool), typeof(ComboBoxHelper), false, propertyChanged: AutoWidthEnabledPropertyChanged);\n\n    public static bool GetAutoWidthEnabled(BindableObject view)\n        => (bool)view.GetValue(AutoWidthEnabledProperty);\n\n    public static void SetAutoWidthEnabled(BindableObject view, bool value)\n        => view.SetValue(AutoWidthEnabledProperty, value);\n\n    private static void AutoWidthEnabledPropertyChanged(BindableObject bindable, object oldValue, object newValue)\n    {\n        if (bindable is not RadComboBox comboBox) \n            return;\n\n        if ((bool)oldValue)\n        {\n            comboBox.PropertyChanged -= OnComboBoxPropertyChanged;\n        }\n\n        if ((bool)newValue)\n        {\n            comboBox.PropertyChanged += OnComboBoxPropertyChanged;\n        }\n\n        CalculateMaxWidth(comboBox);\n    }\n\n    private static void OnComboBoxPropertyChanged(object sender, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == nameof(RadComboBox.ItemsSource))\n        {\n            CalculateMaxWidth((RadComboBox)sender);\n        }\n    }\n\n    private static async void CalculateMaxWidth(RadComboBox comboBox)\n    {\n        if (comboBox.ItemsSource == null)\n            return;\n\n        var width = 0.0;\n        var scale = GetPixelScale();\n\n        await Task.Run(() =>\n        {\n            var paint = new SKPaint\n            {\n                Typeface = SKTypeface.FromFamilyName(comboBox.FontFamily),\n                TextSize = (float)(comboBox.FontSize * scale)\n            };\n\n            PropertyInfo prop = null;\n\n            foreach (var item in comboBox.ItemsSource)\n            {\n                if (prop == null)\n                {\n                    prop = item.GetType().GetProperty(comboBox.DisplayMemberPath);\n                }\n\n                var text = prop.GetValue(item).ToString();\n                var textWidth = paint.MeasureText(text);\n                if (textWidth > width)\n                {\n                    width = textWidth;\n                }\n            }\n        });\n        \n#if MACCATALYST\n        width += 27;\n#elif WINDOWS\n        width += 16;\n#endif\n\n        comboBox.DropDownWidth = width;\n    }\n\n    internal static double GetPixelScale()\n    {\n#if WINDOWS\n        var mainWindow = MauiWinUIApplication.Current.Application?.Windows[0].Handler?.PlatformView?.As<IWindowNative>();\n        if (mainWindow == null)\n        {\n            return 1;\n        }\n\n        var windowHandle = mainWindow.WindowHandle;\n        var dpi = User32.GetDpiForWindow(windowHandle);\n        var resolutionScale = (double)dpi / 96;\n        return resolutionScale;\n#elif MACCATALYST\n        return 1.33;\n#endif\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding the Collection to RadDataGrid - XAML\nDESCRIPTION: This snippet illustrates how to bind the ObservableCollection of Clubs to the RadDataGrid using the ItemsSource property in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" \n                     ItemsSource=\"{Binding Clubs}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Highlighted Date in .NET MAUI DateTimePicker\nDESCRIPTION: This snippet showcases setting the highlighted date within the Telerik RadDateTimePicker spinner when the `Date` property is null, using the `DefaultHighlightedDate` property. The `DefaultHighlightedDate` property expects a `DateTime` object. The `SpinnerFormat` property controls the displayed date format in the spinner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/default-dates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"{x:Null}\"\n                                DefaultHighlightedDate=\"2020,05,15\"\n                                SpinnerFormat=\"dd/MMM/yyyy\"/>\n```\n\n----------------------------------------\n\nTITLE: Advanced DataGridDateColumn Template Customization\nDESCRIPTION: Shows how to customize DataGridDateColumn using CellContentTemplate and CellEditTemplate. Includes implementation of a custom Label for display and RadDatePicker for editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/date-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridDateColumn PropertyName=\"Established\" \n\t\t\t\t\t\t\tHeaderText=\"Date Established\">\n\t<telerik:DataGridColumn.CellContentTemplate>\n\t\t<DataTemplate>\n\t\t\t<Label Text=\"{Binding Established}\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellContentTemplate>\n\t<telerik:DataGridColumn.CellEditTemplate>\n\t\t<DataTemplate>\n\t\t\t<telerik:RadDatePicker Date=\"{Binding Established}\" \n\t\t\t\t\t\t\t   DisplayStringFormat=\"yyyy/MMM/dd\"\n\t\t\t\t\t\t\t   VerticalOptions=\"Center\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellEditTemplate>\n</telerik:DataGridDateColumn>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTemplateSelector in C# for MAUI\nDESCRIPTION: This C# snippet demonstrates the implementation of a DataTemplateSelector subclass, crucial for dynamically selecting the correct data template based on conditions applied to the data, such as 'Country' being 'India'. It overrides the OnSelectTemplate method to return appropriate templates based on the logic defined.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-cell-content-template-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonDataTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate ValidTemplate { get; set; }\n    public DataTemplate InvalidTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        return ((Data)item).Country == \"India\" ? ValidTemplate : InvalidTemplate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TabView Templates in XAML\nDESCRIPTION: This code snippet demonstrates how to define custom templates for the Header, HeaderItem, and Content areas of a Telerik RadTabView control in .NET MAUI using XAML.  The templates are defined using ControlTemplate elements within the RadTabView's properties, allowing for complete customization of the visual elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\">\n    <telerik:RadTabView.HeaderItemTemplate>\n        <ControlTemplate>\n            <!-- the custom HeaderItemTemplate implementation -->\n        </ControlTemplate>\n    </telerik:RadTabView.HeaderItemTemplate>\n    <telerik:RadTabView.HeaderTemplate>\n        <ControlTemplate>\n            <!-- the custom HeaderTemplate implementation -->\n        </ControlTemplate>\n    </telerik:RadTabView.HeaderTemplate>\n    <telerik:RadTabView.ContentTemplate>\n        <ControlTemplate>\n             <!-- the custom ContentTemplate implementation -->\n        </ControlTemplate>\n    </telerik:RadTabView.ContentTemplate>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET MAUI Calendar Navigation Commands\nDESCRIPTION: Define a Calendar control with navigation commands that enable moving between different views and levels. These commands provide programmatic control over view transitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\"<telerik:RadCalendar x:Name=\\\"calendar\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with SendMessageCommand in C#\nDESCRIPTION: This snippet illustrates how to implement the ViewModel and define the SendMessageCommand using the Command class. It initializes the command and makes it accessible for binding in the XAML. It showcases the necessary setup for using the SendMessageCommand in a .NET MAUI Chat application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"using System.Windows.Input;\n\npublic class ViewModel\n{\n    public ICommand SendMessageCommand { get; set; }\n\n    public ViewModel()\n    {\n        this.SendMessageCommand = new Command(this.ExecuteSendMessage);\n    }\n\n    private void ExecuteSendMessage(object parameter)\n    {\n        //Add your custom logic here\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Controls and Indicators in SlideView Control Template\nDESCRIPTION: A control template for SlideView that includes navigation buttons (previous/next), gesture recognizers for tap interactions, and a SlideViewIndicator. The layout uses a Grid with properly positioned elements and binding to the parent control's properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/control-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n                         HorizontalOptions=\"Center\"\n                         VerticalOptions=\"Start\">\n                        <View.GestureRecognizers>\n                            <TapGestureRecognizer Command=\"{Binding NavigateToPreviousItemCommand, Source={RelativeSource Mode=TemplatedParent}}\" />\n                        </View.GestureRecognizers>\n                        <telerik:RadButton Command=\"{Binding NavigateToPreviousItemCommand, Source={RelativeSource Mode=TemplatedParent}}\"\n                                               Style=\"{Binding ActualNavigateToPreviousItemButtonStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                    </StackLayout>\n                    <StackLayout Style=\"{OnIdiom Phone={StaticResource TouchableViewStyle_Vertical}, Tablet={StaticResource TouchableViewStyle_Vertical}}\"\n                         Grid.Column=\"1\"\n                         HorizontalOptions=\"Center\"\n                         VerticalOptions=\"End\">\n                        <View.GestureRecognizers>\n                            <TapGestureRecognizer Command=\"{Binding NavigateToNextItemCommand, Source={RelativeSource Mode=TemplatedParent}}\" />\n                        </View.GestureRecognizers>\n                        <telerik:RadButton Command=\"{Binding NavigateToNextItemCommand, Source={RelativeSource Mode=TemplatedParent}}\"\n                                               Style=\"{Binding ActualNavigateToNextItemButtonStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                    </StackLayout>\n                    <telerik:SlideViewIndicator ItemsSource=\"{Binding IndicatorItemsSource, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          CurrentIndex=\"{Binding CurrentIndex, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          HasLooping=\"{Binding HasLooping, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          Style=\"{Binding ActualIndicatorStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                </Grid>\n</ControlTemplate>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documents from Stream - C#\nDESCRIPTION: This snippet demonstrates how to visualize documents from a stream using the StreamDocumentSource class. It includes managing the stream's lifecycle while the PDF document is in use.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/display-documents.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nAssembly assembly = typeof(KeyFeatures).Assembly;\nstring fileName = assembly.GetManifestResourceNames().FirstOrDefault(n => n.Contains(\"pdfviewer-overview.pdf\"));\nStream stream = assembly.GetManifestResourceStream(fileName);\nvar streamDocumentSource = new StreamDocumentSource();\nstreamDocumentSource.Import(stream);\nthis.pdfViewer.Source = streamDocumentSource;\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionView with Item Swipe in .NET MAUI\nDESCRIPTION: CollectionView definition with item swipe enabled, specifying swipe templates and configuring swipe behavior properties like StartSwipeLength and EndSwipeLength.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                          ItemsSource=\"{Binding People}\"\n                          IsItemSwipeEnabled=\"True\"\n                          StartSwipeLength=\"120\"\n                          EndSwipeLength=\"120\"\n                          StartSwipeTemplate=\"{StaticResource StartSwipeTemplate}\"\n                          EndSwipeTemplate=\"{StaticResource EndSwipeTemplate}\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <Grid>\n                <Label Text=\"{Binding Name}\" VerticalOptions=\"Center\"/>\n            </Grid>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Specific Groups in C# for .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to retrieve first-level groups, expand or collapse a specific group, and check if a group is expanded using methods like GetGroups, ExpandGroup, CollapseGroup, and GetIsExpanded.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/expand-collapse.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar dataView = this.dataGrid.GetDataView();\nvar rootGroups = dataView.GetGroups();\n\nvar isFirstExpanded = dataView.GetIsExpanded(rootGroups.First());\n//expand a certain group\ndataView.ExpandGroup(rootGroups.First());\n//collapse a certain group\ndataView.CollapseGroup(rootGroups.First());\n```\n\n----------------------------------------\n\nTITLE: Implementing Default SlideView Control Template in XAML\nDESCRIPTION: Defines the complete default Control Template for the SlideView control including styles for touchable views, navigation buttons, indicators, and templates for both horizontal and vertical orientations. The template provides platform-specific customizations and theme-aware styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/control-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary>\n            <Style x:Key=\"TouchableViewStyle\" TargetType=\"VisualElement\">\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\" />\n            </Style>\n\n            <Style x:Key=\"TouchableViewStyle_Horizontal\" TargetType=\"VisualElement\" BasedOn=\"{StaticResource TouchableViewStyle}\">\n                <Setter Property=\"MinimumWidthRequest\" Value=\"40\" />\n            </Style>\n\n            <Style x:Key=\"TouchableViewStyle_Vertical\" TargetType=\"VisualElement\" BasedOn=\"{StaticResource TouchableViewStyle}\">\n                <Setter Property=\"MinimumHeightRequest\" Value=\"40\" />\n            </Style>\n\n            <Style x:Key=\"NavigationButtonStyle\" TargetType=\"telerik:RadButton\">\n                <Setter Property=\"CornerRadius\" Value=\"{OnPlatform Default=4, iOS=8, Android=12}\" />\n                <Setter Property=\"FontFamily\" Value=\"{Static telerik:TelerikFont.Name}\" />\n                <Setter Property=\"FontSize\" Value=\"{OnPlatform Default=10, WinUI=14}\" />\n                <Setter Property=\"TextColor\" Value=\"{AppThemeBinding Light=#B3000000, Dark=#B3FFFFFF}\" />\n                <Setter Property=\"BackgroundColor\" Value=\"{AppThemeBinding Light=#F3F3F3, Dark=#1A1A1A}\" />\n                <Setter Property=\"BorderThickness\" Value=\"0\" />\n                <Setter Property=\"Padding\" Value=\"0\" />\n                <Setter Property=\"telerik:NavigationButtonUtils.Visibility\" Value=\"{Binding NavigationButtonsVisibility, Source={RelativeSource Mode=TemplatedParent}}\" />\n                <Setter Property=\"VisualStateManager.VisualStateGroups\">\n                    <VisualStateGroupList>\n                        <VisualStateGroup x:Name=\"CommonStates\">\n                            <VisualState x:Name=\"Normal\"/>\n                            <VisualState x:Name=\"PointerOver\">\n                                <VisualState.Setters>\n                                    <Setter Property=\"TextColor\" Value=\"{AppThemeBinding Light= Black, Dark=White}\"/>\n                                </VisualState.Setters>\n                            </VisualState>\n                            <VisualState x:Name=\"Disabled\">\n                                <VisualState.Setters>\n                                    <Setter Property=\"TextColor\" Value=\"Black\" />\n                                </VisualState.Setters>\n                            </VisualState>\n                        </VisualStateGroup>\n                    </VisualStateGroupList>\n                </Setter>\n            </Style>\n\n            <Style x:Key=\"NavigationButtonStyle_Horizontal\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle}\">\n                <Setter Property=\"WidthRequest\" Value=\"{OnPlatform Default=16, iOS=44, Android=40}\" />\n                <Setter Property=\"HeightRequest\" Value=\"{OnPlatform Default=38, iOS=44, Android=40}\" />\n            </Style>\n\n            <Style x:Key=\"NavigateToPreviousItem_Button_Style_Horizontal\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle_Horizontal}\">\n                <Setter Property=\"Text\" Value=\"{x:Static TelerikFont.IconLeftDir}\" />\n                <Setter Property=\"Margin\" Value=\"2, 0, 0, 0\" />\n            </Style>\n\n            <Style x:Key=\"NavigateToNextItem_Button_Style_Horizontal\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle_Horizontal}\">\n                <Setter Property=\"Text\" Value=\"{x:Static telerik:TelerikFont.IconRightDir}\" />\n                <Setter Property=\"Margin\" Value=\"0, 0, 2, 0\" />\n            </Style>\n\n            <Style x:Key=\"NavigationButtonStyle_Vertical\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle}\">\n                <Setter Property=\"WidthRequest\" Value=\"{OnPlatform Default=38, iOS=44, Android=40}\" />\n                <Setter Property=\"HeightRequest\" Value=\"{OnPlatform Default=16, iOS=44, Android=40}\" />\n            </Style>\n\n            <Style x:Key=\"NavigateToPreviousItem_Button_Style_Vertical\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle_Vertical}\">\n                <Setter Property=\"Text\" Value=\"{x:Static telerik:TelerikFont.IconUpDir}\" />\n                <Setter Property=\"Margin\" Value=\"0, 2, 0, 0\" />\n            </Style>\n\n            <Style x:Key=\"NavigateToNextItem_Button_Style_Vertical\" TargetType=\"telerik:RadButton\" BasedOn=\"{StaticResource NavigationButtonStyle_Vertical}\">\n                <Setter Property=\"Text\" Value=\"{x:Static telerik:TelerikFont.IconDownDir}\" />\n                <Setter Property=\"Margin\" Value=\"0, 0, 0, 2\" />\n            </Style>\n\n            <Style x:Key=\"SlideViewIndicator_Style\" TargetType=\"telerik:SlideViewIndicator\">\n                <Setter Property=\"Margin\" Value=\"7\" />\n            </Style>\n\n            <Style x:Key=\"SlideViewIndicator_Style_Horizontal\" TargetType=\"telerik:SlideViewIndicator\" BasedOn=\"{StaticResource SlideViewIndicator_Style}\">\n                <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n                <Setter Property=\"VerticalOptions\" Value=\"End\" />\n                <Setter Property=\"Grid.Row\" Value=\"2\" />\n            </Style>\n\n            <Style x:Key=\"SlideViewIndicator_Style_Vertical\" TargetType=\"telerik:SlideViewIndicator\" BasedOn=\"{StaticResource SlideViewIndicator_Style}\">\n                <Setter Property=\"HorizontalOptions\" Value=\"End\" />\n                <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n                <Setter Property=\"Orientation\" Value=\"Vertical\" />\n                <Setter Property=\"Grid.Column\" Value=\"2\" />\n            </Style>\n\n            <ControlTemplate x:Key=\"RadSlideView_ControlTemplate_Horizontal\">\n                <Grid BackgroundColor=\"Transparent\"\n              IsClippedToBounds=\"True\"\n              RowDefinitions=\"Auto, *, Auto\">\n                    <telerik:SlideViewContent x:Name=\"PART_SlideViewContent\"\n                                        Items=\"{Binding Items, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        Spacing=\"{Binding Spacing, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        HasLooping=\"{Binding HasLooping, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        Orientation=\"Horizontal\"\n                                        Grid.Row=\"1\" />\n                    <StackLayout Style=\"{OnIdiom Phone={StaticResource TouchableViewStyle_Horizontal}, Tablet={StaticResource TouchableViewStyle_Horizontal}}\"\n                         Grid.Row=\"1\"\n                         HorizontalOptions=\"Start\"\n                         VerticalOptions=\"Center\">\n                        <View.GestureRecognizers>\n                            <TapGestureRecognizer Command=\"{Binding NavigateToPreviousItemCommand, Source={RelativeSource Mode=TemplatedParent}}\" />\n                        </View.GestureRecognizers>\n                        <telerik:RadButton Command=\"{Binding NavigateToPreviousItemCommand, Source={RelativeSource Mode=TemplatedParent}}\"\n                                               Style=\"{Binding ActualNavigateToPreviousItemButtonStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                    </StackLayout>\n                    <StackLayout Style=\"{OnIdiom Phone={StaticResource TouchableViewStyle_Horizontal}, Tablet={StaticResource TouchableViewStyle_Horizontal}}\"\n                         HorizontalOptions=\"End\"\n                         VerticalOptions=\"Center\"\n                         Grid.Row=\"1\">\n                        <View.GestureRecognizers>\n                            <TapGestureRecognizer Command=\"{Binding NavigateToNextItemCommand, Source={RelativeSource Mode=TemplatedParent}}\" />\n                        </View.GestureRecognizers>\n                        <telerik:RadButton Command=\"{Binding NavigateToNextItemCommand, Source={RelativeSource Mode=TemplatedParent}}\"\n                                               Style=\"{Binding ActualNavigateToNextItemButtonStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                    </StackLayout>\n                    <telerik:SlideViewIndicator ItemsSource=\"{Binding IndicatorItemsSource, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          CurrentIndex=\"{Binding CurrentIndex, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          HasLooping=\"{Binding HasLooping, Source={RelativeSource Mode=TemplatedParent}}\"\n                                          Style=\"{Binding ActualIndicatorStyle, Source={RelativeSource Mode=TemplatedParent}}\" />\n                </Grid>\n            </ControlTemplate>\n\n            <ControlTemplate x:Key=\"RadSlideView_ControlTemplate_Vertical\">\n                <Grid BackgroundColor=\"Transparent\"\n              IsClippedToBounds=\"True\"\n              ColumnDefinitions=\"Auto, *, Auto\">\n                    <telerik:SlideViewContent x:Name=\"PART_SlideViewContent\"\n                                        Items=\"{Binding Items, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        Spacing=\"{Binding Spacing, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        HasLooping=\"{Binding HasLooping, Source={RelativeSource Mode=TemplatedParent}}\"\n                                        Orientation=\"Vertical\"\n                                        Grid.Column=\"1\" />\n                    <StackLayout Style=\"{OnIdiom Phone={StaticResource TouchableViewStyle_Vertical}, Tablet={StaticResource TouchableViewStyle_Vertical}}\"\n                         Grid.Column=\"1\"\n\n```\n\n----------------------------------------\n\nTITLE: Handling SearchStarting Event in C#\nDESCRIPTION: Illustrates how to handle the SearchStarting event to modify search behavior, such as dividing the search text into separate terms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnSearchStarting(object sender, DataGridSearchStartingEventArgs e)\n{\n    string[] terms = e.SearchTerms[0].Split(' ');\n    e.SearchTerms.Clear();\n    foreach (var term in terms)\n    {\n        e.SearchTerms.Add(term);\n    }\n    e.SearchTermsLogicalOperator = LogicalOperator.Or;\n}\n```\n\n----------------------------------------\n\nTITLE: MVVM Filtering ViewModel Implementation\nDESCRIPTION: ViewModel implementation for MVVM-based filtering with ObservableCollection of FilterDescriptors\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<listview-features-filtering-bindable-viewmodel/>\n```\n\n----------------------------------------\n\nTITLE: Implementing PieChart ViewModel in .NET MAUI\nDESCRIPTION: Creates a ViewModel that prepares and manages the data series for the Pie Chart, setting up the data context for chart visualization\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/pie-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for chart-piechart-view-model snippet\n```\n\n----------------------------------------\n\nTITLE: Attaching RichTextEditor to Toolbar in XAML\nDESCRIPTION: This snippet demonstrates how to attach a RichTextEditor control to a RadRichTextEditorToolbar in XAML. It sets up a Grid with two rows, placing the toolbar in the first row and the editor in the second.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/toolbar/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"Auto, *\">\n    <telerik:RadRichTextEditorToolbar RichTextEditor=\"{x:Reference richTextEditor}\"/>\n    <telerik:RadRichTextEditor x:Name=\"richTextEditor\"\n                               Grid.Row=\"1\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: DataGrid LoadOnDemandRowTemplate Definition (XAML)\nDESCRIPTION: This snippet demonstrates how to define a custom `DataTemplate` for the row containing the 'Load More' button in the DataGrid. This allows complete customization of the row's content, including adding custom controls and layouts.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_7\n\nLANGUAGE: xaml\nCODE:\n```\n<DataTemplate x:Key=\"LoadOnDemandRowTemplate\">\n    <Grid Background=\"LightBlue\">\n        <Label Text=\"Load More Items...\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\"/>\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Button in .NET MAUI XAML\nDESCRIPTION: Creates a circular button by setting equal Width and Height values, and CornerRadius to half of the width. The button includes custom styling for text, colors, and size.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/button-howto-create-circle-button.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadButton WidthRequest=\"120\"\n\t\t\t\t   HeightRequest=\"120\"                                \n\t\t\t\t   Text=\"Circle Button\"\n\t\t\t\t   FontSize=\"Micro\"\n\t\t\t\t   TextColor=\"White\"\n\t\t\t\t   BackgroundColor=\"DarkBlue\"\n\t\t\t\t   CornerRadius=\"60\"  />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SumIf Aggregate Function\nDESCRIPTION: Defines a class implementing IAggregateFunction interface to create a custom SumIf function for conditional aggregation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/delegate-aggregate-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-delegate-aggregate-function'/>\n```\n\n----------------------------------------\n\nTITLE: Basic ItemsControl XAML Implementation\nDESCRIPTION: Sets up the ItemsControl with basic item template and data binding to display the experience items\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadItemsControl x:Name=\"itemsControl\"\n\t\t\t\t\t\t\t      ItemsSource=\"{Binding Experiences, Mode=TwoWay}\">\n\t<telerik:RadItemsControl.BindingContext>\n\t\t<local:ViewModel />\n\t</telerik:RadItemsControl.BindingContext>\n\t<telerik:RadItemsControl.ItemTemplate>\n\t\t<DataTemplate>\n\t\t\t<StackLayout Margin=\"10\"\n\t\t\t\t\t\t Spacing=\"5\"\n\t\t\t\t\t\t Orientation=\"Horizontal\">\n\t\t\t\t<Label Text=\"{Binding Title}\"\n\t\t\t\t\t\t   FontSize=\"14\"/>\n\t\t\t\t<Label Text=\"{Binding Company}\"\n\t\t\t\t\t\t   TextColor=\"#99000000\"\n\t\t\t\t\t\t   FontSize=\"12\"/>\n\t\t\t</StackLayout>\n\t\t</DataTemplate>\n\t</telerik:RadItemsControl.ItemTemplate>\n</telerik:RadItemsControl>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom IKeyLookup for DelegateSortDescriptor in C#\nDESCRIPTION: Shows the implementation of a custom IKeyLookup interface for use with DelegateSortDescriptor. This example sorts clubs based on the length of their names.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/sorting.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomIKeyLookup : Telerik.Maui.Controls.Data.IKeyLookup\n{\n\tpublic object GetKey(object instance)\n\t{\n\t\treturn (instance as Club).Name.Length;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attached Properties for On-Demand Loading in C#\nDESCRIPTION: This code snippet defines a TabViewUtils class with attached properties LoadOnDemand and LoadOnDemandTemplate. These properties enable on-demand loading of tab content in a RadTabView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-tab-content-on-demand-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TabViewUtils\n{\n    public static readonly BindableProperty LoadOnDemandProperty = BindableProperty.CreateAttached(\n        \"LoadOnDemand\", typeof(bool), typeof(TabViewUtils), false, propertyChanged: LoadOnDemandChanged);\n        \n    public static readonly BindableProperty LoadOnDemandTemplateProperty = BindableProperty.CreateAttached(\n        \"LoadOnDemandTemplate\", typeof(DataTemplate), typeof(TabViewUtils), null);\n\n    public static bool GetLoadOnDemand(BindableObject bindable) => (bool)bindable.GetValue(LoadOnDemandProperty);\n    public static void SetLoadOnDemand(BindableObject bindable, bool value) => bindable.SetValue(LoadOnDemandProperty, value);\n\n    public static DataTemplate GetLoadOnDemandTemplate(BindableObject bindable) => (DataTemplate)bindable.GetValue(LoadOnDemandTemplateProperty);\n    public static void SetLoadOnDemandTemplate(BindableObject bindable, DataTemplate value) => bindable.SetValue(LoadOnDemandTemplateProperty, value);\n\n    private static void LoadOnDemandChanged(BindableObject bindable, object oldValue, object newValue)\n    {\n        var tv = (RadTabView)bindable;\n        tv.PropertyChanged -= RadTabView_PropertyChanged;\n\n        if ((bool)newValue)\n        {\n            tv.PropertyChanged += RadTabView_PropertyChanged;\n            UpdateSelectedItemContentTemplate(tv);\n        }\n    }\n\n    private static void RadTabView_PropertyChanged(object sender, PropertyChangedEventArgs args)\n    {\n        if (args.PropertyName == nameof(RadTabView.SelectedItem))\n        {\n            UpdateSelectedItemContentTemplate((RadTabView)sender);\n        }\n    }\n\n    private static void UpdateSelectedItemContentTemplate(RadTabView tv)\n    {\n        if (tv.SelectedItem != null && tv.SelectedItem.ContentTemplate == null)\n        {\n            tv.SelectedItem.ContentTemplate = GetLoadOnDemandTemplate(tv.SelectedItem);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Definition with Accept and Cancel Commands in C#\nDESCRIPTION: This C# code defines a ViewModel class with Accept and Cancel commands, implementing sample OnAccept and OnCancel methods for custom logic.  The commands are initialized in the constructor using the Command class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Accept = new Command(this.OnAccept);\n        this.Accept = new Command(this.OnCancel);\n    }\n\n    private void OnAccept(object obj)\n    {\n        // implement your custom logic here\n    }\n\n    private void OnCancel(object obj)\n    {\n        // implement your custom logic here\n    }\n\n    public ICommand Accept { get; set; }\n    public ICommand Cancel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Client Collection for AutoComplete in C#\nDESCRIPTION: Implements a ViewModel class that contains a collection of Client objects to be used as the data source for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Telerik Theming in .NET MAUI Project\nDESCRIPTION: Add the UseTelerikTheming property to the .csproj file to enable Telerik theming for the .NET MAUI project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<PropertyGroup>\n    <UseTelerikTheming>true</UseTelerikTheming>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Axes for RadCartesianChart in XAML\nDESCRIPTION: This snippet adds the required horizontal and vertical axes to the RadCartesianChart, essential for plotting data points accurately.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart.HorizontalAxis>\n\t<telerik:CategoricalAxis/>\n</telerik:RadCartesianChart.HorizontalAxis>\n<telerik:RadCartesianChart.VerticalAxis>\n\t<telerik:NumericalAxis/>\n</telerik:RadCartesianChart.VerticalAxis>\n```\n\n----------------------------------------\n\nTITLE: Accessing Controls in Templates Using GetVisualTreeDescendants in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use the GetVisualTreeDescendants() method to find and interact with a control inside a DataTemplate or ControlTemplate on a button click event. It traverses the visual tree, finds the desired control, and allows for further interaction.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/access-controls-inside-datatemplates-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate async void Button_Clicked(object sender, EventArgs e)\n{\n    List<IVisualTreeElement> items = (List<IVisualTreeElement>)this.MainControl.GetVisualTreeDescendants();\n    foreach (IVisualTreeElement myControl in items)\n    {\n        if (myControl is MyControl) // Replace MyControl with your specific control type that is inside the DataTemplate or the ControlTemplate\n        {\n            MyControl control = (MyControl)myControl;\n            // Add your logic here\n            return;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RadChart Declaration with DateTime Axis\nDESCRIPTION: Declares a RadCartesianChart in XAML with a DateTimeContinuousAxis as the horizontal axis.  The LabelFormatter is set to the custom DateLabelFormatter, and the MajorStepUnit is set to Day. A LineSeries is used to display the data, bound to the Data property of the ViewModel, with Date as the CategoryBinding and Value as the ValueBinding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/datetime-continuous-axis.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n\t<telerik:RadCartesianChart.BindingContext>\n\t    <local:ViewModel />\n\t</telerik:RadCartesianChart.BindingContext>\n\t<telerik:RadCartesianChart.HorizontalAxis>\n\t    <telerik:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n\t                                         MajorStepUnit=\"Day\">\n\t        <telerik:DateTimeContinuousAxis.LabelFormatter>\n\t            <local:DateLabelFormatter />\n\t        </telerik:DateTimeContinuousAxis.LabelFormatter>\n\t    </telerik:DateTimeContinuousAxis>\n\t</telerik:RadCartesianChart.HorizontalAxis>\n\t<telerik:RadCartesianChart.VerticalAxis>\n\t    <telerik:NumericalAxis LabelFormat=\"C\"\n\t                                MajorStep=\"0.5\"\n\t                                Minimum=\"-1\"\n\t                                Maximum=\"1\" />\n\t</telerik:RadCartesianChart.VerticalAxis>\n\t<telerik:RadCartesianChart.Series>\n\t    <telerik:LineSeries ItemsSource=\"{Binding Data}\"\n                            CategoryBinding=\"Date\"\n                            ValueBinding=\"Value\" />\n\t</telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Custom ItemTemplate and Highlighted Search Text in XAML\nDESCRIPTION: Example showing how to configure a RadComboBox with custom item templates and search text highlighting. The code demonstrates setting up an editable ComboBox with custom styling for items and selected items, and implements text highlighting functionality using RadHighlightLabel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/editmode-and-search.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"comboBox\"\n                     ItemsSource=\"{Binding Items}\" \n                     DisplayMemberPath=\"Name\"\n                     Placeholder=\"Select City\"\n                     AutomationId=\"comboBox\"\n                     HighlightTextColor=\"Red\"\n                     IsEditable=\"True\">\n    <telerik:RadComboBox.ItemTemplate>\n        <DataTemplate>\n            <telerik:RadBorder BackgroundColor=\"LightYellow\"\n                MinimumWidthRequest=\"300\">\n\n                <telerik:RadHighlightLabel TextColor=\"Black\" Padding=\"10\"\n                                           HighlightTextColor=\"BlueViolet\"\n                                           UnformattedText=\"{Binding Name}\"\n                                           HighlightText=\"{Binding Source={x:Reference comboBox}, Path=Text}\" />\n            </telerik:RadBorder>\n        </DataTemplate>\n    </telerik:RadComboBox.ItemTemplate>\n    <telerik:RadComboBox.SelectedItemTemplate>\n        <DataTemplate>\n            <telerik:RadBorder BackgroundColor=\"LightBlue\"\n                MinimumWidthRequest=\"300\">\n                <VerticalStackLayout>\n                    <Label Text=\"{Binding Name}\"\n                           Padding=\"8, 7, 0, 7\"\n                           TextColor=\"Black\"/>\n                    <Label Text=\"{Binding Population}\" \n                           FontSize=\"12\"\n                           Padding=\"8, 7, 0, 7\"/>\n                </VerticalStackLayout>\n            </telerik:RadBorder>\n        </DataTemplate>\n    </telerik:RadComboBox.SelectedItemTemplate>\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with SuggestAppend Mode\nDESCRIPTION: XAML implementation of AutoComplete control with SuggestMode set to SuggestAppend, combining dropdown list and inline suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/suggest-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-suggestmode-suggest-append'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with IncreaseCommand and DecreaseCommand - C#\nDESCRIPTION: This snippet demonstrates how to create a ViewModel that implements both IncreaseCommand and DecreaseCommand to handle numeric input increases and decreases in the .NET MAUI NumericInput control. Dependencies include the Telerik UI for .NET MAUI. Key parameters define the behavior of the commands, and it is expected that the ViewModel will be bound to the NumericInput control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NumericInputViewModel\n{\n    public ICommand IncreaseCommand { get; set; }\n    public ICommand DecreaseCommand { get; set; }\n    \n    public NumericInputViewModel()\n    {\n        IncreaseCommand = new Command(OnIncrease);\n        DecreaseCommand = new Command(OnDecrease);\n    }\n    \n    private void OnIncrease()\n    {\n        // Logic for increasing the value\n    }\n    \n    private void OnDecrease()\n    {\n        // Logic for decreasing the value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TemplatedPicker Definition with Commands in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadTemplatedPicker with ToggleCommand, ClearCommand bound to Buttons, and AcceptCommand and CancelCommand defined within the PopupSettings. It also sets up a SelectorTemplate using RadCalendar and binds the BindingContext to a custom ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <Button Text=\"Toggle Command\" Command=\"{Binding Source={x:Reference picker}, Path=ToggleCommand}\"/>\n    <Button Text=\"Clear Command\" Command=\"{Binding Source={x:Reference picker}, Path=ClearCommand}\"/>\n    <telerik:RadTemplatedPicker x:Name=\"picker\" PickerMode=\"Popup\">\n        <telerik:RadTemplatedPicker.SelectorTemplate>\n            <ControlTemplate>\n                <telerik:RadCalendar SelectedDate=\"{TemplateBinding SelectedValue, Mode=TwoWay}\"/>\n            </ControlTemplate>\n        </telerik:RadTemplatedPicker.SelectorTemplate>\n\t\t<telerik:RadTemplatedPicker.PopupSettings>\n                <telerik:PickerPopupSettings AcceptCommand=\"{Binding Accept}\"\n                                             CancelCommand=\"{Binding Cancel}\"/>\n            </telerik:RadTemplatedPicker.PopupSettings>\n            <telerik:RadTemplatedPicker.BindingContext>\n                <local:ViewModel/>\n            </telerik:RadTemplatedPicker.BindingContext>\n    </telerik:RadTemplatedPicker>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: ViewModel with Selection Changed Command in .NET MAUI Chart\nDESCRIPTION: This ViewModel includes logic to update a counter when the chart selection changes.  It uses an `ICommand` to execute the `IncreaseCount` method and updates a bound string property to display the number of times the command was executed. The ViewModel also defines two sample data collections.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/selection-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private int counter = 0;\n    private string displayCount;\n    public ObservableCollection<CategoricalData> Data1 { get; set; }\n    public ObservableCollection<CategoricalData> Data2 { get; set; }\n    public ICommand IsSelectionChangedCommand { get; }\n\n    public ViewModel()\n    {\n        this.Data1 = GetCategoricalData1();\n        this.Data2 = GetCategoricalData2();\n        this.IsSelectionChangedCommand = new Command(this.IncreaseCount);\n    }\n    public int Counter\n    {\n        get\n        {\n            return this.counter;\n        }\n        set\n        {\n            this.counter = value;\n            this.DisplayCount = $\"Command executed {counter} times.\";\n        }\n    }\n    public string DisplayCount\n    {\n        get\n        {\n            return this.displayCount;\n        }\n        set\n        {\n            if (this.displayCount != value)\n            {\n                this.displayCount = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData1()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 52 },\n            new CategoricalData { Category = \"Perfecto\", Value = 60 },\n            new CategoricalData { Category = \"NearBy\", Value = 77 },\n            new CategoricalData { Category = \"Family\", Value = 50 },\n            new CategoricalData { Category = \"Fresh\", Value = 56 },\n        };\n        return data;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData2()\n    {\n        var data = new ObservableCollection<CategoricalData>  \n        {\n            new CategoricalData { Category = \"Greenings\", Value = 33 },\n            new CategoricalData { Category = \"Perfecto\", Value = 88 },\n            new CategoricalData { Category = \"NearBy\", Value = 61 },\n            new CategoricalData { Category = \"Family\", Value = 94 },\n            new CategoricalData { Category = \"Fresh\", Value = 72 },\n        };\n        return data;\n    }\n    private void IncreaseCount()\n    {\n        this.Counter++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGridBooleanColumn with CellContentTemplate and CellEditTemplate in XAML\nDESCRIPTION: This example shows how to customize a DataGridBooleanColumn using CellContentTemplate and CellEditTemplate. The CellContentTemplate uses a Label to display the boolean value, while the CellEditTemplate implements a Switch control for editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/boolean-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridBooleanColumn PropertyName=\"IsChampion\" \n\t\t\t\t\t\t\t   HeaderText=\"Champion?\">\n\t<telerik:DataGridColumn.CellContentTemplate>\n\t\t<DataTemplate>\n\t\t\t<Label Text=\"{Binding IsChampion}\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellContentTemplate>\n\t<telerik:DataGridColumn.CellEditTemplate>\n\t\t<DataTemplate>\n\t\t\t<Switch IsToggled=\"{Binding IsChampion}\"\n\t\t\t\t\tVerticalOptions=\"Center\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellEditTemplate>\n</telerik:DataGridBooleanColumn>\n```\n\n----------------------------------------\n\nTITLE: Handling PickImage Event in .NET MAUI RichTextEditor - C#\nDESCRIPTION: This C# snippet demonstrates how to handle the PickImage event in the .NET MAUI RichTextEditor. It shows where to apply custom logic when the PickImage event is triggered, requiring that you implement the image selection logic within the event handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/working-with-images/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnPickImage(object sender, Telerik.Maui.Controls.RichTextEditor.PickImageEventArgs e)\n{\n// add your custom logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ListView with Header and Footer in XAML\nDESCRIPTION: Demonstrates how to declare a ListView in XAML with both header and footer templates specified. This structure allows the ListView to incorporate custom headers and footers within the control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/header-footer.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-features-header-and-footer-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Numerical Axis in .NET MAUI Chart with XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a Numerical Axis in a .NET MAUI Chart. It sets the LabelFormat to currency, the MajorStep to 0.5, the Minimum to -1, and the Maximum to 1. This configuration provides a customized numerical range and label formatting for the axis.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/numerical-axis.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NumericalAxis LabelFormat=\"C\"\n\t\t\t\t\t   MajorStep=\"0.5\"\n\t\t\t\t\t   Minimum=\"-1\"\n\t\t\t\t\t   Maximum=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Mixed SizeMode Configuration\nDESCRIPTION: XAML configuration demonstrating different SizeMode values in a single DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/width.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" AutoGenerateColumns=\"False\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"100\" SizeMode=\"Fixed\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\" HeaderText=\"Capital\" Width=\"200\" SizeMode=\"Auto\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"200\" SizeMode=\"Stretch\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: SideDrawer Property Configuration\nDESCRIPTION: Core properties for configuring the SideDrawer control including drawer content, main content, drawer location, and gesture settings. Properties control visibility, dimensions, positioning and interaction behavior of the drawer component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nDrawerContent (View) - Specifies the drawer (initially hidden) content\nMainContent (View) - Specifies the (initially visible) content\nIsOpen (bool) - Specifies if drawer content is visible\nDrawerLength (double) - Defines drawer content extension\nDrawerLocation (SideDrawerLocation) - Specifies opening location (Left/Right/Top/Bottom)\nAreGesturesEnabled (bool) - Enables gesture-based open/close\nTouchTargetThreshold (double) - Defines touchable area for opening\nTapOutsideToClose (bool) - Controls if drawer closes on outside tap\n```\n\n----------------------------------------\n\nTITLE: Saving image as PNG in C#\nDESCRIPTION: This C# snippet demonstrates how to save the signature as a PNG image using `SaveImageAsync`. It creates a MemoryStream, saves the image into it, and then sets the Source of a Microsoft.Maui.Image control.  It requires the Telerik UI for .NET MAUI library and the Microsoft.Maui.Controls.Image control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/saving-options.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='signaturepad-saving-png' />\n```\n\n----------------------------------------\n\nTITLE: Monitoring Collection Changes in .NET MAUI with C#\nDESCRIPTION: This C# snippet demonstrates how to respond to changes in the observable collection bound to ExpandedRowDetails in a DataGrid. It sets up the ViewModel and the necessary bindings and event handlers. The ViewModel maintains collections of items and expanded items, handling CollectionChanged events to identify expansions or collapses. This requires basic knowledge of C#, ObservableCollection, and MVVM principles in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/detect-row-detail-expansion-collapse-maui-datagrid.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\\n{\\n    public MainPage()\\n    {\\n        InitializeComponent();\\n        this.BindingContext = new ViewModel();\\n    }\\n}\\n\\npublic class ViewModel : NotifyPropertyChangedBase\\n{\\n    public ViewModel()\\n    {\\n        var items = new ObservableCollection<Data>\\n        {\\n            new Data { Country = \\\"India\\\", Capital = \\\"New Delhi\\\" , Details = \\\"New Delhi is the capital of India and a part of the National Capital Territory of Delhi (NCT). New Delhi is the seat of all three branches of the Government of India, hosting the Rashtrapati Bhavan, Sansad Bhavan, and the Supreme Court.\\\"},\\n            new Data { Country = \\\"South Africa\\\", Capital = \\\"Cape Town\\\", Details = \\\"Cape Town is South Africa's oldest city. It serves as the country's legislative capital, being the seat of the South African Parliament.It is the country's second-largest city (after Johannesburg) and the largest in the Western Cape.\\\"},\\n            new Data { Country = \\\"Nigeria\\\", Capital = \\\"Abuja\\\" , Details = \\\"Abuja is the capital city of Nigeria. When it was decided to move the national capital from Lagos in 1976, a capital territory was chosen for its location near the centre of the country. The planned city is located in the centre of what is now the Federal Capital Territory.\\\" },\\n            new Data { Country = \\\"Singapore\\\", Capital = \\\"Singapore\\\" , Details = \\\"Singapore is the capital city of the Republic of Singapore. It occupies the southern part of Singapore Island. Its strategic position on the strait between the Indian Ocean and South China Sea, complemented by its deepwater harbour, has made it the largest port in Southeast Asia.\\\" }\\n        };\\n\\n        this.Items = items;\\n\\n        this.ExpandedItems = new ObservableCollection<Data>();\\n\\n        // Approach 1\\n        this.ExpandedItems.CollectionChanged += ExpandedItems_CollectionChanged;\\n    }\\n\\n    // Approach 1\\n    private void ExpandedItems_CollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\\n    {\\n        if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Add)\\n        {\\n            // your logic here\\n        }\\n        else if(e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Remove)\\n        {\\n            // your logic here\\n        }\\n    }\\n\\n    public ObservableCollection<Data> Items { get; set; }\\n\\n    public ObservableCollection<Data> ExpandedItems { get; set; }\\n}\\n\\npublic class Data\\n{\\n    public string Country { get; set; }\\n    public string Capital { get; set; }\\n    public string Details { get; set; }\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Command for Generating ComboBox Column in DataGrid (C#)\nDESCRIPTION: This C# code defines a custom command, `CustomGenerateColumnCommand`, which inherits from `DataGridCommand`.  It overrides the `Execute` method to customize the column generation process. When the `PropertyName` is \"Model\", it creates a `DataGridComboBoxColumn` with specific properties bound to a ViewModel's `Championships` list, otherwise it executes the default command.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-column-generation-raddatagrid-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomGenerateColumnCommand : DataGridCommand\n{\n    public CustomGenerateColumnCommand()\n    {\n        this.Id = DataGridCommandId.GenerateColumn;\n    }\n\n    public override void Execute(object parameter)\n    {\n        var context = parameter as GenerateColumnContext;\n\n        if (context.PropertyName == \"Model\")\n        {\n            // Customize and return the column here.\n            context.Result = new DataGridComboBoxColumn\n            {\n                PropertyName = context.PropertyName,\n                HeaderText = context.PropertyName,\n                ItemDisplayBindingPath = \"Name\",\n                ItemsSource = (this.BindingContext as ViewModel).Championships,\n                Width = 100,\n            };\n        }\n        else\n        {\n            // Execute the default command for other properties.\n            this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.GenerateColumn, parameter);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Image from Stream in ImageEditor\nDESCRIPTION: C# code showing how to load an image from a stream into the ImageEditor control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nAssembly assembly = GetType().GetTypeInfo().Assembly;\nstring resource = \"SDKBrowserMaui.Resources.gingerbread.jpg\";\nStream stream = assembly.GetManifestResourceStream(resource);\nthis.imageEditor.Source = ImageSource.FromStream(() => stream);\n```\n\n----------------------------------------\n\nTITLE: Configuring XAML UI for ListView with Context Menu Using RadPopup\nDESCRIPTION: Defines the XAML layout for a ListView with context menus. Uses RadListView with custom item templates that include buttons to trigger context menus and RadPopup controls bound to the IsPopupOpen property to display menu options for each item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-context-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:TESTNet8\"\n             x:Class=\"TESTNet8.MainPage\">\n    <ContentPage.BindingContext>\n        <local:ViewModel x:Name=\"PageViewModel\" />\n    </ContentPage.BindingContext>\n\n    <Grid>\n        <telerik:RadListView x:Name=\"listView\"\n                                     ItemsSource=\"{Binding People}\"\n                                     SelectionMode=\"None\">\n            <telerik:RadListView.ItemTemplate>\n                <DataTemplate>\n                    <telerik:ListViewTemplateCell>\n                        <Grid x:Name=\"ItemGrid\"\n                              BackgroundColor=\"WhiteSmoke\"\n                              HeightRequest=\"70\">\n                            <Grid.ColumnDefinitions>\n                                <ColumnDefinition Width=\"*\" />\n                                <ColumnDefinition Width=\"45\" />\n                            </Grid.ColumnDefinitions>\n\n                            <Label x:Name=\"ListItemDisplayLabel\"\n                                   Text=\"{Binding Name}\"\n                                   HorizontalOptions=\"Center\"\n                                   VerticalOptions=\"Center\"\n                                   FontSize=\"18\" />\n\n                            <BoxView x:Name=\"ItemSpacerBoxView\"\n                                     HorizontalOptions=\"Fill\"\n                                     VerticalOptions=\"End\"\n                                     HeightRequest=\"1\" />\n\n                            <!-- If you want just the ellipsis to open the context menu, use a Button instead.\n                                 Since the command is in the page's ViewModel, so we use x:Reference to escape the BindingContext of the DataTemplate -->\n                            <Button Text=\":\"\n                                    Command=\"{Binding BindingContext.OpenContextMenuCommand, Source={x:Reference listView}}\"\n                                    CommandParameter=\"{Binding}\"\n                                    TextColor=\"DarkGray\"\n                                    BackgroundColor=\"Transparent\"\n                                    VerticalOptions=\"Center\"\n                                    HorizontalOptions=\"Center\"\n                                    Grid.Column=\"1\">\n                                <telerik:RadPopup.Popup>\n                                    <!-- The BindingContext of the popup is the item, so we can bind to IsPopupOpen and Name. -->\n                                    <telerik:RadPopup IsOpen=\"{Binding IsPopupOpen}\"\n                                                                HorizontalOffset=\"-25\">\n                                        <StackLayout BackgroundColor=\"White\"\n                                                     Padding=\"10\"\n                                                     Spacing=\"5\">\n                                            <Label Text=\"Menu\" FontAttributes=\"Bold\"/>\n                                            <Label Text=\"{Binding Name, StringFormat='Name: {0}'}\" />\n                                        </StackLayout>\n                                    </telerik:RadPopup>\n                                </telerik:RadPopup.Popup>\n                            </Button>\n                        </Grid>\n                    </telerik:ListViewTemplateCell>\n                </DataTemplate>\n            </telerik:RadListView.ItemTemplate>\n        </telerik:RadListView>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting SelectionUnit Property in XAML for .NET MAUI DataGrid\nDESCRIPTION: Demonstrates how to set the SelectionUnit property to 'Cell' in XAML for the Telerik UI for .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n\t\t\t\t\t SelectionUnit=\"Cell\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing IKeyLookup for DataGrid Grouping\nDESCRIPTION: This snippet demonstrates how to implement the IKeyLookup interface to provide custom grouping keys for the .NET MAUI DataGrid. The KeyLookup class returns a group key based on a custom logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/delegate-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"<snippet id='datagrid-grouping-delegategroupdescriptor-lookup' />\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Display Content for Grouped Column in MAUI DataGrid\nDESCRIPTION: This code snippet demonstrates how to set a custom name for a column grouped by the `TimeStamp` property in the Telerik DataGrid for MAUI. The `DisplayContent` property of the `PropertyGroupDescriptor` is used to specify the custom name that will be displayed in the grouping panel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-grouped-column-names-datagrid-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:PropertyGroupDescriptor PropertyName=\"TimeStamp\" DisplayContent=\"Creation Time\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik SignaturePad Namespace in XAML\nDESCRIPTION: Include the Telerik MAUI namespace to enable usage of Telerik UI controls in XAML markup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hyperlink Button in XAML\nDESCRIPTION: Shows how to create a basic TemplatedButton with hyperlink styling and command binding. Includes platform-specific width adjustments for WinUI and MacCatalyst.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/create-hyperlink-button-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadTemplatedButton Content=\"Login\"\n                                Command=\"{Binding LogInCommand}\"\n                                Style=\"{StaticResource HyperlinkButtonStyle}\"\n                                WidthRequest=\"{OnPlatform WinUI=220, MacCatalyst=220}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding RadExpander in XAML\nDESCRIPTION: Basic implementation of the RadExpander control in XAML. Requires the telerik namespace to be defined in the document.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying ShapeStyleSelector to RadMap Control\nDESCRIPTION: This snippet demonstrates how to add the definition of the RadMap control with the PopulationShapeStyleSelector applied. This connects the custom style selector to the map control, enabling conditional styling of shapes based on the defined logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-styling-shapeslstyleselector-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Configuring BusyIndicator for Content Interaction in XAML\nDESCRIPTION: Shows how to set up a RadBusyIndicator with proper InputTransparent and CascadeInputTransparent properties to allow interaction with both the content behind the indicator and its own content. The example includes an Entry control placed behind the BusyIndicator and another Entry within the BusyIndicator's Content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/allow-interaction-with-busyindicator-content.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid BackgroundColor=\"White\">\n    <Entry Text=\"This is an Entry placed behind the BusyIndicator\"\n           TextColor=\"Red\"\n           VerticalOptions=\"Start\" />\n    <telerik:RadBusyIndicator x:Name=\"BusyIndicator\"\n                              InputTransparent=\"True\"\n                              CascadeInputTransparent=\"False\">\n        <telerik:RadBusyIndicator.Content>\n            <Grid InputTransparent=\"True\"\n                  CascadeInputTransparent=\"False\">\n                <Entry Text=\"This is the Content of the RadBusyIndicator control displayed when the indicator is not busy.\" \n                       VerticalOptions=\"Center\"\n                       TextColor=\"Black\" />\n            </Grid>\n        </telerik:RadBusyIndicator.Content>\n    </telerik:RadBusyIndicator>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Templates in XAML Resources for DataGrid\nDESCRIPTION: This snippet shows the definition of multiple DataTemplate instances in XAML, each specifying a different appearance for DataGrid cell content based on varying data conditions. These templates are referenced by a DataTemplateSelector to determine UI rendering dynamically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-cell-content-template-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <DataTemplate x:Key=\"validPersonTemplate\">\n            <Grid>\n                <Entry Text=\"{Binding Country}\" BackgroundColor=\"LightBlue\" />\n            </Grid>\n        </DataTemplate>\n        <DataTemplate x:Key=\"invalidPersonTemplate\">\n            <Grid>\n                <Button Text=\"{Binding Country}\" BackgroundColor=\"Red\"/>\n            </Grid>\n        </DataTemplate>\n\n        <local:PersonDataTemplateSelector x:Key=\"personDataTemplateSelector\"\n                                          ValidTemplate=\"{StaticResource validPersonTemplate}\"\n                                          InvalidTemplate=\"{StaticResource invalidPersonTemplate}\" />\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Selection in DataGrid for MAUI\nDESCRIPTION: This code snippet demonstrates how to handle cell selection within a RadDataGrid in a MAUI application. It listens for the SelectionChanged event and toggles the visibility of row details by adding or removing the selected cell's item from the ExpandedRowDetails collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-toggle-row-details-cell-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvoid dataGrid_SelectionChanged(System.Object sender, DataGridSelectionChangedEventArgs e)\n{\n    RadDataGrid dataGrid = sender as RadDataGrid;\n\n    foreach (DataGridCellInfo item in e.AddedItems)\n    {\n        dataGrid.ExpandedRowDetails.Add(item.Item);\n    }\n    foreach (DataGridCellInfo item in e.RemovedItems)\n    {\n        dataGrid.ExpandedRowDetails.Remove(item.Item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Data Model with ComboBox Property in .NET MAUI\nDESCRIPTION: Creates an Employee class that implements property change notification and includes a Category property for use with a DataGrid ComboBox column. Demonstrates binding and value updating.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-combobox-column-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee : NotifyPropertyChangedBase\n{\n\tprivate string name;\n\tprivate Category person;\n\n\tpublic Employee()\n\t{\n\t}\n\n\tpublic string Name\n\t{\n\t\tget => name;\n\t\tset => UpdateValue(ref name, value);\n\t}\n\n\tpublic Category Person\n\t{\n\t\tget => person;\n\t\tset => UpdateValue(ref person, value);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView with ItemTapped Event in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadCollectionView control with the ItemTapped event handler specified.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                             ItemsSource=\"{Binding Items}\"\n                             ItemTapped=\"CollectionView_ItemTapped\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:CollectionViewItemContainer>\n                <Label Text=\"{Binding Name}\" />\n            </telerik:CollectionViewItemContainer>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Indicator Template\nDESCRIPTION: Demonstrates creating a custom loading indicator template for the LoadOnDemandMode to provide a more engaging user experience during data retrieval.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LoadingOnDemandItemTemplate>\n    <DataTemplate>\n        <ActivityIndicator IsRunning=\"True\"\n                           Color=\"Blue\" />\n    </DataTemplate>\n</telerik:RadListView.LoadingOnDemandItemTemplate>\n```\n\n----------------------------------------\n\nTITLE: Configuring RadCartesianChart with Custom Palette in XAML\nDESCRIPTION: This XAML snippet shows how to set up the RadCartesianChart with the custom palette using the ChartUtils class and binding to the SeriesData collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-palette-mvvm.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart chartPalettes:ChartUtils.ColorsSource=\"{Binding SeriesData}\">\n    <telerik:RadCartesianChart.ChartBehaviors>\n        <telerik:ChartSelectionBehavior DataPointSelectionMode=\"Single\"\n                                                SeriesSelectionMode=\"None\" />\n    </telerik:RadCartesianChart.ChartBehaviors>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LineColor=\"#A9A9A9\"\n                                        MajorTickThickness=\"2\"\n                                        PlotMode=\"BetweenTicks\"\n                                        LabelFitMode=\"MultiLine\"\n                                        ShowLabels=\"True\"\n                                        MajorTickBackgroundColor=\"#A9A9A9\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis LineColor=\"#A9A9A9\"\n                                    MajorTickBackgroundColor=\"#A9A9A9\"\n                                    Minimum=\"0\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Grid>\n        <telerik:CartesianChartGrid MajorLinesVisibility=\"Y\"\n                                            MajorLineThickness=\"1\" />\n    </telerik:RadCartesianChart.Grid>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries CategoryBinding=\"Category\"\n                            ValueBinding=\"Value\"\n                            PaletteMode=\"DataPoint\"\n                            ItemsSource=\"{Binding SeriesData}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: TreeView ViewModel Implementation in C#\nDESCRIPTION: C# ViewModel implementation for the TreeView examples that creates a hierarchical data structure of Items and provides collections for storing selected items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Item> Items { get; set; }\n    public ObservableCollection<object> SelectedItems { get; set; }\n\n    public ViewModel()\n    {\n        var item1 = new Item(\"Item 1\");\n        var item2 = new Item(\"Item 2\");\n        var item3 = new Item(\"Item 3\");\n\n        var item1_1 = new Item(\"Item 1.1\");\n        var item1_2 = new Item(\"Item 1.2\");\n        var item1_3 = new Item(\"Item 1.3\");\n\n        var item2_1 = new Item(\"Item 2.1\");\n        var item2_2 = new Item(\"Item 2.2\");\n\n        var item3_1 = new Item(\"Item 3.1\");\n        var item3_2 = new Item(\"Item 3.2\");\n        var item3_3 = new Item(\"Item 3.3\");\n\n        var item1_3_1 = new Item(\"Item 1.3.1\");\n\n        item1.Add(item1_1);\n        item1.Add(item1_2);\n        item1.Add(item1_3);\n        item1_3.Add(item1_3_1);\n\n        item2.Add(item2_1);\n        item2.Add(item2_2);\n\n        item3.Add(item3_1);\n        item3.Add(item3_2);\n        item3.Add(item3_3);\n\n        this.Items = new ObservableCollection<Item>();\n        this.Items.Add(item1);\n        this.Items.Add(item2);\n        this.Items.Add(item3);\n\n        this.SelectedItems = new ObservableCollection<object>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Club Class - XAML\nDESCRIPTION: This snippet demonstrates the definition of the Club class that inherits from NotifyPropertyChangedBase, implementing INotifyPropertyChanged. This is crucial for binding in .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Define the Club class here -->\n```\n\n----------------------------------------\n\nTITLE: Implementing TokensBehavior for RadAutoComplete in .NET MAUI\nDESCRIPTION: This snippet implements TokensBehavior, a custom behavior for RadAutoComplete, that allows for managing tokens through data binding while subscribing and unsubscribing events for tokens collection changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokensBehavior : Behavior<RadAutoComplete>\n{\n    public static readonly BindableProperty TokensProperty =\n        BindableProperty.Create(nameof(Tokens), typeof(ObservableCollection<object>), typeof(TokensBehavior), null, propertyChanged: OnTokensPropertyChanged);\n\n    private RadAutoComplete acv;\n\n    public ObservableCollection<object> Tokens\n    {\n        get\n        {\n            return (ObservableCollection<object>)this.GetValue(TokensProperty);\n        }\n        set\n        {\n            this.SetValue(TokensProperty, value);\n        }\n    }\n    protected override void OnAttachedTo(BindableObject bindable)\n    {\n        base.OnAttachedTo(bindable);\n        this.acv = (RadAutoComplete)bindable;\n    }\n\n    protected override void OnDetachingFrom(BindableObject bindable)\n    {\n        base.OnDetachingFrom(bindable);\n    }\n\n    private static void OnTokensPropertyChanged(BindableObject bindable, object oldValue, object newValue)\n    {\n        var oldCollection = oldValue as INotifyCollectionChanged;\n        if (oldCollection != null)\n        {\n            oldCollection.CollectionChanged -= ((TokensBehavior)bindable).Tokens_CollectionChanged;\n        }\n\n        var collection = newValue as INotifyCollectionChanged;\n        if (collection != null)\n        {\n            ((TokensBehavior)bindable).UpdateTransfer(newValue);\n            collection.CollectionChanged += ((TokensBehavior)bindable).Tokens_CollectionChanged;\n        }\n    }\n\n    private void UpdateTransfer(object tokens)\n    {\n        Transfer((ObservableCollection<object>)tokens, this.acv.Tokens);\n        this.acv.Tokens.CollectionChanged += Tokens_CollectionChanged1;\n    }\n\n    private void Tokens_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)\n    {\n        this.UnsubscribeFromEvents();\n        Transfer(this.Tokens, this.acv.Tokens);\n        this.SubscribeToEvents();\n    }\n\n    private void Tokens_CollectionChanged1(object sender, NotifyCollectionChangedEventArgs e)\n    {\n        if (e.Action == NotifyCollectionChangedAction.Add)\n        {\n            this.UnsubscribeFromEvents();\n            Transfer(this.acv.Tokens, this.Tokens);\n            this.SubscribeToEvents();\n        }\n    }\n\n    private void SubscribeToEvents()\n    {\n        this.acv.Tokens.CollectionChanged += this.Tokens_CollectionChanged1;\n        if (this.Tokens != null)\n        {\n            this.Tokens.CollectionChanged += this.Tokens_CollectionChanged;\n        }\n    }\n\n    private void UnsubscribeFromEvents()\n    {\n        this.acv.Tokens.CollectionChanged -= this.Tokens_CollectionChanged1;\n        if (this.Tokens != null)\n        {\n            this.Tokens.CollectionChanged -= this.Tokens_CollectionChanged;\n        }\n    }\n\n    public static void Transfer(ObservableCollection<object> source, ObservableCollection<object> target)\n    {\n        if (source == null || target == null)\n            return;\n\n        target.Clear();\n        foreach (var o in source)\n        {\n            target.Add(o);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridTextColumn Properties in XAML\nDESCRIPTION: This snippet demonstrates how to set up a DataGridTextColumn with custom formatting and styling. It shows the usage of PropertyName, HeaderText, CellContentFormat, and CellContentStyle properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/text-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTextColumn PropertyName=\"Name\"\n                            HeaderText=\"Name\"\n\t\t\t\t\t\t\tCellContentFormat=\"FC {0}\">\n\t<telerik:DataGridTextColumn.CellContentStyle>\n    \t<telerik:DataGridTextCellStyle TextColor=\"Green\"\n                                       FontSize=\"15\"\n                                       SelectedTextColor=\"Orange\"/>\n \t</telerik:DataGridTextColumn.CellContentStyle>\n </telerik:DataGridTextColumn>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Level Grouping in CollectionView\nDESCRIPTION: XAML snippet demonstrating how to configure a RadCollectionView with two PropertyGroupDescriptors to enable multi-level grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/multilevel-grouping.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-multilevel-grouping' />\n```\n\n----------------------------------------\n\nTITLE: Defining a Telerik Gauge Control in XAML\nDESCRIPTION: Code sample demonstrating how to define a Gauge control in a .NET MAUI application using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='gauge-getting-started-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Code required to register Telerik controls in your .NET MAUI application. This is added to the CreateMauiApp method in MauiProgram.cs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Defining Linear Layout for RadListView in XAML\nDESCRIPTION: This snippet demonstrates how to define a linear layout for the RadListView in XAML. It requires the 'telerik' namespace and involves setting the 'RadListView.LayoutDefinition' to an instance of 'ListViewLinearLayout'. Key dependencies include the Telerik UI for .NET MAUI library. The snippet is designed for use with a ViewModel class providing an ItemsSource collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-layouts-linearlayout-listview'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Load Children on Demand Command in C#\nDESCRIPTION: This C# code shows the implementation of a ViewModel with the LoadChildrenOnDemandCommand. It handles the loading of child items when a parent node is expanded in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/load-children-on-demand.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    public ObservableCollection<Item> Source { get; set; }\n\n    public ICommand LoadChildrenOnDemandCommand { get; set; }\n\n    public ViewModel()\n    {\n        this.Source = new ObservableCollection<Item>();\n        this.LoadChildrenOnDemandCommand = new Command(this.ExecuteLoadChildrenOnDemandCommand);\n\n        for (int i = 1; i <= 5; i++)\n        {\n            var item = new Item { Name = $\"Item {i}\", HasChildren = true };\n            this.Source.Add(item);\n        }\n    }\n\n    private void ExecuteLoadChildrenOnDemandCommand(object parameter)\n    {\n        var context = parameter as TreeViewLoadChildrenOnDemandCommandContext;\n        var item = context.Item as Item;\n\n        if (item != null)\n        {\n            item.Children = new ObservableCollection<Item>();\n            for (int i = 1; i <= 3; i++)\n            {\n                item.Children.Add(new Item { Name = $\"{item.Name}.{i}\", HasChildren = true });\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Views with SpecialSlots in XAML\nDESCRIPTION: XAML configuration for Telerik Scheduler defining different view definitions with SpecialSlotsSource binding for non-working hours. Includes WeekView, WorkWeek, MultiDayView, and DayView configurations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/scheduler-net-maui-non-working-hours.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <telerik:RadScheduler AppointmentsSource=\"{Binding Appointments}\">\n        <telerik:RadScheduler.ViewDefinitions>\n            <telerik:WeekViewDefinition SpecialSlotsSource=\"{Binding NonWorkingHours}\" />\n            <telerik:WeekViewDefinition Title=\"Work Week\"\n                                        IsWeekendVisible=\"False\"\n                                        SpecialSlotsSource=\"{Binding NonWorkingHours}\" />\n            <telerik:MultidayViewDefinition VisibleDays=\"3\"\n                                            Title=\"3 Day\"\n                                            SpecialSlotsSource=\"{Binding NonWorkingHours}\" />\n            <telerik:DayViewDefinition SpecialSlotsSource=\"{Binding NonWorkingHours}\" />\n        </telerik:RadScheduler.ViewDefinitions>\n    </telerik:RadScheduler>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: RadCartesianChart with Pan and Zoom in XAML\nDESCRIPTION: This XAML code defines a RadCartesianChart with data binding, axes, series, and pan and zoom behavior. The ChartPanAndZoomBehavior is configured for horizontal pan and zoom and handles double-tap gestures to reset the chart's zoom and scroll offset. The chart displays sales data over time using a LineSeries.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/pan-and-zoom-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart PaletteName=\"Light\"\n                                Zoom=\"2, 1\">\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel/>\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n                                             MajorStepUnit=\"Day\"\n                                             PlotMode=\"OnTicks\"\n                                             LabelFormat=\"dd MMM\"\n                                             MajorStep=\"20\"\n                                             ShowLabels=\"True\"/>\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Date\"\n                                 DisplayName=\"Sales\"\n                                 ItemsSource=\"{Binding Data}\"/>\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.ChartBehaviors>\n        <telerik:ChartPanAndZoomBehavior ZoomMode=\"Horizontal\"\n                                              PanMode=\"Horizontal\"\n                                              HandleDoubleTap=\"True\"/>\n    </telerik:RadCartesianChart.ChartBehaviors>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Adding Items Source for AutoComplete Suggestions\nDESCRIPTION: Code snippet demonstrating how to add an items source for the AutoComplete suggestion list. This is crucial for populating the control with data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Code for adding items source would go here\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridTimeColumn in XAML for .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to configure a DataGridTimeColumn with custom formatting and styling. It sets the PropertyName, HeaderText, and CellContentFormat, and applies a custom CellContentStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/time-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTimeColumn PropertyName=\"Time\"\n                            HeaderText=\"Time Column\"\n                            CellContentFormat=\"{}{0: hh:mm:ss}\">\n    <telerik:DataGridTimeColumn.CellContentStyle>\n        <telerik:DataGridTextCellStyle TextColor=\"Lime\"\n                                       FontSize=\"18\"\n                                       SelectedTextColor=\"Red\" />\n    </telerik:DataGridTimeColumn.CellContentStyle>\n</telerik:DataGridTimeColumn>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CalendarStyleSelector in .NET MAUI\nDESCRIPTION: This snippet shows the implementation of a custom style selector that inherits from CalendarStyleSelector. It is used to provide custom styling logic for the days in the calendar.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/day-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-styleselectors-custom-calendarstyleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Item for DataGrid Search\nDESCRIPTION: Presents the Country class used as the data item for binding in the DataGrid search example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public string Name { get; set; }\n    public string Capital { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager and CollectionView in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define the DataPager and CollectionView in XAML, which is essential for implementing paging functionality in .NET MAUI applications. It outlines the necessary structural setup for the controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/collectionview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='radcollectionview-datapager' />\n```\n\n----------------------------------------\n\nTITLE: Handling Row Selection in DataGrid for MAUI\nDESCRIPTION: This code snippet shows how to handle row selection within a RadDataGrid in a MAUI application. It listens for the SelectionChanged event and toggles the visibility of row details by adding or removing the selected row's item from the ExpandedRowDetails collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-toggle-row-details-cell-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvoid dataGrid_SelectionChanged(System.Object sender, DataGridSelectionChangedEventArgs e)\n{\n    RadDataGrid dataGrid = sender as RadDataGrid;\n\n    foreach (var item in e.AddedItems)\n    {\n        dataGrid.ExpandedRowDetails.Add(item);\n    }\n    foreach (var item in e.RemovedItems)\n    {\n        dataGrid.ExpandedRowDetails.Remove(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CollectionView GroupHeaderTemplate in .NET MAUI\nDESCRIPTION: Uses the defined converter in the GroupHeaderTemplate of the CollectionView in XAML. The converter is applied to the image source binding to display proper flag images based on the group key, alongside a label for the group key.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/group-collectionview-display-another-property-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <local:CountryNameToFlagConverter x:Key=\"CountryNameToFlagConverter\" />\n    </ResourceDictionary>\n</ContentPage.Resources>\n<telerik:RadCollectionView ItemsSource=\"{Binding Items}\" x:Name=\"grid\">\n    <telerik:RadCollectionView.GroupDescriptors>\n        <telerik:PropertyGroupDescriptor PropertyName=\"Country\"/>\n    </telerik:RadCollectionView.GroupDescriptors>\n    <telerik:RadCollectionView.GroupHeaderTemplate>\n        <DataTemplate>\n            <HorizontalStackLayout BackgroundColor=\"LightBlue\" Spacing=\"20\">\n                <Label Text=\"{Binding Key}\" />\n                <Image Source=\"{Binding Key, Converter={StaticResource CountryNameToFlagConverter}}\" />\n            </HorizontalStackLayout>\n        </DataTemplate>\n    </telerik:RadCollectionView.GroupHeaderTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Controlling Display Modes in .NET MAUI Calendar\nDESCRIPTION: Demonstrates the code required to set and restrict display modes in the .NET MAUI Calendar control using the DisplayMode, MinDisplayMode, and MaxDisplayMode properties. Dependencies include the .NET MAUI and Telerik UI for MAUI libraries. Accepts enum values for the display modes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/display-modes.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-display-range'/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Typing Indicator using Authors Collection in C#\nDESCRIPTION: This snippet shows how to display the typing indicator using the Authors collection. The Authors collection, which is of type ObservableCollection<Author>, is used to show the participants who are currently typing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/typing-indicator.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chat-typingindicator-authors-code' />\n```\n\n----------------------------------------\n\nTITLE: Registering Font in MauiProgram.cs for .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to register the Telerik font icons in the MauiProgram.cs file of a .NET MAUI application. It adds the 'telerikfontexamples.ttf' font file and assigns it the name 'TelerikFontExamples' for use in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/using-font-icons-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n    fonts.AddFont(\"telerikfontexamples.ttf\", \"TelerikFontExamples\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the ItemsControl in XAML\nDESCRIPTION: Basic declaration of the RadItemsControl element in XAML. This is the first step in adding the control to your page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadItemsControl x:Name=\"itemsControl\"/>\n```\n\n----------------------------------------\n\nTITLE: ChatPicker Overlay Code with DatePickerContext in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to display a DatePicker by setting the Context property of the RadChatPicker to a DatePickerContext. This is typically done when the RadChatPicker is placed inside the Chat control, but not as a direct part of the conversation flow.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chat-chatpicker-overlay-code' />\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for DataForm with Manual Editors\nDESCRIPTION: Defines a ViewModel class to be used with the DataForm control when manually creating editors. This model includes various property types that will be mapped to specific editor types.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class EditorsViewModel\n{\n    public Gender Gender { get; set; }\n    public string Name { get; set; }\n    public double? Weight { get; set; }\n    public bool? IsEnabled { get; set; }\n    public DateTime? BirthDate { get; set; }\n    public TimeSpan? WorkStartTime { get; set; }\n}\n\npublic enum Gender\n{\n    Male,\n    Female\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup with PDF Viewer in .NET MAUI XAML\nDESCRIPTION: This code demonstrates how to set up a RadPopup control containing a RadPdfViewer in a .NET MAUI application. The layout includes a button to trigger the popup and a close button within the popup interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-display-pdf-documents-popup-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <ContentPage.Content>\n        <telerik:RadTemplatedButton Content=\"Show PDF\"\n                            Clicked=\"ShowPopupClicked\">\n        </telerik:RadTemplatedButton>\n    </ContentPage.Content>\n\n    <telerik:RadPopup.Popup>\n        <telerik:RadPopup x:Name=\"popup\"\n                  OutsideBackgroundColor=\"#66000000\"\n                  Placement=\"Center\"\n                  VerticalOffset=\"8\">\n            <telerik:RadBorder BackgroundColor=\"#F9F9F9\"\n                       CornerRadius=\"8\"\n                       WidthRequest=\"600\" HeightRequest=\"600\">\n                <Grid RowDefinitions=\"70,*\">\n                    <telerik:RadTemplatedButton Margin=\"20\" Content=\"Close Popup\" \n                                            Clicked=\"ClosePopup\"/>\n                    <telerik:RadPdfViewer x:Name=\"viewer\"\n                                      HeightRequest=\"500\" \n                                      WidthRequest=\"500\" \n                                      Grid.Row=\"1\"/>\n                </Grid>\n            </telerik:RadBorder>\n        </telerik:RadPopup>\n    </telerik:RadPopup.Popup>\n```\n\n----------------------------------------\n\nTITLE: Styling DataGrid Text Column Editor in .NET MAUI\nDESCRIPTION: Example demonstrating how to apply CellEditorStyle to a DataGridTextColumn for customizing the appearance of the cell editor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/editing.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-columnstyle-celleditor'/>\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Legend ViewModel\nDESCRIPTION: Provides the ViewModel implementation for the Pie Chart legend, defining the data source and series configuration\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/legend.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npiechart-legend-viewmodel\n```\n\n----------------------------------------\n\nTITLE: Implementing the ComboBox Cities ViewModel in C#\nDESCRIPTION: C# ViewModel implementation that provides a collection of City objects. It creates a Cities property that can be bound to the ComboBox's ItemsSource property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/databinding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Cities = new ObservableCollection<City>\n        {\n            new City { Name = \"Tokyo\", Country = \"Japan\" },\n            new City { Name = \"New York\", Country = \"USA\" },\n            new City { Name = \"London\", Country = \"England\" },\n            new City { Name = \"Madrid\", Country = \"Spain\" },\n            new City { Name = \"Berlin\", Country = \"Germany\" },\n            new City { Name = \"Rome\", Country = \"Italy\" },\n            new City { Name = \"Paris\", Country = \"France\" },\n            new City { Name = \"Sydney\", Country = \"Australia\" },\n        };\n    }\n\n    public ObservableCollection<City> Cities { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView with Empty Template in XAML\nDESCRIPTION: Demonstrates how to define a RadTreeView control with Empty Template configuration. The example shows the tree view structure with country and city data binding, along with an empty template that displays when no data is present.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/empty-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                        ItemsSource=\"{Binding Countries}\">\n    <telerik:TreeViewDescriptor TargetType=\"{x:Type local:Country}\"\n                                DisplayMemberPath=\"Name\"\n                                ItemsSourcePath=\"Cities\" />\n    <telerik:TreeViewDescriptor TargetType=\"{x:Type local:City}\">\n        <telerik:TreeViewDescriptor.ItemTemplate>\n            <DataTemplate>\n                <Label Text=\"{Binding Name}\"\n                        FontAttributes=\"Italic\" />\n            </DataTemplate>\n        </telerik:TreeViewDescriptor.ItemTemplate>\n    </telerik:TreeViewDescriptor>\n    <telerik:RadTreeView.EmptyTemplate>\n        <DataTemplate>\n            <Label Text=\"No data\"/>\n        </DataTemplate>\n    </telerik:RadTreeView.EmptyTemplate>\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for CollectionView with Grouped Items\nDESCRIPTION: A ViewModel implementation that provides data for the CollectionView with grouped items. It initializes a collection of Product objects organized by categories and supports the selection of items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-grouped-items.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private object selectedItem;\n\n    public ViewModel()\n    {\n        this.Products = this.GetProducts();\n    }\n\n    public List<Product> Products { get; set; }\n\n    public object SelectedItem\n    {\n        get { return this.selectedItem; }\n        set\n        {\n            if (this.selectedItem != value)\n            {\n                this.selectedItem = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    private List<Product> GetProducts()\n    {\n        var products = new List<Product>();\n\n        products.Add(new Product { Name = \"Apple\", Category = \"Fruits\", InStock = true });\n        products.Add(new Product { Name = \"Orange\", Category = \"Fruits\", InStock = true });\n        products.Add(new Product { Name = \"Banana\", Category = \"Fruits\", InStock = false });\n        products.Add(new Product { Name = \"Pineapple\", Category = \"Fruits\", InStock = true });\n        products.Add(new Product { Name = \"Strawberry\", Category = \"Fruits\", InStock = true });\n\n        products.Add(new Product { Name = \"Carrots\", Category = \"Vegetables\", InStock = true });\n        products.Add(new Product { Name = \"Cucumbers\", Category = \"Vegetables\", InStock = false });\n        products.Add(new Product { Name = \"Tomatoes\", Category = \"Vegetables\", InStock = true });\n        products.Add(new Product { Name = \"Lettuce\", Category = \"Vegetables\", InStock = false });\n        products.Add(new Product { Name = \"Potatoes\", Category = \"Vegetables\", InStock = true });\n\n        products.Add(new Product { Name = \"Chocolate\", Category = \"Desserts\", InStock = true });\n        products.Add(new Product { Name = \"Ice Cream\", Category = \"Desserts\", InStock = true });\n        products.Add(new Product { Name = \"Cake\", Category = \"Desserts\", InStock = false });\n        products.Add(new Product { Name = \"Pie\", Category = \"Desserts\", InStock = true });\n        products.Add(new Product { Name = \"Cookies\", Category = \"Desserts\", InStock = true });\n\n        return products;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel for RadCartesianChart in .NET MAUI\nDESCRIPTION: This ViewModel provides data to the RadCartesianChart. It initializes an ObservableCollection of TemporalData objects with sample data for demonstration. The GetDateTimeData method generates a list of TemporalData objects, assigning date and value properties based on the index within a specified range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/pan-and-zoom-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<TemporalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = new ObservableCollection<TemporalData>(GetDateTimeData(200));\n    }\n\n    private static List<TemporalData> GetDateTimeData(int itemsCount)\n    {\n        var startDate = new DateTime(2015, 03, 01);\n\n        List<TemporalData> items = new List<TemporalData>();\n        for (int i = 0; i < itemsCount; i++)\n        {\n            TemporalData data = new TemporalData();\n            data.Date = startDate.AddDays(i);\n\n            if (i % 2 == 0)\n            {\n                data.Value = i + 5;\n            }\n            else\n            {\n                if (i % 5 == 0)\n                {\n                    data.Value = i - 15;\n                }\n            }\n\n            items.Add(data);\n        }\n\n        return items;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to define the Telerik namespace that is required in the XAML file to access Telerik controls for .NET MAUI ListView. This is a necessary setup step to use Telerik components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/pull-to-refresh.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RadSlider with ValueChanging Event in XAML\nDESCRIPTION: Defines a RadSlider control with minimum, maximum, and initial value, and attaches the ValueChanging event handler\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSlider Minimum=\"0\"\n                   Maximum=\"100\"\n                   Value=\"35\"\n                   ValueChanging=\"Slider_ValueChanging\" />\n```\n\n----------------------------------------\n\nTITLE: Adding TextFilterDescriptor to CollectionView in C#\nDESCRIPTION: C# event handler that applies the TextFilterDescriptor to the CollectionView based on the text entered in the RadEntry control. The filter is case-insensitive and uses the Contains operator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnFilterEntryTextChanged(object sender, TextChangedEventArgs e)\n{\n    this.collectionView.FilterDescriptors.Clear();\n\n    if (!string.IsNullOrEmpty(e.NewTextValue))\n    {\n        this.collectionView.FilterDescriptors.Add(new TextFilterDescriptor()\n        {\n            PropertyName = \"Name\",\n            Operator = TextOperator.Contains,\n            Value = e.NewTextValue,\n            IsCaseSensitive = false\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid in XAML for Single Tap Editing\nDESCRIPTION: Defines a RadDataGrid in XAML to be used for single tap editing. This setup is a prerequisite for implementing custom command logic to enable single tap editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-single-tap-editing.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid x:Name=\\\"grid\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing RadCollectionView with Automatic LoadOnDemand Template\nDESCRIPTION: XAML implementation of RadCollectionView with an AutomaticLoadOnDemandTemplate that customizes the appearance of the automatic loading indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-loadondemand-automatic-template' />\n```\n\n----------------------------------------\n\nTITLE: Manually Validating DataForm Changes in C#\nDESCRIPTION: Shows how to use the ValidateChanges() method to manually validate all changes in the DataForm when ValidationMode is set to Explicit.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-validatechanges'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CollectionView Grouping\nDESCRIPTION: C# code snippet implementing the ViewModel class that provides data for the multi-level grouping example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/multilevel-grouping.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Event Handlers for Showing and Hiding .NET MAUI Popup\nDESCRIPTION: Implements event handlers that are used to show or hide the Popup control. The OpenPopup method displays the popup, while the OnClose method hides it when a button is clicked.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OpenPopup(object sender, EventArgs e)\n{\n    this.popup.IsOpen = true;\n}\n\nprivate void OnClose(object sender, EventArgs e)\n{\n    this.popup.IsOpen = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationView Structure in XAML for MAUI Applications\nDESCRIPTION: This snippet demonstrates how to define a RadNavigationView control in XAML with various navigation items including header, content items, and footer items. The control includes custom icons and a content area.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/integrating-navigationview-with-maui-navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadNavigationView x:Name=\"navigationView\" SelectionChanged=\"navigationView_SelectionChanged\"\n                       HeaderText=\"Navigation Header\">\n    <telerik:RadNavigationView.Items>\n        <telerik:NavigationViewItem Text=\"Search\"\n                                Position=\"Header\"\n                                IsSelectable=\"False\">\n            <telerik:NavigationViewItem.ImageSource>\n                <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconSearch}\"\n                             FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                             Size=\"16\" />\n            </telerik:NavigationViewItem.ImageSource>\n        </telerik:NavigationViewItem>\n        <telerik:NavigationViewItem Text=\"Item 1\" />\n        <telerik:NavigationViewItem Text=\"Item 2\" />\n        <telerik:NavigationViewItem Text=\"Settings\"\n                                Position=\"Footer\">\n            <telerik:NavigationViewItem.ImageSource>\n                <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconMore}\"\n                             FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                             Size=\"16\" />\n            </telerik:NavigationViewItem.ImageSource>\n        </telerik:NavigationViewItem>\n    </telerik:RadNavigationView.Items>\n\n    <telerik:RadNavigationView.Content>\n        <Grid BackgroundColor=\"LightBlue\">\n            <Label Text=\"Content area where you can add views but not pages\"/>\n        </Grid>\n    </telerik:RadNavigationView.Content>\n</telerik:RadNavigationView>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documents from Fixed Document - C#\nDESCRIPTION: This snippet demonstrates how to visualize a PDF document by using the RadFixedDocument method, allowing for modification of the document after importing it before assigning it as a source to the PDF Viewer control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/display-documents.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Example code for visualizing a document from a fixed document\n// This part is assumed to exist in the original source code.\n```\n\n----------------------------------------\n\nTITLE: Saving an Image with Original Size in C#\nDESCRIPTION: This code demonstrates how to save an image with its original size using the SaveAsync method of the RadImageEditor control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/saving-image.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='imageeditor-saveimage-original'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with Row Details in XAML\nDESCRIPTION: Shows how to define the basic DataGrid structure in XAML with row details functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-rowdetails'/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadTreeView in XAML for .NET MAUI\nDESCRIPTION: Sets up a RadTreeView instance with ItemsSource binding and item template definition. The TreeView is placed inside a Grid to ensure proper virtualization and gesture handling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <telerik:RadTreeView x:Name=\"treeView\"\n                         ItemsSource=\"{Binding Items}\">\n        <telerik:RadTreeView.ItemTemplate>\n            <DataTemplate>\n                <telerik:TreeViewItemView>\n                    <Label Text=\"{Binding Name}\" />\n                </telerik:TreeViewItemView>\n            </DataTemplate>\n        </telerik:RadTreeView.ItemTemplate>\n    </telerik:RadTreeView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Barcode with QR Code Symbology - XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a Barcode element applying the QR Code symbology, which includes settings for value, sizing mode, code mode, error correction level, and additional modes for encoding. This setup ensures accurate representation and scannability of QR Codes in applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/qrcode-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBarcode x:Name=\"barcode\"\n                    Value=\"https://docs.telerik.com/devtools/maui/introduction\">\n    <telerik:RadBarcode.Symbology>\n        <telerik:QRCode SizingMode=\"Stretch\"\n\t\t\t\t\t\tCodeMode=\"Byte\"\n\t\t\t\t\t\tErrorCorrectionLevel=\"H\"                                     \n\t\t\t\t\t\tECIMode =\"ISO8859_1\"\n\t\t\t\t\t\tFNC1Mode=\"SecondPosition\"  \n\t\t\t\t\t\tApplicationIndicator=\"00\"/>\n    </telerik:RadBarcode.Symbology>\n</telerik:RadBarcode>\n```\n\n----------------------------------------\n\nTITLE: Handling CellTap Action as Command using C#\nDESCRIPTION: In this snippet, a class is defined that inherits from 'DataGridCommand', including the necessary overrides for 'CanExecute' and 'Execute' methods to handle the 'CellTap' action.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='datagrid-commands-validation-validatecell'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models for Kanban UI with Nested ListView Support\nDESCRIPTION: This code defines two data model classes: KanbanSubItem for individual tasks and KanbanItem for columns that contain multiple tasks. The KanbanItem includes a reference to its host ListView for programmatic scrolling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-cross-orientation-nesting.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.ObjectModel;\nusing Telerik.Maui.Controls.Compatibility.DataControls;\n\nnamespace HorizontalAndVerticalDemo;\n\npublic class KanbanSubItem\n{\n    public string Title { get; set; }\n\n    public DateTime Deadline { get; set; }\n}\n\npublic class KanbanItem\n{\n    public string WeekName { get; set; }\n\n    public ObservableCollection<KanbanSubItem> SubItems { get; set; }\n\n    public RadListView ListViewHost {get; set; }\n\n    public void ScrollToSubItem(KanbanSubItem item)\n    {\n        if(ListViewHost == null || item == null)\n            return;\n\n        ListViewHost?.ScrollItemIntoView(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for AIPrompt Control in .NET MAUI\nDESCRIPTION: Creates a ViewModel class that handles the input text, output items collection, and command for the AIPrompt control. It implements the prompt request logic and manages the UI state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private string inputText = string.Empty;\n    private IList<AIPromptOutputItem> outputItems = new ObservableCollection<AIPromptOutputItem>();\n    private ICommand promptRequestCommand;\n\n    public ViewModel()\n    {\n        this.promptRequestCommand = new Command(this.ExecutePromptRequestCommand, this.CanExecutePromptRequestCommand);\n    }\n\n    public string InputText { get { return this.inputText; } set { this.UpdateValue(ref this.inputText, value); } }\n    public IList<AIPromptOutputItem> OutputItems { get { return this.outputItems; } }\n    public ICommand PromptRequestCommand { get { return this.promptRequestCommand; } }\n\n    private bool CanExecutePromptRequestCommand(object arg)\n    {\n        string text = (string)arg;\n        return !string.IsNullOrEmpty(text?.Trim());\n    }\n\n    private void ExecutePromptRequestCommand(object arg)\n    {\n        AIPromptOutputItem outputItem = new AIPromptOutputItem\n        {\n            Title = \"Generated with AI:\",\n            InputText = arg?.ToString(),\n            ResponseText = \"This is the response from the AI in relation to your request. For real prompt processing, please connect the component to a preferred AI service.\"\n        };\n\n        this.OutputItems.Insert(0, outputItem);\n        this.InputText = string.Empty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace for ViewModel in XAML\nDESCRIPTION: This snippet demonstrates how to define the XML namespace for the ViewModel class used in the BindingContext of the RadCartesianChart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:local=\"clr-namespace:[The namespace where the ViewModel class is defined];assembly=[The assembly name]\"\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyAggregateDescriptor in XAML for .NET MAUI DataGrid\nDESCRIPTION: This XAML snippet demonstrates how to add PropertyAggregateDescriptor to DataGrid columns, specifying different aggregate functions for various properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/property-aggregate-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                      ItemsSource=\"{Binding Orders}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\" HeaderText=\"Name\"/>\n        <telerik:DataGridNumericalColumn PropertyName=\"Price\" HeaderText=\"Price\"/>\n        <telerik:DataGridNumericalColumn PropertyName=\"DeliveryPrice\" HeaderText=\"Delivery Price\"/>\n        <telerik:DataGridNumericalColumn PropertyName=\"Quantity\" HeaderText=\"Quantity\"/>\n    </telerik:RadDataGrid.Columns>\n    <telerik:RadDataGrid.AggregateDescriptors>\n        <telerik:PropertyAggregateDescriptor PropertyName=\"DeliveryPrice\" Function=\"Min\" />\n        <telerik:PropertyAggregateDescriptor PropertyName=\"DeliveryPrice\" Function=\"Max\" />\n        <telerik:PropertyAggregateDescriptor PropertyName=\"DeliveryPrice\" Function=\"Average\" />\n        <telerik:PropertyAggregateDescriptor PropertyName=\"Name\" Function=\"Count\" />\n    </telerik:RadDataGrid.AggregateDescriptors>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Handling EditorGenerated Event in .NET MAUI DataForm\nDESCRIPTION: This code snippet demonstrates how to handle the EditorGenerated event in a .NET MAUI DataForm. It allows customization of automatically generated editors when AutoGenerateItems is true and no explicit editor is specified for a given property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndataForm.EditorGenerated += this.OnEditorsGenerated;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnEditorsGenerated(object sender, DataFormEditorGeneratedEventArgs e)\n{\n    if (e.PropertyName == \"Age\")\n    {\n        var editor = new DataFormNumericEditor();\n        editor.Step = 1;\n        e.Editor = editor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MAUI using C#\nDESCRIPTION: This snippet illustrates how to register Telerik controls in a .NET MAUI application using the UseTelerik extension method within the CreateMauiApp method. It shows the necessary setup for integrating Telerik controls with a basic font configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting CalendarStyleSelector - CustomStyleSelector\nDESCRIPTION: Demonstrates how to create a custom style selector by inheriting from CalendarStyleSelector. The SelectStyle method must be overridden to cast the parameter to CalendarNode, which contains properties like date, text, and selection state for visualization in the Calendar's views.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/content-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-styleselectors-custom-calendarstyleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Handling Tokens Collection Changes in C#\nDESCRIPTION: Demonstrates how to implement an event handler for the Tokens CollectionChanged event to track when items are added or removed from the AutoComplete control's tokens collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/tokens-support.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Tokens_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\n{\n   \n}\n  \n```\n\n----------------------------------------\n\nTITLE: DataGrid Definition with SkiaSharp Cell Renderer\nDESCRIPTION: XAML definition of a DataGrid with custom TextColumn using SkiaSharp cell renderer for Revenue display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-columns-skiacellrenderer' />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documents from Byte Array - C#\nDESCRIPTION: This snippet demonstrates how to visualize documents from a byte array using the ByteArrayDocumentSource class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/display-documents.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] bytes = this.GetBytes();\nthis.pdfViewer.Source = new ByteArrayDocumentSource(bytes, true);\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Content in C#\nDESCRIPTION: Demonstrates how to load formatted HTML content into the RichTextEditor using the Source property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.richTextEditor.Source = new HtmlTextSource\n{\n    Text = \"<p style=\\\"font-family: Arial, Helvetica, sans-serif; font-size: 14px;\\\">This is a <strong>sample</strong> <span style=\\\"color: blue;\\\">text</span>.</p>\"\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FitToWidth Command in .NET MAUI PDF Viewer - C#\nDESCRIPTION: This snippet demonstrates how to set the FitToWidthCommand property of RadPdfViewer to switch between different options for fitting the document width in .NET MAUI PDF Viewer. The FitPageToWidthCommand is used to adjust the current page view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.pdfViewer.FitToWidthCommand = new PdfViewerFitPageToWidthCommand();\n```\n\n----------------------------------------\n\nTITLE: Setting Interaction Mode in .NET MAUI Map using XAML\nDESCRIPTION: This snippet demonstrates how to configure the InteractionMode property of the Telerik Map control in XAML to enable or disable pan and zoom gestures. The InteractionMode property allows users to interact with the map through panning and zooming.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/pan-and-zoom.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='map-interaction-mode-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Adding a Telerik UI TemplatedButton Component\nDESCRIPTION: Shows how to add a Telerik UI TemplatedButton control to a .NET MAUI XAML file and set its basic properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:TemplatedButton Text=\"Telerik .NET MAUI Button\"\n                         BackgroundColor=\"Blue\"\n                         TextColor=\"White\"\n                         WidthRequest=\"200\"\n                         HeightRequest=\"50\"\n                         VerticalOptions=\"Center\"\n                         HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: TemplatedButton Command ViewModel\nDESCRIPTION: This snippet represents the ViewModel which contains the logic for the command executed by the TemplatedButton.  It defines the Command and the logic that is executed when the command is triggered.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/command.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='templatedbutton-command-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animation - C#\nDESCRIPTION: This snippet demonstrates how to create a custom animation in C# by setting the AnimationType to Custom and adding the content and animations programmatically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/animations.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Example code for creating custom animation in C#\nBusyIndicator busyIndicator = new BusyIndicator();\nbusyIndicator.AnimationType = AnimationType.Custom;\nbusyIndicator.BusyContent = new Label { Text = \"Loading...\" };\nbusyIndicator.Animations.Add(new RadAnimation { /* Define your animation here */ });\n```\n\n----------------------------------------\n\nTITLE: Setting Telerik Theme and Swatch in C#\nDESCRIPTION: Set the Telerik theme and desired swatch programmatically in the App.xaml.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar telerikTheming = Application.Current\n                    .Resources\n                    .MergedDictionaries\n                    .OfType<TelerikTheming>()\n                    .Single();\ntelerikTheming.Theme = TelerikTheming.Themes\n                    .Single(t => t.Theme == \"Telerik\" && t.Swatch == \"Purple\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection ViewModel\nDESCRIPTION: ViewModel implementation for ComboBox multiple selection functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-multipleselection-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation with Custom Clear Command\nDESCRIPTION: C# ViewModel class implementing the custom clear command logic and data management for the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-clear-selection-command.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private City selectedItem;\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<City>\n        {\n            new City { Name = \"Tokyo\"},\n            new City { Name = \"New York\"},\n            new City { Name = \"London\"},\n            new City { Name = \"Madrid\"},\n            new City { Name = \"Los Angeles\"},\n            new City { Name = \"Paris\"},\n            new City { Name = \"Beijing\"},\n            new City { Name = \"Singapore\"},\n            new City { Name = \"New Delhi\"},\n            new City { Name = \"Bangkok\"},\n            new City { Name = \"Berlin\"},\n        };\n         \n        this.MyCustomCommand = new Command(()=> this.MyText = this.SelectedItem.Name);\n    }\n\n    public ObservableCollection<City> Items { get; set; }\n\n    public City SelectedItem\n    {\n        get\n        {\n            return this.selectedItem;\n        }\n        set\n        {\n            if (this.selectedItem != value)\n            {\n                this.selectedItem = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    private ICommand myCustomCommand;\n\n    public ICommand MyCustomCommand\n    {\n        get\n        {\n            return this.myCustomCommand;\n        }\n        set\n        {\n            if (this.myCustomCommand != value)\n            {\n                this.myCustomCommand = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    private string myText;\n\n    public string MyText\n    {\n        get\n        {\n            return this.myText;\n        }\n        set\n        {\n            if (this.myText != value)\n            {\n                this.myText = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the Telerik namespace to the XAML file. This namespace is required to use Telerik UI controls like RadNavigationView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/display-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with GroupHeaderTemplate in XAML\nDESCRIPTION: This snippet demonstrates how to define a DataGrid in XAML and apply a custom GroupHeaderTemplate. The GroupHeaderTemplate allows you to customize the appearance of the group headers within the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/group-header-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-groupheader-template-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Line Series XAML\nDESCRIPTION: Defines a RadCartesianChart with a Line Series in XAML, specifying the axes and binding the series to the data in the ViewModel. This snippet demonstrates the basic structure for displaying a Line Series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/line-series.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-line-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating Appointments ViewModel in C#\nDESCRIPTION: Shows how to create a ViewModel class containing an Appointments collection for the Scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<scheduler-appointments-viewmodel />\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying Control Template in XAML for RadScheduler Header Customization\nDESCRIPTION: This snippet defines a control template in XAML to remove the navigation button, center the month text, and hide the \"Available views\" button in the RadScheduler header. Dependencies include Telerik UI for .NET MAUI and a properly configured ResourceDictionary. The snippet defines necessary styles and layout for the header components, and should be placed within a ContentPage's resources. It targets both Android and iOS platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-header-rad-scheduler-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style TargetType=\"Label\" x:Key=\"HeaderLabelStyle\">\n            <Setter Property=\"TextColor\" Value=\"#674BB2\" />\n            <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n            <Setter Property=\"HorizontalOptions\" Value=\"Center\"/>\n        </Style>\n        <ControlTemplate x:Key=\"CustomSchedulerMobileTemplate\">\n            <Grid RowDefinitions=\"Auto, *\">\n                <telerik:RadBorder Style=\"{TemplateBinding ActualHeaderBorderStyle}\">\n                    <Grid ColumnDefinitions=\"*, Auto\">\n                        <Label Style=\"{TemplateBinding ActualHeaderLabelStyle}\" />\n                        <Button Grid.Column=\"1\"\n                                Style=\"{TemplateBinding ActualTodayButtonStyle}\"\n                                IsVisible=\"{TemplateBinding IsTodayButtonVisible}\"\n                                Command=\"{TemplateBinding TodayCommand}\" />\n                    </Grid>\n                </telerik:RadBorder>\n                <telerik:RadSchedulerContent x:Name=\"PART_SchedulerContent\"\n                                             Grid.Row=\"1\"\n                                             IsClippedToBounds=\"True\" />\n            </Grid>\n        </ControlTemplate>\n    </ResourceDictionary>\n</ContentPage.Resources>\n\n<telerik:RadScheduler x:Name=\"scheduler\" \n                       HeaderLabelStyle=\"{StaticResource HeaderLabelStyle}\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition Title=\"Month Schedule\" \n                               HeaderTextFormat=\"{}{0:MMM yyyy}\" />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionView ViewModel in C#\nDESCRIPTION: C# ViewModel implementation that provides the data source for the CollectionView. It creates a collection of DataModel objects with sample names.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<DataModel>\n        {\n            new DataModel { Name = \"Freda Curtis\" },\n            new DataModel { Name = \"Jeffery Francis\" },\n            new DataModel { Name = \"Eva Lawson\" },\n            new DataModel { Name = \"Emmett Santos\" },\n            new DataModel { Name = \"Theresa Bryan\" },\n            new DataModel { Name = \"Jenny Fuller\" },\n            new DataModel { Name = \"Terrell Norris\" },\n            new DataModel { Name = \"Eric Wheeler\" },\n            new DataModel { Name = \"Julius Clayton\" },\n            new DataModel { Name = \"Alfredo Thornton\" },\n            new DataModel { Name = \"Roberto Romero\" },\n            new DataModel { Name = \"Orlando Mathis\" },\n            new DataModel { Name = \"Eduardo Thomas\" },\n            new DataModel { Name = \"Harry Douglas\" },\n            new DataModel { Name = \"Parker Blanton\" }\n        };\n    }\n\n    public ObservableCollection<DataModel> Items { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RangeSlider with RangeChanging Event in XAML\nDESCRIPTION: This snippet shows how to define a RangeSlider control in XAML with properties set for minimum, maximum, range start, range end, and the RangeChanging event handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"0\"\n                        Maximum=\"100\"\n                        RangeStart=\"25\"\n                        RangeEnd=\"65\"\n                        RangeChanging=\"RangeSlider_RangeChanging\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel and Business Object for DataGrid in C#\nDESCRIPTION: This code snippet shows how to define a ViewModel and a Person class to be used as the data source for the DataGrid. It creates a collection of Person objects with Name and Age properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/template-column.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        var source = new ObservableCollection<Person>();\n        source.Add(new Person() { Name = \"Kiko\", Age = 23 });\n        source.Add(new Person() { Name = \"Jerry\", Age = 23 });\n        source.Add(new Person() { Name = \"Ethan\", Age = 51 });\n        source.Add(new Person() { Name = \"Isabella\", Age = 23 });\n        source.Add(new Person() { Name = \"Joshua\", Age = 51 });\n        source.Add(new Person() { Name = \"Logan\", Age = 51 });\n        source.Add(new Person() { Name = \"Aaron\", Age = 23 });\n\n        this.Data = source;\n    }\n\n    public ObservableCollection<Person> Data { get; set; }\n}\n\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataForm Control\nDESCRIPTION: Shows how to define a RadDataForm control in both XAML and C#. The control is configured with a ViewModel binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-gettingstarted-xaml'/>\n```\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-gettingstarted-csharp'/>\n```\n\n----------------------------------------\n\nTITLE: Basic Docking in .NET MAUI DockLayout\nDESCRIPTION: This snippet demonstrates how to dock UI elements to different sides (Left, Top, Right, Bottom) of a DockLayout control. The arrangement of elements depends on their order in the XAML definition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/docking.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDockLayout x:Name=\"dockLayout\">\n    <Label Text=\"Left\" telerik:RadDockLayout.Dock=\"Left\" WidthRequest=\"60\" BackgroundColor=\"LightPink\" />\n    <Label Text=\"Top\" telerik:RadDockLayout.Dock=\"Top\" HeightRequest=\"60\" BackgroundColor=\"LightGreen\" />\n    <Label Text=\"Right\" telerik:RadDockLayout.Dock=\"Right\" WidthRequest=\"60\" BackgroundColor=\"LightBlue\" />\n    <Label Text=\"Bottom\" telerik:RadDockLayout.Dock=\"Bottom\" BackgroundColor=\"LightYellow\" />\n</telerik:RadDockLayout>\n```\n\n----------------------------------------\n\nTITLE: Covering Flyout Menu with BusyIndicator in .NET MAUI\nDESCRIPTION: This code demonstrates how to define a custom FlyoutContent in a .NET MAUI Shell application, integrating a BusyIndicator for seamless user experience. Dependencies include .NET MAUI and Telerik's RadBusyIndicator. The BusyIndicator is configured to become visible during loading processes in the Flyout area and is implemented via XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/extend-busyindicator-coverage-flyout-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Shell xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       xmlns:local=\"clr-namespace:FullShellCoverage\"\n       xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n       x:Class=\"FullShellCoverage.AppShell\"\n       Title=\"AppShell\"\n       FlyoutBehavior=\"Locked\"\n       FlyoutIsPresented=\"True\"\n       x:Name=\"shell\">\n\n    <ShellContent Title=\"Home\"\n                  ContentTemplate=\"{DataTemplate local:MainPage}\"\n                  Route=\"MainPage\">\n        <ShellContent.Icon>\n            <FontImageSource\n                Glyph=\"🏠\"\n                Color=\"DodgerBlue\"\n                Size=\"18\"/>\n        </ShellContent.Icon>\n    </ShellContent>\n\n    <Shell.FlyoutContent>\n        <Grid>\n            <CollectionView BindingContext=\"{x:Reference shell}\"\n                            IsGrouped=\"True\"\n                            ItemsSource=\"{Binding FlyoutItems}\">\n                <CollectionView.ItemTemplate>\n                    <DataTemplate>\n                        <Grid ColumnDefinitions=\"0.2*,0.8*\">\n                            <Image Source=\"{Binding Icon}\"\n                                   Margin=\"5\"\n                                   HeightRequest=\"45\" />\n                            <Label Grid.Column=\"1\"\n                                   Text=\"{Binding Title}\"\n                                   VerticalTextAlignment=\"Center\" />\n                        </Grid>\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n\n            <telerik:RadBusyIndicator x:Name=\"GlobalBusyIndicator\"\n                                      IsVisible=\"False\"\n                                      AnimationContentHeightRequest=\"100\"\n                                      AnimationContentWidthRequest=\"100\"\n                                      AnimationContentColor=\"{DynamicResource PrimaryColor}\"\n                                      BackgroundColor=\"#CCDCDCDC\"/>\n        </Grid>\n    </Shell.FlyoutContent>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Adding NumericInput Control in XAML\nDESCRIPTION: This snippet demonstrates how to define a NumericInput control within your .NET MAUI application's XAML file. It assumes that the Telerik namespace has been added and the Telerik controls are registered.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n <snippet id='numericinput-getting-started-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Basic DataGridDateColumn Configuration in XAML\nDESCRIPTION: Demonstrates basic setup of a DataGridDateColumn with custom formatting and cell styling. Shows how to set the PropertyName, HeaderText, and format the date display with custom colors and font sizes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/date-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridDateColumn PropertyName=\"Established\"\n                            HeaderText=\"Date Established\"\n                            CellContentFormat=\"{}{0: ddd-d-MMM-yyyy}\">\n    <telerik:DataGridDateColumn.CellContentStyle>\n        <telerik:DataGridTextCellStyle TextColor=\"LightBlue\"\n                                       FontSize=\"18\"\n                                       SelectedTextColor=\"Blue\" />\n    </telerik:DataGridDateColumn.CellContentStyle>\n</telerik:DataGridDateColumn>\n```\n\n----------------------------------------\n\nTITLE: ChatPicker Overlay XAML Definition in .NET MAUI\nDESCRIPTION: This snippet shows the XAML definition for placing a RadChatPicker inside the Chat control, but not as a direct part of the conversation. This approach involves creating a RadChatPicker instance and assigning it to the Picker property of the Chat control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='chat-pickeroverlay-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ListView Command in C#\nDESCRIPTION: Creates a custom command class that inherits from ListViewCommand to handle the ItemTap action. It demonstrates overriding CanExecute and Execute methods.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass CustomItemTapCommand : ListViewCommand\\n{\\n    public CustomItemTapCommand()\\n    {\\n        Id = CommandId.ItemTap;\\n    }\\n\\n    public override bool CanExecute(object parameter)\\n    {\\n        var context = parameter as ItemTapCommandContext;\\n        return true;\\n    }\\n\\n    public override void Execute(object parameter)\\n    {\\n        var context = parameter as ItemTapCommandContext;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Club Class Model in C#\nDESCRIPTION: Sample class definition showing properties that will be automatically mapped to DataGrid columns.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Club\n{ \n    public string Name { get; set; }\n    public DateTime Established { get; set; }\n    public bool IsChampion { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text in Telerik UI DataGrid Using .NET MAUI\nDESCRIPTION: This snippet demonstrates how to use a CellTemplateColumn in a Telerik UI for .NET MAUI DataGrid to highlight text based on a search input. The setup includes a RadEntry for initiating the search and a DataGridTextColumn with a cell template containing a RadHighlightLabel. The HighlightText property is bound to the search input, and the UnformattedText is bound to a data source property. Inputs include user search text, and highlighted outputs show text matches within grid cells.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-text-highlight.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\\\"searchEntry\\\"\n                  HeightRequest=\\\"50\\\"\n                  WidthRequest=\\\"300\\\"\n                  Placeholder=\\\"Search Entry\\\"/>\n<telerik:RadDataGrid x:Name=\\\"dataGrid\\\" AutomationId=\\\"dataGrid\\\" AutoGenerateColumns=\\\"False\\\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\\\"Country\\\" HeaderText=\\\"HighlightedLabel\\\">\n            <telerik:DataGridTextColumn.CellContentTemplate>\n                <DataTemplate>\n                    <telerik:RadHighlightLabel UnformattedText=\\\"{Binding Country}\\\"\n                                               HighlightText=\\\"{Binding Source={x:Reference searchEntry}, Path=Text}\\\"\n                                               HighlightTextColor=\\\"Red\\\"/>\n                </DataTemplate>\n            </telerik:DataGridTextColumn.CellContentTemplate>\n        </telerik:DataGridTextColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding DateTimePicker Control to a XAML Page\nDESCRIPTION: Demonstrates how to add the RadDateTimePicker control to a XAML page. This is the basic declaration of the control with a name for referencing it in code-behind.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker x:Name=\"dateTimePicker\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with Row Details Template in XAML\nDESCRIPTION: XAML definition for the RadDataGrid with a row details template, binding to the Items and ExpandedItems collections, and registering the custom ToggleRowDetailsButtonTap command for handling row expansion tracking.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/detect-row-detail-expansion-collapse-maui-datagrid.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <DataTemplate x:Key=\"TemplateForRowDetails\">\n            <VerticalStackLayout BackgroundColor=\"#F2EFF9\"\n                Padding=\"12\">\n                <Label Text=\"{Binding Country}\" />\n                <Label Text=\"{Binding Capital}\" />\n                <Label Text=\"{Binding Details}\" />\n            </VerticalStackLayout>\n        </DataTemplate>\n    </ResourceDictionary>\n</ContentPage.Resources>\n<Grid>\n    <telerik:RadDataGrid x:Name=\"dataGrid\"\n                            ItemsSource=\"{Binding Items}\"\n                            ExpandedRowDetails=\"{Binding ExpandedItems}\"\n                            AutoGenerateColumns=\"False\"\n                            RowDetailsTemplate=\"{StaticResource TemplateForRowDetails}\">\n        <telerik:RadDataGrid.Columns>\n            <telerik:DataGridToggleRowDetailsColumn />\n            <telerik:DataGridTextColumn PropertyName=\"Country\" />\n        </telerik:RadDataGrid.Columns>\n        <telerik:RadDataGrid.Commands>\n            <local:MyToggleRowDetailsButtonTapCommand />\n        </telerik:RadDataGrid.Commands>\n    </telerik:RadDataGrid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing DisplayAttribute for Localization in .NET MAUI DataForm\nDESCRIPTION: This snippet demonstrates how to use DisplayAttribute for localizing property names in a DataForm model. It shows how to reference resource files from both the same project and a different project by setting the Name and ResourceType properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/localize-dataform-display-attributes-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Uses resx file from the same project - MauiApp24\n[Required]\n[Display(Name = nameof(MyResources.FirstName), ResourceType = typeof(MyResources))]\npublic string FirstName\n{\n    get => this.firstName;\n    set => this.UpdateValue(ref this.firstName, value);\n}\n\n// Uses a resx file from a different project - MauiLib1\n[Required]\n[Display(Name = nameof(ResourceTest.LastName), ResourceType = typeof(ResourceTest))]\npublic string LastName\n{\n    get => this.lastName;\n    set => this.UpdateValue(ref this.lastName, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color and Thickness in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to use the BorderColor and BorderThickness properties of the Border control in .NET MAUI. It allows you to specify the visual appearance of a Border by defining its color and the thickness of its edges. The BorderThickness can be set to different values for each side. Make sure to import the required Microsoft.Maui namespace for using Thickness.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nvar border = new Border()\n{\n    BorderColor = Colors.Red,\n    BorderThickness = new Thickness(1, 2, 3, 4)\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGrid Styles in XAML Declaration\nDESCRIPTION: Example showing how to directly apply custom styles to a RadDataGrid by modifying the AlternateRowBackgroundStyle and SelectionStyle in the control's XAML declaration. This approach is simpler but less scalable for multiple applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-component-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" \n                 ItemsSource=\"{Binding Clubs}\" >\n    <telerik:RadDataGrid.BindingContext>\n        <local:ViewModel />\n    </telerik:RadDataGrid.BindingContext>\n\n    <!--Adding custom styles for alternating rows. The source file is `\\TelerikTheming\\Styles\\DataGrid.xaml`.-->\n    <telerik:RadDataGrid.AlternateRowBackgroundStyle>\n        <Style TargetType=\"telerik:DataGridAlternateRowBackgroundAppearance\">\n            <Setter Property=\"BackgroundColor\" Value=\"#F2FAF9\" />\n        </Style>\n    </telerik:RadDataGrid.AlternateRowBackgroundStyle>\n\n    <!--Adding custom styles for the selected content. The source file is `\\TelerikTheming\\Styles\\DataGrid.xaml`.-->\n    <telerik:RadDataGrid.SelectionStyle>\n        <Style TargetType=\"telerik:DataGridSelectionAppearance\">\n            <Setter Property=\"BackgroundColor\" Value=\"{DynamicResource RadPrimaryColor}\" />\n            <Setter Property=\"BorderColor\" Value=\"{DynamicResource RadBorderColor}\" />\n            <Setter Property=\"BorderThickness\" Value=\"1\" />\n        </Style>\n    </telerik:RadDataGrid.SelectionStyle>\n\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Code demonstrating how to register Telerik controls in a .NET MAUI application by using the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Integrating PDF Viewer Events Handler in .NET MAUI\nDESCRIPTION: Shows the declaration and integration of event handlers for the PageElementsLoaded event in the Telerik PDF Viewer for .NET MAUI. It includes parameter details such as the sender and event arguments. This snippet is essential for developers who want to alter page content dynamically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-page-elements-loaded' />\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel with Data Collection in C#\nDESCRIPTION: This ViewModel snippet in C# illustrates how to initialize a collection of Data objects, each object representing a data row within the DataGrid, setting properties such as Value, IsEnabled, Date, and Text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-conditional-cell-editing.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n    public class ViewModel\n    {\n        public List<Data> Source { get; set; } = new List<Data>\n        {\n            new Data {Value =\"One\", IsEnabled=true, Date=new DateTime(2021,12,12), Text=\"Text 1\"},\n            new Data {Value =\"Two\", IsEnabled=false, Date=new DateTime(2021,12,13), Text=\"Text 2\"},\n            ...\n        };\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Type for AutoComplete\nDESCRIPTION: Demonstrates how to set the keyboard type that will be displayed when the AutoComplete control is focused.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete Keyboard=\"Numeric\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up RadTreeView instance in XAML\nDESCRIPTION: This snippet demonstrates how to set up a RadTreeView instance in XAML, including the telerik namespace declaration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='treeview-getting-started-xaml' />\n\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Typing Indicator in XAML\nDESCRIPTION: This snippet demonstrates how to add a TypingIndicator to the RadChat control in XAML. Setting the TypingIndicator property of the RadChat control adds the indicator to the chat interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/typing-indicator.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chat-typingindicator-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Configuring RadScheduler XAML with Event Handlers\nDESCRIPTION: XAML configuration for RadScheduler that sets up MonthDayTapped and DialogOpening event handlers with MonthViewDefinition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/rad-scheduler-disable-dates-outside-current-month.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\"\n                      MonthDayTapped=\"scheduler_MonthDayTapped\"\n                      DialogOpening=\"scheduler_DialogOpening\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageLoaded Event Handler\nDESCRIPTION: Shows how to handle the ImageLoaded event to perform crop operations when an image is loaded. The example demonstrates calculating custom crop bounds based on image size.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/loading-image.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnImageLoaded(object sender, ImageLoadedEventArgs eventArgs)\n{\n    var imageSize = eventArgs.ImageSize;\n    var cropCommand = this.imageEditor.CropInteractiveCommand;\n    var cropCommandContext = new CropCommandContext\n    {\n        AspectRatio = AspectRatio.Square,\n        Bounds = new Rectangle\n        {\n            X = imageSize.Width * 0.25,\n            Y = imageSize.Height * 0.25,\n            Width = imageSize.Width * 0.5,\n            Height = imageSize.Height * 0.5\n        },\n        Geometry = new RadEllipseGeometry\n        {\n            Center = new Point(0.5, 0.5),\n            Radius = new Size(0.5, 0.5)\n        }\n    };\n\n    if (cropCommand.CanExecute(cropCommandContext))\n    {\n        cropCommand.Execute(cropCommandContext);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Group Headers in C# - .NET MAUI\nDESCRIPTION: This C# snippet illustrates how to enable the sticky group headers programmatically by setting the IsGroupHeaderSticky property of a RadListView instance to true.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/sticky-group-header.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar listView = new RadListView();\nlistView.IsGroupHeaderSticky = true;\n```\n\n----------------------------------------\n\nTITLE: Centering Telerik Popup in XAML with .NET MAUI\nDESCRIPTION: Demonstrates how to create a centered Popup control in a .NET MAUI application using Telerik UI components. The code shows attaching a RadPopup to a ContentPage and setting its Placement property to Center.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/centering-popup-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:YourNamespace\"\n             x:Class=\"YourNamespace.MainPage\">\n\n    <!-- Content of the page -->\n    <ScrollView>\n        <VerticalStackLayout>\n            <!-- Your page content -->\n            <Button Text=\"Open Popup\" Clicked=\"Button_Clicked\" />\n        </VerticalStackLayout>\n    </ScrollView>\n\n    <!-- Attach the Popup to the page -->\n    <telerik:RadPopup.Popup>\n        <telerik:RadPopup x:Name=\"MyPopup\" Placement=\"Center\">\n            <!-- Your Popup content -->\n            <local:PopupContentView />\n        </telerik:RadPopup>\n    </telerik:RadPopup.Popup>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining the Button in XAML for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define a Button in XAML for use with the .NET MAUI framework, enabling command execution when clicked. No additional dependencies are specified beyond .NET MAUI itself. The Button can trigger commands using defined parameters.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/command.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Click Me\"\n        Command=\"{Binding YourCommand}\"\n        CommandParameter=\"{Binding YourParameter}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ListView PropertySortDescriptor in XAML\nDESCRIPTION: Demonstrates how to add a PropertySortDescriptor to a ListView to enable sorting by a specific property with configurable sort order\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/sorting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-features-sorting-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Using Distinct Values Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet shows how to use the DistinctValuesFilterDescriptor in XAML, allowing filtering based on distinct property values. The PropertyName and Value are required for this filter descriptor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DistinctValuesFilterDescriptor PropertyName=\"Country\" Value=\"Austria\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing PDF Viewer in C#\nDESCRIPTION: This snippet demonstrates how to create a RadPdfViewer object in C# code. It showcases the basic instantiation of the PDF Viewer control, which is the first step in adding it to a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"var pdfViewer = new RadPdfViewer();\"\n```\n\n----------------------------------------\n\nTITLE: Applying Label Formatter on DateTimeContinuousAxis in XAML\nDESCRIPTION: This snippet shows how to apply a custom label formatter to a DateTimeContinuousAxis, rotating its labels and setting the MajorStepUnit to 'Day'. It uses the DateLabelFormatter to customize label text according to specific rules.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n                                     MajorStepUnit=\"Day\">\n    <telerik:DateTimeContinuousAxis.LabelFormatter>\n        <local:DateLabelFormatter />\n    </telerik:DateTimeContinuousAxis.LabelFormatter>\n</telerik:DateTimeContinuousAxis>\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace for Columns - XAML\nDESCRIPTION: This snippet shows the addition of the Telerik namespace required for defining custom columns in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" -->\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Swipe Completion in C#\nDESCRIPTION: Configures the action to be taken when a user completes a swipe gesture, modifying or removing the data item based on swipe direction and length.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/cell-swipe.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void listView_ItemSwipeCompleted(object sender, Telerik.Maui.Controls.ListView.ItemSwipeCompletedEventArgs e)\n{\n    var listView = (Telerik.Maui.Controls.RadListView)sender;\n    var item = (Item)e.Item;\n\n    if (e.Offset < 0)\n    {\n        if (Math.Abs(e.Offset) > this.listView.SwipeThreshold)\n        {\n            this.VM.Source.Remove(item);\n        }\n    }\n    else\n    {\n        if (Math.Abs(e.Offset) > this.listView.SwipeThreshold)\n        {\n            item.Name = \"Updated \" + item.Name;\n        }\n    }\n\n    listView.EndItemSwipe();\n}\n```\n\n----------------------------------------\n\nTITLE: Chart ToolTip Behavior Implementation in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to implement the ChartTooltipBehavior within a RadCartesianChart. It configures the chart with data binding, axes, series, and sets the TriggerMode of the tooltip behavior to Tap. The chart displays sales data over time with the tooltip providing details on tap.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/tooltip-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n```XAML\n<telerik:RadCartesianChart PaletteName=\"Light\"\n                                Zoom=\"2, 1\">\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel/>\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n                                             MajorStepUnit=\"Day\"\n                                             PlotMode=\"OnTicks\"\n                                             LabelFormat=\"dd MMM\"\n                                             MajorStep=\"20\"\n                                             ShowLabels=\"True\"/>\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Date\"\n                                 DisplayName=\"Sales\"\n                                 ItemsSource=\"{Binding Data}\"/>\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.ChartBehaviors>\n        <telerik:ChartTooltipBehavior TriggerMode=\"Tap\" />\n     </telerik:RadCartesianChart.ChartBehaviors>\n</telerik:RadCartesianChart>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting RadNumericMaskedEntry with Currency Mask in XAML\nDESCRIPTION: This snippet demonstrates how to set the `RadNumericMaskedEntry` with the `Currency` value in XAML. It uses the `Mask` property to define the format of the expected input.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask-types/numeric.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='numericmaskedentry-mask-c-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining RadDataGrid for ExpandoObject Binding in .NET MAUI\nDESCRIPTION: XAML code to define a RadDataGrid control for binding to an ExpandoObject. It sets up auto-generated columns and binds to the Items property of the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/dynamic-data.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                      ItemsSource=\"{Binding Items}\"\n                      AutoGenerateColumns=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing RadCollectionView with Manual LoadOnDemand Template\nDESCRIPTION: XAML implementation of RadCollectionView with a ManualLoadOnDemandTemplate that customizes the appearance of the manual loading button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-loadondemand-manual-template' />\n```\n\n----------------------------------------\n\nTITLE: Defining RadPieChart with Donut Series in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadPieChart with a Donut Series. It includes setting the ValueBinding, RadiusFactor, and InnerRadiusFactor properties. This setup is crucial for displaying data in a donut chart format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/donut-series.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-donut-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting SelectionMode Property in XAML for .NET MAUI DataGrid\nDESCRIPTION: Demonstrates how to set the SelectionMode property to 'Multiple' in XAML for the Telerik UI for .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n\t\t\t\t\t SelectionMode=\"Multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Using ItemPicker in .NET MAUI Chat\nDESCRIPTION: This code snippet demonstrates how to utilize the `ItemPicker` within the `RadChatPicker` control, allowing users to select items from a predefined list. It highlights the essential properties of the `ItemPickerContext` such as `ItemsSource`, `SelectionMode`, `SelectedItems`, and `SelectedItem` for effective item selection functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/itempicker.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<snippet id='chat-chatpicker-itempicker' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Special Slots ViewModel in C#\nDESCRIPTION: Creates a ViewModel class that defines special slots for rest hours during weekdays using the Slot object collection. The slots are configured with specific start and end times, and a recurrence pattern for weekdays.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/specialslots/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-specialslots-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing SourcePasswordNeeded Event Handler in C# for .NET MAUI PDF Viewer\nDESCRIPTION: Shows how to implement the event handler for the SourcePasswordNeeded event. This handler provides the password needed to decrypt and display the PDF document.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/password.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void pdfViewer_SourcePasswordNeeded(object sender, Telerik.Windows.Documents.Fixed.FormatProviders.Pdf.Import.PasswordNeededEventArgs e)\n{\n    e.Password = \"my_user_password_here\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MtouchInterpreter for iOS and MacCatalyst in .NET MAUI\nDESCRIPTION: XML configuration to enable the Mono interpreter for Telerik.Maui.Controls.dll on iOS and Mac Catalyst to prevent System.ExecutionEngineException when using dynamic objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/dynamic-data.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup Condition=\"'$(Configuration)|$(RuntimeIdentifier)'=='Release|maccatalyst-arm64'\">\n\t<MtouchInterpreter>-all,+Telerik.Maui.Controls.dll</MtouchInterpreter>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Business Model for DataForm\nDESCRIPTION: Shows the structure of a business model used with the DataForm. This model defines properties that will be displayed in the form.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class EditorsViewModel\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime BirthDate { get; set; }\n    public string Email { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GlobalPopup in AppShell\nDESCRIPTION: This snippet shows how to create a public property in the AppShell class to access the defined RadPopup instance, which allows other parts of the application to manipulate it easily.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-popup-irrespective-screen.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class AppShell : Shell\n{\n    public AppShell()\n    {\n        InitializeComponent();\n    }\n\n    public RadPopup GlobalPopup\n    {\n        get => this.MyPopup;\n        set => this.MyPopup = value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RadIPMaskedEntry in XAML\nDESCRIPTION: Define a Telerik UI MaskedEntry control configured for IP address input validation. This snippet demonstrates how to set up an IP mask for user input in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask-types/ip.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='ipmaskedentry-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Styles for Telerik MAUI Input Controls\nDESCRIPTION: XAML styles that can be applied to RadTextInput, RadAutoComplete, RadEntry and RadComboBox controls. The styles include visual state management for different states (Normal, Focused, MouseOver) and properties for colors, borders, and text formatting.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/implicit-style-input-controls.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n <Style TargetType=\"telerik:RadTextInput\" x:Key=\"text\">\n    <Setter Property=\"Padding\" Value=\"10,0,0,0\" />\n</Style>\n\n<Style TargetType=\"telerik:RadAutoComplete\">\n    <Setter Property=\"TextColor\" Value=\"LightGray\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n    <Setter Property=\"BorderBrush\" Value=\"#FF404040\" />\n    <Setter Property=\"PlaceholderColor\" Value=\"LightGray\" />\n    <Setter Property=\"BackgroundColor\" Value=\"#FF454545\" />\n    <Setter Property=\"TextInputStyle\" Value=\"{StaticResource text}\" />\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\" />\n                <VisualState Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadAutoComplete.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"MouseOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadAutoComplete.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"PointerOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadAutoComplete.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadAutoComplete.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n\n<Style TargetType=\"telerik:RadEntry\">\n    <Setter Property=\"TextColor\" Value=\"LightGray\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n    <Setter Property=\"MinimumHeightRequest\" Value=\"20\" />\n    <Setter Property=\"FontSize\" Value=\"14\" />\n    <Setter Property=\"BorderBrush\" Value=\"#FF404040\" />\n    <Setter Property=\"PlaceholderColor\" Value=\"LightGray\" />\n    <Setter Property=\"BackgroundColor\" Value=\"#FF454545\" />\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\" />\n                <VisualState Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadEntry.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadEntry.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadEntry.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"MouseOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadEntry.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadEntry.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadEntry.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n\n\n<Style TargetType=\"telerik:RadComboBox\">\n    <Setter Property=\"TextColor\" Value=\"LightGray\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n    <Setter Property=\"BorderBrush\" Value=\"#FF404040\" />\n    <Setter Property=\"PlaceholderColor\" Value=\"LightGray\" />\n    <Setter Property=\"BackgroundColor\" Value=\"#FF454545\" />\n    <Setter Property=\"TextInputStyle\" Value=\"{StaticResource text}\" />\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup Name=\"CommonStates\">\n                <VisualState Name=\"Normal\" />\n                <VisualState Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadComboBox.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadComboBox.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadComboBox.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"MouseOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadComboBox.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadComboBox.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadComboBox.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState Name=\"PointerOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerik:RadComboBox.BackgroundColor\" Value=\"#FF000000\" />\n                        <Setter Property=\"telerik:RadComboBox.BorderBrush\" Value=\"#FF99DF8E\" />\n                        <Setter Property=\"telerik:RadComboBox.BorderThickness\" Value=\"1\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documents from File - C#\nDESCRIPTION: This snippet shows how to visualize a PDF document from a file located on a device by passing the file path to the Source property of the PDF Viewer control, including a method to validate file existence.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/display-documents.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nthis.pdfViewer.Source = filePath;\n\n// Validate that the file exists\nSystem.IO.File.OpenRead(filePath);\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for .NET MAUI CollectionView Item Swipe\nDESCRIPTION: ViewModel implementation that provides a collection of Person objects for the CollectionView. Includes a People property with sample data initialization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.People = new ObservableCollection<Person>();\n        for (int i = 0; i < 15; i++)\n        {\n            this.People.Add(new Person() { Name = \"Person \" + i });\n        }\n    }\n\n    public ObservableCollection<Person> People { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete Control in XAML\nDESCRIPTION: XAML code snippet for defining the AutoComplete control in a .NET MAUI application. It demonstrates how to set up the control with basic properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autocomplete\" />\n```\n\n----------------------------------------\n\nTITLE: ViewModel Definition\nDESCRIPTION: This C# snippet represents the ViewModel definition for the DataPager and DataGrid integration. It is responsible for providing the data to the DataGrid and handling any data-related logic. The Items property, which the DataGrid binds to, typically returns a collection of data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/paging.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Using DataForm Business Model in .NET MAUI\nDESCRIPTION: Defines a business model class to be used with the DataForm control. This model contains properties that will be automatically mapped to appropriate editors in the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class GettingStartedModel\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public double? Age { get; set; }\n    public bool? IsMarried { get; set; }\n    public DateTime? BirthDate { get; set; }\n    public TimeSpan? WorkStartTime { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Map control in XAML\nDESCRIPTION: Illustrates adding the Telerik Map control to the XAML layout. This allows users to create and configure the map interface in their .NET MAUI application using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n <snippet id='map-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Initializing RadLegend for Pie Chart in XAML\nDESCRIPTION: Demonstrates how to define a RadLegend control for a Pie Chart in .NET MAUI, showing the basic configuration for adding a legend to a chart\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/legend.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\nchart-features-piechart-legend-definition-xaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ListView with Cell Swipe Events in XAML\nDESCRIPTION: Sets up a ListView with cell swipe functionality, revealing content based on swipe direction and providing hints for swipe actions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/cell-swipe.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\" ItemsSource=\"{Binding Source}\" IsItemSwipeEnabled=\"True\" SwipeThreshold=\"20\" SwipeOffset=\"{OnPlatform 100, WinUI=280}\" SelectionMode=\"None\" ItemSwipeCompleted=\"listView_ItemSwipeCompleted\">\n    <telerik:RadListView.ItemTemplate>\n        <DataTemplate>\n            <telerik:ListViewTemplateCell>\n                <telerik:ListViewTemplateCell.View>\n                    <Grid Padding=\"{OnPlatform 16, WinUI=0}\">\n                        <Label Text=\"{Binding Name}\" VerticalOptions=\"Center\" />\n                    </Grid>\n                </telerik:ListViewTemplateCell.View>\n            </telerik:ListViewTemplateCell>\n        </DataTemplate>\n    </telerik:RadListView.ItemTemplate>\n    <telerik:RadListView.ItemSwipeContentTemplate>\n        <DataTemplate>\n            <Grid>\n                <Label Text=\"Delete item\" HorizontalTextAlignment=\"Start\" VerticalTextAlignment=\"Center\" BackgroundColor=\"#FFF1F1F1\" Padding=\"16,0\" />\n                <Label Text=\"Edit item\" HorizontalTextAlignment=\"End\" VerticalTextAlignment=\"Center\" BackgroundColor=\"#FFF1F1F1\" Padding=\"16,0\" />\n            </Grid>\n        </DataTemplate>\n    </telerik:RadListView.ItemSwipeContentTemplate>\n</telerik:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DataTemplateSelector for Scheduler Appointments in C#\nDESCRIPTION: This snippet demonstrates how to create a custom DataTemplateSelector class for styling different types of appointments in the Telerik UI for .NET MAUI Scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/appointment-template.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppointmentTemplateSelector : DataTemplateSelector\n{\n    public DataTemplate DefaultAppointmentTemplate { get; set; }\n    public DataTemplate BusinessAppointmentTemplate { get; set; }\n    public DataTemplate HomeAppointmentTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        var appointment = item as Appointment;\n\n        if (appointment.Color == Colors.Green)\n        {\n            return this.BusinessAppointmentTemplate;\n        }\n        else if (appointment.Color == Colors.DarkOrange)\n        {\n            return this.HomeAppointmentTemplate;\n        }\n        else\n        {\n            return this.DefaultAppointmentTemplate;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for .NET MAUI CollectionView Selection\nDESCRIPTION: This C# code implements a ViewModel class that manages the data and selection for the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private ObservableCollection<CityModel> cities;\n    private CityModel selectedCity;\n\n    public ObservableCollection<CityModel> Cities\n    {\n        get => this.cities;\n        set => this.UpdateValue(ref this.cities, value);\n    }\n\n    public CityModel SelectedCity\n    {\n        get => this.selectedCity;\n        set => this.UpdateValue(ref this.selectedCity, value);\n    }\n\n    public ViewModel()\n    {\n        this.Cities = new ObservableCollection<CityModel>\n        {\n            new CityModel { Name = \"Tokyo\", Country = \"Japan\" },\n            new CityModel { Name = \"New York\", Country = \"USA\" },\n            new CityModel { Name = \"London\", Country = \"England\" },\n            new CityModel { Name = \"Madrid\", Country = \"Spain\" },\n            new CityModel { Name = \"Cape Town\", Country = \"South Africa\" }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionChanged Event Handler for RadTabView in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to implement the SelectionChanged event handler for RadTabView to detect which tab is selected. It shows how to access both the SelectedIndex and SelectedItem properties to identify the selected tab and perform actions accordingly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/tabview-net-maui-handle-selection-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void TabView_OnSelectionChanged(object? sender, EventArgs e)\n{\n    // Cast the sender to RadTabView to access its properties\n    var tabView = sender as Telerik.Maui.Controls.RadTabView;\n\n    if (tabView != null)\n    {\n        // Access the selected tab's index if required\n        var selectedTabIndex = tabView.SelectedIndex;\n\n        // Access the selected tab item directly if required\n        var selectedTabItem = tabView.SelectedItem as TabViewItem;\n\n        // Perform actions based on the selected tab's index or the tab item itself\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Recurring Daily Appointment in .NET MAUI Scheduler\nDESCRIPTION: This snippet demonstrates how to create a recurring appointment that occurs every weekday with a limit of 10 occurrences. It configures a RecurrencePattern with Daily frequency and assigns it to the appointment's RecurrenceRule property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/recurrence/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar appointment = new Appointment()\n{\n    Subject = \"Daily appointment\",\n    Start = date.AddHours(11),\n    End = date.AddHours(11).AddMinutes(30)\n};\n\nvar pattern = new RecurrencePattern()\n{\n    Frequency = RecurrenceFrequency.Daily,\n    DaysOfWeekMask = RecurrenceDays.WeekDays,\n    MaxOccurrences = 10\n};\n\nappointment.RecurrenceRule = new RecurrenceRule(pattern);\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Custom Templates and Keyboard Support in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a ComboBox with custom item and selected item templates that properly support keyboard navigation. The example includes required visual states (MouseOver and Highlighted) within RadComboBoxItem containers to ensure keyboard interactions work correctly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/keyboard-support.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox ItemsSource=\"{Binding Items}\" \n                     DisplayMemberPath=\"Name\" \n                     x:Name=\"combo\"\n                     Placeholder=\"Select City\">\n    <telerik:RadComboBox.ItemTemplate>\n        <DataTemplate>\n            <telerik:RadComboBoxItem>\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\"/>\n                        <VisualState x:Name=\"MouseOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\"/>\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState Name=\"Highlighted\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateManager.VisualStateGroups>\n                <Label Text=\"{Binding Name}\"\n                       Padding=\"8, 7, 0, 7\"\n                       TextColor=\"Black\"/>\n            </telerik:RadComboBoxItem>\n        </DataTemplate>\n    </telerik:RadComboBox.ItemTemplate>\n    <telerik:RadComboBox.SelectedItemTemplate>\n        <DataTemplate>\n            <telerik:RadComboBoxItem>\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\"/>\n                        <VisualState x:Name=\"MouseOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\"/>\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState Name=\"Highlighted\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightCoral\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateManager.VisualStateGroups>\n                <VerticalStackLayout>\n                    <Label Text=\"{Binding Name}\"\n                           Padding=\"8, 7, 0, 7\"\n                           TextColor=\"Black\"/>\n                    <Label Text=\"{Binding Population}\"\n                           FontSize=\"12\"\n                           Padding=\"8, 7, 0, 7\"/>\n                </VerticalStackLayout>\n            </telerik:RadComboBoxItem>\n        </DataTemplate>\n    </telerik:RadComboBox.SelectedItemTemplate>\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: Accessing Formatted Cell Values in MAUI DataGrid using C#\nDESCRIPTION: This snippet demonstrates how to access and utilize the formatted string values of DataGrid cells via the `GetValueForInstance` method. Dependencies include a properly instantiated DataGrid in a MAUI application. The function iterates through DataGrid items and columns, extracting the formatted value via `GetValueForInstance`, which considers data converters and formats. Requires DataGrid for MAUI version 7.1.0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-access-formatted-cell-values.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void Grid_Loaded(object sender, System.EventArgs e)\n{\n    foreach (DataItem item in this.grid.GetDataView().Items)\n    {\n        foreach (var column in this.grid.Columns)\n        {\n            var cellValue = column.GetValueForInstance(item);\n            // Output or use the cellValue as needed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TrackBall ViewModel in C#\nDESCRIPTION: Defines a ViewModel that initializes observable collections of categorical data, which are used as the data source for the chart. The ViewModel includes methods to provide mock data for demonstration purposes. It requires a reference to System.Collections.ObjectModel for using ObservableCollection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/trackball-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data1 { get; set; }\n    public ObservableCollection<CategoricalData> Data2 { get; set; }\n\n    public ViewModel()\n    {\n        this.Data1 = GetCategoricalData1();\n        this.Data2 = GetCategoricalData2();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData1()\n    {\n        var data = new ObservableCollection<CategoricalData>  {\n        new CategoricalData { Category = \"Greenings\", Value = 52 },\n        new CategoricalData { Category = \"Perfecto\", Value = 60 },\n        new CategoricalData { Category = \"NearBy\", Value = 77 },\n        new CategoricalData { Category = \"Family\", Value = 50 },\n        new CategoricalData { Category = \"Fresh\", Value = 56 },\n    };\n        return data;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData2()\n    {\n        var data = new ObservableCollection<CategoricalData>  {\n        new CategoricalData { Category = \"Greenings\", Value = 33 },\n        new CategoricalData { Category = \"Perfecto\", Value = 88 },\n        new CategoricalData { Category = \"NearBy\", Value = 61 },\n        new CategoricalData { Category = \"Family\", Value = 94 },\n        new CategoricalData { Category = \"Fresh\", Value = 72 },\n    };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Segments Programmatically\nDESCRIPTION: Shows how to disable a specific segment using the SetSegmentEnabled method in C#.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/disable-segment.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='segmentcontrol-disablesegment-setsegmentenabled' />\n```\n\n----------------------------------------\n\nTITLE: Setting up ItemsSource for DataGrid\nDESCRIPTION: Shows how to configure the ItemsSource property to populate the DataGrid with data\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-template.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-items-source'/>\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Message for RegexMaskedEntry\nDESCRIPTION: This snippet shows how to define a custom validation error message for the RegexMaskedEntry in .NET MAUI.  When the input doesn't match the specified regular expression, the `ValidationErrorMessage` will be displayed. This is typically used within a XAML context.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='regexmaskedentry-validationerrormessage-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Style in DataGrid with C# using VisualStateManager\nDESCRIPTION: This C# snippet demonstrates how to programmatically define visual states for a Label control, specifically targeting the PointerOver state to implement hover effects.  The code adds a VisualStateGroup named \"CommonStates\" containing Normal, Disabled, and PointerOver states.  When the mouse hovers over the label, the PointerOver state changes the background and text color, providing a visual indication of the hover interaction. 'REFERENCE_TO_YOUR_LABEL' should be replaced with the actual Label instance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-apply-hover-style-decorationstyle-cellcontenttemplate.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar myLabel = REFERENCE_TO_YOUR_LABEL;\n\nVisualStateManager.GetVisualStateGroups(myLabel).Add(new VisualStateGroup\n{\n\tName = \"CommonStates\",\n\tStates =\n\t{\n\t\tnew VisualState\n\t\t{\n\t\t\tName = \"Normal\",\n\t\t\tSetters =\n\t\t\t{\n\t\t\t\tnew Setter { Property = Label.BackgroundColorProperty, Value = Colors.Lime }\n\t\t\t}\n\t\t},\n\t\tnew VisualState\n\t\t{\n\t\t\tName = \"Disabled\",\n\t\t\tSetters =\n\t\t\t{\n\t\t\t\tnew Setter { Property = Label.BackgroundColorProperty, Value = Colors.Pink }\n\t\t\t}\n\t\t},\n\t\t// TAKEAWAY: This is the PointerOver state that is invoked during hover\n\t\tnew VisualState\n\t\t{\n\t\t\tName = \"PointerOver\",\n\t\t\tSetters =\n\t\t\t{\n\t\t\t\tnew Setter { Property = Label.BackgroundColorProperty, Value = Colors.LightBlue },\n\t\t\t\tnew Setter { Property = Label.TextColorProperty, Value = Colors.Red }\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring RadChart for CartesianPlotBandAnnotation - XAML\nDESCRIPTION: This XAML snippet demonstrates how to declare the RadCartesianChart for the CartesianPlotBandAnnotation, including the binding context with the ViewModel and setting the plot band's thresholds and styles in the chart's annotations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\"\n                                      PlotMode=\"OnTicks\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis x:Name=\"verticalAxis\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Category\"\n                                 ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.Annotations>\n        <telerik:CartesianPlotBandAnnotation StrokeThickness=\"2\"\n                                                  Stroke=\"Green\"\n                                                  Fill=\"#2F66FF33\"\n                                                  Axis=\"{x:Reference verticalAxis}\"\n                                                  From=\"{Binding StartThreshold}\"\n                                                  To=\"{Binding EndThreshold}\" />\n    </telerik:RadCartesianChart.Annotations>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Accessing DataForm Commands in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to access and use the ValidateCommand, CommitCommand, and CancelCommand in a Telerik UI .NET MAUI DataForm. These commands are used for validation, committing changes, and canceling pending changes respectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nValidateCommand (ICommand)\nCommitCommand (ICommand)\nCancelCommand (ICommand)\n```\n\n----------------------------------------\n\nTITLE: Common Picker Localization Keys\nDESCRIPTION: Localization keys for shared picker components, including spinner headers, AM/PM selection, and action button text\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nPicker_AmPmSpinnerHeaderLabelText = \"AM/PM\"\nPicker_HourSpinnerHeaderLabelText = \"Hours\"\nPicker_MinuteSpinnerHeaderLabelText = \"Minutes\"\nPicker_SecondSpinnerHeaderLabelText = \"Seconds\"\nPicker_Popup_AcceptButtonText = \"Ok\"\nPicker_Popup_CancelButtonText = \"Cancel\"\nPicker_DropDown_AcceptButtonText = \"Ok\"\nPicker_DropDown_CancelButtonText = \"Cancel\"\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handler for Selection Changed\nDESCRIPTION: This snippet shows how to attach an event handler for the SelectionChanged event of the .NET MAUI Calendar, allowing custom logic to run upon selection changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-selection-changed-event'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Spinner Format in TimePicker (XAML)\nDESCRIPTION: This code snippet demonstrates setting the `SpinnerFormat` property of the `RadTimePicker`.  The specified format \"H:mm\" dictates how the time is displayed in the spinner controls when the picker is opened, using a 24-hour format for hours and minutes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker SpinnerFormat=\"H:mm\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox with Static Data in XAML\nDESCRIPTION: Example of defining a RadComboBox control with ItemsSource set to a static collection in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"comboBox\" Placeholder=\"Choose an option\">\n    <telerik:RadComboBox.ItemsSource>\n        <x:Array Type=\"{x:Type x:String}\">\n            <x:String>Option 1</x:String>\n            <x:String>Option 2</x:String>\n            <x:String>Option 3</x:String>\n        </x:Array>\n    </telerik:RadComboBox.ItemsSource>\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: Initializing MAUI TabView with Data Binding\nDESCRIPTION: Demonstrates setting up a TabView control with ItemsSource and ItemTemplate for dynamic item generation and data visualization\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\\<telerik:RadTabView ItemsSource=\"{Binding TabItems}\"\\>\n    \\<telerik:RadTabView.ItemTemplate\\>\n        \\<DataTemplate\\>\n            \\<Grid\\>\n                \\<Label Text=\"{Binding Title}\" /\\>\n                \\<Label Text=\"{Binding Content}\" /\\>\n            \\</Grid\\>\n        \\</DataTemplate\\>\n    \\</telerik:RadTabView.ItemTemplate\\>\n\\</telerik:RadTabView\\>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Model for CollectionView in C#\nDESCRIPTION: Defines a sample model class 'Group' with properties for group name and items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-grouptapcommand-model' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel and Data Model for DataGrid\nDESCRIPTION: Sample code showing the ViewModel implementation with observable collections for items and expanded items, along with a simple data model class containing country information and details for row expansion.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/detect-row-detail-expansion-collapse-maui-datagrid.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new ViewModel();\n    }\n}\n\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    public ViewModel()\n    {\n        var items = new ObservableCollection<Data>\n        {\n            new Data { Country = \"India\", Capital = \"New Delhi\" , Details = \"New Delhi is the capital of India and a part of the National Capital Territory of Delhi (NCT). New Delhi is the seat of all three branches of the Government of India, hosting the Rashtrapati Bhavan, Sansad Bhavan, and the Supreme Court.\"},\n            new Data { Country = \"South Africa\", Capital = \"Cape Town\", Details = \"Cape Town is South Africa's oldest city. It serves as the country's legislative capital, being the seat of the South African Parliament.It is the country's second-largest city (after Johannesburg) and the largest in the Western Cape.\"},\n            new Data { Country = \"Nigeria\", Capital = \"Abuja\" , Details = \"Abuja is the capital city of Nigeria. When it was decided to move the national capital from Lagos in 1976, a capital territory was chosen for its location near the centre of the country. The planned city is located in the centre of what is now the Federal Capital Territory.\" },\n            new Data { Country = \"Singapore\", Capital = \"Singapore\" , Details = \"Singapore is the capital city of the Republic of Singapore. It occupies the southern part of Singapore Island. Its strategic position on the strait between the Indian Ocean and South China Sea, complemented by its deepwater harbour, has made it the largest port in Southeast Asia.\" }\n        };\n\n        this.Items = items;\n\n        this.ExpandedItems = new ObservableCollection<Data>();\n    }\n\n    public ObservableCollection<Data> Items { get; set; }\n\n    public ObservableCollection<Data> ExpandedItems { get; set; }\n}\n\npublic class Data\n{\n    public string Country { get; set; }\n    public string Capital { get; set; }\n    public string Details { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Group Header Template (XAML)\nDESCRIPTION: This snippet defines a custom `GroupHeaderTemplate` as a `DataTemplate` within the page's Resources. The template is designed to visualize the hierarchical relationship between groups in the ListView by displaying the group header and potentially applying custom styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n \n```\n\n----------------------------------------\n\nTITLE: Updating Data in DataTable in C#\nDESCRIPTION: This snippet showcases how to update data in the DataTable. It retrieves a specific row, modifies its value for the Name column, and calls AcceptChanges() to persist the changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n\"this.data.Rows[0][\\\"Name\\\"] = \\\"My New Value\\\";\nthis.data.AcceptChanges();\"\n```\n\n----------------------------------------\n\nTITLE: Auto Column Width Configuration\nDESCRIPTION: XAML configuration for DataGrid columns with automatic sizing using SizeMode=\"Auto\".\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/width.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" AutoGenerateColumns=\"False\">\n\t<telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"100\" SizeMode=\"Auto\"/>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Capital\" HeaderText=\"Capital\" Width=\"200\" SizeMode=\"Auto\"/>\n\t</telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding KeyDownCommand to RadDataGrid in C# for MAUI\nDESCRIPTION: This snippet demonstrates how to add the custom KeyDownCommand to the Commands collection of the RadDataGrid, effectively disabling keyboard navigation when users press arrow keys.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/disable-keyboard-functionality-datagrid-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nthis.datagrid.Commands.Add(new KeyDownCommand());\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox with Visual States in XAML\nDESCRIPTION: Example showing how to define custom styles and visual states for the RadComboBox control including styles for various states like normal, focused, and disabled.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-custom-styles' />\n```\n\n----------------------------------------\n\nTITLE: ListView Template Cell Implementation in C#\nDESCRIPTION: Method to create a custom cell template for displaying book information with title, author, and favorite status. The template includes a grid layout with labels and an image, demonstrating complex cell customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/template-cell.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic View GetCellContent()\n{\n    var content = new Grid();\n\n    var book = new Label\n    {\n        FontAttributes = FontAttributes.Bold,\n        TextColor = Color.Black,\n        FontSize = 16,\n        VerticalOptions = LayoutOptions.Center\n    };\n\n    book.SetBinding(Label.TextProperty, new Binding(nameof(Book.Title)));\n\n    var fav = new Image\n    {\n        Source = ImageSource.FromFile(\"favourite.png\"),\n        HeightRequest = 16,\n        VerticalOptions = LayoutOptions.Center\n    };\n\n    fav.SetBinding(Image.IsVisibleProperty, new Binding(nameof(Book.IsFavourite)));\n\n    var author = new Label\n    {\n        TextColor = Color.Gray,\n        FontAttributes = FontAttributes.Italic,\n        FontSize = 13\n    };\n\n    author.SetBinding(Label.TextProperty, new Binding(nameof(Book.Author)));\n\n    var by = new Label\n    {\n        Text = \"by\",\n        TextColor = Color.Gray,\n        FontAttributes = FontAttributes.Italic,\n        FontSize = 13\n    };\n\n    var main = new StackLayout { Orientation = StackOrientation.Horizontal, Margin = new Thickness(10, 10, 10, 0) };\n    main.Children.Add(fav);\n    main.Children.Add(book);\n\n    var detail = new StackLayout { Orientation = StackOrientation.Horizontal, Margin = new Thickness(10, 0, 10, 10) };\n    detail.Children.Add(by);\n    detail.Children.Add(author);\n\n    content.Children.Add(main, 0, 0);\n    content.Children.Add(detail, 0, 1);\n\n    return content;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: This C# snippet shows how to register Telerik controls using the UseTelerik extension method in the CreateMauiApp method of MauiProgram.cs. It configures the MauiApp builder and registers OpenSans-Regular font.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ToggleCommand and ClearCommand in XAML\nDESCRIPTION: Demonstrates how to bind toggle and clear commands to buttons for programmatically controlling the DatePicker's popup and selected date\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n\t<Button Text=\"Toggle Command\" Command=\"{Binding Source={x:Reference datePicker}, Path=ToggleCommand}\"/>\n\t<Button Text=\"Clear Command\" Command=\"{Binding Source={x:Reference datePicker}, Path=ClearCommand}\"/>\n\t<telerik:RadDatePicker x:Name=\"datePicker\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: SelectionChanged Event Handler in .NET MAUI\nDESCRIPTION: This snippet illustrates the event handler for the SelectionChanged event, allowing developers to respond when the selection within the calendar has changed. The handler retrieves properties indicating which dates were added or removed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/events.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnSelectionChanged(object sender, CalendarSelectionChangedEventArgs e) {\n    // Handle selection change\n    var removedDates = e.RemovedDates;\n    var addedDates = e.AddedDates;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Percent Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This snippet demonstrates how to set the Percent (double) Mask for the RadNumericMaskedEntry in .NET MAUI, restricting input to percentage values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"P\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Swipe Templates in XAML Resources\nDESCRIPTION: This snippet demonstrates how to define StartSwipeTemplate and EndSwipeTemplate DataTemplates in page resources. These templates determine the visual appearance when swiping items in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-events.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"StartSwipeTemplate\">\n    <Grid BackgroundColor=\"Green\">\n        <Label Text=\"Favorite\" Margin=\"10\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" TextColor=\"White\"/>\n    </Grid>\n</DataTemplate>\n\n<DataTemplate x:Key=\"EndSwipeTemplate\">\n    <Grid BackgroundColor=\"Red\">\n        <Label Text=\"Delete\" Margin=\"10\" VerticalOptions=\"Center\" HorizontalOptions=\"End\" TextColor=\"White\"/>\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining RadPdfViewer and RadPdfToolbar in XAML\nDESCRIPTION: XAML code snippet showing how to define a basic RadPdfViewer and RadPdfToolbar with search functionality. This is the standard way to implement the PDF viewer toolbar.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewerToolbar OverflowMode=\"Scroll\">\n    <telerik:PdfViewerSearchToolbarItem IsVisible=\"{OnIdiom Phone=False, Desktop=True}\"/>\n    <telerik:PdfViewerSearchNavigationToolbarItem IsVisible=\"{OnIdiom Phone=True, Desktop=False}\" AutoGenerateItems=\"False\">\n        <telerik:PdfViewerSearchNavigationToolbarItem.Items>\n            <telerik:PdfViewerSearchEntryToolbarItem />\n            <telerik:PdfViewerNavigateToPreviousSearchResultToolbarItem/>\n            <telerik:PdfViewerNavigateToNextSearchResultToolbarItem/>\n        </telerik:PdfViewerSearchNavigationToolbarItem.Items>\n    </telerik:PdfViewerSearchNavigationToolbarItem>\n    <telerik:PdfViewerToggleLayoutModeToolbarItem />\n    <telerik:PdfViewerNavigateToPreviousPageToolbarItem />\n    <telerik:PdfViewerNavigateToNextPageToolbarItem />\n    <telerik:PdfViewerNavigateToPageToolbarItem />\n</telerik:RadPdfViewerToolbar>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: C# code for registering Telerik controls in a .NET MAUI application using the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView ViewModel in C#\nDESCRIPTION: This snippet shows the implementation of the ViewModel for the TreeView, including the Source property and methods for generating sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/expand-collapse.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Item> Source { get; set; }\n\n    public ViewModel()\n    {\n        this.Source = new ObservableCollection<Item>();\n        for (int i = 1; i <= 3; i++)\n        {\n            var item = new Item { Name = $\"Item {i}\" };\n            item.Children = this.GenerateChildren(3, $\"Item {i}\");\n            this.Source.Add(item);\n        }\n    }\n\n    private ObservableCollection<Item> GenerateChildren(int count, string parentName)\n    {\n        var children = new ObservableCollection<Item>();\n        for (int i = 1; i <= count; i++)\n        {\n            var item = new Item { Name = $\"{parentName}.{i}\" };\n            item.Children = this.GenerateChildren(3, $\"{parentName}.{i}\");\n            children.Add(item);\n        }\n        return children;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTML Content\nDESCRIPTION: Shows how to retrieve the current HTML content from the RichTextEditor using GetHtmlAsync method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-keyfeatures-gethtml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing ItemClicked Event - XAML\nDESCRIPTION: This snippet showcases the implementation of the ItemClicked event. The handler enables custom actions when an item in the NavigationView is clicked.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-events-itemclicked' />\n```\n\n----------------------------------------\n\nTITLE: Loading PDF Document in C#\nDESCRIPTION: This C# code snippet demonstrates how to load a PDF document into the RadPdfViewer control. It uses a lambda function to asynchronously load the PDF file from the application's embedded resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/viewport.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nFunc<CancellationToken, Task<Stream>> streamFunc = ct => Task.Run(() =>\n{\n    Assembly assembly = typeof(MainPage).Assembly;\n    string fileName = assembly.GetManifestResourceNames().FirstOrDefault(n => n.Contains(\"pdf-overview.pdf\"));\n    Stream stream = assembly.GetManifestResourceStream(fileName);\n    return stream;\n});\nthis.pdfViewer1.Source = streamFunc;\n```\n\n----------------------------------------\n\nTITLE: DataGrid Current Cell ViewModel Implementation in C#\nDESCRIPTION: Implementation of the ViewModel class containing data and logic for the DataGrid current cell functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/current-cell.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-currentcell-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation for DatePicker Commands\nDESCRIPTION: Defines a ViewModel with custom accept and cancel command handlers that display alerts and allow for custom logic implementation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ICommand Accept { get; set; }\n    public ICommand Cancel { get; set; }\n\n    public ViewModel()\n    {\n        this.Accept = new Command(this.OnAccept);\n        this.Cancel = new Command(this.OnCancel);\n    }\n\n    private void OnAccept(object param)\n    {\n        Application.Current.MainPage.DisplayAlert(\"Date selected\", String.Format(\"New Date: {0:d}\", (DateTime)param), \"OK\");\n        // implement your custom logic here\n    }\n\n    private void OnCancel(object param)\n    {\n        var message = param != null ? String.Format(\"Current date: {0:d}\", (DateTime)param) : \"Currently no date is selected\";\n        Application.Current.MainPage.DisplayAlert(\"Date Selection Canceled\", message, \"OK\");\n        // implement your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Last Item in .NET MAUI DataGrid\nDESCRIPTION: This C# code snippet demonstrates how to programmatically scroll to the last item in a Telerik UI for .NET MAUI DataGrid. It uses the ScrollItemIntoView method, which is triggered by a button click event. The method works best when DataGrid rows have uniform height.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Button_Clicked(object sender, System.EventArgs e)\n{\n    var item = this.vm.Clubs[this.vm.Clubs.Count - 1];\n    this.grid.ScrollItemIntoView(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DataPager in XAML - .NET MAUI\nDESCRIPTION: This snippet shows how to define the DataPager in XAML with specific properties for page size, index, available page sizes, and item spacing. It serves as a foundational element for the DataPager control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/page-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<DataPager PageSize=\"10\" PageIndex=\"-1\" ItemSpacing=\"16\">\n    <DataPager.PageSizes>\n        <x:Int32>5</x:Int32>\n        <x:Int32>10</x:Int32>\n        <x:Int32>20</x:Int32>\n        <x:Int32>50</x:Int32>\n    </DataPager.PageSizes>\n</DataPager>\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeSpanPicker Commands in .NET MAUI using XAML\nDESCRIPTION: This snippet demonstrates how to bind the 'ToggleCommand' and 'ClearCommand' to buttons within a TimeSpanPicker using XAML. Dependencies include referencing the Telerik UI namespace for MAUI. The 'timeSpanPicker' is set up to receive command bindings to allow users to toggle the picker and clear selected intervals.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\\n\\t<Button Text=\\\"Toggle Command\\\" Command=\\\"{Binding Source={x:Reference timeSpanPicker}, Path=ToggleCommand}\\\"/>\\n\\t<Button Text=\\\"Clear Command\\\" Command=\\\"{Binding Source={x:Reference timeSpanPicker}, Path=ClearCommand}\\\"/>\\n\\t<telerik:RadTimePicker x:Name=\\\"timeSpanPicker\\\" />\\n</StackLayout>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Handling TextChanged Event in C#\nDESCRIPTION: This C# snippet includes an event handler for the TextChanged event in the RadEntry control. It updates a label with the old and new text values when the text changes. This function requires TextChangedEventArgs and interacts with the label textChangedLabel to display changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Entry_TextChanged(object sender, TextChangedEventArgs e)\n{\n    this.textChangedLabel.Text = $\"Text changed from {e.OldTextValue} to {e.NewTextValue}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Views in .NET MAUI Scheduler\nDESCRIPTION: XAML code demonstrating how to define available views in the Scheduler control using ViewDefinitions collection and ActiveViewDefinitionIndex property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/views/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='scheduler-getting-started-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart in XAML\nDESCRIPTION: This snippet defines the `RadCartesianChart` in XAML, sets the `BindingContext` to the `ViewModel`, configures the chart axes, and defines three `BarSeries` bound to the `Data1`, `Data2`, and `Data3` properties of the `ViewModel`. It also defines custom palettes for the chart and selection appearance, allowing to override the default chart colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-create-custom-palette.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.ChartBehaviors>\n        <telerik:ChartSelectionBehavior DataPointSelectionMode=\"None\" \n                                    SeriesSelectionMode=\"Single\" />\n    </telerik:RadCartesianChart.ChartBehaviors>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries ValueBinding=\"Value\"\n                    CategoryBinding=\"Category\"\n                    CombineMode=\"Cluster\"\n                    ItemsSource=\"{Binding Data1}\" />\n        <telerik:BarSeries ValueBinding=\"Value\"\n                    CategoryBinding=\"Category\"\n                    CombineMode=\"Cluster\"\n                    ItemsSource=\"{Binding Data2}\" />\n        <telerik:BarSeries ValueBinding=\"Value\"\n                    CategoryBinding=\"Category\"\n                    ItemsSource=\"{Binding Data3}\" />\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.Palette>\n        <telerik:ChartPalette>\n            <telerik:ChartPalette.Entries>\n                <telerik:PaletteEntry FillColor=\"#4FB6E7\" StrokeColor=\"#4FB6E7\" />\n                <telerik:PaletteEntry FillColor=\"#A666CE\" StrokeColor=\"#A666CE\" />\n                <telerik:PaletteEntry FillColor=\"#9DCC00\" StrokeColor=\"#9DCC00\" />\n            </telerik:ChartPalette.Entries>\n        </telerik:ChartPalette>\n    </telerik:RadCartesianChart.Palette>\n    <telerik:RadCartesianChart.SelectionPalette>\n        <telerik:ChartPalette>\n            <telerik:ChartPalette.Entries>\n                <telerik:PaletteEntry FillColor=\"#4FB6E7\" StrokeColor=\"#4D4D4D\" />\n                <telerik:PaletteEntry FillColor=\"#A666CE\" StrokeColor=\"#4D4D4D\" />\n                <telerik:PaletteEntry FillColor=\"#9DCC00\" StrokeColor=\"#4D4D4D\" />\n            </telerik:ChartPalette.Entries>\n        </telerik:ChartPalette>\n    </telerik:RadCartesianChart.SelectionPalette>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridComboBoxColumn in XAML\nDESCRIPTION: Demonstrates how to set up a DataGridComboBoxColumn with custom styling and formatting. It shows usage of properties like PropertyName, HeaderText, CellContentFormat, and ItemsSourcePath.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/picker-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridComboBoxColumn PropertyName=\"Country\"\n                                HeaderText=\"Country\"\n                                CellContentFormat=\"Picked: {0}\"\n                                ItemsSourcePath=\"Countries\">\n    <telerik:DataGridComboBoxColumn.CellContentStyle>\n        <telerik:DataGridTextCellStyle SelectedTextColor=\"DarkGreen\"\n                                       TextColor=\"Black\"\n                                       FontSize=\"15\" />\n    </telerik:DataGridComboBoxColumn.CellContentStyle>\n</telerik:DataGridComboBoxColumn>\n```\n\n----------------------------------------\n\nTITLE: Handling Swipe Direction in Code-Behind with C#\nDESCRIPTION: This C# snippet shows how to disable swipe in a specific direction, using an event handler for the Swiping event. The swipe direction is checked via the Offset property, and the swipe is ended based on that value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/disable-right-left-swipe-collectionview-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void collectionView_Swiping(object sender, Telerik.Maui.Controls.CollectionView.CollectionViewSwipingEventArgs e)\n{\n\t// Disable right swipe (left-to-right direction)\n\t//if (e.Offset > 0)\n\t//{\n\t//\tthis.collectionView.EndItemSwipe(false);\n\t//}\n\n\t// Disable left swipe (right-to-left direction)\n\tif (e.Offset < 0)\n\t{\n\t\tthis.collectionView.EndItemSwipe(false);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Header Text in .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to change the text displayed in DataGrid column headers using the HeaderText property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/header.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" \n\t\t\t\t\t AutoGenerateColumns=\"False\">\n\t<telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Capital\" \n\t\t\t\t\t\t\t\t\tHeaderText=\"Capital Header\"/>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Country\" \n\t\t\t\t\t\t\t\t\tHeaderText=\"Country Header\"/>\n\t</telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiday View in MAUI Scheduler\nDESCRIPTION: Shows how to set up a Multiday View definition in the RadScheduler control. The example demonstrates setting the number of visible days to 3 and defining a custom title.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/views/multiday-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\">\n    <telerik:RadScheduler.ViewDefinitions>\n       <telerik:MultidayViewDefinition VisibleDays=\"3\" Title=\"3 Days\" />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Binding DataGrid to DataTable in XAML\nDESCRIPTION: This snippet demonstrates how to define a DataGrid in XAML and bind its ItemsSource to a DataTable. The DataGrid is a Telerik UI component for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"<telerik:RadDataGrid x:Name=\"\\\"dataGrid\\\"\"\n                         ItemsSource=\"\\\"{Binding Items}\\\"\" />\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Indicator in XAML for .NET MAUI Gauge\nDESCRIPTION: This snippet illustrates how to implement a GaugeTextIndicator with custom text placement, stroke, color, and other properties to display text at a specific value on the gauge.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/indicators.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeTextIndicator HorizontalTextPlacement=\"Right\"\n\t\t\t\t\t\t  Stroke=\"#FF4062AD\"\n\t\t\t\t\t\t  StrokeThickness=\"1\"\n\t\t\t\t\t\t  Text=\"indicator at 65\"\n\t\t\t\t\t\t  TextColor=\"#FF4062AD\"\n\t\t\t\t\t\t  TextMargin=\"4\"\n\t\t\t\t\t\t  VerticalTextPlacement=\"Top\"\n\t\t\t\t\t\t  Offset=\"15\"\n\t\t\t\t\t\t  Value=\"65\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Special Slot Template to .NET MAUI Scheduler\nDESCRIPTION: XAML code that shows how to apply a custom SpecialSlotTemplate to the Telerik UI for .NET MAUI Scheduler control. This enables custom content to be displayed in special time slots.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/specialslots/special-slot-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-special-slots-template' />\n```\n\n----------------------------------------\n\nTITLE: Adding Scheduler Control in XAML\nDESCRIPTION: Demonstrates how to add a Scheduler control to a XAML page in a .NET MAUI application. Includes the necessary namespace declaration for Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler />\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButtons with Custom Ripple Effects in XAML\nDESCRIPTION: This snippet demonstrates how to define ToggleButton controls with custom ripple effects by setting the RippleMode and RippleColor properties. It shows different configurations including Pulse and Hold ripple modes with various colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/ripple.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButton1\"\n                           Text=\"Ripple Mode: Pulse\"\n                           telerikEffects:RadEffects.RippleMode=\"Pulse\"\n                           telerikEffects:RadEffects.RippleColor=\"Red\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"10\"/>\n\n<telerik:RadToggleButton x:Name=\"toggleButton2\"\n                           Text=\"Ripple Mode: Hold\"\n                           telerikEffects:RadEffects.RippleMode=\"Hold\"\n                           telerikEffects:RadEffects.RippleColor=\"Green\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"10\"/>\n\n<telerik:RadToggleButton x:Name=\"toggleButton3\"\n                           Text=\"Ripple Mode: None\"\n                           telerikEffects:RadEffects.RippleMode=\"None\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"10\"/>\n\n<telerik:RadToggleButton x:Name=\"toggleButton4\"\n                           Text=\"Ripple from Visual States\"\n                           Style=\"{StaticResource ToggleWithVisualStatesStyles}\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: LoadOnDemand Collection Usage in DataGrid (C#)\nDESCRIPTION: This snippet demonstrates how to use the `LoadOnDemandCollection` to feed the `RadDataGrid` with data. The `LoadOnDemandCollection` is initialized with a `Func<CancellationToken, IEnumerable>` delegate that retrieves the data. The Items property of the class is then assigned this collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n        Items = new LoadOnDemandCollection<MyDataObject>((cancellationToken) =>\n        {\n            var result = Enumerable.Range(0, 20).Select(i => new MyDataObject { Text = $\"Item {i}\" });\n\n            return result;\n        });\n```\n\n----------------------------------------\n\nTITLE: Setting Culture Info in iOS/MacCatalyst AppDelegate\nDESCRIPTION: Implementation for iOS and MacCatalyst platforms that sets culture info by overriding the FinishedLaunching method in AppDelegate.cs. Configures both CurrentCulture and CurrentUICulture.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/set-cultureinfo-on-app-level-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class AppDelegate : MauiUIApplicationDelegate\n{\n    protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n\n    public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)\n    {\n        this.SetLocale();\n        return base.FinishedLaunching(application, launchOptions);\n    }\n\n    private void SetLocale()\n    {\n        CultureInfo ci = new CultureInfo(\"en-US\");\n\n        Thread.CurrentThread.CurrentCulture = ci;\n        Thread.CurrentThread.CurrentUICulture = ci;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Telerik Namespace to XAML\nDESCRIPTION: This XAML snippet shows how to add the Telerik namespace to your XAML file. This namespace is required to use Telerik controls in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/command.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Entry Text Selection on Focus in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet demonstrates how to preselect all the text in a Telerik RadEntry control as soon as it receives focus using the SelectionOnFocus property.  The SelectionOnFocus property is set to \"SelectAll\" which ensures the entire text is selected when the entry gains focus.  The RadEntry control is named \"entry\" and has initial text \"some text here\".\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"entry\"\n                  Text=\"some text here\"\n                  SelectionOnFocus=\"SelectAll\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Header and Footer Templates in .NET MAUI CollectionView\nDESCRIPTION: This snippet demonstrates how to add HeaderTemplate and FooterTemplate to a RadCollectionView instance in XAML. These templates allow for custom content to be displayed before and after the main collection items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/header-footer.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-header-footer'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet shows how to add the required Telerik namespace to access the TreeView control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/control-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGrid Aggregates Properties in XAML/C#\nDESCRIPTION: Core properties to configure aggregates visualization in DataGrid. Includes ShowColumnFooters for footer aggregates, ShowGroupHeaderAggregates for header aggregates, and ShowGroupFooters for footer aggregates in grouped data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nDataGridColumn.AggregateDescriptors\nShowColumnFooters\nShowGroupHeaderAggregates\nShowGroupFooters\nGroupAggregatesAlignment\n```\n\n----------------------------------------\n\nTITLE: Implementing SpecialSlotStyleSelector in C#\nDESCRIPTION: Custom StyleSelector class that applies different styles to special slots based on whether they occur during weekdays or weekends.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/special-slots-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-specialslots-styleselector' />\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayStringFormat in .NET MAUI DatePicker - XAML\nDESCRIPTION: This snippet demonstrates how to set the DisplayStringFormat property of the RadDatePicker control in XAML, which formats the string that will be displayed when the date picker is not in active use. The format must be a valid date format string.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker DefaultHighlightedDate=\"2020,05,15\"\n                       DisplayStringFormat=\"yyyy/MMM/dd\"\n                       Placeholder=\"Pick a date!\"\n                       SpinnerFormat=\"dd/MMM/yyyy\"\n                       AreSpinnerHeadersVisible=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Handle Right-Click and Get Cell Info (C#)\nDESCRIPTION: This C# snippet adds a TapGestureRecognizer to the DataGrid to detect right-click events. It then retrieves the position of the click, uses HitTestService to get CellInfo from the position, and displays an alert with the cell's data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-right-click.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\"RadScrollView sv = null;\\nforeach (var child in this.dataGrid)\\n{\\n\\tif (child is RadScrollView)\\n\\t{\\n\\t\\tsv = child as RadScrollView;\\n\\t\\tbreak;\\n\\t}\\n}\\n\\nvar content = sv.Content;\\n\\nvar tap = new TapGestureRecognizer()\\n{\\n\\tButtons = ButtonsMask.Secondary\\n};\\n\\ntap.Tapped += (s, e) =>\\n{\\n\\tvar position = e.GetPosition(content);\\n\\tvar hitTestService = this.dataGrid.HitTestService;\\n\\tvar cellInfo = hitTestService.CellInfoFromPoint(position.Value);\\n\\n\\t// sample visualization the data in the cell when right-click\\n\\tApp.Current.MainPage.DisplayAlert(\\\"Right click on\\\",\\\"\\\"+cellInfo.Value,\\\"ОК\\\");\\n};\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Appointment Template in XAML\nDESCRIPTION: Implements a custom DataTemplate for displaying appointments with the additional Token property, and configures the Scheduler control with view definitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-appointment-scheduler-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<DataTemplate x:Key=\"MyCustomAppointmentTemplate\">\n    <telerik:RadBorder CornerRadius=\"4\"\n                    IsClippedToBounds=\"True\"\n                    BackgroundColor=\"#D2C6E6\">\n        <Grid>\n            <BoxView WidthRequest=\"4\"\n                    BackgroundColor=\"#8660C5\"\n                    HorizontalOptions=\"Start\" />\n            <VerticalStackLayout  Margin=\"6, 0, 4, 0\" Spacing=\"4\">\n                <Label Text=\"{Binding Occurrence.Appointment.Subject}\"\n                    TextColor=\"Black\" />\n                <Label Text=\"{Binding Occurrence.Appointment.Token}\"\n                    TextColor=\"Red\" />\n            </VerticalStackLayout>\n        </Grid>\n    </telerik:RadBorder>\n</DataTemplate>\n\n<telerik:RadScheduler x:Name=\"scheduler\"\n            AppointmentsSource=\"{Binding Appointments}\"\n            AppointmentTemplate=\"{StaticResource MyCustomAppointmentTemplate}\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:DayViewDefinition />\n        <telerik:WeekViewDefinition Title=\"Work Week\" IsWeekendVisible=\"False\" />\n        <telerik:MonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Display Modes in DataPager\nDESCRIPTION: Shows how to set AdaptiveDisplayModes to customize element arrangement based on control size and display mode\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/display-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager Source=\"{Binding Data}\"\n                      DisplayMode=\"FirstPageButton,LastPageButton,NavigationComboBox\">\n    <telerik:RadDataPager.AdaptiveDisplayModes>\n        <x:Array Type=\"{x:Type telerik:DataPagerDisplayMode}\">\n            <telerik:DataPagerDisplayMode>FirstPageButton, NavigationComboBox, NextPageButton, LastPageButton</telerik:DataPagerDisplayMode>\n        </x:Array>\n    </telerik:RadDataPager.AdaptiveDisplayModes>\n</telerik:RadDataPager>\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGridTimeColumn with CellContentTemplate and CellEditTemplate in XAML\nDESCRIPTION: This example shows how to customize a DataGridTimeColumn using CellContentTemplate and CellEditTemplate. It uses a Label for displaying the time and a RadTimePicker for editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/time-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTimeColumn PropertyName=\"Time\" \n\t\t\t\t\t\t\tHeaderText=\"Time\">\n\t<telerik:DataGridColumn.CellContentTemplate>\n\t\t<DataTemplate>\n\t\t\t<Label Text=\"{Binding Time}\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellContentTemplate>\n\t<telerik:DataGridColumn.CellEditTemplate>\n\t\t<DataTemplate>\n\t\t\t<telerik:RadTimePicker Time=\"{Binding Time}\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellEditTemplate>\n</telerik:DataGridDateColumn>\n```\n\n----------------------------------------\n\nTITLE: Declaring RadChart with Categorical Axis in XAML\nDESCRIPTION: This XAML snippet sets up a RadCartesianChart with a Categorical Axis. Key properties include PlotMode set to 'OnTicks', MajorTickInterval set to '2', and GapLength set to '0.5'. It requires Telerik UI for .NET MAUI, and it displays a bar series whose data is bound to the view model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/categorical-axis.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n\t<telerik:RadCartesianChart.BindingContext>\n\t\t<local:CategoricalDataViewModel/>\n\t</telerik:RadCartesianChart.BindingContext>\n\t<telerik:RadCartesianChart.HorizontalAxis>\n\t\t<telerik:CategoricalAxis PlotMode=\"OnTicks\"\n\t\t\t\t\t\t\t\t\tMajorTickInterval=\"2\"\n\t\t\t\t\t\t\t\t\tGapLength=\"0.5\"/>\n\t</telerik:RadCartesianChart.HorizontalAxis>\n\t<telerik:RadCartesianChart.VerticalAxis>\n\t\t<telerik:NumericalAxis LabelFitMode=\"MultiLine\"/>\n\t</telerik:RadCartesianChart.VerticalAxis>\n\t<telerik:RadCartesianChart.Series>\n\t\t<telerik:BarSeries ItemsSource=\"{Binding Data}\"\n\t\t\t\t\t\tValueBinding=\"Value\"\n\t\t\t\t\t\tCategoryBinding=\"Category\"/>\n\t</telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Custom Filter ViewModel Implementation in C#\nDESCRIPTION: ViewModel class containing a collection of Person objects for AutoComplete filtering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-filering-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: NavigationView DataBinding XAML\nDESCRIPTION: Defines the NavigationView in XAML with data binding.  It uses the `ItemsSource` property to bind to a collection in the ViewModel, and specifies `DisplayMemberPath` to display the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Handler for Platform-Specific Markers\nDESCRIPTION: Handler implementation for updating the chart with platform-specific point markers on Android and iOS\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-line-series-datapoint-markers.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new ViewModel();\n       \n    }\n\n    private void chart_HandlerChanged(System.Object sender, System.EventArgs e)\n    {\n        this.UpdateChart();\n    }\n\n    private void UpdateChart()\n    {\n        var platformView = this.chart.Handler.PlatformView;\n#if ANDROID\n        var platformChart = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.RadCartesianChartView)platformView;\n        if (platformChart != null)\n        {\n            for (int i = 0; i < platformChart.Series.Size(); i++)\n            {\n                Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries lineSeries = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries)platformChart.Series.Get(i) as Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries;\n                lineSeries.DataPointRenderer = new Platforms.Android.PointRenderer(lineSeries);\n            }\n\n        }\n# elif IOS\n      var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n        platformChart.YAxis.Style.LabelStyle.TextAlignment = TelerikUI.TKChartAxisLabelAlignment.Left;\n        platformChart.YAxis.Style.LabelStyle.FirstLabelTextAlignment = TelerikUI.TKChartAxisLabelAlignment.Left;\n\n      var platformSeries = (TelerikUI.TKChartLineSeries)platformChart.Series[0];\n        platformSeries.Style.PointShape = new TelerikUI.TKPredefinedShape(TelerikUI.TKShapeType.Circle, new System.Drawing.SizeF(10, 10));\n        platformSeries.Style.ShapeMode = TelerikUI.TKChartSeriesStyleShapeMode.AlwaysShow;\n\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom LoadMoreData Command (C#)\nDESCRIPTION: This snippet shows how to create a custom command for the `LoadMoreData` functionality, particularly useful in MVVM scenarios. The command's `Execute` method is defined to load more data and update the DataGrid's ItemsSource.  `ShowLoadOnDemandLoadingIndicator` and `HideLoadOnDemandLoadingIndicators` are invoked to control the loading indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    public class CustomLoadMoreDataCommand : ICommand\n    {\n        public event EventHandler CanExecuteChanged;\n\n        private DataGridDataPresenter dataGrid;\n\n        public CustomLoadMoreDataCommand(DataGridDataPresenter dataGrid)\n        {\n            this.dataGrid = dataGrid;\n        }\n\n        public bool CanExecute(object parameter)\n        {\n            return true;\n        }\n\n        public async void Execute(object parameter)\n        {\n            this.dataGrid.ShowLoadOnDemandLoadingIndicator();\n            await Task.Delay(3000);\n\n            var result = Enumerable.Range(0, 20).Select(i => new MyDataObject { Text = $\"Item {i}\" });\n            foreach (var item in result)\n            {\n                (this.dataGrid.ItemsSource as ObservableCollection<MyDataObject>).Add(item);\n            }\n\n            this.dataGrid.HideLoadOnDemandLoadingIndicators();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Header Properties in .NET MAUI XAML\nDESCRIPTION: XAML code that demonstrates how to customize the Scheduler header including Today button visibility and view definitions with custom titles and header text formats.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/header/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-header-properties' />\n```\n\n----------------------------------------\n\nTITLE: Custom Punctuation Handling Filter in C#\nDESCRIPTION: Implementation of a custom filter that handles punctuation in search strings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomAutoCompleteFilter : IAutoCompleteFilter\n{\n    public bool Filter(object item, string searchText, AutoCompleteCompletionMode completionMode)\n    {\n        var googleSearchResult = (string)item;\n\n        // Remove commas from the source value before comparing with the search term\n        var googleSearchResultNoCommas = googleSearchResult.Replace(\",\", \"\");\n\n        var normalizedPlace = googleSearchResultNoCommas.ToLowerInvariant();\n        var normalizedSearchText = searchText.ToLowerInvariant();\n        \n        return normalizedPlace.Contains(normalizedSearchText);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView with GroupViewStyleSelector in XAML\nDESCRIPTION: Sets up the XAML for RadCollectionView, including ItemsSource, Grouping, and GroupViewStyleSelector properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                               ItemsSource=\"{Binding Countries}\"\n                               GroupViewStyleSelector=\"{StaticResource GroupViewStyleSelector}\">\n    <telerik:RadCollectionView.GroupDescriptors>\n        <telerik:DelegateGroupDescriptor KeyExtractor=\"PopulationSizeGrouping\" />\n    </telerik:RadCollectionView.GroupDescriptors>\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:CollectionViewItemView>\n                <Label Text=\"{Binding Name}\" />\n            </telerik:CollectionViewItemView>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Stack Bar Series in MAUI Using XAML\nDESCRIPTION: This snippet outlines how to create a RadCartesianChart with a stack horizontal bar series in XAML. The setup relies on a vertical CategoricalAxis, allowing for data to be visually represented in a stacked format. Users must ensure the existence of compatible business objects and a view model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-orientation.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-stackbarhorizontal-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Applying Purple Theme Based on Device Theme in .NET MAUI\nDESCRIPTION: Implementation for loading the appropriate Purple theme swatch (light/dark) based on the current device theme using TelerikTheming. This code retrieves the current theme from Application.Resources and applies the matching Purple swatch.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/change-telerik-theme-runtime.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ApplyTelerikTheme()\n{\n    var telerikTheming = Application.Current\n        .Resources\n        .MergedDictionaries\n        .OfType<TelerikTheming>()\n        .Single();\n\n    var swatchName = Application.Current.RequestedTheme == AppTheme.Dark ? \"Purple Dark\" : \"Purple\";\n    telerikTheming.Theme = TelerikTheming.Themes\n        .Single(t => t.Theme == \"Telerik\" && t.Swatch == swatchName);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading HTML from Stream\nDESCRIPTION: Demonstrates loading HTML content from a stream using the FromStream method, typically used with embedded resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-keyfeatures-fromstream' />\n```\n\n----------------------------------------\n\nTITLE: Configuring TemplatedButton Pressed Event in XAML\nDESCRIPTION: Set up an event handler for the Pressed event to respond when the button is initially pressed by the user\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/events.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedButton Pressed=\"OnTemplatedButtonPressed\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Cell Decoration Style to DataGrid Columns in .NET MAUI\nDESCRIPTION: This example demonstrates how to customize the border and background of cells in a DataGrid column using the CellDecorationStyle property. It shows settings for border color, thickness, and search highlight colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/columns-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='datagrid-columnstyle-celldecoration'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SplitButton ToolbarItem in .NET MAUI\nDESCRIPTION: Example of adding a SplitButton to a .NET MAUI Toolbar. The SplitButton inherits from DropDownMenuButtonToolbarItem and provides a read-only collection of ToolbarItems to display in a drop-down menu.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/split-button.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='toolbar-splitbutton-item'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageLoaded Event Handler to Enter Crop Mode\nDESCRIPTION: C# code that handles the ImageLoaded event by executing the CropInteractiveCommand with a custom CropCommandContext. This sets up a square aspect ratio with specific bounds and ellipse geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/imageeditor-crop-mode-on-load.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnImageLoaded(object sender, Telerik.Maui.Controls.ImageEditor.ImageLoadedEventArgs e)\n{\n    // Apply the CropInteractiveCommand initially when the image source gets updated\n    var imageSize = e.ImageSize;\n    var cropCommand = this.imageEditor.CropInteractiveCommand;\n    var cropCommandContext = new CropCommandContext\n    {\n        AspectRatio = AspectRatio.Square,\n        Bounds = new Rect\n        {\n            X = imageSize.Width * 0.25,\n            Y = imageSize.Height * 0.25,\n            Width = imageSize.Width * 0.5,\n            Height = imageSize.Height * 0.5\n        },\n        Geometry = new RadEllipseGeometry\n        {\n            Center = new Point(0.5, 0.5),\n            Radius = new Size(0.5, 0.5)\n        }\n    };\n\n    if (cropCommand.CanExecute(cropCommandContext))\n    {\n        cropCommand.Execute(cropCommandContext);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Specific ListView Groups in C#\nDESCRIPTION: Shows the usage of `GetGroups`, `ExpandGroup`, `CollapseGroup`, and `GetIsExpanded` methods to manipulate specific groups in a ListView. It also includes `ExpandItem`/`CollapseItem` which target specific items' groups.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/expand-collapse.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar dataView = this.listView.GetDataView();\nvar rootGroups = dataView.GetGroups();\n\nvar isFirstExpanded = dataView.GetIsExpanded(rootGroups.First());\n//expand a certain group\ndataView.ExpandGroup(rootGroups.First());\n//collapse a certain group\ndataView.CollapseGroup(rootGroups.First());\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar lastItem = (listView.ItemsSource as IEnumerable<City>).Last();\nvar dataView = this.listView.GetDataView();\ndataView.CollapseItem(lastItem);\n```\n\n----------------------------------------\n\nTITLE: Attaching ImageEditorToolbar to ImageEditor in XAML\nDESCRIPTION: Shows how to connect a RadImageEditorToolbar to a RadImageEditor control using XAML markup. This is the basic setup required to enable toolbar functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-getting-started-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGrid Search Highlighting in XAML\nDESCRIPTION: Shows how to customize the highlighting colors for search results in the DataGrid using CellContentStyle and CellDecorationStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                    ItemsSource=\"{Binding Countries}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\"\n                                   CellContentStyle=\"{StaticResource DataGridTextCellStyle}\"\n                                   CellDecorationStyle=\"{StaticResource MyCellDecorationStyle}\" />\n        <telerik:DataGridTextColumn PropertyName=\"Capital\"\n                                   CellContentStyle=\"{StaticResource DataGridTextCellStyle}\"\n                                   CellDecorationStyle=\"{StaticResource MyCellDecorationStyle}\" />\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Applying GroupName DisplayAttribute in Business Model\nDESCRIPTION: Demonstrates how to use the GroupName DisplayAttribute to define groups directly in the business model. This approach allows for grouping without explicit XAML definition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class GroupingModel\n{\n    [Display(GroupName = \"Group 1\")]\n    public string FirstName { get; set; }\n\n    [Display(GroupName = \"Group 1\")]\n    public string LastName { get; set; }\n\n    [Display(GroupName = \"Group 2\")]\n    public DateTime BirthDate { get; set; }\n\n    [Display(GroupName = \"Group 2\")]\n    public string Email { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Clipping Content with Corner Radius in .NET MAUI Border\nDESCRIPTION: This snippet shows how to render a circular image by wrapping an Image control in a Border, which clips the image according to the specified corner radius, resulting in a rounded appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/corner-radius.md#2025-04-21_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\nBorder circularImageBorder = new Border()\n{\n    CornerRadius = new CornerRadius(50),\n    Content = new Image() {\n        Source = \"person_01.png\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Data Model for Pie Chart\nDESCRIPTION: Defines a data model for representing categorical data points in a Pie Chart, used to store information that will be visualized\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/pie-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for categorical-data-model snippet\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with Multiple Axes Using Transparent Background in XAML\nDESCRIPTION: This XAML code demonstrates how to create two separate charts and add a transparent background to the top chart to achieve multiple axes. It uses the Axis Location property to specify axis positions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-multiple-axes.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <!-- bottom chart -->\n    <telerik:RadCartesianChart x:Name=\"chart\" >\n        <telerik:RadCartesianChart.HorizontalAxis>\n            <telerik:CategoricalAxis ShowLabels=\"True\" />\n        </telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:RadCartesianChart.VerticalAxis>\n            <telerik:NumericalAxis Location=\"Right\"\n                                   ShowLabels=\"True\"/>\n        </telerik:RadCartesianChart.VerticalAxis>\n        <telerik:RadCartesianChart.Series>\n            <telerik:LineSeries CategoryBinding=\"Category\"\n                                ValueBinding=\"Value\"\n                                ShowLabels=\"True\"\n                                ItemsSource=\"{Binding Data}\" />\n        </telerik:RadCartesianChart.Series>\n    </telerik:RadCartesianChart>\n\n    <!-- top chart -->\n    <telerik:RadCartesianChart x:Name=\"chart2\"\n                               BackgroundColor=\"Transparent\">\n        <telerik:RadCartesianChart.HorizontalAxis>\n            <telerik:CategoricalAxis LabelTextColor=\"Transparent\"\n                                     LineColor=\"Transparent\"\n                                     ShowLabels=\"False\"/>\n        </telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:RadCartesianChart.VerticalAxis>\n            <telerik:NumericalAxis ShowLabels=\"True\"/>\n        </telerik:RadCartesianChart.VerticalAxis>\n        <telerik:RadCartesianChart.Series>\n            <telerik:LineSeries CategoryBinding=\"Category\"\n                                ValueBinding=\"Value\"\n                                ShowLabels=\"True\"\n                                ItemsSource=\"{Binding Data1}\" />\n        </telerik:RadCartesianChart.Series>\n    </telerik:RadCartesianChart>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining a SuggestionItemTemplate for AutoComplete in .NET MAUI\nDESCRIPTION: Implements a custom DataTemplate for AutoComplete suggestion items, which will be used to render each suggestion with a custom appearance including images and formatted text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionitem-template.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-suggestion-item-template'/>\n```\n\n----------------------------------------\n\nTITLE: Applying the Appointment Template to a Scheduler Control in XAML\nDESCRIPTION: This snippet shows how to apply a custom appointment template selector to a Telerik UI for .NET MAUI Scheduler control using the AppointmentTemplate property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/appointment-template.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\"\n                       AppointmentTemplate=\"{StaticResource appointmentTemplateSelector}\"\n                       ViewMode=\"Week\">\n    <telerik:RadScheduler.AppointmentsSource>\n        <local:ViewModel/>\n    </telerik:RadScheduler.AppointmentsSource>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Bar Series in MAUI Using XAML\nDESCRIPTION: This snippet demonstrates the declaration of a RadCartesianChart with a horizontal bar series using XAML syntax. This setup includes using a vertical CategoricalAxis and a horizontal Bar Series, which is essential for showcasing data in this orientation format. It requires a view model and appropriate business objects to be implemented.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-orientation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-barhorizontal-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CalendarStyleSelector\nDESCRIPTION: Defines a custom style selector class that inherits from CalendarStyleSelector to provide dynamic styling logic for calendar years based on specific conditions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/year-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomStyleSelector : CalendarStyleSelector\n{\n    public Style SelectStyle(object item, CalendarStyleContext context)\n    {\n        // Custom styling logic for years\n        return yearStyle;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Execute Method for SendMessageCommand in C#\nDESCRIPTION: This snippet shows how to define the Execute method for the SendMessageCommand in the ViewModel. The method will be invoked when the send message button is clicked or the Enter key is pressed. It provides a way to intercept and modify the message before it's added as a ChatItem.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"private void ExecuteSendMessage(object parameter)\n{\n    //Add your custom logic here\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring RadCartesianChart in XAML\nDESCRIPTION: This XAML snippet illustrates how to declare a RadCartesianChart, set its DataContext to an instance of ViewModel, and define its axes and series. It also demonstrates how to configure the Cartesian Chart Grid with specific properties like visibility and color of major lines.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/grid.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries ValueBinding=\"Value\"\n                                CategoryBinding=\"Category\"\n                                ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.Grid>\n        <telerik:CartesianChartGrid StripLinesVisibility=\"Y\"\n                                         MajorLinesVisibility=\"XY\"\n                                         MajorLineColor=\"LightGreen\"\n                                         MajorLineThickness=\"3\" />\n    </telerik:RadCartesianChart.Grid>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Defining Client Business Object for AutoComplete\nDESCRIPTION: C# class implementation for the Client business object used in AutoComplete suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/suggest-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Define RadListView with PropertyGroupDescriptors (XAML)\nDESCRIPTION: This snippet shows how to define a `RadListView` with two `PropertyGroupDescriptors`. The `PropertyGroupDescriptors` are used to specify the properties by which the ListView should be grouped, enabling the multi-level grouping feature.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n \n```\n\n----------------------------------------\n\nTITLE: Setting Value Property for TextMaskedEntry in C#\nDESCRIPTION: This snippet demonstrates how to set the `Value` property of a `TextMaskedEntry` control in C#. This will set the initial value displayed in the MaskedEntry. The `Value` property gets or sets the user input without the formatting characters.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/value.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"this.textMaskedEntry.Value = \\\"Test\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Setting MapShapeReader Source in .NET MAUI\nDESCRIPTION: This snippet sets the source of the MapShapeReader, which is essential for loading geographical data into the Map control.  Loading the .shp file as an EmbeddedResource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/pan-and-zoom.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='map-interactionmode-settintsource' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom KeyLookup Implementation for DelegateGroupDescriptor\nDESCRIPTION: Implementation of the IKeyLookup interface that groups Country objects by the first letter of their name, demonstrating custom grouping logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class FirstLetterKeyLookup : Telerik.Maui.Controls.Data.IKeyLookup\n{\n    public object GetKey(object instance)\n    {\n        var country = instance as Country;\n        return country?.Name.Substring(0, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search Algorithm\nDESCRIPTION: Custom searching algorithm implementation within the TextChanged event handler to filter and assign results to ItemsSource\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/remote-search.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-remote-search-alorithm'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing ScatterLine Series in Telerik .NET MAUI Charts\nDESCRIPTION: This snippet demonstrates how to declare a `RadCartesianChart` with customized ScatterLine Series in XAML. The snippet highlights setting properties like `Stroke` and `StrokeThickness` to alter the appearance of the lines in the chart. It assumes that the business objects and a binding context (ViewModel) are already set up.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-line-series.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:SeriesNumericalViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:NumericalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:ScatterLineSeries XValueBinding=\"XData\"\n                                        YValueBinding=\"YData\"\n                                        Stroke=\"Red\"\n                                        StrokeThickness=\"5\"\n                                        ItemsSource=\"{Binding Data1}\" />\n        <telerik:ScatterLineSeries XValueBinding=\"XData\"\n                                        YValueBinding=\"YData\"\n                                        Stroke=\"Blue\"\n                                        StrokeThickness=\"5\"\n                                        ItemsSource=\"{Binding Data2}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Defining the RadDateTimePicker with Basic Styling\nDESCRIPTION: Example showing how to define a RadDateTimePicker control with basic styling properties like background color, border settings, corner radius, etc.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Restriction Logic in C#\nDESCRIPTION: C# implementation of event handlers that control appointment creation based on whether the selected date is within the current month.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/rad-scheduler-disable-dates-outside-current-month.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool allowAppointmentCreation = false;\n\nprivate void scheduler_DialogOpening(object sender, SchedulerDialogOpeningEventArgs e)\n{\n    if (this.scheduler.ActiveViewDefinition is MonthViewDefinition)\n    {\n        e.Cancel = !this.allowAppointmentCreation;\n    }\n}\n\nprivate void scheduler_MonthDayTapped(object sender, Telerik.Maui.Controls.Scheduler.TappedEventArgs<DateTime> e)\n{\n    var currentMonth = DateTime.Now.Month;\n    var date = e.Data;\n\n    if (date.Month == currentMonth)\n    {\n        this.allowAppointmentCreation = true;\n        this.scheduler.CreateAppointmentWithDialog(new DateRange(date, date.AddHours(1)));\n        this.allowAppointmentCreation = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for AutoComplete\nDESCRIPTION: C# implementation of ViewModel containing collection of Client objects for AutoComplete data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/visual-states.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-extended-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Complete DataGrid with Customized Search Panel in MAUI\nDESCRIPTION: Full XAML example demonstrating how to apply the custom search panel control template to a RadDataGrid, including search panel and search settings configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-datagrid-search-panel-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                     ItemsSource=\"{Binding People}\">\n    <telerik:RadDataGrid.SearchPanel>\n        <telerik:DataGridSearchPanel ControlTemplate=\"{StaticResource DataGridSearchPanel_ControlTemplate}\" />\n    </telerik:RadDataGrid.SearchPanel>\n    <telerik:RadDataGrid.SearchSettings>\n        <telerik:DataGridSearchSettings SearchPanelVisibilityMode=\"AlwaysVisible\" />\n    </telerik:RadDataGrid.SearchSettings>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining a RadDataGrid with Custom Commands in XML\nDESCRIPTION: This snippet shows how to define a RadDataGrid in XAML, set up columns, and use the UserEditMode property for cell editing. It also includes a custom BeginEditCommand to handle edit initiation based on conditions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-conditional-cell-editing.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <telerik:RadDataGrid x:Name=\"dataGrid\" ItemsSource=\"{Binding Source}\" AutoGenerateColumns=\"False\" UserEditMode=\"Cell\">\n        <telerik:RadDataGrid.Columns>\n            <telerik:DataGridTextColumn PropertyName=\"Name\" SizeMode=\"Fixed\" CanUserEdit=\"False\"/>\n            <telerik:DataGridNumericalColumn PropertyName=\"Value\" CanUserEdit=\"False\"/>\n            <telerik:DataGridBooleanColumn PropertyName=\"IsEnabled\" CanUserEdit=\"False\"/>\n            <telerik:DataGridDateColumn PropertyName=\"Date\" CellContentFormat=\"{}{0:MM/dd/yyyy}\" CanUserEdit=\"False\"/>\n            <telerik:DataGridTextColumn PropertyName=\"Text\" />\n        </telerik:RadDataGrid.Columns>\n        <telerik:RadDataGrid.Commands>\n            <local:BeginEditCommand />\n        </telerik:RadDataGrid.Commands>\n        ...\n    </telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for DataPager\nDESCRIPTION: C# code defining the ViewModel to support the DataPager functionality for the CollectionView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/paging.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Method Event Handlers in C#\nDESCRIPTION: Code-behind event handlers for creating, editing, and deleting appointments using Scheduler dialog methods\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/built-in-dialogs.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-dialogs-methods-eventhandlers' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Templates for DataGridTextColumn in XAML\nDESCRIPTION: This example shows how to use CellContentTemplate and CellEditTemplate to customize the appearance and editing behavior of a DataGridTextColumn. It uses a Label for display and an Entry for editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/text-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTextColumn PropertyName=\"Name\" \n\t\t\t\t\t\t\tHeaderText=\"Name\">\n\t<telerik:DataGridColumn.CellContentTemplate>\n\t\t<DataTemplate>\n\t\t\t<Label Text=\"{Binding Name}\" \n\t\t\t\t   LineBreakMode=\"TailTruncation\"\n\t\t\t\t   VerticalOptions=\"Center\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellContentTemplate>\n\t<telerik:DataGridColumn.CellEditTemplate>\n\t\t<DataTemplate>\n\t\t\t<Entry Text=\"{Binding Item.Name, Mode=TwoWay}\" Margin=\"5\"/>\n\t\t</DataTemplate>\n\t</telerik:DataGridColumn.CellEditTemplate>\n</telerik:DataGridTextColumn>\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation for ListView Sorting\nDESCRIPTION: Implements the ViewModel class to support sorting functionality with a collection of items and necessary properties\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/sorting.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-features-sorting-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel and CategoricalData Model in C#\nDESCRIPTION: This C# code defines the CategoricalData model and SeriesCategoricalViewModel class, which provide the data for the chart series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-multiple-axes.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n    public double Value { get; set; }\n}\n\npublic class SeriesCategoricalViewModel\n{\n    public ObservableCollection<CategoricalData> Data1 { get; set; }\n    public ObservableCollection<CategoricalData> Data2 { get; set; }\n\n    public SeriesCategoricalViewModel()\n    {\n        this.Data1 = GetCategoricalData1();\n        this.Data2 = GetCategoricalData2();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData1()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 52 },\n            new CategoricalData { Category = \"Perfecto\", Value = 19 },\n            new CategoricalData { Category = \"NearBy\", Value = 82 },\n            new CategoricalData { Category = \"Family\", Value = 23 },\n            new CategoricalData { Category = \"Fresh\", Value = -2 },\n        };\n        return data;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData2()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 33 },\n            new CategoricalData { Category = \"Perfecto\", Value = 51 },\n            new CategoricalData { Category = \"NearBy\", Value = 11 },\n            new CategoricalData { Category = \"Family\", Value = 94 },\n            new CategoricalData { Category = \"Fresh\", Value = 12 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PropertySortDescriptor in XAML for .NET MAUI DataGrid\nDESCRIPTION: Demonstrates how to set up a PropertySortDescriptor in XAML to sort data in a DataGrid by a specific property. The PropertyName is set to 'Name' in this example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/sorting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid.SortDescriptors>\n\t<telerik:PropertySortDescriptor PropertyName=\"Name\"/>\n</telerik:RadDataGrid.SortDescriptors>\n```\n\n----------------------------------------\n\nTITLE: Adding Required XAML Namespaces\nDESCRIPTION: This snippet shows the namespace declaration required for using Telerik UI controls in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/pull-to-refresh.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Viewer with Custom Search Worker in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply the custom MultipleWordsSearchWorker to the PDF Viewer control through its SearchSettings property. It also configures appearance settings for search results highlighting.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/custom.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\">\n    <telerik:RadPdfViewer.SearchSettings>\n        <telerik:PdfViewerSearchSettings MainSearchResultFill=\"#99FF7F7F\"\n                                            SearchResultsStringFormat=\"Result: {0}, Total: {2}\"\n                                            SearchResultsFill=\"#997FC9FF\"\n                                            TextSearchTrigger=\"TextChanged\">\n            <telerik:PdfViewerSearchSettings.TextSearchWorker>\n                <local:MultipleWordsSearchWorker/>\n            </telerik:PdfViewerSearchSettings.TextSearchWorker>\n        </telerik:PdfViewerSearchSettings>\n    </telerik:RadPdfViewer.SearchSettings>\n</telerik:RadPdfViewer >\n```\n\n----------------------------------------\n\nTITLE: Adding Command to DataGrid\nDESCRIPTION: Adds the custom CellTap command to the DataGrid's Commands collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/cell-tap.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-commands-cetttap-add'/>\n```\n\n----------------------------------------\n\nTITLE: Applying Corner Radius to CheckBox in XAML\nDESCRIPTION: This snippet shows how to set the corner radius of a Telerik .NET MAUI CheckBox using the `CornerRadius` property. It requires the Telerik UI for .NET MAUI library. The `CornerRadius` property takes a nullable double value, which defines the roundness of the CheckBox's corners. This affects the visual rendering of the CheckBox, enhancing UI aesthetics.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox x:Name=\"checkbox\" CornerRadius=\"3\"/>\n```\n\n----------------------------------------\n\nTITLE: ListPicker with SelectionChanged Event in XAML and C#\nDESCRIPTION: Demonstrates how to handle the SelectionChanged event in a ListPicker, showing the XAML configuration and the corresponding event handler method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker Placeholder=\"Pick a name!\"\n\t                        ItemsSource=\"{Binding Items}\"\n\t                        SelectionChanged=\"RadListPicker_SelectionChanged\"\n\t                        DisplayMemberPath=\"FullName\">\n    <telerik:RadListPicker.BindingContext>\n        <local:ViewModel/>\n    </telerik:RadListPicker.BindingContext>\n    <telerik:RadListPicker.ItemTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding Name}\"\n\t\t\t   HorizontalTextAlignment=\"Center\"\n\t\t\t   VerticalTextAlignment=\"Center\"/>\n        </DataTemplate>\n    </telerik:RadListPicker.ItemTemplate>\n</telerik:RadListPicker>\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadListPicker_SelectionChanged(object sender, System.EventArgs e)\n{\n\t// implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Styling AIPrompt Commands View in XAML\nDESCRIPTION: Shows how to style individual commands and command groups in the AIPrompt control using XAML styles. The example demonstrates setting styles for AIPromptCommandItemView and AIPromptCommandGroupView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/commandsview-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-commandsview-style' />\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for Drag and Drop between CollectionViews\nDESCRIPTION: C# code for the ViewModel that provides two ObservableCollection instances to bind to the CollectionViews. The collections contain DataModel items that can be dragged and dropped between CollectionViews.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-between-collectionviews.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class DragDropViewModel\n{\n    public DragDropViewModel()\n    {\n        this.TelerikItems = new ObservableCollection<DataModel>();\n        this.OtherItems = new ObservableCollection<DataModel>();\n\n        for (int i = 0; i < 15; i++)\n        {\n            string name = i % 3 == 0 ? \"Special Item\" : \"Item\";\n            this.TelerikItems.Add(new DataModel() { Name = $\"Telerik {name} {i}\" });\n            \n            if (i < 5)\n            {\n                this.OtherItems.Add(new DataModel() { Name = $\"Other Item {i}\" });\n            }\n        }\n    }\n\n    public ObservableCollection<DataModel> TelerikItems { get; set; }\n    public ObservableCollection<DataModel> OtherItems { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring RadCartesianChart with Line Series in XAML\nDESCRIPTION: This XAML code snippet defines a `RadCartesianChart` with a Line Series, binding its `Value` and `Category` to properties of the `TemporalData` object. It also configures the axes and enables labels on the series, formatting them to two decimal places.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/common-features.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikChart:RadCartesianChart x:Name=\"chart\">\n    <telerikChart:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerikChart:RadCartesianChart.BindingContext>\n    <telerikChart:RadCartesianChart.HorizontalAxis>\n        <telerikChart:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n                                             MajorStepUnit=\"Day\" />\n    </telerikChart:RadCartesianChart.HorizontalAxis>\n    <telerikChart:RadCartesianChart.VerticalAxis>\n        <telerikChart:NumericalAxis Minimum=\"-1.5\"\n                                    Maximum=\"1.5\" />\n    </telerikChart:RadCartesianChart.VerticalAxis>\n    <telerikChart:RadCartesianChart.Series>            \n        <telerikChart:LineSeries ValueBinding=\"Value\"\n                                 CategoryBinding=\"Date\"\n                                 ItemsSource=\"{Binding Data}\"\n                                 ShowLabels=\"True\"\n                                 LabelFormat=\"{}{0:N2}\"/>\n</telerikChart:RadCartesianChart.Series>\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Message for EmailMaskedEntry\nDESCRIPTION: This snippet demonstrates how to set a custom validation error message for the EmailMaskedEntry in .NET MAUI. The `ValidationErrorMessage` property is used to specify the message to be displayed when the email input is invalid. The snippet is designed to be used within a XAML context.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='emailmaskedentry-validationerrormessage-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Expanding a Specific CollectionView Item in C#\nDESCRIPTION: Demonstrates how to expand a specific item within a group using the ExpandItem() method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-expanditem\n```\n\n----------------------------------------\n\nTITLE: Age Filter Implementation\nDESCRIPTION: Implementation of the filtering logic for age-based filtering\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<listview-age-filter/>\n```\n\n----------------------------------------\n\nTITLE: Loading HTML from String\nDESCRIPTION: Example showing how to load HTML content from a string using the FromString method of RichTextSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-getting-started' />\n```\n\n----------------------------------------\n\nTITLE: NumericInput Breaking Changes in Telerik MAUI\nDESCRIPTION: Describes changes to NumericInput control including style property changes, class replacements, and event argument updates. Key changes include replacing EntryStyle with TextInputStyle and using RadTemplatedButtons for increase/decrease functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/8-0-0.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Old implementation\nNumericInputEntry entry;\nNumericInputButton button;\n\n// New implementation\nNumericInputTextInput textInput;\nRadTemplatedButton button;\n\n// Event args change\n// Old: Telerik.Maui.Controls.NumericInput.ValueChangedEventArgs\n// New: Telerik.Maui.Controls.ValueChangedEventArgs\n```\n\n----------------------------------------\n\nTITLE: Creating Data Model for TabView Binding\nDESCRIPTION: Defines a data model class representing individual tab items with properties for title and content\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TabItemModel\n{\n    public string Title { get; set; }\n    public string Content { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom RemoveTokenCommand Implementation in C#\nDESCRIPTION: Custom command class that inherits from AutoCompleteRemoveTokenCommand with override for Execute method to show confirmation dialog.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-custom-removetokencommand' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Gauge in .NET MAUI XAML\nDESCRIPTION: Basic XAML setup for creating a horizontal gauge control that displays values in a linear horizontal format. The gauge can be configured with custom ranges, indicators, and axis settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/gauge-types/horizontal.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='gauge-types-horizontalgauge-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Handling DatePicker SelectionChanged Event in C#\nDESCRIPTION: This C# code snippet demonstrates how to handle the `SelectionChanged` event of the `RadDatePicker` control. The `sender` parameter provides access to the `RadDatePicker` instance, allowing developers to implement custom logic based on the new selected date.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadDatePicker_SelectionChanged(object sender, EventArgs e)\n{\n\t// Implement your logic here.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Commands in .NET MAUI Scheduler\nDESCRIPTION: Example showing how to set up navigation buttons that execute Scheduler commands for date navigation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-navigating-in-current-view' />\n```\n\n----------------------------------------\n\nTITLE: Defining a DataModel Class for CollectionView Items\nDESCRIPTION: A simple C# class that defines the structure of items displayed in the CollectionViews. Each item has a Name property that is bound to the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-between-collectionviews.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataModel\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadCalendar Control with Blackout Dates in XAML\nDESCRIPTION: Configure a RadCalendar control to display and restrict selection of specific dates using the BlackoutDates property. This XAML snippet demonstrates how to bind blackout dates from a view model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/blackout-dates.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Placeholder for calendar-blackout-dates snippet -->\n```\n\n----------------------------------------\n\nTITLE: Implementing ItemTapped Event Handler in C#\nDESCRIPTION: This C# code snippet shows the implementation of the ItemTapped event handler for the RadCollectionView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void CollectionView_ItemTapped(object sender, Telerik.Maui.Controls.CollectionView.RadTappedEventArgs e)\n{\n    var item = (e.Data as DataModel);\n    // implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Styles in XAML for DataPager\nDESCRIPTION: This snippet shows how to define various styles used by the DataPager's PageSizes view, including ComboBox and Label styles. These styles enhance the aesthetic and functional aspects of the pagination UI component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/pagesizes.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ComboStyle\" TargetType=\"telerik:RadComboBox\">\n\n</Style>\n<Style x:Key=\"LabelStyle\" TargetType=\"Label\">\n\n</Style>\n<Style x:Key=\"PageSizesViewStyle\" TargetType=\"telerik:DataPagerPageSizesView\">\n    <Setter Property=\"ComboBoxStyle\" Value=\"{StaticResource ComboStyle}\" />\n    <Setter Property=\"LabelStyle\" Value=\"{StaticResource LabelStyle}\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Declaring AutoComplete Control with Remote Search\nDESCRIPTION: XAML declaration of RadAutoComplete control with remote search configuration including LoadingTemplate\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/remote-search.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-remote-search'/>\n```\n\n----------------------------------------\n\nTITLE: Chat TimePicker Implementation\nDESCRIPTION: This snippet demonstrates how to integrate a TimePicker within the RadChat control in .NET MAUI. It uses TimePickerContext to display a clock view for selecting a time. The TimePickerContext allows you to configure properties such as StartTime, EndTime, and TimeInterval.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/timepicker.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chat-chatpicker-timepicker' />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to MAUI Slider\nDESCRIPTION: Example showing how to apply the custom backtrack and range track styles to a Slider control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/track-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-track-style-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Style Selector in C#\nDESCRIPTION: Implements a custom style selector for Slider labels that applies different styles based on the slider's value range\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/labels-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for slider-labels-styleselector-class snippet\n```\n\n----------------------------------------\n\nTITLE: Defining RadPopup in Shell\nDESCRIPTION: This snippet demonstrates how to define a RadPopup within a Shell, setting it up with a content view. It's crucial for making the popup available throughout the app.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-popup-irrespective-screen.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Shell ...>\n    <telerik:RadPopup.Popup>\n        <telerik:RadPopup x:Name=\"MyPopup\" Placement=\"Center\">\n            <contentViews:PopupContentView />\n        </telerik:RadPopup>\n    </telerik:RadPopup.Popup>\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Configuring Predefined BusyIndicator Animations - C#\nDESCRIPTION: This snippet demonstrates how to configure the predefined animations of the BusyIndicator control by setting the AnimationType property to one of the available animation enums.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/animations.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Example code to configure BusyIndicator animations\nBusyIndicator busyIndicator = new BusyIndicator();\nbusyIndicator.AnimationType = AnimationType.Animation2; // Change to desired animation\nbusyIndicator.IsBusy = true; // Ensure the animation is visible\n```\n\n----------------------------------------\n\nTITLE: Using Telerik Font Icons in .NET MAUI Code\nDESCRIPTION: To use a Telerik font icon in your .NET MAUI code-behind or other C# code, you can reference the icon using its Unicode value. For example, to use the 'sort descent' icon, you would use \\ue800 in your C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/examples-icons.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nlabel.Text = \"\\ue800\";\nlabel.FontFamily = \"TelerikFontFamily\";\n```\n\n----------------------------------------\n\nTITLE: Adding a TextMessage to RadChat in C#\nDESCRIPTION: This code snippet demonstrates how to create `Author` and `TextMessage` objects and add them to the `Items` collection of a `RadChat` control. It sets the author's name and avatar, and the text content of the message.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/items/chat-messages.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar bot = new Author() { Name = \"bot\", Avatar = \"SampleAvatar.png\" };\nchat.Items.Add(new TextMessage { Author = bot, Text = \"Hi.\" });\nchat.Items.Add(new TextMessage { Author = bot, Text = \"This is a message.\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Content Template in DataGrid XAML\nDESCRIPTION: Demonstrates how to define an empty template for a DataGrid when no items are present. Supports two display modes: ItemsSourceNull and ItemsSourceNullOrEmpty.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/empty-template.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid EmptyContentTemplate=\"{StaticResource EmptyTemplate}\"\n                    EmptyContentDisplayMode=\"ItemsSourceNullOrEmpty\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadAutoComplete with Tokens Support in XAML\nDESCRIPTION: Shows how to declare a RadAutoComplete control with Tokens support in XAML, including necessary properties and templates for multiple selection functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/tokens-support.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-tokens'/>\n```\n\n----------------------------------------\n\nTITLE: Clearing DatePicker Selection Programmatically in C#\nDESCRIPTION: This C# code snippet shows how to clear the selected date in a DatePicker control programmatically. It calls the `ClearSelection` method of the `RadDatePicker` instance in response to a button click. As a result, the `Date` property will be updated to `null`.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e)\n{\n    this.datePicker.ClearSelection();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ListView Data View in C#\nDESCRIPTION: The snippet demonstrates how to call the `GetDataView` method on a ListView to retrieve a view of items after sorting, grouping, and filtering. The `IDataViewCollection` returned is used to perform expand and collapse operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/expand-collapse.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar dataView = this.listView.GetDataView();\n```\n\n----------------------------------------\n\nTITLE: Using Composite Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet illustrates how to create a CompositeFilterDescriptor in XAML to apply combined filtering conditions using logical operators. The Descriptors collection holds other filter descriptors that define the criteria.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:CompositeFilterDescriptor Operator=\"And\">\n\t<telerik:CompositeFilterDescriptor.Descriptors>\n\t\t<telerik:NumericalFilterDescriptor PropertyName=\"StadiumCapacity\"\n                                           Operator=\"IsGreaterThan\"\n                                           Value=\"55000\"/>\n\t\t\t<telerik:NumericalFilterDescriptor PropertyName=\"StadiumCapacity\"\n                                               Operator=\"IsLessThan\"\n                                               Value=\"85000\"/>\n\t</telerik:CompositeFilterDescriptor.Descriptors>\n</telerik:CompositeFilterDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Event Handlers in C#\nDESCRIPTION: Event handler methods for managing Scheduler dialog opening and closing events\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/built-in-dialogs.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-dialogs-events' />\n```\n\n----------------------------------------\n\nTITLE: SignaturePad ClearCommand\nDESCRIPTION: This snippet shows how to use the ClearCommand of the SignaturePad to clear the signature.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='signaturepad-clear-command'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid in XAML with ItemsSource Binding\nDESCRIPTION: Shows how to define the DataGrid in XAML and bind its ItemsSource to the People collection in the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n\t\t\t\t\t ItemsSource=\"{Binding People}\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadAutoComplete Control in XAML\nDESCRIPTION: This snippet demonstrates how to declare and configure the RadAutoComplete control in XAML, including data binding to the ViewModel's client collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/methods.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-data-binding'/>\n```\n\n----------------------------------------\n\nTITLE: Navigation ItemTemplateSelector Implementation\nDESCRIPTION: Implements the NavigationItemTemplateSelector.  This selector likely contains logic to determine which template to apply to each navigation item based on its data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='navigationview-databinding-templateselector'/>\n```\n\n----------------------------------------\n\nTITLE: ImageEditor Commands Definition in XAML\nDESCRIPTION: This XAML snippet defines an ImageEditor control with various commands such as Brightness, Hue, Crop, Flip, Rotate, Cancel, and Accept integrated into its toolbar. It showcases how these commands can be declared and bound within the XAML markup to provide interactive image editing capabilities. The snippet provides a starting point for implementing customized image editing functionalities within a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"<snippet id='imageeditor-commands-xaml'/>\"\n```\n\n----------------------------------------\n\nTITLE: Defining a NavigationView in XAML for .NET MAUI\nDESCRIPTION: This snippet illustrates how to define a NavigationView in XAML. The `RadNavigationView` control provides a read-only collection of navigation items. Make sure that the required Telerik namespace is added to your XAML file for proper usage.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-getting-started-xaml' />\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Chart Series Categorical View Model\nDESCRIPTION: This C# snippet defines a view model for a chart series, containing a collection of categorical data items. This view model is used to bind data to the chart series in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/spline-area-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-series-categorical-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar Properties\nDESCRIPTION: This snippet illustrates how to define properties for the .NET MAUI Calendar, allowing configuration of the selection options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-selection-properties'/>\n```\n\n----------------------------------------\n\nTITLE: Committing Changes for Specific Property in .NET MAUI DataForm\nDESCRIPTION: Shows how to use the CommitChanges(string propertyName) method to commit changes for a specific property in the DataForm. This is useful when working with explicit commit mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commit-data.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nbool isCommitted = this.dataForm.CommitChanges(\"PropertyName\");\n```\n\n----------------------------------------\n\nTITLE: Defining ListView GroupHeaderTemplate in XAML\nDESCRIPTION: This code snippet shows how to define a custom GroupHeaderTemplate for a .NET MAUI ListView. The DataTemplate contains a Grid with labels to display the group's key and an expand/collapse indicator. The expand/collapse indicator uses a DataTrigger to change its text based on the `IsExpanded` property of the group.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/customize-group-header.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"ListViewGroupHeaderTemplate\">\n    <Grid>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition />\n        </Grid.ColumnDefinitions>\n        <Label Text=\"&#x25B8;\" Margin=\"8, 12, 0, 6\" TextColor=\"DarkGray\" FontSize=\"Medium\">\n            <Label.Triggers>\n                <DataTrigger TargetType=\"Label\" Binding=\"{Binding IsExpanded}\" Value=\"True\">\n                    <Setter Property=\"Text\" Value=\"&#x25BE;\" />\n                </DataTrigger>\n            </Label.Triggers>\n        </Label>\n        <Label Margin=\"0, 12, 0, 6\" Text=\"{Binding Key}\" Grid.Column=\"1\" TextColor=\"DarkGray\" FontSize=\"Medium\" HorizontalOptions=\"Start\" />\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Fixed Column Width Configuration\nDESCRIPTION: XAML configuration for DataGrid columns with fixed widths using SizeMode=\"Fixed\".\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/width.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" AutoGenerateColumns=\"False\">\n\t<telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"100\" SizeMode=\"Fixed\"/>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Capital\" HeaderText=\"Capital\" Width=\"200\" SizeMode=\"Fixed\"/>\n\t</telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar with Selection Change Event\nDESCRIPTION: This code illustrates how to define a Calendar and handle the SelectionChanged event, which reacts to changes in selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-selection-event'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Value and Progress in .NET MAUI ProgressBar\nDESCRIPTION: Demonstrates how to update the Value property and monitor Progress in a ProgressBar control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-value'/>\n```\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='progressbar-configuration-valueupdated'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for ScatterSpline Series in C#\nDESCRIPTION: This snippet shows how to set up a ViewModel that will manage the data for the ScatterSpline Series. It serves as an intermediary between the view and the data model, facilitating data-binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-series.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chart-series-series-numerical-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with Suggest Mode\nDESCRIPTION: XAML implementation of AutoComplete control with SuggestMode set to Suggest, which shows a dropdown list of suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/suggest-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-suggestmode-suggest'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring SourcePasswordNeeded Event in XAML for .NET MAUI PDF Viewer\nDESCRIPTION: Demonstrates how to set up the SourcePasswordNeeded event handler in XAML. This event is triggered when a password-protected PDF document is loaded into the viewer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/password.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\" \n                      SourcePasswordNeeded=\"pdfViewer_SourcePasswordNeeded\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Business Model - C#\nDESCRIPTION: This C# snippet defines a data model for the Candlestick Series, incorporating properties for open, high, low, and close prices which are crucial for stock market data representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/candlestick-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class OhlcDataPoint\n{\n    public DateTime Date { get; set; }\n    public double Open { get; set; }\n    public double High { get; set; }\n    public double Low { get; set; }\n    public double Close { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Style in .NET MAUI Gauge Axis\nDESCRIPTION: Sets font attributes and size for the axis labels to customize their appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis FontAttributes=\"Bold\"\n                               FontSize=\"30\"\n                               Maximum=\"4\"\n                               Minimum=\"0\"\n                               Step=\"0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet shows how to use the DateTimeFilterDescriptor in XAML for filtering properties of type System.DateTime. You can set the PropertyName, Operator, and Value for filtering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DateTimeFilterDescriptor PropertyName=\"Established\"\n                                  Operator=\"IsLessThan\"\n                                  Value=\"1900/01/01\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadNavigationView with Minimal DisplayMode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadNavigationView with the DisplayMode set to Minimal. In this mode, the navigation pane is hidden by default and appears when the menu button is clicked. The provided namespace must be added to the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/display-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-displaymide-minimal'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Style Selector for ListView - .NET MAUI - C#\nDESCRIPTION: This snippet demonstrates how to create a custom class that derives from `ListViewStyleSelector` and overrides its `OnSelectStyle` method to apply different styles to items based on specific conditions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/style-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyStyleSelector : ListViewStyleSelector\n{\n    protected override DataTemplate OnSelectStyle(object item, BindableObject container)\n    {\n        // Logic to select style based on item properties\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Popup Placement Event\nDESCRIPTION: C# event handler code for the RadTemplatedButton's Clicked event that controls the Popup placement behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/placement.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='popup-features-placement-event' />\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox with Header and Footer Templates in XAML\nDESCRIPTION: This snippet demonstrates how to define a ComboBox control with header and footer templates in XAML. It includes the HeaderTemplate and FooterTemplate properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/header-footer.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-header-footer-template'/>\n```\n\n----------------------------------------\n\nTITLE: Styling TabView Content in .NET MAUI\nDESCRIPTION: Demonstrates how to apply custom styling to the TabView content using the ContentStyle property. This includes setting background color, border color, border thickness, corner radius, and content padding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/styling/content-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView>\n    <telerik:RadTabView.ContentStyle>\n        <Style TargetType=\"telerik:TabViewContent\">\n            <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n            <Setter Property=\"BorderColor\" Value=\"DarkBlue\" />\n            <Setter Property=\"BorderThickness\" Value=\"2\" />\n            <Setter Property=\"CornerRadius\" Value=\"10\" />\n            <Setter Property=\"ContentPadding\" Value=\"15\" />\n        </Style>\n    </telerik:RadTabView.ContentStyle>\n    <!-- TabView Items -->\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gauge Animations in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet demonstrates how to configure the AnimationSettings property for a RadRadialGauge in .NET MAUI. It shows how to set the Easing property of the AnimationSettings to CubicOut, effectively customizing the animation behavior of the gauge indicators.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/animations.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRadialGauge x:Name=\"gauge1\"\n\t\t\t\t\t    Grid.Row=\"1\"\n\t\t\t\t\t    Grid.Column=\"1\">\n    <telerik:RadRadialGauge.AnimationSettings>\n        <telerik:AnimationSettings x:Name=\"gauge1Animations\" Easing=\"{Static Easing.CubicOut}\" />\n    </telerik:RadRadialGauge.AnimationSettings>\n    <telerik:RadRadialGauge.Axis>\n        <telerik:GaugeLinearAxis Maximum=\"200\"\n\t\t\t\t\t\t\t     Minimum=\"0\"\n\t\t\t\t\t\t\t     Step=\"25\" />\n    </telerik:RadRadialGauge.Axis>\n    <telerik:RadRadialGauge.Indicators>\n        <telerik:GaugeShapeIndicator Value=\"80\" />\n        <telerik:GaugeBarIndicator Offset=\"30\" Value=\"100\" />\n        <telerik:GaugeNeedleIndicator Fill=\"Blue\"\n\t\t\t\t\t\t\t\t\t  Offset=\"30\"\n\t\t\t\t\t\t\t\t\t  Value=\"120\" />\n    </telerik:RadRadialGauge.Indicators>\n    <telerik:RadRadialGauge.Ranges>\n        <telerik:GaugeRangesDefinition>\n            <telerik:GaugeRange Color=\"Green\"\n\t\t\t\t\t\t\t    From=\"0\"\n\t\t\t\t\t\t\t    To=\"150\" />\n            <telerik:GaugeGradientRange From=\"150\" To=\"200\">\n                <telerik:RadGradientStop Offset=\"150\" Color=\"Yellow\" />\n                <telerik:RadGradientStop Offset=\"200\" Color=\"Red\" />\n            </telerik:GaugeGradientRange>\n        </telerik:GaugeRangesDefinition>\n    </telerik:RadRadialGauge.Ranges>\n</telerik:RadRadialGauge>\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView Check and Uncheck Commands in .NET MAUI\nDESCRIPTION: Example demonstrating how to implement check and uncheck functionality in a TreeView control using commands. Shows the usage of CheckAll and UncheckAll commands.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='treeview-check-uncheck-commands'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text in AutoComplete Control\nDESCRIPTION: Demonstrates how to implement a watermark/placeholder text in a Telerik AutoComplete control for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete Placeholder=\"Search here...\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TokenTemplate for AutoComplete in XAML\nDESCRIPTION: Demonstrates how to create a custom TokenTemplate for the AutoComplete control using XAML, including a Label with a TapGestureRecognizer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/token-template.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAutoComplete.TokenTemplate>\n    <DataTemplate>\n        <Grid BackgroundColor=\"LightBlue\">\n            <Label Text=\"{Binding Name}\" TextColor=\"Blue\">\n                <Label.GestureRecognizers>\n                    <TapGestureRecognizer Tapped=\"TapGestureRecognizer_Tapped\"/>\n                </Label.GestureRecognizers>\n            </Label>\n        </Grid>\n    </DataTemplate>\n</telerik:RadAutoComplete.TokenTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with Swipe Events in XAML\nDESCRIPTION: This snippet shows how to define a RadCollectionView control with item swiping events, including configuration for swipe templates and behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                           ItemsSource=\"{Binding Items}\"\n                           ItemSwipeThreshold=\"100\"\n                           StartItemSwipeTemplate=\"{StaticResource StartSwipeTemplate}\"\n                           EndItemSwipeTemplate=\"{StaticResource EndSwipeTemplate}\"\n                           ItemSwipeDirection=\"End\"\n                           SwipeStarting=\"CollectionView_SwipeStarting\"\n                           Swiping=\"CollectionView_Swiping\"\n                           SwipeCompleted=\"CollectionView_SwipeCompleted\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RadListView with Reorder Command in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadListView with grouping using PropertyGroupDescriptor and enable the Reorder command. The snippet is critical to initiate the reordering feature for grouped list items in .NET MAUI ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/reorder-items.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RadToolbar and RadioButtonToolbarItem for Reduced Height in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set up a RadToolbar with a reduced height of 30 units and configure a RadioButtonToolbarItem to fit within it. It includes styling for proper alignment, font size adjustments for different platforms, and minimum height settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/adjust-toolbar-height-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToolbar x:Name=\"toolbar\" HeightRequest=\"30\">\n    <telerik:RadioButtonToolbarItem Text=\"TEST\">\n        <telerik:RadioButtonToolbarItem.Style>\n            <Style TargetType=\"telerik:RadioButtonToolbarItemView\">\n                <Setter Property=\"DisplayOptions\" Value=\"Text\" />\n                <Setter Property=\"VerticalContentOptions\" Value=\"Center\" />\n                <Setter Property=\"HorizontalContentOptions\" Value=\"Center\" />\n                <Setter Property=\"FontSize\" Value=\"{OnPlatform WinUI=14, Android=12}\" />\n                <Setter Property=\"ContentPadding\" Value=\"0\" />\n                <Setter Property=\"Margin\" Value=\"0\" />\n                <Setter Property=\"Padding\" Value=\"1\" />\n                <Setter Property=\"MinimumHeightRequest\" Value=\"16\" />\n            </Style>\n        </telerik:RadioButtonToolbarItem.Style>\n    </telerik:RadioButtonToolbarItem>\n</telerik:RadToolbar>\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for RichTextEditor Custom Image Picker\nDESCRIPTION: This code snippet shows the implementation of a ViewModel to provide data for the custom image picker and RichTextEditor source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/working-with-images/insert-images.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-customimage-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Applying Label Style Selector to Slider in XAML\nDESCRIPTION: Shows how to apply the custom label style selector to a Telerik Slider control in XAML\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/labels-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n// Placeholder for slider-styling-labelsstyleselector-xaml snippet\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeSlider Track Properties in XAML\nDESCRIPTION: Shows how to set up the basic minimum and maximum values that define the track limits of a RangeSlider control. The track represents the full range of values that users can select from.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/track-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Animation - XAML\nDESCRIPTION: This snippet illustrates how to create a custom animation using XAML by setting the AnimationType to Custom and defining the BusyContent and Animations properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/animations.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<BusyIndicator AnimationType=\"Custom\">\n    <BusyIndicator.BusyContent>\n        <Label Text=\"Loading...\" />\n    </BusyIndicator.BusyContent>\n    <BusyIndicator.Animations>\n        <RadAnimation>\n            <!-- Define custom animation here -->\n        </RadAnimation>\n    </BusyIndicator.Animations>\n</BusyIndicator>\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation\nDESCRIPTION: C# class implementing the ViewModel for the DataGrid data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-column-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TreeView Style in XAML\nDESCRIPTION: XAML code that defines a custom ControlTemplate and Style for TreeViewItemView to remove the selection indicator. The template modifies the default appearance by omitting the selection indicator border element while maintaining other visual elements like background color and content layout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-selection-indicator-treeview-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <ControlTemplate x:Key=\"TreeViewItemView_ControlTemplate_WinUI\">\n            <telerik:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n                               BorderColor=\"{TemplateBinding BorderColor}\"\n                               BorderBrush=\"{TemplateBinding BorderBrush}\"\n                               BorderThickness=\"{TemplateBinding BorderThickness}\"\n                               CornerRadius=\"{TemplateBinding CornerRadius}\">\n                <Grid>\n                    <telerik:TreeViewItemLayout Indentation=\"{TemplateBinding Indentation}\"\n                                                Spacing=\"{TemplateBinding Spacing}\"\n                                                Padding=\"{TemplateBinding ContentPadding}\">\n                        <ContentPresenter />\n                    </telerik:TreeViewItemLayout>\n                </Grid>\n            </telerik:RadBorder>\n        </ControlTemplate>\n\n        <Style TargetType=\"telerik:TreeViewItemView\">\n            <Setter Property=\"ControlTemplate\" Value=\"{StaticResource TreeViewItemView_ControlTemplate_WinUI}\"/>\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\n<telerik:RadTreeView x:Name=\"treeView\"\n                     AutomationId=\"treeView\"\n                     ItemsSource=\"{Binding Items}\">\n    <telerik:TreeViewDescriptor DisplayMemberPath=\"Name\"\n                                ItemsSourcePath=\"Children\"\n                                TargetType=\"{x:Type local:Item}\" />\n    <telerik:RadTreeView.BindingContext>\n        <local:ViewModel/>\n    </telerik:RadTreeView.BindingContext>\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Button Visibility in Telerik DateTimePicker for .NET MAUI\nDESCRIPTION: This code snippet illustrates how to explicitly set the IsToggleButtonVisible property to True to show an arrow button for opening the date picker UI. By default, this is enabled for desktop platforms and disabled for mobile platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\"\n\t\t\t\t\t\t\t\tPickerMode=\"DropDown\"\n\t\t\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Sample Data and Commands for ListView Context Menu\nDESCRIPTION: Creates a ViewModel class that populates an ObservableCollection with sample data and defines a command to toggle the context menu popup. The OpenContextMenuCommand changes the IsPopupOpen property of the selected item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-context-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.People = new ObservableCollection<DataItem>()\n        {\n            new DataItem(\"Freda Curtis\"),\n            new DataItem(\"Jeffery Francis\"),\n            new DataItem(\"Eva Lawson\"),\n            new DataItem(\"Emmett Santos\"),\n            new DataItem(\"Theresa Bryan\"),\n            new DataItem(\"Jenny Fuller\")\n        };\n\n        OpenContextMenuCommand = new Command<DataItem>(item => item.IsPopupOpen = !item.IsPopupOpen);\n    }\n\n    public ObservableCollection<DataItem> People { get; set; }\n    public Command<DataItem> OpenContextMenuCommand { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Radial Gauge in .NET MAUI XAML\nDESCRIPTION: This snippet demonstrates the basic XAML markup for setting up a Radial Gauge in a .NET MAUI application. It includes the necessary namespace declarations and the gauge control definition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/gauge-types/radial.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='gauge-types-radialgauge-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: ListView Initialization with Template Cell\nDESCRIPTION: Code to initialize a RadListView with a custom template cell, binding it to a data source and setting up the item template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/template-cell.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar listView = new RadListView\n{\n    ItemsSource = new ViewModel().Source,\n    ItemTemplate = new DataTemplate(() =>\n    {\n        return new ListViewTemplateCell\n        {\n            View = GetCellContent()\n        };\n    }),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Blackout Dates in C#\nDESCRIPTION: Implement a view model that defines a collection of dates to be disabled in the Telerik .NET MAUI Calendar. This snippet shows how to create an IEnumerable of DateTime representing blackout dates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/blackout-dates.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for calendar-blackoutdates-viewmode snippet\n```\n\n----------------------------------------\n\nTITLE: Retrieving Row Count in DataGrid for .NET MAUI\nDESCRIPTION: This snippet retrieves the number of rows in a DataGrid by counting the items in the collection bound to its `ItemsSource` property. The code assumes that the `ItemsSource` is an `ObservableCollection` of type `FilesData`. The count is converted to a string for display purposes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-row-column-counts.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar rowNumber = (this.dataGrid.ItemsSource as ObservableCollection<FilesData>).Count.ToString();\n```\n\n----------------------------------------\n\nTITLE: NavigationView NavigationItem Implicit Style XAML\nDESCRIPTION: This XAML snippet demonstrates how to define an implicit style for a NavigationViewItem. The style targets the NavigationViewItemView and sets the Spacing property. Since it's implicit, it will be applied to all NavigationViewItemView instances within the scope.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/navigationitem.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:NavigationViewItemView\">\n   <Setter Property=\"Spacing\" Value=\"10\"/>            \n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid for CRUD operations in XAML\nDESCRIPTION: This snippet showcases how to define a DataGrid in XAML for CRUD operations. It sets up the DataGrid with specific properties like AutoGenerateColumns, UserEditMode, and UserDeleteMode to enable editing and deleting functionalities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n\"<telerik:RadDataGrid x:Name=\\\"dataGrid\\\"\n                         ItemsSource=\\\" {Binding Items} \\\" \n                         AutoGenerateColumns=\\\"True\\\"\n                         UserEditMode=\\\"Inline\\\"\n                         UserDeleteMode=\\\"Row\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Defining RadChat Component in XAML\nDESCRIPTION: This snippet demonstrates how to define the RadChat component in XAML and bind the SendMessageCommand to a property in the ViewModel. The Command property is bound to the SendMessageCommand defined in the ViewModel which allows the custom logic to be executed when a new message is sent.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n\"<telerik:RadChat SendMessageCommand=\"{Binding SendMessageCommand}\"/>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for AutoComplete in C#\nDESCRIPTION: Demonstrates the creation of a ViewModel with a collection of City objects to bind to the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/tokens-support.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-city-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Load On Demand Properties in .NET MAUI CollectionView\nDESCRIPTION: Core properties for configuring the Load On Demand functionality, including enabling the feature, controlling loading indicators, and setting buffer items count.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\nIsLoadOnDemandEnabled: bool\nIsLoadOnDemandActive: bool\nLoadOnDemandMode: Telerik.Maui.LoadOnDemandMode\nLoadOnDemandBufferItemsCount: int\nAutomaticLoadOnDemandTemplate: DataTemplate\nManualLoadOnDemandTemplate: DataTemplate\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing Groups by Item in C# for .NET MAUI DataGrid\nDESCRIPTION: This code shows how to use the ExpandItem and CollapseItem methods to expand or collapse the immediate group containing a specific data item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/expand-collapse.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar lastItem = (dataGrid.ItemsSource as IEnumerable<City>).Last();\nvar dataView = this.dataGrid.GetDataView();\ndataView.CollapseItem(lastItem);\n```\n\n----------------------------------------\n\nTITLE: Implementing SlideView Commands in .NET MAUI\nDESCRIPTION: Example showing how to implement commands in a SlideView control. The code demonstrates the basic setup of a SlideView with command functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='slideview-commands' />\n```\n\n----------------------------------------\n\nTITLE: Creating Book Model for CollectionView Integration - C#\nDESCRIPTION: This code snippet demonstrates how to create a sample `Book` class that serves as the data model for the `ItemsSource` of the CollectionView in .NET MAUI. It is essential for establishing the structure of the data that will be displayed in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Book {\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string ISBN { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CollectionView Grid Layout Implementation in XAML\nDESCRIPTION: Basic example showing how to define a RadCollectionView with CollectionViewGridLayout. This enables grid-style item arrangement within the collection view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/grid-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView>\n    <telerik:RadCollectionView.ItemsLayout>\n        <telerik:CollectionViewGridLayout />\n    </telerik:RadCollectionView.ItemsLayout>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimePicker Commands in XAML\nDESCRIPTION: Demonstrates how to bind ToggleCommand and ClearCommand to buttons for programmatic control of the DateTimePicker\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n\t<Button Text=\"Toggle Command\" Command=\"{Binding Source={x:Reference dateTimePicker}, Path=ToggleCommand}\"/>\n\t<Button Text=\"Clear Command\" Command=\"{Binding Source={x:Reference dateTimePicker}, Path=ClearCommand}\"/>\n\t<telerik:RadDateTimePicker x:Name=\"dateTimePicker\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing CellDecorationStyleSelector in C#\nDESCRIPTION: C# code snippet demonstrating the implementation of MyCellDecorationStyleSelector class derived from DataGridStyleSelector.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCellDecorationStyleSelector : DataGridStyleSelector\n{\n    protected override DataGridStyle SelectStyle(object item, BindableObject container)\n    {\n        var dataItem = item as Data;\n        var style = new DataGridStyle();\n\n        if (dataItem.Country == \"USA\")\n        {\n            style.Background = Colors.LightBlue;\n        }\n        else\n        {\n            style.Background = Colors.LightYellow;\n        }\n\n        return style;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupViewStyleSelector in C#\nDESCRIPTION: Creates a custom GroupViewStyleSelector class that chooses the appropriate style based on the group's population size.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style-selector.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class GroupViewStyleSelector : StyleSelector\n{\n    public Style SmallGroupStyle { get; set; }\n    public Style MediumGroupStyle { get; set; }\n    public Style LargeGroupStyle { get; set; }\n\n    protected override Style SelectStyleCore(object item, BindableObject container)\n    {\n        var group = item as IReadOnlyList<Country>;\n        if (group == null || group.Count == 0)\n        {\n            return null;\n        }\n\n        var population = group[0].Population;\n        if (population < 10000000)\n        {\n            return this.SmallGroupStyle;\n        }\n        else if (population < 100000000)\n        {\n            return this.MediumGroupStyle;\n        }\n        else\n        {\n            return this.LargeGroupStyle;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Viewer Search Settings with Custom Highlight Colors\nDESCRIPTION: Code snippet showing how to customize search options, including case sensitivity, whole words matching, and custom highlight colors for search results in the PDF Viewer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\">\n    <telerik:RadPdfViewer.SearchSettings>\n        <telerik:PdfViewerSearchSettings>\n            <telerik:PdfViewerSearchSettings.SearchOptions>\n                <telerikTextSearch:TextSearchOptions CaseSensitive=\"False\" \n                                                   WholeWordsOnly=\"True\" \n                                                   UseRegularExpression=\"False\" />\n            </telerik:PdfViewerSearchSettings.SearchOptions>\n            <telerik:PdfViewerSearchSettings.MainSearchResultFill>\n                <Color>#5A4CFF</Color>\n            </telerik:PdfViewerSearchSettings.MainSearchResultFill>\n            <telerik:PdfViewerSearchSettings.SearchResultsFill>\n                <Color>#FFCE00</Color>\n            </telerik:PdfViewerSearchSettings.SearchResultsFill>\n        </telerik:PdfViewerSearchSettings>\n    </telerik:RadPdfViewer.SearchSettings>\n</telerik:RadPdfViewer>\n```\n\n----------------------------------------\n\nTITLE: Styling the Spinner Header in DateTimePicker\nDESCRIPTION: Shows how to customize the appearance of the spinner header labels in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style-spinner-header-style' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Controls in .NET MAUI Application\nDESCRIPTION: Registers Telerik controls in a .NET MAUI application by calling the UseTelerik extension method in the MauiProgram.cs file during application initialization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Binding GroupDescriptors in XAML\nDESCRIPTION: Use OneWayToSource binding mode to connect the ViewModel's GroupDescriptors collection to the RadListView's GroupDescriptors property, enabling MVVM-based grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/bindable-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView GroupDescriptors=\"{Binding GroupDescriptors, Mode=OneWayToSource}\">\n    <!-- ListView configuration -->\n</telerik:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Handling PDF Loading in Popup with C# Code-Behind in .NET MAUI\nDESCRIPTION: This C# code-behind implementation shows how to handle button click events to open and close a popup, and load a PDF document into the PDF viewer from embedded resources when the popup is shown.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-display-pdf-documents-popup-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\n\nnamespace YourNamespace;\n\npublic partial class YourPage : ContentPage\n{\n    public YourPage()\n    {\n        InitializeComponent();\n    }\n\n    private void ShowPopupClicked(object sender, EventArgs e)\n    {\n        this.popup.IsOpen = true;\n        Func<CancellationToken, Task<Stream>> streamFunc = ct => Task.Run(() =>\n        {\n            Assembly assembly = GetType().Assembly;\n            string fileName = assembly.GetManifestResourceNames().FirstOrDefault(n => n.Contains(\"your-pdf-file.pdf\"));\n            Stream stream = assembly.GetManifestResourceStream(fileName);\n            return stream;\n        });\n        this.viewer.Source = streamFunc;\n    }\n\n    private void ClosePopup(object sender, EventArgs e)\n    {\n        this.popup.IsOpen = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Week View Definition in MAUI Scheduler\nDESCRIPTION: Demonstrates how to add a WeekViewDefinition to the ViewDefinitions collection of a RadScheduler instance. This configuration enables the week view display in the scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/views/week-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:WeekViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButton with Command in XAML\nDESCRIPTION: Defines a ToggleButton in XAML with Command property binding to a ViewModel command.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/command.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='togglebutton-command-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet provides an example of using the BooleanFilterDescriptor in XAML for filtering based on boolean properties. The PropertyName and Value must be set.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:BooleanFilterDescriptor PropertyName=\"IsChampion\"\n                                 Value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing SuggestionView in AutoComplete\nDESCRIPTION: Demonstrates how to customize the appearance and behavior of the suggestion view (dropdown) in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete SuggestionViewHeight=\"200\" \n                               SuggestionViewBorderColor=\"LightGray\" \n                               SuggestionViewBorderThickness=\"1\" \n                               SuggestionViewCornerRadius=\"5\" \n                               SuggestionViewBackgroundColor=\"White\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeChanging Event Handler in C#\nDESCRIPTION: This C# code demonstrates how to implement the RangeChanging event handler. It prevents dragging the start/end thumbs if the range becomes less than 20.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RangeSlider_RangeChanging(object sender, Telerik.Maui.RangeChangingEventArgs e)\n{\n\tvar rangeSlider = (RadRangeSlider)sender;\n\tif((e.RangeEnd - e.RangeStart) < 20)\n\t{\n\t\te.RangeStart = rangeSlider.RangeStart;\n\t\te.RangeEnd = rangeSlider.RangeEnd;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SplineArea Series XAML and C#\nDESCRIPTION: This snippet demonstrates how to declare a RadCartesianChart with a SplineArea series in both XAML and C#.  It sets up the chart and binds it to a data source to display the series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/spline-area-series.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-splinearea-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Customizing TabView Header Template with Badge in XAML\nDESCRIPTION: Defines a custom ControlTemplate for TabView headers that includes a RadBadgeView to display numerical indicators. The template uses a RadBorder as the root element and positions the badge relative to a label showing the tab text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/attaching-badge-to-telerik-tabview-header-tab.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"myHeaderItemTemplate\">\n    <telerik:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n                    BorderColor=\"{TemplateBinding BorderColor}\"\n                    BorderThickness=\"{TemplateBinding BorderThickness}\"\n                    CornerRadius=\"{TemplateBinding CornerRadius}\"\n                    Padding=\"{TemplateBinding ContentPadding}\">\n        <telerik:RadBadgeView BadgeText=\"1\"\n                            HorizontalOptions=\"Center\"\n                            VerticalOptions=\"Center\"\n                            BadgeHorizontalAlignment=\"Start\">\n            <telerik:RadBadgeView.Content>\n                <Label Text=\"{TemplateBinding Text}\"/>\n            </telerik:RadBadgeView.Content>\n        </telerik:RadBadgeView>\n    </telerik:RadBorder>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining DataForm with Grouping from Model\nDESCRIPTION: Shows how to set up a DataForm in XAML that uses grouping defined in the model through DisplayAttributes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\" Source=\"{Binding Source}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Mask in XAML\nDESCRIPTION: Configure a RadRegexMaskedEntry with a regex pattern to validate user input. This snippet demonstrates setting up a masked entry with specific input validation rules.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask-types/regex.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='regexmaskedentry-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Apply Custom Send Button to .NET MAUI Chat\nDESCRIPTION: This XAML snippet demonstrates how to apply the custom SendIconSource to the Telerik UI for .NET MAUI Chat control. It sets the BackgroundColor, InputAreaBackgroundColor and SendMessageButtonImage properties of the RadChat control to customize the chat's appearance. The SendMessageButtonImage utilizes the previously defined FontImageSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n <telerik:RadChat x:Name=\"chat\"\n                  BackgroundColor=\"{StaticResource ChatBackgroundColor}\"\n                  InputAreaBackgroundColor=\"{StaticResource ChatBackgroundColor}\"\n                  SendMessageButtonImage=\"{StaticResource SendIconSource}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView with PropertySortDescriptor in XAML\nDESCRIPTION: This snippet demonstrates how to define a RadCollectionView control with a PropertySortDescriptor in XAML. It sets up sorting by the 'Name' property in ascending order.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/sorting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\" ItemsSource=\"{Binding People}\">\n    <telerik:RadCollectionView.SortDescriptors>\n        <telerik:PropertySortDescriptor PropertyName=\"Name\" />\n    </telerik:RadCollectionView.SortDescriptors>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionView with Swipe Commands in XAML\nDESCRIPTION: XAML definition of a CollectionView with SwipeStartingCommand, Swiping, and ItemSwipeCompleted commands configured. The control also includes SwipeThreshold and SwipeOffset properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikDataControls:RadCollectionView x:Name=\"collectionView\"\n                                    ItemsSource=\"{Binding Countries}\"\n                                    SwipeThreshold=\"100\"\n                                    SwipeOffset=\"100\"\n                                    SwipeStartingCommand=\"{Binding SwipeStartCommand}\"\n                                    Swiping=\"{Binding SwipingCommand}\"\n                                    ItemSwipeCompleted=\"{Binding SwipeCompleteCommand}\"\n                                    BackgroundColor=\"#ECF0F1\">\n    <telerikDataControls:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerikListView:ListViewTemplateCell>\n                <Grid BackgroundColor=\"Transparent\">\n                    <Label Text=\"{Binding Name}\"\n                           VerticalOptions=\"Center\"\n                           Margin=\"16, 0, 0, 0\" />\n                </Grid>\n            </telerikListView:ListViewTemplateCell>\n        </DataTemplate>\n    </telerikDataControls:RadCollectionView.ItemTemplate>\n    <telerikDataControls:RadCollectionView.StartSwipeTemplate>\n        <DataTemplate>\n            <ContentView ContentTemplate=\"{StaticResource StartTemplate}\" />\n        </DataTemplate>\n    </telerikDataControls:RadCollectionView.StartSwipeTemplate>\n    <telerikDataControls:RadCollectionView.EndSwipeTemplate>\n        <DataTemplate>\n            <ContentView ContentTemplate=\"{StaticResource EndTemplate}\" />\n        </DataTemplate>\n    </telerikDataControls:RadCollectionView.EndSwipeTemplate>\n</telerikDataControls:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Geometry with Arc in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to create a custom geometry for a Telerik RadPath using an arc segment. It defines a RadPath with a specified StrokeThickness and Stroke color, and utilizes RadPathGeometry and RadPathFigure to create the arc. Key parameters include StartPoint for the figure, and Center, Size, StartAngle, and SweepAngle for the arc segment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-types.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPath x:Name=\"customPath\"\n                       StrokeThickness=\"4\"\n                       Stroke=\"#2EC262\">\n    <telerik:RadPath.Geometry>\n        <telerik:RadPathGeometry>\n            <telerik:RadPathFigure StartPoint=\"0.85, 0.85\">\n                <telerik:RadArcSegment Center=\"0.5, 0.5\"\n                                             Size=\"1, 1\"\n                                             StartAngle=\"315\"\n                                             SweepAngle=\"270\" />\n            </telerik:RadPathFigure>\n        </telerik:RadPathGeometry>\n    </telerik:RadPath.Geometry>\n</telerik:RadPath>\n```\n\n----------------------------------------\n\nTITLE: Defining RadChat Control in XAML\nDESCRIPTION: This code snippet demonstrates how to add a RadChat control to your XAML page. This is essential for displaying the chat interface within an application. Make sure the Telerik namespace is included to reference the control accurately.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadChat x:Name=\"chat\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Appointments in XAML\nDESCRIPTION: Demonstrates how to define RadScheduler control with appointments in XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<scheduler-appointments-example />\n```\n\n----------------------------------------\n\nTITLE: Adding Label Style Selector to Page Resources\nDESCRIPTION: Demonstrates how to add a custom label style selector to the page's resource dictionary for use with the Slider component\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/labels-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n// Placeholder for slider-styling-labelsstyleselector snippet\n```\n\n----------------------------------------\n\nTITLE: Defining RadDataForm and Groups in XAML\nDESCRIPTION: This snippet demonstrates how to define a RadDataForm control with groups in XAML. It sets up the DataForm structure and applies custom styles to the group headers.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/groups-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\" VerticalOptions=\"Start\">\n    <telerik:RadDataForm.Groups>\n        <telerik:DataFormGroup PropertyName=\"FirstName\">\n            <telerik:DataFormGroup.HeaderStyle>\n                <Style TargetType=\"telerik:DataFormGroupHeaderView\">\n                    <Setter Property=\"BackgroundColor\" Value=\"#EAEAEA\" />\n                    <Setter Property=\"BorderColor\" Value=\"#D3D3D3\" />\n                    <Setter Property=\"BorderThickness\" Value=\"1\" />\n                </Style>\n            </telerik:DataFormGroup.HeaderStyle>\n            <telerik:DataFormGroup.HeaderLabelStyle>\n                <Style TargetType=\"Label\">\n                    <Setter Property=\"TextColor\" Value=\"Black\" />\n                    <Setter Property=\"FontSize\" Value=\"18\" />\n                    <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n                </Style>\n            </telerik:DataFormGroup.HeaderLabelStyle>\n        </telerik:DataFormGroup>\n        <telerik:DataFormGroup PropertyName=\"Age\">\n            <telerik:DataFormGroup.HeaderLabelStyle>\n                <Style TargetType=\"Label\">\n                    <Setter Property=\"TextColor\" Value=\"DarkGray\" />\n                    <Setter Property=\"FontSize\" Value=\"14\" />\n                </Style>\n            </telerik:DataFormGroup.HeaderLabelStyle>\n        </telerik:DataFormGroup>\n    </telerik:RadDataForm.Groups>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Segments in XAML\nDESCRIPTION: Demonstrates how to define a SegmentedControl in XAML with disabled segments functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/disable-segment.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='segmentcontrol-disablesegment-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Styling the PDF Viewer Selection Menu in XAML\nDESCRIPTION: Defines an implicit style for the PDF Viewer selection menu to customize its appearance. This style would apply to the menu that appears when text is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/selection/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:PdfViewerSelectionMenu\">\n    <!-- Style properties would go here -->\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Complete XAML Layout for RadListView and NumericInput\nDESCRIPTION: This XAML snippet defines the complete layout for a RadNumericInput control and a RadListView. The NumericInput is used to change the SpanCount of the ListView's GridLayout. The ListView uses a GridLayout with the SpanCount bound to a ViewModel property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-gridlayout-spancount-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"60\" />\n        <RowDefinition Height=\"*\" />\n    </Grid.RowDefinitions>\n    <telerik:RadNumericInput Minimum=\"1\" \n                                    Maximum=\"6\" \n                                    Value=\"{Binding SpanCountValue, Mode=TwoWay}\"\n                                    Step=\"1\"/>\n    <telerik:RadListView x:Name=\"listView\"\n                                    ItemsSource=\"{Binding Items}\"\n                                    Grid.Row=\"1\">\n        <telerik:RadListView.ItemTemplate>\n            <DataTemplate>\n                <telerik:ListViewTextCell Text=\"{Binding Name}\"\n                                                TextColor=\"Black\" DetailColor=\"Gray\" />\n            </DataTemplate>\n        </telerik:RadListView.ItemTemplate>\n        <telerik:RadListView.LayoutDefinition>\n            <telerik:ListViewGridLayout Orientation=\"Horizontal\"\n                                        SpanCount=\"{Binding BindingContext.SpanCountValue, Source={x:Reference listView}}\"\n                                        HorizontalItemSpacing=\"15\"\n                                        ItemLength=\"120\"/>\n        </telerik:RadListView.LayoutDefinition>\n    </telerik:RadListView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Source Directly in C#\nDESCRIPTION: Basic example of setting HTML content directly as a string source for the RichTextEditor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.richTextEditor.Source = \"<b>Hello World!</b>\";\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for Categorical Data in C#\nDESCRIPTION: This snippet demonstrates how to create a ViewModel class in C# that contains an ObservableCollection of CategoricalData. It initializes the collection with sample data upon instantiation. The ViewModel is used as the DataContext for binding to the RadCartesianChart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/grid.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 21 },\n            new CategoricalData { Category = \"Perfecto\", Value = 44 },\n            new CategoricalData { Category = \"NearBy\", Value = 39 },\n            new CategoricalData { Category = \"Family\", Value = 11 },\n            new CategoricalData { Category = \"Fresh\", Value = 83 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadTemplatedPicker\nDESCRIPTION: This snippet would contain the XAML definition for a RadTemplatedPicker. The placeholder indicates where the actual XAML code for defining the TemplatedPicker should be inserted.  This would likely include binding and other configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-style' />\n```\n\n----------------------------------------\n\nTITLE: ListView Definition for Reordering in .NET MAUI\nDESCRIPTION: This snippet defines the ListView control in XAML with the `IsItemsReorderEnabled` property set to `true`.  This enables the reorder functionality, allowing users to rearrange items within the list by long-pressing and dragging.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/items-reorder.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-gestures-reorderitems-listview'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ComboBox Filtering in XAML\nDESCRIPTION: Example showing how to enable basic filtering in a RadComboBox control with IsEditable and IsFilteringEnabled properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-filtering' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Templated Rating in .NET MAUI XAML\nDESCRIPTION: Example showing how to define RadTemplatedRating component in XAML with ItemTemplate and SelectedItemTemplate properties. The component enables using templates like images for rating items instead of custom path geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/templated-rating.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='rating-templates' />\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel with Nullable Data\nDESCRIPTION: This snippet demonstrates how to create a ViewModel that includes a collection of CategoryItems, with some items having null values. It is essential for representing data that may not always be complete.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/nullvalues.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<CategoryItem> CategoryItems { get; set; }\n\n    public ViewModel()\n    {\n        CategoryItems = new ObservableCollection<CategoryItem>\n        {\n            new CategoryItem { Value = 10 },\n            new CategoryItem { Value = null },\n            new CategoryItem { Value = 20 }\n        };\n    }\n}\n\npublic class CategoryItem\n{\n    public double? Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Ruler Settings in MAUI Scheduler DayView\nDESCRIPTION: Example showing how to set MinorTickLength, MajorTickLength and MinTimeRulerExtent properties on a DayViewDefinition in RadScheduler. MinorTickLength is set to 10 minutes, MajorTickLength to 30 minutes, and MinTimeRulerExtent to 2800 pixels.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/time-ruler.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:DayViewDefinition MinorTickLength=\"00:10\"\n                                   MajorTickLength=\"00:30\" \n                                   MinTimeRulerExtent=\"2800\"/>\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection ComboBox\nDESCRIPTION: XAML markup for defining a ComboBox with multiple selection mode\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-multiple-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationView Control - XAML\nDESCRIPTION: This snippet showcases how to define the NavigationView control in XAML. It is essential for integrating the NavigationView into a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-events' />\n```\n\n----------------------------------------\n\nTITLE: Defining the DateOnly to DateTime Converter in Page Resources\nDESCRIPTION: This snippet shows how to define the DateOnly to DateTime converter within the Page's resources to ensure it can be utilized by the DatePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/dateonly.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-dateonly-to-datetimeconverter' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Track in .NET MAUI Slider\nDESCRIPTION: Demonstrates how to set the OriginValue property to define the starting point of the range track at the center of the backtrack. The OriginValue property determines where the range track begins along the slider's backtrack.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/range-track.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-range-track-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with ItemTemplate in XAML\nDESCRIPTION: Demonstrates how to define a CollectionView control with a custom ItemTemplate in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='commectionview-grouptapcommand' />\n```\n\n----------------------------------------\n\nTITLE: Configuring SlideView Indicator Style in XAML\nDESCRIPTION: Demonstrates how to customize the SlideViewIndicator properties through the IndicatorStyle of RadSlideView. This example shows setting the MaxVisibleItems property to limit the number of visible indicators.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/indicators.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSlideView>\n     <telerik:RadSlideView.IndicatorStyle>\n         <Style TargetType=\"telerik:SlideViewIndicator\">\n             <Setter Property=\"MaxVisibleItems\" Value=\"3\" />\n         </Style>\n     </telerik:RadSlideView.IndicatorStyle>\n</telerik:RadSlideView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Model with Editability Control in C#\nDESCRIPTION: The data model class snippet in C# utilizes the IsEnabled property to control cell editability in the DataGrid, where the data inherits from NotifyPropertyChangedBase.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-conditional-cell-editing.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    public class Data : NotifyPropertyChangedBase\n    {\n        private bool isEnabled;\n        public string Value { get; set; }\n        public bool IsEnabled\n        {\n            get { return this.isEnabled; }\n            set { UpdateValue(ref this.isEnabled, value); }\n        }\n\n        public DateTime Date { get; set; }\n        public string Text { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Binding NavigationView Commands to Buttons (XAML)\nDESCRIPTION: This snippet demonstrates how to bind the NavigationView commands to button controls in XAML. The buttons allow the user to open, close, or toggle the navigation pane. This binding mechanism requires the `NavigationView` to be referenced as 'navigationView'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<HorizontalStackLayout Spacing=\"5\">\\n    <Button Text=\"Open Pane\" Command=\"{Binding OpenPaneCommand, Source={x:Reference navigationView}}\"/>\\n    <Button Text=\"Close Pane\" Command=\"{Binding ClosePaneCommand, Source={x:Reference navigationView}}\"/>\\n    <Button Text=\"Toggle Pane\" Command=\"{Binding TogglePaneCommand, Source={x:Reference navigationView}}\"/>\\n</HorizontalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-Behind for RadListView Nested Kanban UI\nDESCRIPTION: This C# code-behind implements event handlers for binding ListView references and demonstrates programmatic scrolling. It connects the XAML UI with the ViewModel and manages the relationships between parent and child ListViews.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-cross-orientation-nesting.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility.DataControls;\n\nnamespace HorizontalAndVerticalDemo;\n\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        BindingContext = new MainViewModel();\n    }\n\n    private void OnListViewBindingContextChanged(object sender, EventArgs e)\n    {\n        if (sender is RadListView { BindingContext: KanbanItem item } lv)\n        {\n            // Dynamically gets a reference to the view element for programmatic scrolling when the concrete UI is created. \n            // The BindingContextChanged event fires when the RadListView's UI virtualization mechanism recycles the container during initialization and any scrolling.\n            item.ListViewHost = lv;\n        }\n    }\n\n    private void Button_OnClicked(object sender, EventArgs e)\n    {\n        try\n        {\n            if (BindingContext is not MainViewModel mainViewModel) \n                return;\n\n            // To demonstrate programmatic scrolling of any column's inner list, we'll scroll the 3rd column's vertical list to item 25\n            var week3 = mainViewModel.Items[2];\n            var subItem25 = week3.SubItems[24];\n\n            // Scroll!\n            week3.ScrollToSubItem(subItem25);\n        }\n        catch (Exception exception)\n        {\n            Console.WriteLine(exception);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configuration code to register Telerik controls in a .NET MAUI application. This is required to use any Telerik UI controls including the RadExpander.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n using Telerik.Maui.Controls.Compatibility;\n\n public static class MauiProgram\n {\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n }           \n```\n\n----------------------------------------\n\nTITLE: Configuring Expander Header Indicator Styling\nDESCRIPTION: Demonstrates how to customize the ExpanderHeader indicator with various styling properties like text, font, color, and animation settings\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/header.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- Indicator Styling Example -->\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for CollectionView in C#\nDESCRIPTION: Creates a ViewModel class to populate the CollectionView with data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-grouptapcommand-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupTapCommand ViewModel in C#\nDESCRIPTION: This code snippet shows the implementation of a ViewModel with a GroupTapCommand for the CollectionView. It includes an ObservableCollection of grouped Countries and a command that handles group item tapping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private ObservableCollection<GroupViewModel> groups;\n\n    public ObservableCollection<GroupViewModel> Groups\n    {\n        get { return this.groups; }\n        set { this.UpdateValue(ref this.groups, value); }\n    }\n\n    public ICommand GroupItemTapCommand { get; set; }\n\n    public ViewModel()\n    {\n        var europeCountries = new List<Country>() { new Country() { Name = \"Austria\" }, new Country() { Name = \"Belgium\" }, new Country() { Name = \"Bulgaria\" }, new Country() { Name = \"Croatia\" } };\n        var northAmericaCountries = new List<Country>() { new Country() { Name = \"Canada\" }, new Country() { Name = \"Cuba\" }, new Country() { Name = \"Greenland\" }, new Country() { Name = \"Mexico\" } };\n        var southAmericaCountries = new List<Country>() { new Country() { Name = \"Argentina\" }, new Country() { Name = \"Brazil\" }, new Country() { Name = \"Chile\" }, new Country() { Name = \"Colombia\" } };\n\n        this.Groups = new ObservableCollection<GroupViewModel>\n        {\n            new GroupViewModel(europeCountries, \"Europe\"),\n            new GroupViewModel(northAmericaCountries, \"North America\"),\n            new GroupViewModel(southAmericaCountries, \"South America\")\n        };\n\n        this.GroupItemTapCommand = new Command<GroupViewModel>((groupItem) =>\n        {\n            Application.Current.MainPage.DisplayAlert(\"GroupTapped\", $\"Group: {groupItem.Name}\", \"OK\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CollectionView Item Swipe Events in .NET MAUI\nDESCRIPTION: Event handlers for the swipe template tap gestures. Implements updating item properties on start-swipe action and removing items on end-swipe action.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateLabelTap(object sender, EventArgs e)\n{\n    var sw = (sender as Grid).Parent as StartSwipeView;\n    var item = sw.BindingContext as Person;\n    item.Name = \"Updated \" + item.Name;\n    this.collectionView.EndItemSwipe(true);\n}\n\nprivate void DeleteLabelTap(object sender, EventArgs e)\n{\n    var sw = (sender as Grid).Parent as EndSwipeView;\n    var item = sw.BindingContext as Person;\n\n    (this.collectionView.ItemsSource as ObservableCollection<Person>).Remove(item);\n    this.collectionView.EndItemSwipe(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Type to Numeric in XAML\nDESCRIPTION: This code snippet demonstrates how to set the Keyboard property of a RadTextMaskedEntry to \"Numeric\" in XAML. This will display the numeric keyboard when the user focuses on the MaskedEntry. The mask is set to \"00:00\".\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/keyboard.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTextMaskedEntry x:Name=\"maskedEntry\"\n                            Keyboard=\"Numeric\"\n                            Mask=\"00:00\" />\n```\n\n----------------------------------------\n\nTITLE: Styling ProgressBar Track Fill in .NET MAUI\nDESCRIPTION: Demonstrates how to customize the track appearance including fill color, thickness, and corner radius.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='progressbar-styling-trackfill'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Accordion Expand/Collapse States in XAML\nDESCRIPTION: Demonstrates how to implement expand and collapse functionality in a .NET MAUI Accordion using the CanCollapseAllItems and CanExpandMultipleItems properties. These properties control whether all items can be collapsed and if multiple items can be expanded simultaneously.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='accordion-key-features-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Date Property in .NET MAUI DateTimePicker\nDESCRIPTION: This snippet demonstrates how to set the Date property of a RadDateTimePicker control with a specific date value and spinner format. The Date property defines the current date selection in the control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\"\n                            SpinnerFormat=\"yyy-MMM\"/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart - XAML\nDESCRIPTION: This XAML snippet defines the structure and properties of the RadCartesianChart used to visualize Candlestick data for financial analysis. This chart is essential for displaying stock market trends over time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/candlestick-series.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadCartesianChart>\n    <RadCartesianChart.Series>\n        <CandlestickSeries ItemsSource=\"{Binding CandlestickData}\" />\n    </RadCartesianChart.Series>\n</RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel Class for .NET MAUI DataGrid in C#\nDESCRIPTION: This C# code defines the ViewModel class used in the DataGrid examples. It includes a Clubs property of type ObservableCollection<Club>.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/cell-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Club> Clubs { get; set; }\n\n    public ViewModel()\n    {\n        this.Clubs = new ObservableCollection<Club>\n        {\n            new Club(\"Liverpool\", new DateTime(1892, 1, 1), true),\n            new Club(\"Chelsea\", new DateTime(1905, 1, 1), false),\n            new Club(\"Manchester City\", new DateTime(1880, 1, 1), true),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Footer in .NET MAUI DateTimePicker\nDESCRIPTION: Definition of a Style for the Footer of the DateTimePicker drop-down. This style targets the PickerPopupFooterView and sets properties like background color and border thickness.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/dropdown-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"FooterStyle\" TargetType=\"telerik:PickerPopupFooterView\">\n    <Setter Property=\"Background\" Value=\"#D6D2D0\"/>\n    <Setter Property=\"BorderThickness\" Value=\"0\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering Behavior in C#\nDESCRIPTION: Custom filtering implementation that extends ComboBoxFilteringBehavior to provide additional filtering logic based on population.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-filtering-customfilterbehavior' />\n```\n\n----------------------------------------\n\nTITLE: Defining Current Date Selection in .NET MAUI DatePicker\nDESCRIPTION: This snippet demonstrates how to set the initially selected date in a Telerik RadDatePicker control using the `Date` property.  The `Date` property is of type `DateTime?` and can be set directly in XAML. The `SpinnerFormat` allows configuring date formats.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/default-dates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n                            SpinnerFormat=\"yyy-MMM\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining ItemTemplate on RadTreeView Level in XAML\nDESCRIPTION: This snippet demonstrates how to define a custom ItemTemplate at the RadTreeView level. It shows customizing the label with a yellow background and adding a button to each tree item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\" \n                        ItemsSource=\"{Binding Items}\">\n    <telerik:TreeViewDescriptor ItemsSourcePath=\"Children\"\n                                DisplayMemberPath=\"Name\"\n                                TargetType=\"{x:Type local:Item}\" />\n    <!-- modify the label and add additional elements in the label area.\nItemTemplate does not include expand indicator, image, checkbox, only the text, you can add additional elements to it.\n    For example, I have added a button-->\n    <telerik:RadTreeView.ItemTemplate>\n        <DataTemplate>\n            <Grid ColumnDefinitions=\"*,auto\">\n                <Label Text=\"{Binding Name}\" BackgroundColor=\"Yellow\"/>\n                <telerik:TreeViewItemButton Text=\"Button\" Grid.Column=\"1\" WidthRequest=\"100\" BackgroundColor=\"Green\" HorizontalOptions=\"End\"/>\n            </Grid>\n        </DataTemplate>\n    </telerik:RadTreeView.ItemTemplate>\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Setting Content Template\nDESCRIPTION: This snippet shows how to set the ContentTemplate property of a TemplatedButton. The View returned from the ContentTemplate is displayed inside the button, using Content as BindingContext.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='templatedbutton-content-template' />\n```\n\n----------------------------------------\n\nTITLE: Customizing SegmentedControl Colors in .NET MAUI XAML\nDESCRIPTION: Demonstrates how to customize the appearance of segments in different states by setting background and text colors for normal, selected, and disabled segments.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='segmentcontrol-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for DataGrid in C#\nDESCRIPTION: C# code snippet demonstrating how to create a simple data structure for the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Data\n{\n    public string Name { get; set; }\n    public string Country { get; set; }\n    public double Salary { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Define TabView XAML\nDESCRIPTION: This snippet demonstrates defining a TabView in XAML with TabViewItem elements within the Items collection.  The HeaderText property sets the header of each TabViewItem.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='tabview-getting-started-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: NavigationView Selection Configuration XAML\nDESCRIPTION: Demonstrates how to configure NavigationView selection properties and behavior using XAML. Includes setting IsSelectable and IsSelected properties for navigation items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNavigationView SelectedItem=\"{Binding SelectedNavigationItem}\">\n    <telerik:NavigationViewItem Text=\"Home\" IsSelectable=\"True\" IsSelected=\"True\" />\n    <telerik:NavigationViewItem Text=\"Settings\" IsSelectable=\"True\" />\n</telerik:RadNavigationView>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vertical Gauge - .NET MAUI - XAML\nDESCRIPTION: This snippet demonstrates the basic setup required to integrate a Vertical Gauge into a .NET MAUI application. It serves as a foundational example for developers looking to implement this control efficiently. Ensure that you have the necessary Telerik UI for .NET MAUI components integrated before using this snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/gauge-types/vertical.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalGauge\n    Minimum=\"0\"\n    Maximum=\"100\"\n    Value=\"50\"\n    ScaleLinesVisibility=\"All\"\n    ScaleLineColor=\"#FFAAAAAA\"\n    ScaleLabelColor=\"#FF444444\"\n    RangeStart=\"0\"\n    RangeEnd=\"40\"\n    RangeColor=\"#FF00FF00\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing CellContentStyleSelector in C#\nDESCRIPTION: C# code snippet showing the implementation of MyCellContentStyleSelector class that derives from DataGridStyleSelector.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCellContentStyleSelector : DataGridStyleSelector\n{\n    protected override DataGridStyle SelectStyle(object item, BindableObject container)\n    {\n        var dataItem = item as Data;\n        var style = new DataGridStyle();\n\n        if (dataItem.Salary < 55000)\n        {\n            style.TextColor = Colors.Red;\n        }\n        else\n        {\n            style.TextColor = Colors.Green;\n        }\n\n        return style;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Selection in .NET MAUI CollectionView\nDESCRIPTION: This XAML snippet shows how to configure the CollectionView control for multiple selection using the SelectedItems collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                               ItemsSource=\"{Binding Cities}\"\n                               SelectionMode=\"Multiple\"\n                               SelectedItems=\"{Binding SelectedCities}\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:CollectionViewItemView>\n                <Label Text=\"{Binding Name}\" />\n            </telerik:CollectionViewItemView>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Day View in .NET MAUI Scheduler\nDESCRIPTION: Example showing how to add a DayViewDefinition to the RadScheduler control. This sets up a single day view in the scheduler component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/views/day-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:DayViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Setting Highlighted Date in .NET MAUI\nDESCRIPTION: This snippet shows how to set the highlighted date for the RadDateTimePicker using the DefaultHighlightedDate property. This property dictates the date that appears highlighted in the spinner when Date is set to null. It also requires the Telerik namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/default-dates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"{x:Null}\"\n                                DefaultHighlightedDate=\"2020,05,15\"\n                                SpinnerFormat=\"dd/MMM/yyyy\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Data to CollectionView in .NET MAUI\nDESCRIPTION: Demonstrates populating the `RadCollectionView` with an `ObservableCollection` of custom `City` objects in C#. This includes creating city instances with mock data to display in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/group-collectionview-display-another-property-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n\n        var items = new ObservableCollection<City>();\n\n        for (int group = 1; group <= 5; group++)\n        {\n            for (int index = 1; index <= 5; index++)\n            {\n                var city = new City($\"Country {group}\", $\"City {index}\", $\"Data {index}\");\n                items.Add(city);\n            }\n        }\n\n        this.grid.ItemsSource = items;\n    }\n}\n\npublic class City\n{\n    public City(string country, string name, string data)\n    {\n        Country = country;\n        Name = name;\n        Data = data;\n    }\n\n    public string Country { get; }\n    public string Name { get; }\n    public string Data { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ButtonToolbarItem with Text and Image in XAML\nDESCRIPTION: This snippet demonstrates how to create a ButtonToolbarItem with text and an image using a FontImageSource. It sets the Text property and configures the ImageSource with a glyph from the TelerikFont.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/button.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:ButtonToolbarItem Text=\"Undo\">\n    <telerik:ButtonToolbarItem.ImageSource>\n        <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconUndo}\"\n                            FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                            Size=\"16\" />\n    </telerik:ButtonToolbarItem.ImageSource>\n</telerik:ButtonToolbarItem>\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker with PopupSettings for Accept and Cancel Commands\nDESCRIPTION: This snippet illustrates how to configure PopupSettings for a RadTimePicker component to accept and cancel commands, allowing users to confirm or reject time selections.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker x:Name=\"timePicker\" PickerMode=\"Popup\">\n\t<telerik:RadTimePicker.PopupSettings>\n\t\t<telerik:PickerPopupSettings AcceptCommand=\"{Binding Accept}\"  \n\t\t\t CancelCommand=\"{Binding Cancel}\"/>\n\t</telerik:RadTimePicker.PopupSettings>\n</telerik:RadTimePicker>\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Changed Event - .NET MAUI\nDESCRIPTION: This XAML snippet sets up the SelectionChanged event for the RadTimePicker, triggering custom logic whenever a user selects a time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker x:Name=\"timePicker\" SelectionChanged=\"TimePicker_SelectionChanged\"/>\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Styles in Windows App.xaml\nDESCRIPTION: XAML code that shows how to merge the custom ResourceDictionary in the Platforms/Windows/App.xaml file. It replaces Telerik's resources with custom light resources for the Windows platform.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/set-focused-background-color-maskedentry-windows-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <maui:MauiWinUIApplication.Resources>\n        <ResourceDictionary>\n            <!--Replace the resources of Telerik-->\n            <ResourceDictionary.ThemeDictionaries>\n                <ResourceDictionary x:Key=\"Default\">\n                    <winui:UserThemeResources x:Key=\"ResourceLoaderInitializer\"\n                                              LightResourcesPath=\"ms-appx:///Platforms/Windows/CustomStyles.xaml\"/>\n                </ResourceDictionary>\n            </ResourceDictionary.ThemeDictionaries>\n        </ResourceDictionary>\n    </maui:MauiWinUIApplication.Resources>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical ScrollBar Visibility in .NET MAUI ListView - C#\nDESCRIPTION: This snippet demonstrates setting the visibility of the vertical scrollbar in a .NET MAUI ListView using C#. The VerticalScrollBarVisibility property is set to ScrollBarVisibility.Always, forcing the scrollbar to remain visible.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar listView = new RadListView();\nlistView.VerticalScrollBarVisibility = ScrollBarVisibility.Always;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Adds the required Telerik namespace declaration to access .NET MAUI controls in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Person Data Model Definition\nDESCRIPTION: Defines the Person model class used for CollectionView items\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/event.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='person-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Corner Radius Configuration in .NET MAUI ProgressBar\nDESCRIPTION: Demonstrates how to set corner radius for both progress indicator and background track.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-styling-corner-radius'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing EventToCommandBehavior with RadCheckBox in MAUI\nDESCRIPTION: This code demonstrates how to use the EventToCommandBehavior from Microsoft Community Toolkit for MAUI to bind the IsCheckedChanged event of a RadCheckBox to a command. This allows developers to achieve similar functionality to the CheckBoxUserCommand that was available in Xamarin.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/migrating-xamarin-checkbox-maui-checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadCheckBox IsCheckedChanged=\"RadCheckBox_IsCheckedChanged\">\n    <telerik:RadCheckBox.Behaviors>\n        <toolkit:EventToCommandBehavior EventName=\"IsCheckedChanged\"\n                                        Command=\"{Binding CheckedCommand}\" />\n    </telerik:RadCheckBox.Behaviors>\n</telerik:RadCheckBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox Drop-Down Closure on Selection in XAML\nDESCRIPTION: Shows how to configure the ComboBox to close its drop-down when an item is selected using the IsDropdownClosedOnSelection property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox IsDropdownClosedOnSelection=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing the Display Label in DateTimePicker\nDESCRIPTION: Demonstrates how to style the label that displays the selected date in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style-display-label-style' />\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation for DateTimePicker Commands\nDESCRIPTION: Creates a ViewModel with Accept and Cancel commands to handle date selection and cancellation logic\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ICommand Accept { get; set; }\n    public ICommand Cancel { get; set; }\n\n    public ViewModel()\n    {\n        this.Accept = new Command(this.OnAccept);\n        this.Cancel = new Command(this.OnCancel);\n    }\n\n    private void OnAccept(object param)\n    {\n        Application.Current.MainPage.DisplayAlert(\"Date selected\", String.Format(\"New Date: {0:d}\", (DateTime)param), \"OK\");\n        // implement your custom logic here\n    }\n\n    private void OnCancel(object param)\n    {\n        var message = param != null ? String.Format(\"Current date: {0:d}\", (DateTime)param) : \"Currently no date is selected\";\n        Application.Current.MainPage.DisplayAlert(\"Date Selection Canceled\", message, \"OK\");\n        // implement your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heart Shape Rating in .NET MAUI\nDESCRIPTION: Example showing how to create a Rating control with heart shape geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/rating-shape-rating.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadShapeRating ItemShape=\"{x:Static telerik:RadGeometry.Heart}\" />\n```\n\n----------------------------------------\n\nTITLE: Binding ViewModel to MainPage in .NET MAUI\nDESCRIPTION: In this snippet, the MainPage class is initialized and the BindingContext is set to an instance of MainPageViewModel, establishing the data binding required for the QRCode to be reactive to model changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/data-binding-qrcode-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        BindingContext = new MainPageViewModel();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom AutoComplete Styles with Visual State Management in XAML\nDESCRIPTION: A XAML style definition targeting RadAutoComplete that includes custom colors, border properties, and visual state triggers for different control states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Style TargetType=\"telerik:RadAutoComplete\">\n    <Setter Property=\"BackgroundColor\" Value=\"#F5F8FA\" />\n    <Setter Property=\"TextColor\" Value=\"#7C828A\" />\n    <Setter Property=\"PlaceholderColor\" Value=\"#919CAE\" />\n    <Setter Property=\"BorderBrush\" Value=\"#D9E2F2\" />\n    <Setter Property=\"BorderThickness\" Value=\"2\" />\n    <Setter Property=\"SuggestionItemHighlightTextColor\" Value=\"#1A5EA0\"/>\n    <Setter Property=\"ClearButtonStyle\">\n        <Setter.Value>\n            <Style TargetType=\"telerikButtons:RadTemplatedButton\">\n                <Setter Property=\"FontSize\" Value=\"15\"/>\n                <Setter Property=\"TextColor\" Value=\"#7C828A\" />\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\" />\n                <Setter Property=\"BorderWidth\" Value=\"0\" />\n                <Setter Property=\"FontAttributes\" Value=\"Bold\"/>\n                <Setter Property=\"Padding\" Value=\"12\" />\n                <Setter Property=\"HorizontalOptions\" Value=\"End\" />\n            </Style>\n        </Setter.Value>\n    </Setter>\n    <Setter Property=\"TextInputStyle\">\n        <Setter.Value>\n            <Style TargetType=\"telerikInput:RadTextInput\">\n                <Setter Property=\"TextColor\" Value=\"#000000\" />\n                <Setter Property=\"PlaceholderColor\" Value=\"#919CAE\" />\n                <Setter Property=\"FontSize\" Value=\"16\" />\n                <Setter Property=\"HeightRequest\" Value=\"50\" />\n                <Setter Property=\"CornerRadius\" Value=\"12\" />\n                <Setter Property=\"BorderThickness\" Value=\"1\" />\n                <Setter Property=\"BorderColor\" Value=\"#D9E2F2\" />\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\" />\n            </Style>\n        </Setter.Value>\n    </Setter>\n    <Style.Triggers>\n        <Trigger TargetType=\"telerik:RadAutoComplete\" Property=\"IsSelected\" Value=\"True\">\n            <Setter Property=\"BorderBrush\" Value=\"#7CBC52\" />\n        </Trigger>\n    </Style.Triggers>\n    <Style.Setters>\n        <Setter Property=\"VisualStateManager.VisualStateGroups\">\n            <VisualStateGroupList>\n                <VisualStateGroup x:Name=\"CommonStates\">\n                    <VisualState x:Name=\"Selected\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BorderBrush\" Value=\"#7CBC52\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n        </Setter>\n    </Style.Setters>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Header Content Template in .NET MAUI DataGrid\nDESCRIPTION: This snippet shows how to use the HeaderContentTemplate property to customize the content of DataGrid column headers.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/header.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"CustomHeaderTemplate\">\n            <telerik:RadBorder BackgroundColor=\"#F8F8F8\"\n                               BorderThickness=\"1\">\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\" />\n                        <VisualState x:Name=\"Focused\" />\n                        <VisualState x:Name=\"Disabled\" />\n                        <VisualState x:Name=\"PointerOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"BackgroundColor\" Value=\"#33000000\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateManager.VisualStateGroups>\n            </telerik:RadBorder>\n    </DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox with Complex Object Binding in XAML\nDESCRIPTION: Example of defining a RadComboBox control bound to a complex object in XAML, including setting the DisplayMemberPath property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"comboBox\"\n                      ItemsSource=\"{Binding Cities}\"\n                      DisplayMemberPath=\"Name\"\n                      Placeholder=\"Choose a city\" />\n```\n\n----------------------------------------\n\nTITLE: Saving an Image with Specific Size in C#\nDESCRIPTION: This snippet shows how to save an image with a specific size using the SaveAsync method overload that accepts a Size parameter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/saving-image.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='imageeditor-saveimage-specific-size'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Style for TimeSpanPicker Control in XAML\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the spinner control within the TimeSpanPicker. It defines both the item and selected item styles, affecting their appearance when the spinner is interacted with.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadSpinner\" x:Key=\"spinnerStyle\">\n    <Setter Property=\"ItemStyle\">\n        <Setter.Value>\n            <Style TargetType=\"telerik:SpinnerItemView\">\n                <Setter Property=\"TextColor\" Value=\"#797979\" />\n                <Setter Property=\"BackgroundColor\" Value=\"#F2F2F2\" />\n                <Setter Property=\"CornerRadius\" Value=\"10\" />\n                <Setter Property=\"Margin\" Value=\"6, 4\" />\n            </Style>\n        </Setter.Value>\n    </Setter>\n    <Setter Property=\"SelectedItemStyle\">\n        <Setter.Value>\n            <Style TargetType=\"telerik:SpinnerItemView\">\n                <Setter Property=\"TextColor\" Value=\"#00B5DC\" />\n                <Setter Property=\"BackgroundColor\" Value=\"#E4F3F9\" />\n                <Setter Property=\"CornerRadius\" Value=\"10\" />\n                <Setter Property=\"Margin\" Value=\"6, 4\" />\n            </Style>\n        </Setter.Value>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPrompt with Custom Suggestion Styling\nDESCRIPTION: XAML implementation of the RadAIPrompt control with custom SuggestionStyle applied to enhance the visual appearance of suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/suggestions-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadAIPrompt x:Name=\"prompt\"\n                   SuggestionStyle=\"{StaticResource CustomSuggestionStyle}\">\n    <telerik:RadAIPrompt.Suggestions>\n        <telerik:AIPromptSuggestion Text=\"Create a marketing plan for a new mobile app\" />\n        <telerik:AIPromptSuggestion Text=\"Write a blog post about AI in apps\" />\n        <telerik:AIPromptSuggestion Text=\"Provide examples for a marketing email\" />\n        <telerik:AIPromptSuggestion Text=\"Generate ideas for a mobile game\" />\n    </telerik:RadAIPrompt.Suggestions>\n</telerik:RadAIPrompt>\n```\n\n----------------------------------------\n\nTITLE: Styling Frozen Column Splitter in .NET MAUI DataGrid\nDESCRIPTION: Shows how to style the frozen column splitter using the FrozenColumnsSplitterStyle property, customizing width, colors, and border thickness.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/frozen-columns.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid.FrozenColumnsSplitterStyle>\n    <telerik:DataGridFrozenColumnsSplitterStyle Width=\"8\"\n                                                BorderColor=\"Gray\"\n                                                BorderThickness=\"2\"\n                                                BackgroundColor=\"LightBlue\"/>\n</telerik:RadDataGrid.FrozenColumnsSplitterStyle>\n```\n\n----------------------------------------\n\nTITLE: Adding AIPromptCommand without Command Property in C#\nDESCRIPTION: This snippet demonstrates adding an AIPromptCommand to the Commands collection without setting the Command property. In this case, the AIPrompt's CommandTappedCommand will be executed when the command is tapped.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/predefined-ai-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.Commands.Add(new AIPromptCommand\n{\n    ImageSource = new FontImageSource() { FontFamily = TelerikFont.Name, Size = 12, Glyph = TelerikFont.IconPaste},\n    Text = \"Simplify\"\n});\nthis.CommandTappedCommand = new Command(this.ExecuteCommandTappedCommand);\n```\n\n----------------------------------------\n\nTITLE: EmployeeDto Data Model in C#\nDESCRIPTION: Defines a data transfer object for employee records with an additional OnLeave boolean property for selection tracking\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-selection-column.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class EmployeeDto : Employee\n{\n    private bool onLeave;\n\n    public EmployeeDto(Employee source)\n    {\n        this.Name = source.Name;\n        this.Position = source.Position;\n        // Other property mappings\n    }\n\n    public bool OnLeave\n    {\n        get => onLeave;\n        set => SetProperty(ref onLeave, value);\n    }\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Specific CollectionView Group in C#\nDESCRIPTION: Shows how to collapse a particular group in the CollectionView using the CollapseGroup() method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-collapsegroup\n```\n\n----------------------------------------\n\nTITLE: Styling the Accept Button in .NET MAUI DateTimePicker\nDESCRIPTION: Definition of a Style for the Accept button in the DateTimePicker drop-down footer. This style targets the Button control and customizes properties like text color, background color, and corner radius.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/dropdown-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"AcceptButtonStyle\" TargetType=\"Button\">\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n    <Setter Property=\"BackgroundColor\" Value=\"#2E86EF\"/>\n    <Setter Property=\"CornerRadius\" Value=\"10\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for ToggleButton Command\nDESCRIPTION: Implements a ViewModel with the necessary command and properties to handle the ToggleButton command execution.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/command.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='togglebutton-command-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for DataGrid Search\nDESCRIPTION: Shows the ViewModel class used for binding data to the DataGrid in the search example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Country> Countries { get; set; }\n\n    public ViewModel()\n    {\n        this.Countries = new ObservableCollection<Country>();\n        this.Countries.Add(new Country() { Name = \"Argentina\", Capital = \"Buenos Aires\" });\n        this.Countries.Add(new Country() { Name = \"Austria\", Capital = \"Vienna\" });\n        this.Countries.Add(new Country() { Name = \"Belgium\", Capital = \"Brussels\" });\n        this.Countries.Add(new Country() { Name = \"Brazil\", Capital = \"Brasilia\" });\n        this.Countries.Add(new Country() { Name = \"Canada\", Capital = \"Ottawa\" });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Toggle Button Configuration in XAML\nDESCRIPTION: Configures a RadDatePicker with DropDown mode and visible toggle button for date selection\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n\t\t\t\t\t\tDisplayStringFormat=\"yyy-ddd-MMM\"\n\t\t\t\t\t\tPickerMode=\"DropDown\"\n\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DateOnly to DateTime Converter in XAML\nDESCRIPTION: This snippet defines a converter that transforms System.DateOnly to System.DateTime and vice versa, enabling the DatePicker control to handle date-only values correctly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/dateonly.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-dateonly-to-datetimeconverter' />\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Clear Selection Button in XAML\nDESCRIPTION: This code defines a DatePicker with a button to clear the selected date. The button's `Clicked` event is bound to the `OnClearSelectionClicked` method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Button Text=\"Clear Selection\" Clicked=\"OnClearSelectionClicked\"/>\n    <telerik:RadDatePicker x:Name=\"datePicker\"/>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduler with ViewDefinitions in XAML\nDESCRIPTION: XAML configuration for RadScheduler showing different view definitions including Week, Work Week, MultiDay, Day and Month views. The code sets up PropertyChanged event handler to monitor VisibleRange changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/visible-range.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\"\n                      PropertyChanged=\"Scheduler_PropertyChanged\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:WeekViewDefinition />\n        <telerik:WeekViewDefinition IsWeekendVisible=\"False\" Title=\"Work Week\" />\n        <telerik:MultidayViewDefinition VisibleDays=\"3\" Title=\"3 Day\" />\n        <telerik:DayViewDefinition />\n        <telerik:MonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemTemplate XAML\nDESCRIPTION: Defines the NavigationView in XAML using `ItemTemplate`. It uses the `ItemsSource` property to bind to a collection and the `ItemTemplate` property to define a custom template for each navigation item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_11\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemtemplate-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining EmptyTemplate in .NET MAUI CollectionView\nDESCRIPTION: This snippet demonstrates how to define the EmptyContentTemplate in a RadCollectionView control. It shows how to structure the template to display when the ItemsSource is null or empty.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/empty-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-empty-template'/>\n```\n\n----------------------------------------\n\nTITLE: ViewModel for Financial Data - C#\nDESCRIPTION: This C# snippet defines the ViewModel which binds the Candlestick data to the RadCartesianChart, ensuring the chart updates dynamically with the underlying data model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/candlestick-series.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class FinancialIndicatorViewModel\n{\n    public ObservableCollection<OhlcDataPoint> CandlestickData { get; set; }\n\n    public FinancialIndicatorViewModel()\n    {\n        CandlestickData = new ObservableCollection<OhlcDataPoint>();\n        LoadData();\n    }\n\n    private void LoadData()\n    {\n        // Load your data here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Accept and Cancel Commands with PopupSettings\nDESCRIPTION: Shows how to implement custom accept and cancel commands for the DatePicker popup with command parameters and custom logic\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadDatePicker x:Name=\"datePicker\" PickerMode=\"Popup\"> \n        <telerik:RadDatePicker.PopupSettings>\n            <telerik:PickerPopupSettings AcceptCommand=\"{Binding Accept}\"\n                                         AcceptCommandParameter=\"{Binding Date, Source={x:Reference datePicker}}\"\n\t\t\t\t\t\t\t\t CancelCommand=\"{Binding Cancel}\"\n\t\t\t\t\t\t\t\t CancelCommandParameter=\"{Binding Date, Source={x:Reference datePicker}}\"/>\n        </telerik:RadDatePicker.PopupSettings>\n            <telerik:RadDatePicker.BindingContext>\n                <local:ViewModel/>\n            </telerik:RadDatePicker.BindingContext>\n    </telerik:RadDatePicker>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Handling the ItemTapped Event in C#\nDESCRIPTION: C# implementation of the ItemTapped event handler that displays a message when a TreeView item is tapped. The handler accesses the tapped item from the event arguments.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void TreeView_ItemTapped(object sender, Telerik.Maui.Controls.TreeView.ItemViewTappedEventArgs e)\n{\n    var itemName = (e.Item as Item).Name;\n    DisplayAlert(\"Tapped Item\", $\"You have selected {itemName}\", \"OK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Current Cell Style Definition in XAML\nDESCRIPTION: Style definition for the current cell appearance in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/current-cell.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-current-cell-style' />\n```\n\n----------------------------------------\n\nTITLE: Implementing a WrapLayout Control in XAML\nDESCRIPTION: XAML code for setting up a basic WrapLayout control in a .NET MAUI page. This code shows how to define the WrapLayout and add child elements to it.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='wraplayout-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting ContentTemplate Resource in XAML for .NET MAUI Popup\nDESCRIPTION: Demonstrates how to define a DataTemplate resource that will be used as the content template for a Popup control. The template contains a StackLayout with various UI elements including Label, RadioButton, CheckBox, and Button controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/content.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='popup-features-contenttemplate-resource' />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Style for Scheduler Current Time Indicator in XAML\nDESCRIPTION: This snippet demonstrates how to create a custom Style for the SchedulerCurrentTimeIndicator in XAML. The style sets properties like Stroke, StrokeThickness, and StrokeDashArray to customize the appearance of the current time indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/scheduler-currenttime-indicator-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ResourceDictionary>\n    <Style TargetType=\"telerik:SchedulerCurrentTimeIndicator\">\n        <Setter Property=\"Stroke\" Value=\"Red\" />\n        <Setter Property=\"StrokeThickness\" Value=\"3\" />\n        <Setter Property=\"StrokeDashArray\" Value=\"2,2\" />\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Ranges in Telerik MAUI DatePicker\nDESCRIPTION: Define a date range for the DatePicker by setting MinimumDate and MaximumDate properties. This example restricts date selection to the year 2020 and applies a custom display string format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/date-range.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker MinimumDate=\"2020,1,1\"\n                            MaximumDate=\"2020,12,31\"\n                            DisplayStringFormat=\"yyy-ddd-MMM\"/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataModel Class in C#\nDESCRIPTION: This snippet defines a sample DataModel class with properties for Name and Age. It's used to represent the data items in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/sorting.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataModel\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for .NET MAUI ListView\nDESCRIPTION: Initializes a ViewModel to support data binding for headers and footers in the .NET MAUI ListView control. This ViewModel acts as a data context for the ListView, providing necessary data for header and footer templates to display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/header-footer.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-features-header-and-footer-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Adding RadChat Control in XAML - XAML\nDESCRIPTION: This snippet details how to incorporate the RadChat control into a page using XAML, setting the ItemsSource and ItemConverter properties as previously defined to enable MVVM functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/mvvm-support.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='chat-features-mvvm-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Applying Border Styling to .NET MAUI Expander\nDESCRIPTION: This snippet demonstrates how to customize the border color and thickness of a RadExpander control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadExpander x:Name=\"expanderBorder\"\n                    IsExpanded=\"True\"\n                    BorderColor=\"LightBlue\"\n                    BorderThickness=\"2\">\n    <telerik:RadExpander.Header>\n        <telerik:ExpanderHeader>\n            <Label Text=\"Expander Header\" />\n        </telerik:ExpanderHeader>\n    </telerik:RadExpander.Header>\n    <telerik:RadExpander.Content>\n        <Label Text=\"Expander Content\" />\n    </telerik:RadExpander.Content>\n</telerik:RadExpander>\n```\n\n----------------------------------------\n\nTITLE: Setting ProgressBar Animation Duration and Easing in XAML\nDESCRIPTION: Code example showing how to configure animation properties of RadLinearProgressBar when the progress value changes. It demonstrates setting ProgressAnimationDuration and ProgressAnimationEasing properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/animations.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='progressbar-progress-animation-duration-easing'/>\n```\n\n----------------------------------------\n\nTITLE: Add Gesture Recognizer to DataGrid (C#)\nDESCRIPTION: This C# snippet adds the TapGestureRecognizer (named tap) to the DataGrid's GestureRecognizers collection, enabling the DataGrid to detect and respond to the tap gesture. This allows capturing right-click events.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-right-click.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\"this.dataGrid.GestureRecognizers.Add(tap);\"\n```\n\n----------------------------------------\n\nTITLE: Handling VisibleRange Property Changes in C#\nDESCRIPTION: C# event handler implementation that monitors changes to the Scheduler's VisibleRange property. When the range changes, it extracts the start and end dates of the visible period.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/visible-range.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Scheduler_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)\n{\n\tif(e.PropertyName == \"VisibleRange\")\n\t{\n\t\tvar startDate = (sender as RadScheduler).VisibleRange.Start;\n\t\tvar endDate = (sender as RadScheduler).VisibleRange.End;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace\nDESCRIPTION: Adds the Telerik XAML namespace to enable CollectionView functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/event.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Add DataGrid to Page (XAML)\nDESCRIPTION: This XAML snippet adds a RadDataGrid control to a Grid layout within a .NET MAUI page. The DataGrid is named \"dataGrid\" for later reference in the code-behind.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-right-click.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"<Grid>\\n\t<telerik:RadDataGrid x:Name=\\\"dataGrid\\\" />\\n</Grid>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Swipe Commands in C#\nDESCRIPTION: C# ViewModel implementation containing the SwipeStartCommand, SwipingCommand, and SwipeCompleteCommand used to handle swipe operations in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private ObservableCollection<Country> страни = new ObservableCollection<Country>();\n\n    public ViewModel()\n    {\n        this.Countries = new ObservableCollection<Country>()\n        {\n            new Country(\"Germany\"),\n            new Country(\"Italy\"),\n            new Country(\"France\"),\n            new Country(\"Bulgaria\"),\n            new Country(\"Spain\"),\n            new Country(\"Portugal\")\n        };\n    }\n\n    public ObservableCollection<Country> Countries\n    {\n        get\n        {\n            return this.countries;\n        }\n        set\n        {\n            this.countries = value;\n            this.OnPropertyChanged();\n        }\n    }\n\n    private ICommand swipeStartCommand;\n    public ICommand SwipeStartCommand\n    {\n        get\n        {\n            return this.swipeStartCommand ?? (this.swipeStartCommand = new Command<CollectionViewSwipeStartingCommandContext>((context) =>\n            {\n                // If you want to cancel the swipe operation based on the item being swiped, set Cancel to true\n                // context.Cancel = true;\n                string itemName = (context.Item as Country).Name;\n                Debug.WriteLine(\"Swipe starting for '{0}'.\", itemName);\n            }));\n        }\n    }\n\n    private ICommand swipingCommand;\n    public ICommand SwipingCommand\n    {\n        get\n        {\n            return this.swipingCommand ?? (this.swipingCommand = new Command<CollectionViewSwipingCommandContext>((context) =>\n            {\n                string itemName = (context.Item as Country).Name;\n                double offset = context.Offset;\n                Debug.WriteLine(\"{0} item is being swiped. Current offset: {1}\", itemName, offset);\n            }));\n        }\n    }\n\n    private ICommand swipeCompleteCommand;\n    public ICommand SwipeCompleteCommand\n    {\n        get\n        {\n            return this.swipeCompleteCommand ?? (this.swipeCompleteCommand = new Command<CollectionViewSwipeCompletedCommandContext>((context) =>\n            {\n                string itemName = (context.Item as Country).Name;\n                double offset = context.Offset;\n                Debug.WriteLine(\"{0} item swipe completed. Final offset: {1}\", itemName, offset);\n            }));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Group Header Template in CollectionView\nDESCRIPTION: XAML markup showing how to define a CollectionView with a custom GroupHeaderTemplate. This demonstrates how to visually customize the appearance of group headers in the collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/header.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-group-header-template' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel Class for Commands in TimePicker\nDESCRIPTION: This C# snippet defines a ViewModel class with ICommand properties for Accept and Cancel commands that handle user interaction with the TimePicker, allowing for custom logic implementation when the commands are executed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/commands.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ICommand Accept { get; set; }\n    public ICommand Cancel { get; set; }\n\n    public ViewModel()\n    {\n        this.Accept = new Command(this.OnAccept);\n        this.Cancel = new Command(this.OnCancel);\n    }\n\n    private void OnAccept(object obj)\n    {\n        // implement your custom logic here\n    }\n\n    private void OnCancel(object obj)\n    {\n        // implement your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DayStyleSelector in .NET MAUI Calendar\nDESCRIPTION: This snippet demonstrates how to define a .NET MAUI Calendar control using a DayStyleSelector.  It allows for dynamic styling of the individual days based on a custom logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/day-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-styleselectors-daystyleselector-usage'/>\n```\n\n----------------------------------------\n\nTITLE: Defining the ComboBox City Business Model in C#\nDESCRIPTION: C# class definition for a City model that includes properties for Name and Country. This is used as the complex object type for ComboBox item binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/databinding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPrompt ViewModel in C#\nDESCRIPTION: Demonstrates the ViewModel implementation for handling AIPrompt output view functionality and commands\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/output-view.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='aiprompt-views-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Styling the Clear Button in TabView Header\nDESCRIPTION: XAML style definition for the clear button in the tab header, setting properties like font family, colors, and dimensions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/add-clear-button-tabview-header-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"HeaderButtonStyle\" TargetType=\"Button\">\n    <Setter Property=\"FontFamily\" Value=\"{x:Static telerik:TelerikFont.Name}\"/>\n    <Setter Property=\"TextColor\" Value=\"Gray\"/>\n    <Setter Property=\"FontAutoScalingEnabled\" Value=\"True\"/>\n    <Setter Property=\"WidthRequest\" Value=\"20\"/>\n    <Setter Property=\"HeightRequest\" Value=\"20\"/>\n    <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n    <Setter Property=\"BorderWidth\" Value=\"0\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining RichTextEditor in XAML\nDESCRIPTION: Sets up a RichTextEditor instance in XAML. Demonstrates how to define the control and its namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRichTextEditor x:Name=\"richTextEditor\" />\n```\n\n----------------------------------------\n\nTITLE: CollectionView Data Source Implementation\nDESCRIPTION: Implements the data source setup for the CollectionView control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/event.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-loadondemand-event-data' />\n```\n\n----------------------------------------\n\nTITLE: Enabling SkiaSharp Rendering for .NET MAUI DataGrid in XAML\nDESCRIPTION: This code snippet demonstrates how to set the RenderMode property of the DataGrid to SkiaSharp, enabling SkiaSharp rendering on all platforms including iOS and MacCatalyst.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/render-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                    RenderMode=\"SkiaSharp\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Day Style Selector in C#\nDESCRIPTION: Creates a custom DayStyleSelector class that inherits from Telerik.Maui.Controls.Scheduler.DayStyleSelector to provide different styles for weekend days and other dates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/day-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nscheduler-customdaystyleselector\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for TreeView Data in C#\nDESCRIPTION: Creates a ViewModel class that initializes a collection of Item objects to serve as the data source for the TreeView. This demonstrates how to set up a hierarchical data structure.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Item> Items { get; set; }\n\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Item>\n        {\n            new Item\n            {\n                Name = \"Item 1\",\n                Items = new ObservableCollection<Item>\n                {\n                    new Item { Name = \"Item 1.1\" },\n                    new Item { Name = \"Item 1.2\" }\n                }\n            },\n            new Item { Name = \"Item 2\" },\n            new Item\n            {\n                Name = \"Item 3\",\n                Items = new ObservableCollection<Item>\n                {\n                    new Item { Name = \"Item 3.1\" },\n                    new Item { Name = \"Item 3.2\" }\n                }\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing All CollectionView Groups in C#\nDESCRIPTION: Demonstrates how to collapse all groups in the CollectionView using the CollapseAll() method on the data view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-collapseall\n```\n\n----------------------------------------\n\nTITLE: Defining an Entry Control in XAML\nDESCRIPTION: XAML markup that demonstrates how to define a Telerik Entry control for use with visual states. This is the base Entry definition that will be styled using visual states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='entry-style' />\n```\n\n----------------------------------------\n\nTITLE: Custom ImageEditor Toolbar Implementation in XAML\nDESCRIPTION: Example showing how to define a custom RadImageEditor and RadImageEditorToolbar using XAML markup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/custom-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-custom-toolbar'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Shapefile Data Source for Map\nDESCRIPTION: Shows how to configure the source and data source for a MapShapeReader using .shp and .dbf files, which are required for map shape selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-selection-settintsource' />\n```\n\n----------------------------------------\n\nTITLE: Setting SpinnerFormat in .NET MAUI DatePicker - XAML\nDESCRIPTION: This snippet demonstrates how to set the SpinnerFormat property of the RadDatePicker to format the date strings shown in the spinner controls. The default format is 'g', but it can be customized.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker SpinnerFormat=\"MMMM dd\" />\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemTemplate Resource\nDESCRIPTION: Defines the ItemTemplate in the page's resources. This template defines the visual structure of each navigation item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_12\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-navigationitemtemplate'/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView with TextFilterDescriptor in XAML\nDESCRIPTION: XAML markup for implementing a RadCollectionView with a RadEntry control for text-based filtering. The user input from the RadEntry is used to filter the CollectionView data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                             ItemsSource=\"{Binding Items}\">\n    <telerik:RadCollectionView.Header>\n        <telerik:RadEntry x:Name=\"filterEntry\"\n                         WatermarkText=\"Filter items...\"\n                         TextChanged=\"OnFilterEntryTextChanged\"/>\n    </telerik:RadCollectionView.Header>\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <Grid Padding=\"16\">\n                <Label Text=\"{Binding Name}\" />\n            </Grid>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button in .NET MAUI DateTimePicker\nDESCRIPTION: This example shows how to enable the Clear button in a RadDateTimePicker by setting the IsClearButtonVisible property to True. The Clear button allows users to quickly remove the selected date value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\"\n                            IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Time Ranges in .NET MAUI TimePicker\nDESCRIPTION: This snippet demonstrates how to define a TimePicker control with a specific minimum and maximum time range using XAML syntax. The 'MinimumTime' property sets the start of the range, while the 'MaximumTime' property establishes the end of the range. The example uses default times for any unsupplied values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/time-range.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker MinimumTime=\"8:00:00\"\n                         MaximumTime=\"19:00:00\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking for Pending Changes in .NET MAUI DataForm\nDESCRIPTION: Shows how to use the HasPendingChanges property to check if there are any uncommitted changes in the DataForm. This is useful when working with explicit commit mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commit-data.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nif (this.dataForm.HasPendingChanges)\n{\n    // handle pending changes\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadComboBox, RadAutoComplete and RadEntry in XAML\nDESCRIPTION: XAML markup for defining the basic structure of RadAutoComplete, RadEntry, and RadComboBox controls with properties like ItemsSource, Placeholder, and DisplayMemberPath.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/implicit-style-input-controls.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout Padding=\"10\" Spacing=\"20\">\n    <telerik:RadAutoComplete x:Name=\"auto\"\n                                ItemsSource=\"{Binding Source}\" \n                                TextSearchPath=\"Name\"\n                                Placeholder=\"Search autocomplete\"/>\n\n    <telerik:RadEntry x:Name=\"entry\"\n                        Placeholder=\"Search entry\" />\n        \n    <telerik:RadComboBox x:Name=\"combo\" \n                            Placeholder=\"Search combo\"\n                            IsEditable=\"True\"\n                            DisplayMemberPath=\"Name\"\n                            SearchTextPath=\"Name\"\n                            ItemsSource=\"{Binding Source}\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemStyle XAML\nDESCRIPTION: Defines the NavigationView in XAML using `ItemStyle`. It uses the `ItemsSource` property to bind to a collection and the `ItemStyle` property to apply a specific style to the generated navigation items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemstyle-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Range Track Style for MAUI Slider\nDESCRIPTION: Custom style definition for the Slider's range track with TargetType set to SliderRangeTrack. This style is used to customize the appearance of the track between OriginValue and Value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/track-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-rangetrack-style' />\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button in XAML - .NET MAUI\nDESCRIPTION: This snippet shows how to enable the Clear button within the RadTimePicker, allowing users to easily remove the selected time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\" IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Scrolling in C#\nDESCRIPTION: Demonstrates the implementation of a button click event handler to call the ScrollTo method for programmatic scrolling in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/scrolling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-programmatic-scrolling'/>\n```\n\n----------------------------------------\n\nTITLE: Setting DisplayStringFormat in DateTimePicker in .NET MAUI XAML\nDESCRIPTION: Demonstrates how to set the DisplayStringFormat property on a Telerik RadDateTimePicker control to customize the date format shown when the picker is closed. This example uses 'yyyy/MMM/dd' format while also configuring other properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker DefaultHighlightedDate=\"2020,05,15\"\n                                DisplayStringFormat=\"yyyy/MMM/dd\"\n                                Placeholder=\"Pick a date!\"\n                                SpinnerFormat=\"dd/MMM/yyyy\"\n                                AreSpinnerHeadersVisible=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting the Culture Property for Telerik UI for .NET MAUI Scheduler\nDESCRIPTION: This code demonstrates how to set a custom culture for the RadScheduler control to enable globalization features like localized day names and culture-specific first day of the week.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/globalization.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET MAUI\nCODE:\n```\n<snippet id='scheduler-globalization' />\n```\n\nLANGUAGE: .NET MAUI\nCODE:\n```\n<snippet id='scheduler-culture-set' />\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionView with Custom Drop Indicator\nDESCRIPTION: Demonstrates how to add a RadCollectionView instance to the page that uses the custom drop indicator styling. This implementation works in conjunction with the ViewModel and DataModel classes from the Drag and Drop Overview.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/drop-indicator-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-drop-indicator-styling' />\n```\n\n----------------------------------------\n\nTITLE: Displaying Toggle Button for TimePicker in Telerik UI for .NET MAUI - XAML\nDESCRIPTION: This snippet illustrates how to enable the toggle button in a RadTimePicker by setting the IsToggleButtonVisible property to true. This feature adds an 'arrow' button to open the time picker UI and is enabled by default for desktop platforms. It is particularly useful if you need to explicitly enable the toggle button on both mobile and desktop platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\"\n\t\t\t\t\t\t\tPickerMode=\"DropDown\"\n\t\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Value Display Mode in .NET MAUI ProgressBar\nDESCRIPTION: Demonstrates different value display modes including percent, value, and custom text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-valuedisplaymode'/>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-customtext'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Toolbar Items to PDF Viewer in XAML\nDESCRIPTION: XAML markup showing how to add a custom toolbar item to the PDF Viewer toolbar and bind it to a custom command.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             x:Class=\"SDKBrowserMaui.PdfViewer.ToolbarCustomCommandExample\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition />\n        </Grid.RowDefinitions>\n\n        <telerik:RadPdfToolbar x:Name=\"pdfToolbar\" PdfViewer=\"{x:Reference pdfViewer}\">\n            <telerik:ButtonToolbarItem Text=\"Get Size\"\n                                     Command=\"{Binding DisplayFileSizeCommand}\"\n                                     CommandParameter=\"{x:Reference pdfViewer}\" />\n        </telerik:RadPdfToolbar>\n\n        <telerik:RadPdfViewer x:Name=\"pdfViewer\" \n                            Grid.Row=\"1\"/>\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Highlighted Time in Telerik UI TimePicker - XAML\nDESCRIPTION: This snippet sets the default highlighted time in Telerik UI TimePicker using the 'DefaultHighlightedTime' property. It pre-scrolls each spinner to the specified TimeSpan when the 'Time' property is 'null'. The example also shows SpinnerFormat and visibility customization for spinner headers.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/default-time.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker DefaultHighlightedTime=\"11:30:00\"\n                       SpinnerFormat=\"t\"\n                       AreSpinnerHeadersVisible=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with SortDescriptors Logic in C# for .NET MAUI\nDESCRIPTION: This C# code defines a ViewModel class that manages sorting logic for a CollectionView. It includes properties for sort options, methods to update SortDescriptors, and a sample data source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/bind-sortdescriptors-collectionview-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n\tprivate bool isSortByName;\n\tprivate bool isSortByAge;\n\n\tprivate ObservableCollection<SortDescriptorBase> sortDescriptors;\n\n\tpublic ViewModel()\n\t{\n\t\tthis.Items = GetData();\n\t}\n\n\tprivate static ObservableCollection<Person> GetData()\n\t{\n\t\tvar items = new ObservableCollection<Person>();\n\n\t\titems.Add(new Person { Name = \"Tom\", Age = 41 });\n\t\titems.Add(new Person { Name = \"Anna\", Age = 32 });\n\t\titems.Add(new Person { Name = \"Peter\", Age = 28 });\n\t\titems.Add(new Person { Name = \"Teodor\", Age = 39 });\n\t\titems.Add(new Person { Name = \"Lorenzo\", Age = 25 });\n\t\titems.Add(new Person { Name = \"Andrea\", Age = 33 });\n\t\titems.Add(new Person { Name = \"Martin\", Age = 36 });\n\t\titems.Add(new Person { Name = \"Alexander\", Age = 29 });\n\t\titems.Add(new Person { Name = \"Maria\", Age = 22 });\n\t\titems.Add(new Person { Name = \"Elena\", Age = 27 });\n\t\titems.Add(new Person { Name = \"Stefano\", Age = 44 });\n\t\titems.Add(new Person { Name = \"Jake\", Age = 31 });\n\t\titems.Add(new Person { Name = \"Leon\", Age = 28 });\n\n\t\treturn items;\n\t}\n\tpublic bool IsSortByName\n\t{\n\t\tget => this.isSortByName;\n\t\tset => this.UpdateValue(ref this.isSortByName, value);\n\t}\n\n\tpublic bool IsSortByAge\n\t{\n\t\tget => this.isSortByAge;\n\t\tset => this.UpdateValue(ref this.isSortByAge, value);\n\t}\n\n\tpublic ObservableCollection<Person> Items { get; set; }\n\n\tpublic ObservableCollection<SortDescriptorBase> SortDescriptors\n\t{\n\t\tget\n\t\t{\n\t\t\treturn this.sortDescriptors;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tObservableCollection<SortDescriptorBase> oldValue = this.sortDescriptors;\n\n\t\t\tif (this.UpdateValue(ref this.sortDescriptors, value))\n\t\t\t{\n\t\t\t\tthis.OnSortDescriptorsChanged(oldValue);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprotected override void OnPropertyChanged([CallerMemberName] string propertyName = null)\n\t{\n\t\tbase.OnPropertyChanged(propertyName);\n\n\t\tthis.UpdateCorrespondingDescriptor(propertyName);\n\t}\n\n\tprivate void OnSortDescriptorsChanged(ObservableCollection<SortDescriptorBase> oldValue)\n\t{\n\t\tif (oldValue != null)\n\t\t{\n\t\t\toldValue.CollectionChanged -= this.SortDescriptors_CollectionChanged;\n\t\t}\n\n\t\tif (this.sortDescriptors != null)\n\t\t{\n\t\t\tthis.sortDescriptors.CollectionChanged += SortDescriptors_CollectionChanged;\n\t\t}\n\n\t\tthis.UpdateFlags();\n\t}\n\n\tprivate void SortDescriptors_CollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\n\t{\n\t\tthis.UpdateFlags();\n\t}\n\n\tprivate void UpdateCorrespondingDescriptor(string propertyName)\n\t{\n\t\tif (propertyName == nameof(this.IsSortByName))\n\t\t{\n\t\t\tthis.EnsureDescriptor(nameof(Person.Name), this.IsSortByName);\n\t\t}\n\t\telse if (propertyName == nameof(this.IsSortByAge))\n\t\t{\n\t\t\tthis.EnsureDescriptor(nameof(Person.Age), this.IsSortByAge);\n\t\t}\n\t}\n\n\tprivate void EnsureDescriptor(string propertyName, bool include)\n\t{\n\t\tObservableCollection<SortDescriptorBase> descriptors = this.SortDescriptors;\n\n\t\tif (descriptors == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tSortDescriptorBase descriptor = this.TryGetDescriptor(propertyName);\n\n\t\tif (include)\n\t\t{\n\t\t\tif (descriptor == null)\n\t\t\t{\n\t\t\t\tdescriptors.Add(new PropertySortDescriptor { PropertyName = propertyName });\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (descriptor != null)\n\t\t\t{\n\t\t\t\tdescriptors.Remove(descriptor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void UpdateFlags()\n\t{\n\t\tthis.IsSortByName = this.TryGetDescriptor(nameof(Person.Name)) != null;\n\t\tthis.IsSortByAge = this.TryGetDescriptor(nameof(Person.Age)) != null;\n\t}\n\n\tprivate SortDescriptorBase TryGetDescriptor(string propertyName)\n\t{\n\t\tSortDescriptorBase descriptor = this.sortDescriptors?.FirstOrDefault(d => (d as PropertySortDescriptor)?.PropertyName == propertyName);\n\t\treturn descriptor;\n\t}\n}\npublic class Person\n{\n\tpublic string Name { get; set; }\n\tpublic int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hovered Cell in .NET MAUI DataGrid\nDESCRIPTION: Shows how to retrieve the currently hovered cell using the DataGrid's VisualStateService property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/mouse-hover-cell.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar hoveredCell = dataGrid.VisualStateService.MouseHoverCell;\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ListView Styling in XAML\nDESCRIPTION: Applies styling to ListView items using ListViewItemStyle properties in XAML. This snippet would be within a larger XAML file defining the ListView and its appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/listview-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-styling-listview-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar with Range Selection in XAML\nDESCRIPTION: This XAML snippet defines a RadCalendar control with range selection mode and binds the SelectionChanged event.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/calendar-week-range-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <telerik:RadCalendar x:Name=\"calendar\"\n                            HorizontalOptions=\"Center\" \n                            VerticalOptions=\"Center\"\n                            SelectionMode=\"Range\"\n                            SelectionChanged=\"OnCalendarSelectionChanged\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Customizing ScatterSpline Series in C#\nDESCRIPTION: The provided code snippet shows how to customize the properties of the ScatterSpline Series, specifically setting the stroke color and thickness for the lines. This customization allows for tailored visual representations of the data points.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-series.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar series = new ScatterSplineSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FooterStyle in XAML\nDESCRIPTION: Shows how to define the FooterStyle for a RadTimePicker's dropdown in XAML. Adjusts the footer's appearance using Telerik's styling capabilities. The snippet should be used within the XAML markup of a MAUI application and requires including the telerik namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/dropdown-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"timepicker-style-footer-style\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView Expand and Collapse Commands in .NET MAUI\nDESCRIPTION: Example showing how to implement expand and collapse functionality in a TreeView control using commands. Demonstrates the usage of ExpandAll and CollapseAll commands.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='treeview-expand-collapse-commands'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled AutoComplete Control in XAML\nDESCRIPTION: XAML implementation of a styled RadAutoComplete control with custom visual states and binding to a client collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\"\n                        Margin=\"20,20,0,0\"\n                        HeightRequest=\"50\"\n                        WidthRequest=\"300\"\n                        SearchTextPath=\"Name\"\n                        Text=\"{Binding SelectedClient, Mode=TwoWay}\"\n                        VerticalOptions=\"Start\"\n                        DisplayMode=\"Plain\"\n                        ShowSuggestionView=\"True\"\n                        NoResultsMessage=\"No Results Found\"\n                        AutomationId=\"autoComplete\"\n                        Watermark=\"Search here...\"\n                        ItemsSource=\"{Binding Clients}\">\n</telerik:RadAutoComplete>\n```\n\n----------------------------------------\n\nTITLE: Applying Label Template to Slider - XAML\nDESCRIPTION: This snippet demonstrates how to apply a custom LabelTemplate to a Slider in XAML for enhanced visual representation of labels.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/labels.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Slider LabelTemplate=\"{StaticResource CustomLabelTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SideDrawer Command in C#\nDESCRIPTION: Creates a custom command class that inherits from SideDrawerCommandBase to handle the Closed event of the SideDrawer control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomDrawerCommand : SideDrawerCommandBase\n{\n    public CustomDrawerCommand()\n    {\n        this.Id = SideDrawerCommandId.Closed;\n    }\n\n    public override bool CanExecute(object parameter)\n    {\n        return true;\n    }\n\n    public override void Execute(object parameter)\n    {\n\t\t// implement your custom logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI MaskedEntry Namespace Migration (XAML)\nDESCRIPTION: This snippet displays the .NET MAUI XAML namespace declaration for the RadMaskedEntry control. It uses the XML namespace alias `telerik` and points to the Telerik schema for .NET MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/migrate-from-xamarin.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting ToggleButton ContentTemplate in XAML\nDESCRIPTION: Example demonstrating how to define a custom ContentTemplate for a ToggleButton control in XAML. The ContentTemplate creates a View that is displayed inside the RadToggleButton's control template, with Content as its BindingContext.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='togglebutton-content-template' />\n```\n\n----------------------------------------\n\nTITLE: Programmatic Shape Selection in XAML\nDESCRIPTION: Demonstrates a XAML interface with buttons to programmatically select and deselect map shapes, specifically targeting country selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-selectshapes-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Categorical View Model\nDESCRIPTION: Creates a ViewModel that holds the data for the chart, often including an observable collection of data items. This ViewModel is bound to the chart in the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/line-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-series-series-categorical-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Define Business Object for ListView Grouping (C#)\nDESCRIPTION: This snippet defines a business object with properties that will be used for grouping in the ListView. The object is named `BusinessItem` and has properties like `Category`, `SubCategory`, and `ItemName`.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n \n```\n\n----------------------------------------\n\nTITLE: Adding PDF Viewer with Link Annotations Event - XAML\nDESCRIPTION: This snippet demonstrates how to define the PDF Viewer in XAML and subscribe to the LinkAnnotationTapped event, which allows handling user interactions with link annotations in the PDF document.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadPdfViewer x:Name=\"pdfViewer\" LinkAnnotationTapped=\"OnLinkAnnotationTapped\" />\n```\n\n----------------------------------------\n\nTITLE: Using Numerical Filter Descriptor in XAML - .NET MAUI\nDESCRIPTION: This snippet illustrates the usage of the NumericalFilterDescriptor in XAML for filtering by numerical properties. It defines the PropertyName, Operator, and Value for the filtering condition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NumericalFilterDescriptor PropertyName=\"StadiumCapacity\"\n                                   Operator=\"IsLessThan\"\n                                   Value=\"80000\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with ItemTapCommand in XAML\nDESCRIPTION: This XAML snippet shows how to define a CollectionView with ItemTapCommand binding and a sample ItemTemplate. It demonstrates the usage of the command in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                               ItemsSource=\"{Binding Countries}\"\n                               ItemTapCommand=\"{Binding ItemTapCommand}\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:RadBorder CornerRadius=\"8\"\n                               Margin=\"2\">\n                <Label Text=\"{Binding Name}\"\n                       FontSize=\"16\"\n                       VerticalOptions=\"Center\"\n                       Margin=\"10\" />\n            </telerik:RadBorder>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing All ListView Groups in C#\nDESCRIPTION: This code snippet shows how to use `ExpandAll` and `CollapseAll` methods on an `IDataViewCollection` to expand or collapse all groups within a ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/expand-collapse.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n//expand all\nvar dataView = this.listView.GetDataView();\ndataView.ExpandAll();\n\n//collapse all\nvar dataView = this.listView.GetDataView();\ndataView.CollapseAll();\n```\n\n----------------------------------------\n\nTITLE: Defining TimeSpanPicker with Time Ranges - XAML\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum time values for the TimeSpanPicker control in .NET MAUI. The MinimumTime and MaximumTime properties allow developers to define the range of time that can be selected by users.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timespan-range.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker MinimumTime=\"0:0:00:00\"\n                                MaximumTime=\"8:00:00:0\"/>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Viewport in C#\nDESCRIPTION: This C# code snippet shows how to retrieve the current viewport of the PDF Viewer and display its properties in a label. It's triggered by a button click event.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/viewport.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void GetViewport_Clicked(object sender, EventArgs e)\n{\n    this.viewportLabel.Text = this.pdfViewer.Viewport.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: MVVM-based Filtering XAML Definition\nDESCRIPTION: XAML implementation showing bindable filter descriptors setup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<listview-features-filtering-bindable-xaml/>\n```\n\n----------------------------------------\n\nTITLE: Implementing StrokeStarted Event Handler\nDESCRIPTION: Event handler for the StrokeStarted event that displays a timestamp when a stroke begins\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/events.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Star Path in XAML for .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to define a star pattern using the Telerik Path control in a .NET MAUI application. The `Geometry` property is assigned a `RadPathGeometry` object, which is a built-in geometry supported by the Path control. The XAML namespaces must be added to use this snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='path-gettingstarted-starpath-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Executing Badge Animation Command in .NET MAUI BadgeView\nDESCRIPTION: Code snippet demonstrating how to programmatically trigger a BadgeView animation by executing the BadgeStartAnimationCommand. This command starts the animation defined by the BadgeAnimationType property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.badgeView.BadgeStartAnimationCommand.Execute(null);\n```\n\n----------------------------------------\n\nTITLE: Defining Label Style Selector in XAML Resources for .NET MAUI RangeSlider\nDESCRIPTION: Adds the custom label style selector to the page's resources in XAML, allowing it to be referenced and applied to the RangeSlider control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/labels-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-styling-labelsstyleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing SplineArea Series in C#\nDESCRIPTION: This C# code snippet shows how to customize the appearance of a SplineAreaSeries. It sets the Stroke (line color), StrokeThickness (line width), and Fill (area color) properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/spline-area-series.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar series = new SplineAreaSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5,\n\tFill = new Color(0.8, 0.8, 1)\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the NavigationView Pane Header\nDESCRIPTION: This snippet shows how to set a custom style for the header of the navigation pane using the HeaderStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/pane.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='navigationview-pane-header-styling' />\n```\n\n----------------------------------------\n\nTITLE: Configuring SelectionGesture in C# - .NET MAUI\nDESCRIPTION: This snippet shows how to set the selection gesture of a RadListView in C#. It configures the selection based on holding an item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar listView = new RadListView();\nlistView.SelectionGesture = Telerik.Maui.Controls.Compatibility.DataControls.ListView.SelectionGesture.Hold;\n```\n\n----------------------------------------\n\nTITLE: Defining the Data Model for Swipeable Items\nDESCRIPTION: This snippet shows a sample Data Model class that represents individual items in the CollectionView. Each item has properties that can be displayed and modified through swipe interactions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-events.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Item : ObservableObject\n{\n    private string name;\n    private string category;\n\n    public string Name\n    {\n        get { return this.name; }\n        set { this.SetProperty(ref this.name, value); }\n    }\n\n    public string Category\n    {\n        get { return this.category; }\n        set { this.SetProperty(ref this.category, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TemplatedButton Content in XAML\nDESCRIPTION: Demonstrates how to add custom content to a Telerik UI TemplatedButton control using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:TemplatedButton WidthRequest=\"200\"\n                         HeightRequest=\"50\"\n                         VerticalOptions=\"Center\"\n                         HorizontalOptions=\"Center\">\n    <telerik:TemplatedButton.ContentTemplate>\n        <DataTemplate>\n            <Grid>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"Auto\" />\n                    <ColumnDefinition Width=\"*\" />\n                </Grid.ColumnDefinitions>\n                <Image Source=\"teleriklogo.png\"\n                       WidthRequest=\"32\"\n                       HeightRequest=\"32\" />\n                <Label Text=\"Telerik Button\"\n                       TextColor=\"White\"\n                       FontAttributes=\"Bold\"\n                       VerticalOptions=\"Center\"\n                       Grid.Column=\"1\" />\n            </Grid>\n        </DataTemplate>\n    </telerik:TemplatedButton.ContentTemplate>\n</telerik:TemplatedButton>\n```\n\n----------------------------------------\n\nTITLE: Applying PropertyGroupDescriptor to DataGrid in C#\nDESCRIPTION: This C# snippet demonstrates how to apply the PropertyGroupDescriptor to the DataGrid. It configures the grouping behavior based on a specific property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/property-group-descriptor.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-propertygroupdescriptor' />\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric Format in .NET MAUI NumericInput with XAML\nDESCRIPTION: This XAML snippet demonstrates how to set the StringFormat property of RadNumericInput for currency formatting based on UICulture. The format will apply when the control loses focus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/globalization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericInput Value=\"1000\" \n\t\t\t\t\t StringFormat=\"{}{0:C2}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Popup in .NET MAUI ContentPage\nDESCRIPTION: Demonstrates how to attach a modal popup to a ContentPage. The popup is configured with IsModal property set to true, which prevents interaction with the background content until the popup is closed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/modal-popup.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='popup-features-modal' />\n```\n\n----------------------------------------\n\nTITLE: Adding Placeholder Text to a .NET MAUI Entry Control\nDESCRIPTION: Demonstrates how to add a placeholder with custom color to a Telerik Entry control. The placeholder text is displayed when no text is entered in the field.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadEntry Placeholder=\"Enter text here\"\n\t\t\t\t\t   PlaceholderColor=\"#6EA3FF\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Styles for RadNumericInput in XAML\nDESCRIPTION: This snippet demonstrates how to create custom styles for the RadNumericInput control by targeting it within the page's resources. It highlights the application of various styling properties including visual states for enhancing the control's appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Define your custom styles here -->\n<Style TargetType=\"telerik:Maui.Controls.RadNumericInput\">\n    <Setter Property=\"IncreaseButtonStyle\" Value=\"{StaticResource CustomIncreaseButtonStyle}\" />\n    <Setter Property=\"DecreaseButtonStyle\" Value=\"{StaticResource CustomDecreaseButtonStyle}\" />\n    <Setter Property=\"TextInputStyle\" Value=\"{StaticResource CustomTextInputStyle}\" />\n    <Setter Property=\"BorderBrush\" Value=\"Blue\" />\n    <Setter Property=\"BorderThickness\" Value=\"2\" />\n    <Setter Property=\"CornerRadius\" Value=\"5\" />\n    <Setter Property=\"BackgroundColor\" Value=\"LightGray\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Needle Shape in XAML for .NET MAUI Gauge\nDESCRIPTION: This snippet demonstrates how to create a custom needle shape for a Gauge using RadPathGeometry in XAML. It defines a complex needle shape using various path segments.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/indicators.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPathGeometry x:Key=\"Needle3\">\n    <telerik:RadPathFigure StartPoint=\"0.533, 0.51\">\n        <telerik:RadLineSegment Point=\"1, 0.5\" />\n        <telerik:RadLineSegment Point=\"0.533, 0.49\" />\n        <telerik:RadArcSegment Center=\"0.5, 0.5\"\n                                     Size=\"0.07, 0.07\"\n                                     StartAngle=\"20\"\n                                     SweepAngle=\"142\" />\n        <telerik:RadLineSegment Point=\"0.43, 0.488\" />\n        <telerik:RadLineSegment Point=\"0.43, 0.512\" />\n        <telerik:RadArcSegment Center=\"0.5, 0.5\"\n                                     Size=\"0.07, 0.07\"\n                                     StartAngle=\"200\"\n                                     SweepAngle=\"142\" />\n    </telerik:RadPathFigure>\n</telerik:RadPathGeometry>\n```\n\n----------------------------------------\n\nTITLE: DatePicker SelectionChanged Event in XAML\nDESCRIPTION: This XAML snippet demonstrates how to subscribe to the `SelectionChanged` event of the `RadDatePicker` control. The `SelectionChanged` event is raised when the user picks a date value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker SelectionChanged=\"RadDatePicker_SelectionChanged\"/>\n```\n\n----------------------------------------\n\nTITLE: Current Cell Changed Event Handler in C#\nDESCRIPTION: Implementation of the event handler for tracking current cell changes in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/current-cell.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-currentcell-changed' />\n```\n\n----------------------------------------\n\nTITLE: ListView Item Events Parameters\nDESCRIPTION: Event parameters for ItemTapped and ItemHold events in .NET MAUI ListView. These events provide access to the affected item through their respective event args.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/events.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsender: object (can be cast to RadListView)\nItemTapEventArgs.Item: reference to tapped item\nItemHoldEventArgs.Item: reference to held item\n```\n\n----------------------------------------\n\nTITLE: Adding DelegateSortDescriptor to DataGrid in C#\nDESCRIPTION: Demonstrates how to add a DelegateSortDescriptor with a custom IKeyLookup to the SortDescriptors collection of a DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/sorting.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.dataGrid.SortDescriptors.Add(new DelegateSortDescriptor() { KeyLookup = new CustomIKeyLookup()});\n```\n\n----------------------------------------\n\nTITLE: Configuring CollectionView with Drag and Drop Templates\nDESCRIPTION: XAML configuration showing how to apply both DragVisualTemplate and DropIndicatorTemplate to a RadCollectionView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-dragdrop-templates' />\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Layout for RadListView in XAML\nDESCRIPTION: This snippet demonstrates how to define a grid layout for the RadListView in XAML. By setting the 'RadListView.LayoutDefinition' to an instance of 'ListViewGridLayout', developers can specify a fixed number of columns or rows using the 'SpanCount' property. It supports varying the number of columns/rows based on device orientation and requires a ViewModel with an ItemsSource collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/layouts.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-layouts-gridlayout-listview'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Template for NavigationView\nDESCRIPTION: This snippet illustrates applying a control template to a NavigationViewItem using Telerik UI for .NET MAUI, allowing further customization of the item's appearance and behavior. The ControlTemplate property is used to reference a resource-defined ControlTemplate. It involves defining the template resource and applying it to the desired navigation items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/item.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNavigationView x:Name=\"navigationView\"\n                            HeaderText=\"NavigationView Header\">\n    <telerik:RadNavigationView.Items>\n        <telerik:NavigationViewItem Text=\"Item 1\" />\n        <telerik:NavigationViewItem Text=\"Item 2\" />\n        <telerik:NavigationViewItem Text=\"Item 3\" />\n        <telerik:NavigationViewItem ControlTemplate=\"{StaticResource ItemTemplate}\"/>\n        <telerik:NavigationViewItem Text=\"Item 5\" />\n    </telerik:RadNavigationView.Items>\n</telerik:RadNavigationView>\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Level in .NET MAUI Map using XAML\nDESCRIPTION: This snippet illustrates how to set the minimum and maximum zoom levels for the Telerik Map control in XAML. Setting MaxZoomLevel and MinZoomLevel determines the allowed magnification range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/pan-and-zoom.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='map-zoom-level-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting the Standard Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This example shows how to set the Standard (long) Mask for the RadNumericMaskedEntry in .NET MAUI, making sure the input conforms to the standard number format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"D\" />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CartesianGridLineAnnotation - C#\nDESCRIPTION: This code snippet defines a ViewModel class that contains an ObservableCollection for categorical data and calculates a threshold property based on the average value of the data. This ViewModel is intended to be used with the CartesianGridLineAnnotation to visualize the average.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n    public double Threshold { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n        this.Threshold = this.Data.Average(data => data.Value);\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 21 },\n            new CategoricalData { Category = \"Perfecto\", Value = 18 },\n            new CategoricalData { Category = \"NearBy\", Value = 44 },\n            new CategoricalData { Category = \"Family\", Value = 77 },\n            new CategoricalData { Category = \"Fresh\", Value = 34 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Specific Property Changes in DataForm\nDESCRIPTION: Demonstrates how to use the ValidateChanges(string propertyName) method to validate changes for a specific property in the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/validation.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-validatechanges-on-property'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cartesian Chart Legend in XAML\nDESCRIPTION: Shows how to define a RadLegend for a Cartesian Chart, illustrating the configuration of legend properties and layout\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/legend.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\nchart-features-cartesianchart-legend-definition-xaml\n```\n\n----------------------------------------\n\nTITLE: Declaring RadChart for CartesianGridLineAnnotation - XAML\nDESCRIPTION: This XAML snippet shows how to declare the RadCartesianChart and bind it to the ViewModel for displaying data, including the setup for its horizontal and vertical axes, series, and grid line annotations based on averages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis x:Name=\"verticalAxis\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries ValueBinding=\"Value\"\n                                CategoryBinding=\"Category\"\n                                ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n    <telerik:RadCartesianChart.Annotations>\n        <telerik:CartesianGridLineAnnotation Stroke=\"#0E72F6\"\n                                                  StrokeThickness=\"2\"\n                                                  Axis=\"{x:Reference verticalAxis}\"\n                                                  Value=\"{Binding Threshold}\">\n            <telerik:CartesianGridLineAnnotation.DashArray>\n                <x:Array Type=\"{x:Type x:Double}\">\n                    <x:Double>4.0</x:Double>\n                    <x:Double>2.0</x:Double>\n                </x:Array>\n            </telerik:CartesianGridLineAnnotation.DashArray>\n        </telerik:CartesianGridLineAnnotation>\n    </telerik:RadCartesianChart.Annotations>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Applying HeaderItemTemplate in .NET MAUI for TabView\nDESCRIPTION: This example shows how to use the HeaderItemTemplate property to define a template across header items within Telerik's RadTabView for .NET MAUI, allowing for the inclusion of icons and custom layouts. Information on this snippet requires Telerik UI for .NET MAUI and focuses on using parameters like TemplateBinding for various UI elements such as Label and Image.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-tab-item-templates-tabview-dotnet-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\">\n    <telerik:RadTabView.HeaderItemStyle>\n        <Style TargetType=\"telerik:TabViewHeaderItem\">\n            <!-- Style setters here -->\n        </Style>\n    </telerik:RadTabView.HeaderItemStyle>\n    <telerik:RadTabView.HeaderItemTemplate>\n        <ControlTemplate>\n            <HorizontalStackLayout>\n                <telerik:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n                                   BorderColor=\"{TemplateBinding BorderColor}\"\n                                   BorderThickness=\"{TemplateBinding BorderThickness}\"\n                                   CornerRadius=\"{TemplateBinding CornerRadius}\"\n                                   Padding=\"0\"\n                                   HeightRequest=\"55\">\n                    <HorizontalStackLayout BackgroundColor=\"LightCyan\">\n                        <Label Text=\"{TemplateBinding Text}\" HeightRequest=\"50\"/>\n                        <Image Source=\"{TemplateBinding ImageSource}\" BackgroundColor=\"LightGray\" />\n                        <!-- Additional UI elements here -->\n                    </HorizontalStackLayout>\n                </telerik:RadBorder>\n            </HorizontalStackLayout>\n        </ControlTemplate>\n    </telerik:RadTabView.HeaderItemTemplate>\n    <!-- Define tab items here -->\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Setting ListView SelectionMode in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define the selection mode of a RadListView in XAML, allowing for multiple item selections.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\"\n\t\t\t\t\t SelectionMode=\"Multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Client Collection in C#\nDESCRIPTION: This snippet shows the implementation of a ViewModel that contains a collection of Client objects to be used as the data source for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/methods.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: TreeView Programmatic Scrolling Implementation\nDESCRIPTION: Implements the ScrollTo method execution on button click.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-programmatic-scrolling'/>\n```\n\n----------------------------------------\n\nTITLE: Location Data Model for TreeView\nDESCRIPTION: Defines the Location model class used as the root item in the TreeView data structure hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Location\n{\n    public string Name { get; set; }\n    public IList<Country> Countries { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar for SelectionChanged Event in .NET MAUI\nDESCRIPTION: This snippet provides an example of defining the Calendar control that will invoke the SelectionChanged event when users modify their selection. It is essential for tracking changes in the calendar's selected dates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/events.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<RadCalendar x:Name=\"calendar\" SelectionChanged=\"OnSelectionChanged\" />\n```\n\n----------------------------------------\n\nTITLE: Setting LabelFormat for NumericalAxis in XAML\nDESCRIPTION: This example shows how to customize the display format of labels on a Numerical Axis by setting its LabelFormat property to 'C', which formats numeric labels as currency. Additionally, it sets the MajorStep, Minimum, and Maximum properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NumericalAxis LabelFormat=\"C\"\n\t\t\t\t\t\t\tMajorStep=\"0.5\"\n\t\t\t\t\t\t\tMinimum=\"-1\"\n\t\t\t\t\t\t\tMaximum=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Setting SelectionStyle in .NET MAUI DataGrid\nDESCRIPTION: This example shows how to set the SelectionStyle property to define the appearance settings applied to the selected DataGrid row.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-styling-selectionstyle'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Attached Property for MyThickness in C#\nDESCRIPTION: This C# snippet defines the TelerikUtils class which includes the implementation of an attached property called MyThickness. This allows the StartThickness property of the GaugeRangesDefinition to be bound to a value via the attached property, facilitating dynamic updates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/gauge-rangesdefinition-gradientstop-bindable-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TelerikUtils\n{\n\tpublic static readonly BindableProperty MyThicknessProperty =\nBindableProperty.CreateAttached(\"MyThickness\", typeof(double), typeof(TelerikUtils), 0.0, propertyChanged: OnMyThicknessChanged);\n\n\tpublic static double GetMyThickness(BindableObject bindable)\n\t{\n\t\treturn (double)bindable.GetValue(MyThicknessProperty);\n\t}\n\n\tpublic static void SetMyThickness(BindableObject bindable, double value)\n\t{\n\t\tbindable.SetValue(MyThicknessProperty, value);\n\t}\n\n\tprivate static void OnMyThicknessChanged(BindableObject bindable, object oldValue, object newValue)\n\t{\n\t\tGaugeRangesDefinition gaugeRangesDefinition = (GaugeRangesDefinition)bindable;\n\t\tdouble myThickess = (double)newValue;\n\t\tgaugeRangesDefinition.StartThickness = myThickess;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Columns in MAUI DataGrid - XAML\nDESCRIPTION: This XAML snippet shows how to define custom columns within a Telerik RadDataGrid control using the custom combo box columns created in C#. The setup includes properties for item display binding and data source bindings necessary for the DataGrid's functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-sort-group-datagrid-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadDataGrid ItemsSource=\"{Binding ItemsSource}\"\n                     AutoGenerateColumns=\"False\" UserEditMode=\"Cell\"\n                     UserGroupMode=\"Enabled\">\n    <telerik:RadDataGrid.Columns>\n        <local:CustomComboBoxColumn HeaderText=\"Column 4\"\n                                    PropertyName=\"Column4\"\n                                    ItemDisplayBindingPath=\"Name\"\n                                    ItemsSource=\"{Binding PlanTypes}\">\n        </local:CustomComboBoxColumn>\n\n        <local:CustomComboBoxColumn HeaderText=\"Column 5\"\n                                    PropertyName=\"Column5\"\n                                    ItemDisplayBindingPath=\"Name\"\n                                    ItemsSource=\"{Binding TypeRecords}\">\n        </local:CustomComboBoxColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding AIPromptCommand to Commands Collection in C#\nDESCRIPTION: This snippet demonstrates how to add an AIPromptCommand to the Commands collection of the AIPrompt control. It sets the ImageSource, Text, and Command properties of the AIPromptCommand.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/predefined-ai-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.Commands.Add(new AIPromptCommand\n{\n    ImageSource = new FontImageSource() { FontFamily = TelerikFont.Name, Size = 12, Glyph = TelerikFont.IconPaste},\n    Text = \"Simplify\",\n    Command = this.CheckSyntaxCommand\n});\nthis.CheckSyntaxCommand = new Command(this.ExecuteCheckSyntaxCommand);\n```\n\n----------------------------------------\n\nTITLE: Custom ClearTextCommand Implementation in C#\nDESCRIPTION: Implementation of a custom ClearTextCommand that shows a confirmation dialog before clearing the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomAutoCompleClearTextCommand : AutoCompleteClearTextCommand\n{\n    public override async void Execute(object parameter)\n    {\n        bool executeDefault = await App.Current.MainPage.DisplayAlert(\"Confirm\", \"Clear text?\", \"Yes\", \"No\");\n        if (executeDefault)\n        {\n            base.Execute(parameter);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupStyleSelector in C#\nDESCRIPTION: C# code snippet showing the implementation of MyGroupStyleSelector class that derives from DataGridStyleSelector for group header styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyGroupStyleSelector : DataGridStyleSelector\n{\n    protected override DataGridStyle SelectStyle(object item, BindableObject container)\n    {\n        var group = item as GroupHeaderContext;\n        var style = new DataGridStyle();\n\n        if (group.Group.Key.ToString() == \"USA\")\n        {\n            style.BackgroundColor = Colors.Red;\n        }\n        else\n        {\n            style.BackgroundColor = Colors.Green;\n        }\n\n        return style;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reordering Events in C#\nDESCRIPTION: This C# code snippet shows a sample implementation of the `ColumnReordering` event. It checks if the `NewIndex` is different from the `OldIndex` and allows or cancels the drop based on a custom condition (in this case, if the new index is 0).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate void DataGrid_ColumnReordering(object sender, Telerik.Maui.Controls.DataGrid.ColumnReorderingEventArgs e)\n{\n    if (e.NewIndex != e.OldIndex)\n    {\n        if (e.NewIndex == 0)\n        {\n            e.CanDrop = false;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadListView with DelegateGroupDescriptor in XAML\nDESCRIPTION: This snippet shows how to define a RadListView control in XAML. It's the starting point for implementing grouping with DelegateGroupDescriptor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-grouping-delegategroupdescriptor' />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for ComboBox Cities in C#\nDESCRIPTION: This snippet shows the implementation of a ViewModel class used to populate the ComboBox with city data. It likely includes a collection of city objects and related properties or methods.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/header-footer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-cities-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Setting ListView SelectionMode in C# - .NET MAUI\nDESCRIPTION: This snippet shows how to set the selection mode of a RadListView programmatically in C#. The example demonstrates configuring it for multiple selections.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar listView = new RadListView();\nlistView.SelectionMode = Telerik.Maui.Controls.Compatibility.DataControls.ListView.SelectionMode.Multiple;\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value for RadNumericInput in XAML\nDESCRIPTION: This code snippet shows how to define a 'RadNumericInput' control in XAML with a predefined value set using the 'Value' property. This property accepts a value of type 'double?'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericInput x:Name=\\\"numericInput\\\" Value=\\\"{x:Null}\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ListView with Interactive Swipe Content in XAML\nDESCRIPTION: Sets up a ListView with interactive swipe content, including a delete button revealed by swiping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/cell-swipe.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\" ItemsSource=\"{Binding Source}\" IsItemSwipeEnabled=\"True\" SwipeThreshold=\"20\" SwipeOffset=\"{OnPlatform 100, WinUI=120}\" SelectionMode=\"None\">\n    <telerik:RadListView.ItemTemplate>\n        <DataTemplate>\n            <telerik:ListViewTemplateCell>\n                <telerik:ListViewTemplateCell.View>\n                    <Grid Padding=\"{OnPlatform 16, WinUI=0}\">\n                        <Label Text=\"{Binding Name}\" VerticalOptions=\"Center\" />\n                    </Grid>\n                </telerik:ListViewTemplateCell.View>\n            </telerik:ListViewTemplateCell>\n        </DataTemplate>\n    </telerik:RadListView.ItemTemplate>\n    <telerik:RadListView.ItemSwipeContentTemplate>\n        <DataTemplate>\n            <Grid>\n                <Button Text=\"Delete\" BackgroundColor=\"Red\" TextColor=\"White\" Clicked=\"Delete_Clicked\" HorizontalOptions=\"End\" WidthRequest=\"{OnPlatform 100, WinUI=120}\" />\n            </Grid>\n        </DataTemplate>\n    </telerik:RadListView.ItemSwipeContentTemplate>\n</telerik:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Setting the Currency Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This snippet illustrates setting the Currency (decimal) Mask for the RadNumericMaskedEntry in .NET MAUI, which formats the input as monetary values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"C\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ChartUtils Class for Custom Palette in C#\nDESCRIPTION: This class provides utility methods to create a custom ChartPalette based on the colors specified in the DataItem objects. It includes attached properties and conversion logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-palette-mvvm.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ChartUtils\n{\n    public static readonly BindableProperty ColorsSourceProperty = BindableProperty.CreateAttached(\"ColorsSource\", typeof(IEnumerable), typeof(ChartUtils), null,\n        propertyChanged: OnColorsSourceChanged);\n\n    public static IEnumerable GetColorsSource(BindableObject bindableObject)\n    {\n        return (IEnumerable)bindableObject.GetValue(ColorsSourceProperty);\n    }\n\n    public static void SetColorsSource(BindableObject bindableObject, IEnumerable value)\n    {\n        bindableObject.SetValue(ColorsSourceProperty, value);\n    }\n\n    private static void OnColorsSourceChanged(BindableObject bindable, object oldValue, object newValue)\n    {\n        IEnumerable newColorsSource = (IEnumerable)newValue;\n        RadCartesianChart chart = (RadCartesianChart)bindable;\n        chart.Palette = ToChartPalette(newColorsSource);\n    }\n\n    private static ChartPalette ToChartPalette(IEnumerable colorsSource)\n    {\n        ChartPalette chartPalette = new ChartPalette();\n\n        if (colorsSource != null)\n        {\n            foreach (var item in colorsSource)\n            {\n                if (item is DataItem dataItem)\n                {\n                    PaletteEntry entry = new PaletteEntry();\n                    entry.FillColor = dataItem.barColor;\n                    entry.StrokeColor = dataItem.barColor;\n                    chartPalette.Entries.Add(entry);\n                }\n            }\n        }\n\n        return chartPalette;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker Display Template (XAML)\nDESCRIPTION: This snippet shows how to define a custom template for the TimePicker display. It allows you to customize the appearance of the TimePicker when a time has been selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-display-template' />\n```\n\n----------------------------------------\n\nTITLE: Configuring ReturnCommand in XAML\nDESCRIPTION: Demonstrates how to bind the ReturnCommand to a ViewModel command in XAML for the Telerik RadEntry control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"entry\"\n                  ReturnCommand=\"{Binding EntryReturnCommand}\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Accept and Cancel Commands for TimeSpanPicker in .NET MAUI\nDESCRIPTION: This snippet shows how to define custom logic for 'AcceptCommand' and 'CancelCommand' within the TimeSpanPicker's popup settings using XAML and C#. The ViewModel is used for implementing command logic when accepting or cancelling time selections, requiring a proper binding context setup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\\n    <telerik:RadTimeSpanPicker PickerMode=\\\"Popup\\\">\\n        <telerik:RadTimeSpanPicker.PopupSettings>\\n            <telerik:PickerPopupSettings AcceptCommand=\\\"{Binding Accept}\\\"\\n                                         CancelCommand=\\\"{Binding Cancel}\\\"/>\\n        </telerik:RadTimeSpanPicker.PopupSettings>\\n            <telerik:RadTimeSpanPicker.BindingContext>\\n                <local:ViewModel/>\\n            </telerik:RadTimeSpanPicker.BindingContext>\\n    </telerik:RadTimeSpanPicker>\\n</VerticalStackLayout>\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\\n{\\n    public ICommand Accept { get; set; }\\n    public ICommand Cancel { get; set; }\\n\\n    public ViewModel()\\n    {\\n        this.Accept = new Command(this.OnAccept);\\n        this.Cancel = new Command(this.OnCancel);\\n    }\\n\\n    private void OnAccept(object obj)\\n    {\\n        // implement your custom logic here\\n    }\\n\\n    private void OnCancel(object obj)\\n    {\\n        // implement your custom logic here\\n    }\\n}\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Styling the TreeView Item Image\nDESCRIPTION: Demonstrates how to customize the image element within TreeView items by applying a style to the TreeViewItemImage.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style TargetType=\"telerik:TreeViewItemImage\">\n    <telerik:Style.Setters>\n        <Setter Property=\"HeightRequest\" Value=\"30\" />\n        <Setter Property=\"WidthRequest\" Value=\"30\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Setting DateOnly in the DatePicker\nDESCRIPTION: This snippet demonstrates how to set the DateOnly properties (MinimumDate, MaximumDate, Date, DefaultHighlightedDate) in the DatePicker control using the defined converter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/dateonly.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-dateonly-support' />\n```\n\n----------------------------------------\n\nTITLE: Aggregate Styling Example\nDESCRIPTION: Complete example of applying aggregate styles to the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-aggregate-styling-example'/>\n```\n\n----------------------------------------\n\nTITLE: Stack Bar Series XAML\nDESCRIPTION: Defines a RadCartesianChart with two vertical bar series that use the Stack combine mode. This configures the chart to display the data from two different data sources stacked on top of each other.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-features-combine-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:LinearAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries CombineMode=\"Stack\" ItemsSource=\"{Binding Data}\" CategoryBinding=\"Category\" ValueBinding=\"Value\" />\n        <telerik:BarSeries CombineMode=\"Stack\" ItemsSource=\"{Binding Data}\" CategoryBinding=\"Category\" ValueBinding=\"Value\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Configuring PickerMode in Telerik UI for .NET MAUI TimePicker - XAML\nDESCRIPTION: This snippet demonstrates how to set the PickerMode property of a RadTimePicker to 'Popup', which opens the time picker inside a popup window. It is the default mode for mobile platforms such as Android and iOS. No additional dependencies are required, and the main parameter involved is 'PickerMode'. This mode is suitable for scenarios where a popup interface is preferred for mobile devices.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\"\n\t\t\t\t\t\t\tPickerMode=\"Popup\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Template in DatePicker\nDESCRIPTION: Demonstrates how to customize the placeholder template for the DatePicker control, which defines the visual representation before a date is selected\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker PlaceholderTemplate=\"{StaticResource CustomPlaceholderTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Styling ProgressBar Progress Fill in .NET MAUI\nDESCRIPTION: Shows how to customize the progress indicator appearance with fill color and corner radius settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='progressbar-styling-progressfill'/>\n```\n\n----------------------------------------\n\nTITLE: Custom TimeSpan Formatting in XAML\nDESCRIPTION: This XAML snippet demonstrates how to apply a custom time span format to a RadTimeSpanPicker. It sets the `SpinnerFormat` and `DisplayStringFormat` properties to \"d\\:hh\\:mm\" to display days, hours, and minutes with colons as separators. The `DefaultHighlightedTime` is set to \"5:10:30:00\" to initialize the highlighted time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker DefaultHighlightedTime=\"5:10:30:00\"\n                           SpinnerFormat=\"d\\:hh\\:mm\"\n                           DisplayStringFormat=\"d\\:hh\\:mm\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DataGrid Styles in Resource Dictionary\nDESCRIPTION: Example demonstrating how to customize DataGrid styles by creating a dedicated resource dictionary. This approach shows how to modify column header drag visuals and reorder indicators to achieve consistent styling across applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-component-styles.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"DataGridColumnHeaderDragVisualTemplate\">\n    <!--Customize the 'BackgroundColor' and the 'CornerRadius'.-->\n    <telerik:RadBorder BackgroundColor=\"{DynamicResource RadPrimarySubtleActiveColor}\"\n                       CornerRadius=\"4\"\n                       MinimumWidthRequest=\"{Binding ActualWidth}\"\n                       MinimumHeightRequest=\"30\"\n                       Padding=\"8, 4\">\n        <Label Text=\"{Binding HeaderText, FallbackValue='dragging...'}\"\n               TextColor=\"{DynamicResource RadOnPrimaryColor}\"\n               VerticalTextAlignment=\"Center\" />\n    </telerik:RadBorder>\n</DataTemplate>\n\n<DataTemplate x:Key=\"DataGridColumnReorderIndicatorTemplate\">\n    <!--Customize the 'BackgroundColor'.-->\n    <telerik:RadBorder BackgroundColor=\"{DynamicResource RadPrimarySubtleActiveColor}\"\n                       WidthRequest=\"1\"\n                       HorizontalOptions=\"Start\"\n                       InputTransparent=\"True\" />\n</DataTemplate>\n\n<Style x:Key=\"CustomRadDataGridStyle\" TargetType=\"telerik:RadDataGrid\" BasedOn=\"{StaticResource RadDataGridStyle}\">\n    <Setter Property=\"ColumnHeaderDragVisualTemplate\" Value=\"{StaticResource DataGridColumnHeaderDragVisualTemplate}\" />\n    <Setter Property=\"ColumnReorderIndicatorTemplate\" Value=\"{StaticResource DataGridColumnReorderIndicatorTemplate}\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Style Properties in XAML\nDESCRIPTION: This example demonstrates how to define the styling properties for the DatePicker drop-down in Telerik UI for .NET MAUI. It requires the inclusion of the telerik namespace for accessing these properties. Key components include DropDownViewStyle, FooterStyle, AcceptButtonStyle, and CancelButtonStyle, which customize the appearance of different parts of the drop-down.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Styling Entry's Validation Error Label\nDESCRIPTION: XAML style for the validation error label that appears when the Entry contains invalid input. This defines the appearance of error messages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/visual-states.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='entry-styling-validation-error-label' />\n```\n\n----------------------------------------\n\nTITLE: Defining City Data Model in C#\nDESCRIPTION: Business model class defining the City data structure used by the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-city-businessmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining a CollectionView with Swipe Capabilities in XAML\nDESCRIPTION: This XAML snippet defines a RadCollectionView with item swipe functionality enabled. The Swiping event is hooked to handle swipe logic in code-behind.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/disable-right-left-swipe-collectionview-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                           IsItemSwipeEnabled=\"True\"\n                           Swiping=\"collectionView_Swiping\">\n```\n\n----------------------------------------\n\nTITLE: Custom HeaderTemplate for DateTimePicker\nDESCRIPTION: A template that customizes the header appearance of the DateTimePicker popup. This template defines how the header section of the popup/dialog should look.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"CustomHeaderTemplate\">\n    <Grid BackgroundColor=\"#ECF3FF\">\n        <Label Text=\"{TemplateBinding HeaderLabelText}\" \n               TextColor=\"#0E88F2\" \n               FontAttributes=\"Bold\" \n               VerticalOptions=\"Center\" \n               HorizontalOptions=\"Center\" \n               Margin=\"0, 15\" \n               FontSize=\"18\"/>\n    </Grid>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Styling Input Editor and Button in .NET MAUI\nDESCRIPTION: This snippet demonstrates adding style properties to change the appearance of the input editor and button in the Telerik .NET MAUI AIPrompt control. The primary dependency is the Telerik UI for .NET MAUI. Essential parameters include 'InputEditorStyle' for customizing the editor and 'InputButtonStyle' for the button. The input is a style resource, and the output is a styled input view. Constraints include the need for the Telerik controls and a proper .NET MAUI setup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/inputview-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-inputview-style'/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-inputview-styling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridBooleanColumn with Custom Styling in XAML\nDESCRIPTION: This snippet demonstrates how to declare a DataGridBooleanColumn with custom cell content styling. It sets the PropertyName, HeaderText, and applies a custom DataGridTextCellStyle to control the appearance of the cell content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/boolean-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridBooleanColumn PropertyName=\"IsChampion\"\n                               HeaderText=\"Champion?\">\n    <telerik:DataGridBooleanColumn.CellContentStyle>\n        <telerik:DataGridTextCellStyle TextColor=\"Green\"\n                                       FontSize=\"18\"\n                                       SelectedTextColor=\"Blue\" />\n    </telerik:DataGridBooleanColumn.CellContentStyle>\n</telerik:DataGridBooleanColumn>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Source in .NET MAUI Button\nDESCRIPTION: This XAML snippet demonstrates how to set an image as part of the content of a .NET MAUI Button using the `ImageSource` property.  The `ImageSource` is set to a specific image resource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='button-image' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Special Slots Source\nDESCRIPTION: ViewModel implementation that defines the SpecialSlotsSource for the Scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/special-slots-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-specialslots-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Navigating Within Current View Commands\nDESCRIPTION: Implement button commands to navigate between adjacent views using NavigateToNextViewCommand and NavigateToPreviousViewCommand. These commands allow linear movement within the same view level.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n\"<Button Text=\\\"Next View\\\" Command=\\\"{Binding Source={x:Reference calendar}, Path=NavigateToNextViewCommand}\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Handling SelectionChanged Event in .NET MAUI DateTimePicker\nDESCRIPTION: This example shows how to subscribe to and handle the SelectionChanged event of a RadDateTimePicker control. This event is raised when the user selects a new date value, allowing for custom logic implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker SelectionChanged=\"RadDateTimePicker_SelectionChanged\"/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadDateTimePicker_SelectionChanged(object sender, EventArgs e)\n{\n\t// implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Tick Template to Slider\nDESCRIPTION: Demonstrates how to apply a custom tick template to a Telerik Slider in XAML\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/ticks.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n\\<telerik:RadSlider TickTemplate=\"{StaticResource CustomTickTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Header Template in .NET MAUI ListView\nDESCRIPTION: Defines a DataTemplate in XAML to be used as the header in the .NET MAUI ListView. The header template is positioned above all list items, allowing for customization and additional content display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/header-footer.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-features-header-template-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for SegmentedControl Selection\nDESCRIPTION: ViewModel class that implements selection functionality through a SelectedItem property bound to the SegmentedControl.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='segmentcontrol-selection-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Removal Logic in C#\nDESCRIPTION: Custom logic for removing tokens from the ComboBox when using a custom TokenTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='remove-the-selecteditem'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Segments in .NET MAUI ProgressBar\nDESCRIPTION: Shows how to divide the ProgressBar into segments using the SegmentCount property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-segments'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical ScrollBar Visibility in .NET MAUI ListView - XAML\nDESCRIPTION: This snippet shows how to set the visibility of the vertical scrollbar in a .NET MAUI ListView using XAML. It uses the VerticalScrollBarVisibility property with the ScrollBarVisibility.Always value to ensure the scrollbar is always visible, regardless of the platform defaults.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikDataControls:RadListView x:Name=\"listView\"\n                                 VerticalScrollBarVisibility=\"Always\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Business Model and ViewModel in C#\nDESCRIPTION: This C# code defines a simple data model (`NumericalData`) with `XData` and `YData` properties, and a `ViewModel` that holds two `ObservableCollection<NumericalData>` named `Data1` and `Data2`. The `ViewModel` also includes methods to populate these collections with sample data. This sets up the data source for the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-dash-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class NumericalData\n{\n\tpublic double XData { get; set; }\n\tpublic double YData { get; set; }\n}\n\ninternal class ViewModel : NotifyPropertyChangedBase\n{\n\tpublic ObservableCollection<NumericalData> Data1 { get; set; }\n\tpublic ObservableCollection<NumericalData> Data2 { get; set; }\n\n\tpublic ViewModel()\n\t{\n\t\tthis.Data1 = GetNumericData1();\n\t\tthis.Data2 = GetNumericData2();\n\t}\n\n\tpublic static ObservableCollection<NumericalData> GetNumericData1()\n\t{\n\t\tvar data = new ObservableCollection<NumericalData>\n\t\t{\n\t\t\tnew NumericalData { XData = 2, YData = 13 },\n\t\t\tnew NumericalData { XData = 19, YData = 31 },\n\t\t\tnew NumericalData { XData = 22, YData = 33 },\n\t\t\tnew NumericalData { XData = 28, YData = 35 },\n\t\t\tnew NumericalData { XData = 33, YData = 46 },\n\t\t\tnew NumericalData { XData = 38, YData = 34 },\n\t\t\tnew NumericalData { XData = 49, YData = 66 },\n\t\t\tnew NumericalData { XData = 55, YData = 24 },\n\t\t\tnew NumericalData { XData = 62, YData = 41 },\n\t\t};\n\t\treturn data;\n\t}\n\tpublic static ObservableCollection<NumericalData> GetNumericData2()\n\t{\n\t\tvar data = new ObservableCollection<NumericalData>\n\t\t{\n\t\t\tnew NumericalData { XData = 19, YData = 17 },\n\t\t\tnew NumericalData { XData = 22, YData = 19 },\n\t\t\tnew NumericalData { XData = 28, YData = 21 },\n\t\t\tnew NumericalData { XData = 33, YData = 35 },\n\t\t\tnew NumericalData { XData = 38, YData = 43 },\n\t\t\tnew NumericalData { XData = 49, YData = 15 },\n\t\t\tnew NumericalData { XData = 55, YData = 21 },\n\t\t\tnew NumericalData { XData = 62, YData = 47 },\n\t\t};\n\t\treturn data;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Populating ItemsControl with Data in C#\nDESCRIPTION: Sets the ItemsSource property of the ItemsControl to a list of string values. This populates the control with sample data to display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.itemsControl.ItemsSource = new List<string> {\"Tom\", \"Anna\", \"Peter\", \"Teodor\", \"Lorenzo\", \"Andrea\", \"Jeremy\", \"Linda\", \"Mario\", \"Alex\", \"Barbara\", \"Nicole\", \"Paul\", \"Raul\", \"Lenny\", \"Laura\", \"Mike\", \"Taylor\", \"Martin\"};\n```\n\n----------------------------------------\n\nTITLE: TimePicker with Custom Templates (XAML)\nDESCRIPTION: This snippet shows a TimePicker definition with custom templates applied for Placeholder, Display, Header, and Footer. It demonstrates how to define the TimePicker control and set the custom templates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-custom-templates' />\n```\n\n----------------------------------------\n\nTITLE: Setting the Decimal Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This snippet demonstrates how to set the Decimal (decimal) Mask for the RadNumericMaskedEntry, enforcing numeric input with decimal points.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"N\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Style Selectors in .NET MAUI Resources\nDESCRIPTION: This snippet defines the style selectors used by the DayStyleSelector in the .NET MAUI Calendar. These selectors determine the style applied to each day based on custom conditions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/day-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-styleselectors-daystyleselector-definition'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing IFilter Interface for Custom Filtering in RadDataGrid\nDESCRIPTION: This code snippet demonstrates how to create a CustomFilter class that implements the IFilter interface to filter Club objects based on their StadiumCapacity property. The filter passes only clubs with stadium capacities between 60,000 and 85,000.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nclass CustomFilter : Telerik.Maui.Controls.Data.IFilter\n{\n    public bool PassesFilter(object item)\n    {\n        if(item is Club club \n           && club.StadiumCapacity > 60000 \n           && club.StadiumCapacity < 85000)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TemplatedPicker in XAML\nDESCRIPTION: This XAML snippet defines a TemplatedPicker control within a VerticalStackLayout and includes a button to clear the selection. The RadTemplatedPicker is set up with a SelectorTemplate that leverages a RadCalendar for date selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <Button Clicked=\"OnClearSelectionClicked\" Text=\"clear selection\"/>\n    <telerik:RadTemplatedPicker x:Name=\"picker\">\n        <telerik:RadTemplatedPicker.SelectorTemplate>\n            <ControlTemplate>\n                <telerik:RadCalendar SelectedDate=\"{TemplateBinding SelectedValue, Mode=TwoWay}\"/>\n            </ControlTemplate>\n        </telerik:RadTemplatedPicker.SelectorTemplate>\n    </telerik:RadTemplatedPicker>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Defining ListPicker with Templates in XAML\nDESCRIPTION: This snippet demonstrates how to define a sample ListPicker with various templates in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker x:Name=\"listPicker\"\n                          ItemsSource=\"{Binding Items}\"\n                          DisplayMemberPath=\"Name\"\n                          ItemTemplate=\"{StaticResource itemTemplate}\"\n                          SelectedItemTemplate=\"{StaticResource selectedItemTemplate}\"\n                          PlaceholderTemplate=\"{StaticResource placeholderTemplate}\"\n                          DisplayTemplate=\"{StaticResource displayTemplate}\">\n    <telerik:RadListPicker.SelectorSettings>\n        <telerik:PickerPopupSelectorSettings HeaderTemplate=\"{StaticResource headerTemplate}\"\n                                            FooterTemplate=\"{StaticResource footerTemplate}\"/>\n    </telerik:RadListPicker.SelectorSettings>\n</telerik:RadListPicker>\n```\n\n----------------------------------------\n\nTITLE: Enabling DataGrid Column Footers in XAML\nDESCRIPTION: Shows how to enable column footers in a DataGrid by setting the ShowColumnFooters property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/footer.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" \n                     ShowColumnFooters=\"True\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding SignaturePad instance in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add a SignaturePad instance to your .NET MAUI application.  This creates a basic signature capture area within your UI. No specific dependencies beyond Telerik UI for .NET MAUI are required.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/saving-options.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='signaturepad-saving-image-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPromptInputView in XAML for .NET MAUI\nDESCRIPTION: A XAML implementation example of the AIPromptInputView for the Telerik UI AIPrompt control. This shows how to set up the input view in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/input-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-inputoutputview-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Converter in .NET MAUI\nDESCRIPTION: Defines a `CountryNameToFlagConverter` in C#. This converter is used to map country names to their corresponding flag image in a .NET MAUI application. It requires the implementation of `IValueConverter` and is used within the CollectionView GroupHeaderTemplate to customize item display according to a mapping dictionary.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/group-collectionview-display-another-property-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CountryNameToFlagConverter : IValueConverter\n{\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        var countriesAndFlags = new Dictionary<string, string>();\n        for (int i = 1; i <= 5; i++)\n        {\n            countriesAndFlags.Add($\"Country {i}\", $\"flag_{i}.png\");\n        }\n\n        if (value == null || !countriesAndFlags.ContainsKey((string)value))\n        {\n            return countriesAndFlags.First().Value;\n        }\n\n        var countryName = (string)value;\n        return countriesAndFlags[countryName];\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadPdfViewer and RadPdfToolbar in XAML\nDESCRIPTION: This XAML code snippet defines the structure of a page with a RadPdfViewer, RadPdfToolbar, and buttons for getting and changing the viewport. It sets up a grid layout and includes various toolbar items for PDF navigation and zooming.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/viewport.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"*\"/>\n    </Grid.RowDefinitions>\n    <HorizontalStackLayout>\n        <Button Text=\"Get Viewport\" Clicked=\"GetViewport_Clicked\" />\n        <Label x:Name=\"viewportLabel\" VerticalOptions=\"Center\"/>\n    </HorizontalStackLayout>\n    <HorizontalStackLayout Grid.Row=\"1\">\n        <Button Text=\"Change Viewport\" Clicked=\"ChangeViewport_Clicked\" />\n    </HorizontalStackLayout>\n    <telerik:RadPdfViewerToolbar PdfViewer=\"{x:Reference pdfViewer1 }\" x:Name=\"toolbar1\" Grid.Row=\"2\">\n        <telerik:PdfViewerZoomInToolbarItem />\n        <telerik:PdfViewerZoomOutToolbarItem />\n        <telerik:PdfViewerNavigateToPreviousPageToolbarItem />\n        <telerik:PdfViewerNavigateToNextPageToolbarItem />\n        <telerik:PdfViewerToggleLayoutModeToolbarItem />\n    </telerik:RadPdfViewerToolbar>\n    <telerik:RadPdfViewer x:Name=\"pdfViewer\" Grid.Row=\"3\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Declaring Numerical Data Model for ScatterArea Series\nDESCRIPTION: Defines a data model for numerical chart data points, typically used to structure the input data for the ScatterArea Series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-area-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/* Numerical Data Model (snippet placeholder) */\n```\n\n----------------------------------------\n\nTITLE: Styling the TreeView Item CheckBox\nDESCRIPTION: Shows how to customize the appearance of checkboxes in TreeView items by applying a style to the TreeViewItemCheckBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style TargetType=\"telerik:TreeViewItemCheckBox\">\n    <telerik:Style.Setters>\n        <Setter Property=\"CheckedColor\" Value=\"Red\" />\n        <Setter Property=\"BorderColor\" Value=\"Blue\" />\n        <Setter Property=\"CheckBoxThickness\" Value=\"3\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel with C#\nDESCRIPTION: This code snippet illustrates the creation of a `ViewModel` class which holds an `ObservableCollection` of `TemporalData` objects. The ViewModel is responsible for providing data to the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/common-features.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<TemporalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetDateTimeData(6);\n    }\n\n    private static ObservableCollection<TemporalData> GetDateTimeData(int itemsCount)\n    {\n        var startDate = new DateTime(2018, 03, 01);\n\n        ObservableCollection<TemporalData> items = new ObservableCollection<TemporalData>();\n        for (int i = 0; i < itemsCount; i++)\n        {\n            TemporalData data = new TemporalData();\n            data.Date = startDate.AddDays(i);\n            data.Value = Math.Sin(i);\n\n            items.Add(data);\n        }\n\n        return items;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decade View Display Mode in .NET MAUI Calendar\nDESCRIPTION: Shows how to set up a decade view in the .NET MAUI Calendar. This view will depict an entire decade, leveraging Telerik's controls for calendar implementation. It uses the decade display mode as an input with a visual representation output.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/display-modes.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-displaymode-decade'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Footer Navigation Item in XAML\nDESCRIPTION: Shows how to add a navigation item to the footer of the NavigationView Pane by setting the Position property to Footer\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/pane.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NavigationViewItem Text=\"Item 1\" \n                            Position=\"Footer\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for DataForm Editors\nDESCRIPTION: ViewModel class definition containing the editors model used by the DataForm component\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/layouts/verticalstack.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='dataform-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: LoadOnDemand Event Implementation\nDESCRIPTION: Handles the LoadOnDemand event to load additional items when triggered\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/event.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-loadondemand-event-implementation' />\n```\n\n----------------------------------------\n\nTITLE: String Formatting in .NET MAUI ProgressBar\nDESCRIPTION: Example of applying string formatting to the numeric progress value display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-stringformat'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Business Model in C#\nDESCRIPTION: This snippet represents a business model for the data being displayed in the RadListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-grouping-groupdescriptors-businessobject' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Code snippet showing how to add the required Telerik XAML namespace for using Telerik UI controls in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/animations.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: TimePicker Footer Template (XAML)\nDESCRIPTION: This snippet shows how to define a custom template for the TimePicker footer. This template customizes the dialog footer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-footer-template' />\n```\n\n----------------------------------------\n\nTITLE: TimeSpanPicker Header Template\nDESCRIPTION: This template defines the content displayed in the header of the TimeSpanPicker dialog (popup). It allows customization of the header's appearance and content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='timespanpicker-header-template' />\n```\n\n----------------------------------------\n\nTITLE: Adding DataPager Control - .NET MAUI - XAML\nDESCRIPTION: This code snippet demonstrates how to add a DataPager control to a .NET MAUI application using XAML. Ensure you have set up your .NET MAUI application and installed Telerik UI for .NET MAUI. The code defines the RadDataPager control with a unique name to be used on your page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager x:Name=\"dataPager\"/>\n```\n\n----------------------------------------\n\nTITLE: ViewModel for TreeView Location Data\nDESCRIPTION: Implements a ViewModel that initializes and provides hierarchical data for the TreeView, including locations, countries, and cities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Location>\n        {\n            new Location\n            {\n                Name = \"World\",\n                Countries = new ObservableCollection<Country>\n                {\n                    new Country\n                    {\n                        Name = \"USA\",\n                        Cities = new ObservableCollection<City>\n                        {\n                            new City { Name = \"New York\"},\n                            new City { Name = \"Los Angeles\"},\n                            new City { Name = \"Chicago\"},\n                        }\n                    },\n                    new Country\n                    {\n                        Name = \"England\",\n                        Cities = new ObservableCollection<City>\n                        {\n                            new City { Name = \"London\"},\n                            new City { Name = \"Bristol\"},\n                            new City { Name = \"Liverpool\"},\n                        }\n                    },\n                    new Country\n                    {\n                        Name = \"Canada\",\n                        Cities = new ObservableCollection<City>\n                        {\n                            new City { Name = \"Toronto\"},\n                            new City { Name = \"Vancouver\"},\n                            new City { Name = \"Montreal\"},\n                        }\n                    },\n                }\n            },\n        };\n    }\n\n    public ObservableCollection<Location> Items { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI Calendar Header Text Formatting\nDESCRIPTION: This snippet demonstrates how to define a Calendar and format the header text with the `MonthHeaderTextFormat`, `YearHeaderTextFormat`, `DecadeHeaderTextFormat`, and `CenturyHeaderTextFormat` properties. It showcases the properties used to control the appearance of the header in different calendar display modes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-headertext-formatting'/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadTemplatedPicker Styles - Popup Styling\nDESCRIPTION: This snippet demonstrates how to define and apply the Popup styling properties for the RadTemplatedPicker in XAML, which allows customization of the popup's visual appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-style' />\n```\n\n----------------------------------------\n\nTITLE: Binding ListView Command in XAML\nDESCRIPTION: Demonstrates how to bind a command to ListView using ListViewUserCommand in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.Commands>\\n    <telerik:ListViewUserCommand Id=\\\"ItemTap\\\" Command=\\\"{Binding ItemTapCommand}\\\" />\\n</telerik:RadListView.Commands>\n```\n\n----------------------------------------\n\nTITLE: Configuring GridLinesVisibility in .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to set the GridLinesVisibility property to define which DataGrid lines are visible, along with GridLinesThickness to set the width of the lines.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n\t\t\t\t\t ItemsSource=\"{Binding GridSource}\"\n\t\t\t\t\t GridLinesVisibility=\"Both\"\n\t\t\t\t\t GridLinesThickness=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: ListView Definition with GroupHeaderStyle - XAML\nDESCRIPTION: This code snippet demonstrates how to configure a RadListView in XAML, applying the GroupHeaderStyle to customize the visual properties of the group headers. This is crucial for implementing the desired styling in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/group-header.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<RadListView ItemsSource=\"{Binding Cities}\" GroupHeaderTemplate=\"{StaticResource GroupHeaderTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: ViewModel for CollectionView Integration - C#\nDESCRIPTION: This snippet defines a `ViewModel` class that manages a collection of `Book` objects for the CollectionView. It includes a `Boolean IsLoading` property to control the BusyIndicator's state and a `LoadData` command for fetching data asynchronously.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/integration.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BooksViewModel : INotifyPropertyChanged {\n    public ObservableCollection<Book> Books { get; set; }\n    public bool IsLoading { get; set; }\n\n    public ICommand LoadDataCommand { get; }\n\n    public BooksViewModel() {\n        LoadDataCommand = new Command(OnLoadData);\n    }\n\n    private async void OnLoadData() {\n        IsLoading = true;\n        // Simulate data loading\n        await Task.Delay(2000);\n        // Load data here\n        IsLoading = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic PDF Viewer Toolbar in XAML\nDESCRIPTION: XAML markup for defining a RadPdfViewer control and its associated RadPdfToolbar with predefined toolbar items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing ScatterArea Series Styling in C#\nDESCRIPTION: Shows how to programmatically customize the appearance of a ScatterArea Series by setting stroke, stroke thickness, and fill colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-area-series.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar series = new ScatterAreaSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5,\n\tFill = new Color(0.8, 0.8, 1)\n};\n```\n\n----------------------------------------\n\nTITLE: NumericMaskedEntry with Null Value Support in XAML\nDESCRIPTION: This snippet demonstrates how to allow `null` values in a `NumericMaskedEntry` control by setting the `AllowNullValue` property to `True`. By default, the control coerces `null` to `0`. Setting `AllowNullValue` to `True` enables null values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/value.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='numericmaskedentry-allownullvalues-true-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Expanding and Collapsing All Groups in C# for .NET MAUI DataGrid\nDESCRIPTION: This code shows how to expand all groups using the ExpandAll method and collapse all groups using the CollapseAll method on the IDataViewCollection object.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/expand-collapse.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n//expand all\nvar dataView = this.dataGrid.GetDataView();\ndataView.ExpandAll();\n\n//collapse all\nvar dataView = this.dataGrid.GetDataView();\ndataView.CollapseAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Binding for RadAutoComplete in XAML\nDESCRIPTION: Demonstrates how to declare a RadAutoComplete control in XAML and bind it to a collection of Client objects, specifying the TextSearchPath for filtering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-data-binding'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Checked State for .NET MAUI CheckBox - XAML\nDESCRIPTION: This snippet demonstrates how to define a Telerik CheckBox with a bindable IsChecked property and enable the indeterminate state using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/checked-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox x:Name=\"checkboxIsChecked\" \n\t\t\t IsChecked=\"{Binding IsChecked}\" \n\t\t IsThreeState=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Example with Selected Item in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define a TabView and its items, utilizing the IsSelected property to set the default selected item to 'Home'. The example illustrates the usage of RadTabView and corresponding TabViewItems in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\">\n    <telerik:TabViewItem HeaderText=\"Home\" IsSelected=\"True\">\n        <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"Folder\">\n        <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"View\">\n        <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n    </telerik:TabViewItem>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Customizing Spline Series in C#\nDESCRIPTION: This snippet demonstrates how to customize the visual appearance of a Spline Series in a .NET MAUI application by setting the stroke color and thickness. It requires a reference to the SplineSeries class and uses the Color struct for color specification.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/spline-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar series = new SplineSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Viewer with Search Capabilities in XAML\nDESCRIPTION: XAML markup that defines the PDF Viewer control with custom UI elements for programmatic search functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/programmatic.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-search-programmatic'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Viewer with Text Selection in XAML\nDESCRIPTION: XAML declaration of a PDF Viewer control with text selection capabilities. The snippet shows how to define the control with necessary event handlers.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/selection/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Changed Event Handler - .NET MAUI\nDESCRIPTION: This C# snippet provides the event handler for the SelectionChanged event of the RadTimePicker. It allows developers to implement custom logic when the selected time changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprivate void TimePicker_SelectionChanged(object sender, EventArgs e) {\n\t// implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker Popup Style\nDESCRIPTION: Demonstrates how to apply custom styling to the DatePicker popup using PopupSettings and various style properties\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker PopupSettings=\"{StaticResource PopupSettings}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager in XAML for PageSizesViewStyle\nDESCRIPTION: This snippet demonstrates how to define a RadDataPager and apply the PageSizesViewStyle to it. The referencing of the style allows for customizable pagination in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/pagesizes.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager PageSizesViewStyle=\"{StaticResource PageSizesViewStyle}\"\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar with Disabled Selection\nDESCRIPTION: This snippet demonstrates how to define a .NET MAUI Calendar with selection disabled, preventing user interaction for date selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-disabled-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Load More Button Template\nDESCRIPTION: Shows how to customize the appearance of the manual load button in LoadOnDemandMode by defining a custom ItemTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LoadOnDemandItemTemplate>\n    <DataTemplate>\n        <Button Text=\"Load More Items\"\n                BackgroundColor=\"Blue\"\n                TextColor=\"White\" />\n    </DataTemplate>\n</telerik:RadListView.LoadOnDemandItemTemplate>\n```\n\n----------------------------------------\n\nTITLE: Customize Chat Entry in .NET MAUI Chat\nDESCRIPTION: This XAML snippet demonstrates how to customize the appearance of the ChatEntry in the Telerik UI for .NET MAUI Chat control using an implicit style. It sets properties such as BorderBrush, FocusedBorderBrush, BorderThickness, and CornerRadius to modify the entry's appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:ChatEntry\">\n    <Setter Property=\"BorderBrush\" Value=\"{StaticResource ChatInputAreaStrokeColor}\" />\n    <Setter Property=\"FocusedBorderBrush\" Value=\"{StaticResource ChatInputAreaStrokeColor}\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n    <Setter Property=\"CornerRadius\" Value=\"8\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with LoadOnDemandCollection\nDESCRIPTION: ViewModel implementation that uses LoadOnDemandCollection as the source for the CollectionView. This provides the data-loading functionality for both automatic and manual load on demand examples.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-loadondemand-collection-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Populating Suggested Actions Collection\nDESCRIPTION: Shows how to populate the Actions property of a SuggestedActionsItem with a collection of suggested actions in RadChat\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/suggested-actions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for chat-suggested-actions-collection snippet\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handler for Page Elements Loaded\nDESCRIPTION: Demonstrates how to add an event handler for the PageElementsLoaded event in the .NET MAUI PDF Viewer. The handler provides a mechanism to modify content before rendering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/events.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-page-element-loaded-event' />\n```\n\n----------------------------------------\n\nTITLE: Reading Font Data from Stream in C#\nDESCRIPTION: This method reads all bytes from an input stream and returns them as a byte array. It's used to load font data from a file (embedded resource) into memory before registering the font with the PDF Viewer. This is a necessary step to provide the raw font data required by the `RegisterFont` method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate static byte[] ReadAllBytes(Stream input)\n{\n\tbyte[] buffer = new byte[16 * 1024];\n\tusing (MemoryStream ms = new MemoryStream())\n\t{\n\t\tint read;\n\t\twhile ((read = input.Read(buffer, 0, buffer.Length)) > 0)\n\t\t{\n\t\t\tms.Write(buffer, 0, read);\n\t\t}\n\t\treturn ms.ToArray();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Editor in C# - .NET MAUI\nDESCRIPTION: This snippet defines a simple custom Editor class derived from the base Editor class in C#. It serves as the starting point for further customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dotnet-maui-editor-scroll-inside-scrollview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEditor : Editor\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes in .NET MAUI DataForm\nDESCRIPTION: Demonstrates how to use the CommitChanges() method to manually commit all pending changes in the DataForm. This method returns true if validation passes, false otherwise.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commit-data.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbool isCommitted = this.dataForm.CommitChanges();\n```\n\n----------------------------------------\n\nTITLE: Defining the Selector Template - XAML\nDESCRIPTION: This snippet defines the Selector Template for the TemplatedPicker in XAML, allowing customization of the item's display in the picker selector.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataItem Class\nDESCRIPTION: Class definition for DataItem with properties Name, Description, and IsSpecial that will be used in the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/item-template-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-itemtemplateselector-dataitem' />\n```\n\n----------------------------------------\n\nTITLE: AutoComplete with RadHighlightLabel for Text Highlighting\nDESCRIPTION: XAML implementation showing how to use RadHighlightLabel within an AutoComplete control to customize the highlighting of search text in suggestion items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\"\n                        Watermark=\"Search here...\"\n                        ItemsSource=\"{Binding Clients}\"\n                        SearchTextPath=\"Name\"\n                        DisplayMode=\"Plain\"\n                        ShowSuggestionView=\"True\">\n    <telerik:RadAutoComplete.SuggestionItemTemplate>\n        <DataTemplate>\n            <telerik:RadHighlightLabel Text=\"{Binding Name}\" \n                                        HighlightText=\"{Binding Text, Source={x:Reference autoComplete}}\" \n                                        HighlightTextColor=\"Red\"/>\n        </DataTemplate>\n    </telerik:RadAutoComplete.SuggestionItemTemplate>\n</telerik:RadAutoComplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing CollapseAll Method in C#\nDESCRIPTION: This snippet shows the implementation of the CollapseAll method, which is called on a button click to collapse all items in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/expand-collapse.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void CollapseAll_Clicked(object sender, EventArgs e)\n{\n    this.treeView.CollapseAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Month View Display Mode in .NET MAUI Calendar\nDESCRIPTION: Illustrates the configuration for setting the .NET MAUI Calendar to display a month view. This setup leverages Telerik's MAUI Calendar control. The primary input is the month display mode; the output is the calendar visualized in month format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/display-modes.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-displaymode-month'/>\n```\n\n----------------------------------------\n\nTITLE: Add Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet shows how to add the telerik namespace to your .NET MAUI XAML file. This namespace is essential for using Telerik controls in your XAML layouts, allowing you to reference the `RadButton` and other Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ItemTapCommand ViewModel in C#\nDESCRIPTION: This code snippet demonstrates the implementation of a ViewModel with an ItemTapCommand for the CollectionView. It includes an ObservableCollection of Countries and a command that handles item tapping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private ObservableCollection<Country> countries;\n\n    public ObservableCollection<Country> Countries\n    {\n        get { return this.countries; }\n        set { this.UpdateValue(ref this.countries, value); }\n    }\n\n    public ICommand ItemTapCommand { get; set; }\n\n    public ViewModel()\n    {\n        this.Countries = new ObservableCollection<Country>()\n        {\n            new Country() { Name = \"Argentina\", Id = 1 },\n            new Country() { Name = \"Brazil\", Id = 2 },\n            new Country() { Name = \"Canada\", Id = 3 },\n            new Country() { Name = \"Denmark\", Id = 4 },\n            new Country() { Name = \"England\", Id = 5 }\n        };\n\n        this.ItemTapCommand = new Command<Country>((country) =>\n        {\n            Application.Current.MainPage.DisplayAlert(\"ItemTapped\", $\"Country: {country.Name}\", \"OK\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Buttons to Zoom Commands in XAML\nDESCRIPTION: This snippet demonstrates how to bind button commands to the `ZoomInCommand` and `ZoomOutCommand` of the `RadMap` control.  The `Command` property of each button is bound to the corresponding zoom command using `x:Reference` to the `map` instance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n```XAML\n<Button Text=\"Zoom In\" Command=\"{Binding Source={x:Reference map}, Path=ZoomInCommand}\"/>\n<Button Text=\"Zoom Out\" Command=\"{Binding Source={x:Reference map}, Path=ZoomOutCommand}}\"/>\n ```\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with Collection of Cities - C#\nDESCRIPTION: This snippet outlines the creation of a ViewModel that holds a collection of city objects. This ViewModel will be used to populate the ListView and facilitate grouping by properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/property-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='listview-grouping-groupdescriptors-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Creating Business Objects for AutoComplete in C#\nDESCRIPTION: Shows the implementation of a City business object with properties to be used with the AutoComplete control in the tokens example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/tokens-support.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-city-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler with Navigation Commands\nDESCRIPTION: Sample configuration of a Scheduler component with navigation commands implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-navigation-commands' />\n```\n\n----------------------------------------\n\nTITLE: Implementing the ViewModel for Pull-to-Refresh\nDESCRIPTION: This snippet references the ViewModel implementation that handles the refresh commands and data loading logic for the pull-to-refresh functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/pull-to-refresh.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-pull-to-refresh-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Creating a RadTextMaskedEntry in XAML\nDESCRIPTION: This snippet demonstrates how to create a RadTextMaskedEntry using XAML syntax. The resulting component can validate user input against defined text masks, enhancing data integrity in user interfaces.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask-types/text.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='textmaskedentry-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining TimeSpanPicker with Current Selected Time\nDESCRIPTION: Sets the current time interval for the TimeSpanPicker using the Time property, which accepts a TimeSpan value\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/default-timespan.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPrompt Output View in XAML\nDESCRIPTION: Shows how to implement a basic AIPromptOutputView component in XAML with output items display functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/output-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-inputoutputview-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Describing PromptRequest Event in Markdown\nDESCRIPTION: This snippet describes the PromptRequest event of the AIPrompt control, including when it occurs and the parameters its event handler receives.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/commands-events.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `PromptRequest`&mdash;Occurs when the end-user makes a request by pressing the input button inside the Input View. The `PromptRequest` event handler receives two parameters:\n\t- The `sender` which is the `RadAIPrompt` control.\n\t- `System.EventArgs`object.\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Code showing how to add the Telerik XAML namespace to access Telerik UI for .NET MAUI controls in your XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/paging.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to your XAML file, allowing you to use Telerik controls. This namespace declaration maps the `telerik` alias to the Telerik XAML schema.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Command in ViewModel\nDESCRIPTION: Creates a command implementation in the ViewModel for handling ListView interactions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic ICommand ItemTapCommand { get; set; }\\n\\npublic ViewModel()\\n{\\n    this.ItemTapCommand = new Command(this.OnItemTap);\\n}\\n\\nprivate void OnItemTap(object item)\\n{\\n    // implement your logic here\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Special Slot Template Resources in XAML for .NET MAUI Scheduler\nDESCRIPTION: XAML code snippet that defines resources for customizing special slots in the Telerik UI for .NET MAUI Scheduler. This template defines how special slots will appear in the scheduler view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/specialslots/special-slot-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-customslots-resources' />\n```\n\n----------------------------------------\n\nTITLE: Adding Secondary Vertical Axis in C# for Multiple Platforms\nDESCRIPTION: This C# code demonstrates how to add a secondary vertical axis to the chart for Android, iOS/MacCatalyst, and Windows platforms using platform-specific implementations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-multiple-axes.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void chart_HandlerChanged(object sender, EventArgs e)\n{\n    this.UpdateChart();\n}\n\nprivate void UpdateChart()\n{\n    var platformView = this.chart.Handler.PlatformView;\n#if ANDROID\n    var platformChart = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.RadCartesianChartView)platformView;\n    var platformSeries = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries)platformChart.Series.Get(1);\n    AddSecondaryVerticalAxis(platformSeries);\n\n#elif IOS || MACCATALYST\n    var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n    var platformSeries = (TelerikUI.TKChartLineSeries)platformChart.Series[1];\n    TelerikUI.TKChartNumericAxis tKChartNumericAxis = new TelerikUI.TKChartNumericAxis();\n    tKChartNumericAxis.Position = TelerikUI.TKChartAxisPosition.Left;\n    platformChart.AddAxis(tKChartNumericAxis);\n    platformSeries.YAxis = tKChartNumericAxis;\n\n#elif WINDOWS\n    var platformChart = (Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)platformView;\n    var platformSeries = (Telerik.UI.Xaml.Controls.Chart.LineSeries)platformChart.Series[1];\n    var vertical = platformSeries.VerticalAxis = new Telerik.UI.Xaml.Controls.Chart.LinearAxis();\n    vertical.HorizontalLocation = Telerik.Charting.AxisHorizontalLocation.Left;\n#endif\n}\n\n\n#if ANDROID\n\nprivate void AddSecondaryVerticalAxis(Java.Lang.Object lineSeries)\n{\n    if (lineSeries is Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries)\n    {\n        var series = lineSeries as Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries;\n\n        Com.Telerik.Widget.Chart.Visualization.CartesianChart.Axes.LinearAxis verticalAxisBar = new Com.Telerik.Widget.Chart.Visualization.CartesianChart.Axes.LinearAxis();\n        verticalAxisBar.HorizontalLocation = Com.Telerik.Widget.Chart.Engine.Axes.Common.AxisHorizontalLocation.Left;\n        series.VerticalAxis = verticalAxisBar;\n    }\n}\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Range Track Style for RangeSlider in .NET MAUI\nDESCRIPTION: Defines a custom style for the range track of a RangeSlider with a TargetType of SliderRangeTrack. The style sets the CornerRadius to 4 and BorderThickness to 0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/track-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"CustomRangeTrackStyle\" TargetType=\"SliderRangeTrack\">\n    <Setter Property=\"CornerRadius\" Value=\"4\" />\n    <Setter Property=\"BorderThickness\" Value=\"0\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Enabling Password Functionality in .NET MAUI Entry\nDESCRIPTION: Shows how to enable password functionality in a Telerik Entry control by setting the IsPassword property to True, which replaces input characters with password hint characters.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry Placeholder=\"Enter password\"\n                  IsPassword=\"True\">\n</telerik:RadEntry>\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespace for Telerik Controls in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet shows how to define the namespace required for using Telerik controls in your XAML file. It allows access to the Telerik components necessary for defining geometries and other UI elements. The specified namespace is crucial for the XAML parser to recognize Telerik-related elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-types.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressBar with Events in XAML\nDESCRIPTION: XAML definition of a RadLinearProgressBar with event handlers for tracking progress changes and completion.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadLinearProgressBar x:Name=\"progressBar\" ProgressChanged=\"ProgressBar_ProgressChanged\" ProgressCompleted=\"ProgressBar_ProgressCompleted\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required for using Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/error-message-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Documents from URI - C#\nDESCRIPTION: This snippet illustrates how to visualize a PDF document from a URI by using the UriDocumentSource class. The example demonstrates the retrieval of a valid URL using the GetUri() method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/display-documents.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nUri uri = this.GetUri();\nthis.pdfViewer.Source = new UriDocumentSource(uri);\n```\n\n----------------------------------------\n\nTITLE: Handling the SelectionChanged Event in C#\nDESCRIPTION: C# implementation of the SelectionChanged event handler that displays information about the number of selected items when the user changes selection in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void TreeView_SelectionChanged(object sender, System.EventArgs e)\n{\n    DisplayAlert(\"Tree View Selection\", $\"You have {this.treeView.SelectedItems.Count} items selected.\", \"OK\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom RangeSlider Styles in XAML\nDESCRIPTION: Sample code showing how to define custom styles in page resources for RangeSlider's range thumb components\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/rangethumb-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-rangethumb-styling' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Font Icon to Label in C#\nDESCRIPTION: This example shows how to programmatically add a Telerik font icon to a Label control using C#. It sets the Text property to the escaped Unicode value and specifies the FontFamily.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/examples-icons.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar label = new Label\n{\n    Text = \"\\ue800\",\n    FontFamily = \"TelerikFontExamples\"\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Popup View Style\nDESCRIPTION: Configures the style for the popup view content, controlling its overall appearance and layout\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings PopupViewStyle=\"{StaticResource PopupViewStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining the DisplayLabelStyle in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define the DisplayLabelStyle for the TemplatedPicker. This style applies to the label that shows the selected item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='templatedpicker-displaylabelstyle' />\n```\n\n----------------------------------------\n\nTITLE: Expanding All CollectionView Groups in C#\nDESCRIPTION: Demonstrates how to expand all groups in the CollectionView using the ExpandAll() method on the data view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-expandall\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Styles for ToggleButton in XAML Resources\nDESCRIPTION: Demonstrates how to create and apply explicit styles to ToggleButton controls using the Style element in XAML resources with various property settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ExplicitToggleButtonStyle\" TargetType=\"telerik:RadToggleButton\">\n    <Setter Property=\"BorderBrush\" Value=\"#2B3A67\" />\n    <Setter Property=\"BorderThickness\" Value=\"5\" />\n    <Setter Property=\"CornerRadius\" Value=\"10\" />\n    <Setter Property=\"TextColor\" Value=\"Black\" />\n    <Setter Property=\"Padding\" Value=\"15, 10\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Data Collection\nDESCRIPTION: ViewModel implementation containing a collection of DataItem objects that will be bound to ListView's ItemsSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/item-template-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-itemtemplateselector-sourcecollection' />\n```\n\n----------------------------------------\n\nTITLE: Handling Completed Event in C#\nDESCRIPTION: This C# code snippet shows the event handler for the Completed event, triggered when the user finalizes text input with the return key. It sets the text of textChangedLabel to indicate completion. This method utilizes a simple EventArgs argument.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/events.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Entry_Completed(object sender, EventArgs e)\n{\n    this.textChangedLabel.Text = \"User completed entering text\";\n}\n```\n\n----------------------------------------\n\nTITLE: RadCartesianChart XAML declaration in .NET MAUI\nDESCRIPTION: This XAML defines a RadCartesianChart with two BarSeries bound to data from the ViewModel. It configures the axes, series, and enables selection behavior with a command binding. The chart selection behavior is set to `Single` data point selection mode and `None` series selection mode, triggering the `IsSelectionChangedCommand` whenever a data point is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/selection-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentView.BindingContext>\n    <local:ViewModel/>\n</ContentView.BindingContext>\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition />\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"0.3*\"/>\n    </Grid.RowDefinitions>\n\n    <telerik:RadCartesianChart Grid.Row=\"0\">\n        <telerik:RadCartesianChart.HorizontalAxis>\n            <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n        </telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:RadCartesianChart.VerticalAxis>\n            <telerik:NumericalAxis />\n        </telerik:RadCartesianChart.VerticalAxis>\n        <telerik:RadCartesianChart.Series>\n            <telerik:BarSeries ValueBinding=\"Value\"\n                                CategoryBinding=\"Category\"\n                                CombineMode=\"Stack\"\n                                StackGroupKey=\"1\"\n                                AllowSelect=\"True\"\n                                ItemsSource=\"{Binding Data1}\" />\n            <telerik:BarSeries ValueBinding=\"Value\"\n                                CategoryBinding=\"Category\"\n                                CombineMode=\"Stack\"\n                                StackGroupKey=\"1\"\n                                AllowSelect=\"True\"\n                                ItemsSource=\"{Binding Data2}\" />\n        </telerik:RadCartesianChart.Series>\n        <telerik:RadCartesianChart.ChartBehaviors>\n            <telerik:ChartSelectionBehavior DataPointSelectionMode=\"Single\"\n                                                 Command=\"{Binding IsSelectionChangedCommand}\"\n                                                 SeriesSelectionMode=\"None\" />\n        </telerik:RadCartesianChart.ChartBehaviors>\n    </telerik:RadCartesianChart>\n\n    <Label Grid.Row=\"2\" Text=\"{Binding DisplayCount}\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting SpinnerFormat to 'dd' in .NET MAUI DatePicker - XAML\nDESCRIPTION: This snippet shows how to set the SpinnerFormat property to display only the day in the RadDatePicker control. It allows users to pick the day in a simple numeric format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker SpinnerFormat=\"dd\" />\n```\n\n----------------------------------------\n\nTITLE: Basic DateTimePicker Implementation in XAML\nDESCRIPTION: A basic example of DateTimePicker with defined minimum and maximum dates, spinner format, and templates. This snippet shows how to reference templates and configure selector settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker MinimumDate=\"2020,01,1\"\n\t\t\t\t\t\t\tMaximumDate=\"2025,12,31\"\n\t\t\t\t\t\t\tSpinnerFormat=\"MMM/dd/yyyy\"\n\t\t\t\t\t\t\tPlaceholderTemplate=\"{StaticResource Picker_PlaceholderView_ControlTemplate}\"\n\t\t\t\t\t\t\tDisplayTemplate=\"{StaticResource Picker_DisplayView_ControlTemplate}\">\n\t<telerik:RadDateTimePicker.SelectorSettings>\n\t\t<telerik:PickerPopupSelectorSettings HeaderTemplate=\"{StaticResource PopupView_Header_ControlTemplate}\"\n\t\t\t\t\t\t\t\t\t\t  HeaderLabelText=\"Date Picker\"\n\t\t\t\t\t\t\t\t\t\t  FooterTemplate=\"{StaticResource PopupView_Footer_ControlTemplate}\"/>\n\t</telerik:RadDateTimePicker.SelectorSettings>\n</telerik:RadDateTimePicker>\n```\n\n----------------------------------------\n\nTITLE: Styling Shape Rating in .NET MAUI\nDESCRIPTION: Example demonstrating how to style a Shape Rating control with custom colors and stroke thickness for both selected and unselected items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/rating-shape-rating.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadShapeRating ItemShape=\"{x:Static telerik:RadGeometry.Star}\" ItemFill=\"LightGray\" ItemStroke=\"Gray\" ItemStrokeThickness=\"2\" SelectedItemFill=\"Orange\" SelectedItemStroke=\"DarkOrange\" SelectedItemStrokeThickness=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Word Wrap Using XAML in MAUI\nDESCRIPTION: This XAML snippet demonstrates how to customize the DataGrid's CellContentTemplate to enable word wrap for cell content. It uses a Label with the LineBreakMode property set to WordWrap. The example ensures long text within DataGrid cells is wrapped, enhancing readability. Requires Telerik UI for .NET MAUI and a defined DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-enable-word-wrap.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTextColumn PropertyName=\\\"Name\\\" \n                            Width=\\\"130\\\"\n                            SizeMode=\\\"Fixed\\\"\n                            HeaderText=\\\"Name\\\">    \n    <telerik:DataGridColumn.CellContentTemplate>        \n        <DataTemplate>            \n            <Label Text=\\\"{Binding Name}\\\" \n                   LineBreakMode=\\\"WordWrap\\\"\n                   VerticalOptions=\\\"Center\\\"\n                   Margin=\\\"5, 0\\\" />        \n        </DataTemplate>    \n    </telerik:DataGridColumn.CellContentTemplate>\n</telerik:DataGridTextColumn>\n```\n\n----------------------------------------\n\nTITLE: Initializing ObservableCollection of Categories in .NET MAUI\nDESCRIPTION: Creates an observable collection of Category objects to be used as the data source for a ComboBox column in a DataGrid. The collection contains city names with corresponding IDs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-combobox-column-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic ObservableCollection<Category> AllCategories { get; set; }\n\n\nthis.AllCategories = new ObservableCollection<Category>\n{\n\tnew(){ Id = 0, Name = \"Boston\"},\n\tnew(){ Id = 1, Name = \"San Francisco\"},\n\tnew(){ Id = 2, Name = \"Tokyo\"},\n\tnew(){ Id = 3, Name = \"London\"}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar for Single Selection\nDESCRIPTION: This code snippet shows how to define a .NET MAUI Calendar with the selection mode set to Single, enabling users to select a single date.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-single-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Item Converter - C#\nDESCRIPTION: This snippet outlines the implementation of a Converter class of type IChatItemConverter, which is responsible for converting data items to Chat messages and vice versa, enabling the proper rendering of messages in the chat control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/mvvm-support.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chat-features-mvvm-converter'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListPicker with Clearing Selection in XAML and C#\nDESCRIPTION: Shows a complete example of a ListPicker with a button to clear the current selection, including XAML definition and C# event handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <Button Text=\"Clear Selection\" Clicked=\"OnClearSelectionClicked\"/>\n    <telerik:RadListPicker x:Name=\"listPicker\"\n                                Placeholder=\"Pick a name!\"\n                                ItemsSource=\"{Binding Items}\"\n                                DisplayMemberPath=\"FullName\">\n        <telerik:RadListPicker.BindingContext>\n            <local:ViewModel/>\n        </telerik:RadListPicker.BindingContext>\n        <telerik:RadListPicker.ItemTemplate>\n            <DataTemplate>\n                <Label Text=\"{Binding Name}\"\n                       HorizontalTextAlignment=\"Center\"\n                       VerticalTextAlignment=\"Center\"/>\n            </DataTemplate>\n        </telerik:RadListPicker.ItemTemplate>\n    </telerik:RadListPicker>\n</VerticalStackLayout>\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e)\n{\n    this.listPicker.ClearSelection();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic and Gradient Ranges in .NET MAUI Gauge\nDESCRIPTION: XAML example showing how to define solid color ranges and a gradient range in a Telerik Gauge control. The example creates three ranges: green (0-100), yellow (100-150), and a gradient range (150-200) transitioning from red to black.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/ranges.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeRangesDefinition>\n    <telerik:GaugeRange Color=\"Green\"\n                              From=\"0\"\n                              To=\"100\" />\n    <telerik:GaugeRange Color=\"Yellow\"\n                              From=\"100\"\n                              To=\"150\" />\n    <telerik:GaugeGradientRange From=\"150\" To=\"200\">\n        <telerik:RadGradientStop Offset=\"150\" Color=\"Red\" />\n        <telerik:RadGradientStop Offset=\"200\" Color=\"Black\" />\n    </telerik:GaugeGradientRange>\n</telerik:GaugeRangesDefinition>\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemStyleSelector Resource\nDESCRIPTION: Defines the ItemStyleSelector resources in the page's resources. This selector is used to determine which style to apply to a navigation item based on certain criteria.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemstyleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Styling CollectionView Drop Indicator in XAML\nDESCRIPTION: Creates an implicit style targeting CollectionViewDropIndicator to customize its appearance during drag and drop operations. The style should be added to the page's resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/drop-indicator-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-drop-indicator-style' />\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Series in C#\nDESCRIPTION: This C# code snippet demonstrates how to customize the appearance of an AreaSeries, specifically setting the Fill, Stroke, and StrokeThickness properties.  This allows for visual styling of the series within the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/area-series.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n```C#\nvar series = new AreaSeries\n{\n\tFill = new Color(0.8, 0.8, 1),\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RadNavigationView with Compact DisplayMode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadNavigationView with the DisplayMode set to Compact. In this mode, the navigation pane is always visible as a narrow sliver, and it can be opened to its full width when needed. The provided namespace must be added to the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/display-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-displaymide-compact'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Line and Ticks Appearance in .NET MAUI Gauge\nDESCRIPTION: Customizes the appearance of the axis line and ticks by setting their stroke color and thickness properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis Maximum=\"4\"\n\t\t\t\t\t\t Minimum=\"0\"\n\t\t\t\t\t\t Step=\"0.5\"\n\t\t\t\t\t\t Stroke=\"#FFDD789B\"\n\t\t\t\t\t\t StrokeThickness=\"1\"\n\t\t\t\t\t\t TextColor=\"#FF4062AD\"\n\t\t\t\t\t\t TickStroke=\"#FFAAC271\"\n\t\t\t\t\t\t TickThickness=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Client Business Object for AutoComplete\nDESCRIPTION: Defines a Client class that serves as the business object model for the AutoComplete control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/remote-search.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Applying DropDown Styling to .NET MAUI ComboBox\nDESCRIPTION: This XAML snippet shows how to apply custom dropdown styling to a ComboBox control in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-dropdown-styling'/>\n```\n\n----------------------------------------\n\nTITLE: Styling NumericalAxis Line and Ticks in XAML\nDESCRIPTION: This snippet customizes the appearance of a NumericalAxis by setting the MajorTickBackgroundColor, MajorTickThickness, and LineColor properties, allowing users to control the color and thickness of the axis's major ticks and line.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NumericalAxis MajorTickBackgroundColor=\"#FFCC88CC\"\n\t\t\t\t\t\t\t\tMajorTickThickness=\"5\"\n\t\t\t\t\t\t\t\tLineColor=\"#FFCC88CC\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a ViewModel with Command Handlers in C#\nDESCRIPTION: C# code for implementing a ViewModel that provides data and command implementations for the ListPicker, including Accept and Cancel command handlers.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Person>()\n        {\n            new Person(\"Freda\",\"Curtis\"),\n            new Person(\"Jeffery\",\"Francis\"),\n            new Person(\"Ema\",\"Lawson\"),\n            new Person(\"Niki\",\"Samaniego\"),\n            new Person(\"Jenny\",\"Santos\"),\n            new Person(\"Eric\",\"Wheeler\"),\n            new Person(\"Emmett\",\"Fuller\"),\n            new Person(\"Brian\",\"Johnas\"),\n        };\n\n        this.Accept = new Command(this.OnAccept);\n        this.Accept = new Command(this.OnCancel);\n    }\n\n    private void OnAccept(object obj)\n    {\n        // implement your custom logic here\n    }\n\n    private void OnCancel(object obj)\n    {\n        // implement your custom logic here\n    }\n\n    public ObservableCollection<Person> Items { get; set; }\n    public ICommand Accept { get; set; }\n    public ICommand Cancel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ticks Settings in RangeSlider for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to configure tick step, placement, and snap mode in a RangeSlider control to implement snapping behavior with evenly spaced ticks.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/ticks.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"10\" Maximum=\"20\"\n                      RangeStart=\"13.3\" RangeEnd=\"16.2\"\n                      TickStep=\"1\"\n                      TicksPlacement=\"End\"\n                      SnapMode=\"SnapToTicks\"\n                      TrackThumbMinHeight=\"25\"\n                      VerticalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Content Template Resources\nDESCRIPTION: Shows how to create a resource for the empty content template with custom styling and layout for displaying when the DataGrid has no items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/empty-template.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage.Resources>\n    <DataTemplate x:Key=\"EmptyTemplate\">\n        <Grid BackgroundColor=\"LightGray\">\n            <Label Text=\"No data available\"\n                   HorizontalOptions=\"Center\"\n                   VerticalOptions=\"Center\" />\n        </Grid>\n    </DataTemplate>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: TreeView Programmatic Scrolling XAML\nDESCRIPTION: XAML markup for implementing programmatic scrolling in TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='treeview-programmatic-scrolling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Setting DataGrid Row Height in .NET MAUI XAML\nDESCRIPTION: Demonstrates how to set a fixed row height for a DataGrid using the RowHeight property. The example shows setting the height to 50 units while binding the ItemsSource to a Source property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-height.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n\t\t\t\t\t\tRowHeight=\"50\"\n\t\t\t\t\t\tItemsSource=\"{Binding Source}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Style for AIPrompt Suggestions in XAML\nDESCRIPTION: Creates a custom Style targeting AIPromptInputSuggestionView to modify the appearance of suggestions shown in the Input View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/suggestions-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Style TargetType=\"telerik:AIPromptInputSuggestionView\" x:Key=\"CustomSuggestionStyle\">\n    <Setter Property=\"CornerRadius\" Value=\"20\" />\n    <Setter Property=\"BorderColor\" Value=\"Transparent\" />\n    <Setter Property=\"BackgroundColor\" Value=\"#512BD4\" />\n    <Setter Property=\"TextColor\" Value=\"White\" />\n    <Setter Property=\"Height\" Value=\"30\" />\n    <Setter Property=\"Margin\" Value=\"2, 3\" />\n    <Setter Property=\"Padding\" Value=\"10, 0\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces for DateTimePicker Styling in XAML\nDESCRIPTION: Shows how to add the required Telerik namespace when using SelectionHighlightStyle and SpinnerStyle properties for the DateTimePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding TimePicker in XAML\nDESCRIPTION: Basic initialization of the Telerik RadTimePicker control in XAML with minimal configuration\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker />\n```\n\n----------------------------------------\n\nTITLE: Define Map control in C#\nDESCRIPTION: Illustrates adding the Telerik Map control programmatically using C#. This provides an alternative method to create and configure the map interface in their .NET MAUI application using C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n <snippet id='map-gettingstarted-csharp' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: This code demonstrates how to register Telerik controls in your .NET MAUI application by using the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ListPicker Business Model Definition\nDESCRIPTION: Sample business model class implementation marked with snippet id 'listpicker-features-businessmodel'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-features-businessmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining a Categorical Data Model in C#\nDESCRIPTION: This C# snippet demonstrates the structure of the data model used for populating the Donut Series. It defines the properties that will be bound to the chart. The data model is essential for providing the data that the chart will visualize.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/donut-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='categorical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Setting Content in .NET MAUI BadgeView using XAML\nDESCRIPTION: This snippet sets the Content property of a Telerik RadBadgeView, essential for the visualization of the BadgeView. The content inside the badge can include controls like Label, Image, Frame, Border, and Button. Dependencies include that Telerik UI for .NET MAUI must be referenced in your project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView>\\n    <telerik:RadBadgeView.Content>\\n        <!-- Add the content of the BadgeView. For exmaple: Label, Image, Frame, Border, Button, and so on. -->\\n    </telerik:RadBadgeView.Content>\\n</telerik:RadBadgeView>\n```\n\n----------------------------------------\n\nTITLE: ViewModel Creation for DateTime Data\nDESCRIPTION: Creates a ViewModel with an ObservableCollection of TemporalData objects. The GetDateTimeData method generates a collection of TemporalData objects with dates incrementing daily from a start date and values calculated as the sine of the index.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/datetime-continuous-axis.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<TemporalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetDateTimeData(6);\n    }\n\n    private static ObservableCollection<TemporalData> GetDateTimeData(int itemsCount)\n    {\n        var startDate = new DateTime(2015, 03, 01);\n\n        ObservableCollection<TemporalData> items = new ObservableCollection<TemporalData>();\n        for (int i = 0; i < itemsCount; i++)\n        {\n            TemporalData data = new TemporalData();\n            data.Date = startDate.AddDays(i);\n            data.Value = Math.Sin(i);\n\n            items.Add(data);\n        }\n\n        return items;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for TreeView Items in XAML\nDESCRIPTION: Specifies the visual styles for different types of items (Country and City) in the TreeView using XAML resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"CountryStyle\" TargetType=\"telerik:TreeViewItem\">\n    <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n</Style>\n<Style x:Key=\"CityStyle\" TargetType=\"telerik:TreeViewItem\">\n    <Setter Property=\"BackgroundColor\" Value=\"LightGreen\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting AlternateRowBackgroundStyle in .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to set the AlternateRowBackgroundStyle property to define the appearance style of alternating rows in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-styling-alternaterowbackgroundstyle'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataFormRadDatePickerEditor in XAML\nDESCRIPTION: Shows how to define a DataFormRadDatePickerEditor with custom styling properties and apply a predefined style. It sets the property name, header text, background color, border color, and thickness.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/picker-editors.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataFormRadDatePickerEditor PropertyName=\"StartDate\"\n                                     HeaderText=\"Start Date\"\n                                     BackgroundColor=\"LightSteelBlue\"\n                                     BorderColor=\"DarkGray\"\n                                     BorderThickness=\"2\"\n                                     EditorStyle=\"{StaticResource RadDatePickerStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Toggle Button in DateTimePicker\nDESCRIPTION: Shows how to style the Toggle button that opens the picker popup/dropdown in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-toggle-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting CheckBox Checked Colors in .NET MAUI\nDESCRIPTION: Demonstrates setting the checked state colors including the background, border, and check symbol colors of the CheckBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox CheckedColor=\"Green\" CheckedSymbolColor=\"White\" />\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Error Label Styles\nDESCRIPTION: XAML code showing how to define two different error label styles for the DataForm control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/error-message-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-error-label-style' />\n<snippet id='dataform-error-label-style-alt' />\n```\n\n----------------------------------------\n\nTITLE: Navigating Between View Hierarchy Levels\nDESCRIPTION: Use NavigateToUpperViewCommand and NavigateToLowerViewCommand to traverse between different calendar view levels, such as Month > Year > Decade > Century, providing a hierarchical navigation experience.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n\"<Button Text=\\\"Upper View\\\" Command=\\\"{Binding Source={x:Reference calendar}, Path=NavigateToUpperViewCommand}\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: XAML Styling Resources for .NET MAUI Slider\nDESCRIPTION: Resource dictionary defining styles for the Slider's thumb and range track elements with custom colors and shapes\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/thumb-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-value-elements-styling' />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Appointment Class in C#\nDESCRIPTION: Defines a custom appointment class that inherits from Appointment and adds a Token property. Includes overrides for Copy and CopyFrom methods to handle the custom property during internal operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-appointment-scheduler-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCustomAppointment : Appointment\n{\n    private string token;\n\n    public string Token\n    {\n        get => this.token;\n        set => this.UpdateValue(ref this.token, value);\n    }\n\n    public override IAppointment Copy()\n    {\n        var myAppt = new MyCustomAppointment();\n        myAppt.CopyFrom(this);\n        return myAppt;\n    }\n\n    public override void CopyFrom(IAppointment other)\n    {\n        var myAppt = other as MyCustomAppointment;\n        if (myAppt != null)\n        {\n            this.Token = myAppt.Token;\n        }\n\n        base.CopyFrom(other);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Date Label Formatter\nDESCRIPTION: Creates a custom label formatter for the DateTimeContinuousAxis.  It overrides the FormatTypedValue method to display the day of the month with ordinal suffixes (st, nd, rd, th). This formatter is then used to customize the labels displayed on the DateTime axis.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/datetime-continuous-axis.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DateLabelFormatter : LabelFormatterBase<DateTime>\n{\n    public override string FormatTypedValue(DateTime value)\n    {\n        if (value.Day == 1)\n        {\n            return value.Day + \"st\";\n        }\n        else if (value.Day == 2)\n        {\n            return value.Day + \"nd\";\n        }\n        else if (value.Day == 3)\n        {\n            return value.Day + \"rd\";\n        }\n        else\n        {\n            return value.Day + \"th\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Navigation in .NET MAUI Calendar\nDESCRIPTION: Demonstrates how to set the navigation direction to vertical for scrolling between calendar display modes using the NavigationDirection property\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='calendar-vertical-navigation'/>\n```\n\n----------------------------------------\n\nTITLE: TimeSpanPicker Display Template\nDESCRIPTION: This template defines how the selected TimeSpan is displayed in the TimeSpanPicker control. It uses a ControlTemplate to customize the appearance of the displayed TimeSpan.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='timespanpicker-display-template' />\n```\n\n----------------------------------------\n\nTITLE: Setting LoadOnDemandRowTemplate Property (XAML)\nDESCRIPTION: This snippet shows how to set the `LoadOnDemandRowTemplate` property of the DataGrid to apply the custom `DataTemplate` defined earlier. This template will be used to render the row containing the 'Load More' button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid LoadOnDemandRowTemplate=\"{StaticResource LoadOnDemandRowTemplate}\"/>\n```\n\n----------------------------------------\n\nTITLE: ViewModel Creation\nDESCRIPTION: This C# code snippet creates a ViewModel with an ObservableCollection of TemporalData. It initializes the Data property with a list of TemporalData objects generated by the GetDateTimeData method. The GetDateTimeData method creates a list of TemporalData objects with date and value properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/behaviors/tooltip-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n```C#\npublic class ViewModel\n{\n    public ObservableCollection<TemporalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = new ObservableCollection<TemporalData>(GetDateTimeData(200));\n    }\n\n    private static List<TemporalData> GetDateTimeData(int itemsCount)\n    {\n        var startDate = new DateTime(2015, 03, 01);\n\n        List<TemporalData> items = new List<TemporalData>();\n        for (int i = 0; i < itemsCount; i++)\n        {\n            TemporalData data = new TemporalData();\n            data.Date = startDate.AddDays(i);\n\n            if (i % 2 == 0)\n            {\n                data.Value = i + 5;\n            }\n            else\n            {\n                if (i % 5 == 0)\n                {\n                    data.Value = i - 15;\n                }\n            }\n\n            items.Add(data);\n        }\n\n        return items;\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Cards with BasicCardContext in C#\nDESCRIPTION: This method returns an enumerable list of CardContext instances, specifically using BasicCardContext. It generates a list of cards with titles, subtitles, and descriptions representing various locations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/card-picker/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate IEnumerable<CardContext> GetCards(ChatItem chatItem) {\n\tList<CardContext> cards = new List<CardContext>()\n\t{\n\t\tnew BasicCardContext() {Title=\"Rome\", Subtitle=\"Italy\", Description=\"Italy’s capital is one of the world’s most romantic and inspiring cities\"},\n\t\tnew BasicCardContext() {Title=\"Barcelona\", Subtitle=\"Spain\", Description=\"Barcelona is an enchanting seaside city with remarkable architecture\"}\n\t};\n\treturn cards;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Badge Indicator in BadgeView Component\nDESCRIPTION: Example of how to style a BadgeView control by setting various properties like BadgeText, BadgeTextColor, BadgeFontAttributes, BadgeBackgroundColor, and BadgeBorderColor to customize the appearance of the Badge indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:BadgeView VerticalOptions=\"Start\" HorizontalOptions=\"Center\"\n                  BadgeText=\"NEW\"\n                  BadgeTextColor=\"White\"\n                  BadgeFontAttributes=\"Bold\"\n                  BadgeBackgroundColor=\"#009688\"\n                  BadgeBorderColor=\"White\"\n                  BadgeBorderThickness=\"2\"\n                  BadgePosition=\"BottomRight\">\n    <Image HeightRequest=\"80\" \n           WidthRequest=\"80\"\n           Source=\"{telerik:ImageResource 'BadgeSample.Resources.Images.user.png'}\" />\n</telerik:BadgeView>\n```\n\n----------------------------------------\n\nTITLE: ListView Filtering Basic XAML Definition\nDESCRIPTION: Basic XAML structure for defining a ListView with filtering capability\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<listview-features-filtering-xaml/>\n```\n\n----------------------------------------\n\nTITLE: SlideView Orientation XAML\nDESCRIPTION: This XAML snippet shows how to set the Orientation property of the SlideView control to either Horizontal or Vertical.  The `Orientation` property defines the direction in which the slides are arranged and the indicators are displayed.  Setting it to Vertical will display the slides and indicators in a vertical arrangement.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/orientation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slideview-orientation-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting TemplatedPicker to DropDown Mode - XAML\nDESCRIPTION: This snippet illustrates how to set the TemplatedPicker to DropDown mode which opens the UI for selecting a value in a dropdown. This is the default mode for desktop platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedPicker PickerMode=\"DropDown\" />\n```\n\n----------------------------------------\n\nTITLE: Setting ItemTemplateSelector in XAML\nDESCRIPTION: XAML configuration for RadListView using the custom ItemTemplateSelector with template definitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/item-template-selector.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-itemtemplateselector-setting-itemtemplateselector' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik RadToolbar in XAML\nDESCRIPTION: Basic initialization of the RadToolbar control in XAML. This snippet shows how to declare the toolbar without any items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n <telerik:RadToolbar x:Name=\"toolbar\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Day-Only SpinnerFormat in DateTimePicker\nDESCRIPTION: Sets the SpinnerFormat property to 'dd' to display only the day number in the spinner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/formatting.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker SpinnerFormat=\"dd\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SlideView Animation Properties\nDESCRIPTION: The SlideView control provides two main animation properties: AnimationEasing for defining the animation easing function using Microsoft.Maui.Easing, and AnimationDuration for specifying the animation duration in milliseconds.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAnimationEasing (Easing) - Defines the Microsoft.Maui.Easing of the animation\\nAnimationDuration (int) - Defines the duration in milliseconds of the animation\n```\n\n----------------------------------------\n\nTITLE: ListView Group/Reorder Event Parameters\nDESCRIPTION: Event parameters for GroupHeaderTapped, ReorderStarting, and ReorderEnded events, providing access to group and item information during these operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/events.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGroupHeaderTapEventArgs:\n - Key: specific key for the group\n - Items: child items of the group\n\nReorderStartingEventArgs:\n - Item: item to be dragged\n - Cancel: boolean to cancel operation\n\nReorderEndedEventArgs:\n - Item: reference to reordered item\n```\n\n----------------------------------------\n\nTITLE: Expanding Row Details Programmatically\nDESCRIPTION: Demonstrates how to programmatically expand row details in the DataGrid\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-template.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-expand-rowdetails'/>\n```\n\n----------------------------------------\n\nTITLE: Applying Sizing Mode to .NET MAUI Barcode\nDESCRIPTION: This snippet demonstrates how to apply a specific sizing mode (e.g., Manual) to the Telerik UI for MAUI Barcode control. The `SizingMode` property of the Barcode is set to the desired mode. This allows developers to control how the barcode is rendered within its container.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/sizing-modes.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='barcode-features-sizingmode' />\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderLabel Style\nDESCRIPTION: This snippet shows how to define the style for the header label in the DateTimePicker popup, enabling customization of text appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker HeaderLabelStyle=\"{StaticResource HeaderLabelStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemTemplateSelector XAML\nDESCRIPTION: Defines the NavigationView in XAML using `ItemTemplateSelector`. It uses the `ItemsSource` property to bind to a collection and the `ItemTemplateSelector` property to apply different templates to the generated navigation items based on a condition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_13\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemtemplateselector-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Content to String\nDESCRIPTION: This snippet demonstrates how to set the Content property of a TemplatedButton to a string. When content is a string, a Label will be displayed inside the RadTemplatedButton.ControlTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='templatedbutton-gettingstarted-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining Sample ViewModel for Pie Series in XAML\nDESCRIPTION: This snippet shows how to create a ViewModel that supplies data for the Pie Series. It should contain the collection of data items to be represented in the Pie Chart and implement the necessary properties for data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/pie-series.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Example code for ViewModel -->\n<ViewModel>\n    <ObservableCollection<BusinessObject>> Items { get; set; }\n</ViewModel>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configure Telerik UI controls in the application startup process using the UseTelerik extension method in the CreateMauiApp method\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MauiProgram\\n{\\n\\tpublic static MauiApp CreateMauiApp()\\n\\t{\\n\\t\\tvar builder = MauiApp.CreateBuilder();\\n\\t\\tbuilder\\n\\t\\t\\t.UseTelerik()\\n\\t\\t\\t.UseMauiApp<App>()\\n\\t\\t\\t.ConfigureFonts(fonts =>\\n\\t\\t\\t{\\n\\t\\t\\t\\tfonts.AddFont(\\\"OpenSans-Regular.ttf\\\", \\\"OpenSansRegular\\\");\\n\\t\\t\\t});\\n\\n\\t\\treturn builder.Build();\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel and Binding for ListView - .NET MAUI\nDESCRIPTION: This snippet showcases how to set the ViewModel for the ListView and initialize property bindings for data interaction.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"                           \n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel as BindingContext for the Page - C#\nDESCRIPTION: This snippet demonstrates how to set the `ViewModel` instance as the `BindingContext` for the page in a .NET MAUI application. This provides the UI with access to the data and commands defined in the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/integration.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage() {\n    InitializeComponent();\n    BindingContext = new BooksViewModel();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RowBackgroundStyle in .NET MAUI DataGrid\nDESCRIPTION: This example shows how to set the RowBackgroundStyle property to define the style of each row in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-styling-rowbackgroundstyle'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace to your XAML file to enable access to Telerik UI controls including the ToggleButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid Selection-Based Row Details in .NET MAUI\nDESCRIPTION: Example showing how to implement row details expansion/collapse based on selection changes in the DataGrid. The code handles both adding and removing items from the ExpandedRowDetails collection when selection changes occur.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid dataGrid_SelectionChanged(System.Object sender, DataGridSelectionChangedEventArgs e)\n{\n    RadDataGrid dataGrid = sender as RadDataGrid;\n\n    foreach (var item in e.AddedItems)\n    {\n        dataGrid.ExpandedRowDetails.Add(item);\n    }\n    foreach (var item in e.RemovedItems)\n    {\n        dataGrid.ExpandedRowDetails.Remove(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Properties in Telerik .NET MAUI Accordion\nDESCRIPTION: This code snippet demonstrates how to set up animation properties for the Telerik Accordion control in .NET MAUI including AnimationDuration and AnimationEasing properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/animation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='accordion-key-features-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Popup Placement\nDESCRIPTION: XAML code showing how to configure a Popup control's placement using RadPopup.Popup attached property on a RadTemplatedButton. Demonstrates setting placement mode and offset properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/placement.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='popup-features-placement' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ItemTemplateSelector\nDESCRIPTION: Custom class inheriting from DataTemplateSelector to provide different templates based on the IsSpecial property value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/item-template-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-itemtemplateselector-customitemtemplateselector' />\n```\n\n----------------------------------------\n\nTITLE: Setting View of .NET MAUI Map using C#\nDESCRIPTION: This snippet showcases the use of the SetView method to programmatically set the visible area of the Telerik Map control. It requires a LocationRect object defining the northwest and southeast corners of the desired area.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/pan-and-zoom.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='map-setview-code' />\n```\n\n----------------------------------------\n\nTITLE: Custom Line Styles for .NET MAUI Scheduler\nDESCRIPTION: XAML resource definitions for custom line styles to be applied to the Scheduler's various line elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/lines-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-lines-styles'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Badge Text in .NET MAUI BadgeView\nDESCRIPTION: Example of customizing the text inside the Badge indicator using the BadgeText property to display a custom string instead of using a predefined Badge type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/customization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView BadgeText=\"Badge Text\">\n    <telerik:RadBadgeView.Content>\n        <telerik:RadBorder WidthRequest=\"80\"\n                                     HeightRequest=\"80\"\n                                     BorderThickness=\"1\"\n                                     BorderColor=\"LightGray\">\n            <Label Text=\"Telerik Badge View for MAUI\"\n                   FontSize=\"14\"\n                   VerticalTextAlignment=\"Center\"\n                   HorizontalTextAlignment=\"Center\"/>\n        </telerik:RadBorder>\n    </telerik:RadBadgeView.Content>\n</telerik:RadBadgeView>\n```\n\n----------------------------------------\n\nTITLE: Defining ListView with LoadOnDemandCollection\nDESCRIPTION: XAML declaration for a ListView using LoadOnDemandCollection, binding the ItemsSource to a ViewModel property and configuring load on demand settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView ItemsSource=\"{Binding Source}\"\n                   LoadOnDemandMode=\"Automatic\"\n                   IsLoadOnDemandEnabled=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: ViewModel for DataForm Custom Editor in .NET MAUI\nDESCRIPTION: This C# class serves as the ViewModel for the custom editor implementation. It provides the data source for the AutoComplete control used in the custom editor by implementing the IEnumerable interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/custom-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEditorViewModel : List<string>, INotifyPropertyChanged\n{\n    public CustomEditorViewModel()\n    {\n        this.Add(\"Austria\");\n        this.Add(\"Albania\");\n        this.Add(\"Bosnia\");\n        this.Add(\"Bulgaria\");\n        this.Add(\"Croatia\");\n        this.Add(\"Denmark\");\n        this.Add(\"Germany\");\n        this.Add(\"Greece\");\n        this.Add(\"Hungary\");\n        this.Add(\"Italy\");\n        this.Add(\"Macedonia\");\n        this.Add(\"Montenegro\");\n        this.Add(\"Norway\");\n        this.Add(\"Romania\");\n        this.Add(\"Slovakia\");\n        this.Add(\"Slovenia\");\n        this.Add(\"Serbia\");\n        this.Add(\"Switzerland\");\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}\n```\n\n----------------------------------------\n\nTITLE: TreeView Location Data Model\nDESCRIPTION: Defines the location data model class used for TreeView item hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-location-model'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Labels and Axis in C# for WinUI\nDESCRIPTION: C# code handling the chart's HandlerChanged event to access the native WinUI control and customize bar series labels and vertical axis.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-bar-series-winui-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void barChart_HandlerChanged(object sender, EventArgs e)\n{\n    var platformView = this.barChart.Handler.PlatformView;\n#if WINDOWS\n    var platformChart = (Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)platformView;\n    var series = (Telerik.UI.Xaml.Controls.Chart.BarSeries)platformChart.Series[0];\n    // Style the vertical axis. The resource is inside the Platforms/Windows/App.xaml file.\n    platformChart.VerticalAxis.LineStyle = MauiWinUIApplication.Current.Resources[\"VerticalAxisStyle\"] as Microsoft.UI.Xaml.Style;\n    \n    // Customize the labels for the bar series, for example change their position.\n    var labelDefinition = series.LabelDefinitions.FirstOrDefault();\n    if (labelDefinition != null)\n    {\n        labelDefinition.HorizontalAlignment = Microsoft.UI.Xaml.HorizontalAlignment.Center;\n        labelDefinition.VerticalAlignment = Microsoft.UI.Xaml.VerticalAlignment.Top;\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PieChart ViewModel in C#\nDESCRIPTION: This C# snippet shows how to create a ViewModel for the PieChart, including the data for the donut series. It initializes the data and exposes it through a property. The ViewModel acts as a data source for the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/donut-series.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-piechart-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView Item Data Model in C#\nDESCRIPTION: This snippet defines the data model for TreeView items, including properties for Name, Children, and IsExpanded.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/expand-collapse.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Item : NotifyPropertyChangedBase\n{\n    private string name;\n    private bool isExpanded;\n    private ObservableCollection<Item> children;\n\n    public string Name\n    {\n        get { return this.name; }\n        set { this.UpdateValue(ref this.name, value); }\n    }\n\n    public bool IsExpanded\n    {\n        get { return this.isExpanded; }\n        set { this.UpdateValue(ref this.isExpanded, value); }\n    }\n\n    public ObservableCollection<Item> Children\n    {\n        get { return this.children; }\n        set { this.UpdateValue(ref this.children, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Adds the Telerik namespace to the XAML file for accessing Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/scrolling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating StyleSelector Resources in XAML\nDESCRIPTION: Defines the resources required for implementing a custom style selector, including styles that will be applied to different TabView header items\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/styling/header-itemstyle-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\ntabview-styling-styleselector-resources\n```\n\n----------------------------------------\n\nTITLE: Implementing BusyIndicatorToolbarItem in .NET MAUI Toolbar\nDESCRIPTION: This XAML snippet shows how to implement a BusyIndicatorToolbarItem with the IsBusy property set to True and applying a custom style defined in resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/busy-indicator.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:BusyIndicatorToolbarItem IsBusy=\"True\" Style=\"{StaticResource busyStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Example showing how to include the Telerik namespace in a XAML file to reference Telerik UI for .NET MAUI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timespan-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Label Alignment in .NET MAUI ProgressBar\nDESCRIPTION: Example of setting horizontal alignment for the progress label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-labelalignment'/>\n```\n\n----------------------------------------\n\nTITLE: Initializing RadCartesianChart for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to initialize a RadCartesianChart in a .NET MAUI application. It sets up the horizontal and vertical axes, binds the data source to a ViewModel, and configures the bar series with value and category bindings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar chart = new RadCartesianChart\\n{\\n\\tHorizontalAxis = new CategoricalAxis(),\\n\\tVerticalAxis = new NumericalAxis(),\\n\\tBindingContext = new ViewModel()\\n};\\n\\nvar series = new BarSeries();\\n\\nseries.SetBinding(ChartSeries.ItemsSourceProperty, new Binding(\"Data\"));\\n\\nseries.ValueBinding = new PropertyNameDataPointBinding { PropertyName = \"Value\" };\\nseries.CategoryBinding = new PropertyNameDataPointBinding { PropertyName = \"Category\" };\\n\\nchart.Series.Add(series);\n```\n\n----------------------------------------\n\nTITLE: Defining Year Style Selector Resources\nDESCRIPTION: Creates style resources for customizing the appearance of years in the calendar, allowing different visual styles based on specific conditions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/year-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n\\u003cResourceDictionary x:Class=\"...\"\\u003e\n    \\u003clocal:CustomStyleSelector x:Key=\"CustomStyleSelector\" /\\u003e\n\\u003c/ResourceDictionary\\u003e\n```\n\n----------------------------------------\n\nTITLE: Hiding Both Labels and Ticks in .NET MAUI Gauge Axis\nDESCRIPTION: Hides both axis labels and ticks by setting ShowLabels to False and TickThickness to 0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis Maximum=\"250\"\n\t\t\t\t\t   Minimum=\"0\"\n\t\t\t\t\t   Step=\"25\" \n\t\t\t\t\t   TickThickness=\"0\" \n\t\t\t\t\t   ShowLabels=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: DataGrid LoadOnDemandRowStyle Definition (XAML)\nDESCRIPTION: This snippet demonstrates how to define a custom style for the row that contains the 'Load More' button in the DataGrid. The style targets the `DataGridLoadOnDemandRowAppearance` type and allows customization of the row's appearance, such as the background color and text color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\n<Style TargetType=\"DataGridLoadOnDemandRowAppearance\">\n    <Setter Property=\"BackgroundColor\" Value=\"#FFC86DD7\"/>\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Range in .NET MAUI Gauge\nDESCRIPTION: Sets the Minimum, Maximum, and Step properties of a GaugeLinearAxis to define the range of values displayed on the gauge.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis Maximum=\"4\"\n\t\t\t\t\t\t Minimum=\"0\"\n\t\t\t\t\t\t Step=\"0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Using ClearSelection Method with C# - .NET MAUI\nDESCRIPTION: This snippet provides an example of how to use the 'ClearSelection' method of the RadTimeSpanPicker control. This method sets the Time property to null when the clear button is clicked.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Button Text=\"Clear Selection\" Clicked=\"OnClearSelectionClicked\"/>\n    <telerik:RadTimeSpanPicker x:Name=\"timeSpanPicker\"/>\n</StackLayout>\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e)\n{\n    this.timeSpanPicker.ClearSelection();\n}\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RadScheduler with Special Slots in XAML\nDESCRIPTION: Demonstrates how to define the RadScheduler control with sample views and apply the SpecialSource property to handle special slots configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/specialslots/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-special-slots' />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Appointment Style Selector in C#\nDESCRIPTION: A custom style selector class that applies different styles to past and future appointments based on their start time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/appointments-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-customappointmentstyleselector' />\n```\n\n----------------------------------------\n\nTITLE: Configuring TemplatedButton Clicked Event in XAML\nDESCRIPTION: Set up an event handler for the Clicked event to respond when the button is clicked, with support for sender and event arguments\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/events.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedButton Clicked=\"OnTemplatedButtonClicked\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressed Event Handler in C#\nDESCRIPTION: C# event handler for the Pressed event of the ToggleButton, demonstrating how to respond when the button is initially pressed by the user.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadToggleButton_Pressed(object sender, EventArgs e)\n{\n    var button = (RadToggleButton)sender;\n    this.pressCountLabel.Text = $\"Pressed: {++this.pressCount} times\";\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CheckBox Events in .NET MAUI Popup Content\nDESCRIPTION: Demonstrates how to implement an event handler for the CheckBox IsCheckedChanged event within a Popup's content. This allows responding to user interactions with the Popup's content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/content.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='popup-features-contenttemplate-events' />\n```\n\n----------------------------------------\n\nTITLE: Defining Label Template DataTemplate - XAML\nDESCRIPTION: This XAML snippet shows how to define a custom DataTemplate for Slider labels, allowing for personalized label rendering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/labels.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<DataTemplate x:Key=\"CustomLabelTemplate\">\n    <Label Text=\"{Binding}\" FontSize=\"14\" />\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Applying Template Selector to DataGrid in XAML for MAUI\nDESCRIPTION: This XAML snippet demonstrates how to assign a DataTemplateSelector to a DataGrid column in order to dynamically choose cell templates based on specified conditions. The template selector is referenced in the CellContentTemplateSelector property of a DataGridTextColumn.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-cell-content-template-selector.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" \n                 ItemsSource=\"{Binding Items}\" \n                 AutoGenerateColumns=\"False\" \n                 UserEditMode=\"Cell\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\" \n                                    Width=\"130\"\n                                    SizeMode=\"Fixed\"\n                                    HeaderText=\"Name\"\n                                    CellContentTemplateSelector=\"{StaticResource personDataTemplateSelector}\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\" />\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Style in XAML\nDESCRIPTION: This snippet demonstrates how to define the style properties for the .NET MAUI DatePicker, including color and border configurations. It requires the telerik namespace to be set up in the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining PlaceholderLabel Style for TimeSpanPicker Control in XAML\nDESCRIPTION: This snippet shows the definition of the placeholder label style for the TimeSpanPicker, customizing properties like text color and alignment which dictate the visual behavior of the placeholder text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\" x:Key=\"placeholderLabelStyle\">\n    <Setter Property=\"TextColor\" Value=\"#1188FF\"/>\n    <Setter Property=\"VerticalTextAlignment\" Value=\"Center\"/>\n    <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\"/>\n    <Setter Property=\"HeightRequest\" Value=\"50\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Toolbar Entry TextChanged Event\nDESCRIPTION: C# code showing the implementation of TextChanged event handler for a custom search entry toolbar item. This event triggers search functionality when the user types in the search box.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/toolbar.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void entrySearchToolbar_TextChanged(object sender, TextChangedEventArgs e)\n{\n    this.pdfViewer.SearchSettings.SearchAsync(this.entrySearchToolbar.Text, this.pdfViewer.SearchSettings.SearchOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Model for TreeView in C#\nDESCRIPTION: This C# code defines a sample data model for use with the TreeView. It includes properties for Name, Children, and HasChildren to support the load on demand functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/load-children-on-demand.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Item\n{\n    public string Name { get; set; }\n    public ObservableCollection<Item> Children { get; set; }\n    public bool HasChildren { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik XAML Namespace in .NET MAUI\nDESCRIPTION: Shows the XAML namespace declaration required to use Telerik UI components including the RadEntry control in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model for .NET MAUI DataGrid Aggregates\nDESCRIPTION: This C# class represents the data model used for demonstrating aggregates in the DataGrid. It includes properties for Name, Price, DeliveryPrice, and Quantity.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/property-aggregate-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Order\n{\n    public string Name { get; set; }\n    public double Price { get; set; }\n    public double DeliveryPrice { get; set; }\n    public int Quantity { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AccordionItemHeader in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to customize the AccordionItemHeader including indicator properties, header text, and border styles for a RadAccordion control in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/accordion-item.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='accordion-features-accordionitem' />\n```\n\n----------------------------------------\n\nTITLE: Adding ImageEditor Control in C#\nDESCRIPTION: C# code for programmatically adding the Telerik ImageEditor control with its Toolbar to a page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar imageEditor = new RadImageEditor();\nvar toolbar = new ImageEditorToolbar();\nimageEditor.Toolbar = toolbar;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace in your XAML file. This namespace is required to use Telerik UI controls, including the RadCalendar.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/globalization.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Tick Styling to RangeSlider in XAML\nDESCRIPTION: XAML implementation of a RangeSlider with custom tick styling applied through the TicksStyleSelector property to create visually distinct ticks based on their position.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/ticks-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider x:Name=\"rangeSlider\" \n                        Minimum=\"0\" \n                        Maximum=\"100\" \n                        LowerValue=\"30\" \n                        UpperValue=\"70\"\n                        TicksPlacement=\"BottomRight\"\n                        TickThickness=\"2\"\n                        LabelPlacement=\"BottomRight\"\n                        SnapMode=\"SnapToTicks\"\n                        Step=\"10\"\n                        TicksStyleSelector=\"{StaticResource ticksStyleSelector}\"/>\n```\n\n----------------------------------------\n\nTITLE: DatePicker DropDown Mode Configuration in XAML\nDESCRIPTION: Configures a RadDatePicker with DropDown mode, displaying a custom date and formatted string representation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n\t\t\t\t\t\tDisplayStringFormat=\"yyy-ddd-MMM\"\n\t\t\t\t\t\tPickerMode=\"DropDown\"  />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in .NET MAUI XAML\nDESCRIPTION: This snippet adds the Telerik namespace to the XAML file. This namespace is required to use the Telerik RadDateTimePicker control.  This line is crucial for the XAML parser to recognize and correctly render the Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/default-dates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Inline ChatPicker DatePicker in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to use the RadChatPicker with a DatePickerContext inline as part of the conversation within the .NET MAUI RadChat control. This involves creating a PickerItem, setting its Context to DatePickerContext, and adding it to the Items collection of the Chat.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='chat-chatpicker-datepicker' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag and Drop Behavior in .NET MAUI CollectionView\nDESCRIPTION: A custom CollectionViewDragDropBehavior class that overrides the Drop method to implement logic for moving items between different groups in a CollectionView. This behavior handles updating the source collections when items are dropped.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-grouped-items.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomCollectionViewDragDropBehavior : CollectionViewDragDropBehavior\n{\n    protected override void Drop(CollectionViewDragDropState state)\n    {\n        if (state.DropTarget.GroupDescriptors != null && state.DropTarget.GroupDescriptors.Count > 0)\n        {\n            var dropDataItem = state.DropTargetDataItem.Data;\n            var groupKey = state.DropTargetDataItem.Group?.Key ?? string.Empty;\n            var draggedItemGroupKey = state.DraggedDataItem.Group?.Key ?? string.Empty;\n\n            // If we drop inside the same group, we use the default Drop method\n            if (draggedItemGroupKey == groupKey)\n            {\n                base.Drop(state);\n                return;\n            }\n\n            var draggedItem = state.DraggedDataItem.Data;\n            var dragItemIndex = GetItemIndex(draggedItemGroupKey, draggedItem, state.DraggedCollectionViewSource.ItemsSource);\n            var dropItemIndex = GetItemIndex(groupKey, dropDataItem, state.DropTarget.ItemsSource);\n\n            if (dragItemIndex > -1 && dropItemIndex > -1)\n            {\n                var view = state.DropTarget as CollectionView;\n                var sourceCollections = state.DropTarget.ItemsSource as IEnumerable<IEnumerable>;\n                var sourceCollection = sourceCollections.FirstOrDefault(x => GetKey(x) == draggedItemGroupKey) as IList;\n                var targetCollection = sourceCollections.FirstOrDefault(x => GetKey(x) == groupKey) as IList;\n\n                var itemToInsert = sourceCollection[dragItemIndex];\n                sourceCollection.RemoveAt(dragItemIndex);\n\n                if (draggedItemGroupKey != groupKey && state.DropPosition == DropPosition.After)\n                {\n                    dropItemIndex++;\n                }\n\n                targetCollection.Insert(dropItemIndex, itemToInsert);\n            }\n        }\n        else\n        {\n            base.Drop(state);\n        }\n    }\n\n    private int GetItemIndex(string groupKey, object item, IEnumerable itemsSource)\n    {\n        var sourceCollections = itemsSource as IEnumerable<IEnumerable>;\n        if (sourceCollections == null)\n        {\n            return -1;\n        }\n\n        var collection = sourceCollections.FirstOrDefault(x => GetKey(x) == groupKey) as IList;\n        if (collection == null)\n        {\n            return -1;\n        }\n\n        return collection.IndexOf(item);\n    }\n\n    private string GetKey(IEnumerable collection)\n    {\n        var groupName = collection.GetType().GetProperty(\"Key\")?.GetValue(collection, null);\n        return groupName?.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for Cities in C#\nDESCRIPTION: ViewModel class containing a collection of City objects for binding to the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<City> Cities { get; set; }\n\n    public ViewModel()\n    {\n        this.Cities = new ObservableCollection<City>\n        {\n            new City { Name = \"New York\", Population = 8419000 },\n            new City { Name = \"London\", Population = 8982000 },\n            new City { Name = \"Tokyo\", Population = 13929286 }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeSlider with Custom Tooltip in XAML\nDESCRIPTION: This code snippet shows how to define a RangeSlider control with customized tooltip properties. It includes setting the TooltipStringFormat and TooltipTemplate properties to customize the tooltip appearance and content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/tooltips.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-tooltiptemplate-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Week Selection in C# for .NET MAUI Calendar\nDESCRIPTION: This C# code handles the SelectionChanged event of the Calendar. It calculates the first day of the week based on the selected date and culture settings, then selects the entire week range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/calendar-week-range-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    private bool isInternalSelection = false;\n\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n\n    private void OnCalendarSelectionChanged(object sender, Telerik.Maui.Controls.Calendar.CalendarSelectionChangedEventArgs e)\n    {\n        if (this.isInternalSelection)\n        {\n            return;\n        }\n\n        var selectedDate = e.AddedDates.First();\n        var culture = this.calendar.Culture ?? CultureInfo.CurrentCulture;\n        var firstDayOfWeek = this.calendar.FirstDayOfWeek ?? culture.DateTimeFormat.FirstDayOfWeek;\n\n        var rangeStart = this.GetFirstDayOfWeek(selectedDate, firstDayOfWeek);\n        var rangeEnd = rangeStart.AddDays(6);\n\n        var selectedDates = (CalendarSelectionCollection)this.calendar.SelectedDates;\n\n        this.isInternalSelection = true;\n        selectedDates.AddRange(rangeStart, rangeEnd);\n        this.isInternalSelection = false;\n    }\n\n    private DateTime GetFirstDayOfWeek(DateTime dateTime, DayOfWeek weekStart)\n    {\n        var selectedDay = (int)dateTime.DayOfWeek;\n        if (selectedDay < (int)weekStart)\n        {\n            selectedDay += 7;\n        }\n\n        int daysToSubtract = selectedDay - (int)weekStart;\n        DateTime result = dateTime.AddDays(-daysToSubtract);\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ListPicker Display Label Style Definition\nDESCRIPTION: Style definition for display label in ListPicker marked with snippet id 'listpicker-style-display-label-style'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-display-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Collection of Person Objects - C#\nDESCRIPTION: This snippet creates a ViewModel that contains a collection of 'Person' objects, which will be used as the data source for the DataGrid. It relies on the same namespaces as the preceding class definitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/nested-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainViewModel {\n    public ObservableCollection<Person> People { get; set; }\n    public MainViewModel() {\n        People = new ObservableCollection<Person>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Location Data Model in C#\nDESCRIPTION: Defines the base Location model class with common properties for locations in the TreeView hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Location\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested RadListViews XAML Layout for Kanban UI\nDESCRIPTION: This XAML snippet defines the UI layout with a horizontal RadListView as the parent and vertical RadListViews as children. It includes data binding, templates, and a button for demonstrating programmatic scrolling control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-cross-orientation-nesting.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:HorizontalAndVerticalDemo\"\n             x:Class=\"HorizontalAndVerticalDemo.MainPage\">\n    <Grid>\n        <telerik:RadListView x:Name=\"listView\"\n                             ItemsSource=\"{Binding Items}\">\n            <telerik:RadListView.ItemTemplate>\n                <DataTemplate x:DataType=\"local:KanbanItem\">\n                    <telerik:ListViewTemplateCell>\n                        <Grid RowDefinitions=\"Auto, *\"\n                              WidthRequest=\"200\"\n                              RowSpacing=\"10\"\n                              Padding=\"10\">\n\n                            <Label Text=\"{Binding WeekName}\"\n                                   Grid.Row=\"0\" />\n\n                            <telerik:RadListView x:Name=\"InnerListView\"\n                                                 ItemsSource=\"{Binding SubItems}\"\n                                                 BindingContextChanged=\"OnListViewBindingContextChanged\"\n                                                 Grid.Row=\"1\">\n                                <telerik:RadListView.ItemTemplate>\n                                    <DataTemplate x:DataType=\"local:KanbanSubItem\">\n                                        <telerik:ListViewTemplateCell>\n                                            <VerticalStackLayout Padding=\"10\"\n                                                                 Spacing=\"5\">\n                                                <Label Text=\"{Binding Title}\"\n                                                       FontAttributes=\"Bold\" />\n                                                <Label Text=\"{Binding Deadline, StringFormat='{0:g}'}\" />\n                                            </VerticalStackLayout>\n                                        </telerik:ListViewTemplateCell>\n                                    </DataTemplate>\n                                </telerik:RadListView.ItemTemplate>\n                                <telerik:RadListView.LayoutDefinition>\n                                    <telerik:ListViewLinearLayout VerticalItemSpacing=\"5\"\n                                                                  Orientation=\"Vertical\" />\n                                </telerik:RadListView.LayoutDefinition>\n                            </telerik:RadListView>\n                        </Grid>\n                    </telerik:ListViewTemplateCell>\n                </DataTemplate>\n            </telerik:RadListView.ItemTemplate>\n            <telerik:RadListView.LayoutDefinition>\n                <telerik:ListViewLinearLayout HorizontalItemSpacing=\"20\"\n                                              Orientation=\"Horizontal\" />\n            </telerik:RadListView.LayoutDefinition>\n        </telerik:RadListView>\n\n        <Button Text=\"Scroll Week 3 to SubItem #25\"\n                Clicked=\"Button_OnClicked\"\n                HorizontalOptions=\"End\"\n                VerticalOptions=\"Center\"\n                Margin=\"10\" />\n\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to the RadDataGrid in C#\nDESCRIPTION: Adds an instance of 'CellDoubleTapUserCommand' to the commands collection of a 'RadDataGrid' instance. This links the command to the grid, enabling the custom double tap behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ngrid.Commands.Add(new CellDoubleTapUserCommand());\n```\n\n----------------------------------------\n\nTITLE: Defining RadDateTimePicker\nDESCRIPTION: This snippet demonstrates how to define the RadDateTimePicker using the PopupSettings for styling the popup's appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker PopupSettings=\"{StaticResource PopupSettings}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Adds the required Telerik namespace declaration to enable XAML-based control definitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: RadMap Namespace Declaration in XAML\nDESCRIPTION: This snippet showcases the XAML namespace declaration for the `RadMap` control. This namespace is required to use the Telerik UI for .NET MAUI Map control in your XAML code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n```XAML\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n ```\n```\n\n----------------------------------------\n\nTITLE: Defining PDF Viewer and Toolbar in XAML\nDESCRIPTION: This code snippet shows how to define a PDF Viewer control with a toolbar in XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-toolbar-styling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CollectionView\nDESCRIPTION: Implements a ViewModel class that provides a collection of Country objects to be used as the ItemsSource for the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Country> Countries { get; set; }\n\n    public ViewModel()\n    {\n        this.Countries = new ObservableCollection<Country>\n        {\n            new Country { Name = \"Argentina\", Population = 45195777 },\n            new Country { Name = \"Brazil\", Population = 212559409 },\n            new Country { Name = \"Canada\", Population = 37742154 },\n            new Country { Name = \"Denmark\", Population = 5792202 },\n            new Country { Name = \"Ecuador\", Population = 17643054 },\n            new Country { Name = \"France\", Population = 65273511 },\n            new Country { Name = \"Germany\", Population = 83783942 },\n            new Country { Name = \"Hungary\", Population = 9660351 },\n            new Country { Name = \"Italy\", Population = 60461826 },\n            new Country { Name = \"Japan\", Population = 126476461 },\n            new Country { Name = \"Korea\", Population = 51269185 },\n            new Country { Name = \"Latvia\", Population = 1886198 },\n            new Country { Name = \"Mexico\", Population = 128932753 },\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Input to Letters in .NET MAUI TextMaskedEntry\nDESCRIPTION: This snippet allows only letter characters to be input in the RadTextMaskedEntry by setting an appropriate mask.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTextMaskedEntry Mask=\"A\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Required Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to access the PDF Viewer controls in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Styling the Path using the RadSweepGradientBrush\nDESCRIPTION: This snippet demonstrates how to apply a gradient fill to the `RadPath` control using `RadSweepGradientBrush`. The fill features two gradient stops with specified colors and their corresponding angles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPath x:Name=\"gradientPath\"\n                            StrokeThickness=\"1\"\n                            Stroke=\"White\"\n                            Geometry=\"{x:Static telerikInput:Geometries.Diamond}\">\n    <telerik:RadPath.Fill>\n        <telerik:RadSweepGradientBrush>\n            <x:Arguments>\n                <Point>0.5, 0.5</Point>\n            </x:Arguments>\n            <telerik:RadSweepGradientStop>\n                <x:Arguments>\n                    <Color>#1481FF</Color>\n                    <x:Double>180</x:Double>\n                </x:Arguments>\n            </telerik:RadSweepGradientStop>\n            <telerik:RadSweepGradientStop>\n                <x:Arguments>\n                    <Color>#BCE1FF</Color>\n                    <x:Double>360</x:Double>\n                </x:Arguments>\n            </telerik:RadSweepGradientStop>\n        </telerik:RadSweepGradientBrush>\n    </telerik:RadPath.Fill>\n</telerik:RadPath>\n```\n\n----------------------------------------\n\nTITLE: Property Reference for CollectionView Group Styling\nDESCRIPTION: Shows the available property for styling CollectionView group headers. The GroupContainerStyle property accepts a Style targeting RadCollectionViewGroupView to customize the appearance of group headers when grouping is applied.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGroupContainerStyle (Style with target type RadCollectionViewGroupView)\n```\n\n----------------------------------------\n\nTITLE: Styling the Placeholder Label in DateTimePicker\nDESCRIPTION: Shows how to define a custom style for the placeholder label displayed when no date is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style-placeholder-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Creating Item Class for TreeView in C#\nDESCRIPTION: Defines a sample Item class with properties for Name and a collection of child Items. This class is used to create the hierarchical data structure for the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Item\n{\n    public string Name { get; set; }\n    public ObservableCollection<Item> Items { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar with Year Style Selector\nDESCRIPTION: Configures a Telerik .NET MAUI Calendar control with a custom year style selector to customize the appearance of years in the decade view\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/year-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\\u003ctelerick:RadCalendar YearStyleSelector=\"{StaticResource CustomStyleSelector}\" /\\u003e\n```\n\n----------------------------------------\n\nTITLE: ViewModel for LoadOnDemand Command\nDESCRIPTION: Implements a ViewModel with a LoadOnDemand command that supports asynchronous item loading and manages the loading state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic bool IsLoadingMoreItems { get; set; }\n\npublic ICommand LoadItemsCommand => new Command(async () =>\n{\n    IsLoadingMoreItems = true;\n    var newItems = await LoadMoreItemsAsync();\n    foreach (var item in newItems)\n    {\n        Items.Add(item);\n    }\n    IsLoadingMoreItems = false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FooterStyle\nDESCRIPTION: This code demonstrates how to specify the FooterStyle property for the drop-down footer within the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings>\n    <PickerDropDownSettings.FooterStyle>\n        <Style TargetType=\"telerik:PickerPopupFooterView\">\n            <!-- Style properties go here -->\n        </Style>\n    </PickerDropDownSettings.FooterStyle>\n</RadTimeSpanPicker.DropDownSettings>\n```\n\n----------------------------------------\n\nTITLE: Setting Frozen Columns in XAML for .NET MAUI DataGrid\nDESCRIPTION: Demonstrates how to set a frozen column in XAML by using the IsFrozen property on a DataGridTextColumn.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/frozen-columns.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" \n                     ItemsSource=\"{Binding Clubs}\" \n                     AutoGenerateColumns=\"False\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\" \n                                    IsFrozen=\"True\"\n                                    HeaderText=\"Name\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Positioning and Offset in .NET MAUI RadRadialGauge\nDESCRIPTION: This XAML snippet demonstrates how to set up a RadRadialGauge with multiple indicators, ranges, and custom positioning. It showcases the use of Offset properties to ensure elements are arranged without overlapping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/positioning.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRadialGauge x:Name=\"gauge\"\n\t\t\t\t\t\t  Margin=\"2\"\n\t\t\t\t\t\t  AxisRadiusFactor=\"1\"\n\t\t\t\t\t\t  StartAngle=\"90\"\n\t\t\t\t\t\t  SweepAngle=\"360\">\n    <telerik:RadRadialGauge.Axis>\n        <telerik:GaugeLinearAxis Maximum=\"100\"\n                                       Minimum=\"0\"\n                                       ShowLabels=\"False\"\n                                       StrokeThickness=\"0\" />\n    </telerik:RadRadialGauge.Axis>\n    <telerik:RadRadialGauge.Ranges>\n        <telerik:GaugeRangesDefinition EndThickness=\"1\"\n                                             StartThickness=\"1\"\n                                             Offset=\"0\">\n            <telerik:GaugeRange Color=\"#FFDD789B\"\n                                      From=\"0\"\n                                      To=\"25\" />\n            <telerik:GaugeRange Color=\"#FFAAC271\"\n                                      From=\"25\"\n                                      To=\"50\" />\n            <telerik:GaugeRange Color=\"#FF4062AD\"\n                                      From=\"50\"\n                                      To=\"75\" />\n        </telerik:GaugeRangesDefinition>\n    </telerik:RadRadialGauge.Ranges>\n    <telerik:RadRadialGauge.Indicators>\n        <telerik:GaugeBarIndicator EndCap=\"Oval\"\n                                         EndThickness=\"10\"\n                                         Fill=\"#FFDD789B\"\n                                         StartThickness=\"10\"\n                                         Offset=\"3\"\n                                         Value=\"12.5\" />\n        <telerik:GaugeBarIndicator EndCap=\"Oval\"\n                                         EndThickness=\"10\"\n                                         Fill=\"#FFAAC271\"\n                                         StartThickness=\"10\"\n                                         Offset=\"15\"\n                                         Value=\"37.5\" />\n        <telerik:GaugeBarIndicator EndCap=\"Oval\"\n                                         EndThickness=\"10\"\n                                         Fill=\"#FF4062AD\"\n                                         StartThickness=\"10\"\n                                         Offset=\"27\"\n                                         Value=\"62.5\" />\n        <telerik:GaugeShapeIndicator Fill=\"#FF4062AD\"\n                                           Position=\"Start\"\n                                           Offset=\"39\"\n                                           Value=\"56\" />\n        <telerik:GaugeNeedleIndicator Fill=\"#FFAAC271\"\n                                            Offset=\"51\"\n                                            Value=\"37.5\" />\n    </telerik:RadRadialGauge.Indicators>\n</telerik:RadRadialGauge>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with Custom Drag and Drop Behavior in XAML\nDESCRIPTION: XAML code for configuring a CollectionView with custom drag-drop behavior for grouped items. It includes group descriptors, drag-drop behavior settings, and item template definitions for the collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-grouped-items.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                           ItemsSource=\"{Binding Products}\"\n                           SelectedItem=\"{Binding SelectedItem}\">\n    <telerik:RadCollectionView.GroupDescriptors>\n        <telerik:PropertyGroupDescriptor PropertyName=\"Category\" />\n    </telerik:RadCollectionView.GroupDescriptors>\n    <telerik:RadCollectionView.DragDrop>\n        <local:CustomCollectionViewDragDropBehavior />\n    </telerik:RadCollectionView.DragDrop>\n    <telerik:RadCollectionView.ItemsLayout>\n        <telerik:ListItemsLayout ItemSpacing=\"16\"\n                                 Orientation=\"Vertical\" />\n    </telerik:RadCollectionView.ItemsLayout>\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:ItemLayout Padding=\"16\"\n                                BackgroundColor=\"LightGray\"\n                                CornerRadius=\"8\"\n                                HeightRequest=\"60\">\n                <Label Margin=\"10\"\n                       FontSize=\"16\"\n                       Text=\"{Binding Name}\"\n                       VerticalOptions=\"Center\" />\n            </telerik:ItemLayout>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n    <telerik:RadCollectionView.GroupHeaderTemplate>\n        <DataTemplate>\n            <telerik:CollectionViewGroupHeader>\n                <Label Margin=\"10\"\n                       FontAttributes=\"Bold\"\n                       FontSize=\"18\"\n                       Text=\"{Binding Key}\" />\n            </telerik:CollectionViewGroupHeader>\n        </DataTemplate>\n    </telerik:RadCollectionView.GroupHeaderTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Accept and Cancel Commands in DateTimePicker\nDESCRIPTION: Shows how to set up AcceptCommand and CancelCommand with command parameters in the PopupSettings\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadDateTimePicker x:Name=\"dateTimePicker\" PickerMode=\"Popup\"> \n        <telerik:RadDateTimePicker.PopupSettings>\n            <telerik:PickerPopupSettings AcceptCommand=\"{Binding Accept}\"\n                                         AcceptCommandParameter=\"{Binding Date, Source={x:Reference dateTimePicker}}\"\n\t\t\t\t\t\t\t\t CancelCommand=\"{Binding Cancel}\"\n\t\t\t\t\t\t\t\t CancelCommandParameter=\"{Binding Date, Source={x:Reference dateTimePicker}}\"/>\n        </telerik:RadDateTimePicker.PopupSettings>\n            <telerik:RadDateTimePicker.BindingContext>\n                <local:ViewModel/>\n            </telerik:RadDateTimePicker.BindingContext>\n    </telerik:RadDateTimePicker>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Customizing TreeView Appearance with ControlTemplate in XAML\nDESCRIPTION: This code snippet demonstrates how to define and apply a custom ControlTemplate to a RadTreeView control. The template includes modifications like a custom background color and an additional button at the end of each tree item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/control-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <!-- default control template with modifications for adding a button at the end -->\n            <ControlTemplate x:Key=\"myTemplate\">\n                <telerik:RadBorder BackgroundColor=\"LightBlue\"\n                                       BorderColor=\"{TemplateBinding BorderColor}\"\n                                       BorderBrush=\"{TemplateBinding BorderBrush}\"\n                                       BorderThickness=\"{TemplateBinding BorderThickness}\"\n                                       CornerRadius=\"{TemplateBinding CornerRadius}\"\n                                       Padding=\"{TemplateBinding ContentPadding}\">\n                    <telerik:TreeViewItemLayout Indentation=\"{TemplateBinding Indentation}\"\n                                                Spacing=\"{TemplateBinding Spacing}\">\n\n                        <telerik:TreeViewItemExpandButton Style=\"{TemplateBinding ExpandButtonStyle}\"\n                                                              Command=\"{TemplateBinding ToggleExpandedCommand}\"\n                                                              TextColor=\"{TemplateBinding TextColor}\"\n                                                              IsExpanded=\"{TemplateBinding IsExpanded}\"\n                                                              IsLeaf=\"{TemplateBinding IsLeaf}\"\n                                                              IsEnabled=\"{TemplateBinding IsEnabled}\"\n                                                              IsVisible=\"{TemplateBinding IsExpandButtonVisible}\" />\n                        <telerik:TreeViewItemCheckBox Style=\"{TemplateBinding CheckBoxStyle}\"\n                                                          IsChecked=\"{TemplateBinding IsChecked}\"\n                                                          IsEnabled=\"{TemplateBinding IsEnabled}\"\n                                                          IsVisible=\"{TemplateBinding IsCheckBoxVisible}\" />\n                     \n                        <telerik:TreeViewItemImage Source=\"{TemplateBinding ImageSource}\"\n                                                       Style=\"{TemplateBinding ImageStyle}\"\n                                                       IsEnabled=\"{TemplateBinding IsEnabled}\"\n                                                       IsVisible=\"{TemplateBinding IsImageVisible}\" />\n                            <!-- content presenter for presenting the (ItemTemplate/Text if itemtemplate is not used) -->\n                        <ContentPresenter/>\n\n                            <!-- added additional button at the end of the control template -->\n                        <telerik:TreeViewItemButton Text=\"MyButton\" WidthRequest=\"100\" BackgroundColor=\"Red\" HorizontalOptions=\"End\"/>\n                    </telerik:TreeViewItemLayout>\n                </telerik:RadBorder>\n            </ControlTemplate>\n            \n            <Style TargetType=\"telerik:TreeViewItemView\" x:Key=\"myStyle\" >\n                <!-- control template can be defined through style -->\n                <Setter Property=\"ControlTemplate\" Value=\"{StaticResource myTemplate}\"/>\n                <Setter Property=\"IsImageVisible\" Value=\"True\"/>\n            </Style>\n            \n        </ResourceDictionary>\n    </ContentPage.Resources>\n    <telerik:RadTreeView x:Name=\"treeView\"\n                         ItemStyle=\"{StaticResource myStyle}\"\n                         ItemsSource=\"{Binding Items}\">\n        <telerik:TreeViewDescriptor ItemsSourcePath=\"Children\"\n                                DisplayMemberPath=\"Name\"\n                                TargetType=\"{x:Type local:Item}\" />\n    </telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Defining SignaturePad Control in XAML\nDESCRIPTION: XAML configuration for the Telerik RadSignaturePad control with event handlers\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/events.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueChanging Event Handler in C#\nDESCRIPTION: Creates an event handler to prevent the slider thumb from being dragged to values below 20\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Slider_ValueChanging(object sender, Telerik.Maui.ValueChangingEventArgs e)\n{\n    var slider = (RadSlider)sender;\n    if (e.Value < 20)\n    {\n        e.Value = slider.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Line Segment in XAML\nDESCRIPTION: Shows how to create a RadPath with a RadLineSegment in Telerik MAUI, illustrating the basic configuration of a line segment between two points.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='path-geometry-simpleline-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Programmatic Shape Selection Event Handlers\nDESCRIPTION: Provides the C# event handler implementation for selecting and deselecting map shapes at runtime, using the Shapes property to find and modify shape selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='map-selection-runtime-code' />\n```\n\n----------------------------------------\n\nTITLE: Chart Series Categorical View Model\nDESCRIPTION: Creates a ViewModel with a collection of CategoricalDataModel objects to populate a chart series.  It initializes sample data with category labels and numeric values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-features-combine-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n        public class ViewModel\n        {\n            public ObservableCollection<CategoricalDataModel> Data { get; set; }\n\n            public ViewModel()\n            {\n                this.Data = new ObservableCollection<CategoricalDataModel>\n                {\n                    new CategoricalDataModel { Category = \"A\", Value = 0.4 },\n                    new CategoricalDataModel { Category = \"B\", Value = 0.7 },\n                    new CategoricalDataModel { Category = \"C\", Value = 0.9 },\n                    new CategoricalDataModel { Category = \"D\", Value = 0.3 },\n                    new CategoricalDataModel { Category = \"E\", Value = 0.5 }\n                };\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating Address Model - C#\nDESCRIPTION: This snippet defines the 'Address' class that holds address-related data. This model is part of the nested properties feature for the Person class in the DataGrid setup. It also requires the same dependencies as the Person class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/nested-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Address : NotifyPropertyChangedBase {\n    public string Street { get; set; }\n    public string City { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom String Converter for Slider Labels - C#\nDESCRIPTION: This snippet shows how to add a custom Dictionary String Converter to replace range values in Slider labels with more user-friendly names.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/labels.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomStringConverter : IStringConverter\n{\n    public string Convert(double value)\n    {\n        // Implement your conversion logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CellDoubleTap Command in C#\nDESCRIPTION: Defines a command class 'CellDoubleTapUserCommand' that inherits from 'DataGridCommand' to handle the 'CellDoubleTap' gesture. The Execute method redirects the command to perform a cell tap action.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class CellDoubleTapUserCommand : DataGridCommand\n{\n    public CellDoubleTapUserCommand()\n    {\n        Id = DataGridCommandId.CellDoubleTap;\n    }\n\n    public override void Execute(object parameter)\n    {\n        this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.CellTap, parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button on DatePicker in XAML\nDESCRIPTION: This XAML snippet demonstrates how to enable the clear button on the DatePicker control using the `IsClearButtonVisible` property.  Setting this to `True` will render a button allowing the user to clear the selected date.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n                            IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Adding ViewModel with Collection in C#\nDESCRIPTION: This snippet shows how to add a ViewModel with a collection of Cities to be used as the data source for the RadListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-grouping-groupdescriptors-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Applying More Appointments Indicator Style to MonthViewDefinition\nDESCRIPTION: Implementation of the Scheduler control with MonthViewDefinition that applies the custom DayMoreAppointmentsIndicatorStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/moreindicator-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-moreindicatorstyling-definition'/>\n```\n\n----------------------------------------\n\nTITLE: CollectionView Data Model Reference\nDESCRIPTION: Reference to a code snippet defining the business object model for CollectionView items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style.md#2025-04-21_snippet_1\n\nLANGUAGE: unknown\nCODE:\n```\n<snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationLabelStyle in XAML\nDESCRIPTION: This snippet demonstrates how to define a custom style for the validation summary label in XAML. It sets properties like text color, font size, and font attributes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/validation-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ValidationLabelStyle\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"#AD510C\" />\n    <Setter Property=\"FontSize\" Value=\"14\" />\n    <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CollectionView Grouping\nDESCRIPTION: A ViewModel implementation that provides data and grouping logic for the CollectionView. This class would include collections and properties needed to demonstrate the grouping functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/header.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Customizing Pie Chart Labels for Multiple Platforms in C#\nDESCRIPTION: This C# method demonstrates how to customize Pie Chart labels for Windows, Android, and iOS/MacCatalyst platforms. It accesses the native chart control and applies platform-specific label customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void UpdateChart()\n{\n    var platformView = this.chart.Handler.PlatformView;\n#if WINDOWS\n    var platformChart = (Telerik.UI.Xaml.Controls.Chart.RadPieChart)platformView;\n    var series = platformChart.Series[0];\n    // Remove the default labels.\n    series.LabelDefinitions.Clear();\n    // Add a custom label with a custom template.\n    series.LabelDefinitions.Add(new Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition\n    {\n        // The label template definition is added inside the Platforms/Windows/App.xaml file: \n        LabelTemplate = MauiWinUIApplication.Current.Resources[\"CustomLabelTemplate\"] as Microsoft.UI.Xaml.DataTemplate\n    });\n\n#elif ANDROID\n\n    var platformChart = (Com.Telerik.Widget.Chart.Visualization.PieChart.RadPieChartView)platformView;\n    var series = platformChart.Series.ToArray()?.FirstOrDefault() as Com.Telerik.Widget.Chart.Visualization.PieChart.PieSeries;\n    if(series != null) \n    {\n        // To remove the percentage, set the following format:\n        series.LabelFormat = \"%.2f\";\n            \n        // Then, draw a new label and further customize it inside the CustomPieSeriesLabelRenderer class (Platforms/Android folder).\n        series.LabelRenderer = new Platforms.Android.CustomPieSeriesLabelRenderer(series);\n    }\n\n\n#elif IOS || MACCATALYST\n    var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n    // Render a new label using the Delegate.\n    platformChart.Delegate = new Platforms.iOS.MyChartDelegate(this.chart);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with PropertyGroupDescriptor in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a DataGrid with PropertyGroupDescriptor. It sets up the grid structure and grouping properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/property-group-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-grouping-propertygroupdescriptor-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Saving image as JPEG in C#\nDESCRIPTION: This C# snippet demonstrates how to save the signature as a JPEG image using `SaveImageAsync`. It creates a MemoryStream, saves the image into it, and then sets the Source of a Microsoft.Maui.Image control.  It requires the Telerik UI for .NET MAUI library and the Microsoft.Maui.Controls.Image control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/saving-options.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='signaturepad-saving-jpeg' />\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Input Length in .NET MAUI Entry\nDESCRIPTION: Shows how to limit the number of characters that can be entered in a Telerik Entry control by setting the MaxLength property to a specific value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"telerikEntry\"\n\t\t\t\t  Placeholder=\"Enter text\"\n\t\t\t\t  MaxLength=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Stack Spline Area Series XAML\nDESCRIPTION: Defines a RadCartesianChart with SplineAreaSeries that use the Stack combine mode. The series are stacked on top of each other.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-features-combine-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:LinearAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:SplineAreaSeries CombineMode=\"Stack\" ItemsSource=\"{Binding Data}\" CategoryBinding=\"Category\" ValueBinding=\"Value\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Labels Step and Placement - C#\nDESCRIPTION: This snippet demonstrates how to configure the LabelStep and LabelPlacement properties for the Slider in .NET MAUI, allowing for user-defined labels along the backtrack.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/labels.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nslider.LabelStep = 5;\nslider.LabelsPlacement = SliderLabelsPlacement.Start;\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET MAUI SignaturePad Properties\nDESCRIPTION: Demonstrates how to configure the appearance and behavior of a RadSignaturePad control including stroke color, thickness, background, border properties, and corner radius settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='signaturepad-configuration' />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom String Converter to RangeSlider in XAML\nDESCRIPTION: Demonstrates how to apply the custom string converter to the RangeSlider for label formatting.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/labels.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"0\" Maximum=\"100\"\n                       LabelStep=\"25\"\n                       LabelsPlacement=\"Start\">\n    <telerik:RadRangeSlider.StringConverter>\n        <local:DictionaryStringConverter />\n    </telerik:RadRangeSlider.StringConverter>\n</telerik:RadRangeSlider>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Header Label\nDESCRIPTION: Customizes the appearance of the header label within the DatePicker popup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings HeaderLabelStyle=\"{StaticResource HeaderLabelStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace for Telerik Controls\nDESCRIPTION: XAML namespace declaration required to use Telerik MAUI controls in the application. This namespace must be included to access the PDF Viewer control and its related components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/toolbar.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox with Select All Header Template in XAML\nDESCRIPTION: XAML code that defines a RadComboBox with a HeaderTemplate containing a CheckBox for Select All functionality. The ComboBox is configured for multiple selection and binds to Items collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/adding-select-all-option-combobox-dropdown-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox \n    x:Name=\"comboBox\"\n    ItemsSource=\"{Binding Items}\"\n    SelectionMode=\"Multiple\"\n    IsEditable=\"True\"\n    DisplayMemberPath=\"Name\"\n    SelectedItems=\"{Binding SelectedItems}\"\n    AutomationId=\"comboSelectedItemMultiple\"\n    WidthRequest=\"200\">\n    <telerik:RadComboBox.HeaderTemplate>\n        <DataTemplate>\n            <HorizontalStackLayout>\n                <telerik:RadCheckBox IsCheckedChanged=\"RadCheckBox_IsCheckedChanged\"/>\n                <Label Text=\"Select All\"/>\n            </HorizontalStackLayout>\n        </DataTemplate>\n    </telerik:RadComboBox .HeaderTemplate>\n</telerik:RadComboBox >\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Text for .NET MAUI BadgeView using XAML\nDESCRIPTION: Demonstrates setting the BadgeText property for a Telerik RadBadgeView to display a specific text on the badge marker. The BadgeText property requires a string value. The BadgeView's appearance can be customized further through styling and customization guides.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView BadgeText=\\\"Badge Text\\\">\\n    <telerik:RadBadgeView.Content>\\n        <telerik:RadBorder WidthRequest=\\\"80\\\"\\n                           HeightRequest=\\\"80\\\"\\n                           BorderThickness=\\\"1\\\"\\n                           BorderColor=\\\"LightGray\\\">\\n            <Label Text=\\\"Telerik BadgeView for .NET MAUI\\\"\\n                   FontSize=\\\"14\\\"\\n                   VerticalTextAlignment=\\\"Center\\\"\\n                   HorizontalTextAlignment=\\\"Center\\\"/>\\n        </telerik:RadBorder>\\n    </telerik:RadBadgeView.Content>\\n</telerik:RadBadgeView>\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker Namespace Again\nDESCRIPTION: This snippet adds the Telerik namespace again, ensuring that all components are correctly recognized in the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grouped DataGrid Items in C#\nDESCRIPTION: This snippet demonstrates how to get a view of the ItemsSource after sorting, grouping, and filtering operations are applied using the GetDataView method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/expand-collapse.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar dataView = this.dataGrid.GetDataView();\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection ViewModel\nDESCRIPTION: ViewModel implementation for ComboBox single selection functionality\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-singleselection-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Layout for DataForm using XAML\nDESCRIPTION: This snippet demonstrates how to apply a custom layout to a DataForm using XAML. It uses the DataFormCustomLayout with a RadWrapLayout inside the LayoutTemplate property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/layouts/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <telerik:RadDataForm x:Name=\"dataForm\">\n        <telerik:RadDataForm.LayoutDefinition>\n            <telerik:DataFormCustomLayout>\n                <telerik:DataFormCustomLayout.LayoutTemplate>\n                    <DataTemplate>\n                        <telerik:RadWrapLayout/>\n                    </DataTemplate>\n                </telerik:DataFormCustomLayout.LayoutTemplate>\n            </telerik:DataFormCustomLayout>\n        </telerik:RadDataForm.LayoutDefinition>\n        <telerik:RadDataForm.BindingContext>\n            <local:EditorsViewModel/>\n        </telerik:RadDataForm.BindingContext>\n    </telerik:RadDataForm>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Handling ProgressCompleted Event in C#\nDESCRIPTION: Event handler that updates a label with \"Completed\" text when the progress reaches the maximum value, triggering the ProgressCompleted event.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/events.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ProgressBar_ProgressCompleted(object sender, EventArgs e)\n{\n    this.progressLabel.Text = \"Completed\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ViewModel for CollectionView Grouping Example\nDESCRIPTION: Creates a ViewModel class that initializes a collection of Country objects to be used as the data source for the CollectionView with grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Country>\n        {\n            new Country { Name = \"Angola\", Capital = \"Luanda\" },\n            new Country { Name = \"Argentina\", Capital = \"Buenos Aires\" },\n            new Country { Name = \"Austria\", Capital = \"Vienna\" },\n            new Country { Name = \"Belgium\", Capital = \"Brussels\" },\n            new Country { Name = \"Canada\", Capital = \"Ottawa\" },\n            new Country { Name = \"Colombia\", Capital = \"Bogotá\" },\n            new Country { Name = \"France\", Capital = \"Paris\" },\n            new Country { Name = \"Germany\", Capital = \"Berlin\" },\n            new Country { Name = \"Italy\", Capital = \"Rome\" },\n            new Country { Name = \"Japan\", Capital = \"Tokyo\" },\n            new Country { Name = \"Mexico\", Capital = \"Mexico City\" },\n            new Country { Name = \"Spain\", Capital = \"Madrid\" },\n            new Country { Name = \"United Kingdom\", Capital = \"London\" },\n            new Country { Name = \"United States\", Capital = \"Washington, D.C.\" },\n        };\n    }\n\n    public ObservableCollection<Country> Items { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeStart and RangeEnd Properties in .NET MAUI RangeSlider\nDESCRIPTION: Demonstrates how to define the RangeStart and RangeEnd properties for the RangeSlider control to set the initial values of the range thumbs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/range-thumb.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CollectionView in C#\nDESCRIPTION: Demonstrates the creation of a ViewModel class for the CollectionView. This snippet is referenced but not provided in the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/linear-layout.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Snippet content not provided in the original text\n// <snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler with Custom Current Time Indicator Style in XAML\nDESCRIPTION: This snippet shows how to define a Scheduler control in XAML with a custom style applied to the current time indicator. It sets up the Scheduler with specific view settings and applies the custom style.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/scheduler-currenttime-indicator-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadScheduler>\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:SchedulerDayViewDefinition />\n        <telerik:SchedulerWeekViewDefinition />\n        <telerik:SchedulerWorkWeekViewDefinition />\n        <telerik:SchedulerMonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Client Business Object Model in C#\nDESCRIPTION: A C# class defining the Client business object with properties for ID, Name, and Country used in the AutoComplete examples.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Client\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating City Business Object for AutoComplete in .NET MAUI\nDESCRIPTION: Defines a City class with Name and Country properties to be used as data items in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionview-template.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-person-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Creating Image Cards with RadChatPicker in C#\nDESCRIPTION: This C# snippet demonstrates how to create a `CardPickerContext` containing a list of `ImageCardContext` objects. Each `ImageCardContext` represents an image card with a title, subtitle, description, and image.  The context is then assigned to the `RadChatPicker` control to display the image cards.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/pickers/card-picker/imagecard.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n```C#\nvar cardsContext = new CardPickerContext {\nCards = new List<CardContext>()\n{\n\tnew ImageCardContext() {\n\t\tTitle =\"Rome\",\n\t\tSubtitle =\"Italy\",\n\t\tDescription =\"Italy’s capital is one of the world’s most romantic and inspiring cities\",\n\t\tImage = \"RomeCard.png\"\n\t},\n\tnew ImageCardContext() {\n\t\tTitle =\"Barcelona\",\n\t\tSubtitle =\"Spain\",\n\t\tDescription =\"Barcelona is an enchanting seaside city with remarkable architecture\",\n\t\tImage = \"BarcelonaCard.png\"\n\t}}\n};\n(chat.Picker as RadChatPicker).Context = cardsContext;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButton Style\nDESCRIPTION: This snippet demonstrates how to define the accept button style within the DateTimePicker popup, affecting the button's appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker AcceptButtonStyle=\"{StaticResource AcceptButtonStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultHighlightedTime Interval\nDESCRIPTION: Sets the default highlighted time interval when no Time is selected, with additional spinner formatting options\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/default-timespan.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker DefaultHighlightedTime=\"5:10:30:00\"\n                                            SpinnerFormat=\"G\"\n                                            AreSpinnerHeadersVisible=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: ImageEditor Desktop Toolbar Items Usage - .NET MAUI\nDESCRIPTION: Shows the toolbar items available for desktop platforms (WinUI and MacCatalyst) in the Telerik UI for .NET MAUI ImageEditor, including various transformation and filter options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/items.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorCropOptionsToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorResizeOptionsToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorRotateLeftToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorRotateRightToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorFlipHorizontalToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorFlipVerticalToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorFilterOptionsToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorUndoToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorRedoToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nSeparatorToolbarItem\n```\n\n----------------------------------------\n\nTITLE: Bindable SortDescriptors in ViewModel\nDESCRIPTION: Demonstrates creating a bindable collection of sort descriptors in the ViewModel to dynamically control ListView sorting\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/sorting.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-features-bindable-sortdescriptor-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderLabelStyle for TemplatedPicker\nDESCRIPTION: This snippet demonstrates how to define a custom style for the header label of the TemplatedPicker in the popup using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-headelabelstyle' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik.Licensing NuGet Package Reference\nDESCRIPTION: XML configuration to add the Telerik.Licensing NuGet package as a project dependency. This package is required for license activation at build time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/licensing/add-license-to-ci-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Telerik.Licensing\" Version=\"1.*\" />\n```\n\n----------------------------------------\n\nTITLE: MAUI Accordion XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for the Telerik Accordion control in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining NumericInput with Event in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadNumericInput control with a ValueChanged event handler. Ensure the necessary Telerik UI for .NET MAUI namespaces are included.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericInput x:Name=\\\"numericInput\\\" ValueChanged=\\\"RadNumericInput_ValueChanged\\\"/>\n```\n\n----------------------------------------\n\nTITLE: ButtonToolbarItem Style Definition\nDESCRIPTION: Style definition for customizing the appearance of ButtonToolbarItem\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/custom-toolbar.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-buttontoolbar-style'/>\n```\n\n----------------------------------------\n\nTITLE: Content Alignment in .NET MAUI Button\nDESCRIPTION: This XAML snippet demonstrates how to align the content of a .NET MAUI Button horizontally and vertically using the `HorizontalContentAlignment` and `VerticalContentAlignment` properties. The `HorizontalContentAlignment` and `VerticalContentAlignment` are set to `Center`.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='button-content-alignment' />\n```\n\n----------------------------------------\n\nTITLE: Setting Source and DataSource for MapShapeReader\nDESCRIPTION: This snippet demonstrates how to set the Source and DataSource properties of the MapShapeReader to point to .shp and .dbf files, respectively. This configuration is necessary for the Map control to read and display shape data from these files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-interactionmode-settintsource' />\n```\n\n----------------------------------------\n\nTITLE: Manual AIPrompt Views Definition in XAML\nDESCRIPTION: This snippet demonstrates how to manually define the views for the AIPrompt control in XAML by setting the `AutoGenerateViews` property to `False` and adding the desired views to the AIPrompt.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-manual-views-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for ScatterArea Series Chart\nDESCRIPTION: Implements a ViewModel that provides the data source and logic for populating the ScatterArea Series with numerical data points.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-area-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/* Chart Series Numerical ViewModel (snippet placeholder) */\n```\n\n----------------------------------------\n\nTITLE: Canceling Changes for Specific Property in .NET MAUI DataForm\nDESCRIPTION: Demonstrates how to use the CancelChanges(string propertyName) method to cancel pending changes for a specific property in the DataForm. This reverts the value to its original state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commit-data.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nthis.dataForm.CancelChanges(\"PropertyName\");\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation for Basic TreeView\nDESCRIPTION: Reference to a C# ViewModel class that provides the data structure for the basic TreeView example, containing a collection of Item objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-getting-started-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing DataMatrix Barcode in XAML\nDESCRIPTION: XAML code snippet showing how to define a DataMatrix barcode using Telerik UI for MAUI. The namespace must be properly declared with the telerik prefix.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/datamatrix-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining BadgeView Control - C#\nDESCRIPTION: This C# snippet creates an instance of the RadBadgeView control programmatically in a .NET MAUI application. This allows for dynamic creation and manipulation of the BadgeView control within the application code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar badge = new RadBadgeView();\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemTemplateSelector Resource\nDESCRIPTION: Defines the ItemTemplateSelector resources in the page's resources. This selector is used to determine which template to apply to a navigation item based on certain criteria.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_14\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemtemplateselector'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Another Fixed Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This snippet illustrates the setting of another Fixed (decimal) Mask for the RadNumericMaskedEntry in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"F\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RadNavigationView in XAML\nDESCRIPTION: This snippet demonstrates how to define the RadNavigationView in XAML. It serves as the main container for the navigation header functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/header.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNavigationView>\n    <!-- HeaderTemplate and other properties will be defined here -->\n</RadNavigationView>\n```\n\n----------------------------------------\n\nTITLE: Adding SlideView Definition in XAML\nDESCRIPTION: This snippet shows how to define a SlideView within XAML, crucial for setting up indicator styling. Dependencies include having .NET MAUI and Telerik components properly installed. The SlideView must be enclosed in a XAML page or component. It is key to later apply custom styles to the defined SlideView and its indicators.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/styling/indicator-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"slideview-indicator-styling\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar for Range Selection\nDESCRIPTION: This code snippet illustrates the setup for a .NET MAUI Calendar that allows users to select a range of dates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-range-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rating Control Features in XAML for .NET MAUI\nDESCRIPTION: Illustrates how to configure various features of the Rating control, such as ItemsCount and ItemsSpacing. This snippet is referenced in the documentation but not directly visible in the provided text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rating-features-configuration' />\n```\n\n----------------------------------------\n\nTITLE: Multiple Elements on One Side in DockLayout\nDESCRIPTION: This example shows how to position multiple elements on the same side of a DockLayout. Elements are arranged according to their order in the DockLayout's children collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/docking.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDockLayout x:Name=\"dockLayout\" >\n    <Label Text=\"Left 1\" telerik:RadDockLayout.Dock=\"Left\" WidthRequest=\"60\" BackgroundColor=\"LightPink\" />\n    <Label Text=\"Left 2\" telerik:RadDockLayout.Dock=\"Left\" WidthRequest=\"60\" BackgroundColor=\"LightGreen\" />\n    <Label Text=\"Left 3\" telerik:RadDockLayout.Dock=\"Left\" WidthRequest=\"60\" BackgroundColor=\"LightBlue\" />\n    <Label Text=\"Last Child\" telerik:RadDockLayout.Dock=\"Left\" BackgroundColor=\"LightYellow\" />\n</telerik:RadDockLayout>\n```\n\n----------------------------------------\n\nTITLE: Applying Telerik Theme Colors in XAML\nDESCRIPTION: Use Telerik theme colors in XAML to achieve consistent styling throughout the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout Spacing=\"10\" \n                     Padding=\"20\"\n                     BackgroundColor=\"{DynamicResource RadAppSurfaceColor}\">\n    <Label Text=\"Telerik .NET MAUI Theming\" \n           FontSize=\"20\"\n           TextColor=\"{DynamicResource RadOnAppSurfaceColor}\" />\n    <BoxView Color=\"{DynamicResource RadPrimaryColor}\"\n            HeightRequest=\"4\" />\n    <Label Text=\"Telerik UI for .NET MAUI comes with a built-in theme that controls the visual appearance of the components.\" \n           FontSize=\"14\"\n           TextColor=\"{DynamicResource RadOnAppSurfaceColor}\" />\n    <telerik:RadToggleButton Content=\"Telerik Theming\" \n                             HorizontalOptions=\"Start\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Common Picker Localization Keys\nDESCRIPTION: Localization keys for common picker buttons, including accept and cancel texts for popup and dropdown interfaces\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ---------------- | ------------- |\n| `Picker_Popup_AcceptButtonText` | `Ok` |\n| `Picker_Popup_CancelButtonText` | `Cancel` |\n| `Picker_DropDown_AcceptButtonText`  | `Ok` |\n| `Picker_DropDown_CancelButtonText`  | `Cancel` |\n```\n\n----------------------------------------\n\nTITLE: DatePicker Popup Mode Configuration in XAML\nDESCRIPTION: Configures a RadDatePicker with Popup mode, displaying a custom date and formatted string representation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n\t\t\t\t\t\tDisplayStringFormat=\"yyy-ddd-MMM\"\n\t\t\t\t\t\tPickerMode=\"Popup\"  />\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox DropDownHeight in XAML\nDESCRIPTION: Shows how to set the height of the ComboBox drop-down using the DropDownHeight property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox DropDownHeight=\"200\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing RadPieChart with Custom Colors in XAML\nDESCRIPTION: This XAML code defines a RadPieChart with a custom color palette for both normal and selected states. It uses a DonutSeries bound to the data from the ViewModel and includes a ChartSelectionBehavior for interactivity.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/pie-chart-custom-colors.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPieChart HeightRequest=\"400\" WidthRequest=\"300\">\n\t<telerik:RadPieChart.BindingContext>\n\t\t<local:ViewModel />\n\t</telerik:RadPieChart.BindingContext>\n\t<telerik:RadPieChart.Palette>\n\t\t<telerik:ChartPalette>\n\t\t\t<telerik:ChartPalette.Entries>\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#4FB6E7\" StrokeColor=\"#4FB6E7\" />\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#A666CE\" StrokeColor=\"#A666CE\" />\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#9DCC00\" StrokeColor=\"#9DCC00\" />\n\t\t\t</telerik:ChartPalette.Entries>\n\t\t</telerik:ChartPalette>\n\t</telerik:RadPieChart.Palette>\n\t<telerik:RadPieChart.SelectionPalette>\n\t\t<telerik:ChartPalette>\n\t\t\t<telerik:ChartPalette.Entries>\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#4FB6E7\" StrokeColor=\"#4D4D4D\" />\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#A666CE\" StrokeColor=\"#4D4D4D\" />\n\t\t\t\t<telerik:PaletteEntry FillColor=\"#9DCC00\" StrokeColor=\"#4D4D4D\" />\n\t\t\t</telerik:ChartPalette.Entries>\n\t\t</telerik:ChartPalette>\n\t</telerik:RadPieChart.SelectionPalette>\n\t<telerik:RadPieChart.Series>\n\t\t<telerik:DonutSeries ShowLabels=\"True\"\n                    InnerRadiusFactor=\"0.4\"\n                    ValueBinding=\"Value\"\n                    ItemsSource=\"{Binding Data}\" />\n\t</telerik:RadPieChart.Series>\n\t<telerik:RadPieChart.ChartBehaviors>\n\t\t<telerik:ChartSelectionBehavior DataPointSelectionMode=\"Single\"  />\n\t</telerik:RadPieChart.ChartBehaviors>\n</telerik:RadPieChart>\n```\n\n----------------------------------------\n\nTITLE: Displaying Localization Keys and Default Values for AIPrompt in Markdown\nDESCRIPTION: A markdown table showing the localization keys and their corresponding default values for the Telerik UI .NET MAUI AIPrompt control. This table helps developers understand which text elements can be localized and what their default English values are.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `AIPrompt_CommandView_Header` | |\n| `AIPrompt_Copy` | `Copy` |\n| `AIPrompt_InputButtonText` | `Generate` |\n| `AIPrompt_InputPlaceholder` | `Ask or generate content with AI` |\n| `AIPrompt_InputView_Header` | `Ask AI` |\n| `AIPrompt_OutputView_Header` | `Output` |\n| `AIPrompt_Retry` | `Retry` |\n| `AIPrompt_SuggestionsHeaderText` | `Prompt suggestions` |\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox DropDownWidth in XAML\nDESCRIPTION: Demonstrates how to set the width of the ComboBox drop-down using the DropDownWidth property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox DropDownWidth=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Row to the DataTable in C#\nDESCRIPTION: This snippet demonstrates how to add a new row to the DataTable that is bound to the DataGrid. It creates a new DataRow, sets its values, and adds it to the DataTable's Rows collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\"var newRow = this.data.NewRow();\nnewRow[\\\"Id\\\"] = 6;\nnewRow[\\\"Name\\\"] = \\\"ProductName 6\\\";\nnewRow[\\\"Price\\\"] = 16.5;\nthis.data.Rows.Add(newRow);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed-Size RadPopup in C# for MAUI\nDESCRIPTION: C# code-behind implementation that creates and manages a RadPopup with fixed dimensions. It handles measuring the popup content on first load, setting fixed width and height, and managing the event that adds items to the popup without changing its size.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/prevent-popup-resizing-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class PopupPage : ContentPage\n{\n    private RadPopup popup;\n    \n    public PopupPage()\n    {\n        InitializeComponent();\n    }\n    \n    private void Button1_Clicked(object sender, System.EventArgs e)\n    {\n        Element element = (Element)sender;\n        Layout parentLayout = (Layout)element.Parent;\n        Layout layout = (Layout)parentLayout.Children[1];\n        layout.Children.Add(new Label { Text = \"item \" + layout.Children.Count });\n    }\n\n    private void Button2_Clicked(object sender, System.EventArgs e)\n    {\n        if (this.popup == null)\n        {\n            this.popup = new RadPopup();\n            DataTemplate template = (DataTemplate)this.Resources[\"Template1\"];\n            View v = template.CreateContent() as View;\n            this.popup.Content = v;\n            v.Loaded += this.ViewLoaded;\n            this.popup.PlacementTarget = (VisualElement)sender;\n            this.popup.Placement = PlacementMode.Top;\n        }\n\n        this.popup.IsOpen = true;\n    }\n\n    private void ViewLoaded(object sender, System.EventArgs e)\n    {\n        View v = (View)sender;\n        var size = v.Measure(double.PositiveInfinity, double.PositiveInfinity);\n        v.WidthRequest = size.Request.Width;\n        v.HeightRequest = size.Request.Height;\n        v.Loaded -= this.ViewLoaded;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection ComboBox\nDESCRIPTION: XAML markup for defining a ComboBox with single selection mode\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-single-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart in XAML for .NET MAUI\nDESCRIPTION: This XAML snippet defines a RadPieChart control with a PieSeries. It sets up data binding, label formatting, and subscribes to the HandlerChanged event for platform-specific customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"*\">\n    <telerik:RadPieChart x:Name=\"chart\" \n                         HandlerChanged=\"chart_HandlerChanged\">\n        <telerik:RadPieChart.BindingContext>\n            <local:ViewModel />\n        </telerik:RadPieChart.BindingContext>\n        <telerik:RadPieChart.Series>\n            <telerik:PieSeries ShowLabels=\"True\"\n                        RadiusFactor=\"0.4\"\n                        ValueBinding=\"Value\" LabelFormat=\"C\"\n                        ItemsSource=\"{Binding Data}\" />\n        </telerik:RadPieChart.Series>\n    </telerik:RadPieChart>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Template in DatePicker\nDESCRIPTION: Demonstrates customizing the header template for the DatePicker popup dialog, allowing flexible header content design\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker HeaderTemplate=\"{StaticResource CustomHeaderTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: DataPager ViewModel Implementation\nDESCRIPTION: C# view model definition for managing data source and pagination logic for DataGrid and DataPager integration\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/datagrid.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Custom RemoveToken Command Usage\nDESCRIPTION: Shows how to apply the custom RemoveTokenCommand to the RadComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/commands.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-custom-removetoken' />\n```\n\n----------------------------------------\n\nTITLE: Implementing TapGestureRecognizer for AutoComplete Token in C#\nDESCRIPTION: Defines the event handler for the TapGestureRecognizer used in the TokenTemplate to handle token taps.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/token-template.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void TapGestureRecognizer_Tapped(object sender, EventArgs e)\n{\n    var item = (sender as Label).BindingContext as City;\n    DisplayAlert(\"Tapped Token\", $\"{item.Name}, {item.Country}\", \"OK\");\n}\n```\n\n----------------------------------------\n\nTITLE: ListView XAML Namespace Declaration\nDESCRIPTION: Declaration of the Telerik XAML namespace for use in MAUI applications\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/template-cell.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled AIPrompt Control in XAML\nDESCRIPTION: Demonstrates the implementation of the RadAIPrompt control with applied CommandStyle and CommandGroupStyle properties to customize the appearance of commands and command groups.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/commandsview-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-commandsview-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Customizing .NET MAUI Expander Header Text\nDESCRIPTION: This snippet illustrates how to style the text inside the Expander header using the HeaderTextStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadExpander x:Name=\"expanderHeaderText\"\n                    IsExpanded=\"True\">\n    <telerik:RadExpander.HeaderTextStyle>\n        <Style TargetType=\"Label\">\n            <Setter Property=\"TextColor\" Value=\"Green\" />\n            <Setter Property=\"FontSize\" Value=\"18\" />\n            <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n        </Style>\n    </telerik:RadExpander.HeaderTextStyle>\n    <telerik:RadExpander.Header>\n        <telerik:ExpanderHeader Title=\"Expander Header\" />\n    </telerik:RadExpander.Header>\n    <telerik:RadExpander.Content>\n        <Label Text=\"Expander Content\" />\n    </telerik:RadExpander.Content>\n</telerik:RadExpander>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TicksStyleSelector for RangeSlider in C#\nDESCRIPTION: A custom style selector class that inherits from Telerik.Maui.Controls.IStyleSelector to apply different styles to ticks based on their position relative to the selected range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/ticks-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class RangeSliderTicksStyleSelector : IStyleSelector\n{\n    public Style BeforeRangeStyle { get; set; }\n    public Style InRangeStyle { get; set; }\n    public Style AfterRangeStyle { get; set; }\n\n    public Style SelectStyle(object item, BindableObject container)\n    {\n        var rangeslider = container as RadRangeSlider;\n        var tickData = item as TickData;\n\n        if (tickData.Value < rangeslider.LowerValue)\n        {\n            return this.BeforeRangeStyle;\n        }\n        else if (tickData.Value <= rangeslider.UpperValue)\n        {\n            return this.InRangeStyle;\n        }\n        else\n        {\n            return this.AfterRangeStyle;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in .NET MAUI\nDESCRIPTION: Imports the Telerik.Maui namespace for accessing localization functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/globalization-localization.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui;\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Shape Rating in .NET MAUI\nDESCRIPTION: Example showing how to create a Rating control with circle shape geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/rating-shape-rating.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadShapeRating ItemShape=\"{x:Static telerik:RadGeometry.Circle}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Data Item for Second Spinner - C#\nDESCRIPTION: This snippet provides a C# code example for adding a data item that will populate the second spinner in the TemplatedPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: Setting WrapLayout Item Size\nDESCRIPTION: Example showing how to configure ItemWidth and ItemHeight properties to control the layout area for child elements in WrapLayout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/wrap-feature.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='wraplayout-item-size' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for .NET MAUI DataGrid Aggregates\nDESCRIPTION: This C# class represents the ViewModel used to populate the DataGrid with sample data for demonstrating aggregates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/property-aggregate-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Order> Orders { get; set; }\n\n    public ViewModel()\n    {\n        this.Orders = new ObservableCollection<Order>\n        {\n            new Order { Name = \"Basket\", Price = 21.30, DeliveryPrice = 5.00, Quantity = 1 },\n            new Order { Name = \"Spoon\", Price = 5.60, DeliveryPrice = 2.00, Quantity = 2 },\n            new Order { Name = \"Knife\", Price = 5.60, DeliveryPrice = 2.00, Quantity = 2 },\n            new Order { Name = \"Grill\", Price = 45.50, DeliveryPrice = 7.00, Quantity = 1 },\n            new Order { Name = \"Slicer\", Price = 9.80, DeliveryPrice = 2.00, Quantity = 2 },\n            new Order { Name = \"Towels\", Price = 6.40, DeliveryPrice = 1.50, Quantity = 4 },\n            new Order { Name = \"Chair\", Price = 35.50, DeliveryPrice = 5.50, Quantity = 2 },\n            new Order { Name = \"Curtains\", Price = 25.50, DeliveryPrice = 4.50, Quantity = 2 },\n            new Order { Name = \"Toys\", Price = 12.80, DeliveryPrice = 2.50, Quantity = 3 },\n            new Order { Name = \"Plates\", Price = 15.60, DeliveryPrice = 3.50, Quantity = 3 }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Three-State ToggleButton in XAML for .NET MAUI\nDESCRIPTION: XAML code snippet that demonstrates how to set the IsThreeState property of a RadToggleButton to enable three-state functionality (Toggled, Untoggled, Indeterminate).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/toggle-state.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButton\" \n                          IsThreeState=\"True\" \n                          Text=\"Three State ToggleButton\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadPieChart in XAML\nDESCRIPTION: Defines a Pie Chart control using XAML, configuring series, data binding, and chart properties for rendering\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/pie-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n// Placeholder for chart-piechart-xaml snippet\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager Display Mode in XAML\nDESCRIPTION: Demonstrates configuring DataPager display mode with multiple visual elements using bitwise combination of DataPagerDisplayMode enum values\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/display-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager Source=\"{Binding Data}\"\n                      DisplayMode=\"FirstPageButton,LastPageButton,NavigationComboBox\">\n</telerik:RadDataPager>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Location ViewModel\nDESCRIPTION: ViewModel implementation for managing location data in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-location-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Barcode with PDF417 Symbology - XAML\nDESCRIPTION: This snippet showcases how to define a Barcode and apply the PDF417 symbology in a .NET MAUI application. It highlights the integration of the Telerik namespace needed for the implementation of the PDF417 barcode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/pdf417-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='barcodepdf-example-xaml' />\n\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipe Event Handlers in C#\nDESCRIPTION: This code snippet shows the implementation of event handlers for the three swipe events (SwipeStarting, Swiping, and SwipeCompleted) in the code-behind file. It demonstrates how to access event arguments and perform actions based on swipe interactions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-events.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void CollectionView_SwipeStarting(object sender, CollectionViewSwipeStartingEventArgs e)\n{\n    // Cancel the swipe for specific items if needed\n    // e.Cancel = item.Name == \"Item 3\";\n}\n\nprivate void CollectionView_Swiping(object sender, CollectionViewSwipingEventArgs e)\n{\n    // Get the current swipe offset\n    var currentOffset = e.Offset;\n}\n\nprivate void CollectionView_SwipeCompleted(object sender, CollectionViewSwipeCompletedEventArgs e)\n{\n    var item = (Item)e.Item;\n    var finalOffset = e.Offset;\n\n    // Based on the swipe direction and offset, execute different actions\n    if (this.collectionView.ItemSwipeDirection == ItemSwipeDirection.End && finalOffset < 0)\n    {\n        // Handle end-direction swipe\n        this.swipeActionText.Text = $\"Deleting {item.Name}\";\n    }\n    else if (this.collectionView.ItemSwipeDirection == ItemSwipeDirection.Start && finalOffset > 0)\n    {\n        // Handle start-direction swipe\n        this.swipeActionText.Text = $\"Setting {item.Name} as favorite\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting First Marketing Employee Cell using SelectCell Method\nDESCRIPTION: Demonstrates how to programmatically select a cell for the first employee from the Marketing department using the SelectCell method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar firstMarketingCell = ((ObservableCollection<Person>)this.dataGrid.ItemsSource).First(p => p.Department == \"Marketing\");\nthis.dataGrid.SelectCell(new DataGridCellInfo(firstMarketingCell, this.dataGrid.Columns[2]));\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerHeader Style for TimeSpanPicker Control in XAML\nDESCRIPTION: This snippet shows how to create a style for the header of the spinner in the TimeSpanPicker. The style customizes properties such as text color, font attributes, and alignment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\" x:Key=\"spinnerHeaderStyle\">\n    <Setter Property=\"TextColor\" Value=\"Black\"/>\n    <Setter Property=\"FontAttributes\" Value=\"Bold\"/>\n    <Setter Property=\"HorizontalOptions\" Value=\"FillAndExpand\"/>\n    <Setter Property=\"VerticalOptions\" Value=\"FillAndExpand\"/>\n    <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\"/>\n    <Setter Property=\"VerticalTextAlignment\" Value=\"Center\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Token Template in XAML\nDESCRIPTION: Example demonstrating how to define custom TokenTemplate and ShowMoreTemplate for the ComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-tokentemplate'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager Ellipsis Mode in XAML\nDESCRIPTION: This snippet shows how to define the DataPager and set the EllipsisMode property in XAML. This allows customization of ellipsis display based on the number of pages in the DataPager.  The DataPager needs to be properly bound to a data source through a ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/ellipsis-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datapager-ellipsis-mode' />\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Resources for RadBorder in WrapLayout\nDESCRIPTION: XAML resource definitions for styling RadBorder elements used within the WrapLayout control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='wraplayout-getting-started-xaml-resources' />\n```\n\n----------------------------------------\n\nTITLE: Applying RangeSlider Styles and Fill Properties\nDESCRIPTION: Example of applying the custom styles and fill colors to a RangeSlider instance\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/rangethumb-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-rangethumb-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting the Fixed Mask in .NET MAUI MaskedEntry\nDESCRIPTION: This snippet shows how to set the Fixed (decimal) Mask for the RadNumericMaskedEntry in .NET MAUI, which ensures that the input is in a fixed decimal format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNumericMaskedEntry Mask=\"F\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Text Formatter Class for Plain DisplayMode - C#\nDESCRIPTION: Implements a custom text formatter by inheriting from IDisplayTextFormatter for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/display-text.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTextFormatter : IDisplayTextFormatter {\n    public string FormatDisplayText(object item) {\n        if (item is Client client) {\n            return client.Name;\n        }\n        return string.Empty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ListPicker PopupView Style\nDESCRIPTION: Defines custom styling for the popup view of the ListPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-popupview-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining NumericInput in XAML\nDESCRIPTION: This snippet shows the implementation of the NumericInput component in XAML. It is configured to utilize the previously defined custom styles, ensuring consistent appearance and behavior as per specified properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:Maui.Controls.RadNumericInput\n    x:Name=\"numericInput\"\n    Style=\"{StaticResource CustomRadNumericInputStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chart Delegate for iOS and MacCatalyst in C#\nDESCRIPTION: This C# class implements a custom chart delegate for iOS and MacCatalyst platforms. It allows customization of chart point labels, including text color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility.Chart;\nusing TelerikUI;\nusing UIKit;\n\nnamespace MauiApp1.Platforms.iOS\n{\n    public class MyChartDelegate : Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.PieChartDelegate\n    {\n        public MyChartDelegate(RadPieChart chart) : base(chart)\n        {\n        }\n        public override TKChartPointLabel LabelForDataPoint(TKChart chart, TKChartData dataPoint, string propertyName, TKChartSeries series, nuint dataIndex)\n        {\n            TKChartDataPoint chartDataPoint = (TKChartDataPoint)dataPoint;\n            return new MyChartPointLabel(chartDataPoint, series, chartDataPoint.DataXValue.ToString());\n        }\n    }\n\n    public class MyChartPointLabel : TKChartPointLabel\n    {\n        public MyChartPointLabel(TKChartDataPoint point, TKChartSeries series, string text) : base(point, series, text)\n        {\n            this.Style.TextColor = UIColor.White;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Telerik Namespace in XAML - XAML\nDESCRIPTION: This snippet shows how to include the Telerik namespace in a XAML file, which is necessary to access Telerik controls and components in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/property-group-descriptor.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Weekend Label Style in XAML\nDESCRIPTION: Creates a custom style for weekend labels with specific text color and alignment properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/styling-weekend-days-radscheduler-monthview-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<local:CustomDayStyleSelector.WeekendLabelStyle>\n    <Style TargetType=\"Label\">\n        <Setter Property=\"TextColor\" Value=\"#707070\" />\n        <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n        <Setter Property=\"VerticalTextAlignment\" Value=\"Center\" />\n    </Style>\n</local:CustomDayStyleSelector.WeekendLabelStyle>\n```\n\n----------------------------------------\n\nTITLE: Applying Code39 Symbology to RadBarcode in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to apply Code39 symbology to a RadBarcode component. It specifies parameters such as width, height, and symbology settings like text alignment, sizing mode, and code text spacing. The snippet also includes a RadBarcode with predefined value. Dependencies include the Telerik XAML namespaces that need to be declared.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/1d-barcodes/specifications.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBarcode WidthRequest=\\\"200\\\" HeightRequest=\\\"100\\\"\n        HorizontalOptions=\\\"Center\\\" VerticalOptions=\\\"Center\\\"\n        Value=\\\"58000106\\\">\n    <telerik:RadBarcode.Symbology>\n        <telerike:Code39 HorizontalTextAlignment=\\\"Center\\\"\n                          SizingMode=\\\"Stretch\\\"\n                          ShowText=\\\"True\\\"  \n                          CodeTextSpacing=\\\"10\\\"/>\n    </telerik:RadBarcode.Symbology>\n</telerik:RadBarcode>\n```\n\n----------------------------------------\n\nTITLE: Applying Control Template in C# for RadScheduler on iOS and Android\nDESCRIPTION: This C# snippet assigns a custom control template to the RadScheduler component. It's intended for use on iOS and Android platforms, dependent on an existing XAML control template named 'CustomSchedulerMobileTemplate'. This code snippet is part of the MainPage.xaml.cs file and ensures the defined styles and layout are applied when the scheduler initializes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-header-rad-scheduler-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n\n#if ANDROID || IOS\n        this.scheduler.ControlTemplate = this.Resources[\"CustomSchedulerMobileTemplate\"] as ControlTemplate;\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Utility class for DataGrid bindings\nDESCRIPTION: This C# snippet implements a static utility class that provides attached properties for binding ComboBox and Picker elements in a DataGrid. It handles the setting and clearing of bindings based on the editor being used.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-celledittemplate-picker-combobox.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DataGridUtils\n{\n    public static readonly BindableProperty EditorBindingItemProperty = BindableProperty.CreateAttached(\n        \"EditorBindingItem\", typeof(object), typeof(DataGridUtils), null, propertyChanged: OnEditorBindingItemChanged);\n\n    public static object GetEditorBindingItem(BindableObject bindable)\n    {\n        return bindable.GetValue(EditorBindingItemProperty);\n    }\n\n    public static void SetEditorBindingItem(BindableObject bindable, object value)\n    {\n        bindable.SetValue(EditorBindingItemProperty, value);\n    }\n\n    private static void OnEditorBindingItemChanged(BindableObject bindable, object oldValue, object newValue)\n    {\n        if (bindable is RadComboBox radComboBox)\n        {\n            HandleRadComboBox(radComboBox, newValue);\n        }\n        else if (bindable is Picker picker)\n        {\n            HandlePicker(picker, newValue);\n        }\n    }\n\n    private static void HandleRadComboBox(RadComboBox combo, object newValue)\n    {\n        //// Clear the SelectedItem binding first, so that it does not become null when we clear the ItemsSource.\n        combo.RemoveBinding(RadComboBox.SelectedItemProperty);\n        combo.RemoveBinding(RadComboBox.ItemsSourceProperty);\n\n        if (newValue is Club club)\n        {\n            //// Set the ItemsSource binding first, so that when the SelectedItem binding kicks in, there is a valid ItemsSource.\n            combo.SetBinding(RadComboBox.ItemsSourceProperty, new Binding { Path = nameof(Club.ComboList), Source = club });\n            combo.SetBinding(RadComboBox.SelectedItemProperty, new Binding { Path = nameof(Club.NumRegs), Source = club });\n        }\n    }\n\n    private static void HandlePicker(Picker picker, object newValue)\n    {\n        //// Clear the SelectedItem binding first, so that it does not become null when we clear the ItemsSource.\n        picker.RemoveBinding(Picker.SelectedItemProperty);\n        picker.RemoveBinding(Picker.ItemsSourceProperty);\n\n        if (newValue is Club club)\n        {\n            //// Set the ItemsSource binding first, so that when the SelectedItem binding kicks in, there is a valid ItemsSource.\n            picker.SetBinding(Picker.ItemsSourceProperty, new Binding { Path = nameof(Club.ComboList), Source = club });\n            picker.SetBinding(Picker.SelectedItemProperty, new Binding { Path = nameof(Club.NumRegs), Source = club });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Cancel Button in ListPicker\nDESCRIPTION: Custom style definition for the Cancel button in ListPicker dropdown\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/dropdown-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Button\">\n```\n\n----------------------------------------\n\nTITLE: Setting ToggleButton Content as String in XAML\nDESCRIPTION: Example showing how to set a simple string content for a ToggleButton control in XAML. This approach displays the string as a Label inside the RadToggleButton's control template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='togglebutton-gettingstarted-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomAppointmentDataTemplate Class and ViewModel in .NET MAUI\nDESCRIPTION: This C# snippet defines the CustomAppointmentDataTemplate class, which selects the appropriate appointment template based on appointment properties. It also includes a simple ViewModel with a predefined list of appointments to demonstrate the appointment customization in .NET MAUI. The ViewModel uses ObservableCollection to support data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-appointment-display-dot-net-maui-scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new ViewModel();\n    }\n}\n\npublic class CustomAppointmentDataTemplate : DataTemplateSelector\n{\n    public DataTemplate AllDayAppointmentTemplate { get; set; }\n    public DataTemplate AppointmentTemplate { get; set; }\n\n    protected override DataTemplate OnSelectTemplate(object item, BindableObject container)\n    {\n        var appointment = (item as AppointmentNode).Occurrence.Appointment;\n        if (appointment.IsAllDay || (appointment.End - appointment.Start).TotalDays > 1)\n        {\n            return this.AllDayAppointmentTemplate;\n        }\n\n        return this.AppointmentTemplate;\n    }\n}\n\npublic class ViewModel\n{\n    public ObservableCollection<Appointment> Appointments { get; set; }\n\n    public ViewModel()\n    {\n        var date = DateTime.Today;\n        this.Appointments = new ObservableCollection<Appointment>\n        {\n            new Appointment {\n                Subject = \"Meeting with Tom\",\n                Start = date.AddHours(10),\n                End = date.AddHours(11)\n            },\n            new Appointment {\n                Subject = \"Lunch with Sara\",\n                Start = date.AddHours(12).AddMinutes(30),\n                End = date.AddHours(14)\n            },\n            new Appointment {\n                Subject = \"Elle Birthday\",\n                Start = date,\n                End = date.AddHours(11),\n                IsAllDay = true\n            },\n            new Appointment {\n                Subject = \"Football Game\",\n                Start = date.AddDays(2).AddHours(15),\n                End = date.AddDays(2).AddHours(17)\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationView Data Item\nDESCRIPTION: Defines a sample business model (data item) used in the NavigationView examples. This model contains the data that will be displayed in each navigation item, such as text and an image source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='navigationview-databinding-dataitem'/>\n```\n\n----------------------------------------\n\nTITLE: Applying Font Options in .NET MAUI Entry Control - XAML\nDESCRIPTION: This snippet demonstrates how to apply various font options to the Telerik Entry control in a .NET MAUI application. It showcases different text styles including normal, bold, italic, and varying font sizes within a vertical stack layout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadEntry Text=\"Normal Text\" x:Name=\"entry\"/>\n    <telerik:RadEntry Text=\"Bold Text - Large\" FontAttributes=\"Bold\" FontSize=\"Large\" />\n    <telerik:RadEntry Text=\"Italic Text - Medium\" FontAttributes=\"Italic\" FontSize=\"Medium\"/>\n    <telerik:RadEntry Text=\"Italic and Bold Text - Small\"  FontSize=\"Small\" x:Name=\"smallEntry\"/>\n    <telerik:RadEntry Text=\"Micro Text\"  FontSize=\"Micro\" />\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Setting the ViewModel as BindingContext in C#\nDESCRIPTION: C# code showing how to set the ViewModel as the BindingContext after initializing components in the page's code-behind.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/databinding.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox Placeholder in XAML\nDESCRIPTION: Demonstrates how to set the Placeholder property of the ComboBox control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox Placeholder=\"Select item...\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Display String Format in TimePicker (XAML)\nDESCRIPTION: This code snippet shows how to set the `DisplayStringFormat` property of the `RadTimePicker` to format the displayed time when the picker dialog is closed. The format string \"H:mm\" specifies the hour in 24-hour format and minutes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker DisplayStringFormat=\"H:mm\"/>\n```\n\n----------------------------------------\n\nTITLE: Styling AIPrompt Output Items in XAML\nDESCRIPTION: Defines custom styles for various elements of AIPrompt output items including title, subtitle, response text, and action buttons. The styles customize text colors, font attributes, and button appearances using XAML style setters.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/outputview-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"MyTitleStyle\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"#00897B\" />\n</Style>\n<Style x:Key=\"MySubtitleStyle\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"#BF00897B\" />\n</Style>\n<Style x:Key=\"MyResponseTextStyle\" TargetType=\"Label\">\n    <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n</Style>\n<Style x:Key=\"MyActionButtonStyle\" TargetType=\"telerik:RadTemplatedButton\">\n    <Setter Property=\"TextColor\" Value=\"#00897B\" />\n</Style>\n<Style x:Key=\"MyOutputItemStyle\" TargetType=\"telerik:AIPromptOutputItemView\">\n    <Setter Property=\"TitleLabelStyle\" Value=\"{StaticResource MyTitleStyle}\" />\n    <Setter Property=\"InputTextLabelStyle\" Value=\"{StaticResource MySubtitleStyle}\" />\n    <Setter Property=\"ResponseTextLabelStyle\" Value=\"{StaticResource MyResponseTextStyle}\" />\n    <Setter Property=\"CopyButtonStyle\" Value=\"{StaticResource MyActionButtonStyle}\" />\n    <Setter Property=\"RetryButtonStyle\" Value=\"{StaticResource MyActionButtonStyle}\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Styling EntryToolbarItem in XAML\nDESCRIPTION: This snippet demonstrates how to style the EntryToolbarItem using XAML. It defines a custom style for RadEntry and applies it to the EntryToolbarItem.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/entry.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadEntry\" x:Key=\"entryStyle\">\n    <Setter Property=\"Placeholder\" Value=\"EntryToolbar\"/>\n</Style>\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:EntryToolbarItem EntryStyle=\"{StaticResource entryStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting ProgressBar Indeterminate Animation Properties in XAML\nDESCRIPTION: Code example demonstrating how to configure indeterminate mode animation properties in RadLinearProgressBar, including IndeterminateAnimationDuration and IndeterminateAnimationEasing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/animations.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='progressbar-indeterminate-animation-duration-easing'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for TabView Data Binding\nDESCRIPTION: Creates a ViewModel with a collection of tab items to be bound to the TabView control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TabViewModel : INotifyPropertyChanged\n{\n    public ObservableCollection\\<TabItemModel\\> TabItems { get; set; }\n    \n    public TabViewModel()\n    {\n        TabItems = new ObservableCollection\\<TabItemModel\\>\n        {\n            new TabItemModel { Title = \"Tab 1\", Content = \"Content 1\" },\n            new TabItemModel { Title = \"Tab 2\", Content = \"Content 2\" }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Only State XAML Configuration\nDESCRIPTION: XAML markup showing how to configure the read-only state of the RichTextEditor using a switch.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-readonly-state' />\n```\n\n----------------------------------------\n\nTITLE: Defining DataModel for CollectionView in C#\nDESCRIPTION: Creates a sample DataModel class with Id and Name properties for use with the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining Client Business Object for AutoComplete in C#\nDESCRIPTION: Creates a Client class with properties for ID, Name, and Email to be used as the data source for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Badge in XAML for .NET MAUI\nDESCRIPTION: This snippet shows how to define a basic Badge control in XAML. It requires adding the Telerik namespace to the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/badge-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:Badge/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Aggregates ViewModel Implementation\nDESCRIPTION: ViewModel class containing the business logic for aggregates functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-aggregates-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Applying DataGridTextFilterControl as FilterControlTemplate in XAML\nDESCRIPTION: This snippet demonstrates how to use the DataGridTextFilterControl as a FilterControlTemplate for a text column within the Telerik RadDataGrid. It sets the filter to be case insensitive, ensuring that case sensitivity toggle buttons are unselected when the Filtering UI is displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/filter-control-template.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                     ItemsSource=\"{Binding GridSource}\"\n                     AutoGenerateColumns=\"False\"\n                     UserEditMode=\"Cell\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridNumericalColumn PropertyName=\"Population\"\n                                         CanUserFilter=\"False\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Name\">\n            <telerik:DataGridTextColumn.FilterControlTemplate>\n                <DataTemplate>\n                    <telerik:DataGridTextFilterControl IsFirstDescriptorCaseSensitive=\"False\"\n                                                       IsSecondDescriptorCaseSensitive=\"False\" />\n                </DataTemplate>\n            </telerik:DataGridTextColumn.FilterControlTemplate>\n        </telerik:DataGridTextColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Styling ProgressBar Segments in .NET MAUI\nDESCRIPTION: Shows how to style segment separators with custom fill and thickness properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='progressbar-styling-separator-segments'/>\n```\n\n----------------------------------------\n\nTITLE: Declaring Area Series in XAML\nDESCRIPTION: This is a placeholder for the XAML code snippet that declares a Cartesian Chart with an Area Series. It demonstrates how to define the chart and series within the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/area-series.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-area-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining RadNavigationView with Expanded DisplayMode in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadNavigationView with the DisplayMode set to Expanded. In this mode, the navigation pane stays open alongside the content. The provided namespace must be added to the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/display-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-displaymide-expanded'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring CategoricalAxis Vertical Location in XAML\nDESCRIPTION: This example demonstrates setting the vertical location of a CategoricalAxis to 'Top', which aligns the axis at the top of the chart area.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:CategoricalAxis VerticalLocation=\"Top\"/>\n```\n\n----------------------------------------\n\nTITLE: Categorical Data Model\nDESCRIPTION: This is a placeholder for the categorical data model code snippet.  It is used to represent the data that will be visualized in the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/area-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='categorical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Full ExpanderHeader with Border and Indicator\nDESCRIPTION: Shows a comprehensive example of configuring an ExpanderHeader with custom indicator placement, styling, and border properties\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/header.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- ExpanderHeader Full Configuration Example -->\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespaces\nDESCRIPTION: Demonstrates how to add the required Telerik namespaces in your XAML file to use the RadCalendar control. Ensure that the xmlns directive is correctly added to include the Telerik library.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom DataForm Header Template in XAML\nDESCRIPTION: Demonstrates how to define a custom HeaderTemplate for a DataForm group using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-grouping-configuration-header-template'/>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ListView Namespace Configuration\nDESCRIPTION: Updated namespace declaration for Telerik UI ListView in .NET MAUI project, using a simplified telerik namespace\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining PlaceholderTemplate in XAML\nDESCRIPTION: This snippet shows how to define the PlaceholderTemplate for the ListPicker, which is displayed when no item is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"placeholderTemplate\">\n    <Label Text=\"Click to select an item\" />\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Adding CheckBox Control in XAML\nDESCRIPTION: Demonstrates how to add a RadCheckBox control to a XAML page in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox x:Name=\"checkbox\" />\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView Data Model\nDESCRIPTION: Business object definition for the CollectionView items that will support drag and drop functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Accept Button Style in XAML\nDESCRIPTION: Style definition for the Accept button in the popup, setting background color, text, and text color\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Button\" x:Key=\"acceptButtonStyle\">\n    <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n    <Setter Property=\"Text\" Value=\"Accept\"/>\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom StyleSelector Class in C#\nDESCRIPTION: Creates a LocationStyleSelector class that inherits from IStyleSelector and selects styles based on the location type (Country or City).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class LocationStyleSelector : IStyleSelector\n{\n    public Style CountryStyle { get; set; }\n\n    public Style CityStyle { get; set; }\n\n    public Style SelectStyle(object item, BindableObject container)\n    {\n        var treeViewItem = item as TreeViewDataItem;\n        if (treeViewItem == null)\n        {\n            return null;\n        }\n\n        var location = treeViewItem.Content;\n\n        if (location is Country)\n        {\n            return this.CountryStyle;\n        }\n        else if (location is City)\n        {\n            return this.CityStyle;\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Time Selection with Button Click - .NET MAUI\nDESCRIPTION: This C# snippet provides the method to clear the selected time when a button is clicked. It calls the ClearSelection method of the RadTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e) { this.timePicker.ClearSelection(); }\n```\n\n----------------------------------------\n\nTITLE: Configuring DataForm with VerticalStackLayout in XAML\nDESCRIPTION: XAML definition showing how to implement a DataForm with vertical stack layout configuration\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/layouts/verticalstack.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='dataform-layouts-stack'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Header Style in XAML\nDESCRIPTION: This snippet shows how to define the style for the header label displayed in the spinner of the DatePicker, ensuring a consistent look with the overall theme of the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-spinner-header-style' />\n```\n\n----------------------------------------\n\nTITLE: Sample Data Configuration\nDESCRIPTION: Data setup for demonstrating DataPager and DataGrid integration, providing a sample data source for pagination\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/datagrid.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-data' />\n```\n\n----------------------------------------\n\nTITLE: Comparing Xamarin.Forms and .NET MAUI ComboBox Namespaces\nDESCRIPTION: This code snippet shows the differences in namespaces and control declarations between Xamarin.Forms and .NET MAUI ComboBox controls. It includes both C# and XAML namespace declarations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Xamarin.Forms\nusing Telerik.XamarinForms.Input;\n\n// .NET MAUI\nusing Telerik.Maui.Controls;\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Xamarin.Forms -->\nxmlns:telerikInput=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n\n<!-- .NET MAUI -->\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Selecting First Marketing Employee using SelectItem Method\nDESCRIPTION: Shows how to programmatically select the first employee from the Marketing department using the SelectItem method for row selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar firstMarketingItem = ((ObservableCollection<Person>)this.dataGrid.ItemsSource).First(p => p.Department == \"Marketing\");\nthis.dataGrid.SelectItem(firstMarketingItem);\n```\n\n----------------------------------------\n\nTITLE: Basic Toolbar Styling Properties in .NET MAUI\nDESCRIPTION: Core styling properties for the Toolbar control including background color, border properties, and corner radius settings. These properties allow customization of the toolbar's appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBackgroundColor (Microsoft.Maui.Graphics.Color)\nBorderColor (Microsoft.Maui.Graphics.Color)\nBorderThickness (Microsoft.Maui.Thickness)\nCornerRadius (Microsoft.Maui.Thickness)\nStyle (Microsoft.Maui.Controls.Style)\n```\n\n----------------------------------------\n\nTITLE: Initializing ViewModel with ReturnCommand in C#\nDESCRIPTION: Shows how to create a ViewModel with a Command for handling the Entry's return key press in an MVVM pattern\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic MainPage()\n{\n  InitializeComponent();\n\n  this.BindingContext = new ViewModel();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        EntryReturnCommand = new Command(EntryReturn);\n    }\n\n    public Command EntryReturnCommand { get; set; }\n\n    private void EntryReturn()\n    {\n    // implement your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Class for Group Header Style - C#\nDESCRIPTION: This snippet illustrates how to add a ViewModel class that will bind the City data to the ListView, facilitating the display of group headers. The ViewModel is essential for managing the data context of the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/group-header.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CityViewModel {\n    public ObservableCollection<City> Cities { get; set; }\n    public CityViewModel() {\n        Cities = new ObservableCollection<City>() {\n            new City { Name = \"New York\", Country = \"USA\" },\n            new City { Name = \"London\", Country = \"UK\" }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Data Collection\nDESCRIPTION: Implements a ViewModel class that initializes and manages a collection of Experience objects using ObservableCollection\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Experiences = new ObservableCollection<Experience>()\n        {\n            new Experience() { Title = \"JS Developer\", Company = \"@ Progress Software\" },\n            new Experience() { Title = \"Technical Support Engineer\", Company = \"@ Progress Software\" },\n            new Experience() { Title = \"Junior Technical Support Engineer\", Company = \"@ Progress Software\" },\n        };\n    }\n\n    public ObservableCollection<Experience> Experiences { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Day Name Label Style in .NET MAUI\nDESCRIPTION: This snippet shows how to define a style for the day names within the .NET MAUI Calendar. This style is applied to the labels displaying the day names.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/day-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-daynamelabel-style'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Range in Telerik DateTimePicker\nDESCRIPTION: Demonstrates how to set minimum and maximum dates for a DateTimePicker, limiting the selectable date range from January 1st to December 31st, 2020. Includes a custom display string format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/date-range.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDateTimePicker MinimumDate=\"2020,1,1\"\n                            MaximumDate=\"2020,12,31\"\n                            DisplayStringFormat=\"yyy-ddd-MMM\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining City Model in C#\nDESCRIPTION: C# class defining the City model used in the TreeView implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-city-model'/>\n```\n\n----------------------------------------\n\nTITLE: Year View Display Mode in .NET MAUI Calendar\nDESCRIPTION: Demonstrates the configuration for setting the .NET MAUI Calendar to display a year view using Telerik's MAUI controls. The key parameter is the year mode selection, aiming to show each month of a year in the calendar UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/display-modes.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-displaymode-year'/>\n```\n\n----------------------------------------\n\nTITLE: Styling SlideView Indicator for Tap Navigation in .NET MAUI\nDESCRIPTION: This XAML snippet shows how to create a style for the SlideViewIndicator that enables navigation between items when the indicator is tapped.  The NavigateOnItemTap property is set to True, allowing users on mobile devices to switch between SlideView items by tapping the indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/enable-indicator-click-slideview-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style x:Key=\\\"IndicatorStyle\\\" TargetType=\\\"telerik:SlideViewIndicator\\\">\n            <Setter Property=\\\"NavigateOnItemTap\\\" Value=\\\"True\\\" />\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Business Objects in C#\nDESCRIPTION: Defines a 'Country' class with properties 'Name' and 'Population'. This class is used as a business object for populating DataGrid. The constructor sets the initial property values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\npublic Country(string name, double population)\n{\n    this.Name = name;\n    this.Population = population;\n}\n\npublic string Name { get; set; }\npublic double Population { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NumericInput Control with Custom Button Styles\nDESCRIPTION: XAML code showing how to define a NumericInput control with custom DecreaseButtonStyle and IncreaseButtonStyle properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numeric-hide-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n\t<telerik:RadNumericInput DecreaseButtonStyle=\"{StaticResource DecreaseButtonStyle}\"\n\t\t\t\t\t\t     IncreaseButtonStyle=\"{StaticResource IncreaseButtonStyle}\" />\n\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Mixing XAML and Model Grouping Definitions\nDESCRIPTION: Illustrates a combined approach where groups are defined in XAML and the GroupName property is set, while the model uses GroupName attributes for properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\" AutoGenerateItems=\"False\" Source=\"{Binding Source}\">\n    <telerik:RadDataForm.Items>\n        <telerik:DataFormGroup GroupName=\"Group 1\" />\n        <telerik:DataFormGroup GroupName=\"Group 2\" />\n    </telerik:RadDataForm.Items>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with SortDescriptors Binding in XAML for .NET MAUI\nDESCRIPTION: This XAML snippet shows how to set up a CollectionView with SortDescriptors and ItemsSource bound to ViewModel properties. It includes switches for toggling sort options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/bind-sortdescriptors-collectionview-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Grid RowDefinitions=\"auto,*\">\n    <VerticalStackLayout>\n        <Switch IsToggled=\"{Binding IsSortByName}\" />\n        <Switch IsToggled=\"{Binding IsSortByAge}\" />\n    </VerticalStackLayout>\n    <telerik:RadCollectionView x:Name=\"listView\"\n                             Grid.Row=\"1\"\n                             SortDescriptors=\"{Binding SortDescriptors, Mode=OneWayToSource}\"\n                             ItemsSource=\"{Binding Items}\">\n        <telerik:RadCollectionView.ItemTemplate>\n            <DataTemplate>\n                <HorizontalStackLayout Spacing=\"10\" >\n                    <Label Text=\"{Binding Name}\"/>\n                    <Label Text=\"{Binding Age}\"/>\n                </HorizontalStackLayout>\n            </DataTemplate>\n        </telerik:RadCollectionView.ItemTemplate>\n    </telerik:RadCollectionView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Integrating DataPager with CollectionView in XAML\nDESCRIPTION: Example showing how to define DataPager and CollectionView controls in XAML to implement pagination in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/paging.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='radcollectionview-datapager' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Font Icon to Label in XAML\nDESCRIPTION: This snippet demonstrates how to add a Telerik font icon to a Label control using XAML. It sets the icon code to the Text property and specifies the FontFamily.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/controls-icons.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"&#xe800;\" FontFamily=\"TelerikControlsIcons\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Path Geometry Segment Configuration\nDESCRIPTION: Shows the segment configuration for a custom path geometry, detailing how to set up path figures and segments programmatically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-structure.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='path-geometry-customline-segment' />\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox PlaceholderColor in XAML\nDESCRIPTION: Shows how to set the PlaceholderColor property of the ComboBox control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox PlaceholderColor=\"LightGray\" />\n```\n\n----------------------------------------\n\nTITLE: Binding NumericInput to ViewModel Commands - C#\nDESCRIPTION: This snippet shows how to define a NumericInput control and bind it to the IncreaseCommand and DecreaseCommand from the ViewModel. It is necessary to ensure the DataContext is set properly to the ViewModel containing these commands. The expected input is the context in which the NumericInput is being used, while the output is the adjusted behavior of the NumericInput based on the commands.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<NumericInput\n    IncreaseCommand=\"{Binding IncreaseCommand}\"\n    DecreaseCommand=\"{Binding DecreaseCommand}\"\n    Minimum=\"0\"\n    Maximum=\"100\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Applying ShapeLabelStyle for Map Labels in XAML\nDESCRIPTION: This snippet demonstrates how to utilize the ShapeLabelStyle property of the MapShapefileLayer to customize label appearance such as TextColor, FontSize, FontFamily, and FontAttributes. Ensure to include appropriate namespaces for the Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/labelstyles.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<MapShapefileLayer.ShapeLabelStyle>\n    <MapShapeLabelStyle\n        TextColor=\"YourColor\"\n        FontSize=\"YourSize\"\n        FontFamily=\"YourFontFamily\"\n        FontAttributes=\"YourFontAttributes\" />\n</MapShapefileLayer.ShapeLabelStyle>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for CartesianPlotBandAnnotation - C#\nDESCRIPTION: This code snippet shows another ViewModel class tailored for the CartesianPlotBandAnnotation, calculating start and end threshold values based on the data set average. This will be used to define the plot band's range on the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n    public double StartThreshold { get; private set; }\n    public double EndThreshold { get; private set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n        var threshold = this.Data.Average(data => data.Value);\n        this.StartThreshold = threshold * 0.9;\n        this.EndThreshold = threshold * 1.1;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 66 },\n            new CategoricalData { Category = \"Perfecto\", Value = 19 },\n            new CategoricalData { Category = \"NearBy\", Value = 92 },\n            new CategoricalData { Category = \"Family\", Value = 23 },\n            new CategoricalData { Category = \"Fresh\", Value = 56 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: This snippet shows how to include the Telerik namespace in XAML, which is necessary for using Telerik components in .NET MAUI applications. It is required for the proper functionality of the Telerik components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/command.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel - .NET MAUI\nDESCRIPTION: This snippet outlines the structure for defining the ViewModel relevant to the DataPager, which is essential for binding data and managing the paging functionality within the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/page-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ViewModel>\n    <!-- ViewModel properties and methods go here -->\n</ViewModel>\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Style for DataGridDistinctValuesFilterView in XAML\nDESCRIPTION: This snippet shows how to define an implicit style for the DataGridDistinctValuesFilterView type, setting the background color and control template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/styling-filtering-ui-distinct-values-datagrid-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:DataGridDistinctValuesFilterView\">\n    <Setter Property=\"BackgroundColor\" Value=\"Red\"/>\n    <Setter Property=\"ControlTemplate\" Value=\"{StaticResource DataGridDistinctValuesFilterView_ControlTemplate}\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Controlling Last Child Stretching in DockLayout\nDESCRIPTION: This snippet demonstrates how to prevent the last child element from stretching over the remaining space by setting the StretchLastChild property to False.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/docking.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDockLayout x:Name=\"dockLayout\" StretchLastChild=\"False\">\n    <Label Text=\"Left\" telerik:RadDockLayout.Dock=\"Left\" WidthRequest=\"60\" BackgroundColor=\"LightPink\" />\n    <Label Text=\"Top\" telerik:RadDockLayout.Dock=\"Top\" HeightRequest=\"60\" BackgroundColor=\"LightGreen\" />\n    <Label Text=\"Right\" telerik:RadDockLayout.Dock=\"Right\" WidthRequest=\"60\" BackgroundColor=\"LightBlue\" />\n    <Label Text=\"Bottom\" telerik:RadDockLayout.Dock=\"Bottom\" BackgroundColor=\"LightYellow\" />\n</telerik:RadDockLayout>\n```\n\n----------------------------------------\n\nTITLE: Defining DataForm ViewModel in .NET MAUI\nDESCRIPTION: Demonstrates the implementation of a ViewModel class (DataTypeEditorsModel) that serves as the BindingContext for the DataForm control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/dataform-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-datatype-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clicked Event Handler in C#\nDESCRIPTION: C# event handler for the Clicked event of the ToggleButton, showing how to respond when a user clicks or taps on the button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadToggleButton_Clicked(object sender, EventArgs e)\n{\n    var button = (RadToggleButton)sender;\n    this.clickCountLabel.Text = $\"Clicked: {++this.clickCount} times\";\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration for XAML - .NET MAUI\nDESCRIPTION: This snippet shows the XML namespace declaration required for using Telerik controls in XAML syntax.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric Keyboard Type in .NET MAUI Entry\nDESCRIPTION: Shows how to set a specific keyboard type for a Telerik Entry control by using the Keyboard property, in this case setting it to display a numeric keyboard.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"entry\"\n\t\t\t\t  Keyboard=\"Numeric\"\n\t\t\t\t  Placeholder=\"Enter Number\" />\n```\n\n----------------------------------------\n\nTITLE: Xamarin.Forms PDF Viewer XAML Namespace Declaration\nDESCRIPTION: Shows how to reference the Telerik PDF Viewer control in Xamarin.Forms XAML files using the xmlns declaration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerikPdfViewer=\"clr-namespace:Telerik.XamarinForms.PdfViewer;assembly=Telerik.XamarinForms.PdfViewer\"\n```\n\n----------------------------------------\n\nTITLE: Defining Popup Footer Style\nDESCRIPTION: Applies custom styling to the footer section of the DatePicker popup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings FooterStyle=\"{StaticResource FooterStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyDownCommand Class in C# for MAUI\nDESCRIPTION: This snippet defines the KeyDownCommand class which overrides the default key handling behavior in the RadDataGrid. It sets the CanExecute method to return false, effectively disabling keyboard inputs for navigation and selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/disable-keyboard-functionality-datagrid-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class KeyDownCommand : DataGridCommand\n{\n    public KeyDownCommand()\n    {\n        Id = DataGridCommandId.KeyDown;\n    }\n    public override bool CanExecute(object parameter)\n    {\n        // Use 'return false;' if you want to stop executing the command.\n        // When using 'return true;' write your custom logic inside the 'Execute' method.\n        return false;\n    }\n    public override void Execute(object parameter)\n    {\n        // Uncomment the line below in order to execute the default command and enable the keyboard navigation support. Alternatively, write your custom logic implementation.\n        //this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.KeyDown, parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Localization Keys and Default Values - Markdown\nDESCRIPTION: This snippet includes a Markdown table that enumerates the localization keys used in the Telerik UI for .NET MAUI PDF Viewer along with their respective default values. It is crucial for developers implementing localization support as it provides a quick reference for the keys available.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `PdfViewer_Searching`  | `Searching` |\n| `PdfViewer_SearchPlaceholder` | `Find in document` |\n| `PdfViewer_SearchedTextNotFound`  | `Not found` |\n| `PdfViewer_SearchResult_Of` | `of` |\n| `PdfViewer_SourceExceptionMessage` | `An error occurred while loading the document.` |\n| `PdfViewer_CopySelection` | `Copy` |\n```\n\n----------------------------------------\n\nTITLE: ComboBox Commands Implementation in C#\nDESCRIPTION: Shows the C# code implementation for ComboBox commands including command handlers and custom logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-commands-csharp'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entry Style with Placeholder in XAML\nDESCRIPTION: This snippet defines a custom Style for the RadEntry control, which is used by the NumericInput. It sets the Placeholder property to 'hello'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numeric-add-placeholder.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadEntry\" x:Key=\"entry\">\n    <Setter Property=\"Placeholder\" Value=\"hello\"/>\n </Style>\n```\n\n----------------------------------------\n\nTITLE: Setting Items Source for ListView in .NET MAUI\nDESCRIPTION: This snippet shows how to bind a data source to the ListView. The data source determines the items displayed in the ListView.  The actual data source would be defined in the code-behind (C#) or in a ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/items-reorder.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-gestures-reorderitems-code'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Style for Navigation ComboBox in Page Resources\nDESCRIPTION: This snippet provides an example of how to set styles for the NavigationComboStyle targeting the RadComboBox in XAML, customizing border properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/navigationview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"NavigationComboStyle\" TargetType=\"telerik:RadComboBox\">\n    <Setter Property=\"BorderColor\" Value=\"#00897B\" />\n    <Setter Property=\"BorderThickness\" Value=\"2\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Styling Group ToolbarItem in C#\nDESCRIPTION: Demonstrates the properties that can be set through the Style property of GroupToolbarItem.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/group.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nItemSpacing (double)\nItemsSource (IList)\n```\n\n----------------------------------------\n\nTITLE: Hiding Ticks in .NET MAUI Gauge Axis\nDESCRIPTION: Removes the axis ticks by setting the TickThickness property to 0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis Maximum=\"250\"\n\t\t\t\t\t   Minimum=\"0\"\n\t\t\t\t\t   Step=\"25\" \n\t\t\t\t\t   TickThickness=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: CollectionView ViewModel Reference\nDESCRIPTION: Reference to a code snippet showing the ViewModel implementation for CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style.md#2025-04-21_snippet_2\n\nLANGUAGE: unknown\nCODE:\n```\n<snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Setting Popup Picker Mode in Telerik DateTimePicker for .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to set the PickerMode property to Popup for a Telerik RadDateTimePicker control. The Popup mode is the default value for mobile platforms (Android and iOS).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\" \n\t\t\t\t\t\t\t\tPickerMode=\"Popup\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Path Geometry in XAML\nDESCRIPTION: Demonstrates creating a more complex RadPath with custom geometry, showing how to define path figures and segments in Telerik MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-structure.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='path-geometry-customline-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Clicked Event with ToggleButton in XAML\nDESCRIPTION: XAML markup for a ToggleButton that demonstrates how to wire up the Clicked event, which is triggered when the user clicks or taps the button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButtonClicked\" \n                           Grid.Row=\"0\"\n                           Margin=\"0, 10, 0, 10\"\n                           HeightRequest=\"50\"\n                           BackgroundColor=\"#2E8B57\"\n                           BorderColor=\"#2E8B57\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Clicked=\"RadToggleButton_Clicked\"\n                           Text=\"Click me\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Types in .NET MAUI BadgeView\nDESCRIPTION: This example demonstrates how to define a BadgeView control with different badge types in .NET MAUI. It shows how to set up multiple instances with various predefined badge types like Default, Available, Away, etc.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/predefined-badges.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:BadgeView Text=\"4\" BadgeType=\"Default\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Available\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Away\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"DoNotDisturb\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Offline\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"OutOfOffice\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Dot\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Add\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Remove\" />\n<telerik:BadgeView Text=\"4\" BadgeType=\"Rejected\" />\n```\n\n----------------------------------------\n\nTITLE: Subscribing to RadEntry Loaded Event in C#\nDESCRIPTION: Demonstrates how to subscribe to the Loaded event of a RadEntry control to begin the process of accessing its handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/how-to-access-radentry-handler-telerik-ui-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmyEntry.Loaded += OnEntryLoaded;\n```\n\n----------------------------------------\n\nTITLE: Styling ButtonToolbarItem in XAML\nDESCRIPTION: This snippet shows how to apply a style to a ButtonToolbarItem. It references a Style with the key 'imageeditor-styling-button-toolbar-style', which can be used to customize the appearance and behavior of the button toolbar item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/button.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-styling-button-toolbar-style'/>\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Document Source\nDESCRIPTION: This snippet shows how to set the PDF document source for the PDF Viewer control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='pdfviewer-toolbar'/>\n```\n\n----------------------------------------\n\nTITLE: Setting ItemStyle for TreeViewDescriptor in XAML\nDESCRIPTION: Demonstrates how to apply custom styling to specific TreeView items using the ItemStyle property at the TreeViewDescriptor level.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style TargetType=\"telerik:TreeViewItemView\">\n    <telerik:Style.Setters>\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"BorderBrush\" Value=\"LightGray\" />\n        <Setter Property=\"BackgroundColor\" Value=\"Lavender\" />\n        <Setter Property=\"CheckBoxStyle\" Value=\"{StaticResource CheckBoxStyle}\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Template DataTemplate Definition\nDESCRIPTION: Shows how to create a custom DataTemplate for slider ticks with specific styling or content\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/ticks.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n\\<DataTemplate x:Key=\"CustomTickTemplate\">\n    \\<Ellipse Width=\"10\" Height=\"10\" \n             Fill=\"Blue\" />\n\\</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Implementing RadExpander with Custom Indicator Font Settings in .NET MAUI\nDESCRIPTION: This XAML code demonstrates a complete implementation of RadExpander with custom indicator settings, including font size, color, and animation properties. The implicit style defined earlier will apply to the indicator.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maintain-indicator-font-size-radexpander-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadExpander x:Name=\"expander\"\n                     BorderColor=\"LightBlue\"\n                     BorderThickness=\"2\">\n    <telerik:RadExpander.Header>\n        <telerik:ExpanderHeader IndicatorText=\"&#x203A;\"\n                                IndicatorColor=\"Blue\"\n                                IndicatorFontFamily=\"Arial\"\n                                IndicatorFontSize=\"16\"\n                                IndicatorLocation=\"End\"\n                                IndicatorAnimationDuration=\"1000\"\n                                BorderColor=\"LightBlue\"\n                                BorderThickness=\"2\">\n            <Label Text=\"More Options\"\n                   VerticalOptions=\"Center\"\n                   Margin=\"10\" />\n        </telerik:ExpanderHeader>\n    </telerik:RadExpander.Header>\n    <telerik:RadExpander.Content>\n        <VerticalStackLayout Margin=\"10, 20, 10, 20\">\n            <Label Text=\"RadExpander for .NET MAUI is a flexible content control that helps you save screen space.\" HeightRequest=\"50\" />\n        </VerticalStackLayout>\n    </telerik:RadExpander.Content>\n</telerik:RadExpander>\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButton Controls with Different Styling in XAML\nDESCRIPTION: Sample code showing how to define ToggleButton controls with various styling options in XAML, including explicitly styled buttons and implicitly styled buttons.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"explicitStyleToggleButton\" \n                              Style=\"{StaticResource ExplicitToggleButtonStyle}\"\n                              Content=\"Explicit Style\"\n                              VerticalOptions=\"Center\"\n                              HorizontalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView Namespace in XAML for .NET MAUI\nDESCRIPTION: Shows how to define the namespace for the TreeView control in .NET MAUI XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Suggestion View Background Color to Transparent in AutoComplete for .NET MAUI\nDESCRIPTION: This snippet sets the SuggestionViewBackgroundColor to a transparent color, allowing the Suggestion View to be hidden visually, while still being technically present in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-no-result-message-autocomplete-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\" SuggestionViewBackgroundColor=\"Transparent\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Linear Layout in CollectionView XAML\nDESCRIPTION: Shows how to apply a horizontal orientation to the RadCollectionView using linear layout. This snippet is referenced but not provided in the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/linear-layout.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n// Snippet content not provided in the original text\n// <snippet id='collectionview-linear-layout' />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for QRCode Data Binding\nDESCRIPTION: This C# snippet defines the MainPageViewModel class, which implements the INotifyPropertyChanged interface for dynamic updates of the SelectedCity property, allowing the QRCode to reflect changes in the view model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/data-binding-qrcode-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MainPageViewModel : Telerik.Maui.Controls.NotifyPropertyChangedBase\n{\n    private string selectedCity;\n\n    public ObservableCollection<string> Cities { get; set; }\n\n    public string SelectedCity\n    {\n        get => selectedCity;\n        set => UpdateValue(ref selectedCity, value);\n    }\n\n    public MainPageViewModel()\n    {\n        Cities = new ObservableCollection<string>\n        {\n            \"Madrid\", \"Los Angeles\", \"Paris\", \"Beijing\",\n            \"Singapore\", \"New Delhi\", \"Bangkok\", \"Berlin\"\n        };\n\n        SelectedCity = Cities.FirstOrDefault();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Namespace in .NET MAUI XAML\nDESCRIPTION: This XML snippet demonstrates how to add the Telerik namespace to your XAML file. This namespace is essential for using Telerik UI components, such as the RadSlideView, within your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/enable-indicator-click-slideview-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding a GridSplitter control in XAML\nDESCRIPTION: XAML snippet showing how to define a GridSplitter control on a page. The specific implementation details are not shown in the provided content, but is referenced as a snippet with ID 'gridsplitter-getting-started'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='gridsplitter-getting-started' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in .NET MAUI Application - C#\nDESCRIPTION: This C# snippet shows how to register the Telerik UI components in a .NET MAUI application by using the UseTelerik extension method in the CreateMauiApp function of MauiProgram.cs. It's necessary to include Telerik UI components in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace References in .NET MAUI Page for Telerik Components\nDESCRIPTION: This code snippet shows how to include the necessary namespace references in a .NET MAUI page to use Telerik UI components, particularly for PDF viewing in a popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-display-pdf-documents-popup-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"YourNamespace.YourPage\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\">\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderTemplate in XAML\nDESCRIPTION: This snippet shows how to define the HeaderTemplate for the ListPicker's popup selector, which appears at the top of the selection dialog.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"headerTemplate\">\n    <Label Text=\"Pick an item from the list:\" Margin=\"10,0\" FontSize=\"13\" />\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to your XAML file. This is necessary to use Telerik UI for MAUI controls. The namespace declaration allows you to reference Telerik controls in your XAML markup using the `telerik` prefix.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/sizing-modes.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for CollectionView\nDESCRIPTION: This C# code snippet demonstrates the implementation of a ViewModel class for the CollectionView, including the creation of sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/events.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private ObservableCollection<DataModel> items;\n\n    public ObservableCollection<DataModel> Items\n    {\n        get { return this.items; }\n        set { this.UpdateValue(ref this.items, value); }\n    }\n\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<DataModel>();\n        for (int i = 0; i < 10; i++)\n        {\n            this.Items.Add(new DataModel() { Name = \"Item \" + i });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Temporal Data Model Definition\nDESCRIPTION: Defines a simple data model with a DateTime property (Date) and a numerical value (Value).  This model is used as the data source for the chart, where the DateTime property is used for the horizontal axis and the Value property for the vertical axis.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/datetime-continuous-axis.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='temporal-data-model' />\n```\n\n----------------------------------------\n\nTITLE: ImageEditor Mobile Toolbar Items Usage - .NET MAUI\nDESCRIPTION: Shows the toolbar items available for mobile platforms (Android and iOS) in the Telerik UI for .NET MAUI ImageEditor, including transformations, filters, undo and redo functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/items.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorTransformationsToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorFiltersToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorUndoToolbarItem\n```\n\nLANGUAGE: C#\nCODE:\n```\nImageEditorRedoToolbarItem\n```\n\n----------------------------------------\n\nTITLE: Changing Grid Size in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to adjust the size of a multi-path element dynamically when the grid size changes. It sets the width and height of the multipath and another path based on the minimum of the grid's width and half of its height. This ensures the paths maintain a consistent size ratio as the grid changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/multipath.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.root.SizeChanged += Root_SizeChanged;\n    }\n\n    private void Root_SizeChanged(object sender, EventArgs e)\n    {\n        double size = Math.Min(this.root.Width, this.root.Height / 2);\n        this.multiPath.WidthRequest = size;\n        this.multiPath.HeightRequest = size;\n        this.path2.WidthRequest = size;\n        this.path2.HeightRequest = size;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TemplatedButton Command XAML Definition\nDESCRIPTION: This XAML snippet defines a TemplatedButton and binds its Command and CommandParameter properties to properties in the ViewModel. When the button is clicked, the command will be executed with the specified parameter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/command.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedbutton-command-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for .NET MAUI CollectionView\nDESCRIPTION: This C# code defines a ViewModel class that provides a list of DataModel objects to be used as the BindingContext for the CollectionView. It sets up the data source for the collection items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/header-footer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Xamarin Accordion XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for the Telerik Accordion control in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikPrimitives=\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\"\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for AIPrompt Suggestions\nDESCRIPTION: C# code for the ViewModel class that provides data for the AIPrompt suggestions. This ViewModel likely contains properties for the suggestions collection that will be bound to the AIPrompt control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/suggestions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='aiprompt-suggestions-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Custom ClearTextCommand Usage in XAML\nDESCRIPTION: XAML implementation showing how to apply the custom ClearTextCommand to AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/commands.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAutoComplete ItemsSource=\"{Binding Source}\"\n                         TextSearchPath=\"Name\"\n                         DisplayMode=\"Tokens\">\n    <telerik:RadAutoComplete.ClearTextCommand>\n        <local:CustomAutoCompleClearTextCommand />\n    </telerik:RadAutoComplete.ClearTextCommand>\n</telerik:RadAutoComplete>\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Style\nDESCRIPTION: Here, you will see how to define the footer style of the DateTimePicker popup to customize its appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker FooterStyle=\"{StaticResource FooterStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Entry Control with Visual States\nDESCRIPTION: XAML style that applies different visual appearances to the Entry control based on its state (normal, focused, invalid, etc.). This style targets the main Entry control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/visual-states.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='entry-styling' />\n```\n\n----------------------------------------\n\nTITLE: Defining ListPicker with Looping Functionality in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define a ListPicker in a .NET MAUI application with looping functionality enabled. The property `IsLooping` is set to `true` to allow the list to loop once the end is reached. This setup is dependent on the Telerik UI for .NET MAUI library.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/looping.md#2025-04-21_snippet_0\n\nLANGUAGE: Markup\nCODE:\n```\n<!-- Assume this is a XAML code snippet defining a ListPicker with IsLooping enabled -->\n```\n\n----------------------------------------\n\nTITLE: Applying RadScheduler in ContentPage XML\nDESCRIPTION: This code initializes a RadScheduler on a ContentPage, setting its CurrentDate and ViewDefinitions. The scheduler uses the custom styles defined in the DayStyleSelector, ensuring the drop-down calendar adheres to the specified appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-calendar-appearance-scheduler-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadScheduler AutomationId=\"scheduler\" CurrentDate=\"10/18/2023\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <!-- View definitions for the scheduler -->\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Defining Visual States Resources in XAML\nDESCRIPTION: This snippet demonstrates how to define the visual states for the ToggleButton in the page's resources. These states will be referenced by the ToggleButton defined in the previous snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/visual-states.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='togglebutton-visual-states-resources' />\n```\n\n----------------------------------------\n\nTITLE: Using RadListView in Grid Layout\nDESCRIPTION: This snippet demonstrates how to place RadListView in a Grid with a star-sized RowDefinition for proper expansion. This is important for ensuring that the pull-to-refresh functionality can operate without layout constraints.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/pull-to-refresh.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\\n    <Grid.RowDefinitions>\\n        <RowDefinition Height=\"*\" />\\n        <RowDefinition Height=\"Auto\" />\\n    </Grid.RowDefinitions>\\n\\n    <!-- This RadListView is in the star-sized row and will expand properly -->\\n    <telerikDataControls:RadListView x:Name=\"EventsList\" />\\n\\n    <Label Text=\"I'm in auto-sized row\" Grid.Row=\"1\" />\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel and Data Model for .NET MAUI Chart\nDESCRIPTION: This C# code defines the CategoricalData model and CategoricalDataViewModel. The ViewModel creates a sample ObservableCollection of data for the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/rounded-corners-barseries-dotnet-maui-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n    public double Value { get; set; }\n}\npublic class CategoricalDataViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public CategoricalDataViewModel()\n    {\n        this.Data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"A\", Value = 101 },\n            new CategoricalData { Category = \"B\", Value = 45 },\n            new CategoricalData { Category = \"C\", Value = 77 },\n            new CategoricalData { Category = \"D\", Value = 15 },\n            new CategoricalData { Category = \"E\", Value = 56 },\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimePicker with Toggle and Clear Commands\nDESCRIPTION: This snippet demonstrates how to bind the ToggleCommand and ClearCommand to buttons in a StackLayout for the TimePicker, allowing users to show/hide the popup and clear the selected time.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n\t <Button Text=\"Toggle Popup\" Command=\"{Binding Source={x:Reference timePicker}, Path=ToggleCommand}\"/>\n     <Button Text=\"Clear Selected Time\" Command=\"{Binding Source={x:Reference timePicker}, Path=ClearCommand}\"/>\n\t<telerik:RadTimePicker x:Name=\"timePicker\" />\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Pie Chart Legend Title Binding\nDESCRIPTION: Demonstrates how to use LegendTitleBinding for Pie Series to customize legend item titles based on data item properties\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/legend.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\nchart-features-piechart-legendtitlebinding-xaml\n```\n\n----------------------------------------\n\nTITLE: Creating Data Model for CollectionView Items in C#\nDESCRIPTION: A simple C# data model class for items displayed in the CollectionView. The Product class includes properties for Name, Category, and InStock that are used for displaying and grouping items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-grouped-items.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Product\n{\n    public string Name { get; set; }\n    public string Category { get; set; }\n    public bool InStock { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Image using ControlTemplate in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to customize the image directly within the ControlTemplate of the ImageCardView in .NET MAUI. This allows for more granular control over the appearance of the image within each individual card. The Aspect, HeightRequest, WidthRequest, and Source properties are set on the Image control within the ControlTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-image-style-imagecardview-dotnet-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:ImageCardView>\n        <telerik:ImageCardView.ControlTemplate>\n            <ControlTemplate>\n                <VerticalStackLayout>\n                    <Label Text=\"hello image one\"/>\n                    <Image Aspect=\"AspectFill\"\n                           HeightRequest=\"400\"\n                           WidthRequest=\"200\" \n                           Source=\"dotnet_bot.png\"/>\n                </VerticalStackLayout>\n            </ControlTemplate>\n        </telerik:ImageCardView.ControlTemplate>\n    </telerik:ImageCardView>\n    <telerik:ImageCardView Image=\"emoji_wink.png\"/>\n    <telerik:ImageCardView Image=\"emoji_smile2.png\"/>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Defining Common HeaderLabelStyle in XAML for .NET MAUI DataForm\nDESCRIPTION: This snippet demonstrates how to define a common HeaderLabelStyle for all editors in a DataForm. It sets the text color to blue and the font size to 18.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/header-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"CommonHeaderStyle\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"Blue\" />\n    <Setter Property=\"FontSize\" Value=\"18\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Using Font Icon in XAML for .NET MAUI\nDESCRIPTION: This XAML snippet shows how to use a Telerik font icon in a .NET MAUI application. It creates a Label control with a specific Unicode character (E80A) from the TelerikFontExamples font family, setting various styling properties like font size, attributes, and color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/using-font-icons-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Label Text=\"&#xE80A;\" FontFamily=\"TelerikFontExamples\" FontSize=\"Micro\" FontAttributes=\"Bold\" TextColor=\"Black\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace\nDESCRIPTION: Shows how to add the telerik namespace in the XAML declaration, which is necessary for utilizing Telerik components within the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timeonly.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI PDF Viewer XAML Namespace Declaration\nDESCRIPTION: Shows how to reference the Telerik PDF Viewer control in .NET MAUI XAML files using the xmlns declaration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/migrate-from-xamarin.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting DataGrid ViewModel\nDESCRIPTION: Code showing how to set the ViewModel as the binding context for the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/group-header-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-propertygroupdescriptor-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with City Collection for AutoComplete in C#\nDESCRIPTION: Defines a ViewModel class that contains a collection of City objects to be used as the data source for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/token-template.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<City> Cities { get; set; }\n\n    public ViewModel()\n    {\n        this.Cities = new ObservableCollection<City>\n        {\n            new City() { Name = \"Tokyo\", Country = \"Japan\" },\n            new City() { Name = \"New York\", Country = \"USA\" },\n            new City() { Name = \"London\", Country = \"England\" },\n            new City() { Name = \"Madrid\", Country = \"Spain\" },\n            new City() { Name = \"Rome\", Country = \"Italy\" },\n            new City() { Name = \"Paris\", Country = \"France\" }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Item Class Implementation\nDESCRIPTION: Reference to a C# class implementation for the Item model used in the TreeView examples, which contains properties like Name and a collection of child items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-getting-started-item' />\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for DataPager - .NET MAUI\nDESCRIPTION: This snippet illustrates how to define the ViewModel for the DataPager component in a .NET MAUI application, establishing the data context and binding necessary for dynamic data handling in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/collectionview.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datapager-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Migrating Namespaces in XAML - .NET MAUI\nDESCRIPTION: Shows how to update the XAML namespace for the AutoCompleteView control from Xamarin to .NET MAUI. The 'xmlns:telerikInput' namespace used in Xamarin is replaced by 'xmlns:telerik' in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\"xmlns\\:telerikInput=\\\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\\\"\"\n```\n\nLANGUAGE: XML\nCODE:\n```\n\"xmlns\\:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentedControl Selection in XAML\nDESCRIPTION: XAML markup for configuring the SegmentedControl with selection capabilities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='segmentcontrol-selection-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining the DataPager in XAML - .NET MAUI\nDESCRIPTION: This snippet provides a template for defining a DataPager in XAML, including the necessary namespace for Telerik components. It outlines how to set up the DataPager control within a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<DataPager x:Name=\"dataPager\" />\n```\n\n----------------------------------------\n\nTITLE: Loading PDF Document in C# for PDF Viewer\nDESCRIPTION: C# code that demonstrates loading a PDF document into the RadPdfViewer control for use with the toolbar example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class ToolbarExample : ContentPage\n{\n    public ToolbarExample()\n    {\n        InitializeComponent();\n        this.pdfViewer.Source = new FileDocumentSource\n        {\n            File = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), $\"pdf-sample.pdf\")\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WrapLayout Orientation in XAML\nDESCRIPTION: Demonstrates how to set horizontal and vertical orientation in WrapLayout using XAML namespace. Shows the basic setup of the telerik namespace for MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/wrap-feature.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining the .NET MAUI Calendar for Multiple Selection\nDESCRIPTION: This snippet demonstrates how to set up a .NET MAUI Calendar with Multiple selection mode, allowing users to select multiple dates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-multiple-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Creating Country Data Model in C#\nDESCRIPTION: Defines the Country model class that inherits from Location and adds a collection of cities for the TreeView hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country : Location\n{\n    public Country()\n    {\n        this.Cities = new ObservableCollection<City>();\n    }\n\n    public ObservableCollection<City> Cities { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ComboBox Width Calculator in XAML\nDESCRIPTION: XAML implementation showing how to apply the AutoWidthEnabled attached property to a RadComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-calculate-dropdown-width.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:YOUR_APP\"\n             x:Class=\"YOUR_APP.MainPage\">\n    <VerticalStackLayout>\n        <telerik:RadComboBox x:Name=\"MyComboBox1\"\n                             DisplayMemberPath=\"Name\"\n                             local:ComboBoxHelper.AutoWidthEnabled=\"True\"/>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Label Style in XAML\nDESCRIPTION: Style definition for Label in popup header, setting text color, alignment, and font size\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\" x:Key=\"headerLabelStyle\">\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n    <Setter Property=\"HorizontalOptions\" Value=\"Center\"/>\n    <Setter Property=\"VerticalOptions\" Value=\"Center\"/>\n    <Setter Property=\"FontSize\" Value=\"Title\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing CategoricalDataViewModel in C#\nDESCRIPTION: Creates a ViewModel class that provides sample categorical data for the chart through an ObservableCollection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-vertical-axis-label-position-line-visibility.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalDataViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public CategoricalDataViewModel()\n    {\n        this.Data = GetCategoricalData();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"A\", Value = 101 },\n            new CategoricalData { Category = \"B\", Value = 45 },\n            new CategoricalData { Category = \"C\", Value = 77 },\n            new CategoricalData { Category = \"D\", Value = 15 },\n            new CategoricalData { Category = \"E\", Value = 56 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Grouping UI in RadDataGrid\nDESCRIPTION: Demonstrates how to disable the entire grouping functionality for a DataGrid by setting the UserGroupMode property to Disabled. This hides the DataGridGroupingPanel and prevents user drag and drop grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/grouping-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" UserGroupMode=\"Disabled\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Country\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Calendar Month Styling - Calendar Definition\nDESCRIPTION: Defines the Calendar control with a MonthStyleSelector. This allows you to apply different styles to different months in the Calendar's year view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/month-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-styleselectors-monthstyleselector-usage'/>\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Tokens Collection in .NET MAUI\nDESCRIPTION: This snippet defines an ObservableCollection property called Tokens in a .NET MAUI application, which represents a read-only collection for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic ObservableCollection<object> Tokens { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining Business Model in C#\nDESCRIPTION: This snippet shows the definition of a sample business model class used in the ListPicker example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n    public string Icon { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in .NET MAUI Application\nDESCRIPTION: Calls the UseTelerik extension method in the CreateMauiApp method to register Telerik controls for use in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<!-- Code omitted for brevity -->\n.UseMauiApp<App>()\n.UseTelerik()\n<!-- Code omitted for brevity -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toolbar Command in PDF Viewer\nDESCRIPTION: C# code showing how to load a PDF document and setup the page for a custom toolbar command example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class ToolbarCustomCommandExample : ContentPage\n{\n    public ToolbarCustomCommandExample()\n    {\n        InitializeComponent();\n\n        string fileName = \"pdf-sample.pdf\";\n        string filePath = DependencyService.Get<IFileHelper>().GetLocalFilePath(fileName);\n        using (var fileStream = File.OpenRead(filePath))\n        {\n            MemoryStream stream = new MemoryStream();\n            fileStream.CopyTo(stream);\n            byte[] bytes = stream.ToArray();\n            var source = new Telerik.Maui.Controls.PdfViewer.ByteArrayDocumentSource(bytes, fileName);\n            this.pdfViewer.Source = source;\n        }\n\n        this.BindingContext = new ToolbarCustomCommandViewModel();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal ScrollBar Visibility in MAUI DataGrid on Windows\nDESCRIPTION: A platform-specific code snippet for Windows that configures the DataGrid's horizontal scrollbar to always be visible by accessing the RadScrollView and setting its HorizontalScrollBarVisibility property programmatically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-horizontal-scrollbar-always-visible.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#if WINDOWS\nprivate void DataGrid_Loaded(object sender, System.EventArgs e)\n{\n    foreach (var child in ((RadDataGrid)sender).Children)\n    {\n        if (child is RadScrollView)\n        {\n            if (child.Handler?.PlatformView is Telerik.Maui.Platform.RadMauiScrollView sv)\n            {\n                sv.HorizontalScrollBarVisibility = Microsoft.UI.Xaml.Controls.ScrollBarVisibility.Visible;\n            }\n        }\n    }\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Reference for Telerik Control in XAML\nDESCRIPTION: Alternative solution using explicit namespace reference instead of schema.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/telerik-schema-error-cannot-resolve-type.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikCombo:RadComboBox/>\n```\n\n----------------------------------------\n\nTITLE: Setting Rating Value in XAML for .NET MAUI RadShapeRating\nDESCRIPTION: Demonstrates how to set the Value property of the RadShapeRating control in XAML. This property determines the number of selected rating items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadShapeRating Value=\"4\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Implicit Style for Image in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to define an implicit style for the Image control in .NET MAUI. This style sets the Aspect, HeightRequest, and WidthRequest properties to control the image's appearance. All Image instances within the page will inherit this style, allowing for a uniform look and feel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-image-style-imagecardview-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style TargetType=\"Image\">\n            <Setter Property=\"Aspect\" Value=\"AspectFill\"/>\n            <Setter Property=\"HeightRequest\" Value=\"100\"/>\n            <Setter Property=\"WidthRequest\" Value=\"100\"/>\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox Drop-Down Opening on Focus in XAML\nDESCRIPTION: Illustrates how to configure the ComboBox to open its drop-down when the control receives focus using the OpenOnFocus property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox OpenOnFocus=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing TemplatedButton Click Handler in .NET MAUI\nDESCRIPTION: Creates an event handler for the TemplatedButton that toggles a busy indicator and updates text with a delay, demonstrating interactive functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate async void OnTemplatedButtonClicked(object sender, EventArgs e)\n{\n\tthis.busy.IsBusy = true;\n\tthis.loadingLabel.Text = \"Loading Data\";\n\tawait Task.Delay(TimeSpan.FromSeconds(2));\n\tthis.busy.IsBusy = false;\n\tthis.loadingLabel.Text = \"Data is Loaded\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace Declaration in XAML\nDESCRIPTION: The XAML namespace declaration for Telerik controls that should be added to the page or user control where the TreeView is implemented.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/treeview-net-maui-load-children-checkbox-recursive.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Current Date Selection in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to set the currently selected date in a RadDateTimePicker using the Date property. The default value allows setting null if no date is selected. It requires the Telerik namespace to be declared.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/default-dates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\"\n                                SpinnerFormat=\"yyy-MMM\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Read-Only State for .NET MAUI Entry\nDESCRIPTION: Demonstrates how to make a Telerik Entry control non-editable by setting the IsReadOnly property to True, preventing users from modifying the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"telerikEntry\"\n\t\t\t\t  Text=\"Telerik UI for .NET MAUI Entry control\"\n\t\t\t\t  IsReadOnly=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: DataGrid Localization Keys Table in Markdown\nDESCRIPTION: A markdown table containing all available localization keys for the DataGrid control and their corresponding default English values. The keys control text displayed in various UI elements like filtering, grouping panel, search functionality, and operators.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `DataGrid_DistinctValues_null`  | `(empty)` |\n| `DataGrid_DistinctValues_SelectAll` | `Select All` |\n| `DataGrid_Filter_ApplyFilter` | `Filter` |\n| `DataGrid_Filter_ResetFilter` | `Reset` |\n| `DataGrid_Filter_ShowRowsWithValueThat` | `Show rows with value that:` |\n| `DataGrid_FilterWatermarkText` | `Enter Filter Criteria` |\n| `DataGrid_GroupingPanelHeaderText` | `Drag a column header to group` |\n| `DataGrid_GroupingPanelHeaderText_Grouped` | `Group By:` |\n| `DataGrid_LoadOnDemandButtonText` | `LOAD MORE` |\n| `DataGrid_LogicalOperator_And` | `And` |\n| `DataGrid_LogicalOperator_Or` | `Or` |\n| `DataGrid_NumericalOperator_EqualsTo` | `Is equal to` |\n| `DataGrid_NumericalOperator_DoesNotEqualTo` | `Is not equal to` |\n| `DataGrid_NumericalOperator_IsGreaterThan` | `Is greater than` |\n| `DataGrid_NumericalOperator_IsGreaterThanOrEqualTo` | `Is greater than or equal to` |\n| `DataGrid_NumericalOperator_IsLessThan` | `Is less than` |\n| `DataGrid_NumericalOperator_IsLessThanOrEqualTo` | `Is less than or equal to` |\n| `DataGrid_TextOperator_Contains` | `Contains` |\n| `DataGrid_TextOperator_DoesNotContain` | `Does not contain` |\n| `DataGrid_TextOperator_DoesNotEqualTo` | `Is not equal to` |\n| `DataGrid_TextOperator_EndsWith` | `Ends with` |\n| `DataGrid_TextOperator_EqualsTo` | `Is equal to` |\n| `DataGrid_TextOperator_IsEmpty` | `Is empty` |\n| `DataGrid_TextOperator_IsNotEmpty` | `Is not empty` |\n| `DataGrid_TextOperator_StartsWith` | `Starts with` |\n| `DataGrid_Search_SearchEntryPlaceholder` | `Type to Search` |\n| `DataGrid_Search_ApplyFilter` | `Filter Results` |\n| `DataGrid_Search_CaseSensitive` | `Match Case` |\n| `DataGrid_Search_Contains` | `Contains` |\n| `DataGrid_Search_MatchesNotfound` | `Not found` |\n| `DataGrid_Search_MatchesStringFormat` | `Matches: {0}` |\n| `DataGrid_Search_SearchEntryPlaceholder` | `Type to Search` |\n| `DataGrid_Search_WholeWord` | `Whole Word` |\n```\n\n----------------------------------------\n\nTITLE: Hiding Labels in .NET MAUI Gauge Axis\nDESCRIPTION: Controls the visibility of axis labels by setting the ShowLabels property to False.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis ShowLabels=\"False\"\n\t\t\t\t\t\t  Maximum=\"250\"\n\t\t\t\t\t\t  Minimum=\"0\"\n\t\t\t\t\t\t  Step=\"25\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing DragVisualTemplate in .NET MAUI CollectionView\nDESCRIPTION: XAML template definition for customizing the visual appearance of items being dragged in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-dragdrop-templates-dragvisual' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Handling for Unpackaged .NET MAUI Windows Deployment\nDESCRIPTION: This code snippet shows an advanced approach to handle font loading in unpackaged .NET MAUI deployments on Windows. It uses the LabelHandler's Mapper to dynamically set the native Windows font family property, ensuring proper font loading for both packaged and unpackaged scenarios.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/troubleshooting-missing-fonts-unpackaged-deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static MauiApp CreateMauiApp()\n{\n    var builder = MauiApp.CreateBuilder();\n    builder\n        .UseMauiApp<App>()\n        .UseTelerik()\n        .ConfigureFonts(fonts =>\n        {\n            fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n            fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            fonts.AddFont(\"telerikfontexamples.ttf\", \"telerikfontexamples\");\n            fonts.AddFont(\"telerikcontrolsicons.ttf\", \"telerikfontexamples\");\n        });\n\n#if WINDOWS10_0_17763_0_OR_GREATER\n    Microsoft.Maui.Handlers.LabelHandler.Mapper.AppendToMapping(\"FontFamily\", (handler, element) =>\n    {\n        /*  An unpackaged app does not have ms-appx://Assets/ folder available. To avoid issues you can explicitly define the new path to the font file\n         *\n         *  - Packaged => \"ms-appx://Assets/Fonts/Font.ttf#familyname\" \n         *  - Unpackaged => \"font.ttf#familyname\"\n         *\n         *  In order for the unpackaged approach to work, be sure to include the font's file with the project's assets and set the Build Action to 'CopyAlways'\n        */\n\n        handler.PlatformView.FontFamily = element.Font.Family.ToLower() switch\n        {\n            \"telerikcontrolsicons\" => new Microsoft.UI.Xaml.Media.FontFamily(\"telerikcontrolsicons.ttf#telerikcontrolsicons\"),\n            \"telerikfontexamples\" => new Microsoft.UI.Xaml.Media.FontFamily(\"telerikfontexamples.ttf#telerikfontexamples\"),\n            _ => handler.PlatformView.FontFamily\n        };\n    });\n#endif\n\n    return builder.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListPicker Footer Style\nDESCRIPTION: Style definition for the ListPicker dropdown footer\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/dropdown-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:PickerPopupFooterView\">\n```\n\n----------------------------------------\n\nTITLE: Declaring RadAutoComplete in XAML for Token Mode - XAML\nDESCRIPTION: XAML markup to declare a RadAutoComplete control for Token display mode, using a similar structure as in Plain mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/display-text.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"tokenAutocomplete\"\n    ItemsSource=\"{Binding Clients}\"\n    DisplayTextFormatter=\"{StaticResource MyTextFormatter}\"\n    DisplayMode=\"Tokens\" />\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderTemplate in XAML\nDESCRIPTION: This snippet illustrates how to define the HeaderTemplate for the NavigationView header, allowing for customization of the header's content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/header.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<RadNavigationView.HeaderTemplate>\n    <!-- Custom content for the header goes here -->\n</RadNavigationView.HeaderTemplate>\n```\n\n----------------------------------------\n\nTITLE: ListPicker Footer Style\nDESCRIPTION: Customizes the footer section styling of the ListPicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-footer-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting Label Format in .NET MAUI Gauge Axis\nDESCRIPTION: Configures the numeric format of the axis labels using the LabelFormat property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis LabelFormat=\"N2\"\n\t\t\t\t\t\t Maximum=\"4\"\n\t\t\t\t\t\t Minimum=\"0\"\n\t\t\t\t\t\t Step=\"0.5\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the Telerik namespace to your XAML file, allowing the use of Telerik controls in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/methods.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DataForm with Manually Generated Editors in XAML\nDESCRIPTION: XAML code for defining a DataForm control with manually specified editors. This approach gives more control over the editor types, layout, and properties compared to automatic generation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/data-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<dataForm:RadDataForm x:Name=\"dataForm\" AutoGenerateItems=\"False\">\n    <dataForm:RadDataForm.BindingContext>\n        <local:EditorsViewModel/>\n    </dataForm:RadDataForm.BindingContext>\n\n    <dataForm:RadDataForm.Editors>\n        <dataForm:DataFormRadSegmentedEditor PropertyName=\"Gender\"/>\n        <dataForm:DataFormRadEntryEditor PropertyName=\"Name\" />\n        <dataForm:DataFormRadNumericEditor PropertyName=\"Weight\" />\n        <dataForm:DataFormRadCheckBoxEditor PropertyName=\"IsEnabled\" />\n        <dataForm:DataFormDatePickerEditor PropertyName=\"BirthDate\" />\n        <dataForm:DataFormTimePickerEditor PropertyName=\"WorkStartTime\"/>\n    </dataForm:RadDataForm.Editors>\n</dataForm:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: TreeView Country Data Model\nDESCRIPTION: Defines the country data model class used for TreeView item hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-country-model'/>\n```\n\n----------------------------------------\n\nTITLE: Namespace Migration for DataForm in XAML and C#\nDESCRIPTION: Shows the changes in namespaces and control names when migrating from Xamarin.Forms DataForm to .NET MAUI DataForm in both XAML and C# contexts.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerikInput=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n```\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Input;\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Adding XAML Namespace for Telerik Components\nDESCRIPTION: This snippet shows how to add the required XML namespace for Telerik components in XAML, allowing the usage of various Telerik controls such as the RadCartesianChart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/grid.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Footer Text for DataGrid Columns\nDESCRIPTION: Demonstrates how to set footer text for individual columns using the FooterText property in a DataGrid with auto-generated columns disabled.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/footer.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" \n\t\t\t\t\t ShowColumnFooters=\"True\" \n\t\t\t\t\t AutoGenerateColumns=\"False\">\n\t<telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Capital\" \n\t\t\t\t\t\t\t\tFooterText=\"Capital Footer\"/>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Country\" \n\t\t\t\t\t\t\t\tFooterText=\"Country Footer\"/>\n\t</telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom DataTemplate for RangeSlider Tooltip in XAML\nDESCRIPTION: This snippet demonstrates how to create a custom DataTemplate for the RangeSlider tooltip. The template is added to the page resources and can be referenced in the RangeSlider definition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/tooltips.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-tooltiptemplate-datatemplate' />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Styles for .NET MAUI ComboBox\nDESCRIPTION: This XAML snippet demonstrates how to create a custom style for the RadComboBox control, including various styling properties and visual states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-custom-styles' />\n```\n\n----------------------------------------\n\nTITLE: Handling GroupGenerated Event in DataForm\nDESCRIPTION: Demonstrates how to handle the GroupGenerated event to customize the automatic generation of groups in the DataForm. This event allows for modification or replacement of generated groups.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprivate void DataForm_GroupGenerated(object sender, DataFormGroupGeneratedEventArgs e)\n{\n    if (e.GroupName == \"Group 1\")\n    {\n        e.Group.HeaderText = \"Personal Information\";\n    }\n    else if (e.GroupName == \"Group 2\")\n    {\n        e.Group.HeaderText = \"Contact Information\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Steps in TimeSpanPicker in XAML\nDESCRIPTION: Example of how to set custom incremental steps for days, hours, minutes, and seconds in the TimeSpanPicker control. This allows for coarser or finer time selection granularity.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timespan-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker DayStep=\"2\"\n                                HourStep=\"4\"\n                                MinuteStep=\"10\"\n                                SecondStep=\"30\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Diamond Shape Rating in .NET MAUI\nDESCRIPTION: Example showing how to create a Rating control with diamond shape geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/rating-shape-rating.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadShapeRating ItemShape=\"{x:Static telerik:RadGeometry.Diamond}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class for .NET MAUI DataGrid Example\nDESCRIPTION: Defines a sample Person class to be used as a business object in the DataGrid example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person\n{\n\tpublic string Name { get; set; }\n\tpublic int Age { get; set; }\n\tpublic string Department { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Business Object Definition for DataGrid\nDESCRIPTION: Defines the Country business object with properties used in the DataGrid example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/cell-tap.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-commands-celltap-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Editor ViewModel with Multiple Selection Logic\nDESCRIPTION: Creates a ViewModel for the DataForm custom editor, managing available accommodations and handling SelectedItems collection changes. Includes collection initialization, property binding, and event subscription for collection modifications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dataform-custom-editor-combobox-selecteditems.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEditorViewModel : NotifyPropertyChangedBase\n{\n    private string accommodation;\n    private ObservableCollection<object> selectedItems;\n\n    public CustomEditorViewModel()\n    {\n        this.AvailableAccommodations = new[]\n        {\n            \"Single Room\",\n            \"Double Room\",\n            \"Appartment\",\n            \"House\",\n            \"new House\",\n            \"new apartment\",\n            \"my apartment\",\n            \"hallo\",\n        };\n    }\n\n    [Required]\n    public string Accommodation\n    {\n        get => this.accommodation;\n        set => this.UpdateValue(ref this.accommodation, value);\n    }\n\n    [NotMapped]\n    public IList<string> AvailableAccommodations { get; }\n\n    public ObservableCollection<object> Values\n    {\n        get { return this.selectedItems; }\n        set\n        {\n            if (this.selectedItems != value)\n            {\n                if (this.selectedItems != null)\n                {\n                    this.selectedItems.CollectionChanged -= SelecteDItems_CollectionChanged;\n                }\n\n                this.selectedItems = value;\n\n                this.selectedItems.Add(this.AvailableAccommodations[0]);\n                this.selectedItems.Add(this.AvailableAccommodations[1]);\n\n                if (this.selectedItems != null)\n                {\n                    this.selectedItems.CollectionChanged += SelecteDItems_CollectionChanged;\n                }\n\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    private void SelecteDItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\n    {\n        if (e.Action == NotifyCollectionChangedAction.Add)\n        {\n\n        }\n        else if (e.Action == NotifyCollectionChangedAction.Remove) \n        { \n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop-Down Styling in XAML for .NET MAUI DateTimePicker\nDESCRIPTION: Example of how to define a RadDateTimePicker with customized drop-down styling. This demonstrates the use of the DropDownSettings property to configure the appearance of the DateTimePicker's drop-down component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker x:Name=\"dateTimePicker\">\n    <telerik:RadDateTimePicker.DropDownSettings>\n        <telerik:PickerDropDownSettings DropDownViewStyle=\"{StaticResource DropDownViewStyle}\"\n                                       FooterStyle=\"{StaticResource FooterStyle}\"\n                                       AcceptButtonStyle=\"{StaticResource AcceptButtonStyle}\"\n                                       CancelButtonStyle=\"{StaticResource CancelButtonStyle}\"/>\n    </telerik:RadDateTimePicker.DropDownSettings>\n</telerik:RadDateTimePicker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Selection in .NET MAUI CollectionView\nDESCRIPTION: This XAML snippet demonstrates how to configure the CollectionView control for single selection using the SelectedItem property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                               ItemsSource=\"{Binding Cities}\"\n                               SelectionMode=\"Single\"\n                               SelectedItem=\"{Binding SelectedCity}\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:CollectionViewItemView>\n                <Label Text=\"{Binding Name}\" />\n            </telerik:CollectionViewItemView>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI PDF Viewer C# Namespace Import\nDESCRIPTION: Shows how to import the Telerik PDF Viewer namespace in C# files for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/migrate-from-xamarin.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Initializing Calendar in XAML\nDESCRIPTION: This snippet demonstrates how to define a RadCalendar in XAML. It serves as the starting point for configuring the calendar's Culture property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/globalization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-culture'/>\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace\nDESCRIPTION: Adds the required Telerik XAML namespace for accessing ListPicker components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing RadEntry Cursor Color using HandlerChanged in C#\nDESCRIPTION: This code snippet shows how to access the native platform view of a RadEntry control within the HandlerChanged event handler and customize the cursor color on Android and iOS. It leverages conditional compilation directives (#if ANDROID, #elif __IOS__) to apply platform-specific customizations using the native platform APIs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/entry-cursor-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"private void Entry1_HandlerChanged(object sender, EventArgs e)\n{\n    // Make sure the PlatformView is available\n    if ((sender as RadEntry)?.Handler?.PlatformView is RadMauiEntry nativeEntry)\n    {\n        // Step 3. change the desired native-specific properties\n#if ANDROID\n        nativeEntry.EditText.TextCursorDrawable?.SetColorFilter(new Android.Graphics.PorterDuffColorFilter(Android.Graphics.Color.Red, Android.Graphics.PorterDuff.Mode.Darken));\n#elif __IOS__\n        nativeEntry.TextField.TintColor = UIKit.UIColor.White;\n#endif\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Styling the Cancel Button in .NET MAUI DateTimePicker\nDESCRIPTION: Definition of a Style for the Cancel button in the DateTimePicker drop-down footer. This style targets the Button control and customizes properties like text color, background color, and corner radius.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/dropdown-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"CancelButtonStyle\" TargetType=\"Button\">\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n    <Setter Property=\"BackgroundColor\" Value=\"#D73C41\"/>\n    <Setter Property=\"CornerRadius\" Value=\"10\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Label Template to RangeSlider in XAML\nDESCRIPTION: Shows how to apply the custom label template to the RangeSlider control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/labels.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"0\" Maximum=\"100\"\n                       LabelStep=\"25\"\n                       LabelsPlacement=\"Start\"\n                       LabelTemplate=\"{StaticResource customLabelTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace\nDESCRIPTION: This XAML snippet adds the Telerik namespace to the XAML file. This allows the use of Telerik controls within the XAML markup. The namespace points to the Telerik XAML schema for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration Differences - C#\nDESCRIPTION: Shows the difference between C# namespace declarations for Xamarin.Forms and .NET MAUI Scheduler controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Input;\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Defining Reorder Indicator Template in XAML\nDESCRIPTION: This XAML code snippet defines a DataTemplate for the ColumnReorderIndicatorTemplate. This template defines how the reorder indicator looks when a column is being dragged.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"ReorderIndicatorTemplate\">\n    <Grid BackgroundColor=\"Green\" WidthRequest=\"2\"/>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Template in .NET MAUI ListView\nDESCRIPTION: Defines a DataTemplate in XAML to be used as the footer in the .NET MAUI ListView. The footer template is positioned below all list items, offering customization and additional content display capabilities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/header-footer.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-features-footer-template-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RadComboBox with Custom Templates and Keyboard Support in .NET MAUI\nDESCRIPTION: XAML implementation of RadComboBox with custom item and selected item templates that maintain keyboard navigation support. The solution uses RadComboBoxItem wrapper and Visual State Manager to define MouseOver and Highlighted states for proper keyboard interaction feedback.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-custom-templates-keyboard-support.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadComboBox ItemsSource=\"{Binding Items}\" \n                     DisplayMemberPath=\"Name\" \n                     x:Name=\"combo\"\n                     Placeholder=\"Select City\"\n                     AutomationId=\"comboBox\"\n                     SearchMode=\"StartsWith\"\n                     OpenOnFocus=\"False\"\n                     SearchTextPath=\"Name\">\n    <telerik:RadComboBox.ItemTemplate>\n        <DataTemplate>\n            <telerik:RadComboBoxItem>\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\"/>\n                        <VisualState x:Name=\"MouseOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\"/>\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState Name=\"Highlighted\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateManager.VisualStateGroups>\n                <Label Text=\"{Binding Name}\"\n                       Padding=\"8, 7, 0, 7\"\n                       TextColor=\"Black\"/>\n            </telerik:RadComboBoxItem>\n        </DataTemplate>\n    </telerik:RadComboBox.ItemTemplate>\n    <telerik:RadComboBox.SelectedItemTemplate>\n        <DataTemplate>\n            <telerik:RadComboBoxItem>\n                <VisualStateManager.VisualStateGroups>\n                    <VisualStateGroup x:Name=\"CommonStates\">\n                        <VisualState x:Name=\"Normal\"/>\n                        <VisualState x:Name=\"MouseOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightGray\"/>\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState Name=\"Highlighted\">\n                            <VisualState.Setters>\n                                <Setter Property=\"telerik:RadComboBoxItem.BackgroundColor\" Value=\"LightCoral\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateManager.VisualStateGroups>\n                <VerticalStackLayout>\n                    <Label Text=\"{Binding Name}\"\n                           Padding=\"8, 7, 0, 7\"\n                           TextColor=\"Black\"/>\n                    <Label Text=\"{Binding Population}\"\n                           FontSize=\"12\"\n                           Padding=\"8, 7, 0, 7\"/>\n                </VerticalStackLayout>\n            </telerik:RadComboBoxItem>\n        </DataTemplate>\n    </telerik:RadComboBox.SelectedItemTemplate>\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: TreeView Checkbox Command Properties\nDESCRIPTION: Command property definitions for controlling checkbox states through MVVM pattern. These commands enable checking/unchecking items programmatically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/checkboxes.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nICommand CheckCommand { get; }\nICommand UncheckCommand { get; }\nICommand CheckAllCommand { get; }\nICommand UncheckAllCommand { get; }\n```\n\n----------------------------------------\n\nTITLE: DataPager Navigation Commands Overview\nDESCRIPTION: Lists the available ICommand properties that can be used to navigate between pages in the DataPager. The commands include navigation to first, previous, specific, next and last pages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `NavigateToFirstPageCommand` (`ICommand`)&mdash;Specifies the command which executes when pressing the first page button.\n* `NavigateToPreviousPageCommand` (`ICommand`)&mdash;Specifies the command which executes when pressing the previous page button.\n* `NavigateToPageCommand` (`ICommand`)&mdash;Specifies the command which executes when pressing a numeric button.\n* `NavigateToNextPageCommand` (`ICommand`)&mdash;Specifies the command which executes when pressing the next page button.\n* `NavigateToLastPageCommand` (`ICommand`)&mdash;Specifies the command which executes when pressing the last page button.\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace in a XAML file to use Telerik controls. The 'xmlns:telerik' declaration is required to utilize Telerik UI components in the .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DataFormRadTextMaskedEditor in XAML\nDESCRIPTION: This snippet shows how to define and configure a DataFormRadTextMaskedEditor in XAML. It sets properties like PropertyName, HeaderText, BackgroundColor, BorderColor, BorderThickness, and applies a custom style.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/masked-editors.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataFormRadTextMaskedEditor PropertyName=\"Password\"\n                                     HeaderText=\"Password\"\n                                     BackgroundColor=\"LightGray\"\n                                     BorderColor=\"DarkBlue\"\n                                     BorderThickness=\"1\"\n                                     EditorStyle=\"{StaticResource RadTextMaskedEditorStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Client Collection\nDESCRIPTION: Creates a ViewModel class containing a collection of Client objects for the AutoComplete control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/remote-search.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining GridSplitter in XAML for Styling - .NET MAUI XAML\nDESCRIPTION: This snippet defines the GridSplitter control in XAML, which can be styled using various properties such as BackgroundColor and BorderColor. It illustrates how to set up the GridSplitter for customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<GridSplitter x:Name=\"myGridSplitter\" BackgroundColor=\"LightGray\" BorderColor=\"Black\" GripperColor=\"DarkGray\" BorderThickness=\"1\" CornerRadius=\"5\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom BeginEditCommand in C#\nDESCRIPTION: In this C# code snippet, a custom BeginEditCommand is defined with custom logic that checks if cell editing should be enabled based on the IsEnabled property of the data model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-conditional-cell-editing.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n    public class BeginEditCommand : DataGridCommand\n    {\n        public BeginEditCommand()\n        {\n            this.Id = DataGridCommandId.BeginEdit;\n        }\n        public override bool CanExecute(object parameter)\n        {\n            return base.CanExecute(parameter);\n        }\n        public override void Execute(object parameter)\n        {\n            var context = (EditContext)parameter;\n            var cellEdit = context.CellInfo as DataGridCellInfo;\n\n            if (cellEdit != null && cellEdit.Column is DataGridTextColumn && cellEdit.Column.HeaderText == \"Text\" && (cellEdit.Item as Data).IsEnabled == true)\n            {\n                this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.BeginEdit, parameter);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: ListPicker Selected Item Style Definition\nDESCRIPTION: Style definition for selected items in ListPicker marked with snippet id 'listpicker-features-selecteditemstyle'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-features-selecteditemstyle' />\n```\n\n----------------------------------------\n\nTITLE: Setting Time Property with XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to set the 'Time' property of the RadTimeSpanPicker control in XAML. The property defines the current time-interval selection of the picker, and it defaults to null if not set.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\"/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Saving a Downscaled Image in C#\nDESCRIPTION: This code demonstrates how to save a downscaled version of an image using the SaveAsync method with a scale factor parameter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/saving-image.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='imageeditor-saveimage-downscaled'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Label Style Selector for .NET MAUI RangeSlider\nDESCRIPTION: Creates a custom style selector class that inherits from Telerik.Maui.Controls.IStyleSelector to apply different styles to labels based on their position relative to the selected range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/labels-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='rangeslider-labels-styleselector-class' />\n```\n\n----------------------------------------\n\nTITLE: Defining CategoricalData Business Object in C#\nDESCRIPTION: Creates a basic data model class with Category and Value properties for chart data representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-vertical-axis-label-position-line-visibility.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n\n    public double Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TemplatedPicker in XAML\nDESCRIPTION: This snippet defines a TemplatedPicker control in XAML with an event handler for the SelectionChanged event. It includes a selector template containing a RadCalendar bound to the selected value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedPicker SelectionChanged=\"RadTemplatedPicker_SelectionChanged\" x:Name=\"picker\">\n    <telerik:RadTemplatedPicker.SelectorTemplate>\n        <ControlTemplate>\n            <telerik:RadCalendar SelectedDate=\"{TemplateBinding SelectedValue, Mode=TwoWay}\"/>\n        </ControlTemplate>\n    </telerik:RadTemplatedPicker.SelectorTemplate>\n</telerik:RadTemplatedPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduler with AppointmentStyleSelector\nDESCRIPTION: XAML configuration for the Scheduler control with the custom appointment style selector applied.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/appointments-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-appointments-styling' />\n```\n\n----------------------------------------\n\nTITLE: Setting CommitMode in XAML for .NET MAUI DataForm\nDESCRIPTION: Demonstrates how to set the CommitMode property of RadDataForm to LostFocus in XAML. This determines when changes in the form are committed to the underlying data object.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/commit-data.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\"\n                     CommitMode=\"LostFocus\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Toggle Button in DropDown Mode for ListPicker\nDESCRIPTION: This snippet illustrates how to enable the IsToggleButtonVisible property when the PickerMode is set to DropDown. The toggle button allows users to open the picker UI easily, particularly on desktop environments.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker PickerMode=\"DropDown\"\n\t\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace\nDESCRIPTION: Required namespace declaration for using Telerik MAUI controls\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for ListView with TextCell in C#\nDESCRIPTION: This code snippet demonstrates how to create a view model that will serve as the data source for a ListView using TextCell. It defines a Person class with Name and Age properties and creates a collection of Person objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/text-cell.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-celltypes-textcell-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel as BindingContext\nDESCRIPTION: Code snippet showing how to assign the ViewModel to the BindingContext for data binding\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Adding the ViewModel for DateOnly\nDESCRIPTION: This snippet will be used to show how to add a ViewModel that supports DateOnly in the context of the DatePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/dateonly.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-dateonly-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Handling CurrentItemChanged Event in SlideView\nDESCRIPTION: Shows the implementation of the CurrentItemChanged event handler for the SlideView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='slideview-events-current-item-changed-event' />\n```\n\n----------------------------------------\n\nTITLE: Deleting a Row from DataTable in C#\nDESCRIPTION: This snippet demonstrates how to delete a row from the DataTable. It accesses the row to be deleted using its index and calls the Delete() method on it.  After that, AcceptChanges() needs to be called on the DataTable to persist the deletion.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n\"this.data.Rows[0].Delete();\nthis.data.AcceptChanges();\"\n```\n\n----------------------------------------\n\nTITLE: Group Aggregate Style Selector Implementation\nDESCRIPTION: C# class for implementing custom style selection logic for group aggregates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-group-aggregate-style-selector'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for DataPager\nDESCRIPTION: Implements a sample ViewModel to provide data source for the DataPager control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-features-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: City Model Implementation\nDESCRIPTION: Reference to a C# class implementation for the City model used in the hierarchical data structure example for TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-city-model' />\n```\n\n----------------------------------------\n\nTITLE: Creating Time Break Item in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to instantiate a TimeBreak item to be used in the RadChat control. The resulting object can be configured to categorize messages by time intervals or status. The core functionality lies in encapsulating message groups effectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/items/timebreak.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar timeBreak = new TimeBreak() {\n    Text = \"Messages from lunchtime\"\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching Focused Event to AutoComplete Control in C#\nDESCRIPTION: This code shows how to attach the Focused event handler to the RadAutoComplete control to detect when the control receives focus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/methods.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-focused'/>\n```\n\n----------------------------------------\n\nTITLE: Styling DataGrid Column Footers in .NET MAUI\nDESCRIPTION: This example demonstrates how to customize the appearance of column footers in a DataGrid using the FooterStyle property. It allows configuring text color, background, borders, font options, and text alignment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/columns-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='datagrid-columnstyle-footerstyle' />\n```\n\n----------------------------------------\n\nTITLE: Configuring SlideView Interaction Modes in .NET MAUI\nDESCRIPTION: The InteractionMode property controls how users can interact with the SlideView. It accepts values from the SlideViewInteractionMode enum, with None being default for desktop and Pan for mobile platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/inifinite-looping.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nInteractionMode=\"None\"\n```\n\nLANGUAGE: XAML\nCODE:\n```\nInteractionMode=\"Pan\"\n```\n\n----------------------------------------\n\nTITLE: Defining Client Business Object in C#\nDESCRIPTION: This snippet defines a Client class with Id, Name, and Country properties used as the data model for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Shapefile Source for Map\nDESCRIPTION: Demonstrates how to set the source of the shapefile for the map using the `Source` property of the `MapShapeReader`. The shapefile contains the geographical data used to draw the map shapes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n <snippet id='map-gettingstarted-setting-source' />\n```\n\n----------------------------------------\n\nTITLE: Defining the Header Template - XAML\nDESCRIPTION: This snippet specifies the Header Template for the TemplatedPicker in XAML, which customizes the content displayed in the popup header.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to HandlerChanged Event for RadEntry in C#\nDESCRIPTION: This code snippet demonstrates how to subscribe to the HandlerChanged event of a RadEntry control to access its native platform view and customize the cursor color. It requires access to the RadEntry control instance and utilizes the HandlerChanged event to perform native-specific customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/entry-cursor-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"MyRadEntry.HandlerChanged += Entry1_HandlerChanged;\"\n```\n\n----------------------------------------\n\nTITLE: Handling Link Annotation Tapped Event - C#\nDESCRIPTION: This snippet illustrates the implementation of the LinkAnnotationTapped event handler in C#. It handles link events, checks the type of action requested by the link, and provides an option to cancel navigation if necessary.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnLinkAnnotationTapped(object sender, LinkAnnotationTappedEventArgs e) {\n    if (e.LinkAnnotation.UriAction != null) {\n        // Logic to confirm navigation or cancel it\n        e.Handled = true; // Cancel navigation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining .NET MAUI Scheduler with Line Styling\nDESCRIPTION: XAML code showing how to define a Scheduler control with custom line styling properties referenced from page resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/lines-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-lines-styling-definition'/>\n```\n\n----------------------------------------\n\nTITLE: RadMap definition in XAML\nDESCRIPTION: This snippet shows the XAML definition of the `RadMap` control. It is part of the example demonstrating how to use the zoom commands of the Map control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-zoom-level-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Subscribing to RadListView HandlerChanged Event in XAML\nDESCRIPTION: This XML snippet shows how to subscribe to the HandlerChanged event of the RadListView control in the XAML file. This event will be used to customize the scrolling animation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-change-animation-scrolling-radlistview-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadListView ItemsSource=\"{Binding Source}\" HandlerChanged=\"listView_HandlerChanged\" x:Name=\"listView\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source with Credentials in GitHub Actions\nDESCRIPTION: CLI command for adding a NuGet package source with authentication credentials in GitHub Actions workflows using the dotnet CLI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/nuget-keys.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source 'MyTelerikFeed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '${{ secrets.TELERIK_NUGET_KEY }}' --configfile './nuget.config' --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Defining RangeSlider TicksStyleSelector in XAML Resources\nDESCRIPTION: XAML resources definition that includes styles for ticks before, within, and after the selected range along with a style selector instance that will apply these styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/ticks-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style x:Key=\"BeforeRangeTickStyle\" TargetType=\"Rectangle\">\n            <Setter Property=\"Fill\" Value=\"Yellow\"/>\n        </Style>\n        <Style x:Key=\"InRangeTickStyle\" TargetType=\"Rectangle\">\n            <Setter Property=\"Fill\" Value=\"Green\"/>\n        </Style>\n        <Style x:Key=\"AfterRangeTickStyle\" TargetType=\"Rectangle\">\n            <Setter Property=\"Fill\" Value=\"Red\"/>\n        </Style>\n\n        <local:RangeSliderTicksStyleSelector x:Key=\"ticksStyleSelector\"\n                                           BeforeRangeStyle=\"{StaticResource BeforeRangeTickStyle}\" \n                                           InRangeStyle=\"{StaticResource InRangeTickStyle}\" \n                                           AfterRangeStyle=\"{StaticResource AfterRangeTickStyle}\"/>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Implementing ClearSelection Method in .NET MAUI DateTimePicker\nDESCRIPTION: This code demonstrates how to use the ClearSelection method with a button click event to programmatically clear the selected date in a RadDateTimePicker. When invoked, this method sets the Date property to null.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Button Text=\"Clear Selection\" Clicked=\"OnClearSelectionClicked\"/>\n    <telerik:RadDateTimePicker x:Name=\"dateTimePicker\"/>\n</StackLayout>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e)\n{\n    this.dateTimePicker.ClearSelection();\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration Differences - XAML\nDESCRIPTION: Shows the difference between XAML namespace declarations for Xamarin.Forms and .NET MAUI Scheduler controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Categorical Data Model\nDESCRIPTION: Defines a basic data model with Category and Value properties, suitable for representing categorical data in a chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-features-combine-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n        public class CategoricalDataModel\n        {\n            public string Category { get; set; }\n\n            public double Value { get; set; }\n        }\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext for RadCartesianChart in XAML\nDESCRIPTION: This snippet shows how to define the BindingContext for the RadCartesianChart, which sets up the data context necessary for data binding in the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/types/cartesian-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart.BindingContext>\n\t<local:ViewModel/>\n</telerik:RadCartesianChart.BindingContext>\n```\n\n----------------------------------------\n\nTITLE: Implementing RadTextInput Handler Methods in C#\nDESCRIPTION: Demonstrates how to handle the HandlerChanged event of RadTextInput and access the native platform view to apply custom logic, adapting to the changes in Telerik UI for MAUI 8.0.0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/how-to-access-radentry-handler-telerik-ui-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnTextInputHandlerChanged(object sender, EventArgs e)\n{\n    var textInput = (RadTextInput)sender;\n\n    this.UpdateNativeElement(textInput.Handler);\n\n    textInput.HandlerChanged -= this.OnTextInputHandlerChanged;\n}\n\nprivate void UpdateNativeElement(IViewHandler handler)\n{\n    var nativeEntry = handler.PlatformView as Telerik.Maui.Platform.RadMauiTextInput;\n    if (nativeEntry != null)\n    {\n        // add your logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TemplatedPicker to Popup Mode - XAML\nDESCRIPTION: This snippet demonstrates how to configure the TemplatedPicker to use Popup mode for value selection. The Popup mode opens a UI within a popup for user interaction, which is the default for mobile platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedPicker PickerMode=\"Popup\" />\n```\n\n----------------------------------------\n\nTITLE: Adding ImageEditor Control in XAML\nDESCRIPTION: XAML markup for adding the Telerik ImageEditor control with its Toolbar to a page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadImageEditor x:Name=\"imageEditor\">\n    <telerik:RadImageEditor.Toolbar>\n        <telerik:ImageEditorToolbar />\n    </telerik:RadImageEditor.Toolbar>\n</telerik:RadImageEditor>\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel Binding Context in C#\nDESCRIPTION: Simple C# code snippet showing how to set the BindingContext to the ViewModel instance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/scheduler-net-maui-non-working-hours.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: TimePicker Clear Selection Button in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet defines a button that can be clicked to invoke the ClearSelection action of the RadTimePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n\t<Button Text=\"Clear Selection\" Clicked=\"OnClearSelectionClicked\"/>\n\t<telerik:RadTimePicker x:Name=\"timePicker\"/>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required to use Telerik controls in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customize Send Button Icon in .NET MAUI Chat\nDESCRIPTION: This XAML snippet defines a FontImageSource resource to customize the send button icon within the Telerik UI for .NET MAUI Chat control. It sets properties like FontFamily, Glyph, Color, and Size to modify the icon's appearance. The Glyph property uses a unicode character to display the send icon.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<FontImageSource x:Key=\"SendIconSource\"\n                 FontFamily=\"TelerikFontExamples\"\n                 Glyph=\"&#xe82d;\"\n                 Color=\"{StaticResource ChatInputAreaStrokeColor}\"\n                 Size=\"{OnPlatform Default=24, WinUI=20}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Button Resources - XAML for DataPager\nDESCRIPTION: This snippet demonstrates how to define custom button styles and resources within the page's resource dictionary for use with the DataPager buttons. These resources dictate the visual appearance of navigational buttons in the DataPager.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/buttons.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary>\n    <Style TargetType=\"telerik:DataPagerButton\">\n        <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n        <Setter Property=\"TextColor\" Value=\"White\" />\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: This XAML code snippet declares the Telerik namespace, enabling the use of Telerik UI controls in the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Data and Custom Command to DataGrid in C#\nDESCRIPTION: Demonstrates adding a simple data model and populating it with data for the DataGrid's ItemsSource. It also shows how to add the custom CellTapUserCommand to the grid's Commands collection, completing the setup for single tap editing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-single-tap-editing.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Data\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n\n        var data = new ObservableCollection<Data>();\n\n        for (int i = 0; i < 10; i++)\n        {\n            data.Add(new Data { Id = i, Name = \\\"Name\\\" + i});\n        }\n\n        this.grid.ItemsSource = data;\n        this.grid.Commands.Add(new CellTapUserCommand());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define XAML Namespace for Telerik Controls\nDESCRIPTION: This snippet defines the XML namespace for Telerik controls in a XAML file. It allows referencing Telerik UI controls within the XAML markup by using the `telerik` prefix. This namespace declaration is essential for using Telerik's .NET MAUI components in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: TreeView Location ViewModel\nDESCRIPTION: Implements the ViewModel containing the data and logic for TreeView locations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-location-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cancel Button Style in XAML\nDESCRIPTION: Style definition for the Cancel button in the popup, setting background color, text, and text color\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Button\" x:Key=\"cancelButtonStyle\">\n    <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n    <Setter Property=\"Text\" Value=\"Reject\"/>\n    <Setter Property=\"TextColor\" Value=\"White\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Dashed Series to Chart in C#\nDESCRIPTION: This C# code modifies the stroke style of a chart series to create a dashed line effect. It uses preprocessor directives (`#if`, `#elif`) to apply platform-specific implementations for Android, iOS/MacCatalyst, and Windows. Each platform requires different APIs to access and modify the chart series' stroke dash array. The code handles the `HandlerChanged` event to ensure that the chart is fully initialized before attempting to modify its properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-dash-series.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n\tpublic MainPage()\n\t{\n\t\tInitializeComponent();\n\n\t\tthis.chart.HandlerChanged += this.Chart_HandlerChanged;\n\t}\n\n\tprivate void Chart_HandlerChanged(object sender, EventArgs e)\n\t{\n\t\tthis.UpdateChart();\n\t}\n\n\tprivate void UpdateChart()\n\t{\n        var platformView = this.chart.Handler.PlatformView;\n#if ANDROID\n        var platformChart = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.RadCartesianChartView)platformView;\n        var platformSeries = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries)platformChart.Series.Get(1);\n        platformSeries.SetDashArray(new float[2] { 10, 20 });\n#elif IOS || MACCATALYST\n        var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n\t\tvar platformSeries = (TelerikUI.TKChartLineSeries)platformChart.Series[1];\n        var stroke = new TelerikUI.TKStroke(UIKit.UIColor.Blue);\n        stroke.DashPattern = new Foundation.NSNumber[] { new Foundation.NSNumber(10), new Foundation.NSNumber(20) };\n        platformSeries.Style.Stroke = stroke;\n#elif WINDOWS\n        var platformChart = (Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)platformView;\n        var platformSeries = (Telerik.UI.Xaml.Controls.Chart.LineSeries)platformChart.Series[1];\n        platformSeries.StrokeDashArray = new Microsoft.UI.Xaml.Media.DoubleCollection { 10, 20 };\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Resizing at Column Level\nDESCRIPTION: XAML code demonstrating how to disable resizing for a specific column by setting the IsResizable property to False.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/resizing.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridNumericalColumn PropertyName=\"StadiumCapacity\" \n                                 HeaderText=\"Stadium Capacity\"\n                                 IsResizable=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace in a XAML file to enable styling functionalities for the TemplatedButton. The xmlns assignment allows access to Telerik control properties and methods.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Styling .NET MAUI Expander Header\nDESCRIPTION: This code example shows how to apply custom styles to the Expander header using the HeaderStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadExpander x:Name=\"expanderHeader\"\n                    IsExpanded=\"True\">\n    <telerik:RadExpander.HeaderStyle>\n        <Style TargetType=\"telerik:ExpanderHeader\">\n            <Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n            <Setter Property=\"HeightRequest\" Value=\"80\" />\n        </Style>\n    </telerik:RadExpander.HeaderStyle>\n    <telerik:RadExpander.Header>\n        <telerik:ExpanderHeader>\n            <Label Text=\"Expander Header\" />\n        </telerik:ExpanderHeader>\n    </telerik:RadExpander.Header>\n    <telerik:RadExpander.Content>\n        <Label Text=\"Expander Content\" />\n    </telerik:RadExpander.Content>\n</telerik:RadExpander>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace for Default Highlighted Time\nDESCRIPTION: Adds the required Telerik XAML namespace for using RadTimeSpanPicker control with DefaultHighlightedTime\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/default-timespan.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: TimeSpanPicker Footer Template\nDESCRIPTION: This template defines the content displayed in the footer of the TimeSpanPicker dialog (popup). It enables customization of the footer's appearance and content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='timespanpicker-footer-template' />\n```\n\n----------------------------------------\n\nTITLE: CheckBoxMode Enumeration Values in TreeView for .NET MAUI\nDESCRIPTION: Definition of the TreeViewCheckBoxMode enum values that control checkbox behavior in the TreeView control. Includes None (default), Independent, and Recursive modes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/checkboxes.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nenum TreeViewCheckBoxMode\n{\n    None,      // No checkboxes displayed\n    Independent, // Checkboxes checked independently\n    Recursive   // Checkboxes checked recursively with state propagation\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up RichTextEditor with Custom Image Picker in XAML\nDESCRIPTION: This snippet demonstrates how to configure a RichTextEditor with a custom image picker toolbar item in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/working-with-images/insert-images.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='richtexteditor-custom-image-picker' />\n```\n\n----------------------------------------\n\nTITLE: Styling Entry's Clear Button\nDESCRIPTION: XAML style specifically for the clear button of the Entry control. This defines how the clear button appears in different states of the parent Entry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/visual-states.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='entry-styling-clear-button' />\n```\n\n----------------------------------------\n\nTITLE: Defining ShapeStyleSelector Styles\nDESCRIPTION: This snippet demonstrates how to define the ShapeStyleSelector with different Styles as a resource inside a ResourceDictionary. These styles can be then applied conditionally to shapes based on the logic implemented in the custom selector.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-styling-shapeslstyleselector-styles' />\n```\n\n----------------------------------------\n\nTITLE: Validating SwissQRCodeValue in C#\nDESCRIPTION: This C# snippet outlines how to validate the fields in the SwissQRCodeValueStringBuilder. It checks for errors and, if there are none, builds the value string that will be set to the barcode control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/swissqrcode-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstring errors = qrCodeValue.Validate();\nif (string.IsNullOrEmpty(errors))\n{\n    this.Barcode.Value = qrCodeValue.BuildValue();\n}\n```\n\n----------------------------------------\n\nTITLE: Map Shapes Styling with ShapeStyle\nDESCRIPTION: This snippet demonstrates how to apply styling to shapes within a MapShapefileLayer using the ShapeStyle property. It shows how to set the StrokeWidth, StrokeColor, and FillColor for the shapes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-styling-shapeslstyle' />\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Styles for ToggleButton in XAML Resources\nDESCRIPTION: Shows how to create implicit styles for ToggleButton that will be automatically applied to all ToggleButton controls without explicitly setting the Style property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadToggleButton\">\n    <Setter Property=\"Background\" Value=\"#7C90A0\" />\n    <Setter Property=\"BorderBrush\" Value=\"#16262E\" />\n    <Setter Property=\"BorderThickness\" Value=\"2\" />\n    <Setter Property=\"TextColor\" Value=\"White\" />\n    <Setter Property=\"Padding\" Value=\"20\" />\n    <Setter Property=\"CornerRadius\" Value=\"20\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for DataGrid Search Highlighting\nDESCRIPTION: Demonstrates how to define custom styles for search result highlighting in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/search-as-you-type.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"DataGridTextCellStyle\" TargetType=\"telerik:DataGridTextCell\">\n    <Setter Property=\"SearchMatchTextColor\" Value=\"Red\" />\n</Style>\n\n<Style x:Key=\"MyCellDecorationStyle\" TargetType=\"telerik:DataGridCellDecorator\">\n    <Setter Property=\"SearchMatchBackgroundColor\" Value=\"Yellow\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext in C#\nDESCRIPTION: This C# code sets the BindingContext of the page to a new instance of the ViewModel, enabling data binding between the XAML UI elements and the ViewModel's properties and commands.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Century View Display Mode in .NET MAUI Calendar\nDESCRIPTION: Details the setup process for the century view in the .NET MAUI Calendar using Telerik UI controls. This view helps in representing all decades within a century, primarily taking the century as an input enumeration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/display-modes.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='calendar-displaymode-century'/>\n```\n\n----------------------------------------\n\nTITLE: Defining FooterStyle for TemplatedPicker\nDESCRIPTION: This snippet shows how to set the FooterStyle property in XAML for the TemplatedPicker popup, allowing custom styling for the footer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-commonbuttonstyle' />\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for PDF Viewer Custom Command\nDESCRIPTION: C# code defining a ViewModel class with a custom command that displays the file size of the PDF document when executed from the toolbar.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ToolbarCustomCommandViewModel : NotifyPropertyChangedBase\n{\n    public ToolbarCustomCommandViewModel()\n    {\n        this.DisplayFileSizeCommand = new Command<RadPdfViewer>((viewer) =>\n        {\n            if (viewer.Document == null)\n                return;\n\n            var document = viewer.Document;\n            var bytes = Telerik.Windows.Documents.Fixed.FormatProviders.Pdf.PdfFormatProvider.Export(document);\n            var fileSizeInMB = bytes.Length / (1024f * 1024f);\n            var message = string.Format(\"The document size is {0:0.00}MB\", fileSizeInMB);\n\n            Application.Current.MainPage.DisplayAlert(\"Document size\", message, \"OK\");\n        });\n    }\n\n    public ICommand DisplayFileSizeCommand { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Appointment Templates in XAML Resources\nDESCRIPTION: This XAML snippet demonstrates how to define multiple appointment templates in page resources for use with a DataTemplateSelector. It creates templates for different appointment types with distinct styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/appointment-template.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <local:AppointmentTemplateSelector x:Key=\"appointmentTemplateSelector\">\n        <local:AppointmentTemplateSelector.DefaultAppointmentTemplate>\n            <DataTemplate>\n                <Grid>\n                    <Border BackgroundColor=\"{Binding Color}\" Stroke=\"{Binding Color}\" StrokeThickness=\"1\" StrokeShape=\"RoundRectangle 5\">\n                    <Label Text=\"{Binding Title}\" Margin=\"2\" TextColor=\"White\" VerticalOptions=\"Center\"/>\n                    </Border>\n                </Grid>\n            </DataTemplate>\n        </local:AppointmentTemplateSelector.DefaultAppointmentTemplate>\n        <local:AppointmentTemplateSelector.BusinessAppointmentTemplate>\n            <DataTemplate>\n                <Grid>\n                    <Border Margin=\"0\" BackgroundColor=\"{Binding Color}\" Stroke=\"DarkGreen\" StrokeThickness=\"2\" StrokeShape=\"RoundRectangle 10\">\n                        <Label Text=\"{Binding Title}\" Margin=\"2\" TextColor=\"White\" VerticalOptions=\"Center\"/>\n                    </Border>\n                </Grid>\n            </DataTemplate>\n        </local:AppointmentTemplateSelector.BusinessAppointmentTemplate>\n        <local:AppointmentTemplateSelector.HomeAppointmentTemplate>\n            <DataTemplate>\n                <Grid>\n                    <Border Margin=\"0\" BackgroundColor=\"{Binding Color}\" Stroke=\"Brown\" StrokeThickness=\"3\" StrokeShape=\"RoundRectangle 15\">\n                        <Label Text=\"{Binding Title}\" Margin=\"2\" TextColor=\"White\" VerticalOptions=\"Center\"/>\n                    </Border>\n                </Grid>\n            </DataTemplate>\n        </local:AppointmentTemplateSelector.HomeAppointmentTemplate>        \n    </local:AppointmentTemplateSelector>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart with BarSeries in XAML for .NET MAUI\nDESCRIPTION: This XAML snippet defines a RadCartesianChart with BarSeries and subscribes to the HandlerChanged event. It sets up the chart's axes and binds the series to a data source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/rounded-corners-barseries-dotnet-maui-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadCartesianChart x:Name=\"chart\"\n                           HandlerChanged=\"chart_HandlerChanged\">\n    <telerik:RadCartesianChart.BindingContext>\n        <local:CategoricalDataViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis LabelFitMode=\"MultiLine\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:BarSeries ValueBinding=\"Value\"\n                    CategoryBinding=\"Category\"\n                    ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Location ViewModel Implementation\nDESCRIPTION: Reference to a C# ViewModel class that provides the hierarchical data structure for the TreeView example with locations, containing collections of Country, City, and Location objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-location-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining ExecuteCheckSyntaxCommand Method in C#\nDESCRIPTION: This snippet shows the implementation of the ExecuteCheckSyntaxCommand method, which is called when the AIPromptCommand is executed. It displays an alert with a message.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/predefined-ai-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ExecuteCheckSyntaxCommand(object arg)\n{\n    Application.Current.MainPage.DisplayAlert(\"executing\", \"check for syntax errors command\", \"close\");\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ScrollViewHandler to Prevent Auto-Focus in WinUI\nDESCRIPTION: This code snippet adjusts the focus behavior for ScrollView on the WinUI platform by setting the IsTabStop property of the ContentPanel to true. It should be added to App.xaml.cs to prevent the first editor within a ScrollView from automatically gaining focus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/prevent-auto-focus-first-editor-dataform-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Handlers;\nusing Microsoft.Maui.Platform;\n\npublic partial class App : Application\n{\n    public App()\n    {\n#if WINDOWS\n        ScrollViewHandler.Mapper.AppendToMapping(nameof(IScrollView.Content), MapContent);\n#endif\n\n        InitializeComponent();\n\n        MainPage = new AppShell();\n    }\n\n#if WINDOWS\n    private static void MapContent(IScrollViewHandler handler, IScrollView view)\n    {\n        if (handler.PlatformView == null || handler.MauiContext == null\n            || view.PresentedContent == null || handler.PlatformView.Content is not ContentPanel)\n        {\n            return;\n        }\n\n        var panel = (ContentPanel)handler.PlatformView.Content;\n        panel.IsTabStop = true;\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in GitHub Actions\nDESCRIPTION: YAML configuration for setting up the TELERIK_LICENSE environment variable in GitHub Actions workflow. This connects the repository secret to the build environment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/licensing/add-license-to-ci-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n    TELERIK_LICENSE: ${{ secrets.TELERIK_LICENSE }}\n```\n\n----------------------------------------\n\nTITLE: Setting DrawerTransitionFadeOpacity for Consistent SideDrawer Opacity in .NET MAUI XAML\nDESCRIPTION: This code snippet demonstrates how to set the DrawerTransitionFadeOpacity property of the RadSideDrawer control to achieve consistent opacity behavior across different platforms. The opacity is set to 0 for iOS and 1 for WinUI, ensuring that the darkening mask is not applied on iOS and the MainContent appears consistent across platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/make-sidedrawer-opacity-consistent-across-platforms-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<controls:RadSideDrawer x:Name=\"drawer\" \n                         DrawerTransitionType=\"SlideInOnTop\" \n                         DrawerTransitionFadeOpacity=\"{OnPlatform WinUI=1, iOS=0}\"\n                         DrawerLength=\"200\">\n```\n\n----------------------------------------\n\nTITLE: Defining the RadImageEditor Control in XAML\nDESCRIPTION: This snippet shows how to define a RadImageEditor control in XAML markup. This definition is referenced in the subsequent examples for saving images.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/saving-image.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='imageeditor-save-image'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPrompt with Suggestions in XAML\nDESCRIPTION: XAML code example showing how to define an AIPrompt control with suggestions applied. The example demonstrates setting up the control with a suggestions collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/suggestions.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='aiprompt-suggestions-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Mode in MAUI Rating Control\nDESCRIPTION: Example showing how to implement read-only functionality in a RadShapeRating control where users cannot modify the rating value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/read-only-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rating-features-readonly' />\n```\n\n----------------------------------------\n\nTITLE: Defining SelectedItemTemplate in XAML\nDESCRIPTION: This snippet demonstrates how to define the SelectedItemTemplate for the ListPicker, which determines how the selected item is displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"selectedItemTemplate\">\n    <Label Text=\"{Binding Name}\" FontAttributes=\"Bold\" />\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: NavigationView Fonts Resources\nDESCRIPTION: Defines the StaticResources related to fonts in the page's resources. These resources are used to style the navigation items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-fonts-resources'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Culture in C#\nDESCRIPTION: This code snippet demonstrates how to set the Culture property of the RadCalendar in the code-behind. This allows you to programmatically change the calendar's culture based on user preferences or other factors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/globalization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='calendar-setting-culture'/>\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButton with Visual States in XAML\nDESCRIPTION: This snippet shows how to define a ToggleButton in XAML, referencing visual states that will be defined in the page's resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='togglebutton-visual-states' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Backtrack Extent in XAML\nDESCRIPTION: Demonstrates how to set up a RadSlider control with minimum/maximum values, tick steps, labels placement and backtrack extent configuration. The backtrack extent allows the track to extend beyond the minimum and maximum values by a specified number of pixels.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/backtrack.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSlider Minimum=\"0\"\n                    Maximum=\"100\"\n                    Value=\"35\"\n                    TickStep=\"10\"\n                    TicksPlacement=\"End\"\n                    LabelStep=\"100\"\n                    LabelsPlacement=\"End\"\n                    BackTrackExtent=\"50\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Group Header Tap Command in C#\nDESCRIPTION: Defines a `GroupHeaderTapCommand` that extends `ListViewCommand`. The command controls the behavior when a group header is tapped, specifically allowing only top-level groups to collapse or expand.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/expand-collapse.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class GroupHeaderTapCommand : ListViewCommand\n{\n\tpublic GroupHeaderTapCommand()\n\t{\n\t\tId = CommandId.GroupHeaderTap;\n\t}\n\tpublic override bool CanExecute(object parameter)\n\t{\n\t\treturn true;\n\t}\n\tpublic override void Execute(object parameter)\n\t{\n\t\tvar context = parameter as GroupHeaderContext;\n\t\tif (context.Level > 1)\n\t\t\tcontext.IsExpanded = !context.IsExpanded;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining City Business Model in C#\nDESCRIPTION: Sample business model class representing a City with properties for Name and Population.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n    public int Population { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Collection of Data Objects using C#\nDESCRIPTION: This snippet outlines the creation of a 'ViewModel' that holds a collection of 'Data' objects, essential for data binding in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='datagrid-commands-validation-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: TimePicker Header Template (XAML)\nDESCRIPTION: This snippet shows how to define a custom template for the TimePicker header. This template customizes the dialog header.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-header-template' />\n```\n\n----------------------------------------\n\nTITLE: Implementing StrokeCompleted Event Handler\nDESCRIPTION: Event handler for the StrokeCompleted event that updates the timestamp label when a stroke is finished\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/events.md#2025-04-21_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining a ListPicker with Custom Commands in XAML\nDESCRIPTION: XAML code that demonstrates how to define a RadListPicker with ToggleCommand and ClearCommand buttons, and how to set custom AcceptCommand and CancelCommand in the PopupSettings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<StackLayout>\n    <Button Text=\"Toggle Command\" Command=\"{Binding Source={x:Reference listPicker}, Path=ToggleCommand}\"/>\n    <Button Text=\"Clear Command\" Command=\"{Binding Source={x:Reference listPicker}, Path=ClearCommand}\"/>\n    <telerik:RadListPicker Placeholder=\"Pick a name!\"\n                           x:Name=\"listPicker\" \n                           PickerMode=\"Popup\"\n                           ItemsSource=\"{Binding Items}\"\n                           DisplayMemberPath=\"FullName\">\n        <telerik:RadListPicker.PopupSettings>\n            <telerik:PickerPopupSettings AcceptCommand=\"{Binding Accept}\"\n                                         CancelCommand=\"{Binding Cancel}\" />\n        </telerik:RadListPicker.PopupSettings>\n        <telerik:RadListPicker.BindingContext>\n            <local:ViewModel/>\n        </telerik:RadListPicker.BindingContext>\n    </telerik:RadListPicker>\n</StackLayout>\n```\n\n----------------------------------------\n\nTITLE: Using TokensBehavior in XAML for RadAutoComplete Control\nDESCRIPTION: This XAML snippet illustrates how to attach the TokensBehavior to the RadAutoComplete control in a .NET MAUI application, enabling the token management in an MVVM setup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n    <telerik:RadAutoComplete x:Name=\"autoCompleteView\"\n                                        ItemsSource=\"{Binding Source}\"\n                                        TextSearchPath=\"Name\" \n                                        DisplayMode=\"Tokens\">\n        <telerik:RadAutoComplete.Behaviors>\n            <local:TokensBehavior BindingContext=\"{Binding Source={x:Reference autoCompleteView}, Path=BindingContext}\"\n                                    Tokens=\"{Binding SelectedTokens}\"/>\n        </telerik:RadAutoComplete.Behaviors>\n    </telerik:RadAutoComplete>\n    <Button Text=\"Select Token\" Command=\"{Binding SelectTokenCommand}\"/>\n    <Button Text=\"Remove Token\" Command=\"{Binding RemoveTokenCommand}\"/>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Hiding DataGrid Column Headers via Style in XAML\nDESCRIPTION: This code snippet demonstrates how to hide column headers in a Telerik UI for .NET MAUI DataGrid using XAML.  It defines a DataGridTextColumn with a HeaderStyle, setting the BackgroundColor and BorderColor to Transparent, FilterIndicatorFontSize and TextFontSize to 0, and BorderThickness to 0. The style is applied directly in the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-column-headers-maui-datagrid.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadDataGrid>\n       <telerik:RadDataGrid.Columns>\n           <telerik:DataGridTextColumn PropertyName=\"Country\">\n               <telerik:DataGridTextColumn.HeaderStyle>\n                   <telerik:DataGridColumnHeaderStyle BackgroundColor=\"Transparent\" BorderThickness=\"0\"\n                                                       BorderColor=\"Transparent\"\n                                                       FilterIndicatorFontSize=\"0\"\n                                                       TextFontSize=\"0\"/>\n               </telerik:DataGridTextColumn.HeaderStyle>\n           </telerik:DataGridTextColumn>\n       </telerik:RadDataGrid.Columns>\n   </telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Localization Manager in .NET MAUI\nDESCRIPTION: Assigns the custom localization manager instance to TelerikLocalizationManager.Manager.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/globalization-localization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTelerikLocalizationManager.Manager = new CustomTelerikLocalizationManager();\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeView Selected Item in XAML\nDESCRIPTION: Example showing how to define a TreeView control with selected item functionality in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Suggestion View Border Thickness to Zero in AutoComplete for .NET MAUI\nDESCRIPTION: This snippet modifies the SuggestionViewBorderThickness to be 0, effectively removing any surrounding border from the Suggestion View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-no-result-message-autocomplete-net-maui.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\" SuggestionViewBorderThickness=\"0\" ... />\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for CollectionView in C#\nDESCRIPTION: Defines a ViewModel class for the CollectionView, likely containing a collection of DataModel objects and related properties or methods.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/scrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik XAML Namespace\nDESCRIPTION: This snippet shows how to add the Telerik namespace to the XAML file, which is required to use the RadTreeView control and its related components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining City Business Object for AutoComplete in C#\nDESCRIPTION: Creates a City class with properties for Name and Country to be used as a business object in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/token-template.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart in XAML\nDESCRIPTION: XAML configuration for the CartesianChart with LineSeries setup including axis definitions and data bindings\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-line-series-datapoint-markers.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart x:Name=\"chart\" HandlerChanged=\"chart_HandlerChanged\">\n    <telerik:RadCartesianChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:DateTimeContinuousAxis LabelFitMode=\"Rotate\"\n                                        MajorStepUnit=\"Day\">\n        </telerik:DateTimeContinuousAxis>\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis LabelFormat=\"C\"\n                                MajorStep=\"0.5\"\n                                Minimum=\"-1\"\n                                Maximum=\"1\" />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ItemsSource=\"{Binding Data}\"\n                        CategoryBinding=\"Date\"\n                        ValueBinding=\"Value\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Setting PickerMode to DropDown in .NET MAUI ListPicker\nDESCRIPTION: This snippet shows how to configure the PickerMode property of the RadListPicker to DropDown in XAML. The DropDown mode is used primarily for desktop applications, providing a dropdown interface for value selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker PickerMode=\"DropDown\"  />\n```\n\n----------------------------------------\n\nTITLE: ListPicker Localization Keys\nDESCRIPTION: Standard localization keys for ListPicker control with default text values for header and placeholder labels\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| -----------------| ------------- |\n| `ListPicker_Popup_HeaderLabelText` | `Select Item` |\n| `ListPicker_PlaceholderLabelText` | `Select Item` |\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Resource Dictionary in XAML Application Resources\nDESCRIPTION: This XAML snippet shows how to merge a custom resource dictionary containing customized colors into the application resources. The custom dictionary is added after the TelerikTheming resources to override the default theme colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-theme.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Application.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n            <ResourceDictionary Source=\"Resources/Styles/Styles.xaml\" />\n            <local:TelerikTheming />\n\n            <!-- Add your customized colors after the TelerikTheming resources.-->\n            <ResourceDictionary Source=\"Resources/Styles/CustomTelerikSwatch.xaml\" />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Setting No Results Message in AutoComplete\nDESCRIPTION: Demonstrates how to customize the message displayed when no search results are found in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete NoResultsMessage=\"No contacts found\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadCartesianChart with ScatterSplineArea Series in XAML\nDESCRIPTION: This snippet illustrates how to declare a RadCartesianChart and integrate the ScatterSplineArea Series using XAML, providing a visual representation of data points with curved lines.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-area-series.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='chart-series-scattersplinearea-xaml' />\n```\n\n----------------------------------------\n\nTITLE: CheckBox Style Definition for DataForm Editor\nDESCRIPTION: Definition of a custom style for the RadCheckBox editor within the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/boolean-editors.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<dataform-editors-stlying-checkbox-style>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with City Collection for AutoComplete in .NET MAUI\nDESCRIPTION: Implements a ViewModel that contains a collection of City objects to provide data for the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionview-template.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-people-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to RadTreeView and TreeViewDescriptor\nDESCRIPTION: Shows how to apply the defined styles to both the main TreeView control and its descriptors for hierarchical data representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                      ItemsSource=\"{Binding Items}\" \n                      ItemStyle=\"{StaticResource TreeViewItemStyle}\">\n    <telerik:TreeViewDescriptor DisplayMemberPath=\"Name\"\n                               ItemsSourcePath=\"Countries\"\n                               ItemStyle=\"{StaticResource CountryTreeViewItemStyle}\">\n        <telerik:TreeViewDescriptor DisplayMemberPath=\"Name\"\n                                   ItemsSourcePath=\"Cities\"\n                                   ItemStyle=\"{StaticResource CountryTreeViewItemStyle}\">\n        </telerik:TreeViewDescriptor>\n    </telerik:TreeViewDescriptor>\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Stack Area Series XAML\nDESCRIPTION: Defines a RadCartesianChart with AreaSeries that use the Stack combine mode. The series are stacked on top of each other.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/features/chart-series-features-combine-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:LinearAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:AreaSeries CombineMode=\"Stack\" ItemsSource=\"{Binding Data}\" CategoryBinding=\"Category\" ValueBinding=\"Value\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Defining a Business Object with C#\nDESCRIPTION: This code snippet demonstrates the creation of a simple business object called `TemporalData` with `Date` and `Value` properties. This object is used as the data model for the chart series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/common-features.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TemporalData\n{\n    public DateTime Date { get; set; }\n\n    public double Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting TimeOnly in XAML\nDESCRIPTION: Defines a converter in XAML that converts System.TimeOnly to System.TimeSpan, allowing the use of TimeOnly values in a TimeSpanPicker. The converter facilitates setting minimum, maximum, and default highlighted times using TimeOnly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timeonly.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-timeonly-to-timespanconverter' />\n```\n\n----------------------------------------\n\nTITLE: Adding a ComboBox for City Selection in XAML\nDESCRIPTION: This XAML snippet adds a RadComboBox to the MainPage, allowing users to select a city from a list. The selected city is data-bound to the SelectedCity property in the view model, enabling real-time updates of the QRCode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/data-binding-qrcode-net-maui.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadComboBox ItemsSource=\"{Binding Cities}\" \n                     SelectedItem=\"{Binding SelectedCity, Mode=TwoWay}\"\n                     WidthRequest=\"200\" HorizontalOptions=\"Center\"\n                     VerticalOptions=\"Center\" Grid.Row=\"1\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Label Template for RangeSlider in XAML\nDESCRIPTION: Creates a custom DataTemplate for RangeSlider labels with a border and custom text color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/labels.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"customLabelTemplate\">\n    <Border BackgroundColor=\"LightGray\"\n            CornerRadius=\"10\"\n            Padding=\"10,5\">\n        <Label Text=\"{Binding}\"\n               TextColor=\"DarkRed\"\n               FontAttributes=\"Bold\" />\n    </Border>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Creating MapShapeStyleSelector Class\nDESCRIPTION: This snippet shows how to create a custom selector class that inherits from MapShapeStyleSelector. This class allows for conditional styling of shapes based on specific criteria or shape properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='map-shapesstyleselector-code' />\n```\n\n----------------------------------------\n\nTITLE: Styling DataFormRadTextMaskedEditor in XAML\nDESCRIPTION: This snippet demonstrates how to create a custom style for the DataFormRadTextMaskedEditor using XAML. It sets properties such as EntryCornerRadius, EntryBackgroundColor, and ClearButtonColor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/masked-editors.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"RadTextMaskedEditorStyle\" TargetType=\"telerik:RadTextMaskedEntry\">\n             <Setter Property=\"EntryCornerRadius\"\n                Value=\"3\" />\n             <Setter Property=\"EntryBackgroundColor\"\n                Value=\"LightSlateGrey\" />\n             <Setter Property=\"ClearButtonColor\"\n                 Value=\"DarkOrange\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Custom CheckBox Style for TreeView Items\nDESCRIPTION: Shows how to create and apply a custom style for checkboxes within TreeView items, customizing their appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style x:Key=\"CheckBoxStyle\" TargetType=\"telerik:RadCheckBox\">\n    <telerik:Style.Setters>\n        <Setter Property=\"CheckedColor\" Value=\"Red\" />\n        <Setter Property=\"CheckBoxThickness\" Value=\"4\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet adds the Telerik namespace to the XAML file. This is necessary to use the Telerik UI controls in the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Header Style in XAML\nDESCRIPTION: Style definition for the PickerPopupHeaderView, customizing background color, height, margin, padding, and layout options\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:PickerPopupHeaderView\" x:Key=\"headerStyle\">\n    <Setter Property=\"BackgroundColor\" Value=\"#00B5DC\"/>\n    <Setter Property=\"HeightRequest\" Value=\"60\"/>\n    <Setter Property=\"Margin\" Value=\"0\"/>\n    <Setter Property=\"Padding\" Value=\"0\"/>\n    <Setter Property=\"HorizontalOptions\" Value=\"FillAndExpand\"/>\n    <Setter Property=\"VerticalOptions\" Value=\"FillAndExpand\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik UI for .NET MAUI Namespace\nDESCRIPTION: Add the necessary namespace for Telerik UI controls in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/migrate-to-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n```\n\n----------------------------------------\n\nTITLE: ViewModel Binding Setup\nDESCRIPTION: Code for setting up the ViewModel as the binding context for the page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-selection-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik Controls in XAML\nDESCRIPTION: Adds the Telerik namespace required to utilize Telerik controls in .NET MAUI XAML pages. This is crucial for integrating Telerik's TemplatedPicker component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Assembly References in .NET MAUI Project\nDESCRIPTION: This XML snippet demonstrates how to configure platform-specific assembly references for Windows, iOS, MacCatalyst, and Android in a .NET MAUI project's .csproj file. It includes conditional ItemGroup elements for each platform, specifying the correct DLL locations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/using-assembly-references.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n    <!-- You can keep the SHARED assembly references in here, the document processing assemblies -->\n    <Reference Include=\"...\" />\n</ItemGroup>\n\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\">\n    <!-- Put Windows-only assembly references in here -->\n    <Reference Include=\"Telerik.WinUI.Controls\">\n      <HintPath>\"The dlls location\"\\WinUI\\Telerik.WinUI.Controls.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls\">\n      <HintPath>\"The dlls location\"\\WinUI\\Telerik.Maui.Controls.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls.Compatibility\">\n      <HintPath>\"The dlls location\"\\WinUI\\Telerik.Maui.Controls.Compatibility.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Core\">\n      <HintPath>\"The dlls location\"\\WinUI\\Telerik.Maui.Core.dll</HintPath>\n    </Reference>\n</ItemGroup>\n\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'iOS'\">\n    <!-- Put iOS-only assembly references in here -->\n   <Reference Include=\"Telerik.iOS\">\n      <HintPath>\"The dlls location\"\\iOS\\Telerik.iOS.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls\">\n      <HintPath>\"The dlls location\"\\iOS\\Telerik.Maui.Controls.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls.Compatibility\">\n      <HintPath>\"The dlls location\"\\iOS\\Telerik.Maui.Controls.Compatibility.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Core\">\n      <HintPath>\"The dlls location\"\\iOS\\Telerik.Maui.Core.dll</HintPath>\n    </Reference>\n</ItemGroup>\n\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'\">\n    <!-- Put MacCatalyst-only assembly references in here -->\n   <Reference Include=\"Telerik.MacCatalyst\">\n      <HintPath>\"The dlls location\"\\MacCatalyst\\Telerik.MacCatalyst.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls\">\n      <HintPath>\"The dlls location\"\\MacCatalyst\\Telerik.Maui.Controls.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls.Compatibility\">\n      <HintPath>\"The dlls location\"\\MacCatalyst\\Telerik.Maui.Controls.Compatibility.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Core\">\n      <HintPath>\"The dlls location\"\\MacCatalyst\\Telerik.Maui.Core.dll</HintPath>\n    </Reference>\n</ItemGroup>\n\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">\n    <!-- Put Android-only assembly references in here -->\n    <Reference Include=\"Telerik.Android.Chart\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.Chart.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Android.Common\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.Common.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Android.Data\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.Data.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Android.Input\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.Input.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Android.List\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.List.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Android.Primitives\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Android.Primitives.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Maui.Controls.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Controls.Compatibility\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Maui.Controls.Compatibility.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Telerik.Maui.Core\">\n      <HintPath>\"The dlls location\"\\Android\\Telerik.Maui.Core.dll</HintPath>\n    </Reference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: SlideView Events ViewModel\nDESCRIPTION: This C# ViewModel snippet provides the logic to handle events within the SlideView control.  It allows to manage and update the data displayed within the SlideView.  The ViewModel includes the data and logic needed for this specific slideview implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/orientation.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='slideview-events-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel in C#\nDESCRIPTION: This snippet demonstrates the implementation of a ViewModel class that provides the data for the ListPicker example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<City> Items { get; set; }\n\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<City>\n        {\n            new City() { Name = \"Tokyo\", Icon = \"tokyo.png\" },\n            new City() { Name = \"New York\", Icon = \"newyork.png\" },\n            new City() { Name = \"London\", Icon = \"london.png\" },\n            new City() { Name = \"Paris\", Icon = \"paris.png\" },\n            new City() { Name = \"Berlin\", Icon = \"berlin.png\" }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpandAll Method in C#\nDESCRIPTION: This snippet demonstrates how to implement the ExpandAll method, which is called on a button click to expand all items in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/expand-collapse.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ExpandAll_Clicked(object sender, EventArgs e)\n{\n    this.treeView.ExpandAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Increase/Decrease Buttons using Styles\nDESCRIPTION: XAML resource dictionary defining styles that set IsVisible property to False for both increase and decrease buttons.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numeric-hide-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n\t<ResourceDictionary>\n\t\t<Style x:Key=\"DecreaseButtonStyle\" TargetType=\"telerik:RadTemplatedButton\">\n\t\t\t<Setter Property=\"IsVisible\" Value=\"False\" />\n\t\t</Style>\n\n\t\t<Style x:Key=\"IncreaseButtonStyle\" TargetType=\"telerik:RadTemplatedButton\">\n\t\t\t<Setter Property=\"IsVisible\" Value=\"False\" />\n\t\t</Style>\n\t</ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Customizing CategoricalAxis Label Style and Position in XAML\nDESCRIPTION: This snippet demonstrates setting the LabelFitMode to 'Rotate', which arranges axis labels so they are rotated around their top left corner. It also specifies the font size and color for the axis labels using LabelFontSize and LabelTextColor properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/axes/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:CategoricalAxis LabelFitMode=\"Rotate\"\n\t\t\t\t\t\t\t  LabelFontSize=\"25\"\n\t\t\t\t\t\t\t  LabelTextColor=\"#FFCC88CC\"/>\n```\n\n----------------------------------------\n\nTITLE: Group Header Aggregates Configuration in XAML\nDESCRIPTION: DataGrid configuration for group header aggregates with NextToHeader alignment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-group-header-aggregates'/>\n```\n\n----------------------------------------\n\nTITLE: Toolbar Element Style Properties in .NET MAUI\nDESCRIPTION: Style properties for specific toolbar elements like overflow menu button, back navigation button, and scroll buttons. Each property accepts a Style object with specific target types.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOverflowMenuButtonStyle (Microsoft.Maui.Controls.Style)\nBackNavigationButtonStyle (Microsoft.Maui.Controls.Style)\nScrollForwardButtonStyle (Microsoft.Maui.Controls.Style)\nScrollBackwardButtonStyle (Microsoft.Maui.Controls.Style)\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik namespace in XAML\nDESCRIPTION: Shows how to add the required Telerik namespace to the XAML file to use Telerik controls including the GridSplitter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Styling RichTextEditor in .NET MAUI XAML\nDESCRIPTION: Example showing how to apply styling properties to a RichTextEditor control including border color, thickness, corner radius and background color. Note that on WinUI, BackgroundColor works best with non-transparent colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/styling/editor-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='richtexteditor-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: Shows how to add the Telerik namespace to a XAML file for using Telerik UI controls in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing ScatterSplineArea Series in C#\nDESCRIPTION: This snippet allows customization of the ScatterSplineArea Series in .NET MAUI Charts by setting properties such as Stroke, StrokeThickness, and Fill to change the series' appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-area-series.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar series = new ScatterSplineAreaSeries\n{\n\tStroke = new Color(0.6, 0.6, 0.9),\n\tStrokeThickness = 5,\n\tFill = new Color(0.8, 0.8, 1)\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for PDF Viewer Toolbar in Resources\nDESCRIPTION: This code snippet demonstrates how to define styles for the PDF Viewer toolbar items in page resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/toolbar/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-toolbar-styling-resources'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Group Item Template in XAML\nDESCRIPTION: This XAML code snippet defines a DataTemplate for a group item template, though it is not directly related to column reordering. It is included as part of the provided snippets and may be used for grouping functionality in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"GroupingPanelItemTemplate\">\n    <Border BackgroundColor=\"Red\" Padding=\"5\">\n        <Label Text=\"{Binding Value}\"/>\n    </Border>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cell Editor Style for DataGrid Columns in .NET MAUI\nDESCRIPTION: This snippet shows how to apply styling to the cell editor in a DataGrid column using the CellEditorStyle property. This defines the visual appearance of cells when they're in edit mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/columns-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='datagrid-columnstyle-celleditor'/>\n```\n\n----------------------------------------\n\nTITLE: Merging Custom Style Resources in App.xaml.cs\nDESCRIPTION: This C# code shows how to merge a custom styles resource dictionary into the application after loading the Telerik theme. It first sets the Telerik theme to 'Purple' and then adds the custom grid styles to the application's resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-component-styles.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic App()\n{\n    InitializeComponent();\n\n    var telerikTheming = Application.Current\n            .Resources\n            .MergedDictionaries\n            .OfType<TelerikTheming>()\n            .Single();\n    telerikTheming.Theme = TelerikTheming.Themes\n                        .Single(t => t.Theme == \"Telerik\" && t.Swatch == \"Purple\");\n    //Merge the custom Grid styles resource dictionary.                    \n    this.Resources.MergedDictionaries.Add(new CustomGridStyles());\n    this.MainPage = new MainPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Style\nDESCRIPTION: This snippet shows how to define the spinner style of the DateTimePicker, allowing customization of the date value selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker SpinnerStyle=\"{StaticResource SpinnerStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Handling CellTap Command in C#\nDESCRIPTION: Defines a command class 'CellTapUserCommand' that inherits from 'DataGridCommand' to handle the 'CellTap' action without triggering edit mode. This sets up the interaction but does not alter any data in Execute.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class CellTapUserCommand : DataGridCommand\n{\n    public CellTapUserCommand()\n    {\n        Id = DataGridCommandId.CellTap;\n    }\n\n    public override void Execute(object parameter)\n    {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a PersonDetails Model in C#\nDESCRIPTION: This C# code snippet defines a simple `PersonDetails` model class with properties like `Name`, `Age`, `Email`, and `Country`. This model is used as the data source for the DataGrid example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\n\nnamespace DataGridMAUI;\n\npublic class PersonDetails\n{\n    public string Name { get; set; }\n\n    public int Age { get; set; }\n\n    public string Email { get; set; }\n\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spinner Basic Properties\nDESCRIPTION: Demonstrates how to configure core Spinner properties like item length, spacing, and looping behavior\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/spinner.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:Spinner ItemLength=\"50\" \n              ItemSpacing=\"10\" \n              IsLooping=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Item Spacing in .NET MAUI Accordion\nDESCRIPTION: This XAML snippet demonstrates how to apply the Spacing property to a .NET MAUI Accordion control. The Spacing property is used to set the distance between accordion items, with a default value of 0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/item-spacing.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='accordion-key-features-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram\nDESCRIPTION: Configures the MAUI application to use Telerik controls by registering them in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slider Ticks Settings in XAML\nDESCRIPTION: Demonstrates how to configure tick step, tick placement, and snap mode for a Telerik Slider in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/ticks.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n\\<telerik:RadSlider TickStep=\"5\" \n              TicksPlacement=\"Center\" \n              SnapMode=\"SnapToTicks\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Up the ListView Control - .NET MAUI - XAML\nDESCRIPTION: This snippet shows how to set up the ListView control in XAML for .NET MAUI. It provides the structure necessary to incorporate the ListView into an application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/style-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ListView x:Name=\"myListView\">\n    <!-- ItemTemplate and other properties -->\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Accessing AutoComplete Tokens Collection in C#\nDESCRIPTION: Shows how to access the Tokens collection of a RadAutoComplete control and subscribe to its CollectionChanged event to track changes when items are added or removed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/tokens-support.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.autoComplete.Tokens.CollectionChanged;\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Layout in .NET MAUI CollectionView XAML\nDESCRIPTION: Demonstrates how to explicitly set a linear layout for the CollectionView control using XAML. The CollectionViewLinearLayout is assigned to the ItemsLayout property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/linear-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView>\n    <telerik:RadCollectionView.ItemsLayout>\n        <telerik:CollectionViewLinearLayout />\n    </telerik:RadCollectionView.ItemsLayout>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius in .NET MAUI Border\nDESCRIPTION: This snippet demonstrates how to apply different corner radii to a Border control using the CornerRadius property, enabling customization of the shape of the corners based on the Microsoft.Maui.Thickness type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/corner-radius.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nBorder border = new Border()\n{\n    CornerRadius = new CornerRadius(10, 20, 30, 40)\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the Telerik namespace to XAML for use in a .NET MAUI application. Adding the namespace allows the Telerik controls to be used within the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating Business Objects for Numerical Data in C#\nDESCRIPTION: This snippet demonstrates how to create the necessary business objects that represent the numerical data model required for the ScatterSplineArea Series in the .NET MAUI Cartesian Chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-area-series.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='numerical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Implementing IKeyLookup Interface for Price Property\nDESCRIPTION: Creates a class that implements IKeyLookup to return Price property values from the business model as double type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/delegate-aggregate-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-delegate-aggregate-key'/>\n```\n\n----------------------------------------\n\nTITLE: Handling Delete Button Click in C#\nDESCRIPTION: Configures the action to be taken when the delete button in the swipe content is clicked, removing the item from the source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/cell-swipe.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Delete_Clicked(object sender, EventArgs e)\n{\n    var item = (sender as Button).BindingContext as Item;\n    this.VM.Source.Remove(item);\n}\n```\n\n----------------------------------------\n\nTITLE: MapShapeReader Source Definition\nDESCRIPTION: This code snippet illustrates how the `Source` property of the `MapShapeReader` is defined.  This property is essential for defining the source of shape data within the `RadMap` control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-interactionmode-settintsource' />\n```\n\n----------------------------------------\n\nTITLE: RichTextEditor Localization Keys and Default Values\nDESCRIPTION: A comprehensive table showing all available localization keys for the RichTextEditor component and their corresponding default English values. These keys can be used to translate various UI elements including toolbar items, dialog texts, and context menu entries.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| -----------------| ------------- |\n| `RichTextEditor_AddHyperlink` | `Hyperlink` |\n| `RichTextEditor_AddImage` | `Image` |\n| `RichTextEditor_AlignCenter` | `Center Text` |\n| `RichTextEditor_AlignJustify` | `Justify Text` |\n| `RichTextEditor_AlignLeft` | `Align to Left` |\n| `RichTextEditor_AlignRight` | `Align to Right` |\n| `RichTextEditor_Bold` | `Bold` |\n| `RichTextEditor_BoldContextMenuText` | `Bold` |\n| `RichTextEditor_ClearFormatting` | `Clear Formatting` |\n| `RichTextEditor_Copy` | `Copy` |\n| `RichTextEditor_CopyContextMenuText` | `Copy` |\n| `RichTextEditor_Cut` | `Cut` |\n| `RichTextEditor_CutContextMenuText` | `Cut` |\n| `RichTextEditor_DecreaseIndent` | `Decrease Indent` |\n| `RichTextEditor_DialogCancelButtonText` | `Cancel` |\n| `RichTextEditor_DialogOkButtonText` | `Ok` |\n| `RichTextEditor_EditHyperlink` | `Edit Hyperlink` |\n| `RichTextEditor_EditImage` | `Edit Image` |\n| `RichTextEditor_FontColor` | `Font color` |\n| `RichTextEditor_FontFamily` | `Font` |\n| `RichTextEditor_FontSize` | `Font Size` |\n| `RichTextEditor_FontStyles` | `Styles` |\n| `RichTextEditor_Heading1` | `Heading 1` |\n| `RichTextEditor_Heading2` | `Heading 2` |\n| `RichTextEditor_Heading3` | `Heading 3` |\n| `RichTextEditor_Heading4` | `Heading 4` |\n| `RichTextEditor_Heading5` | `Heading 5` |\n| `RichTextEditor_Heading6` | `Heading 6` |\n| `RichTextEditor_HighlightColor` | `Highlight color` |\n| `RichTextEditor_HyperlinkCancelButtonText` | `Cancel` |\n| `RichTextEditor_HyperlinkHeaderText` | `Hyperlink` |\n| `RichTextEditor_HyperlinkOkButtonText` | `Ok` |\n| `RichTextEditor_HyperlinkTitleLabelText` | `Link Title:` |\n| `RichTextEditor_HyperlinkTitlePlaceholderText` | `Additional Info` |\n| `RichTextEditor_HyperlinkUrlLabelText` | `Link:` |\n| `RichTextEditor_HyperlinkUrlPlaceholderText` | `http://www....` |\n| `RichTextEditor_ImageCancelButtonText` | `Cancel` |\n| `RichTextEditor_ImageHeaderText`  | `Image` |\n| `RichTextEditor_ImageMaximumLabelText` | `100%` |\n| `RichTextEditor_ImageMinimumLabelText` | `0%` |\n| `RichTextEditor_ImageOkButtonText` | `Ok` |\n| `RichTextEditor_ImageResizeLabelText` | `Resize:` |\n| `RichTextEditor_IncreaseIndent` | `Increase Indent` |\n| `RichTextEditor_InsertImageErrorHeaderText` | `Error` |\n| `RichTextEditor_InsertImageErrorOKButtonText` | `OK` |\n| `RichTextEditor_InsertImageErrorText` | `Cannot insert image from the specified location.` |\n| `RichTextEditor_Italic` | `Italic` |\n| `RichTextEditor_ItalicContextMenuText` | `Italic` |\n| `RichTextEditor_OpenHyperlink` | `Open Hyperlink` |\n| `RichTextEditor_OpenHyperlinkContextMenuText` | `Open` |\n| `RichTextEditor_OpenHyperlinkErrorHeaderText` | `Error` |\n| `RichTextEditor_OpenHyperlinkErrorOKButtonText` | `Ok` |\n| `RichTextEditor_OpenHyperlinkErrorText` | `Cannot open url:` |\n| `RichTextEditor_OrderedList` | `Ordered Indent` |\n| `RichTextEditor_Paragraph` | `Paragraph` |\n| `RichTextEditor_Quotation` | `Quotation` |\n| `RichTextEditor_Paste` | `Paste` |\n| `RichTextEditor_PasteContextMenuText` | `Paste` |\n| `RichTextEditor_PastePlainText` | `Paste as Plain Text` |\n| `RichTextEditor_PastePlainTextContextMenuText` | `Paste as Plain Text` |\n| `RichTextEditor_Redo` | `Redo` |\n| `RichTextEditor_RemoveHyperlink` | `Remove Hyperlink` |\n| `RichTextEditor_RemoveImage` | `Remove Image` |\n| `RichTextEditor_PickImage` | `Pick Image` |\n| `RichTextEditor_SelectAllContextMenuText`  | `Select Al` |\n| `RichTextEditor_Strike` | `Strike` |\n| `RichTextEditor_Subscript` | `Subscript` |\n| `RichTextEditor_Superscript` | `Superscript` |\n| `RichTextEditor_Underline` | `Underline` |\n| `RichTextEditor_Undo` | `Undo` |\n| `RichTextEditor_UnorderedList` | `Unordered List` |\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Resizing at DataGrid Level\nDESCRIPTION: XAML code showing how to disable column resizing for the entire DataGrid by setting CanUserResizeColumns property to False.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/resizing.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" \n                     CanUserResizeColumns=\"False\"/>\n```\n\n----------------------------------------\n\nTITLE: Xamarin ListPicker XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for Telerik ListPicker in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikInput=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet adds the Telerik namespace to the XAML file. This is necessary to use the Telerik UI controls in the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: ComboBox Implementation with Applied Styling\nDESCRIPTION: XAML implementation of the ComboBox control with the custom styling and visual states applied.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/visual-states.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-styling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayLabel Style for TimeSpanPicker Control in XAML\nDESCRIPTION: This snippet provides the definition for a display label style used in the TimeSpanPicker. It specifies the key attributes influencing text appearance when the time duration is displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\" x:Key=\"displayLabelStyle\">\n    <Setter Property=\"TextColor\" Value=\"#1188FF\"/>\n    <Setter Property=\"VerticalTextAlignment\" Value=\"Center\"/>\n    <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\"/>\n    <Setter Property=\"HeightRequest\" Value=\"50\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: This snippet shows how to add the Telerik XAML namespace to the XAML file for using Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/sorting.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding DelegateGroupDescriptor to RadCollectionView in Code-Behind\nDESCRIPTION: Example of adding a DelegateGroupDescriptor to the RadCollectionView programmatically in the code-behind file, specifying a custom key lookup and sort order.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar groupDescriptor = new DelegateGroupDescriptor();\ngroupDescriptor.KeyLookup = new FirstLetterKeyLookup();\ngroupDescriptor.SortOrder = Telerik.Maui.Controls.Data.SortOrder.Descending;\nthis.collectionView.GroupDescriptors.Add(groupDescriptor);\n```\n\n----------------------------------------\n\nTITLE: Defining Chart in XAML\nDESCRIPTION: This XAML code defines a `RadCartesianChart` from the Telerik UI library. It sets up the horizontal and vertical axes, binds the `ItemsSource` of two `LineSeries` to the `Data1` and `Data2` properties of a `ViewModel` instance, and includes a `RadLegend` for displaying the series names. The `CategoryBinding` and `ValueBinding` are used to map the data properties to the chart axes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-dash-series.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart x:Name=\"chart\" HeightRequest=\"300\">\n            <telerik:RadCartesianChart.BindingContext>\n                <local:ViewModel />\n            </telerik:RadCartesianChart.BindingContext>\n            <telerik:RadCartesianChart.HorizontalAxis>\n                <telerik:CategoricalAxis />\n            </telerik:RadCartesianChart.HorizontalAxis>\n            <telerik:RadCartesianChart.VerticalAxis>\n                <telerik:NumericalAxis />\n            </telerik:RadCartesianChart.VerticalAxis>\n            <telerik:RadCartesianChart.Series>\n                <telerik:LineSeries CategoryBinding=\"XData\"\n                                    ValueBinding=\"YData\"\n                                    DisplayName=\" Data1\"\n                                    ItemsSource=\"{Binding Data1}\" />\n                <telerik:LineSeries CategoryBinding=\"XData\"\n                                    ValueBinding=\"YData\"\n                                    DisplayName=\" Data2\"\n                                    ItemsSource=\"{Binding Data2}\" />\n            </telerik:RadCartesianChart.Series>\n        </telerik:RadCartesianChart>\n        <telerik:RadLegend LegendProvider=\"{x:Reference Name=chart}\"\n                           LegendItemFontColor=\"DarkGreen\"\n                           Orientation=\"Horizontal\"\n                           HeightRequest=\"200\"/>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ProgressBar Namespace Declaration\nDESCRIPTION: XAML namespace declaration for Telerik ProgressBar in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/migrate-from-xamarin.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining an OptionsPanel for Toolbar in XAML\nDESCRIPTION: XAML code for defining a RadToolbarOptionsPanel component that can be used with an OptionsButtonToolbarItem. This panel contains the options that will be displayed when the button is clicked.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/options-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToolbarOptionsPanel x:Name=\"topPanel\" />\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButtonStyle in XAML\nDESCRIPTION: Illustrates setting the CancelButtonStyle property for a RadTimePicker's dropdown in XAML. Customizes the style of the Cancel button according to the desired UI/UX specifications. Utilizes Telerik's MAUI controls and the appropriate XAML namespace must be defined.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/dropdown-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"timepicker-style-cancel-button-style\\\" />\n```\n\n----------------------------------------\n\nTITLE: DataGrid XAML Definition with Current Cell Configuration\nDESCRIPTION: XAML markup defining the DataGrid with current cell configurations and settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/current-cell.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-currentcell-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Released Event with ToggleButton in XAML\nDESCRIPTION: XAML markup for a ToggleButton that includes the Released event handler, which is triggered when the user releases the button after pressing it.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButtonReleased\" \n                           Grid.Row=\"0\"\n                           Margin=\"0, 10, 0, 10\"\n                           HeightRequest=\"50\"\n                           BackgroundColor=\"#2E8B57\"\n                           BorderColor=\"#2E8B57\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Released=\"RadToggleButton_Released\"\n                           Text=\"Press and Release me\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a sample Item class in C#\nDESCRIPTION: This snippet shows the creation of a sample Item class for use with the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-getting-started-item' />\n```\n\n----------------------------------------\n\nTITLE: Declaring CollectionView XAML Namespace\nDESCRIPTION: Code snippet showing how to include the Telerik namespace in XAML for using the CollectionView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/multilevel-grouping.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Update XAML Namespace for .NET MAUI Chat\nDESCRIPTION: This snippet demonstrates how to update the XAML namespace when migrating from Xamarin.Forms Chat to .NET MAUI Chat.  The old namespace `clr-namespace:Telerik.XamarinForms.ConversationalUI;assembly=Telerik.XamarinForms.ConversationalUI` is replaced with `http://schemas.telerik.com/2022/xaml/maui`. This ensures that the XAML parser can correctly resolve the Telerik Chat control in the .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Implicit Style for ExpandCollapseIndicator in .NET MAUI\nDESCRIPTION: This XAML code creates an implicit style that targets the ExpandCollapseIndicator control and sets its FontAutoScalingEnabled property to False, which prevents the indicator font from automatically scaling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maintain-indicator-font-size-radexpander-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style TargetType=\"expander:ExpandCollapseIndicator\">\n            <Setter Property=\"FontAutoScalingEnabled\" Value=\"False\"/>\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Defining RadImageEditor with ImageLoaded Event Subscription in XAML\nDESCRIPTION: XAML code that defines a RadImageEditor control with a source image and subscribes to the ImageLoaded event which will be used to trigger crop mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/imageeditor-crop-mode-on-load.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadImageEditor x:Name=\"imageEditor\" \n                        Source=\"dotnet_bot.png\"\n                        ImageLoaded=\"OnImageLoaded\"/>\n```\n\n----------------------------------------\n\nTITLE: Changing Viewport in C#\nDESCRIPTION: This C# code snippet demonstrates how to manipulate the viewport of the PDF Viewer. It handles both ContinuousScroll and SinglePage layout modes, navigating to the last page of the document and adjusting the viewport accordingly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/viewport.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ChangeViewport_Clicked(object sender, EventArgs e)\n{\n    RadFixedDocument document = this.pdfViewer1.Document;\n    var currentViewport = this.pdfViewer1.Viewport;\n\n    if (this.pdfViewer1.LayoutMode == LayoutMode.ContinuousScroll)\n    {\n        double pagesHeight = 0;\n\n        for (int i = 0; i < document.Pages.Count - 1; i++)\n        {\n            pagesHeight += document.Pages[i].Size.Height;\n            pagesHeight += this.pdfViewer1.PageSpacing;\n        }\n        this.pdfViewer1.ChangeViewport(new Rect(0, pagesHeight, currentViewport.Width, currentViewport.Height));\n    }\n    else\n    {\n        this.pdfViewer1.NavigateToPage(document.Pages.Count - 1);\n        this.pdfViewer1.ChangeViewport(new Rect(0, 0, currentViewport.Width, currentViewport.Height));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configures the .NET MAUI application to use Telerik controls by registering them in the MauiProgram.cs file. This setup is required for the Rating control to function properly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataForm Styling in .NET MAUI\nDESCRIPTION: Shows how to apply basic styling properties to a DataForm control including background color, border color and thickness settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/dataform-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='dataform-styling' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configuration code to register Telerik controls within a .NET MAUI application. This is required to enable Telerik UI components in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: .NET MAUI Border Namespace\nDESCRIPTION: Specifies the XAML and C# namespaces for the RadBorder control in .NET MAUI. The XAML namespace uses a URI pointing to the Telerik schema for .NET MAUI, while the C# namespace uses a using directive for the Telerik.Maui.Controls namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Displayed Label Style in XAML\nDESCRIPTION: This snippet outlines how to customize the style of the label displayed when a date is selected in the DatePicker, ensuring clarity and aesthetic coherence.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-display-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Configuring DataPager and DataGrid XAML\nDESCRIPTION: XAML snippet demonstrating the integration of DataPager with DataGrid, showcasing how to set up paging functionality for grid data\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/datagrid.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-datapager' />\n```\n\n----------------------------------------\n\nTITLE: Defining the Business Model for CollectionView\nDESCRIPTION: C# code snippet showing the data model class definition used in the CollectionView grouping example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/multilevel-grouping.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Listing Telerik MAUI Android Libraries\nDESCRIPTION: This snippet lists the compiled DLL and XML files for Telerik MAUI controls and core functionality for Android. It includes compatibility libraries, main control libraries, and core components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_assetsApi/Binaries.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAndroid\\Telerik.Maui.Controls.Compatibility.dll\nAndroid\\Telerik.Maui.Controls.Compatibility.xml\nAndroid\\Telerik.Maui.Controls.dll\nAndroid\\Telerik.Maui.Controls.xml\nAndroid\\Telerik.Maui.Core.dll\nAndroid\\Telerik.Maui.Core.xml\n```\n\n----------------------------------------\n\nTITLE: Using Code Snippets in VS Code\nDESCRIPTION: Instructions for using code snippets with the `tm` shortcut to add Telerik MAUI components. The snippets can be accessed by typing the component name or using tm prefix, followed by tab navigation to populate attributes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-code-integration/snippets.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntm-accordion     -> Accordion\ntm-aiprompt      -> AI Prompt\ntm-autocomplete  -> AutoComplete\n/* ... and other snippets */\ntm-treeview      -> TreeView\n```\n\n----------------------------------------\n\nTITLE: Collapsing a Specific CollectionView Item in C#\nDESCRIPTION: Demonstrates how to collapse a specific item within a group using the CollapseItem() method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-collapseitem\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Theming to App.xaml Resources\nDESCRIPTION: Merge the TelerikTheming resource dictionary into the application resources in the App.xaml file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Application.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n            <ResourceDictionary Source=\"Resources/Styles/Styles.xaml\" />\n            <local:TelerikTheming />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Xamarin ImageEditor Implementation with Toolbar\nDESCRIPTION: Example showing how to implement the ImageEditor control with toolbar items in Xamarin.Forms. Demonstrates the setup of the RadImageEditor and RadImageEditorToolbar controls with various toolbar items including effects, crop, rotate, and undo/redo functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition />\n        <RowDefinition Height=\"Auto\" />\n    </Grid.RowDefinitions>\n    <telerikImageEditor:RadImageEditor x:Name=\"imageEditor\">\n        <telerikImageEditor:RadImageEditor.Source>\n            <OnPlatform x:TypeArguments=\"ImageSource\" Default=\"cat4.jpeg\">\n                <On Platform=\"UWP\">Assets\\cat4.jpeg</On>\n            </OnPlatform>\n        </telerikImageEditor:RadImageEditor.Source>\n    </telerikImageEditor:RadImageEditor>\n    <telerikImageEditor:RadImageEditorToolbar Grid.Row=\"1\" ImageEditor=\"{x:Reference imageEditor}\" AutoGenerateItems=\"False\">\n        <telerikImageEditor:EffectsToolbarItem AutoGenerateItems=\"False\">\n            <telerikImageEditor:BackToolbarItem/>\n            <telerikImageEditor:ContrastToolbarItem AutoGenerateItems=\"False\">\n                <telerikImageEditor:CancelToolbarItem HorizontalOptions=\"Start\" />\n                <telerikImageEditor:TemplateToolbarItem>\n                    <telerikImageEditor:TemplateToolbarItem.Template>\n                        <DataTemplate>\n                            <Slider Maximum=\"2\" Minimum=\"0\" Value=\"{Binding Value}\" />\n                        </DataTemplate>\n                    </telerikImageEditor:TemplateToolbarItem.Template>\n                </telerikImageEditor:TemplateToolbarItem>\n                <telerikImageEditor:ApplyToolbarItem HorizontalOptions=\"End\" />\n            </telerikImageEditor:ContrastToolbarItem>\n        </telerikImageEditor:EffectsToolbarItem>\n        <telerikImageEditor:CropToolbarItem/>\n        <telerikImageEditor:RotateLeftToolbarItem/>\n        <telerikImageEditor:RotateRightToolbarItem/>\n        <telerikImageEditor:UndoToolbarItem/>\n        <telerikImageEditor:RedoToolbarItem/>\n    </telerikImageEditor:RadImageEditorToolbar>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler with TimeRuler Label Styling\nDESCRIPTION: Example showing the XAML definition of a Scheduler control with TimeRulerLabelStyle property configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/timeruler-label-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-timerulerlabelsstyling-definition'/>\n```\n\n----------------------------------------\n\nTITLE: Creating Data for the ListView Component - .NET MAUI - C#\nDESCRIPTION: This snippet illustrates how to create a simple data source for the ListView component. It provides the necessary data structure for binding to the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/style-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic ObservableCollection<MyItem> MyItems { get; set; } = new ObservableCollection<MyItem>();\n```\n\n----------------------------------------\n\nTITLE: Include Telerik Namespace in XAML\nDESCRIPTION: This snippet adds the Telerik namespace to your XAML file, which is required to utilize Telerik UI components in your .NET MAUI application. This is a necessary step before defining Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining the NumericInput Control in XAML\nDESCRIPTION: This snippet shows how to define the NumericInput control in XAML and includes the necessary namespace declaration for Telerik controls. The 'StringFormat' property will be applied to format the numeric value when the control loses focus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/numeric-string-format.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\">\n```\n\n----------------------------------------\n\nTITLE: Defining TemplatedPicker Key Features - C#\nDESCRIPTION: This snippet demonstrates how to define a sample TemplatedPicker using C# code. It serves as the basis for the implementation of the picker's features.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: Implementing Relative Offset Gradient Range in .NET MAUI Gauge\nDESCRIPTION: XAML example demonstrating how to create a gradient range with relative offset values. The gradient transitions from blue to red across the range from -25 to 25, with the IsOffsetRelative property set to True.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/ranges.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeRangesDefinition>\n    <telerik:GaugeGradientRange IsOffsetRelative=\"True\"\n                                      From=\"-25\"\n                                      To=\"25\">\n        <telerik:RadGradientStop Offset=\"0\" Color=\"Blue\" />\n        <telerik:RadGradientStop Offset=\"1\" Color=\"Red\" />\n    </telerik:GaugeGradientRange>\n</telerik:GaugeRangesDefinition>\n```\n\n----------------------------------------\n\nTITLE: RadComboBox API Changes Comparison Table\nDESCRIPTION: Comparison table showing the API changes between Telerik MAUI versions 7.1.0 and 8.0.0+ for RadComboBox styling properties and features\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/style-combobox-visual-state.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTelerik.UI.for.MAUI <= 7.1.0:\n- DropDownButtonStyle (Style with tagtet type RadButton)\n- ClearButtonStyle (Style with tagtet type RadButton)\n- NA\n- Automation Id—RadComboBoxEntry\n- NA\n\nTelerik.UI.for.MAUI >= 8.0.0:\n- DropDownButtonStyle (Style with target type RadTemplatedButton)\n- ClearButtonStyle (Style with target type RadTemplatedButton) and set TextColor\n- VisualStates\n- Automation Id—RadComboBoxTextInput\n- TextInputStyle—Allows you to style the inner input control\n```\n\n----------------------------------------\n\nTITLE: Configuring SelectionGesture in XAML - .NET MAUI\nDESCRIPTION: This snippet illustrates how to configure the selection gesture for a RadListView in XAML, allowing item selection through holding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikDataControls:RadListView x:Name=\"listView\"\n                                 SelectionGesture=\"Hold\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Last Child Element Position\nDESCRIPTION: Shows how to use the StretchLastChild property to control the positioning and layout of the last child item in the WrapLayout collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/wrap-feature.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='wraplayout-position-lastelement'/>\n```\n\n----------------------------------------\n\nTITLE: Chart Series Categorical ViewModel\nDESCRIPTION: This is a placeholder for the categorical view model code snippet. It is responsible for providing the data to the chart series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/area-series.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-series-categorical-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Country Data Model for TreeView\nDESCRIPTION: Defines the Country model class representing mid-level items in the TreeView hierarchy, containing a collection of cities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public string Name { get; set; }\n    public IList<City> Cities { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding RadCollectionView Footer in XAML\nDESCRIPTION: Demonstrates how to hide the RadCollectionView footer by setting the ContentView's IsVisible property to False. This approach allows for dynamic footer visibility control while preserving the footer template structure.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-collectionview-footer-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView.FooterTemplate>\n    <DataTemplate>\n        <ContentView IsVisible=\"False\">\n            <telerik:RadBorder BorderColor=\"PaleVioletRed\" IsVisible=\"False\"\n                        BorderThickness=\"0, 1\"\n                        BackgroundColor=\"#F3F3F3\">\n                <Grid ColumnDefinitions=\"Auto, *\">\n                    <Label Text=\"Total cities: \"\n                    Margin=\"10\"\n                    TextColor=\"PaleVioletRed\"/>\n                    <Label Text=\"{Binding ItemsSource.Count, Source={x:Reference collectionView}}\"\n                    Grid.Column=\"1\"\n                    Margin=\"10\"\n                    TextColor=\"PaleVioletRed\"/>\n                </Grid>\n            </telerik:RadBorder>\n        </ContentView>\n    </DataTemplate>\n</telerik:RadCollectionView.FooterTemplate>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace\nDESCRIPTION: Required namespace declaration for using Telerik MAUI controls in the project\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Toggle Button for DropDown PickerMode - XAML\nDESCRIPTION: This snippet shows how to display a toggle button (arrow) for opening the drop-down UI in RadTimeSpanPicker when PickerMode is set to DropDown. The IsToggleButtonVisible property is set to True. This allows the user to explicitly open the drop-down.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\"\n\t\t\t\t\t\t\t\tPickerMode=\"DropDown\"\n\t\t\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a DataModel\nDESCRIPTION: This snippet defines a sample DataModel named `CategoricalData` with `Category` and `Value` properties, used for providing data to the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-create-custom-palette.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='categorical-data-model'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DataModel for .NET MAUI CollectionView Items\nDESCRIPTION: This C# code snippet defines the DataModel class, which represents the structure of individual items in the CollectionView. It likely includes properties that are bound to in the item templates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/header-footer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-datamodel'/>\n```\n\n----------------------------------------\n\nTITLE: ZIP Archive Structure Documentation\nDESCRIPTION: Documentation outlining the main folders and their contents in the Telerik UI for .NET MAUI ZIP archive distribution.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/zip-archive.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Binaries`—Includes the `Net8` and `Net9` folders. Each folder contains the needed assemblies for Android, iOS, MacCatalyst, and WinUI. You can use them to [manually reference] the Telerik UI for .NET MAUI DLLs in your app.\n\n* `Examples`—Contains the sample applications demonstrating the Telerik UI for .NET MAUI controls.\n\n* `LicenseAgreements`—Provides the product End-User License Agreement (EULA).\n\n* `Packages`—Contains the `Telerik.UI.for.Maui.[version].nupkg` NuGet package.\n```\n\n----------------------------------------\n\nTITLE: Encoding Password with Special Characters in PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to encode passwords containing special characters to resolve 'Error 401 Unauthorized' issues with Telerik NuGet server access. It utilizes the System.Web.HttpUtility.HtmlEncode method to perform the encoding. The code requires PowerShell and the .NET Framework's System.Web assembly to be available.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/error-unauthorized.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nAdd-Type -AssemblyName System.Web\n[System.Web.HttpUtility]::HtmlEncode('my§uper&P@§§word')\n```\n\n----------------------------------------\n\nTITLE: Telerik MAUI Path Namespace Imports\nDESCRIPTION: Lists the necessary namespace imports for working with Telerik MAUI Path controls and geometry classes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-structure.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Maui.Controls.Xaml;\nusing Microsoft.Maui.Graphics;\nusing System;\nusing Telerik.Maui.Controls;\nusing Telerik.Maui.Controls.Paths;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace to XAML\nDESCRIPTION: Code showing how to add the required Telerik namespace to a XAML file for using Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Tab Header with HeaderTemplate in .NET MAUI\nDESCRIPTION: This snippet demonstrates the use of the HeaderTemplate property in Telerik's RadTabView for .NET MAUI to customize the entire header, including inserting additional UI elements such as labels. Ensure you have Telerik UI for .NET MAUI installed. The main parameters include setting properties like BackgroundColor and BorderColor for RadBorder, and customizing content within with a Label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-tab-item-templates-tabview-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\" IsContentSwipeEnabled=\"True\">\n    <telerik:RadTabView.HeaderTemplate>\n        <ControlTemplate>\n            <telerik:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n                   BorderColor=\"{TemplateBinding BorderColor}\"\n                   BorderThickness=\"{TemplateBinding BorderThickness}\"\n                   CornerRadius=\"{TemplateBinding CornerRadius}\"\n                   Padding=\"{TemplateBinding ContentPadding}\">\n                <Grid ColumnDefinitions=\"*, 70\">\n                    <ContentPresenter Content=\"{TemplateBinding Content}\" />\n                    <Label Text=\"Extra text\" Grid.Column=\"1\" />\n                </Grid>\n            </telerik:RadBorder>\n        </ControlTemplate>\n    </telerik:RadTabView.HeaderTemplate>\n    <!-- Define tab items here -->\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Adding Style Resource for SlideViewIndicator\nDESCRIPTION: This snippet shows how to define a Style resource applied to the SlideViewIndicator within XAML. Prerequisite: a SlideView must be defined. The purpose is to customize indicator visuals such as color, size, and animation using the IndicatorStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/styling/indicator-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"slideview-indicator-styling-resource\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel as BindingContext in .NET MAUI using C#\nDESCRIPTION: Illustrates setting the LocationViewModel as the BindingContext of the page in a .NET MAUI application, which is essential for binding data to UI elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: Setting Common Error Label Style\nDESCRIPTION: XAML code demonstrating how to apply a common error label style for all editors in the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/error-message-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-error-label-style-common' />\n```\n\n----------------------------------------\n\nTITLE: Configuring SlideView Virtualization Mode\nDESCRIPTION: Shows how to configure the SlideView control with disabled virtualization by setting VirtualizationMode to None. The control binds to a Views collection in the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSlideView x:Name=\"slideView\"\n                        ItemsSource=\"{Binding Views}\" \n                        VirtualizationMode=\"None\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataForm Group Header in XAML\nDESCRIPTION: Shows how to configure various properties of a DataForm group header, including HeaderText, HeaderImageSource, and HeaderDisplayOptions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-grouping-configuration-header'/>\n```\n\n----------------------------------------\n\nTITLE: SkiaSharp Package Reference\nDESCRIPTION: XML configuration for adding SkiaSharp package reference to the project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-compatibility-net-telerik-nuget-filenotfoundexception.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n\t<PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n\t<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"9.0.0\" />\n\t<PackageReference Include=\"SkiaSharp.Views.Maui.Controls\" Version=\"2.88.9\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Person Data Class Definition\nDESCRIPTION: Data class definition for the Person model used in filtering examples\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<listview-features-filtering-data-class/>\n```\n\n----------------------------------------\n\nTITLE: Setting DataForm Validation Mode in XAML\nDESCRIPTION: Demonstrates how to set the ValidationMode property of the RadDataForm control to LostFocus in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\"\n                     ValidationMode=\"LostFocus\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting DataForm Header Display Options in XAML\nDESCRIPTION: Demonstrates how to set the HeaderDisplayOptions property for a DataForm group to display both image and text in the header.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nHeaderDisplayOptions=\"Image, Text\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel and Data for Telerik MAUI Chart\nDESCRIPTION: C# code defining the ViewModel and CategoricalData classes for populating the chart with sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-bar-series-winui-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n    public double Value { get; set; }\n}\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n        {\n            new CategoricalData { Category = \"Greenings\", Value = 52 },\n            new CategoricalData { Category = \"Perfecto\", Value = 19 },\n            new CategoricalData { Category = \"NearBy\", Value = 82 },\n            new CategoricalData { Category = \"Family\", Value = 23 },\n            new CategoricalData { Category = \"Fresh\", Value = 56 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: Declaration of the Telerik XAML namespace for using RichTextEditor components\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/context-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Xamarin BusyIndicator Namespace\nDESCRIPTION: This snippet shows the XAML namespace and C# namespace for the RadBusyIndicator control in Xamarin.Forms. It highlights how to reference the control in XAML and import the necessary namespace in C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerikPrimitives=\\\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\\\"\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.XamarinForms.Primitives;\"\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to RangeSlider Track in .NET MAUI\nDESCRIPTION: Demonstrates how to implement a RangeSlider with custom styles applied to both the back track and range track. Sets various properties including colors, thickness, and applies the previously defined custom styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/track-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"10\"\n                      Maximum=\"100\"\n                      RangeStart=\"20\"\n                      RangeEnd=\"80\"\n                      BackTrackThickness=\"12\"\n                      BackTrackColor=\"LightGray\"\n                      BackTrackStyle=\"{StaticResource CustomTrackStyle}\"\n                      RangeTrackFill=\"#2E8B57\"\n                      RangeTrackStyle=\"{StaticResource CustomRangeTrackStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderLabelStyle for Second Group in XAML\nDESCRIPTION: This snippet shows how to define a HeaderLabelStyle for the second DataForm group. It sets the text color and font size of the header label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/groups-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"DarkGray\" />\n    <Setter Property=\"FontSize\" Value=\"14\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Clearing Selection in C#\nDESCRIPTION: This C# method is called when the button is clicked and it invokes the ClearSelection method on the TemplatedPicker control to reset the selected value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/methods.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnClearSelectionClicked(object sender, EventArgs e)\n{\n    this.picker.ClearSelection();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Adds the required Telerik namespace to the XAML file for using RichTextEditor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating a DataItem Business Model in C# for ListView Context Menu\nDESCRIPTION: Defines a DataItem class that inherits from NotifyPropertyChangedBase with properties for the item name and popup state. This model will be used for ListView items that can display context menus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-context-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataItem : Telerik.Maui.Controls.NotifyPropertyChangedBase\n{\n    private string name;\n    private bool isPopupOpen;\n\n    public DataItem(string personName)\n    {\n        Name = personName;\n    }\n\n    public string Name\n    {\n        get => name;\n        set => UpdateValue(ref name, value);\n    }\n\n    public bool IsPopupOpen\n    {\n        get => isPopupOpen;\n        set => UpdateValue(ref isPopupOpen, value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid Properties for Drag Templates in XAML\nDESCRIPTION: This XAML code snippet defines the DataGrid properties related to drag templates. It sets the `ColumnReorderIndicatorTemplate` and `ColumnHeaderDragVisualTemplate` properties to the previously defined DataTemplates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid\n    x:Name=\"dataGrid\"\n    ItemsSource=\"{Binding Data}\"\n    ColumnReorderIndicatorTemplate=\"{StaticResource ReorderIndicatorTemplate}\"\n    ColumnHeaderDragVisualTemplate=\"{StaticResource HeaderDragTemplate}\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik Extensions\nDESCRIPTION: Provides the declaration of the telerik namespace necessary for integrating RadPdfViewer component events in XAML. This is a prerequisite for handling events and using Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/events.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RadScheduler MonthView with DayStyleSelector\nDESCRIPTION: Sets up the RadScheduler control with MonthView and applies a custom DayStyleSelector for weekend styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/styling-weekend-days-radscheduler-monthview-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\" ActiveViewDefinitionIndex=\"1\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition DayStyleSelector=\"{StaticResource CustomDayStyleSelector}\" />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Configuring Month View in .NET MAUI Scheduler\nDESCRIPTION: Implementation of the Month View definition in a RadScheduler control. This configuration enables the display of appointments in a monthly format, with built-in week grouping functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/views/month-view.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Creating Business Object for Pie Series in XAML\nDESCRIPTION: This snippet illustrates how to define a business object that will back the Pie Series, which allows for binding the data to the chart. The data model should be structured to include properties representing values used in the Pie Chart visualization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/pie/pie-series.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Example code for business object -->\n<BusinessObject>\n    <Property Name=\"Value\" Type=\"double\" />\n    <Property Name=\"Category\" Type=\"string\" />\n</BusinessObject>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for PieChart Data in C#\nDESCRIPTION: This C# code defines a ViewModel class that creates and populates an ObservableCollection of CategoricalData objects. This data is used to populate the PieChart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/pie-chart-custom-colors.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n\tpublic ObservableCollection<CategoricalData> Data { get; set; }\n\n\tpublic ViewModel()\n\t{\n\t\tthis.Data = GetCategoricalData();\n\t}\n\n\tprivate static ObservableCollection<CategoricalData> GetCategoricalData()\n\t{\n\t\tvar data = new ObservableCollection<CategoricalData>\n\t\t{\n\t\t\tnew CategoricalData { Category = \"Greenings\", Value = 52 },\n\t\t\tnew CategoricalData { Category = \"Perfecto\", Value = 19 },\n\t\t\tnew CategoricalData { Category = \"NearBy\", Value = 82 },\n\t\t\tnew CategoricalData { Category = \"Family\", Value = 23 },\n\t\t\tnew CategoricalData { Category = \"Fresh\", Value = 56 },\n\t\t};\n\t\treturn data;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in the CreateMauiApp Method - C#\nDESCRIPTION: This C# code snippet demonstrates how to register Telerik controls within a .NET MAUI application. The `UseTelerik` method is called on the MauiApp builder to ensure that Telerik UI components are properly integrated into the application. The method also configures the app and the fonts.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RadTimePicker in XAML\nDESCRIPTION: This snippet illustrates how to define a RadTimePicker in XAML with its drop-down styling. It shows how to apply styling properties through DropDownSettings. No additional dependencies are specified, but telerik namespace must be included. Inputs include various styles such as DropDownViewStyle and FooterStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"timepicker-dropdown-style\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressed Event with ToggleButton in XAML\nDESCRIPTION: XAML code that configures a ToggleButton with the Pressed event handler, which fires when the button is initially pressed but not yet released.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButtonPressed\" \n                           Grid.Row=\"0\"\n                           Margin=\"0, 10, 0, 10\"\n                           HeightRequest=\"50\"\n                           BackgroundColor=\"#2E8B57\"\n                           BorderColor=\"#2E8B57\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           Pressed=\"RadToggleButton_Pressed\"\n                           Text=\"Press me\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Display Options for ButtonToolbarItem in .NET MAUI\nDESCRIPTION: This snippet shows how to define a style targeting the ButtonToolbarItemView in XAML, setting the DisplayOptions to show both text and image. It allows customization of the ButtonToolbarItem's appearance to combine both visual elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-image-text-buttontoolbaritem-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<Style TargetType=\"telerik:ButtonToolbarItemView\">\n    <Setter Property=\"DisplayOptions\" Value=\"Text, Image\"/>\n    <Setter Property=\"ImagePosition\" Value=\"Right\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in TreeView\nDESCRIPTION: XAML configuration for enabling multiple selection in TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='treeview-multiple-selection'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data for DataPager - .NET MAUI\nDESCRIPTION: This snippet provides an example of how to define sample data for use with the DataPager in a .NET MAUI application. This data is crucial for demonstrating the functionality of paging within the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/collectionview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datapager-data' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the telerik namespace in XAML. This namespace is necessary to reference and use Telerik UI controls in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: MAUI ListPicker XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for Telerik ListPicker in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Clear Button Style in XAML\nDESCRIPTION: This snippet illustrates how to style the Clear button of the DatePicker, offering control over its appearance to improve usability and integration with the overall application design.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-clear-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Styling DataFormRadCheckBoxEditor in XAML\nDESCRIPTION: Example of styling a DataFormRadCheckBoxEditor with background color, border color and border thickness properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/boolean-editors.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<dataform-editors-styling>\n```\n\n----------------------------------------\n\nTITLE: Styling the TreeView Expand Button\nDESCRIPTION: Shows how to customize the appearance of the expand/collapse button in TreeView items using TreeViewItemExpandButton styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style TargetType=\"telerik:TreeViewItemExpandButton\">\n    <telerik:Style.Setters>\n        <Setter Property=\"BackgroundColor\" Value=\"LightGreen\" />\n        <Setter Property=\"BorderColor\" Value=\"Green\" />\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"CornerRadius\" Value=\"20\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for Chart Series in C#\nDESCRIPTION: This snippet shows how to create a ViewModel that will support the ScatterSplineArea Series in the .NET MAUI Chart, allowing data binding and management of data points.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-area-series.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='chart-series-numerical-view-model' />\n```\n\n----------------------------------------\n\nTITLE: Adding DelegateGroupDescriptor to DataGrid\nDESCRIPTION: This snippet shows how to add a DelegateGroupDescriptor to the RadDataGrid's GroupDescriptors collection in .NET MAUI. It also demonstrates how to set the KeyLookup property to an instance of a custom IKeyLookup implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/delegate-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"<snippet id='datagrid-grouping-delegategroupdescriptor' />\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeSlider to Enable Only Thumb Dragging\nDESCRIPTION: Shows how to configure the RangeSlider to allow dragging only the start and end thumbs but not the range track.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/range-thumb.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-drag-both-thumbs-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Customizing RadioButtonToolbarItem Style Using XAML in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to define a Style for RadioButtonToolbarItems using VisualStateManager to manage different visual states like Normal, PointerOver, Selected, and Disabled, allowing for visual customization when items are selected or interacted with.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-radiobuttontoolbaritem-style-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentView.Resources>\n    <Style x:Key=\"RadioStyle\" TargetType=\"telerik:RadioButtonToolbarItemView\">\n        <Setter Property=\"DisplayOptions\" Value=\"Text\" />\n        <Setter Property=\"VisualStateManager.VisualStateGroups\">\n            <VisualStateGroupList>\n                <VisualStateGroup Name=\"CommonStates\">\n                    <VisualState Name=\"Normal\" />\n                    <VisualState Name=\"PointerOver\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BorderBrush\" Value=\"HotPink\" />\n                            <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Selected\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BackgroundColor\" Value=\"Blue\" />\n                            <Setter Property=\"TextColor\" Value=\"LightBlue\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"SelectedDisabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"BackgroundColor\" Value=\"Gray\" />\n                            <Setter Property=\"TextColor\" Value=\"LightGray\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Disabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"TextColor\" Value=\"LightGray\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n        </Setter>\n    </Style>\n</ContentView.Resources>\n\n<VerticalStackLayout Margin=\"0,20\">\n    <telerik:RadToolbar x:Name=\"toolbar\" >\n        <telerik:GroupToolbarItem>\n            <telerik:RadioButtonToolbarItem Text=\"12B\" Style=\"{StaticResource RadioStyle}\" />\n            <telerik:RadioButtonToolbarItem Text=\"12C\" Style=\"{StaticResource RadioStyle}\" />\n            <telerik:RadioButtonToolbarItem Text=\"12E\" Style=\"{StaticResource RadioStyle}\" />\n        </telerik:GroupToolbarItem>\n    </telerik:RadToolbar>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace\nDESCRIPTION: Adds the required Telerik XAML namespace for using RadTimeSpanPicker control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/default-timespan.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to .NET MAUI ComboBox\nDESCRIPTION: This XAML snippet shows how to apply custom styles to a ComboBox control in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-styling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Using NavigateToIndex Method in .NET MAUI SlideView\nDESCRIPTION: The NavigateToIndex method allows programmatic navigation to a specific item in the SlideView. It accepts an index parameter to specify the target item and an optional useAnimation parameter to control the transition animation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nNavigateToIndex(int index, bool useAnimation = true)\n```\n\n----------------------------------------\n\nTITLE: Displaying Localization Keys and Default Values for .NET MAUI Scheduler\nDESCRIPTION: This markdown table shows the localization keys and their corresponding default English values for various elements of the Telerik UI for .NET MAUI Scheduler control. It includes keys for view definitions, appointment editing, recurrence settings, and confirmation dialogs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `Scheduler_WeekViewDefinition_Title`  | `Week` |\n| `Scheduler_MultidayViewDefinition_Title` | `Multiday` |\n| `Scheduler_DayViewDefinition_Title`  | `Day` |\n| `Scheduler_MonthViewDefinition_Title` | `Month` |\n| `Scheduler_Today_Header_Text` | `Today` |\n| `Scheduler_Empty_ViewDefinition_Text` | `Please declare a View definition` |\n| `Scheduler_EditAppointmentDialog_Subject` | `Subject`|\n| `Scheduler_EditAppointmentDialog_StartTime` | `Start Time` |\n| `Scheduler_EditAppointmentDialog_EndTime` | `End Time` |\n| `Scheduler_EditAppointmentDialog_AllDay` | `All Day` |\n| `Scheduler_EditAppointmentDialog_Repeat` | `Repeat` |\n| `Scheduler_EditAppointmentDialog_Description` | `Description` |\n| `Scheduler_EditAppointmentDialog_Save` | `Save` |\n| `Scheduler_EditAppointmentDialog_Cancel` | `Cancel` |\n| `Scheduler_EditAppointmentDialog_Edit` | `Edit` |\n| `Scheduler_EditAppointmentDialog_Repeat_DoesNotRepeat` | `Does not repeat` |\n| `Scheduler_EditAppointmentDialog_Repeat_Daily` | `Repeat daily` |\n| `Scheduler_EditAppointmentDialog_Repeat_Weekly` | `Repeat weekly` |\n| `Scheduler_EditAppointmentDialog_Repeat_Monthly` | `Repeat monthly` |\n| `Scheduler_EditAppointmentDialog_Repeat_Yearly` | `Repeat yearly` |\n| `Scheduler_EditAppointmentDialog_Repeat_Edit` | `Edit` |\n| `Scheduler_EditRecurrenceDialog_Repeat` | `Repeat` |\n| `Scheduler_EditRecurrenceDialog_Every` | `Every` |\n| `Scheduler_EditRecurrenceDialog_On` | `On` |\n| `Scheduler_EditRecurrenceDialog_End` | `End` |\n| `Scheduler_EditRecurrenceDialog_Repeat_Daily` | `Daily` |\n| `Scheduler_EditRecurrenceDialog_Repeat_Weekly` | `Weekly` |\n| `Scheduler_EditRecurrenceDialog_Repeat_Monthly` | `Monthly` |\n| `Scheduler_EditRecurrenceDialog_Repeat_Yearly` | `Yearly` |\n| `Scheduler_EditRecurrenceDialog_End_On_This_Day` | `on this day` |\n| `Scheduler_EditRecurrenceDialog_End_After` | `after` |\n| `Scheduler_EditRecurrenceDialog_End_After_Occurrences` | `occurrences` |\n| `Scheduler_EditRecurrenceDialog_End_No_End_Date` | `no end date` |\n| `Scheduler_EditRecurrenceDialog_Days` | `day(s)` |\n| `Scheduler_EditRecurrenceDialog_Day` | `day` |\n| `Scheduler_EditRecurrenceDialog_Weeks` | `week(s)` |\n| `Scheduler_EditRecurrenceDialog_Months` | `month(s)` |\n| `Scheduler_EditRecurrenceDialog_On_First` | `First` |\n| `Scheduler_EditRecurrenceDialog_On_Second` | `Second` |\n| `Scheduler_EditRecurrenceDialog_On_Third` | `Third` |\n| `Scheduler_EditRecurrenceDialog_On_Fourth` | `Fourth` |\n| `Scheduler_EditRecurrenceDialog_On_Last` | `Last` |\n| `Scheduler_EditRecurrenceDialog_On_Day` | `Day` |\n| `Scheduler_EditRecurrenceDialog_On_Weekday` | `Weekday` |\n| `Scheduler_EditRecurrenceDialog_On_Weekend_Day` | `Weekend Day` |\n| `Scheduler_EditRecurrenceDialog_Summary_Daily_Single` | `Occurs every day starting {0}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Daily_Multiple` | `Occurs every {0} days starting {1}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Weekly_Single` | `Occurs every {0} starting {1}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Weekly_Multiple` | `Occurs every {0} weeks on {1} starting {2}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Monthly_Single_Day` | `Occurs day {0} of every month starting {1}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Monthly_Multiple_Day` | `Occurs day {0} of every {1} months starting {2}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Monthly_Single_Week` | `Occurs the {0} {1} of every month starting {2}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Monthly_Multiple_Week` | `Occurs the {0} {1} of every {2} months starting {3}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Yearly_Day` | `Occurs every {0} {1} starting {2}.` |\n| `Scheduler_EditRecurrenceDialog_Summary_Yearly_Week` | `Occurs the {0} {1} of {2} starting {3}.` |\n| `Scheduler_EditRecurrenceChoiceDialog_Edit_Occurrence` | `Edit this occurrence.` |\n| `Scheduler_EditRecurrenceChoiceDialog_Edit_Series` | `Edit the series.` |\n| `Scheduler_EditRecurrenceChoiceDialog_Edit` | `Edit` |\n| `Scheduler_EditRecurrenceChoiceDialog_Cancel` | `Cancel` |\n| `Scheduler_ConfirmDeleteDialog_Question_Occurrence` | `Are you sure you want to delete this occurrence?` |\n| `Scheduler_ConfirmDeleteDialog_Question_Series` | `Are you sure you want to delete the series?` |\n| `Scheduler_ConfirmDeleteDialog_Delete` | `Delete` |\n| `Scheduler_ConfirmDeleteDialog_Cancel` | `Cancel` |\n| `Scheduler_DeleteAppointmentChoiceDialog_Header` | `Delete Appointment\"` |\n| `Scheduler_DeleteAppointmentChoiceDialog_Question_Appointment` | `Are you sure you want to delete this appointment?` |\n| `Scheduler_DeleteAppointmentChoiceDialog_Delete` | `Delete` |\n| `\"Scheduler_DeleteAppointmentChoiceDialog_Cancel` | `Cancel` |\n| `Scheduler_DeleteRecurrenceChoiceDialog_Delete_Occurrence` | `Delete this occurrence.` |\n| `Scheduler_DeleteRecurrenceChoiceDialog_Delete_Series` | `Delete the series.` |\n| `Scheduler_DeleteRecurrenceChoiceDialog_Delete` | `Delete` |\n| `Scheduler_DeleteRecurrenceChoiceDialog_Cancel` | `Cancel` |\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with Custom Error Message in C#\nDESCRIPTION: This code snippet demonstrates how to define a ViewModel property with the `Required` attribute and a custom error message. This allows developers to provide more specific and user-friendly error messages when validation fails.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-localization-dotnet-maui-dataform.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyViewModel\n{\n    [Required(ErrorMessage = \"My custom error message.\")]\n    public string MyProperty { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image in .NET MAUI Button\nDESCRIPTION: This XAML snippet demonstrates how to set an image as the background of a .NET MAUI Button using the `BackgroundImage` property. The `BackgroundImageSource` is set to a specific image resource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='button-backgroundimage' />\n```\n\n----------------------------------------\n\nTITLE: Styling Accept Button\nDESCRIPTION: Customizes the appearance of the Accept button in the DatePicker popup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings AcceptButtonStyle=\"{StaticResource AcceptButtonStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: ListPicker Placeholder Label Style Definition\nDESCRIPTION: Style definition for placeholder label in ListPicker marked with snippet id 'listpicker-style-placeholder-label-style'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-placeholder-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting PickerMode to DropDown in TimeSpanPicker - XAML\nDESCRIPTION: This snippet shows how to configure the RadTimeSpanPicker to use the DropDown PickerMode, which presents the time selection UI as a drop-down list. The Time property is initialized. This mode is commonly used for desktop applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\"\n                                PickerMode=\"DropDown\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the Cartesian Chart with OHLC Series - XAML\nDESCRIPTION: This snippet shows how to define the structure and layout of a RadCartesianChart using XAML, incorporating OHLC Series for financial data visualization. Dependencies include the Telerik UI for .NET MAUI Chart control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/ohlc-series.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='chart-series-ohlc-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting CheckBox Indeterminate Colors in .NET MAUI\nDESCRIPTION: Demonstrates setting the indeterminate state colors including both the background/border color and the symbol color of the CheckBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox IndeterminateColor=\"Blue\" IndeterminateSymbolColor=\"White\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring LabelToolbarItem Properties in .NET MAUI\nDESCRIPTION: Demonstrates the main properties available for configuring a LabelToolbarItem in .NET MAUI. The Text property sets the label text, while ImageSource specifies an optional image to display alongside the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/label.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nText = \"Label Text\"\nImageSource = ImageSource.FromFile(\"image.png\")\n```\n\n----------------------------------------\n\nTITLE: NumericInput Entry Template Definition in XAML\nDESCRIPTION: XAML template definition for the NumericInputEntry with a Loaded event handler to enable MinWidth customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numericinput-overriding-winui-minwidth.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:NumericInputEntry x:Name=\"PART_Entry\"\n                           Style=\"{TemplateBinding ActualEntryStyle}\"\n                           Loaded=\"OnNumericInputLoaded\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Header Navigation Item in XAML\nDESCRIPTION: Demonstrates how to add a navigation item to the header of the NavigationView Pane by setting the Position property to Header\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/pane.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:NavigationViewItem Text=\"Item 1\" \n                            Position=\"Header\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Indeterminate Mode in Telerik ProgressBar for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to enable Indeterminate mode in a RadLinearProgressBar by setting the IsIndeterminate property to True. This mode is useful for operations where progress cannot be measured.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/indeterminate-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet shows how to add the Telerik namespace to a XAML file.  This namespace is required to use the Telerik UI for .NET MAUI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Style for RadCollectionViewItemView in XAML\nDESCRIPTION: This XAML snippet defines a custom ControlTemplate and Style for RadCollectionViewItemView to remove the selection indicator and customize the appearance of items in RadCollectionView on Windows. It includes visual states for normal, mouse over, and selected states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-selection-indicator-collectionview-windows.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <ControlTemplate x:Key=\"RadCollectionViewItem_ControlTemplate_WinUI\">\n            <ContentPresenter />\n        </ControlTemplate>\n\n        <Style TargetType=\"telerik:RadCollectionViewItemView\">\n            <Setter Property=\"BorderColor\" Value=\"#80CBC4\" />\n            <Setter Property=\"ControlTemplate\" Value=\"{StaticResource RadCollectionViewItem_ControlTemplate_WinUI}\"/>\n            <Setter Property=\"BorderThickness\" Value=\"0, 0, 0, 1\" />\n            <Setter Property=\"CornerRadius\" Value=\"0\" />\n            <Setter Property=\"VisualStateManager.VisualStateGroups\">\n                <VisualStateGroupList>\n                    <VisualStateGroup Name=\"CommonStates\">\n                        <VisualState Name=\"Normal\" />\n                        <VisualState Name=\"MouseOver\">\n                            <VisualState.Setters>\n                                <Setter Property=\"BackgroundColor\" Value=\"#D6EEEC\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                        <VisualState Name=\"Selected\">\n                            <VisualState.Setters>\n                                <Setter Property=\"BackgroundColor\" Value=\"#C4E6E3\" />\n                            </VisualState.Setters>\n                        </VisualState>\n                    </VisualStateGroup>\n                </VisualStateGroupList>\n            </Setter>\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\n<telerik:RadCollectionView ItemsSource=\"{Binding Locations}\"\n                           SelectionMode=\"Multiple\"\n                           SelectedItems=\"{Binding SelectedLocations}\"\n                           DisplayMemberPath=\"City\">\n    <telerik:RadCollectionView.BindingContext>\n        <local:ViewModel />\n    </telerik:RadCollectionView.BindingContext>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Loading Example Icons Stylesheet in HTML\nDESCRIPTION: HTML link element that references an external CSS stylesheet for styling example icons used in the documentation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/examples-icons.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"style-examples.css\" />\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik XAML Namespace\nDESCRIPTION: XML namespace declaration required to use Telerik UI controls in XAML. This namespace is essential for referencing Telerik components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Model in .NET MAUI Application\nDESCRIPTION: This snippet defines a simple Customer class model used to represent customer data in a .NET MAUI application with properties for name and email.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Customer\n{\n    public Customer(string name, string email)\n    {\n        this.Name = name;\n        this.Email = email;\n    }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: API Removals - Obsolete Classes\nDESCRIPTION: Removal of obsolete classes RadResourceDictionary and TelerikForms. RadResourceDictionary should be replaced with ResourceDictionary.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/7-0-0.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Removed classes:\nRadResourceDictionary // Use ResourceDictionary instead\nTelerikForms\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel\nDESCRIPTION: This snippet defines the `ViewModel` class containing three `ObservableCollection<CategoricalData>` properties (`Data1`, `Data2`, `Data3`) which hold the data for the chart. It also includes methods to populate these collections with sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-create-custom-palette.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        this.Data1 = GetCategoricalData1();\n        this.Data2 = GetCategoricalData2();\n        this.Data3 = GetCategoricalData3();\n    }\n\n    public ObservableCollection<CategoricalData> Data1 { get; set; }\n\n    public ObservableCollection<CategoricalData> Data2 { get; set; }\n\n    public ObservableCollection<CategoricalData> Data3 { get; set; }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData1()\n    {\n        var data = new ObservableCollection<CategoricalData>  {\n            new CategoricalData { Category = \"A\", Value = 0.63 },\n            new CategoricalData { Category = \"B\", Value = 0.85 },\n            new CategoricalData { Category = \"C\", Value = 1.05 },\n            new CategoricalData { Category = \"D\", Value = 0.96 },\n            new CategoricalData { Category = \"E\", Value = 1.1 },\n        };\n        return data;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData2()\n    {\n        var data = new ObservableCollection<CategoricalData>  {\n            new CategoricalData { Category = \"A\", Value = 0.23 },\n            new CategoricalData { Category = \"B\", Value = 0.35 },\n            new CategoricalData { Category = \"C\", Value = 0.55 },\n            new CategoricalData { Category = \"D\", Value = 0.66 },\n            new CategoricalData { Category = \"E\", Value = 0.77 },\n        };\n        return data;\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData3()\n    {\n        var data = new ObservableCollection<CategoricalData>  {\n            new CategoricalData { Category = \"A\", Value = 1.63 },\n            new CategoricalData { Category = \"B\", Value = 1.85 },\n            new CategoricalData { Category = \"C\", Value = 2.05 },\n            new CategoricalData { Category = \"D\", Value = 1.96 },\n            new CategoricalData { Category = \"E\", Value = 1.78 },\n        };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Load on Demand Logic in C#\nDESCRIPTION: A C# ViewModel class that handles the logic for loading child nodes on demand. It includes the crucial functionality to check child nodes if their parent is checked when they are loaded dynamically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/treeview-net-maui-load-children-checkbox-recursive.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LoadChildrenOnDemandViewModel : Telerik.Maui.Controls.NotifyPropertyChangedBase\n{\n\tprivate const int nodesCount = 10;\n\tprivate const int loadDelay = 2000;\n\tprivate ObservableCollection<TreeNode> treeNodes = new ObservableCollection<TreeNode>();\n\tprivate ObservableCollection<TreeNode> checkedTreeNodes = new ObservableCollection<TreeNode>();\n\tprivate Command loadChildrenOnDemandCommand;\n\tprivate int nodeIndex;\n\n\tpublic LoadChildrenOnDemandViewModel()\n\t{\n\t\tthis.treeNodes = new ObservableCollection<TreeNode>();\n\t\tthis.checkedTreeNodes = new ObservableCollection<TreeNode>();\n\t\tthis.loadChildrenOnDemandCommand = new Command<Telerik.Maui.Controls.TreeView.TreeViewLoadChildrenOnDemandCommandContext>(LoadOnDemand);\n\t\tInitializeRootNodes();\n\t}\n\n\tpublic ObservableCollection<TreeNode> TreeNodes => this.treeNodes;\n\tpublic ObservableCollection<TreeNode> CheckedTreeNodes => this.checkedTreeNodes;\n\tpublic ICommand LoadChildrenOnDemandCommand => this.loadChildrenOnDemandCommand;\n\n\tprivate void InitializeRootNodes()\n\t{\n\t\tfor (int itemIndex = 0; itemIndex < nodesCount; itemIndex++)\n\t\t{\n\t\t\tvar node = this.CreateTreeNode();\n\t\t\tthis.treeNodes.Add(node);\n\t\t}\n\t}\n\n\tprivate async void LoadOnDemand(Telerik.Maui.Controls.TreeView.TreeViewLoadChildrenOnDemandCommandContext commandContext)\n\t{\n\t\tif (commandContext.Item is TreeNode parentNode)\n\t\t{\n\t\t\tawait Task.Delay(2000); // Simulate loading delay\n\t\t\tLoadChildNodes(parentNode);\n\t\t}\n\t\tcommandContext.Finish();\n\t}\n\n\tprivate void LoadChildNodes(TreeNode parentNode)\n\t{\n\t\tfor (int itemIndex = 0; itemIndex < nodesCount; itemIndex++)\n\t\t{\n\t\t\tvar childNode = this.CreateTreeNode();\n\t\t\tchildNode.Parent = parentNode;\n\t\t\tparentNode.Children.Add(childNode);\n\n\t\t\tif (parentNode.IsChecked == true)\n\t\t\t{\n\t\t\t\tthis.checkedTreeNodes.Add(childNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate TreeNode CreateTreeNode()\n\t{\n\t\tthis.nodeIndex++;\n\n\t\treturn new TreeNode\n\t\t{\n\t\t\tName = $\"Node {this.nodeIndex}\"\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace\nDESCRIPTION: This snippet shows how to include the necessary Telerik namespace in XAML for utilizing the TimeSpanPicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Add at the top of your XAML file -->\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: ListPicker Header Label Style\nDESCRIPTION: Defines the style for the header label in the ListPicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-header-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for .NET MAUI BadgeView\nDESCRIPTION: The required namespace declaration for using Telerik UI for .NET MAUI controls, including the BadgeView component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/customization.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Handling Select All CheckBox State Changes in C#\nDESCRIPTION: C# code that implements the CheckBox state change handler to execute SelectAll or ClearSelection commands on the ComboBox. Includes a helper method to find the parent ComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/adding-select-all-option-combobox-dropdown-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadCheckBox_IsCheckedChanged(object sender, IsCheckedChangedEventArgs e)\n{\n    RadCheckBox cb = (RadCheckBox)sender;\n    MyComboBox mcb = GetMyComboBox(cb);\n\n    if (cb.IsChecked.HasValue && cb.IsChecked.Value)\n    {\n        mcb.SelectAllCommand.Execute(null);\n    }\n    else\n    {\n        mcb.ClearSelectionCommand.Execute(null);\n\n    }\n}\n\nprivate static MyComboBox GetMyComboBox(Element element)\n{\n    if (element is MyComboBox myComboBox1)\n    {\n        return myComboBox1;\n    }\n\n    if (element == null)\n    {\n        return null;\n    }\n\n    return GetMyComboBox(element.Parent); //get ComboBox control recursively\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model for CollectionView Commands in C#\nDESCRIPTION: This code snippet defines a sample model class used in the CollectionView commands examples. It includes properties for Id and Name.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Telerik Namespace\nDESCRIPTION: This snippet shows how to define the Telerik namespace in XAML, which is necessary for accessing Telerik UI components for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView in XAML\nDESCRIPTION: Declares a RadCollectionView control in XAML, setting up its structure and bindings for programmatic scrolling demonstration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/scrolling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-programmatic-scrolling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete Control Structure\nDESCRIPTION: XAML markup for defining the AutoComplete control structure with styling applied.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/visual-states.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-styling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing PaneClosed Event - XAML\nDESCRIPTION: This snippet illustrates the implementation of the PaneClosed event. It allows the application to react when the pane closing animation completes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-events-paneclosed' />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadDataGrid in XAML - XAML\nDESCRIPTION: This snippet shows how to declare a 'RadDataGrid' in XAML for displaying the collection of Person objects with their nested properties in the UI. It demonstrates the integration of XAML with the Telerik framework.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/nested-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid ItemsSource=\"{Binding People}\" />\n```\n\n----------------------------------------\n\nTITLE: Applying ContentTemplate to .NET MAUI Popup in XAML\nDESCRIPTION: Shows how to apply a previously defined ContentTemplate to a RadPopup control in XAML. The template is referenced by its key and applied to the ContentTemplate property of the popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/content.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='popup-features-contenttemplate-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining CityModel in C# for .NET MAUI CollectionView\nDESCRIPTION: This C# code defines a CityModel class used as a data model for the CollectionView items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CityModel\n{\n    public string Name { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace to a XAML file, which is necessary for using Telerik controls within a .NET MAUI application. The `telerik` namespace allows access to Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Default MaskedEntry ControlTemplate for .NET MAUI\nDESCRIPTION: The default ControlTemplate for a RadMaskedEntry control that can be customized. This template shows all the bindings to the parent MaskedEntry properties but does not yet include border customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-border-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"MyMaskedEntry_ControlTemplate\">\n    <telerik:RadEntry AutomationId=\"MaskedEntryView\"\n                        IsValueValid=\"{Binding IsValueValid, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ValidationErrorMessage=\"{Binding ActualValidationErrorMessage, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        IsReadOnly=\"{Binding IsReadOnly, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        IsEnabled=\"{Binding IsEnabled, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        Placeholder=\"{Binding Placeholder, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        FontFamily=\"{Binding FontFamily, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        FontSize=\"{Binding FontSize, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ClearButtonVisibility=\"{Binding ClearButtonVisibility, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ClearButtonColor=\"{Binding ClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        HoveredClearButtonColor=\"{Binding HoveredClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        PressedClearButtonColor=\"{Binding PressedClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        BackgroundColor=\"{Binding EntryBackgroundColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        CornerRadius=\"{Binding EntryCornerRadius, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        TextColor=\"{Binding TextColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        Keyboard=\"{Binding Keyboard, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"/>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining the Telerik Namespace (XAML)\nDESCRIPTION: This code snippet shows how to add the Telerik namespace in XAML, which is necessary for using Telerik controls and components, including the NavigationView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting DisplayOptions for DropDownButtonToolbarItem in .NET MAUI\nDESCRIPTION: This XAML example shows how to configure the DisplayOptions property for a DropDownButtonToolbarItemView in a .NET MAUI application. By setting DisplayOptions to include both 'Text' and 'Image', developers can ensure that toolbar items display both text labels and icons. This customization involves specifying a style in the ContentPage.Resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dropdown-button-toolbaritem-net-maui-toolbar.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <Style TargetType=\"telerik:DropDownButtonToolbarItemView\">\n            <Setter Property=\"DisplayOptions\" Value=\"Text,Image\" />\n        </Style>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: ListPicker Cancel Button Style\nDESCRIPTION: Specifies styling for the Cancel button in the ListPicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-cancel-button-style' />\n```\n\n----------------------------------------\n\nTITLE: TemplatedButton Definition in XAML\nDESCRIPTION: This XAML snippet defines a TemplatedButton. It's a placeholder intended to be replaced with the actual XAML implementation of the TemplatedButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedbutton-visual-states' />\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for XAML - .NET MAUI\nDESCRIPTION: This snippet adds the necessary namespace for using Telerik components in XAML, specifically for the TimePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Using RadNumericMaskedEntry with Implicit Style\nDESCRIPTION: Shows the basic usage of RadNumericMaskedEntry control that will inherit the implicit style.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-border-underline-masked-entry-control-maui.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericMaskedEntry />\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup View Style in XAML\nDESCRIPTION: Style definition for the PickerPopupContentView, setting background color and width of the popup view\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:PickerPopupContentView\" x:Key=\"popupViewStyle\">\n    <Setter Property=\"BackgroundColor\" Value=\"White\"/>\n    <Setter Property=\"WidthRequest\" Value=\"270\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Custom DisplayTemplate for DateTimePicker\nDESCRIPTION: A template that customizes the appearance of the selected date and time in the DateTimePicker. This template is applied when a value is selected and defines how the selected date/time should be displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"CustomDisplayTemplate\">\n    <Grid BackgroundColor=\"#ECF3FF\" \n          Padding=\"15, 10\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"Auto\"/>\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"*\"/>\n            <ColumnDefinition Width=\"Auto\"/>\n        </Grid.ColumnDefinitions>\n        <Label Text=\"DATE and TIME\" \n               Margin=\"0, 0, 0, 5\" \n               TextColor=\"#919191\"/>\n        <Label Grid.Row=\"1\" \n               Text=\"{TemplateBinding DisplayStringValue}\" \n               HorizontalOptions=\"Start\" \n               VerticalOptions=\"Center\" \n               TextColor=\"#0E88F2\"/>\n        <Label Grid.Column=\"1\" \n               Grid.RowSpan=\"2\" \n               VerticalOptions=\"Center\" \n               Text=\"{StaticResource icon-calendar}\" \n               FontFamily=\"{StaticResource IconsFont}\" \n               TextColor=\"#0E88F2\"/>\n    </Grid>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Positioning Labels and Ticks in .NET MAUI Gauge\nDESCRIPTION: Controls the position of labels and ticks relative to the axis line using the Position property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis LabelPosition=\"Start\"\n\t\t\t\t\t\t Maximum=\"4\"\n\t\t\t\t\t\t Minimum=\"0\"\n\t\t\t\t\t\t Step=\"0.5\"\n\t\t\t\t\t\t TickPosition=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Models and ViewModel\nDESCRIPTION: C# implementation of the data model and ViewModel classes for PieChart data binding with sample categorical data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-pieseries-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n    public double Value { get; set; }\n}\n\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n    {\n        new CategoricalData { Category = \"Greenings\", Value = 52 },\n        new CategoricalData { Category = \"Perfecto\", Value = 19 },\n        new CategoricalData { Category = \"NearBy\", Value = 82 },\n        new CategoricalData { Category = \"Family\", Value = 23 },\n        new CategoricalData { Category = \"Fresh\", Value = 56 },\n    };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting License Key File Path for Mac/Linux in C#\nDESCRIPTION: Specifies the file path for the Telerik license key on Mac and Linux systems. The license key file should be placed in the user's home directory within a .telerik folder.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/licensing/set-up-your-license.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"~/.telerik/telerik-license.txt\"\n```\n\n----------------------------------------\n\nTITLE: Include Telerik Namespace (XAML)\nDESCRIPTION: This code shows how to include the Telerik namespace in your XAML file. This namespace is essential for using Telerik UI controls, such as RadListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \n```\n\n----------------------------------------\n\nTITLE: Removing Telerik NuGet Source with .NET CLI\nDESCRIPTION: These commands help list and remove the Telerik NuGet package source using the .NET CLI. First command lists all configured sources, and the second command removes a specific source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-stored-credentials.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget list source\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget remove source\n```\n\n----------------------------------------\n\nTITLE: Cloning the MAUI Documentation Repository using Git\nDESCRIPTION: Command to clone the Telerik UI for MAUI documentation repository to a local machine using Git. This is the first step for contributors who want to make changes to the documentation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit@github.com:telerik/maui-docs.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Localization Keys and Default Values in Markdown Table\nDESCRIPTION: A markdown table showing all available localization keys for the ImageEditor control along with their default English values. These keys can be used to translate the UI elements of the control to different languages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `ImageEditor_Apply` | `Apply` |\n| `ImageEditor_AspectRatio` | `Aspect Ratio` |\n| `ImageEditor_AspectRatioLocked` | `Lock aspect ratio` |\n| `ImageEditor_Blur` | `Blur` |\n| `ImageEditor_Brightness` | `Brightness`|\n| `ImageEditor_Cancel` | `Cancel` |\n| `ImageEditor_Contrast` | `Contrast` |\n| `ImageEditor_Crop` | `Crop` |\n| `ImageEditor_CropCircle` | `Circle` |\n| `ImageEditor_CropFree` | `Free` |\n| `ImageEditor_CropOriginal` | `Original` |\n| `ImageEditor_CropOval` | `Oval` |\n| `ImageEditor_CropSquare` | `Square` |\n| `ImageEditor_Filters` | `Filters` |\n| `ImageEditor_FlipHorizontal` | `Flip Horizontal` |\n| `ImageEditor_FlipVertical` | `Flip Vertical` |\n| `ImageEditor_Height` | `Height` |\n| `ImageEditor_Hue` | `Hue` |\n| `ImageEditor_Ok` | `Ok` |\n| `ImageEditor_Redo` | `Redo` |\n| `ImageEditor_Resize` | `Resize` |\n| `ImageEditor_RotateLeft` | `Rotate Left` |\n| `ImageEditor_RotateRight` | `Rotate Right` |\n| `ImageEditor_Saturation` | `Saturation` |\n| `ImageEditor_Scale` | `Scale` |\n| `ImageEditor_Sharpen` | `Sharpen` |\n| `ImageEditor_Transformations` | `Transformations` |\n| `ImageEditor_Type` | `Type` |\n| `ImageEditor_Undo` | `Undo` |\n| `ImageEditor_Width` | `Width` |\n| `ImageEditor_Zoom` | `Zoom` |\n| `ImageEditor_ZoomIn` | `Zoom In` |\n| `ImageEditor_ZoomOut` | `Zoom Out` |\n| `ImageEditor_ZoomToFit` | `Zoom to Fit` |\n| `ImageEditor_ZoomToOriginal` | `Actual Size` |\n```\n\n----------------------------------------\n\nTITLE: Read-Only State Source Configuration\nDESCRIPTION: Code-behind implementation for setting up the RichTextEditor source in read-only mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-readonly-state-code-behind' />\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace in a XAML file to enable the use of Telerik-specific controls and features within a .NET MAUI application. By including this namespace, developers can access and utilize various Telerik controls, such as the Barcode, within their XAML layout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataForm Groups in XAML\nDESCRIPTION: Demonstrates how to organize Editors into groups using DataFormGroup in XAML. This snippet shows the structure of a DataForm with grouping applied.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\" AutoGenerateItems=\"False\" Source=\"{Binding Source}\">\n    <telerik:RadDataForm.Items>\n        <telerik:DataFormGroup GroupName=\"Group 1\">\n            <telerik:DataFormTextEditor PropertyName=\"FirstName\" />\n            <telerik:DataFormTextEditor PropertyName=\"LastName\" />\n        </telerik:DataFormGroup>\n        <telerik:DataFormGroup GroupName=\"Group 2\">\n            <telerik:DataFormDateEditor PropertyName=\"BirthDate\" />\n            <telerik:DataFormTextEditor PropertyName=\"Email\" />\n        </telerik:DataFormGroup>\n    </telerik:RadDataForm.Items>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Enabling Word Wrap Using C# in MAUI\nDESCRIPTION: This C# snippet shows how to programmatically configure a DataGrid column to enable word wrap in cell content using the CellContentTemplate. A Label is used with the LineBreakMode property set to WordWrap. The code snippet suggests adding necessary column configurations for integration into a DataGrid. Requires Telerik UI for .NET MAUI and a DataGrid instance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-enable-word-wrap.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDataGridTextColumn textColumn = new DataGridTextColumn();\nDataTemplate template = new DataTemplate(() =>\n{\n    Label label = new Label();\n    label.Text = \\\"This is a very very very long text\\\";\n    label.LineBreakMode = Microsoft.Maui.LineBreakMode.WordWrap;\n    return label;\n});\ntextColumn.CellContentTemplate = template;\n// Add other configurations as needed.\nradDataGrid.Columns.Add(textColumn);\n```\n\n----------------------------------------\n\nTITLE: Add Telerik Input Namespace\nDESCRIPTION: This snippet demonstrates how to add the namespace for Telerik Input in your XAML file. This allows you to use Telerik UI controls in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='xmlns-telerikinput'/>\n```\n\n----------------------------------------\n\nTITLE: MAUI CheckBox C# Namespace Import\nDESCRIPTION: C# namespace import statement for using the Telerik CheckBox control in .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik XAML Namespace for .NET MAUI\nDESCRIPTION: Shows how to add the Telerik namespace to XAML files to access Telerik UI for .NET MAUI controls like the ToggleButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: TreeView Check/Uncheck Methods Interface\nDESCRIPTION: Method signatures for programmatically controlling checkbox states in TreeView items. These methods allow checking/unchecking individual items or all items at once.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/checkboxes.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid Check(params object[] itemPath);\nvoid UnCheck(params object[] itemPath);\nvoid CheckAll();\nvoid UnCheckAll();\n```\n\n----------------------------------------\n\nTITLE: Defining ScatterArea Series in XAML\nDESCRIPTION: Demonstrates how to declare a RadCartesianChart with ScatterArea Series using XAML, including configuration of axes and data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-area-series.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n/* ScatterArea Series XAML Declaration (snippet placeholder) */\n```\n\n----------------------------------------\n\nTITLE: DateTimePicker with Custom Templates in XAML\nDESCRIPTION: An example of a DateTimePicker with custom templates. This snippet shows how to reference custom templates for placeholder, display, header, and footer elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker x:Name=\"dateTimePicker\">\n    <telerik:RadDateTimePicker.PlaceholderTemplate>\n        <ControlTemplate>\n            <Grid>\n                <Label Text=\"Select Date and Time\" \n                       VerticalOptions=\"Center\"\n                       HorizontalOptions=\"Center\" />\n            </Grid>\n        </ControlTemplate>\n    </telerik:RadDateTimePicker.PlaceholderTemplate>\n    <telerik:RadDateTimePicker.DisplayTemplate>\n        <ControlTemplate>\n            <Grid>\n                <VerticalStackLayout HorizontalOptions=\"Center\"\n                                     VerticalOptions=\"Center\">\n                    <Label Text=\"{TemplateBinding DisplayStringValue}\" />\n                </VerticalStackLayout>\n            </Grid>\n        </ControlTemplate>\n    </telerik:RadDateTimePicker.DisplayTemplate>\n    <telerik:RadDateTimePicker.SelectorSettings>\n        <telerik:PickerPopupSelectorSettings HeaderLabelText=\"Select Date and Time\"\n                                          HeaderTemplate=\"{StaticResource DateTimePickerHeaderTemplate}\"\n                                          FooterTemplate=\"{StaticResource DateTimePickerFooterTemplate}\" />\n    </telerik:RadDateTimePicker.SelectorSettings>\n</telerik:RadDateTimePicker>\n```\n\n----------------------------------------\n\nTITLE: Defining RadDataForm with Validation Styling in XAML\nDESCRIPTION: This snippet demonstrates how to define a RadDataForm control with custom validation styling properties in XAML. It sets the ValidationSummaryStyle, ValidationSummaryLabelStyle, and ValidationSummaryImageStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/validation-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\"\n                      ValidationSummaryStyle=\"{StaticResource ValidationSummaryStyle}\"\n                      ValidationSummaryLabelStyle=\"{StaticResource ValidationLabelStyle}\"\n                      ValidationSummaryImageStyle=\"{StaticResource ValidationImageStyle}\"\n                      BindingContext=\"{local:EditorsViewModel}\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining FooterStyle\nDESCRIPTION: This snippet is a placeholder for XAML code defining the `FooterStyle`. It defines the visual appearance of the footer area within the TemplatedPicker's dropdown, using the `telerikInput:PickerPopupFooterView` as the target type for the style. It controls the presentation of the footer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-style-footer-style' />\n```\n\n----------------------------------------\n\nTITLE: Custom ItemsControl Template with Border\nDESCRIPTION: Implements a more advanced ItemsControl template using Telerik Border control for enhanced visual appearance\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikMauiControls:RadItemsControl x:Name=\"itemsControl\"\n                                ItemsSource=\"{Binding Experiences, Mode=TwoWay}\">\n    <telerikMauiControls:RadItemsControl.BindingContext>\n        <local:ViewModel />\n    </telerikMauiControls:RadItemsControl.BindingContext>\n    <telerikMauiControls:RadItemsControl.ItemTemplate>\n        <DataTemplate>\n            <telerikMauiControls:RadBorder BorderColor=\"#DFDFDF\"\n                                           BorderThickness=\"0, 0, 0, 1\">\n                <StackLayout Margin=\"10\"\n                        Spacing=\"5\">\n                    <Label Text=\"{Binding Title}\"\n                            FontSize=\"14\"/>\n                    <Label Text=\"{Binding Company}\"\n                            TextColor=\"#99000000\"\n                            FontSize=\"12\"/>\n                </StackLayout>\n            </telerikPrimitives:RadBorder>\n        </DataTemplate>\n    </telerikMauiControls:RadItemsControl.ItemTemplate>\n</telerikMauiControls:RadItemsControl>\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button in Telerik TemplatedPicker using XAML\nDESCRIPTION: Demonstrates how to enable the Clear button in the TemplatedPicker allowing users to remove the selected value quickly. This configuration is done through the IsClearButtonVisible property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedPicker IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom EntryStyle to NumericInput in XAML\nDESCRIPTION: This snippet shows how to apply a custom EntryStyle to a NumericInput control. The EntryStyle is referenced using a StaticResource named 'entry'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numeric-add-placeholder.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericInput Grid.Row=\"3\" Value=\"{x:Null}\" EntryStyle=\"{StaticResource entry}\">\n```\n\n----------------------------------------\n\nTITLE: Defining SideDrawer with Custom Command in XAML\nDESCRIPTION: XAML implementation showing how to add a custom command to the SideDrawer control's Commands collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSideDrawer>\n  <telerik:RadSideDrawer.Commands>\n    <local:CustomDrawerCommand/>\n  </telerik:RadSideDrawer.Commands>\n  <telerik:RadSideDrawer.MainContent>\n     <Label Text=\"Main content\" />\n  </telerik:RadSideDrawer.MainContent>\n  <telerik:RadSideDrawer.DrawerContent>\n \t<Label Text=\"Drawer content\" />\n  </telerik:RadSideDrawer.DrawerContent>\n  </telerik:RadSideDrawer>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Example for MAUI Documentation Files\nDESCRIPTION: Example of the YAML Front Matter that appears at the top of each documentation file. This metadata is used by the auto-import tool when processing content for the live documentation site and should not be edited by contributors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n\ntitle: Introduction\n\npage_title: Introduction \n\ndescription: Introduction\n\nslug: introduction\n\ntags: introduction\n\npublished: True\n\nposition: 1\n\n ---\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in .NET MAUI XAML\nDESCRIPTION: This snippet adds the Telerik namespace to the XAML file. This is a necessary step to use Telerik UI controls in your .NET MAUI application.  The namespace declaration allows you to reference Telerik controls within your XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/default-dates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Events Data Model\nDESCRIPTION: Data model implementation for handling TreeView events.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-events-data'/>\n```\n\n----------------------------------------\n\nTITLE: Setting DataGrid ItemsSource\nDESCRIPTION: Code to set the source data for the DataGrid's ItemsSource property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/delegate-aggregate-descriptor.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-gelegate-aggregate-source'/>\n```\n\n----------------------------------------\n\nTITLE: DataForm ViewModel Implementation\nDESCRIPTION: C# code for the ViewModel class used to demonstrate the DataForm editors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/error-message-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-datatype-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: Defining DropDown Button Style for .NET MAUI ComboBox\nDESCRIPTION: This XAML snippet demonstrates how to create a custom style for the dropdown button of a ComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-dropdownbutton-style'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TemplatedButton Released Event in XAML\nDESCRIPTION: Set up an event handler for the Released event to respond when the user releases the button after pressing\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/events.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedButton Released=\"OnTemplatedButtonReleased\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML - XAML\nDESCRIPTION: Add the Telerik namespace in your XAML file to access Telerik UI components for .NET MAUI. This allows you to declare and use the BusyIndicator control within your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Styling the NavigationView Pane Area\nDESCRIPTION: This snippet demonstrates how to apply styling to the NavigationView pane using the PaneStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/pane.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='navigationview-pane-area-styling' />\n```\n\n----------------------------------------\n\nTITLE: Defining Content Template for NavigationView\nDESCRIPTION: This snippet demonstrates setting a custom content template for a NavigationViewItem using Telerik UI for .NET MAUI. The ContentTemplate property is used to reference a DataTemplate resource, allowing for custom UI elements within the navigation item. It requires defining the template in resources and assigning it to the NavigationViewItem.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/item.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNavigationView x:Name=\"navigationView\"\n                            HeaderText=\"NavigationView Header\">\n    <telerik:RadNavigationView.Items>\n        <telerik:NavigationViewItem Text=\"Search\"\n                                    Position=\"Header\"\n                                    ContentTemplate=\"{StaticResource SearchTemplate}\"\n                                    IsSelectable=\"False\">\n        </telerik:NavigationViewItem>\n        <telerik:NavigationViewItem Text=\"Item 1\" />\n        <telerik:NavigationViewItem Text=\"Item 2\" />\n        <telerik:NavigationViewItem Text=\"Item 5\" />\n    </telerik:RadNavigationView.Items>\n</telerik:RadNavigationView>\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace\nDESCRIPTION: This snippet shows how to add the `telerik` namespace to the XAML file, which is necessary to use the Telerik UI for .NET MAUI Chart components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-create-custom-palette.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for Non-Working Hours in C#\nDESCRIPTION: C# implementation of ViewModel class that defines appointments and non-working hours using SpecialSlots with weekly recurrence patterns. Creates slots for weekdays and Fridays separately.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/scheduler-net-maui-non-working-hours.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    public ViewModel()\n    {\n        this.Appointments = new ObservableCollection<Appointment>();\n        var now = DateTime.Now;\n        // Appointments are added here...\n        \n        this.NonWorkingHours = new ObservableCollection<Slot>(); \n\n        DateTime start = new DateTime(2010, 1, 1, 8, 0, 0); \n        DateTime end = new DateTime(2010, 1, 1, 18, 0, 0); \n        this.NonWorkingHours.Add(new Slot(end, start.AddDays(1))\n        {\n            RecurrencePattern = new RecurrencePattern(null, RecurrenceDays.Monday | RecurrenceDays.Tuesday | RecurrenceDays.Wednesday | RecurrenceDays.Thursday, RecurrenceFrequency.Weekly, 1, null, null) \n        }); \n        \n        this.NonWorkingHours.Add(new Slot(end, start.AddDays(3))\n        { \n            RecurrencePattern = new RecurrencePattern(null, RecurrenceDays.Friday, RecurrenceFrequency.Weekly, 1, null, null) \n        }); \n    }\n\n    public ObservableCollection<Appointment> Appointments { get; set; }\n    public ObservableCollection<Slot> NonWorkingHours { get; set; } \n}\n```\n\n----------------------------------------\n\nTITLE: Handling NavigationView Selection Events for Page Navigation in C#\nDESCRIPTION: This code handles the SelectionChanged event of the NavigationView control to navigate to different pages based on the selected item. It demonstrates how to integrate NavigationView with MAUI's Navigation system.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/integrating-navigationview-with-maui-navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void navigationView_SelectionChanged(object sender, EventArgs e)\n{\n    var control = sender as RadNavigationView;\n    var selItem = control.SelectedItem as NavigationViewItem;\n    var selectedItemText = selItem == null ? \"null\" : selItem.Text;\n\n    if(selectedItemText == \"Item 1\") \n    {\n        Navigation.PushAsync(new NewPage1());\n    }\n    else if(selectedItemText == \"Item 2\")\n    {\n        Navigation.PushAsync(new NewPage2());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating XAML Namespace for DateTimePicker\nDESCRIPTION: This snippet illustrates the change in XAML namespace declaration when migrating from the Xamarin DateTimePicker to the .NET MAUI DateTimePicker.  The Xamarin namespace `clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input` is replaced by `http://schemas.telerik.com/2022/xaml/maui` in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerikInput=\\\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\\\"\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Business Objects for ScatterSpline Series in C#\nDESCRIPTION: This code snippet illustrates the creation of necessary business objects for implementing a ScatterSpline Series in a .NET MAUI application. These objects will typically represent the data points that the series will render on the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-series.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='numerical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid Group Header Style in XAML\nDESCRIPTION: Example of applying custom styling to DataGrid group headers using XAML Style definition. Sets various appearance properties like colors, fonts, and margins.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/group-header-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-groupheader-styling-style' />\n```\n\n----------------------------------------\n\nTITLE: ViewModel Class Definition in C#\nDESCRIPTION: This snippet presents the ViewModel class written in C#. This ViewModel typically contains the data and logic required for the DataGrid, including any grouping or sorting configurations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/group-header-template.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Running SDKBrowser on macOS Catalyst\nDESCRIPTION: Command to build and run the SDKBrowser application on macOS using .NET MAUI's Catalyst framework\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/sdkbrowser-app.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net8.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Configuring TimePicker Time Steps in XAML\nDESCRIPTION: Demonstrates how to set custom time step increments for hours, minutes, and seconds using the HourStep, MinuteStep, and SecondStep properties. Allows precise control over time value incrementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/time-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker HourStep=\"2\"\n                         MinuteStep=\"10\"\n                         SecondStep=\"30\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace Declaration\nDESCRIPTION: Required namespace declaration for using Telerik UI controls styling properties in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataForm and Editors Structure in XAML\nDESCRIPTION: Example showing how to define RadDataForm with styled editors including background color, border properties and custom editor styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/editors-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-editors-styling' />\n```\n\n----------------------------------------\n\nTITLE: Adding TapGestureRecognizer to Parent Layout in XAML\nDESCRIPTION: XAML code that adds a tap gesture recognizer to the parent VerticalStackLayout to detect clicks outside the ComboBox bounds.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-close-dropdown-click-outside-bounds.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<VerticalStackLayout>\n    <VerticalStackLayout.GestureRecognizers>\n        <TapGestureRecognizer Tapped=\"TapGestureRecognizer_Tapped\"/>\n    </VerticalStackLayout.GestureRecognizers>\n    <!-- Other controls and elements -->\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with ComboBox template in XAML\nDESCRIPTION: This XAML snippet defines a RadDataGrid with a template for a ComboBox that binds to a property in the ViewModel. The Grid is set up with various columns, including a text column and a cell edit template for the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-celledittemplate-picker-combobox.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:MauiApp28\"\n             x:Class=\"MauiApp28.MainPage\">\n\n    <ContentPage.Resources>\n        <DataTemplate x:Key=\"ComboTemplate\">\n            <telerik:RadComboBox local:DataGridUtils.EditorBindingItem=\"{Binding Item}\" />\n        </DataTemplate>\n    </ContentPage.Resources>\n\n    <Grid>\n        <telerik:RadDataGrid x:Name=\"dataGrid\"\n                             ItemsSource=\"{Binding Clubs}\"\n                             AutoGenerateColumns=\"False\">\n            <telerik:RadDataGrid.Columns>\n                <telerik:DataGridTextColumn PropertyName=\"Name\" />\n                <telerik:DataGridTextColumn PropertyName=\"NumRegs\" CellEditTemplate=\"{StaticResource ComboTemplate}\" />\n                <telerik:DataGridTimeColumn PropertyName=\"Time\" />\n            </telerik:RadDataGrid.Columns>\n        </telerik:RadDataGrid>\n    </Grid>\n    \n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Add the Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet shows how to add the Telerik namespace to the XAML file. This namespace is required to use Telerik UI for .NET MAUI controls, such as the TemplatedButton. It is added as an XML namespace declaration in the root element of the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/visual-states.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: The namespace declaration required to use Telerik UI components in a .NET MAUI XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Special Slot Styles in XAML\nDESCRIPTION: XAML styles definition for special slots including specific styles for weekday and weekend non-working hours.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/special-slots-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-specialslots-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting Time-Only SpinnerFormat in DateTimePicker\nDESCRIPTION: Sets the SpinnerFormat property to 'H:mm' to display only the hour and minute in 24-hour format in the spinner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/formatting.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker SpinnerFormat=\"H:mm\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: Shows how to add the Telerik namespace to a XAML file for accessing Telerik UI controls in .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/styling/toolbar-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: DataGrid Data Binding Setup\nDESCRIPTION: Sets up the ItemsSource and BindingContext for the DataGrid control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/cell-tap.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-commands-celltap-data'/>\n```\n\n----------------------------------------\n\nTITLE: Complete MinWidth Override Implementation in C#\nDESCRIPTION: Complete implementation showing how to set the MinWidth property of the InputEditor to zero on the Windows platform.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numericinput-overriding-winui-minwidth.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnNumericInputLoaded(object sender, EventArgs e)\n{\n#if WINDOWS\n    if ((sender as NumericInputEntry)?.Handler?.PlatformView is RadMauiEntry nativeEntry)\n    {\n        // Concrete instance of InputEditor is WinUI RadTextBox\n        nativeEntry.InputEditor.MinWidth = 0;\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Custom PlaceholderTemplate for DateTimePicker\nDESCRIPTION: A template that customizes the appearance of the DateTimePicker placeholder. This template is applied when no value is selected and defines how the placeholder should look.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"CustomPlaceholderTemplate\">\n    <Border BackgroundColor=\"#ECF3FF\" \n            BorderColor=\"#0E88F2\" \n            Padding=\"15, 0\" \n            BorderThickness=\"0, 0, 0, 2\">\n        <Grid Margin=\"0\" \n              ColumnDefinitions=\"*, Auto\">\n            <Label Text=\"{TemplateBinding PlaceholderText}\" \n                   VerticalOptions=\"Center\" \n                   HorizontalOptions=\"Start\"/>\n            <Label Grid.Column=\"1\" \n                   Text=\"{StaticResource icon-calendar}\" \n                   FontFamily=\"{StaticResource IconsFont}\" \n                   TextColor=\"#0E88F2\" \n                   VerticalOptions=\"Center\"/>\n        </Grid>\n    </Border>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model for CollectionView Grouping\nDESCRIPTION: A C# data model class implementation to be used with CollectionView grouping functionality. This snippet shows a business object structure that would be appropriate for grouping in a CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/header.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Aggregates Data Model Class\nDESCRIPTION: C# class defining the data model for aggregates functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-aggregates-model'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Namespace for Telerik Barcode - C#\nDESCRIPTION: This snippet includes the necessary using directive for the Telerik Barcode library, allowing access to the types and functionalities required for SwissQR Code generation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/swissqrcode-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Barcode;\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: Register Telerik controls using the UseTelerik method inside the CreateMauiApp method of MauiProgram.cs. Dependencies include the Telerik UI for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\npublic static MauiApp CreateMauiApp()\n{\n\tvar builder = MauiApp.CreateBuilder();\n\tbuilder\n\t\t.UseTelerik()\n\t\t.UseMauiApp<App>()\n\t\t.ConfigureFonts(fonts =>\n\t\t{\n\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t});\n\n\treturn builder.Build();\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Object in C#\nDESCRIPTION: C# business object used as a data source for the DataGrid examples.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/width.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.grid.ItemsSource = new List<Data>\n{\n    new Data { Country = \"Columbia\", Capital = \"Bogota\" },\n    new Data { Country = \"Germany\", Capital = \"Berlin\" },\n    new Data { Country = \"Italy\", Capital = \"Rome\" },\n    new Data { Country = \"France\", Capital = \"Paris\" },\n    new Data { Country = \"Bulgaria\", Capital = \"Sofia\" },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Released Event Handler in C#\nDESCRIPTION: C# event handler for the Released event of the ToggleButton, showing how to respond when the user releases the button after pressing it.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadToggleButton_Released(object sender, EventArgs e)\n{\n    var button = (RadToggleButton)sender;\n    this.releaseCountLabel.Text = $\"Released: {++this.releaseCount} times\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel as BindingContext in C#\nDESCRIPTION: A simple C# code snippet showing how to set the ViewModel as the BindingContext of the page to enable data binding for the TreeView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/treeview-net-maui-load-children-checkbox-recursive.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nthis.BindingContext = new LoadChildrenOnDemandViewModel();\n```\n\n----------------------------------------\n\nTITLE: Applying Label Style Selector to .NET MAUI RangeSlider in XAML\nDESCRIPTION: Demonstrates how to apply the custom label style selector to a RangeSlider control in XAML, enabling different styles for labels based on their position.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/labels-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-styling-labelsstyleselector-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ToggleRowDetailsButtonTap Command in C#\nDESCRIPTION: A custom command implementation that extends DataGridCommand to track the expansion state of row details in a DataGrid. The command overrides the Execute method to capture when a row is expanded or collapsed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/detect-row-detail-expansion-collapse-maui-datagrid.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyToggleRowDetailsButtonTapCommand : DataGridCommand\n{\n    public MyToggleRowDetailsButtonTapCommand()\n    {\n        Id = DataGridCommandId.ToggleRowDetailsButtonTap;\n    }\n\n    public override bool CanExecute(object parameter)\n    {\n        return true;\n    }\n\n    public override void Execute(object parameter)\n    {\n        // flag\n        bool wasExpanded = this.Owner.ExpandedRowDetails.Contains(parameter);\n        this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.ToggleRowDetailsButtonTap, parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated NuGet V3 Server URL\nDESCRIPTION: The current Telerik NuGet server URL to use for retrieving Telerik UI for MAUI packages after November 2024\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/failed-retrieve-info-remote-source.md#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://nuget.telerik.com/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Implementing RichTextEditor Hyperlink Error Handling in XAML\nDESCRIPTION: XAML code showing how to subscribe to the OpenHyperlinkError event in RichTextEditor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/hyperlink-support.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='richtexteditor-hyperlinkerrorhandling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Xamarin TimePicker Namespace Configuration\nDESCRIPTION: XML namespace and C# namespace for Xamarin TimePicker control in Xamarin.Forms projects. Defines the import path for the RadTimePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerikInput=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Telerik.XamarinForms.Input;\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeTemplates for .NET MAUI CollectionView\nDESCRIPTION: DataTemplates that define the UI for start and end swipe actions in a CollectionView. The start template shows an update button while the end template shows a delete button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<DataTemplate x:Key=\"StartSwipeTemplate\">\n    <Grid BackgroundColor=\"Green\">\n        <Grid.GestureRecognizers>\n            <TapGestureRecognizer Tapped=\"UpdateLabelTap\" />\n        </Grid.GestureRecognizers>\n        <Label Text=\"\" FontFamily=\"{StaticResource IconsFont}\" \n              FontSize=\"Medium\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\"/>\n    </Grid>\n</DataTemplate>\n\n<DataTemplate x:Key=\"EndSwipeTemplate\">\n    <Grid BackgroundColor=\"Red\">\n        <Grid.GestureRecognizers>\n            <TapGestureRecognizer Tapped=\"DeleteLabelTap\" />\n        </Grid.GestureRecognizers>\n        <Label Text=\"\" FontFamily=\"{StaticResource IconsFont}\" \n              FontSize=\"Medium\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\"/>\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduler Header Styling in XAML\nDESCRIPTION: Example showing how to define the Scheduler with custom header styling options. This snippet shows the main Scheduler component declaration with style properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/header-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-header-styling-definition'/>\n```\n\n----------------------------------------\n\nTITLE: Hiding No Results Message in AutoComplete for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to hide the No Results message by setting the NoResultsMessage property to an empty string. It ensures that the Suggestion View remains visible while effectively silencing the no results notification.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-no-result-message-autocomplete-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\" NoResultsMessage=\" \" ... />\n```\n\n----------------------------------------\n\nTITLE: Default RemoveToken Command Template\nDESCRIPTION: Shows how to implement the default RemoveTokenCommand within a custom TokenTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-default-removetoken' />\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox Visual States in .NET MAUI XAML\nDESCRIPTION: Demonstrates how to set up different visual states for a ComboBox control using VisualStateManager. Includes configuration for Normal, Focused, Disabled, Unfocused, and MouseOver states with various visual properties like FontSize and BackgroundColor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"combo\" Placeholder=\"telerik\">\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"FontSize\" Value=\"35\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Red\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Disabled\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Unfocused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"  Value=\"Yellow\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"MouseOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"  Value=\"Green\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Footer Template in DatePicker\nDESCRIPTION: Shows how to set a custom footer template for the DatePicker popup dialog, enabling additional footer content and interactions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker FooterTemplate=\"{StaticResource CustomFooterTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Including Telerik XAML Namespace\nDESCRIPTION: Adding the required Telerik XAML namespace to access CollectionView controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView Control in XAML\nDESCRIPTION: This snippet shows how to define the TreeView control in XAML. It includes the basic structure and bindings for the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/expand-collapse.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\" ItemsSource=\"{Binding Source}\">\n    <telerik:RadTreeView.Commands>\n        <telerik:TreeViewExpandCollpaseItemCommand />\n    </telerik:RadTreeView.Commands>\n    <telerik:RadTreeView.ItemTemplate>\n        <DataTemplate>\n            <telerik:TreeViewItemView>\n                <Label Text=\"{Binding Name}\" />\n            </telerik:TreeViewItemView>\n        </DataTemplate>\n    </telerik:RadTreeView.ItemTemplate>\n    <telerik:RadTreeView.ItemDescriptors>\n        <telerik:TreeViewItemDescriptor TargetType=\"{x:Type local:Item}\" ChildrenPath=\"Children\" />\n    </telerik:RadTreeView.ItemDescriptors>\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Setting Up ViewModel for ListPicker in .NET MAUI\nDESCRIPTION: This snippet provides a sample setup for a ViewModel in a .NET MAUI application using C#. It allows interaction with the ListPicker control by binding the necessary data structures defined in the business model. Proper implementation requires familiarity with MVVM patterns and Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/looping.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Assume this is a C# code snippet setting up a ViewModel for ListPicker\n```\n\n----------------------------------------\n\nTITLE: Setting the LocationViewModel as BindingContext in .NET MAUI\nDESCRIPTION: This snippet shows how to set the LocationViewModel as the BindingContext for the page, which is necessary for data binding in the TemplatedPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration for Telerik Controls\nDESCRIPTION: This code snippet shows the XAML namespace declaration required to use Telerik UI controls in a .NET MAUI application.  The namespace maps the `telerik` alias to the specified Telerik XAML schema, enabling the use of Telerik controls like RadTabView within XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \n```\n\n----------------------------------------\n\nTITLE: Implementing a Bar Indicator in XAML for .NET MAUI Gauge\nDESCRIPTION: This snippet demonstrates how to create a GaugeBarIndicator with custom properties such as Fill color, StartThickness, Offset, and Value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/indicators.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeBarIndicator Fill=\"Green\"\n                           StartThickness=\"0\"\n                           Offset=\"15\"\n                           Value=\"75\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing SearchResultsStringFormat in XAML\nDESCRIPTION: Example showing how to customize the format of search results display in the PDF Viewer by setting the SearchResultsStringFormat property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\">\n    <telerik:RadPdfViewer.SearchSettings>\n        <telerik:PdfViewerSearchSettings SearchResultsStringFormat=\"Result: {0}, Total: {2}\"/>\n    </telerik:RadPdfViewer.SearchSettings>\n</telerik:RadPdfViewer >\n```\n\n----------------------------------------\n\nTITLE: Creating a Business Model\nDESCRIPTION: This snippet references the declaration of a sample business model class used for the CollectionView's data items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/pull-to-refresh.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-grouptapcommand-model'/>\n```\n\n----------------------------------------\n\nTITLE: Custom Context Menu ViewModel Implementation\nDESCRIPTION: Code reference for implementing the ViewModel that handles custom commands for the RichTextEditor context menu. The actual implementation is referenced but not shown in the snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/context-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-contextmenu-vm' />\n```\n\n----------------------------------------\n\nTITLE: Styling BusyIndicatorToolbarItem in .NET MAUI Toolbar\nDESCRIPTION: This XAML code demonstrates how to define styles for RadBusyIndicator and BusyIndicatorToolbarItemView. The styles customize the appearance of the busy indicator with a red color and Animation3 type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/busy-indicator.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadBusyIndicator\" x:Key=\"busy\">\n    <Setter Property=\"AnimationContentColor\" Value=\"Red\"/>\n    <Setter Property=\"AnimationType\" Value=\"Animation3\"/>\n</Style>\n            \n<Style TargetType=\"telerik:BusyIndicatorToolbarItemView\" x:Key=\"busyStyle\">\n    <Setter Property=\"BusyIndicatorStyle\" Value=\"{StaticResource busy}\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Default ControlTemplate for Badge in .NET MAUI\nDESCRIPTION: This snippet represents the default ControlTemplate for the Badge control in XAML. It's referenced in the document but not directly provided in the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/badge-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='badgeview-badge-control-template'/>\n```\n\n----------------------------------------\n\nTITLE: Focusing NumericInput Control in .NET MAUI\nDESCRIPTION: This C# snippet illustrates how to programmatically focus the NumericInput control and another control to ensure that the UICulture change takes effect when switching cultures dynamically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/globalization.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nthis.input.Focus();\n\t\tthis.othercontrol.Focus();\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ControlTemplate to RadMaskedEntry in .NET MAUI\nDESCRIPTION: Code that shows how to apply the custom ControlTemplate to a RadTextMaskedEntry control instance, which allows the border customizations to take effect.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-border-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTextMaskedEntry x:Name=\"MyMaskedEntry\"\n                            ControlTemplate=\"{StaticResource MyMaskedEntry_ControlTemplate}\"\n                            ... />\n```\n\n----------------------------------------\n\nTITLE: Custom FooterTemplate for DateTimePicker\nDESCRIPTION: A template that customizes the footer appearance of the DateTimePicker popup. This template defines how the footer section with action buttons should look.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"CustomFooterTemplate\">\n    <Grid BackgroundColor=\"#ECF3FF\" \n          Padding=\"20\">\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"*\"/>\n            <ColumnDefinition Width=\"*\"/>\n        </Grid.ColumnDefinitions>\n        <Button Text=\"Cancel\" \n                BorderWidth=\"1\" \n                TextColor=\"#0E88F2\" \n                BorderColor=\"#0E88F2\" \n                Command=\"{TemplateBinding CancelCommand}\" \n                Margin=\"0, 0, 10, 0\"/>\n        <Button Grid.Column=\"1\" \n                Text=\"OK\" \n                TextColor=\"White\" \n                BackgroundColor=\"#0E88F2\" \n                Command=\"{TemplateBinding AcceptCommand}\" \n                Margin=\"10, 0, 0, 0\"/>\n    </Grid>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Creating a City Business Object for AutoComplete in .NET MAUI\nDESCRIPTION: Defines a City class that serves as the business object for AutoComplete suggestions. This class contains properties for name, country, and an image path that will be used in the AutoComplete suggestion items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionitem-template.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Chart Customization in C#\nDESCRIPTION: Handles platform-specific chart customization through the HandlerChanged event to adjust vertical axis label positioning on iOS.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-vertical-axis-label-position-line-visibility.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new SeriesCategoricalViewModel();\n\n        this.chart.HandlerChanged += this.Chart_HandlerChanged;\n    }\n\n    private void Chart_HandlerChanged(object sender, EventArgs e)\n    {\n        this.UpdateChart();\n    }\n\n    private void UpdateChart()\n    {\n        var platformView = this.chart.Handler.PlatformView;\n#if IOS || MACCATALYST\n        var platformChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n        platformChart.YAxis.Style.LineHidden = false;\n        platformChart.YAxis.Style.LabelStyle.TextAlignment = TelerikUI.TKChartAxisLabelAlignment.Left;\n        platformChart.YAxis.Style.LabelStyle.FirstLabelTextAlignment = TelerikUI.TKChartAxisLabelAlignment.Left;\n\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SegmentedControl in XAML\nDESCRIPTION: XAML code to define a SegmentedControl with text items including Popular, Library, Playlists and Friends. Sets basic properties like height and vertical alignment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSegmentedControl x:Name=\"segmentControlText\"\n\t\t\t\t\t\t\t\t  HeightRequest=\"60\"\n                                  VerticalOptions=\"Start\">\n    <telerik:RadSegmentedControl.ItemsSource>\n        <x:Array Type=\"{x:Type x:String}\">\n            <x:String>Popular</x:String>\n            <x:String>Library</x:String>\n            <x:String>Playlists</x:String>\n            <x:String>Friends</x:String>\n        </x:Array>\n    </telerik:RadSegmentedControl.ItemsSource>\n</telerik:RadSegmentedControl>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace - .NET MAUI - XAML and C#\nDESCRIPTION: These snippets show how to include the Telerik namespace in your .NET MAUI project using XAML and C#. The XAML snippet declares the telerik namespace needed for Telerik controls, and the C# snippet imports the required Telerik namespace for compatibility.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace for .NET MAUI\nDESCRIPTION: Shows how to add the Telerik namespace to a XAML file to access Telerik UI controls for .NET MAUI including the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace - XAML for .NET MAUI\nDESCRIPTION: This snippet shows how to add the Telerik namespace to your XAML page, enabling the use of Telerik components like the DataPager. This namespace declaration is essential for accessing the required properties and styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: C# code to register Telerik controls in the MAUI application builder using the UseTelerik extension method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shape for GaugeShapeIndicator in XAML\nDESCRIPTION: This example shows how to define a custom shape for the GaugeShapeIndicator using RadPathGeometry in XAML. It creates a simple arrow-like shape.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/indicators.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPathGeometry x:Key=\"Shape1\">\n    <telerik:RadPathFigure StartPoint=\"0, 0.5\">\n        <telerik:RadLineSegment Point=\"1, 0.3\" />\n        <telerik:RadLineSegment Point=\"1, 0.7\" />\n    </telerik:RadPathFigure>\n</telerik:RadPathGeometry>\n```\n\n----------------------------------------\n\nTITLE: Configuring ListPicker DropDown Style\nDESCRIPTION: Example showing basic ListPicker configuration with DropDownSettings property usage\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker x:Name=\"listPicker\">\n```\n\n----------------------------------------\n\nTITLE: Declaring TimeSpan Picker Popup Namespace\nDESCRIPTION: Namespace declaration for Telerik MAUI UI controls, required for using popup styling elements and target types\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholder Label Style in XAML\nDESCRIPTION: This snippet demonstrates how to apply a custom style to the placeholder label of the DatePicker, allowing for personalization that aligns with the app’s design.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-placeholder-label-style' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ComboBox Control in C#\nDESCRIPTION: This code snippet defines a custom ComboBox control named 'MyComboBox' that manages selected items. It includes an event handler for changes in selection to display the count of selected items and modify the UI accordingly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-showmoretemplate-hide-tokentemplate-combobox-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyComboBox : RadComboBox\n{\n    private ContentView selectionToken;\n    private RadWrapLayout layout;\n    public MyComboBox()\n    {\n        this.layout = this.Content as RadWrapLayout;\n        this.SelectionChanged += MyComboBox_SelectionChanged;\n    }\n\n    private void MyComboBox_SelectionChanged(object? sender, ComboBoxSelectionChangedEventArgs e)\n    {\n        if (this.SelectedItems.Count > 0)\n        {\n            if (this.layout.Contains(this.selectionToken))\n            {\n                return;\n            }\n\n            if (this.selectionToken == null)\n            {\n                this.selectionToken = new ContentView();\n                var label = new Label(); //create a new label for every newly added token\n                label.SetBinding(Label.TextProperty, new Binding()\n                {\n                    Source = this.SelectedItems,\n                    Path = \"Count\"\n                });\n                this.selectionToken.Content = label; //set label text to selected items' count\n            }\n\n            this.layout.Insert(0, this.selectionToken);\n        }\n        else\n        {\n            if (layout.Contains(this.selectionToken))\n            {\n                layout.Remove(this.selectionToken);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionHighlight Style for TimeSpanPicker Control in XAML\nDESCRIPTION: This snippet exemplifies how to define the selection highlight style in the TimeSpanPicker. The style affects the border and background color of selection indicators within the picker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadBorder\" x:Key=\"selectionHighlightStyle\">\n    <Setter Property=\"BorderColor\" Value=\"#00B5DC\"/>\n    <Setter Property=\"BorderThickness\" Value=\"1\"/>\n    <Setter Property=\"Padding\" Value=\"0,6,0,6\"/>\n    <Setter Property=\"HeightRequest\" Value=\"40\"/>\n    <Setter Property=\"VerticalOptions\" Value=\"Center\"/>\n    <Setter Property=\"BackgroundColor\" Value=\"#F9F9F9\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Using Nested Property Text Filter Descriptor in C# - .NET MAUI\nDESCRIPTION: This C# code snippet demonstrates how to create a NestedPropertyTextFilterDescriptor to filter based on a nested property. The filter descriptor requires PropertyName, Operator, Value, and ItemPropertyGetter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/programmatic-filtering.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar filterDescriptor = new NestedPropertyTextFilterDescriptor();\nfilterDescriptor.PropertyName = \"MyProperty\";\nfilterDescriptor.Operator = Telerik.Maui.Controls.Data.TextOperator.EqualsTo;\nfilterDescriptor.Value = \"Expected value\";\nfilterDescriptor.ItemPropertyGetter = (originalPropertyValue) =>\n{\n    // The 'originalPropertyValue' is the object fetched by the 'PropertyName' of the descriptor. In this case, this is the value of 'MyProperty'.\n    return ((MyChildObjectClass)originalPropertyValue).MyNestedProperty;\n};\nthis.radDataGrid.FilterDescriptors.Add(filterDescriptor);\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces for Telerik MAUI XAML\nDESCRIPTION: This snippet demonstrates how to include the necessary namespaces for defining styles in Telerik UI for .NET MAUI applications. It is required when using certain styling properties such as `SelectionHighlightStyle` and `SpinnerStyle`.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Styling Border Brush and Thickness in .NET MAUI DataGrid\nDESCRIPTION: This snippet demonstrates how to set the BorderBrush and BorderThickness properties of the DataGrid control to customize its border appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"DataGrid\"\n                     BorderBrush=\"#8660C5\"\n                     BorderThickness=\"4\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButtonText\nDESCRIPTION: This snippet showcases how to set the text for the Accept button displayed in the drop-down of the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings.AcceptButtonText>\n    OK\n</RadTimeSpanPicker.DropDownSettings.AcceptButtonText>\n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemStyleSelector XAML\nDESCRIPTION: Defines the NavigationView in XAML using `ItemStyleSelector`. It uses the `ItemsSource` property to bind to a collection and the `ItemStyleSelector` property to apply different styles to the generated navigation items based on a condition.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemstyleselector-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Custom Header Styles Definition in XAML\nDESCRIPTION: Definition of custom styles applied to the Scheduler header elements including borders, labels, and navigation buttons. These styles are added to the page resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/header-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-header-styles'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Suggestion View Border Color to Transparent in AutoComplete for .NET MAUI\nDESCRIPTION: This snippet configures the SuggestionViewBorderColor for the AutoComplete control to be transparent. This assists in eliminating any visible borders from the Suggestion View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-no-result-message-autocomplete-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\" SuggestionViewBorderColor=\"Transparent\" ... />\n```\n\n----------------------------------------\n\nTITLE: Defining ItemTemplate in XAML\nDESCRIPTION: This snippet shows how to define the ItemTemplate for the ListPicker, which determines how each item in the list is displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"itemTemplate\">\n    <Grid Padding=\"2\">\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        <Image Source=\"{Binding Icon}\" HeightRequest=\"42\" />\n        <Label Text=\"{Binding Name}\" Grid.Column=\"1\" VerticalOptions=\"Center\" />\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Setting the ViewModel for DataGrid Binding\nDESCRIPTION: This snippet indicates the step where the ViewModel is set, however, the actual code for setting the ViewModel is not provided.  It is essential for establishing the data binding between the DataGrid and the DataTable.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"//Set the ViewModel\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required to access Telerik UI for .NET MAUI components including RadCollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Xamarin DataGrid Namespace Declaration\nDESCRIPTION: XAML and C# namespace declarations for Xamarin.Forms DataGrid implementation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikDataGrid=\"clr-namespace:Telerik.XamarinForms.DataGrid;assembly=Telerik.XamarinForms.DataGrid\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.DataGrid;\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel BindingContext\nDESCRIPTION: Demonstrates how to set the ViewModel as the BindingContext for the Scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/appointments/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<scheduler-appointmentssource-setvm />\n```\n\n----------------------------------------\n\nTITLE: Group Header Aggregate Styling in XAML\nDESCRIPTION: Example showing how to style aggregate results in DataGrid group header using GroupHeaderStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-group-header-aggregate-styling-example'/>\n```\n\n----------------------------------------\n\nTITLE: Categorical Data Model\nDESCRIPTION: Defines a basic data model for categorical data, likely containing properties for category and value. This model is used as the data source for the chart series.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/line-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='categorical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Xamarin.Forms PDF Viewer C# Namespace Import\nDESCRIPTION: Shows how to import the Telerik PDF Viewer namespace in C# files for Xamarin.Forms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.PdfViewer;\n```\n\n----------------------------------------\n\nTITLE: Defining Time Property in XAML - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to set the selected time value for the RadTimePicker control using the Time property. The default value is null, allowing for flexible time selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing TabView with Custom Header Template in XAML\nDESCRIPTION: Shows how to apply the custom header template to a RadTabView control and define multiple TabViewItems. Each tab item can display a badge using the previously defined template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/attaching-badge-to-telerik-tabview-header-tab.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\"\n                    HeaderItemTemplate=\"{StaticResource myHeaderItemTemplate}\">\n    <telerik:TabViewItem HeaderText=\"Home\">\n        <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"Folder\">\n        <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"View\">\n        <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n    </telerik:TabViewItem>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Register Telerik Controls in .NET MAUI\nDESCRIPTION: This C# snippet registers the Telerik controls in a .NET MAUI application by calling the UseTelerik extension method in the CreateMauiApp method. It is critical to ensure that the Telerik controls are available for use across the app.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseTelerik()\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n            });\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik Namespace in XAML\nDESCRIPTION: This code snippet shows the required namespace declaration to use Telerik components in XAML. The namespace URI corresponds to Telerik's MAUI framework, enabling the use of various Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/1d-barcodes/specifications.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: C# code snippet showing how to register Telerik controls in the MauiProgram.cs file. This step is necessary for using Telerik UI controls in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Data Definition\nDESCRIPTION: This C# snippet represents the definition of the sample data used in the DataGrid. The data is a collection of objects that will be displayed in the DataGrid. The data is used to populate the DataGrid's ItemsSource, enabling you to visualize and interact with the data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/paging.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-data' />\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: This snippet showcases the required namespace declaration for using Telerik UI components in XAML. It ensures that the TimePicker control and other Telerik components can be properly referenced within the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PaneOpened Event - XAML\nDESCRIPTION: This snippet demonstrates how to implement the PaneOpened event. This event is important for handling the completion of the pane opening animation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-events-paneopened' />\n```\n\n----------------------------------------\n\nTITLE: Styling Accept Button in ListPicker\nDESCRIPTION: Custom style definition for the Accept button in ListPicker dropdown\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/dropdown-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Button\">\n```\n\n----------------------------------------\n\nTITLE: ImageEditor Event Handler XAML Definition\nDESCRIPTION: XAML markup showing how to wire up the ImageLoaded event handler to the ImageEditor control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/loading-image.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadImageEditor x:Name=\"imageEditor\" ImageLoaded=\"OnImageLoaded\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel for OHLC Series - C#\nDESCRIPTION: This snippet outlines the ViewModel setup in C# for the OHLC Series, which connects the data model with the user interface part of the MAUI application. It manages the data binding for the chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/financial/ohlc-series.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='chart-series-ohlc-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Business Model in C#\nDESCRIPTION: This code snippet defines a sample business model class for use with the ComboBox control. It likely includes properties such as city name or other relevant data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/header-footer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-city-businessmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Style Selector Resources in XAML\nDESCRIPTION: Creates a resource dictionary with a custom LocationStyleSelector and necessary Style objects for different location types.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary>\n    <local:LocationStyleSelector x:Key=\"LocationStyleSelector\"\n                                CountryStyle=\"{StaticResource CountryStyle}\"\n                                CityStyle=\"{StaticResource CityStyle}\" />\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel for DataPager\nDESCRIPTION: This snippet represents the placeholder for ViewModel definition that provides the data source for the DataPager. The ViewModel is crucial for binding data to the DataPager and enabling features like ellipsis mode.  Ensure proper data binding is established between the ViewModel and the DataPager in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/ellipsis-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datapager-features-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining UI with RadCollectionView in .NET MAUI XAML\nDESCRIPTION: This XAML snippet defines the UI for displaying imported Excel data. It includes a button to trigger the file import and a RadCollectionView with templates for header and items to display the data in a structured format.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/import-excel-data-to-collectionview-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid RowDefinitions=\"auto,*\" Padding=\"10\">\n\t<Button Text=\"Import Excel\" Clicked=\"Button_Clicked\"/>\n\t<telerik:RadCollectionView x:Name=\"collectionView\" Grid.Row=\"1\">\n\t\t<telerik:RadCollectionView.HeaderTemplate>\n\t\t\t<DataTemplate>\n\t\t\t\t<HorizontalStackLayout>\n\t\t\t\t\t<Label\n\t\t\t\t\t\t\t FontAttributes=\"Bold\"\n\t\t\t\t\t\t\t Text=\"Symbol\"\n\t\t\t\t\t\t\t WidthRequest=\"100\" />\n\t\t\t\t\t<Label\n\t\t\t\t\t\t\t FontAttributes=\"Bold\"\n\t\t\t\t\t\t\t Text=\"Quantity\"\n\t\t\t\t\t\t\t WidthRequest=\"100\" />\n\t\t\t\t\t<Label\n\t\t\t\t\t\t FontAttributes=\"Bold\"\n\t\t\t\t\t\t Text=\"Price\"\n\t\t\t\t\t\t WidthRequest=\"100\" />\n\t\t\t\t</HorizontalStackLayout>\n\t\t\t</DataTemplate>\n\t\t</telerik:RadCollectionView.HeaderTemplate>\n\t\t<telerik:RadCollectionView.ItemTemplate>\n\t\t\t<DataTemplate>\n\t\t\t\t<HorizontalStackLayout>\n\t\t\t\t\t<Label Text=\"{Binding Cell1}\" WidthRequest=\"100\" />\n\t\t\t\t\t<Label Text=\"{Binding Cell2}\" WidthRequest=\"100\" />\n\t\t\t\t\t<Label Text=\"{Binding Cell3}\" WidthRequest=\"100\" />\n\t\t\t\t</HorizontalStackLayout>\n\t\t\t</DataTemplate>\n\t\t</telerik:RadCollectionView.ItemTemplate>\n\t</telerik:RadCollectionView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transparent TabView with Background Image in XAML\nDESCRIPTION: Implementation of a TabView with transparent components to display a background image. The code sets up styles for TabViewHeaderItem, TabViewContent, and TabViewHeader with transparent backgrounds, and configures a TabView with three items: Home, Folder, and View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/tabview-background-image.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             x:Class=\"MauiApp9.MainPage\"\n             BackgroundImageSource=\"dotnet_bot.png\">\n\n    <ContentPage.Resources>\n        <ResourceDictionary>\n            <Style TargetType=\"telerik:TabViewHeaderItem\" x:Key=\"headerStyle\">\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n            </Style>\n\n            <Style TargetType=\"telerik:TabViewContent\" x:Key=\"content\">\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n            </Style>\n\n            <Style TargetType=\"telerik:TabViewHeader\" x:Key=\"header\" >\n                <Setter Property=\"BackgroundColor\" Value=\"Transparent\"/>\n            </Style>\n        </ResourceDictionary>\n    </ContentPage.Resources>\n\n    <telerik:RadTabView HeaderItemStyle=\"{StaticResource headerStyle}\"\n                        HeaderStyle=\"{StaticResource header}\"\n                        ContentStyle=\"{StaticResource content}\" x:Name=\"tabView\" AutomationId=\"tabView\" IsContentSwipeEnabled=\"False\">\n        <telerik:TabViewItem HeaderText=\"Home\">\n            <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n        </telerik:TabViewItem>\n        <telerik:TabViewItem HeaderText=\"Folder\">\n            <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n        </telerik:TabViewItem>\n        <telerik:TabViewItem HeaderText=\"View\">\n            <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n        </telerik:TabViewItem>\n    </telerik:RadTabView>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Hiding DataGrid Column Headers via Style in C#\nDESCRIPTION: This code snippet demonstrates how to hide the column headers in a Telerik UI for .NET MAUI DataGrid using C#. It creates a new DataGridColumnHeaderStyle instance, sets TextFontSize and FilterIndicatorFontSize to 0, BackgroundColor and BorderColor to Transparent, and BorderThickness to 0. It then applies this style to the HeaderStyle property of a DataGridTextColumn.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-column-headers-maui-datagrid.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar dataGrid = new RadDataGrid();\n   dataGrid.ItemsSource = new List<Data>\n   {\n       new Data { Country = \"India\", Capital = \"New Delhi\"},\n       new Data { Country = \"South Africa\", Capital = \"Cape Town\"},\n       new Data { Country = \"Nigeria\", Capital = \"Abuja\" },\n       new Data { Country = \"Singapore\", Capital = \"Singapore\" }\n   };\n   dataGrid.AutoGenerateColumns = false;\n   var headerStyle = new DataGridColumnHeaderStyle\n   {\n       TextFontSize = 0,\n       FilterIndicatorFontSize = 0,\n       BackgroundColor = Colors.Transparent,\n       BorderColor = Colors.Transparent,\n       BorderThickness = new Thickness(0),\n   };\n   var column1 = new DataGridTextColumn { PropertyName = \"Country\" };\n   column1.HeaderStyle = headerStyle;\n\n   dataGrid.Columns.Add(column1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Keyboard Input Mode on Android\nDESCRIPTION: This C# code snippet shows how to set the application's WindowSoftInputModeAdjust to Resize on Android. This is necessary when placing the RichTextEditor Toolbar below the RichTextEditor to ensure proper display when the keyboard appears.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/toolbar/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nApp.Current.On<Android>().UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers for Showing and Hiding the Popup\nDESCRIPTION: C# event handlers that control the showing and hiding behavior of the Popup control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='popup-gettingstarted-events' />\n```\n\n----------------------------------------\n\nTITLE: Setting DayStyleSelector in Telerik RadCalendar XML\nDESCRIPTION: This snippet applies the previously defined DayStyleSelector as an implicit style to the RadCalendar component. By setting the DayStyleSelector property, it ensures the custom styles are used for rendering the calendar's labels according to their states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-calendar-appearance-scheduler-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Style TargetType=\"telerik:RadCalendar\" >\n    <Setter Property=\"DayStyleSelector\" Value=\"{StaticResource DayStyleSelector}\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI TimePicker Namespace Configuration\nDESCRIPTION: XML namespace and C# namespace for .NET MAUI TimePicker control. Updated import path for the RadTimePicker control in .NET MAUI projects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Implementing RadBorder with ScrollView - .NET MAUI\nDESCRIPTION: This XAML example wraps a CustomEditor in a RadBorder and places it within a ScrollView. This allows for resizing and scrolling functionality depending on the content growth and input changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dotnet-maui-editor-scroll-inside-scrollview.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ScrollView>\n    <Grid RowDefinitions=\"Auto, Auto, *\" Padding=\"10,5\">\n        <Label Text=\"Editor inside RadBorder that resizes when content changes:\"/>\n        <telerik:RadBorder x:Name=\"border\" \n                            Grid.Row=\"1\"\n                            BorderColor=\"Gray\" \n                            CornerRadius=\"10\" \n                            BorderThickness=\"1\">\n            <local:CustomEditor AutoSize=\"TextChanges\" \n                                Text=\"Type here and the Editor will change size to accomodate more text: &#xa;Line1&#xa;Line2\" />\n        </telerik:RadBorder>\n\n        <VerticalStackLayout Grid.Row=\"2\">\n            <Label Text=\"Editor inside RadBorder that scrolls when content grows:\"/>\n            <telerik:RadBorder BorderColor=\"Gray\" \n                                BorderThickness=\"1\" \n                                CornerRadius=\"10\" \n                                HeightRequest=\"100\">\n                <local:CustomEditor Text=\"Type here and the Editor will not change size to accomodate new text, instead you can scroll the content&#xa;Line1&#xa;Line2\" />\n            </telerik:RadBorder>\n\n            <BoxView Margin=\"0,10,0,0\" Color=\"Gray\" HeightRequest=\"1000\"/>\n        </VerticalStackLayout>\n    </Grid>\n</ScrollView>\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Data Model in C#\nDESCRIPTION: Custom data model class definition that represents items to be displayed in the SlideView\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/item-template.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nslideView.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Setting ItemsSource for DataGrid in C#\nDESCRIPTION: C# code snippet showing how to set the ItemsSource property of the DataGrid with sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.dataGrid.ItemsSource = new List<Data>\n{\n    new Data { Name = \"John\", Country = \"USA\", Salary = 50000 },\n    new Data { Name = \"Jane\", Country = \"Canada\", Salary = 55000 },\n    new Data { Name = \"Mike\", Country = \"USA\", Salary = 60000 },\n    new Data { Name = \"Sara\", Country = \"Canada\", Salary = 52000 }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Label Template for WinUI in XAML\nDESCRIPTION: This XAML snippet defines a custom label template for the WinUI platform. It's added to the App.xaml file and allows customization of label appearance, including font size and color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<maui:MauiWinUIApplication.Resources>\n    <DataTemplate x:Key=\"CustomLabelTemplate\">\n        <Grid>\n            <!-- You can apply color, font size, and other properties available for the TextBlock element. --> \n            <TextBlock Text=\"{Binding DataItem.Value}\" FontSize=\"30\" Foreground=\"Red\" />\n        </Grid>\n    </DataTemplate>\n</maui:MauiWinUIApplication.Resources>\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Tick Template to RangeSlider\nDESCRIPTION: This snippet shows how to apply a previously defined custom tick template to a RangeSlider control, along with other configuration settings like minimum, maximum values, and tick step.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/ticks.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"0\" Maximum=\"20\"\n                      RangeStart=\"5\" RangeEnd=\"15\"\n                      TickStep=\"5\"\n                      TicksPlacement=\"End\"\n                      TickTemplate=\"{StaticResource TickTemplate}\"\n                      TrackThumbMinHeight=\"25\"\n                      VerticalOptions=\"Center\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace\nDESCRIPTION: A code snippet showing how to add the required Telerik namespace in XAML for using RichTextEditor components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/working-with-images/insert-images.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Control Declaration in XAML\nDESCRIPTION: XAML markup for declaring RadAutoComplete control with custom filtering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/filtering.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-customfiltering'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperlink Button Styles and Visual States\nDESCRIPTION: Defines comprehensive styling including color resources, platform-specific visual states for Android, iOS, MacCatalyst, and WinUI platforms. Includes state handling for Normal, PointerOver, Pressed, and Disabled states with appropriate visual feedback.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/create-hyperlink-button-dotnet-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ResourceDictionary>\n\n            <Color x:Key=\"PrimaryColor\">#007AFF</Color>\n            <Color x:Key=\"PrimaryColorDark\">#5A91F7</Color>\n            <Color x:Key=\"PrimaryColor_Alpha30\">#4D007AFF</Color>\n            <Color x:Key=\"PrimaryColor_Alpha38\">#61007AFF</Color>\n            <Color x:Key=\"PrimaryColor_Alpha50\">#80007AFF</Color>\n            <Color x:Key=\"PrimaryColor_Alpha60\">#90007AFF</Color>\n\n            <VisualStateGroupList x:Key=\"HyperlinkButton_VisualStates_Android\">\n                <VisualStateGroup Name=\"CommonStates\">\n                    <VisualState Name=\"Normal\" />\n                    <VisualState Name=\"PointerOver\" />\n                    <VisualState Name=\"Pressed\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.Background\" Value=\"#1F000000\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Disabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"#61000000\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n\n            <VisualStateGroupList x:Key=\"HyperlinkButton_VisualStates_iOS\">\n                <VisualStateGroup Name=\"CommonStates\">\n                    <VisualState Name=\"Normal\" />\n                    <VisualState Name=\"PointerOver\" />\n                    <VisualState Name=\"Pressed\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"{StaticResource PrimaryColor_Alpha50}\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Disabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"#61000000\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n\n            <VisualStateGroupList x:Key=\"HyperlinkButton_VisualStates_MacCatalyst\">\n                <VisualStateGroup Name=\"CommonStates\">\n                    <VisualState Name=\"Normal\" />\n                    <VisualState Name=\"PointerOver\" />\n                    <VisualState Name=\"Pressed\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"{StaticResource PrimaryColor_Alpha38}\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Disabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"#61000000\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n\n            <VisualStateGroupList x:Key=\"HyperlinkButton_VisualStates_WinUI\">\n                <VisualStateGroup Name=\"CommonStates\">\n                    <VisualState Name=\"Normal\" />\n                    <VisualState Name=\"PointerOver\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.Background\" Value=\"{AppThemeBinding Light='#80F9F9F9', Dark='#15FFFFFF' }\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Pressed\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"{StaticResource PrimaryColor_Alpha60}\" />\n                            <Setter Property=\"telerik:RadTemplatedButton.Background\" Value=\"#4DF9F9F9\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                    <VisualState Name=\"Disabled\">\n                        <VisualState.Setters>\n                            <Setter Property=\"telerik:RadTemplatedButton.TextColor\" Value=\"{StaticResource PrimaryColor_Alpha38}\" />\n                            <Setter Property=\"telerik:RadTemplatedButton.Background\" Value=\"#4DF9F9F9\" />\n                        </VisualState.Setters>\n                    </VisualState>\n                </VisualStateGroup>\n            </VisualStateGroupList>\n\n            <Style x:Key=\"HyperlinkButtonStyle\" TargetType=\"telerik:RadTemplatedButton\">\n                <Setter Property=\"TextColor\" Value=\"{AppThemeBinding Light={StaticResource PrimaryColor}, Dark={StaticResource PrimaryColorDark}}\" />\n                <Setter Property=\"Background\" Value=\"Transparent\" />\n                <Setter Property=\"BorderThickness\" Value=\"0\" />\n                <Setter Property=\"Shadow\" Value=\"{x:Null}\" />\n                <Setter Property=\"VisualStateManager.VisualStateGroups\"\n                        Value=\"{OnPlatform Android={StaticResource HyperlinkButton_VisualStates_Android},\n                                           iOS={StaticResource HyperlinkButton_VisualStates_iOS},\n                                           MacCatalyst={StaticResource HyperlinkButton_VisualStates_MacCatalyst},\n                                           WinUI={StaticResource HyperlinkButton_VisualStates_WinUI}}\" />\n    </ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Highlight Style in XAML\nDESCRIPTION: This snippet provides functionality to set the highlight style for selected items in the DatePicker's drop-down, enhancing visual feedback for users during selections.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-selection-highlight-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Arc Segment in XAML\nDESCRIPTION: Demonstrates how to create a RadPath with a RadArcSegment using Telerik MAUI controls, showing the configuration of arc segment properties like StartAngle and SweepAngle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/geometry-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='path-geometry-simplearc-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Filtering in XAML\nDESCRIPTION: XAML configuration showing how to apply the custom filtering behavior to the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/filtering.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-custom-filtering' />\n```\n\n----------------------------------------\n\nTITLE: Implementing DropIndicatorTemplate in .NET MAUI CollectionView\nDESCRIPTION: XAML template definition for customizing the drop indicator appearance between CollectionView items during drag-and-drop operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/dragdrop-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-dragdrop-templates-indicatortemplate' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Controls in MauiProgram\nDESCRIPTION: Registers Telerik controls in the MAUI application by configuring the necessary services in MauiProgram.cs. This setup is required for using any Telerik UI controls in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required Namespaces for RadExpander in .NET MAUI\nDESCRIPTION: These namespace declarations are required to use RadExpander and access the ExpandCollapseIndicator class in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maintain-indicator-font-size-radexpander-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\nxmlns:expander=\"clr-namespace:Telerik.Maui.Controls.Expander;assembly=Telerik.Maui.Controls\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: XAML namespace declaration required to use Telerik UI controls for .NET MAUI, including the RadToggleButton component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/toggle-state.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button in XAML for ListPicker\nDESCRIPTION: Demonstrates how to show a clear button in the ListPicker that allows quick removal of the selected value by setting the IsClearButtonVisible property to true.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Styling the AIPrompt Button in Telerik .NET MAUI\nDESCRIPTION: Defines a custom style for the RadTemplatedButton to change the appearance of the AIPrompt Button. The style includes properties for background color, border settings, and text appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/aipromptbutton-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"AIPromptButtonStyle\" TargetType=\"telerik:RadTemplatedButton\">\n    <Setter Property=\"BackgroundColor\" Value=\"{telerik:ThemeColor Primary, Opacity=0.2}\"/>\n    <Setter Property=\"BorderColor\" Value=\"{telerik:ThemeColor Primary}\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n    <Setter Property=\"CornerRadius\" Value=\"16\" />\n    <Setter Property=\"Padding\" Value=\"12,8\" />\n    <Setter Property=\"TextColor\" Value=\"{telerik:ThemeColor Primary}\" />\n    <Setter Property=\"Foreground\" Value=\"{telerik:ThemeColor Primary}\" />\n    <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButtonStyle\nDESCRIPTION: This snippet provides a placeholder for XAML that defines the style for the \"Accept\" button within the TemplatedPicker dropdown. This style modifies the appearance of the Accept button, such as its background, text color, or border.  The style targets the `Button` type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-style-accept-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Toggling Popup Visibility\nDESCRIPTION: This snippet illustrates how to use the global property to toggle the IsOpen state of the RadPopup from a specific page, enabling the popup to be displayed or hidden as needed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-popup-irrespective-screen.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ShowPopup()\n{\n    (App.Current.MainPage as AppShell).GlobalPopup.IsOpen = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MAUI Program\nDESCRIPTION: Uses the Telerik.Maui.Controls.Compatibility.UseTelerik extension method to register Telerik controls within the CreateMauiApp method of MauiProgram.cs, ensuring these controls are available throughout the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\\\"OpenSans-Regular.ttf\\\", \\\"OpenSansRegular\\\");\n\t\t\t});\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeNode Model for TreeView in C#\nDESCRIPTION: A C# class that defines the TreeNode model with properties for parent-child relationships and checkbox state. It inherits from Telerik.Maui.Controls.NotifyPropertyChangedBase to support property change notifications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/treeview-net-maui-load-children-checkbox-recursive.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TreeNode : Telerik.Maui.Controls.NotifyPropertyChangedBase\n{\n\tprivate ObservableCollection<TreeNode> children = new ObservableCollection<TreeNode>();\n\tprivate TreeNode parent;\n\tprivate string name;\n\tprivate bool? isChecked;\n\n\tpublic IList<TreeNode> Children => this.children;\n\n\tpublic TreeNode Parent\n\t{\n\t\tget => this.parent;\n\t\tset => this.UpdateValue(ref this.parent, value);\n\t}\n\n\tpublic string Name\n\t{\n\t\tget => this.name;\n\t\tset => this.UpdateValue(ref this.name, value);\n\t}\n\n\tpublic bool? IsChecked\n\t{\n\t\tget => this.isChecked;\n\t\tset => this.UpdateValue(ref this.isChecked, value);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Create ViewModel for ListView Grouping (C#)\nDESCRIPTION: This snippet creates a ViewModel class that contains a collection of `BusinessItem` objects.  This ViewModel is intended to provide data to the RadListView for grouping based on specified properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n \n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext and Adding Command to DataGrid using C#\nDESCRIPTION: This snippet demonstrates how to set the 'BindingContext' to the 'ViewModel' and add the command to the 'Commands' collection of the 'RadDataGrid' instance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='datagrid-commands-validation-binding'/>\n```\n\n----------------------------------------\n\nTITLE: CollectionView Style Resources Reference\nDESCRIPTION: Reference to a code snippet containing style resources for CollectionView items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style.md#2025-04-21_snippet_4\n\nLANGUAGE: unknown\nCODE:\n```\n<snippet id='collectionview-itemview-style-resources' />\n```\n\n----------------------------------------\n\nTITLE: Defining Country Model in C#\nDESCRIPTION: C# class defining the Country model used in the TreeView implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-country-model'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Return Key Type in .NET MAUI Entry\nDESCRIPTION: Demonstrates how to change the keyboard return key type in a Telerik Entry control by setting the ReturnType property to a specific value, such as Send.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry Placeholder=\"Enter your idea\" \n                  ReturnType=\"Send\">\n</telerik:RadEntry>\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox DropDownMaxHeight in XAML\nDESCRIPTION: Illustrates how to set the maximum height of the ComboBox drop-down using the DropDownMaxHeight property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox DropDownMaxHeight=\"300\" />\n```\n\n----------------------------------------\n\nTITLE: Getting the CollectionView DataView in C#\nDESCRIPTION: Retrieves the data view of the CollectionView after sorting, grouping, and filtering operations are applied. This is a prerequisite step for performing expand/collapse operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar dataView = this.collectionView.GetDataView();\n```\n\n----------------------------------------\n\nTITLE: NavigationView ViewModel\nDESCRIPTION: Defines the ViewModel used for data binding in the NavigationView examples. This ViewModel likely contains the data items to be displayed in the NavigationView's items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='navigationview-databinding-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Segments in .NET MAUI SegmentedControl\nDESCRIPTION: XAML implementation of a SegmentedControl with localized text using resource files. The control uses x:Static markup extension to bind to localized strings defined in a MyResource.resx file. Requires appropriate namespace declarations and a properly configured resource file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/segmentedcontrol-localization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadSegmentedControl x:Name=\"segmentControlText\"\n                             HeightRequest=\"60\"\n                             VerticalOptions=\"Start\">\n    <telerik:RadSegmentedControl.ItemsSource>\n        <x:Array Type=\"{x:Type x:String}\">\n            <x:Static Member=\"local:MyResource.Popular\"/>\n            <x:Static Member=\"local:MyResource.Library\"/>\n            <x:Static Member=\"local:MyResource.Playlists\"/>\n            <x:Static Member=\"local:MyResource.Friends\"/>\n        </x:Array>\n    </telerik:RadSegmentedControl.ItemsSource>\n</telerik:RadSegmentedControl>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\nxmlns:local=\"clr-namespace:YourNamespace\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Selection Mode in XAML\nDESCRIPTION: Demonstrates how to set the selection mode for a RadMap control using the SelectionMode property. Allows configuring single or multiple shape selection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='map-selection-mode-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext for SegmentedControl\nDESCRIPTION: Code that sets the BindingContext for the SegmentedControl to enable data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='segmentcontrol-selection-bindingcontext' />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source with Credentials in Azure DevOps\nDESCRIPTION: CLI command for adding a NuGet package source with authentication credentials in Azure DevOps pipelines using the dotnet CLI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/nuget-keys.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source 'MyTelerikFeed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '$(TELERIK_NUGET_KEY)' --configfile './nuget.config' --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager in XAML\nDESCRIPTION: Demonstrates how to declare a DataPager control in XAML with placeholder for source binding\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datapager-getting-started-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting Culture Info in WinUI App\nDESCRIPTION: Implementation for WinUI platform that sets culture info in the App.xaml.cs file. Sets CurrentCulture to Japanese locale during application initialization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/set-cultureinfo-on-app-level-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class App : MauiWinUIApplication\n{\n    /// <summary>\n    /// Initializes the singleton application object.  This is the first line of authored code\n    /// executed, and as such is the logical equivalent of main() or WinMain().\n    /// </summary>\n    public App()\n    {\n        this.InitializeComponent();\n        CultureInfo.CurrentCulture = new CultureInfo(\"ja-JP\", false);\n    }\n\n    protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n}\n```\n\n----------------------------------------\n\nTITLE: City Data Model for TreeView\nDESCRIPTION: Defines the City model class representing leaf items in the TreeView hierarchy, containing name data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoComplete Visual States in XAML\nDESCRIPTION: XAML implementation for styling the AutoComplete control with custom visual states and appearance properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/visual-states.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-custom-styles' />\n```\n\n----------------------------------------\n\nTITLE: Styling Cancel Button\nDESCRIPTION: Customizes the appearance of the Cancel button in the DatePicker popup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings CancelButtonStyle=\"{StaticResource CancelButtonStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the required Telerik namespace to use the ListView control and its features in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/text-cell.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox Business Model in C#\nDESCRIPTION: Sample business model class implementation for the ComboBox examples.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-city-businessmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Group Footer Aggregate Styling\nDESCRIPTION: XAML definition for styling group footer aggregates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-group-aggregate-styling-example'/>\n```\n\n----------------------------------------\n\nTITLE: DataForm Localization Keys Table Structure in Markdown\nDESCRIPTION: Shows a markdown table structure that lists all available localization keys for the DataForm control along with their default English values. The keys are used for validation error messages and can be customized for different languages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| ----------------- | ------------- |\n| `DataForm_LengthValidationError`  | `The field {0} length must be between {1} and {2}.` |\n| `DataForm_MaximumLengthValidationError` | `The field {0} must have a maximum length of {1}.` |\n| `DataForm_MaximumValueValidationError` | `The field {0} must have a maximum value of {1}.` |\n| `DataForm_MinimumLengthValidationError` | `The field {0} must have a minimum length of {1}.` |\n| `DataForm_MinimumValueValidationError` | `The field {0} must have a minimum value of {1}.` |\n| `DataForm_PropertyValidationError` | `The field {0} is invalid.` |\n| `DataForm_RangeValidationError` | `The field {0} value must be between {1} and {2}.` |\n| `DataForm_RegexValidationError` | `The field {0} is not in the correct format.` |\n| `DataForm_RequiredValidationError` | `The field {0} is required.` |\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required to use Telerik UI controls in your .NET MAUI project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace - .NET MAUI\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace to the XAML, which allows the use of Telerik specific controls and features, particularly the DataPager.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/page-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik UI for .NET MAUI Commercial Package\nDESCRIPTION: Command to install the commercial version of Telerik UI for .NET MAUI via NuGet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs-code.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Telerik.UI.for.Maui\n```\n\n----------------------------------------\n\nTITLE: Creating Business Object for Validation using C#\nDESCRIPTION: This snippet demonstrates how to create a 'Data' class that inherits from 'INotifyDataErrorInfo' and 'INotifyPropertyChanged' interfaces to facilitate validation within the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='datagrid-commands-validation-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButtonStyle\nDESCRIPTION: This snippet provides a placeholder for XAML defining the style for the \"Cancel\" button within the TemplatedPicker dropdown. The style affects the Cancel button's appearance (e.g., background, text color, border).  The style targets the `Button` type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-style-cancel-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining Country Data Model in C#\nDESCRIPTION: C# class implementing the Country data model which is used as the item type in the CollectionView's ItemsSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-commands.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public Country(string name)\n    {\n        this.Name = name;\n    }\n\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Populate DataGrid with Sample Data (C#)\nDESCRIPTION: This C# snippet populates the RadDataGrid with a list of Data objects. Each Data object contains a Country and a Capital property, serving as sample data for the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-right-click.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"this.dataGrid.ItemsSource = new List<Data>\\n{\\n\\tnew Data { Country = \\\"India\\\", Capital = \\\"New Delhi\\\"},\\n\\tnew Data { Country = \\\"South Africa\\\", Capital = \\\"Cape Town\\\"},\\n\\tnew Data { Country = \\\"Nigeria\\\", Capital = \\\"Abuja\\\" },\\n\\tnew Data { Country = \\\"Singapore\\\", Capital = \\\"Singapore\\\" }\\n};\"\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declarations\nDESCRIPTION: Required namespace declarations for using the SideDrawer control and custom commands.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \nxmlns:local=\"the namespace where the custom command is defined\"\n```\n\n----------------------------------------\n\nTITLE: Categorical Data Model\nDESCRIPTION: This C# snippet defines a simple data model for categorical data, typically used as input for chart series. It includes properties for a category (string) and a value (double).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/spline-area-series.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='categorical-data-model' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to the XAML file, which is necessary for using Telerik controls including the ToggleButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/visual-states.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model for .NET MAUI CollectionView Item Swipe\nDESCRIPTION: Data model class that represents items in the CollectionView. Implements INotifyPropertyChanged to support UI updates when properties change.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Person : INotifyPropertyChanged\n{\n    private string name;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public string Name\n    {\n        get\n        {\n            return this.name;\n        }\n        set\n        {\n            if (this.name != value)\n            {\n                this.name = value;\n                this.OnPropertyChanged(\"Name\");\n            }\n        }\n    }\n\n    private void OnPropertyChanged(string propertyName)\n    {\n        this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Business Object - C#\nDESCRIPTION: Creates a business object type 'Client' with defined properties for use in AutoComplete.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/display-text.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Client {\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating City Data Model in C#\nDESCRIPTION: Defines the City model class that inherits from Location for use as child items in the TreeView hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class City : Location\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik NuGet Source with API Key using .NET CLI\nDESCRIPTION: This command adds the Telerik NuGet server as a package source using .NET CLI with an API key for authentication. This method is more secure as it avoids storing the actual account password.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/using-dotnet-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source https://nuget.telerik.com/v3/index.json --name TelerikNuGetFeed --username api-key --password <THE-VALUE-OF-YOUR-API-KEY> --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: AutoComplete ViewModel with Client Collection in C#\nDESCRIPTION: A C# ViewModel class that provides a collection of Client objects and a SelectedClient property for binding to the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private string selectedClient;\n    private ObservableCollection<Client> clients;\n\n    public ViewModel()\n    {\n        this.selectedClient = string.Empty;\n        this.clients = this.GenerateClients();\n    }\n\n    public string SelectedClient\n    {\n        get\n        {\n            return this.selectedClient;\n        }\n        set\n        {\n            if (this.selectedClient != value)\n            {\n                this.selectedClient = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public ObservableCollection<Client> Clients\n    {\n        get\n        {\n            return this.clients;\n        }\n        set\n        {\n            if (this.clients != value)\n            {\n                this.clients = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    private ObservableCollection<Client> GenerateClients()\n    {\n        var source = new ObservableCollection<Client>();\n\n        source.Add(new Client() { Id = 1, Name = \"Alfreda Barton\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 2, Name = \"Blake Walton\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 3, Name = \"Declan Buckner\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 4, Name = \"Idola Murphy\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 5, Name = \"Kennedy Barron\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 6, Name = \"Igor Cardenas\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 7, Name = \"Uriel Browning\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 8, Name = \"Eve Bryan\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 9, Name = \"Benedict Mitchell\", Country = \"Hungary\" });\n        source.Add(new Client() { Id = 10, Name = \"Celeste Cooper\", Country = \"Hungary\" });\n\n        return source;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Style\nDESCRIPTION: This snippet illustrates how to define the style for the header of the popup in the DateTimePicker control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker HeaderStyle=\"{StaticResource HeaderStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining PopupView Style\nDESCRIPTION: In this snippet, learn how to define the PopupView style for customizing the layout and appearance of the DateTimePicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker PopupViewStyle=\"{StaticResource PopupViewStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring CollectionView with LoadOnDemand Event\nDESCRIPTION: Sets up CollectionView control with Manual LoadOnDemandMode and event handler\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/event.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-loadondemand-event' />\n```\n\n----------------------------------------\n\nTITLE: Styling the Clear Button in DateTimePicker\nDESCRIPTION: Example showing how to customize the appearance of the Clear button in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-clear-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Shows how to register Telerik controls in a .NET MAUI application by calling the UseTelerik extension method within the CreateMauiApp method of the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n\t    var builder = MauiApp.CreateBuilder();\n\t    builder\n\t\t    .UseTelerik()\n\t\t    .UseMauiApp<App>()\n\t\t    .ConfigureFonts(fonts =>\n\t\t    {\n\t\t\t    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t    });\n\n\t    return builder.Build();\n    }\n}           \n```\n\n----------------------------------------\n\nTITLE: MAUI CheckBox XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for using the Telerik CheckBox control in .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace (XAML)\nDESCRIPTION: This code snippet shows how to add the Telerik namespace in XAML, which is necessary to use the `RadTimePicker` control.  This namespace declaration allows referencing Telerik UI for .NET MAUI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for XAML\nDESCRIPTION: This snippet is used to include the Telerik namespace in XAML, necessary for accessing the components provided by Telerik for .NET MAUI. It establishes the correct schema for the various Telerik UI components to be used in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/nullvalues.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Source to the PDF Viewer Control\nDESCRIPTION: Code snippet showing how to load a PDF document into the PDF Viewer control. This is a basic setup required before text selection can be used.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/selection/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Code to set the Source property of the PDF Viewer\n// This would typically load a PDF file from a stream or file path\n```\n\n----------------------------------------\n\nTITLE: Setting DropDown Picker Mode in Telerik DateTimePicker for .NET MAUI\nDESCRIPTION: This code snippet shows how to set the PickerMode property to DropDown for a Telerik RadDateTimePicker control. The DropDown mode is the default value for desktop platforms (Windows, macOS).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker Date=\"2020,05,15\" \n\t\t\t\t\t\t\tPickerMode=\"DropDown\" />\n```\n\n----------------------------------------\n\nTITLE: Changing Row Background Color Using Telerik UI for .NET MAUI\nDESCRIPTION: This snippet illustrates setting the RowBackgroundStyle property to modify the background color for all rows in a Telerik DataGrid for MAUI component. The code sets the row background color to LightGreen. This style is applied at the DataGrid level, affecting all rows.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-change-background-color.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid.RowBackgroundStyle>\\n    <Style TargetType=\\\"telerik:DataGridRowBackgroundAppearance\\\">\\n        <Setter Property=\\\"BackgroundColor\\\" Value=\\\"LightGreen\\\"/>\\n    </Style>\\n</telerik:RadDataGrid.RowBackgroundStyle>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet shows how to add the Telerik namespace to a XAML file. This namespace is required to use Telerik UI components, such as the RadDataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/datatable-support.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration for Styles in XAML\nDESCRIPTION: This snippet illustrates how to declare the necessary namespace for utilizing styles defined in the TimeSpanPicker. It ensures that the types are properly resolved in the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Model and ViewModel for Pie Chart Data in C#\nDESCRIPTION: This snippet defines a CategoricalData model and a ViewModel class to provide sample data for the Pie Chart. It includes properties for Category and Value, and populates an ObservableCollection with sample data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CategoricalData\n{\n    public object Category { get; set; }\n    public double Value { get; set; }\n}\n\npublic class ViewModel\n{\n    public ObservableCollection<CategoricalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetCategoricalData();\n    }\n\n    private static ObservableCollection<CategoricalData> GetCategoricalData()\n    {\n        var data = new ObservableCollection<CategoricalData>\n    {\n        new CategoricalData { Category = \"Greenings\", Value = 52 },\n        new CategoricalData { Category = \"Perfecto\", Value = 19 },\n        new CategoricalData { Category = \"NearBy\", Value = 82 },\n        new CategoricalData { Category = \"Family\", Value = 23 },\n        new CategoricalData { Category = \"Fresh\", Value = 56 },\n    };\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DataForm Group Layout to Grid in XAML\nDESCRIPTION: Illustrates how to set the LayoutDefinition property of a DataFormGroup to use a DataFormGridLayout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/grouping/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-grouping-configuration-layout'/>\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel with Sample Kanban Data\nDESCRIPTION: This snippet defines a MainViewModel class that generates sample Kanban data with a hierarchical structure. It creates multiple KanbanItem instances (weeks), each containing multiple KanbanSubItem instances (jobs).\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-cross-orientation-nesting.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.ObjectModel;\n\nnamespace HorizontalAndVerticalDemo;\n\npublic class MainViewModel\n{\n    public MainViewModel()\n    {\n        var data = new ObservableCollection<KanbanItem>();\n\n        for (int j = 1; j < 5; j++)\n        {\n            var item = new KanbanItem();\n            item.WeekName = $\"Week {j}\";\n        \n            item.SubItems = new ObservableCollection<KanbanSubItem>();\n\n            for (int i = 1; i < 31; i++)\n            {\n                item.SubItems.Add(new KanbanSubItem {Title = $\"Job {i}\", Deadline = DateTime.Now.AddDays(i * j)});\n            }\n\n            data.Add(item);\n        }\n\n        Items = data;\n    }\n\n    public ObservableCollection<KanbanItem> Items { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PopupViewStyle for TimePicker\nDESCRIPTION: This snippet shows how to define the PopupViewStyle property in XAML for the TimePicker control, which determines the style of the popup view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-style-popupview-style' />\n```\n\n----------------------------------------\n\nTITLE: DataGrid Grouping Data Model\nDESCRIPTION: C# class definition for the data item used in DataGrid grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/group-header-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-object' />\n```\n\n----------------------------------------\n\nTITLE: Defining Style Selector Resources in XAML\nDESCRIPTION: Adds the custom day style selector to the page's resources for use in the Scheduler control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/day-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nscheduler-customdaystyleselector-xaml\n```\n\n----------------------------------------\n\nTITLE: Applying CellTapUserCommand to RadDataGrid in MAUI\nDESCRIPTION: This code snippet demonstrates how to add the custom CellTapUserCommand to the RadDataGrid's Commands collection, enabling single-click edit mode activation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/changing-edit-mode-behavior-maui-raddatagrid.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nthis.dataGrid.Commands.Add(new CellTapUserCommand());\n```\n\n----------------------------------------\n\nTITLE: Styling the NavigationView Pane Footer\nDESCRIPTION: This snippet illustrates how to apply a custom style to the footer of the navigation pane using the FooterStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/pane.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='navigationview-pane-footer-styling' />\n```\n\n----------------------------------------\n\nTITLE: Adding Rating Control Namespace in XAML\nDESCRIPTION: Adds the required Telerik XAML namespace to enable Rating control usage in XAML files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace Declaration\nDESCRIPTION: Adds the required Telerik namespace to access RichTextEditor components in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/toolbar/custom-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating SuggestedActionsItem in RadChat\nDESCRIPTION: Demonstrates how to create and configure a SuggestedActionsItem for the RadChat control, enabling interactive user suggestions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/suggested-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Placeholder for chat-suggested-actions-code snippet\n```\n\n----------------------------------------\n\nTITLE: Defining Calendar for DisplayDateChanged Event in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define the Calendar control necessary for utilizing the DisplayDateChanged event in the .NET MAUI framework. It sets up the UI component that will trigger the event when the display date changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/events.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<RadCalendar x:Name=\"calendar\" DisplayDate=\"{Binding DisplayDate}\" DisplayDateChanged=\"OnDisplayDateChanged\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This XAML snippet demonstrates how to add the `telerik` namespace to your XAML file. This namespace is necessary to use Telerik UI controls in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderLabelStyle for First Group in XAML\nDESCRIPTION: This snippet demonstrates how to define a HeaderLabelStyle for the first DataForm group. It sets the text color, font size, and font attributes of the header label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/groups-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"Black\" />\n    <Setter Property=\"FontSize\" Value=\"18\" />\n    <Setter Property=\"FontAttributes\" Value=\"Bold\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating Clients ViewModel\nDESCRIPTION: ViewModel implementation containing a collection of Client objects for AutoComplete data source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/suggest-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining FooterTemplate in XAML\nDESCRIPTION: This snippet demonstrates how to define the FooterTemplate for the ListPicker's popup selector, which appears at the bottom of the selection dialog.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"footerTemplate\">\n    <Button Text=\"Cancel\" Command=\"{TemplateBinding CancelCommand}\" Margin=\"10,0\" BackgroundColor=\"#FF5252\" TextColor=\"White\" />\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Setting Header Position in .NET MAUI TabView\nDESCRIPTION: This XAML snippet demonstrates how to set the position of the TabView's header using the HeaderPosition property with available options such as Top, Bottom, Left, and Right. It configures a RadTabView control with TabViewItems, each containing Labels with specific text content.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\"\n                    HeaderPosition=\"Left\">\n    <telerik:TabViewItem HeaderText=\"Home\">\n        <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"Folder\">\n        <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"View\">\n        <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n    </telerik:TabViewItem>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButtonStyle for TemplatedPicker\nDESCRIPTION: This snippet demonstrates how to set the style for the cancel button in the TemplatedPicker popup in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-cancelbuttonstyle' />\n```\n\n----------------------------------------\n\nTITLE: MAUI ImageEditor Implementation Reference\nDESCRIPTION: Reference to the .NET MAUI implementation of the ImageEditor control with commands, indicated by a snippet reference.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: MAUI\nCODE:\n```\n<snippet id='imageeditor-commands-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Namespace for Telerik Components\nDESCRIPTION: This XAML snippet demonstrates how to define a namespace for Telerik components, allowing their usage within the XAML markup of a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing BarSeries with Rounded Corners in .NET MAUI Chart\nDESCRIPTION: This C# code implements the HandlerChanged event handler and UpdateChart method. It applies platform-specific customizations to add rounded corners to BarSeries on Android and iOS.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/rounded-corners-barseries-dotnet-maui-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void chart_HandlerChanged(object sender, EventArgs e)\n{\n    this.UpdateChart();\n}\n\nprivate void UpdateChart()\n{\n    var platformView = this.chart.Handler.PlatformView;\n#if ANDROID\n    var platformChart = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.RadCartesianChartView)platformView;\n    var platformSeries = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.BarSeries)platformChart.Series.Get(0);\n    platformSeries.AreBarsRounded = true;\n    platformSeries.RoundBarsRadius = 10;\n#elif IOS\n    var platformiOSChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n    var platformSeries = (TelerikUI.TKChartBarSeries)platformiOSChart.Series[0];\n    platformSeries.Style.Palette = new TelerikUI.TKChartPalette();\n    var paletteItem = new TelerikUI.TKChartPaletteItem();\n    paletteItem.Fill = new TelerikUI.TKSolidFill(UIKit.UIColor.Red, 5.0f);\n    paletteItem.Stroke = new TelerikUI.TKStroke(UIKit.UIColor.Black);\n    platformSeries.Style.Palette.AddPaletteItem(paletteItem);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Individual HeaderLabelStyles in XAML for .NET MAUI DataForm\nDESCRIPTION: These snippets define two different HeaderLabelStyles for individual editors in a DataForm. One style sets the text color to red, while the other sets it to green.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/header-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"HeaderStyle\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"Red\" />\n</Style>\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"HeaderStyleAlt\" TargetType=\"Label\">\n    <Setter Property=\"TextColor\" Value=\"Green\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Location Model Implementation\nDESCRIPTION: Reference to a C# class implementation for the Location model used in the hierarchical data structure example for TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-location-model' />\n```\n\n----------------------------------------\n\nTITLE: Implementing RadNumericInput Handler Access\nDESCRIPTION: C# implementation showing how to access the RadTextInput handler and subscribe to handler changes. Includes helper methods for traversing the visual tree and updating native elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/access-radtextinput-inner-entry-telerik-maui-numericinput.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n\n    private void OnRadNumericInputLoaded(object sender, EventArgs e)\n    {\n        var textInput = ChildOfType<RadTextInput>(this.numeric);\n        if (textInput != null)\n        {\n            var handler = textInput.Handler;\n            if (handler == null)\n            {\n                textInput.HandlerChanged += this.OnTextInputHandlerChanged;\n            }\n            else\n            {\n                this.UpdateNativeElement(handler);\n            }\n        }\n    }\n\n    internal static T ChildOfType<T>(View visualElement) where T : View\n    {\n        if (visualElement == null)\n        {\n            return null;\n        }\n\n        foreach (var item in VisualTreeElementExtensions.GetVisualTreeDescendants(visualElement))\n        {\n            if (item is T targetElement)\n            {\n                return targetElement;\n            }\n        }\n\n        return null;\n    }\n\n    private void OnTextInputHandlerChanged(object sender, EventArgs e)\n    {\n        var textInput = (RadTextInput)sender;\n        this.UpdateNativeElement(textInput.Handler);\n        textInput.HandlerChanged -= this.OnTextInputHandlerChanged;\n    }\n\n    private void UpdateNativeElement(IViewHandler handler)\n    {\n        var nativeEntry = handler.PlatformView as Telerik.Maui.Platform.RadMauiTextInput;\n        if (nativeEntry != null)\n        {\n            // Add your logic here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButtonStyle\nDESCRIPTION: This code snippet demonstrates how to define the style for the Cancel button in the drop-down settings of the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings>\n    <PickerDropDownSettings.CancelButtonStyle>\n        <Style TargetType=\"Button\">\n            <!-- Style properties go here -->\n        </Style>\n    </PickerDropDownSettings.CancelButtonStyle>\n</RadTimeSpanPicker.DropDownSettings>\n```\n\n----------------------------------------\n\nTITLE: Implementing HandlerChanged Event for Pie Chart in C#\nDESCRIPTION: This C# snippet shows the implementation of the HandlerChanged event for the Pie Chart. It calls the UpdateChart method to apply platform-specific customizations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void chart_HandlerChanged(object sender, EventArgs e)\n{\n    this.UpdateChart();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TreeView with ItemTapped Event Handler in XAML\nDESCRIPTION: XAML code defining a RadTreeView control with an ItemTapped event handler. The control is configured with various display settings and bound to a ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                       ItemTapped=\"TreeView_ItemTapped\"\n                       BackgroundColor=\"Transparent\"\n                       IsVisible=\"True\"\n                       ItemsSource=\"{Binding Items}\"\n                       SelectedItems=\"{Binding SelectedItems}\"\n                       SelectionMode=\"Multiple\"\n                       ExpandCollapseIconTemplateSelector=\"{StaticResource IconTemplateSelector}\"\n                       ItemTemplate=\"{StaticResource ExpandCollapseItemTemplate}\"\n                       ExpandedIconTemplate=\"{StaticResource ExpandedIconTemplate}\"\n                       CollapsedIconTemplate=\"{StaticResource CollapsedIconTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik in XAML\nDESCRIPTION: In this snippet, the proper namespace for Telerik XAML components is added to the XAML file. This ensures that the RadTimePicker is recognized and can be used within the XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/time-range.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet shows how to add the telerik namespace to the XAML file, which is necessary for using Telerik UI controls including the GridSplitter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik Namespace\nDESCRIPTION: This XAML namespace declaration is necessary to use Telerik controls in a .NET MAUI project. It links to Telerik's XAML schema for MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Maui.Controls.Compatibility Package Reference\nDESCRIPTION: XML configuration showing how to add the compatibility package reference to the project file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-compatibility-net-telerik-nuget-filenotfoundexception.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n\t<PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n\t<PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"$(MauiVersion)\" />\n\t<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"9.0.0\" />\n\t<PackageReference Include=\"Telerik.UI.for.Maui\" Version=\"8.0.0\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButtonText\nDESCRIPTION: This snippet illustrates how to set the text for the Cancel button visible in the drop-down of the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings.CancelButtonText>\n    Cancel\n</RadTimeSpanPicker.DropDownSettings.CancelButtonText>\n```\n\n----------------------------------------\n\nTITLE: Adding Business Object for ListView Grouping - C#\nDESCRIPTION: This snippet demonstrates how to define a business object that will serve as the data source for the ListView. It is essential for the grouping operations that follow.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/property-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='listview-grouping-groupdescriptors-businessobject' />\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager Navigation View Style in XAML\nDESCRIPTION: This snippet demonstrates how to define the RadDataPager's NavigationViewStyle property in XAML using StaticResource to reference defined styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/navigationview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager NavigationViewStyle=\"{StaticResource NavigationViewStyle}\">\n```\n\n----------------------------------------\n\nTITLE: Setting Suggestion View Height to Zero in AutoComplete for .NET MAUI\nDESCRIPTION: This snippet sets the SuggestionViewHeight property to 0, which removes the height of the Suggestion View from the display area, thus hiding it effectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-no-result-message-autocomplete-net-maui.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autoComplete\" SuggestionViewHeight=\"0\" ... />\n```\n\n----------------------------------------\n\nTITLE: DataGrid XAML Definition\nDESCRIPTION: Defines the DataGrid control structure in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/cell-tap.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-commands-celltap-xaml'/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Content in XAML\nDESCRIPTION: XAML configuration to set a scaffolded page as ShellContent in a blank Shell .NET MAUI application's AppShell.xaml file\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-integration/scaffoldings.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell\n    x:Class=\"TestScaffoldings.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:TestScaffoldings\"\n    xmlns:pages=\"clr-namespace:MyApp.Pages\"\n    Shell.FlyoutBehavior=\"Disabled\"\n    Title=\"TestScaffoldings\">\n\n    <ShellContent\n        Title=\"Home\"\n        ContentTemplate=\"{DataTemplate pages:TelerikDataGridPage}\"\n        Route=\"MainPage\" />\n\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for PDF Viewer Text Selection Commands\nDESCRIPTION: C# implementation of a ViewModel that handles commands triggered from the selection menu. This would contain logic for actions like copy, highlight, or other custom operations on selected text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/selection/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// ViewModel implementation for handling selection commands\n// Would contain properties, commands, and methods related to text selection\n```\n\n----------------------------------------\n\nTITLE: Add Namespace to XAML\nDESCRIPTION: Defines the telerik namespace in the XAML page. This is necessary to use Telerik controls in the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_16\n\nLANGUAGE: XAML\nCODE:\n```\n ```XAML\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n ```\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: Shows how to register Telerik controls in a .NET MAUI application by calling the UseTelerik() extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Time Indicator Visibility in MAUI Scheduler\nDESCRIPTION: Code example showing how to disable the current time indicator in a Scheduler view by setting the IsCurrentTimeIndicatorVisible property to False.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/current-time-indicator.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-current-time-indicator' />\n```\n\n----------------------------------------\n\nTITLE: Xamarin Chart XAML Namespace Declaration\nDESCRIPTION: The XAML namespace declaration for the Xamarin Chart control, used in Xamarin.Forms projects to reference the Telerik Chart control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerikChart=\"clr-namespace:Telerik.XamarinForms.Chart;assembly=Telerik.XamarinForms.Chart\"\n```\n\n----------------------------------------\n\nTITLE: Implementing IsToggledChanged Event with ToggleButton in XAML\nDESCRIPTION: XAML code for implementing a ToggleButton with the IsToggledChanged event handler, which fires when the button's toggle state changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadToggleButton x:Name=\"toggleButton\" \n                           Grid.Row=\"0\"\n                           Margin=\"0, 10, 0, 10\"\n                           HeightRequest=\"50\"\n                           BackgroundColor=\"#2E8B57\"\n                           BorderColor=\"#2E8B57\"\n                           VerticalOptions=\"Center\"\n                           HorizontalOptions=\"Center\"\n                           IsToggledChanged=\"RadToggleButton_IsToggledChanged\"\n                           Text=\"Click me\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RadCartesianChart in XAML\nDESCRIPTION: XAML configuration for the RadCartesianChart control with horizontal and vertical axes setup and line series binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-vertical-axis-label-position-line-visibility.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart x:Name=\"chart\">\n    <telerik:RadCartesianChart.BindingContext>\n        <local:CategoricalDataViewModel />\n    </telerik:RadCartesianChart.BindingContext>\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis LabelFitMode=\"MultiLine\"\n                                 PlotMode=\"OnTicks\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis />\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries ValueBinding=\"Value\"\n                            CategoryBinding=\"Category\"\n                            ItemsSource=\"{Binding Data}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Shows how to add the Telerik namespace to the XAML file for using Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying Group Header Style to DataGrid\nDESCRIPTION: XAML code showing how to apply the defined group header style to a DataGrid control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/group-header-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-groupheader-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Adding Data Item for First Spinner - C#\nDESCRIPTION: This snippet provides a C# code example for adding a data item that will populate the first spinner in the TemplatedPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: Font Icon Converter\nDESCRIPTION: Implements a font icon converter.  This converter is used to convert some value into a font icon for display in the navigation items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='fonticon-converter'/>\n```\n\n----------------------------------------\n\nTITLE: Accessing RadTextInput from RadEntry Template in C#\nDESCRIPTION: Shows how to handle the Loaded event to access the RadTextInput control from the RadEntry template, and subscribe to its HandlerChanged event. Includes a helper method to find child elements of a specific type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/how-to-access-radentry-handler-telerik-ui-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnEntryLoaded(object sender, EventArgs e)\n{\nvar textInput = ChildOfType<RadTextInput>(this.entry);\nif (textInput != null)\n{\n    var handler = textInput.Handler;\n    if (handler == null)\n    {\n        textInput.HandlerChanged += this.OnTextInputHandlerChanged;\n    }\n    else\n    {\n        this.UpdateNativeElement(handler);\n    }\n}\n}\n\ninternal static T ChildOfType<T>(View visualElement) where T : View\n{\n    if (visualElement == null)\n    {\n        return null;\n    }\n\n    foreach (var item in VisualTreeElementExtensions.GetVisualTreeDescendants(visualElement))\n    {\n        if (item is T targetElement)\n        {\n            return targetElement;\n        }\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TreeView with SelectionChanged Event Handler in XAML\nDESCRIPTION: XAML code for a RadTreeView control configured with a SelectionChanged event handler and various display properties like templates and selection mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                       SelectionChanged=\"TreeView_SelectionChanged\"\n                       BackgroundColor=\"Transparent\"\n                       IsVisible=\"True\"\n                       ItemsSource=\"{Binding Items}\"\n                       SelectedItems=\"{Binding SelectedItems}\"\n                       SelectionMode=\"Multiple\"\n                       ExpandCollapseIconTemplateSelector=\"{StaticResource IconTemplateSelector}\"\n                       ItemTemplate=\"{StaticResource ExpandCollapseItemTemplate}\"\n                       ExpandedIconTemplate=\"{StaticResource ExpandedIconTemplate}\"\n                       CollapsedIconTemplate=\"{StaticResource CollapsedIconTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace in XAML\nDESCRIPTION: This XAML code snippet adds the telerik namespace to the XAML file, allowing the use of Telerik UI controls such as the RadDataGrid.  This is a prerequisite for using Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scaffolded Screen in XAML for Blank Shell App Template\nDESCRIPTION: This XAML snippet shows how to set a newly scaffolded screen directly to the ShellContent inside the AppShell.xaml file when using a Blank Shell app template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-code-integration/scaffoldings.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Shell\n    x:Class=\"TestScaffoldings.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:TestScaffoldings\"\n    xmlns:pages=\"clr-namespace:MyApp.Pages\"\n    Shell.FlyoutBehavior=\"Disabled\"\n    Title=\"TestScaffoldings\">\n\n    <ShellContent\n        Title=\"Home\"\n        ContentTemplate=\"{DataTemplate pages:TelerikCollectionViewPage}\"\n        Route=\"MainPage\" />\n\n</Shell>\n```\n\n----------------------------------------\n\nTITLE: Defining MaskedEntry Control in XAML\nDESCRIPTION: XAML definition of a Telerik RadTextMaskedEntry control with a numeric mask pattern and a Focused event handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-cursor-position-at-beginning.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTextMaskedEntry Focused=\"RadTextMaskedEntry_Focused\" Mask=\"#####\" FontSize=\"26\" x:Name=\"mask\"/>\n```\n\n----------------------------------------\n\nTITLE: Applying Individual Editor Error Styles\nDESCRIPTION: XAML code showing how to set error label styles for individual editors in the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/error-message-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-error-label-style-individual' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Adds the required Telerik XAML namespace to access the RadButton control in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/button-howto-create-circle-button.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ProgressBar C# Namespace Import\nDESCRIPTION: C# namespace import for Telerik ProgressBar in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/migrate-from-xamarin.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik Namespace - XAML\nDESCRIPTION: This XAML snippet is used to declare the Telerik namespace required for using Telerik components in your application. It enables the application to access Telerik controls like RadBarcode and its related properties effectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/qrcode-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CollectionView with Drag and Drop in XAML\nDESCRIPTION: XAML markup for implementing a CollectionView with drag and drop functionality enabled through the IsDragDropEnabled property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='collectionview-reorder-items' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Dialog Events in XAML\nDESCRIPTION: XAML configuration for RadScheduler with dialog opening and closing events\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/built-in-dialogs.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-dialogs-events-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining DataPager Navigation ComboBox Style in XAML\nDESCRIPTION: This snippet illustrates how to define the RadDataPager's NavigationComboBoxStyle property in XAML using StaticResource for styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/navigationview.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataPager NavigationComboBoxStyle=\"{StaticResource NavigationComboStyle}\">\n```\n\n----------------------------------------\n\nTITLE: Adding XAML Namespace for Telerik Controls\nDESCRIPTION: Required namespace declaration for using Telerik controls in XAML\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/property-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the 'telerik' namespace in a XAML file, which is necessary for utilizing Telerik UI components such as the RadListView. The namespace URI should match the one provided by Telerik for the specific version of the library being used.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/layouts.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid with Style Selectors in XAML\nDESCRIPTION: XAML code snippet showing how to define a DataGrid with CellContentStyleSelector, CellDecorationStyleSelector, and GroupStyleSelector set as static resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                     AutoGenerateColumns=\"False\"\n                     CellContentStyleSelector=\"{StaticResource MyCellContentStyleSelector}\"\n                     CellDecorationStyleSelector=\"{StaticResource MyCellDecorationStyleSelector}\"\n                     GroupHeaderStyleSelector=\"{StaticResource MyGroupStyleSelector}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Name\"\n                                   HeaderText=\"Name\" />\n        <telerik:DataGridTextColumn PropertyName=\"Country\"\n                                   HeaderText=\"Country\" />\n        <telerik:DataGridNumericalColumn PropertyName=\"Salary\"\n                                       HeaderText=\"Salary\" />\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Configuring PieChart XAML Structure\nDESCRIPTION: XAML definition of RadPieChart with PieSeries configuration including basic properties like ShowLabels and RadiusFactor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-pieseries-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPieChart x:Name=\"chart\" HandlerChanged=\"chart_HandlerChanged\">\n    <telerik:RadPieChart.BindingContext>\n        <local:ViewModel />\n    </telerik:RadPieChart.BindingContext>\n    <telerik:RadPieChart.Series>\n        <telerik:PieSeries ShowLabels=\"True\"\n                    RadiusFactor=\"0.8\"\n                    ValueBinding=\"Value\"\n                    ItemsSource=\"{Binding Data}\" />\n    </telerik:RadPieChart.Series>\n</telerik:RadPieChart>\n```\n\n----------------------------------------\n\nTITLE: Setting Offset and Length in .NET MAUI Gauge Axis\nDESCRIPTION: Configures the distance between elements and the axis line, as well as the length of ticks using offset and length properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/axis.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeLinearAxis LabelOffset=\"8\"\n\t\t\t\t\t\t Maximum=\"4\"\n\t\t\t\t\t\t Minimum=\"0\"\n\t\t\t\t\t\t Step=\"0.5\"\n\t\t\t\t\t\t TickLength=\"3\"\n\t\t\t\t\t\t TickOffset=\"3\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet adds the necessary namespace for Telerik UI controls to be used in a .NET MAUI XAML page.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderStyle in XAML\nDESCRIPTION: This snippet shows how to define a HeaderStyle for the DataFormGroupHeaderView. It sets the background color, border color, and border thickness of the header.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/groups-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:DataFormGroupHeaderView\">\n    <Setter Property=\"BackgroundColor\" Value=\"#EAEAEA\" />\n    <Setter Property=\"BorderColor\" Value=\"#D3D3D3\" />\n    <Setter Property=\"BorderThickness\" Value=\"1\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: XAML namespace declaration for using Telerik UI for .NET MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for DataForm in C# for .NET MAUI\nDESCRIPTION: This snippet defines the DataTypeEditorsModel class used as a ViewModel for the RadDataForm. It includes properties for Name, Age, and Birthday with their respective data types and attributes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/header-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataTypeEditorsModel\n{\n    [DisplayOptions(Header = \"Enter Name\")]\n    public string Name { get; set; }\n\n    [DisplayOptions(Header = \"Enter Age\")]\n    public int Age { get; set; }\n\n    [DisplayOptions(Header = \"Enter Birthday\")]\n    public DateTime Birthday { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data for DataPager\nDESCRIPTION: C# code defining sample data to be used with the DataPager and CollectionView example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/paging.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datapager-data' />\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionChanged Event Handler\nDESCRIPTION: Event handler implementation for the SegmentedControl SelectionChanged event.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/segmentedcontrol/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='segmentcontrol-selection-event' />\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML - XAML\nDESCRIPTION: This snippet shows how to declare the 'telerik' namespace in XAML, which is necessary for utilizing Telerik controls in the application. This is a basic setup that is required for all following XAML components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/nested-properties.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: DisplayDateChanged Event Handler in .NET MAUI\nDESCRIPTION: This snippet shows the implementation of the event handler for the DisplayDateChanged event. It handles the event and can process old and new display date values received through the event arguments.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/events.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnDisplayDateChanged(object sender, ValueChangedEventArgs<DateTime> e) {\n    // Handle the display date change\n    DateTime oldDate = e.OldValue;\n    DateTime newDate = e.NewValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Xamarin Border Namespace\nDESCRIPTION: Specifies the XAML and C# namespaces for the RadBorder control in Xamarin.Forms. The XAML namespace uses a clr-namespace declaration pointing to the Telerik.XamarinForms.Primitives assembly, while the C# namespace uses a using directive.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerikPrimitives=\\\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\\\"\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.XamarinForms.Primitives;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Events ViewModel\nDESCRIPTION: ViewModel implementation for handling TreeView events.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/selection.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-events-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Appointment Data Template in .NET MAUI\nDESCRIPTION: This XML snippet demonstrates creating a custom data template within a ContentPage's resources in .NET MAUI. It defines two templates: one for all-day appointments and one for regular appointments, using a colored dot represented by a RadBorder. This template changes the default background color to a dot.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-appointment-display-dot-net-maui-scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <local:CustomAppointmentDataTemplate x:Key=\"CustomAppointmentDataTemplate\">\n            <local:CustomAppointmentDataTemplate.AllDayAppointmentTemplate>\n                <DataTemplate>\n                    <HorizontalStackLayout>\n                        <telerik:RadBorder WidthRequest=\"10\"\n                                           HeightRequest=\"10\" \n                                           CornerRadius=\"5\" \n                                           BackgroundColor=\"Aqua\" />\n                        <Label Text=\"{Binding Occurrence.Appointment.Subject}\"\n                           TextColor=\"Black\"  Margin=\"6, 0, 4, 0\"\n                           VerticalTextAlignment=\"Center\" />\n                    </HorizontalStackLayout>\n                </DataTemplate>\n            </local:CustomAppointmentDataTemplate.AllDayAppointmentTemplate>\n            <local:CustomAppointmentDataTemplate.AppointmentTemplate>\n                <DataTemplate>\n                    <HorizontalStackLayout>\n                        <telerik:RadBorder WidthRequest=\"10\" HeightRequest=\"10\" CornerRadius=\"5\"\n                         BackgroundColor=\"#8660C5\"\n                         HorizontalOptions=\"Start\" />\n                        <Label Text=\"{Binding Occurrence.Appointment.Subject}\"\n                               VerticalTextAlignment=\"Center\"\n                               TextColor=\"Black\" \n                               Margin=\"6, 0, 4, 0\" />\n                    </HorizontalStackLayout>\n                </DataTemplate>\n            </local:CustomAppointmentDataTemplate.AppointmentTemplate>\n        </local:CustomAppointmentDataTemplate>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Implementing Android-Specific Point Renderer\nDESCRIPTION: Custom point renderer implementation for Android platform to draw circular markers on data points\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-line-series-datapoint-markers.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class PointRenderer : Java.Lang.Object, global::Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Pointrenderers.IChartDataPointRenderer\n{\n    private global::Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries lineSeries;\n    public PointRenderer(global::Com.Telerik.Widget.Chart.Visualization.CartesianChart.Series.Categorical.LineSeries lineSeries)\n    {\n        this.lineSeries = lineSeries;\n    }\n    public void RenderPoint(global::Android.Graphics.Canvas canvas, global::Com.Telerik.Widget.Chart.Engine.DataPoints.DataPoint dataPoint)\n    {\n        global::Com.Telerik.Widget.Palettes.PaletteEntry entry = this.lineSeries.Palette.GetEntry(this.lineSeries, this.lineSeries.CollectionIndex);\n        using (global::Android.Graphics.Paint paint = new global::Android.Graphics.Paint())\n        {\n            paint.Color = new global::Android.Graphics.Color(entry.Fill);\n            canvas.DrawCircle((float)dataPoint.CenterX, (float)dataPoint.CenterY, 12, paint);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates adding the Telerik namespace into a XAML file, necessary for using Telerik controls. Ensure the Telerik.Maui.Controls assembly is referenced in the project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/globalization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"clr-namespace:Telerik.Maui.Controls;assembly=Telerik.Maui.Controls\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewModel for CollectionView with Swipe Support\nDESCRIPTION: This snippet shows a sample ViewModel class that provides data for the CollectionView. It contains a collection of Item objects that can be swiped in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-events.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : ObservableObject\n{\n    private ObservableCollection<Item> items;\n\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Item>\n        {\n            new Item { Name = \"Item 1\", Category = \"Category 1\" },\n            new Item { Name = \"Item 2\", Category = \"Category 2\" },\n            new Item { Name = \"Item 3\", Category = \"Category 3\" },\n            new Item { Name = \"Item 4\", Category = \"Category 4\" },\n            new Item { Name = \"Item 5\", Category = \"Category 5\" },\n            new Item { Name = \"Item 6\", Category = \"Category 6\" },\n            new Item { Name = \"Item 7\", Category = \"Category 7\" },\n            new Item { Name = \"Item 8\", Category = \"Category 8\" },\n            new Item { Name = \"Item 9\", Category = \"Category 9\" },\n            new Item { Name = \"Item 10\", Category = \"Category 10\" }\n        };\n    }\n\n    public ObservableCollection<Item> Items\n    {\n        get { return this.items; }\n        set { this.SetProperty(ref this.items, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling TreeViewItemView Border in .NET MAUI XAML\nDESCRIPTION: XAML style definition to remove the bottom border separator line from TreeView items by setting BorderColor to Transparent and BorderThickness to 0. This style can be applied implicitly to all TreeViewItemView elements or explicitly to specific elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-treeview-items-separator-lines-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Style TargetType=\"telerik:TreeViewItemView\">\n    <Setter Property=\"BorderColor\" Value=\"Transparent\"/>\n    <Setter Property=\"BorderThickness\" Value=\"0\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: DataGrid Namespace Declaration\nDESCRIPTION: XAML namespace declaration for using Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/resizing.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding the XAML Namespace for Telerik Controls\nDESCRIPTION: XAML namespace declaration required to use Telerik UI components in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding the first data item for TemplatedPicker in .NET MAUI\nDESCRIPTION: This snippet shows how to add a data item for the first spinner of the TemplatedPicker. It is essential for populating the picker with selectable options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='templatedpicker-country-businessmodel' />\n```\n\n----------------------------------------\n\nTITLE: Xamarin ProgressBar C# Namespace Import\nDESCRIPTION: C# namespace import for Telerik ProgressBar in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Primitives;\n```\n\n----------------------------------------\n\nTITLE: Adding Basic TemplatedButton in .NET MAUI\nDESCRIPTION: Adds a basic RadTemplatedButton with simple text content to a MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadTemplatedButton x:Name=\"templatedButton\"\n\tContent=\"My TemplatedButton Content\" />\n```\n\n----------------------------------------\n\nTITLE: Comparing C# Namespaces for TimeSpanPicker in Xamarin vs .NET MAUI\nDESCRIPTION: Illustrates the C# using statements required for the TimeSpanPicker control in Xamarin.Forms versus .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Input;\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Localizing RadChat Entry Placeholder\nDESCRIPTION: Demonstrates how to customize the default chat input field watermark text using a localization key for internationalization support\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| -----------------| ------------- |\n| `Chat_EntryPlaceholder` | `Type a message...` |\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configuring Telerik MAUI controls through the UseTelerik extension method in the application startup process\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Namespace in C#\nDESCRIPTION: Imports the Telerik.Maui.Controls namespace in C# to facilitate the use of Telerik controls such as the TemplatedButton in code-behind files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: Shows how to declare the Telerik XAML namespace for using the ImageEditor control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/loading-image.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduler with Custom Day Styling\nDESCRIPTION: Defines the Scheduler control with the custom day styling implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/day-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nscheduler-day-styling\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Details Template in XAML\nDESCRIPTION: Demonstrates how to define the RowDetailsTemplate property to specify the layout and content of row details\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-rowdetails-template'/>\n```\n\n----------------------------------------\n\nTITLE: Defining ComboBox with Complex Object Binding in XAML\nDESCRIPTION: XAML code showing how to define a ComboBox control with binding to a complex object. The snippet references a telerik namespace and uses the DisplayMemberPath property to specify which property of the bound object should be displayed.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/databinding.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"comboBox\" ItemsSource=\"{Binding Cities}\" DisplayMemberPath=\"Name\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel and Data Model in C#\nDESCRIPTION: This C# code defines a ViewModel and data models (Location and Customer) to provide data for the TabView. It includes an ObservableCollection of Location objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-tab-content-on-demand-net-maui.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        Data = new ObservableCollection<Location>\n        {\n            // Sample data\n\n        };\n    }\n    public ObservableCollection<Location> Data { get; set; }\n}\n\npublic class Location\n{\n    public string Name { get; set; }\n    public ObservableCollection<Customer> Customers { get; set; }\n}\n\npublic class Customer\n{\n    public string Name { get; set; }\n    public int Number { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Cities by Country using PropertyGroupDescriptor - C#\nDESCRIPTION: This snippet shows how to utilize the PropertyGroupDescriptor to group a collection of cities by their Country property in the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/property-group-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='listview-grouping-propertygroupdescriptor' />\n```\n\n----------------------------------------\n\nTITLE: Setting MainPage for Blank App Template in C#\nDESCRIPTION: Code to set a scaffolded page as the MainPage in a blank .NET MAUI application's App.xaml.cs file\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-integration/scaffoldings.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMainPage = new MyApp.Pages.TelerikDataGridPage();\n```\n\n----------------------------------------\n\nTITLE: Binding ExpandedRowDetails in .NET MAUI with XAML\nDESCRIPTION: This XAML snippet shows how to bind the ExpandedRowDetails property of a DataGrid to an observable collection in the ViewModel. The collection maintains items with expanded row details. Dependencies include the DataGrid component from Telerik's .NET MAUI suite and a properly configured MVVM architecture. The snippet defines a DataTemplate and sets up the DataGrid to use this template for row details.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/detect-row-detail-expansion-collapse-maui-datagrid.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\\n    <ResourceDictionary>\\n        <DataTemplate x:Key=\\\"TemplateForRowDetails\\\">\\n            <VerticalStackLayout BackgroundColor=\\\"#F2EFF9\\\"\\n                Padding=\\\"12\\\">\\n                <Label Text=\\\"{Binding Country}\\\" />\\n                <Label Text=\\\"{Binding Capital}\\\" />\\n                <Label Text=\\\"{Binding Details}\\\" />\\n            </VerticalStackLayout>\\n        </DataTemplate>\\n    </ResourceDictionary>\\n</ContentPage.Resources>\\n<Grid>\\n    <telerik:RadDataGrid x:Name=\\\"dataGrid\\\"\\n                            ItemsSource=\\\"{Binding Items}\\\"\\n                            ExpandedRowDetails=\\\"{Binding ExpandedItems}\\\"\\n                            AutoGenerateColumns=\\\"False\\\"\\n                            RowDetailsTemplate=\\\"{StaticResource TemplateForRowDetails}\\\">\\n        <telerik:RadDataGrid.Columns>\\n            <telerik:DataGridToggleRowDetailsColumn />\\n            <telerik:DataGridTextColumn PropertyName=\\\"Country\\\" />\\n        </telerik:RadDataGrid.Columns>\\n    </telerik:RadDataGrid>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Handling ProgressChanged Event in C#\nDESCRIPTION: Event handler that updates a label with the current progress value when the ProgressChanged event is triggered.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/events.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ProgressBar_ProgressChanged(object sender, Telerik.Maui.Controls.ProgressChangedEventArgs e)\n{\n    this.progressLabel.Text = $\"Progress: {e.Progress:F2}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik MAUI Namespace\nDESCRIPTION: XAML namespace declaration required for using Telerik UI controls in .NET MAUI applications\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/datagrid.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Creating ObservableCollection with Color Values in C#\nDESCRIPTION: This code creates an ObservableCollection of DataItem objects, each with a specific color value for its corresponding bar in the Chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-palette-mvvm.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar seriesData = new ObservableCollection<DataItem>()\n{\n    new DataItem(){Category = \"Greenings\", Value = 85, barColor = Color.FromRgba(\"#F8F8F8\")},\n    new DataItem(){Category = \"Perfecto\", Value = 78, barColor = Color.FromRgba(\"#F8A8F8\")},\n    new DataItem(){Category = \"NearBy\", Value = 99, barColor = Color.FromRgba(\"#F8F808\")},\n    new DataItem(){Category = \"FamilyStore\", Value = 85, barColor = Color.FromRgba(\"#B8F8F8\")},\n    new DataItem(){Category = \"Fresh&Green\", Value = 57, barColor = Color.FromRgba(\"#000000\")}\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling NuGet Source and Updating MAUI Check Tool\nDESCRIPTION: These commands disable an existing NuGet source, update the maui-check tool, and run it. This process helps resolve the 'Failed to retrieve information' error by ensuring only the correct NuGet source is used.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/nuget-error-maui-check-tool.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget disable source <NAME of the Nuget Source>\ndotnet tool update --global Redth.Net.Maui.Check\nmaui-check\n```\n\n----------------------------------------\n\nTITLE: Defining ManualLoadOnDemandTemplate Resource\nDESCRIPTION: XAML resource definition for the ManualLoadOnDemandTemplate that determines how the manual loading button appears in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-loadondemand-manual-template-resource' />\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Group Headers in XAML - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to enable the sticky group headers feature in a RadListView by setting the IsGroupHeaderSticky property to true.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/sticky-group-header.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\"\n                     IsGroupHeaderSticky=\"True\"  />\n```\n\n----------------------------------------\n\nTITLE: Path Control Namespace Changes in Telerik MAUI\nDESCRIPTION: Details the relocation of geometry-related classes from Telerik.Maui.Controls.Compatibility.Input to Telerik.Maui.Controls.Paths namespace. Includes movement of various geometry and path segment classes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/8-0-0.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// New namespace usage\nusing Telerik.Maui.Controls.Paths;\n\n// Available classes in new namespace\nRadPathGeometry pathGeometry;\nRadEllipseGeometry ellipseGeometry;\nRadLineGeometry lineGeometry;\nRadRectangleGeometry rectangleGeometry;\nRadPathSegment pathSegment;\nRadPathFigure pathFigure;\n```\n\n----------------------------------------\n\nTITLE: Declaring Xamarin.Forms RichTextEditor in XAML\nDESCRIPTION: Shows the XAML namespace declaration for Xamarin.Forms RichTextEditor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikRichTextEditor=\"clr-namespace:Telerik.XamarinForms.RichTextEditor;assembly=Telerik.XamarinForms.RichTextEditor\"\n```\n\n----------------------------------------\n\nTITLE: Defining Styles for GroupViewStyleSelector in XAML Resources\nDESCRIPTION: Defines styles to be used by the GroupViewStyleSelector for different group header appearances.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style-selector.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary>\n    <Style x:Key=\"SmallGroupStyle\" TargetType=\"telerik:CollectionViewGroupView\">\n        <Setter Property=\"Background\" Value=\"LightGreen\" />\n    </Style>\n    <Style x:Key=\"MediumGroupStyle\" TargetType=\"telerik:CollectionViewGroupView\">\n        <Setter Property=\"Background\" Value=\"LightBlue\" />\n    </Style>\n    <Style x:Key=\"LargeGroupStyle\" TargetType=\"telerik:CollectionViewGroupView\">\n        <Setter Property=\"Background\" Value=\"LightPink\" />\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Creating City Class for Group Header Style - C#\nDESCRIPTION: This code snippet demonstrates how to define a 'City' class that can be used in conjunction with the ListView GroupHeader styling feature. It serves as the model for data representation in the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/styling/group-header.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class City {\n    public string Name { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Cell Renderer Resource Definition\nDESCRIPTION: Resource declaration for the custom cell renderer in page resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-columns-skiacellrenderer-resource' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler with SpecialSlotStyleSelector\nDESCRIPTION: XAML definition of the Scheduler control with SpecialSlotStyleSelector applied to view definitions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/special-slots-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-specialslotsstyling-definition' />\n```\n\n----------------------------------------\n\nTITLE: TimeSpanPicker Placeholder Template\nDESCRIPTION: This template defines the visualization for the placeholder in the TimeSpanPicker control. It uses a ControlTemplate to define the appearance of the placeholder when no TimeSpan is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='timespanpicker-placeholder-template' />\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Source for DataGrid in C#\nDESCRIPTION: Creates an ObservableCollection of 'Country' objects, adds sample data, and sets this collection as the binding context of the DataGrid. This sets up the data source for the grid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar source = new ObservableCollection<Country>();\nsource.Add(new Country(\"Mozambique\", 24692000));\nsource.Add(new Country(\"Paraguay\", 6725000));\nsource.Add(new Country(\"Turkmenistan\", 5663000));\nsource.Add(new Country(\"Mongolia\", 3027000));\nsource.Add(new Country(\"Japan\", 127000000));\nsource.Add(new Country(\"Bulgaria\", 7128000));\nsource.Add(new Country(\"Chad\", 14450000));\nsource.Add(new Country(\"Netherlands\", 17020000));\n\n\nthis.BindingContext = source;\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeSlider Labels in XAML\nDESCRIPTION: Sets the LabelStep and LabelsPlacement properties to display labels at specific intervals and positions relative to the slider track.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/labels.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadRangeSlider Minimum=\"0\" Maximum=\"100\"\n                       LabelStep=\"25\"\n                       LabelsPlacement=\"Start\" />\n```\n\n----------------------------------------\n\nTITLE: Custom TimeRuler Label Styles Definition\nDESCRIPTION: XAML resource definitions for custom time ruler label styles to be applied to the Scheduler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/timeruler-label-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='scheduler-timerulerlabels-style'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace in .NET MAUI\nDESCRIPTION: This snippet shows how to add the Telerik namespace to access Telerik UI controls in XAML files for .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/empty-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Xamarin ListView XAML Definition\nDESCRIPTION: Original Xamarin ListView implementation with namespaces and item template configuration for Telerik UI ListView\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikDataControls:RadListView x:Name=\"listView\" ItemsSource=\"{Binding Source}\">\n    <telerikDataControls:RadListView.ItemTemplate>\n        <DataTemplate>\n            <telerikListView:ListViewTemplateCell>\n                <telerikListView:ListViewTemplateCell.View>\n                    <Grid>\n                        <Label Margin=\"10\" Text=\"{Binding Name}\" />\n                    </Grid>\n                </telerikListView:ListViewTemplateCell.View>\n            </telerikListView:ListViewTemplateCell>\n        </DataTemplate>\n    </telerikDataControls:RadListView.ItemTemplate>\n</telerikDataControls:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Applying Common HeaderLabelStyle to DataForm in XAML\nDESCRIPTION: This snippet shows how to apply a common HeaderLabelStyle to all editors in a DataForm. It uses the StaticResource CommonHeaderStyle defined earlier.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/header-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\"\n                      HeaderLabelStyle=\"{StaticResource CommonHeaderStyle}\"\n                      BindingContext=\"{Binding}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding the second data item for TemplatedPicker in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to add a data item for the second spinner of the TemplatedPicker, allowing for multiple selections in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='templatedpicker-city-businessmodel' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI CollectionView\nDESCRIPTION: Code showing how to add the Telerik namespace reference in XAML files to use Telerik UI for .NET MAUI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/command.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NoResultsTemplate for .NET MAUI AutoComplete\nDESCRIPTION: Defines a template to be displayed when no matching suggestions are found. The template includes a centered label with an explanatory message.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAutoComplete.NoResultsTemplate>\n    <DataTemplate>\n        <Label Text=\"No match was found for the specific search. Please try again.\"\n                HorizontalOptions=\"Center\"\n                VerticalOptions=\"Center\"/>\n    </DataTemplate>\n</telerik:RadAutoComplete.NoResultsTemplate>\n```\n\n----------------------------------------\n\nTITLE: Navigation ItemStyleSelector Implementation\nDESCRIPTION: Implements the NavigationItemStyleSelector.  This selector likely contains logic to determine which style to apply to each navigation item based on its data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='navigationview-styleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGridDistinctValuesFilterView Control Template in XAML\nDESCRIPTION: This snippet demonstrates how to customize the DataGridDistinctValuesFilterView control template, including the distinct value item template and the overall layout of the filtering UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/styling-filtering-ui-distinct-values-datagrid-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"DistinctValue_ItemTemplate\">\n    <Grid>\n        <HorizontalStackLayout telerikControls:RadCheckBox.ToggleOnTap=\"{Binding Source={x:Reference checkBox}}\"\n                Margin=\"5\">\n            <telerikControls:RadCheckBox x:Name=\"checkBox\"\n                        IsChecked=\"{Binding IsSelected, Mode=TwoWay}\" />\n            <Label Text=\"{Binding Text}\"\n    Margin=\"8, 0, 0, 0\" />\n        </HorizontalStackLayout>\n    </Grid>\n</DataTemplate>\n\n<ControlTemplate x:Key=\"DataGridDistinctValuesFilterView_ControlTemplate\">\n    <Grid RowDefinitions=\"Auto, Auto\"\nRowSpacing=\"7\">\n        <HorizontalStackLayout telerikControls:RadCheckBox.ToggleOnTap=\"{Binding Source={x:Reference checkBox}}\">\n            <telerikControls:RadCheckBox x:Name=\"checkBox\"\n                                IsChecked=\"{TemplateBinding SelectAll, Mode=TwoWay}\" />\n            <Label Text=\"SelectAll\"\n    FontAttributes=\"Bold\"\n    Margin=\"8, 0, 0, 0\" />\n        </HorizontalStackLayout>\n        <Grid Grid.Row=\"1\"\nIsClippedToBounds=\"True\">\n            <Frame\n    BackgroundColor=\"White\" />\n            <telerikControls:RadItemsControl ItemsSource=\"{TemplateBinding DistinctValues}\" x:Name=\"itemsControl\"\n                                    ItemTemplate=\"{StaticResource DistinctValue_ItemTemplate}\" BackgroundColor=\"LightBlue\"\n                                    MinimumHeightRequest=\"{TemplateBinding DistinctValuesMinimumHeight}\"\n                                    MaximumHeightRequest=\"{TemplateBinding DistinctValuesMaximumHeight}\"\n                                    Margin=\"6, 3\" />\n        </Grid>\n    </Grid>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: C# code for registering Telerik UI for .NET MAUI controls in your application through the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RadAutoComplete Subclass in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to create a custom subclass of RadAutoComplete to apply cursor color customization globally, overriding the OnHandlerChanged method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-cursor-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCustomTelerikAutoComplete : Telerik.Maui.Controls.RadAutoComplete\n{\n    protected override void OnHandlerChanged()\n    {\n        // 1. Run the default handler logic first\n        base.OnHandlerChanged();\n\n        // 2. Find the inner text edit control, then change the cursor\n#if ANDROID\n        if (this.Handler?.PlatformView is Telerik.Maui.Border.BorderViewGroup borderViewGroup)\n        {\n            var textInputs = borderViewGroup.GetChildrenOfType<Google.Android.Material.TextField.TextInputLayout>();\n            var textInput = textInputs.FirstOrDefault();\n\n            if (textInput is { EditText.TextCursorDrawable: not null })\n            {\n                textInput.EditText.TextCursorDrawable?.SetColorFilter(new Android.Graphics.PorterDuffColorFilter(Android.Graphics.Color.Red, Android.Graphics.PorterDuff.Mode.Darken));\n            }\n        }\n#elif __IOS__\n        if (this.Handler?.PlatformView is Telerik.Maui.Border.TKBorderView borderView)\n        {\n            // Find the UITextField inside the AutoComplete's layout\n            var textField = borderView.FindDescendantView<UIKit.UITextField>();\n            \n            // Do your customizations\n            if(textField != null)\n                textField.TintColor = UIKit.UIColor.Red;\n        }\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ViewModel with City Objects for AutoComplete in .NET MAUI\nDESCRIPTION: Creates a ViewModel containing a collection of City objects that will be used as the data source for the AutoComplete control's suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/suggestionitem-template.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-clients-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Required Using Statement for Telerik MAUI Controls\nDESCRIPTION: Imports the necessary Telerik MAUI Controls Compatibility namespace to enable handler registration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/visual-studio.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n```\n\n----------------------------------------\n\nTITLE: Changing Column Background Color Using Telerik UI for .NET MAUI\nDESCRIPTION: This snippet demonstrates the use of the CellDecorationStyle property to set custom styles for DataGrid column cells in MAUI. It requires Xamarin.Forms and Telerik UI for .NET MAUI assemblies. The example shows setting the cell background color to LightBlue, applying this style to all cells within that column.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-change-background-color.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:DataGridTextColumn.CellDecorationStyle>\\n    <Style TargetType=\\\"telerik:DataGridCellDecorationAppearance\\\">\\n        <Setter Property=\\\"BackgroundColor\\\" Value=\\\"LightBlue\\\"/>\\n    </Style>\\n</telerik:DataGridTextColumn.CellDecorationStyle>\n```\n\n----------------------------------------\n\nTITLE: Setting FontSize for Text in AccordionItemHeader in .NET MAUI\nDESCRIPTION: This example demonstrates how to set the font size for text inside the AccordionItemHeader by applying the FontSize property directly to the Label element. The example shows a complete Accordion setup with three items, where the second item has a customized header with a larger font size of 20.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/setting-font-size-accordion-header-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadAccordion x:Name=\"accordion\">\n    <telerik:AccordionItem HeaderText=\"Attachments\">\n        <telerik:AccordionItem.Content>\n            <Label Text=\"Attach files\" Margin=\"30\" />\n        </telerik:AccordionItem.Content>\n    </telerik:AccordionItem>\n    <telerik:AccordionItem>\n        <telerik:AccordionItem.Header>\n            <telerik:AccordionItemHeader\n                    IndicatorColor=\"Blue\"\n                    IndicatorFontSize=\"16\"\n                    IndicatorLocation=\"End\"\n                    BorderColor=\"LightBlue\"\n                    BorderThickness=\"2\">\n                <Label Text=\"Settings\" Margin=\"8\" FontSize=\"20\" />\n            </telerik:AccordionItemHeader>\n        </telerik:AccordionItem.Header>\n        <telerik:AccordionItem.Content>\n            <Label Text=\"Add your comment here\" Margin=\"30\" />\n        </telerik:AccordionItem.Content>\n    </telerik:AccordionItem>\n    <telerik:AccordionItem HeaderText=\"Rating\" IsExpanded=\"True\">\n        <telerik:AccordionItem.Content>\n            <telerik:RadShapeRating x:Name=\"rating\" Margin=\"20\"/>\n        </telerik:AccordionItem.Content>\n    </telerik:AccordionItem>\n</telerik:RadAccordion>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with Localized Error Message in C#\nDESCRIPTION: This code snippet demonstrates how to define a ViewModel property with the `Required` attribute and a localized error message. It utilizes a resource file (`MyLocalizationResources`) to retrieve the error message, enabling easy localization of the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-localization-dotnet-maui-dataform.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyViewModel\n{\n    [Required(ErrorMessageResourceType = typeof(MyLocalizationResources),\n              ErrorMessageResourceName = nameof(MyLocalizationResources.MyCustomErrorMessage))]\n    public string MyProperty { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required to use Telerik UI for .NET MAUI controls in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: RadEntry Styling Properties Version Comparison\nDESCRIPTION: Comparison table showing the mapping between old and new styling properties for RadEntry control across Telerik MAUI versions 7.1.0 and 8.0.0+.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/style-entry-visual-state-border-telerik-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBefore (<=7.1.0):                      After (>=8.0.0):\n\nClearButtonColor                      TextColor in ClearButtonStyle\nHoveredClearButtonColor                PointerOver VisualState + TextColor\nPressedClearButtonColor                Pressed VisualState + TextColor\nNA                                     VisualStates\nFocusedBorderBrush                     Focused VisualState + BorderBrush\nFocusedBorderThickness                 Focused VisualState + BorderThickness\nAutomationId: RadEntryEditor           AutomationId: RadEntryTextInput\nNA                                     ValidationErrorColor\nNA                                     ValidationErrorImageStyle\nNA                                     ValidationErrorLabelStyle\n```\n\n----------------------------------------\n\nTITLE: DataGrid Property Change Notice - .NET MAUI\nDESCRIPTION: Documents the removal of the Columns property from DataGridGroupingPanel component. Users must now use the GroupDescriptors property of RadDataGrid instead for grouping functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/4-0-0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe `Columns` property of the `DataGridGroupingPanel` is removed. You have to use the `GroupDescriptors` property of the `RadDataGrid` instead.\n```\n\n----------------------------------------\n\nTITLE: Creating Android Scrollbar Thumb Drawable in XML\nDESCRIPTION: XML configuration for defining a custom scrollbar thumb drawable. Creates a rectangular shape with rounded corners and custom color for the scrollbar appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/collectionview-scrollbar-visible-android.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       android:shape=\"rectangle\" >\n  <corners android:radius=\"4dp\" />\n  <solid android:color=\"@color/customColorScrollbar\"/>\n</shape>\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik XAML Namespace\nDESCRIPTION: XAML namespace declaration required to use Telerik UI for .NET MAUI components including the RadToggleButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik MAUI Chart in XAML\nDESCRIPTION: XAML code to define a RadCartesianChart with a BarSeries, customized axes, and a tooltip behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-bar-series-winui-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Grid RowDefinitions=\"*\">\n    <telerik:RadCartesianChart x:Name=\"barChart\" \n                                HandlerChanged=\"barChart_HandlerChanged\">\n        <telerik:RadCartesianChart.BindingContext>\n            <local:ViewModel />\n        </telerik:RadCartesianChart.BindingContext>\n        <telerik:RadCartesianChart.HorizontalAxis>\n            <telerik:CategoricalAxis LabelFitMode=\"MultiLine\" \n                                        PlotMode=\"BetweenTicks\" />\n        </telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:RadCartesianChart.VerticalAxis>\n            <telerik:NumericalAxis LabelFitMode=\"MultiLine\" \n                                    MajorTickThickness=\"0\"\n                                    ShowLabels=\"False\" />\n        </telerik:RadCartesianChart.VerticalAxis>\n        <telerik:RadCartesianChart.Series>\n            <telerik:BarSeries ValueBinding=\"Value\"\n            CategoryBinding=\"Category\" ShowLabels=\"True\" \n            ItemsSource=\"{Binding Data}\" />\n        </telerik:RadCartesianChart.Series>\n        <telerik:RadCartesianChart.ChartBehaviors>\n            <telerik:ChartTooltipBehavior TriggerMode=\"Tap\" />\n        </telerik:RadCartesianChart.ChartBehaviors>\n    </telerik:RadCartesianChart>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Displaying License Error Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing various license errors, their message codes, and solutions for Telerik UI for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/licensing/license-errors-warnings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error or Condition                              | Message Code | Solution                                                              |\n|-------------------------------------------------|--------------|-----------------------------------------------------------------------|\n| `No Telerik and Kendo UI License file found` | TKL002 | [Set up a license key]({%slug set-up-your-license%}) to activate the UI controls and remove the error message. |\n| `Corrupted Telerik and Kendo UI License Key content` | TKL003 | [Download a new license key]({%slug set-up-your-license%}#downloading-the-license-key) and use it to activate the UI controls and remove the error message. |\n| `Unable to locate licenses for all products` | TKL004 | Your license is not valid for all Telerik and Kendo products added to your project. If you have already purchased the required license, then [update your license key]({%slug set-up-your-license%}#updating-your-license-key). |\n| `Your subscription has expired.` | TKL103; TKL104 | Renew your subscription and [download a new license key]({%slug set-up-your-license%}#downloading-the-license-key). |\n| `Your current license has expired.` | TKL102 | You are using a product version released outside the validity period of your perpetual license. To remove the error message, do either of the following: |\n|                                        | | - Renew your license, then download a new license key and use it to activate the controls. |\n|                                        | | - Downgrade to a product version included in your perpetual license as indicated in the message. |\n| `Your trial expired.`        | TKL105 | Purchase a commercial license to continue using the product. |\n| `Telerik UI for .NET MAUI is not listed in your current license file.` | TKL101 | Review the purchase options for the listed products. Alternatively, remove the references to the listed packages from `package.json`. |\n| `No Telerik or Kendo UI product references detected in project.` | TKL001 | If you use Telerik products and see this message, update the `Telerik.Licensing` package to version `1.4.9` or later. If you do not use Telerik products, remove the `Telerik.Licensing` NuGet reference from your project. |\n```\n\n----------------------------------------\n\nTITLE: Namespace Migration Changes - Telerik MAUI Components\nDESCRIPTION: Components migrated from Telerik.Maui.Controls.Compatibility namespace to Telerik.Maui.Controls namespace. Affects BadgeView, Gauge, and DataGrid components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/7-0-0.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Maui.Controls.BadgeView\nTelerik.Maui.Controls.Gauge\nTelerik.Maui.Controls.DataGrid\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Count in DataGrid for .NET MAUI\nDESCRIPTION: This snippet retrieves the number of columns in a DataGrid by accessing the `Columns` collection. The count is obtained directly from this collection and is converted to a string for display.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-row-column-counts.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar columnNumber = this.dataGrid.Columns.Count.ToString();\n```\n\n----------------------------------------\n\nTITLE: Styling DataGrid Cell Content in XAML\nDESCRIPTION: Demonstrates how to set CellContentStyle for a DataGridTextColumn to customize the appearance of cell content, including text color and font options.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/columns-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridTextColumn.CellContentStyle>\n\t<Style TargetType=\"telerik:DataGridTextCellAppearance\">\n\t\t<Setter Property=\"TextColor\" Value=\"Blue\" />\n\t\t<Setter Property=\"FontSize\" Value=\"18\" />\n\t\t<Setter Property=\"FontAttributes\" Value=\"Bold\" />\n\t</Style>\n</telerik:DataGridTextColumn.CellContentStyle>\n```\n\n----------------------------------------\n\nTITLE: DataForm Editors ViewModel Implementation\nDESCRIPTION: Contains the ViewModel definition used for the DataForm editors that provides the data structure and properties for the grid layout.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/layouts/grid.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: Xamarin ProgressBar Namespace Declaration\nDESCRIPTION: XAML namespace declaration for Telerik ProgressBar in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikPrimitives=\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\"\n```\n\n----------------------------------------\n\nTITLE: Setting SpinnerFormat to 'MMM yyyy' in .NET MAUI DatePicker - XAML\nDESCRIPTION: This snippet demonstrates how to set the SpinnerFormat property of the RadDatePicker to format the date as 'MMM yyyy'. This allows users to select a month and year combination.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/formatting.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker SpinnerFormat=\"MMM yyyy\" />\n```\n\n----------------------------------------\n\nTITLE: Chart API Changes - Property Removals\nDESCRIPTION: Removal of obsolete properties from RadCartesianChart including Behaviors property and ChildPropertyChanged event. Behaviors should be replaced with ChartBehaviors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/7-0-0.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Removed properties from RadCartesianChart:\nBehaviors // Use ChartBehaviors instead\nChildPropertyChanged\n```\n\n----------------------------------------\n\nTITLE: Xamarin Custom ListViewRenderer for iOS\nDESCRIPTION: Custom renderer implementation for disabling bounce effect on iOS ListView in Xamarin project\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Xamarin.Forms;\nusing Xamarin.Forms.Platform.iOS;\nusing MyXamarinApp.iOS;\nusing Telerik.XamarinForms.DataControls;\n\n[assembly: ExportRenderer(typeof(RadListView), typeof(CustomListViewRenderer))]\nnamespace MyXamarinApp.iOS\n{\n    public class CustomListViewRenderer : Telerik.XamarinForms.DataControlsRenderer.iOS.ListViewRenderer\n    {\n        protected override void OnElementChanged(ElementChangedEventArgs<RadListView> e)\n        {\n            base.OnElementChanged(e);\n\n            var nativeListView = this.Control as Telerik.XamarinForms.DataControlsRenderer.iOS.TKExtendedListView;\n            if (nativeListView != null)\n            {\n                nativeListView.Layout.CollectionView.Bounces = false;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Person Data Class for ListView Sorting Example\nDESCRIPTION: Defines the data model class used in the sorting example with properties for Name and Age\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/sorting.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-features-sorting-data-class'/>\n```\n\n----------------------------------------\n\nTITLE: Defining RadGauge in XAML for Bindings\nDESCRIPTION: This snippet demonstrates how to define a RadGauge in XAML while setting bindings for its properties. The code includes the definition of a vertical stack layout and a gauge with gradient ranges that uses bindings to update properties dynamically.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/gauge-rangesdefinition-gradientstop-bindable-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<VerticalStackLayout>\n\t<Label Text=\"{Binding Value, Source={x:Reference slider}}\"/>\n\t<Slider Value=\"{Binding Data, Mode=TwoWay}\" x:Name=\"slider\" Minimum=\"5\" Maximum=\"40\"/>\n\n\t<telerik:RadVerticalGauge x:Name=\"gauge\">\n\t\t<telerik:RadVerticalGauge.Axis>\n\t\t\t<telerik:GaugeLinearAxis LabelPosition=\"Start\"\n\t\t\tMaximum=\"1\"\n\t\t\tMinimum=\"-1\"\n\t\t\tStep=\"0.5\" />\n\t\t</telerik:RadVerticalGauge.Axis>\n\t\t<telerik:RadVerticalGauge.Indicators>\n\t\t\t<telerik:GaugeShapeIndicator Value=\"0\" />\n\t\t</telerik:RadVerticalGauge.Indicators>\n\t\t<telerik:RadVerticalGauge.Ranges>\n\t\t\t<telerik:GaugeRangesDefinition x:Name=\"range\"\n\t\t\t\t\t\t\t\t\t\tlocal:TelerikUtils.MyThickness=\"{Binding Data}\">\n\t\t\t\t<telerik:GaugeGradientRange From=\"-1\" To=\"1\">\n\t\t\t\t\t<telerik:RadGradientStop\n\t\t\t\t\t\tx:Name=\"B\"\n\t\t\t\t\t\tOffset=\"1\"\n\t\t\t\t\t\tColor=\"Blue\" />\n\t\t\t\t\t<telerik:RadGradientStop\n\t\t\t\t\t\tx:Name=\"R\"\n\t\t\t\t\t\tOffset=\"0\"\n\t\t\t\t\t\tColor=\"Red\" />\n\t\t\t\t\t<telerik:RadGradientStop\n\t\t\t\t\t\tx:Name=\"O\"\n\t\t\t\t\t\tOffset=\"-1\"\n\t\t\t\t\t\tColor=\"orange\" />\n\t\t\t\t</telerik:GaugeGradientRange>\n\t\t\t</telerik:GaugeRangesDefinition>\n\t\t</telerik:RadVerticalGauge.Ranges>\n\t</telerik:RadVerticalGauge>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Styling Frozen Columns Splitter in .NET MAUI DataGrid\nDESCRIPTION: This example shows how to style the appearance of the splitter that divides frozen (locked) columns from unfrozen (unlocked) columns using the FrozenColumnsSplitterStyle property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid.FrozenColumnsSplitterStyle>\n\t<Style TargetType=\"telerik:DataGridFrozenColumnsSplitterAppearance\">\n\t\t<Setter Property=\"Width\" Value=\"20\" />\n\t\t<Setter Property=\"BorderColor\" Value=\"Gray\" />\n\t\t<Setter Property=\"BorderThickness\" Value=\"2\" />\n\t\t<Setter Property=\"BackgroundColor\" Value=\"LightBlue\" />\n\t</Style>\n</telerik:RadDataGrid.FrozenColumnsSplitterStyle>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: XAML namespace declaration required to use Telerik UI for .NET MAUI controls in your application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DataForm ViewModel\nDESCRIPTION: C# code defining the ViewModel class used as BindingContext for the RadDataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/editors-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Native Entry Access in C#\nDESCRIPTION: Code to access the platform-specific implementation using conditional compilation for Windows platform.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numericinput-overriding-winui-minwidth.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnNumericInputLoaded(object sender, EventArgs e)\n{\n#if WINDOWS\n    if ((sender as NumericInputEntry)?.Handler?.PlatformView is RadMauiEntry nativeEntry)\n    {\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace\nDESCRIPTION: This snippet shows how to add the telerik namespace to the XAML file, which is necessary for using Telerik components within the .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/dateonly.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Rating Control Updates in Telerik MAUI\nDESCRIPTION: Documents the relocation of Rating-related classes to new namespaces and the renaming of converter classes. Includes changes to shape handling and geometry implementations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/8-0-0.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// New namespace usage\nusing Telerik.Maui.Controls;\n\n// Updated class references\nRadShapeRating shapeRating;\nRadTemplatedRating templatedRating;\nRatingStringToItemShapeTypeConverter converter;\n```\n\n----------------------------------------\n\nTITLE: Source Exception Event Handler Setup\nDESCRIPTION: Illustrates setting up a handler for the SourceException event to manage exceptions when the data source for PDF loading fails. It helps in providing a fallback mechanism with custom messages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/events.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-sourceexception-eventhandler' />\n```\n\n----------------------------------------\n\nTITLE: Setting CheckBox Unchecked Color in .NET MAUI\nDESCRIPTION: Shows how to set the border color of the CheckBox when it is in an unchecked state. The background remains transparent in this state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCheckBox UncheckedColor=\"Red\" />\n```\n\n----------------------------------------\n\nTITLE: Running CryptoTracker on MacOS with .NET CLI\nDESCRIPTION: Command to build and run the CryptoTracker application on macOS using .NET CLI targeting MacCatalyst framework\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/crypto-app.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net8.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Styling ProgressBar Text in .NET MAUI\nDESCRIPTION: Illustrates text styling options including color, alternate color for overlap scenarios, and font size configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='progressbar-styling-text'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Badge Visibility in .NET MAUI BadgeView using XAML\nDESCRIPTION: Example demonstrating setting the BadgeVisibility property to control the visibility state of the badge indicator in Telerik RadBadgeView. Valid values are Visible, Hidden, and Collapsed. These visibility states are part of the Microsoft.Maui.Visibility enumeration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView BadgeText=\\\"1\\\" BadgeVisibility=\\\"Hidden\\\">\\n    <telerik:RadBadgeView.Content>\\n        <telerik:RadBorder WidthRequest=\\\"80\\\"\\n                           HeightRequest=\\\"80\\\"\\n                           BorderThickness=\\\"1\\\"\\n                           BorderColor=\\\"LightGray\\\">\\n            <Label Text=\\\"Telerik Badge View for .NET MAUI\\\"\\n                FontSize=\\\"14\\\"\\n                VerticalTextAlignment=\\\"Center\\\"\\n                HorizontalTextAlignment=\\\"Center\\\"/>\\n        </telerik:RadBorder>\\n    </telerik:RadBadgeView.Content>\\n</telerik:RadBadgeView>\n```\n\n----------------------------------------\n\nTITLE: Defining DataItem Model with Color Property in C#\nDESCRIPTION: This snippet shows how to add a Color property to the DataItem class, which will be used to set individual bar colors in the Chart.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-palette-mvvm.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataItem\n{\n    public string Category { get; set; }\n    public double? Value { get; set; }\n    public Color barColor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling More Appointments Indicator in XAML Resources\nDESCRIPTION: Definition of a custom Style targeting Label to customize the appearance of the more appointments indicator in the Scheduler Month View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/moreindicator-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-moreindicator-style'/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Gesture to Open SideDrawer in .NET MAUI on WinUI\nDESCRIPTION: This C# code snippet demonstrates how to configure the Telerik's RadSideDrawer in a .NET MAUI application to be opened only with a button click on the WinUI platform by setting the DrawerManipulationMode property to Button. This disables opening through swipe gestures.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/disable-gesture-open-sidedrawer-net-maui-winui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void drawer_HandlerChanged(object sender, EventArgs e)\n{\n    var platformView = this.drawer.Handler.PlatformView;\n\n#if WINDOWS\n    var platformdrawer = (Telerik.UI.Xaml.Controls.Primitives.RadSideDrawer)platformView;\n    platformdrawer.DrawerManipulationMode = Telerik.UI.Xaml.Controls.Primitives.DrawerManipulationMode.Button;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Header Spacing in .NET MAUI TabView\nDESCRIPTION: This XAML snippet demonstrates how to apply spacing between the header and content areas of a TabView control using the HeaderSpacing property. The spacing is set in pixels.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\"\n                    HeaderSpacing=\"20\">\n    <telerik:TabViewItem HeaderText=\"Home\">\n        <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"Folder\">\n        <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"View\">\n        <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n    </telerik:TabViewItem>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: XAML Configuration for Selection Column in RadDataGrid\nDESCRIPTION: Configures a DataGridBooleanColumn with a custom checkbox renderer and header template for row selection functionality in .NET MAUI DataGrid\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-selection-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid RenderMode=\"SkiaSharp\"\n                     ItemsSource=\"{Binding Employees}\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridBooleanColumn PropertyName=\"OnLeave\"\n                                     CellRenderer=\"{StaticResource CheckboxColumnCellRenderer}\">\n            <telerik:DataGridBooleanColumn.HeaderContentTemplate>\n                <DataTemplate>\n                    <telerik:RadCheckBox IsChecked=\"{Binding BindingContext.AreAllItemsChecked}\"/>\n                </DataTemplate>\n            </telerik:DataGridBooleanColumn.HeaderContentTemplate>\n        </telerik:DataGridBooleanColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Model and ViewModel\nDESCRIPTION: C# implementation of the data model and view model classes for temporal data representation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-line-series-datapoint-markers.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TemporalData\n{\n    public DateTime Date { get; set; }\n    public double Value { get; set; }\n}\n\npublic class ViewModel\n{\n    public ObservableCollection<TemporalData> Data { get; set; }\n\n    public ViewModel()\n    {\n        this.Data = GetDateTimeData(6);\n    }\n\n    private static ObservableCollection<TemporalData> GetDateTimeData(int itemsCount)\n    {\n        var startDate = new DateTime(2015, 03, 01);\n\n        ObservableCollection<TemporalData> items = new ObservableCollection<TemporalData>();\n        for (int i = 0; i < itemsCount; i++)\n        {\n            TemporalData data = new TemporalData();\n            data.Date = startDate.AddDays(i);\n            data.Value = Math.Sin(i);\n\n            items.Add(data);\n        }\n\n        return items;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Column Aggregate Styling\nDESCRIPTION: XAML style definition for column footer aggregates.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-column-aggregate-styling-example'/>\n```\n\n----------------------------------------\n\nTITLE: Customizing ToggleButton Ripple Color with Visual States in XAML\nDESCRIPTION: This snippet shows how to define visual state styles to customize the ripple color of a ToggleButton based on its toggle state. It demonstrates changing the ripple color when the button is in Normal, Pressed, or Checked state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/ripple.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ToggleWithVisualStatesStyles\" TargetType=\"telerik:RadToggleButton\">\n    <Setter Property=\"telerikEffects:RadEffects.RippleMode\" Value=\"Pulse\" />\n    <Setter Property=\"VisualStateManager.VisualStateGroups\">\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"#2196F3\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"PointerOver\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"#2196F3\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Pressed\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"LightBlue\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n            <VisualStateGroup x:Name=\"ToggleStates\">\n                <VisualState x:Name=\"NotChecked\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"Red\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Checked\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"Green\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Indeterminate\">\n                    <VisualState.Setters>\n                        <Setter Property=\"telerikEffects:RadEffects.RippleColor\" Value=\"Orange\" />\n                    </VisualState.Setters>\n                </VisualState>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </Setter>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Setting TimeOnly in TimeSpanPicker\nDESCRIPTION: Demonstrates how to set the TimeOnly value in the TimeSpanPicker using a converter. It involves defining the TimeSpanPicker control with time properties and declaring the converter in the resource section.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timeonly.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timespanpicker-timeonly-support' />\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI MaskedEntry Namespace Migration (C#)\nDESCRIPTION: This snippet demonstrates the C# namespace import needed to use the RadMaskedEntry control in .NET MAUI. This `using` statement grants access to the classes within the `Telerik.Maui.Controls` namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/migrate-from-xamarin.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: MainViewModel for Employee Selection Management\nDESCRIPTION: Manages employee data collection and provides logic for tracking and updating row selection state across the DataGrid\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-selection-column.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class MainViewModel : ViewModelBase\n{\n    public MainViewModel()\n    {\n        Employees = new ObservableRangeCollection<EmployeeDto>(\n            SampleDataService.Current.GenerateEmployeeData()\n                .Select(e => new EmployeeDto(e))\n                .Take(40)\n        );\n    }\n\n    public bool AreAllItemsChecked\n    {\n        get => Employees.All(e => e.OnLeave);\n        set\n        {\n            foreach (var employeeDto in Employees) \n                employeeDto.OnLeave = value;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Styling Blockquotes in CSS\nDESCRIPTION: This CSS snippet styles blockquotes used in the documentation, setting background, margins, and text color to enhance readability and visual appeal.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_assetsApi/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nblockquote {\n  border: 0;\n  margin: 20px 0;\n  min-height: 70px;\n  padding: 24px 80px;\n  background-color: #f9edc6;\n  background-image: url(\"/devtools/maui/assets/important-icon.svg\");\n  color: #fff;\n  background-repeat: no-repeat;\n  background-size: 48px;\n  background-position: center;\n  background-position-x: 16px;\n  background-position-y: 50%;\n  color: #000000; }\n  blockquote:not(.alert-note) a, blockquote:not(.alert-note) a:link {\n    color: #000000;\n    text-decoration: underline; }\n    blockquote:not(.alert-note) a:hover, blockquote:not(.alert-note) a:active, blockquote:not(.alert-note) a:focus, blockquote:not(.alert-note) a:link:hover, blockquote:not(.alert-note) a:link:active, blockquote:not(.alert-note) a:link:focus {\n      color: #000000;\n      text-decoration: none !important; }\n  blockquote p:first-child,\n  blockquote ul:first-child,\n  blockquote ol:first-child {\n    margin-top: 0; }\n  blockquote p:last-child,\n  blockquote ul:last-child,\n  blockquote ol:last-child {\n    margin-bottom: 0; }\n  blockquote.disclaimer {\n    background-color: #eaebec;\n    color: #4f5d6c; }\n    blockquote.disclaimer p:first-child {\n      color: #36393f; }\n  blockquote.alert-note {\n    margin-top: 2em;\n    margin-bottom: 2em;\n    background-color: #eaebec;\n    color: #4f5d6c; }\n  blockquote.important {\n    background-color: #f9edc6;\n    background-image: url(\"/devtools/maui/assets/important-icon.svg\"); }\n  blockquote.caution {\n    background-color: #f7e1df;\n    background-image: url(\"/devtools/maui/assets/caution-icon.svg\"); }\n  blockquote.tip {\n    background-color: #e4f1df;\n    background-image: url(\"/devtools/maui/assets/tip-icon.svg\"); }\n```\n\nLANGUAGE: CSS\nCODE:\n```\narticle:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n  font-size: 18px;\n  font-weight: 300;\n  line-height: 24px;\n  margin-top: 15px;\n  margin-bottom: 20px;\n  font-family: \"Roboto\", Helvetica, Arial, sans-serif;\n  color: #8a959f;\n}\n\n@media (min-width: 768px) {\n  article:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n    font-size: 22px;\n    line-height: 28px;\n  }\n}\n\n@media (min-width: 1025px) {\n  article:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n    font-size: 26px;\n    line-height: 32px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Tooltip Content Adapter Implementation\nDESCRIPTION: Custom implementation of the tooltip content adapter for Android platform, allowing detailed customization of tooltip appearance and data presentation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-chart-tooltip-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTooltipContentAdapter : Java.Lang.Object, Com.Telerik.Android.Primitives.Widget.Tooltip.Contracts.ITooltipContentAdapter\n{\n    public bool ApplyDefaultStyles { get; set; }\n    public Com.Telerik.Android.Common.IFunction CategoryToStringConverter { get; set; }\n    public Com.Telerik.Android.Common.IFunction ValueToStringConverter { get; set; }\n\n    public global::Android.Views.View GetView(Java.Lang.Object[] p0)\n    {\n        global::Android.Content.Context context = MauiApp2.MainApplication.Context;\n        global::Android.Widget.LinearLayout linearLayout = new global::Android.Widget.LinearLayout(context);\n        linearLayout.Orientation = global::Android.Widget.Orientation.Vertical;\n        linearLayout.SetBackgroundColor(global::Android.Graphics.Color.LightSalmon);\n        linearLayout.SetPadding(10, 10, 10, 10);\n\n        foreach (Com.Telerik.Widget.Chart.Engine.DataPoints.CategoricalDataPoint dataPoint in p0)\n        {\n            global::Android.Widget.TextView textView = new global::Android.Widget.TextView(context);\n            textView.Text = string.Format(\"Value of {0} is $ {1}\", dataPoint.Category, dataPoint.Value);\n            linearLayout.AddView(textView);\n        }\n        return linearLayout;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace Declaration\nDESCRIPTION: XAML namespace declaration required for using Telerik MAUI CollectionView components\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView Namespace in XAML for Xamarin.Forms\nDESCRIPTION: Shows how to define the namespace for the TreeView control in Xamarin.Forms XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikDataControls=\"clr-namespace:Telerik.XamarinForms.DataControls;assembly=Telerik.XamarinForms.DataControls\"\n```\n\n----------------------------------------\n\nTITLE: TimePicker Specific Localization Keys\nDESCRIPTION: Localization keys for customizing TimePicker text elements, including popup header and placeholder labels\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTimePicker_Popup_HeaderLabelText = \"Select Time\"\nTimePicker_PlaceholderLabelText = \"Select Time\"\n```\n\n----------------------------------------\n\nTITLE: MAUI Accordion C# Namespace Import\nDESCRIPTION: C# using statement for the Telerik Accordion control in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Implementing DataForm ViewModel\nDESCRIPTION: Demonstrates the implementation of a ViewModel for the DataForm control that contains the data structure and properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-gettingstarted-model'/>\n```\n\n----------------------------------------\n\nTITLE: Generating SwissQR Code Value in C#\nDESCRIPTION: This C# snippet demonstrates the creation of a SwissQRCodeValueStringBuilder object, which encapsulates necessary payment information required for generating a SwissQR Code. The properties include IBAN, currency, creditor, and additional information, ensuring type safety and validation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/swissqrcode-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSwissQRCodeValueStringBuilder qrCodeValue = new SwissQRCodeValueStringBuilder(\n      new Iban(\"CH4431999123000889012\", IbanType.QRIBAN),\n      SwissQRCodeCurrency.EUR,\n      new Contact(\"Max Muster & Söhne\",\n      new StructuredAddress(\"CH\", \"8000\", \"Seldwyla\", \"Musterstrasse\", \"123\")),\n      new Reference(ReferenceType.QRR, \"210000000003139471430009017\"),\n      new AdditionalInformation(\"Order from 15.03.2021\", \"//S1/10/1234/11/201021/30/102673386/32/7.7/40/0:30\"),\n      new Contact(\"Simon Muster\", new StructuredAddress(\"CH\", \"8000\", \"Seldwyla\", \"Musterstrasse\", \"1\")),\n      (decimal)1949.75,\n      new AlternativeProcedure(\"Name AV1: UV;UltraPay005;12345\", \"Name AV2: XY;XYService;54321\"));\n```\n\n----------------------------------------\n\nTITLE: Creating ComboBox ViewModel in C#\nDESCRIPTION: ViewModel implementation for the ComboBox containing the data source and related properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-cities-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Tooltip Customization Handler\nDESCRIPTION: Event handler method for customizing chart tooltips across different platforms by accessing the native platform view and modifying tooltip behaviors\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-chart-tooltip-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void chart_HandlerChanged(object sender, EventArgs e)\n{\n    var platformView = this.chart.Handler.PlatformView;\n\n#if ANDROID\n    var platformChart = (Com.Telerik.Widget.Chart.Visualization.CartesianChart.RadCartesianChartView)platformView;\n    Com.Telerik.Widget.Chart.Visualization.Behaviors.ChartTooltipBehavior tooltip = (Com.Telerik.Widget.Chart.Visualization.Behaviors.ChartTooltipBehavior)platformChart.Behaviors.Get(0);\n    tooltip.SetContentAdapter(new Platforms.Android.MyTooltipContentAdapter());\n#elif IOS\n    var platformiOSChart = (Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.TKExtendedChart)platformView;\n    platformiOSChart.Trackball.Tooltip.Style.Fill = new TelerikUI.TKSolidFill()\n    {\n        Color = new UIKit.UIColor(red: 1.00f, green: 0.75f, blue: 0.87f, alpha: 1.00f),\n        ShadowBlur = 0.3f,\n        ShadowColor =   new UIKit.UIColor(red: 1.00f, green: 0.75f, blue: 0.87f, alpha: 1.00f),\n        Alpha = 0.9f,\n    };\n\n    platformiOSChart.Trackball.Tooltip.Style.TextColor = UIKit.UIColor.DarkGray;\n    platformiOSChart.Delegate = new Platforms.iOS.MyChartDelegate(this.chart);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Updating XAML Namespace for TemplatedPicker\nDESCRIPTION: This code snippet demonstrates how to update the XAML namespace declaration when migrating from Xamarin.Forms to .NET MAUI for the Telerik TemplatedPicker.  The old namespace `clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input` is replaced with `http://schemas.telerik.com/2022/xaml/maui`.  This change is crucial for the XAML parser to correctly identify and render the control in the .NET MAUI environment.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerikInput=\\\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\\\"\"\n```\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Current Time in Telerik UI TimePicker - XAML\nDESCRIPTION: The snippet sets the currently selected time in Telerik UI TimePicker using the 'Time' property. The default value for this property is 'null', meaning no time is initially selected. To use this, ensure the Telerik namespace is added.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/default-time.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\"/>\n```\n\n----------------------------------------\n\nTITLE: Stretch Column Width Configuration\nDESCRIPTION: XAML configuration for DataGrid columns with stretch sizing using SizeMode=\"Stretch\".\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/width.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" AutoGenerateColumns=\"False\">\n\t<telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"100\" SizeMode=\"Stretch\"/>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Capital\" HeaderText=\"Capital\" Width=\"200\" SizeMode=\"Stretch\"/>\n\t</telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik UI for .NET MAUI Trial Package\nDESCRIPTION: Command to install the trial version of Telerik UI for .NET MAUI via NuGet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/get-started/first-steps-vs-code.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Telerik.UI.for.Maui.Trial\n```\n\n----------------------------------------\n\nTITLE: Define Data Class (C#)\nDESCRIPTION: This C# snippet defines a simple Data class with two string properties: Country and Capital. This class is used to represent the data displayed in the RadDataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-right-click.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"public class Data\\n{\\n\\tpublic string Country { get; set; }\\n\\tpublic string Capital { get; set; }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace to XAML\nDESCRIPTION: Adds the Telerik namespace declaration to the XAML code which is necessary for using Telerik control tags. This ensures that the XAML file recognizes Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Styling Entry's Validation Error Image\nDESCRIPTION: XAML style for the validation error image that appears when the Entry contains invalid input. This defines how the error indicator icon appears.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/visual-states.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='entry-styling-validation-error-image' />\n```\n\n----------------------------------------\n\nTITLE: Setting ComboBox DropDownVerticalOffset in XAML\nDESCRIPTION: Demonstrates how to set the vertical offset of the ComboBox drop-down using the DropDownVerticalOffset property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox DropDownVerticalOffset=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Applying .NET MAUI TimePicker Styling\nDESCRIPTION: This section contains references to code snippets (defined elsewhere) that demonstrate how to apply styling properties to the RadTimePicker and its constituent elements, such as the spinner and label styles. These examples showcase the customization of various elements like the placeholder label, display label, and buttons.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/styling.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Styling Search Result Highlights in .NET MAUI PDF Viewer\nDESCRIPTION: Example of customizing the fill colors for main and secondary search results in a RadPdfViewer. This snippet sets MainSearchResultFill to a semi-transparent red and SearchResultsFill to a semi-transparent blue.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPdfViewer x:Name=\"pdfViewer\">\n    <telerik:RadPdfViewer.SearchSettings>\n        <telerik:PdfViewerSearchSettings MainSearchResultFill=\"#99FF7F7F\"\n                                         SearchResultsFill=\"#997FC9FF\"/>\n    </telerik:RadPdfViewer.SearchSettings>\n</telerik:RadPdfViewer>\n```\n\n----------------------------------------\n\nTITLE: Running SDKBrowser on iOS\nDESCRIPTION: Commands to build and run the SDKBrowser application on iOS, including options for running on specific devices using device ID\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/sdkbrowser-app.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=02C556DA-64B8-440B-8F06-F8C56BB7CC22\n```\n\n----------------------------------------\n\nTITLE: Implementing Star Shape Rating in .NET MAUI\nDESCRIPTION: Example showing how to create a Rating control with the default star shape geometry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rating/rating-shape-rating.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadShapeRating ItemShape=\"{x:Static telerik:RadGeometry.Star}\" />\n```\n\n----------------------------------------\n\nTITLE: Validating Phone Number in DataForm (.NET MAUI, C#)\nDESCRIPTION: This code snippet demonstrates how to validate a phone number field in the .NET MAUI DataForm using data annotations. It uses `[Required]`, `[Phone]`, and `[RegularExpression]` attributes to enforce a specific phone number format. The `[Display]` attribute is used to customize the name and prompt displayed in the DataForm.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dataform-net-maui-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\n[Required]\n[Phone]\n[RegularExpression(pattern: \"(?:(?:\\\\+?1\\\\s*(?:[.-]\\\\s*)?)?(?:(\\\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\\\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\\\s*(?:[.-]\\\\s*)?)([2-9]1[02-9]‌​|[2-9][02-9]1|[2-9][02-9]{2})\\\\s*(?:[.-]\\\\s*)?([0-9]{4})(?:\\\\s*(?:#|x\\\\.?|ext\\\\.?|extension)\\\\s*(\\\\d+))?$\", ErrorMessage = \"Invalid phone format\")]\n[Display(Name = \"Phone\", Prompt = \"Enter Phone\")]\npublic string Phone\n{\n    get => this.phone;\n    set => this.UpdateValue(ref this.phone, value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SliderToolbarItem in .NET MAUI Toolbar\nDESCRIPTION: Example showing how to add and configure a slider item in the Toolbar control with its basic properties - Value, Minimum, and Maximum.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/slider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='toolbar-slider-item'/>\n```\n\n----------------------------------------\n\nTITLE: Setting SideDrawer Transition Type in XAML\nDESCRIPTION: This snippet shows how to set the DrawerTransitionType property of the RadSideDrawer in XAML to define the animation effect used when the side drawer is opened or closed. The DrawerTransitionType property accepts values from the Telerik.Maui.Controls.SideDrawerTransitionType enum.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/transitions.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='sidedrawer-transition-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing IsToggledChanged Event Handler in C#\nDESCRIPTION: C# event handler that responds to the IsToggledChanged event of the ToggleButton, demonstrating how to access both the previous and new values of the IsToggled property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadToggleButton_IsToggledChanged(object sender, ValueChangedEventArgs<bool> e)\n{\n    var button = (RadToggleButton)sender;\n    button.Text = e.NewValue ? \"ON\" : \"OFF\";\n}\n```\n\n----------------------------------------\n\nTITLE: ImageEditor Toolbar Styling Example\nDESCRIPTION: Demonstrates how to reference custom styles for Hue, Brightness and Button toolbar items in XAML\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-toolbar-styling'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for Token Management in .NET MAUI\nDESCRIPTION: This snippet implements a ViewModel to manage a list of customers and selected tokens via commands and observable collections in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-tokens-mvvm.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Customer> Source { get; set; }\n    public ViewModel()\n    {\n        this.Source = new ObservableCollection<Customer>()\n            {\n                new Customer(\"Freda Curtis\", \"fcurtis@mail.com\"),\n                new Customer(\"Jeffery Francis\", \"jfrancis@mail.com\"),\n                new Customer(\"Eva Lawson\", \"elawson@mail.com\"),\n                new Customer(\"Emmett Santos\", \"esantos@mail.com\"),\n                new Customer(\"Theresa Bryan\", \"tbryan@mail.com\"),\n                new Customer(\"Jenny Fuller\", \"jfuller@mail.com\"),\n                new Customer(\"Terrell Norris\", \"tnorris@mail.com\"),\n            };\n\n        this.SelectTokenCommand = new Command(OnSelectTokenCommandExecuted);\n        this.RemoveTokenCommand = new Command(OnRemoveTokenCommandExecuted);\n\n        this.SelectedTokens = new ObservableCollection<object>();\n    }\n\n    public ICommand SelectTokenCommand { get; set; }\n    public ICommand RemoveTokenCommand { get; set; }\n\n    public ObservableCollection<object> SelectedTokens { get; set; }\n\n    private void OnSelectTokenCommandExecuted(object obj)\n    {\n        this.SelectedTokens.Add(this.Source[0]);\n    }\n\n    private void OnRemoveTokenCommandExecuted(object obj)\n    {\n        var item = this.SelectedTokens.FirstOrDefault();\n        if (item != null)\n        {\n            this.SelectedTokens.Remove(item);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection Highlight in DateTimePicker\nDESCRIPTION: Example of how to style the border that highlights the selected item in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style-selection-highlight-style' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Using Statement in .NET MAUI\nDESCRIPTION: Adds the necessary using statement to access Telerik controls functionality in C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n```\n\n----------------------------------------\n\nTITLE: Xamarin CheckBox XAML Namespace Declaration\nDESCRIPTION: XAML namespace declaration for using the Telerik CheckBox control in Xamarin.Forms applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerikPrimitives=\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\"\n```\n\n----------------------------------------\n\nTITLE: Defining BadgeView Control - XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a RadBadgeView control in a .NET MAUI application. It serves to create the visual representation of the badge in the user interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView/>\n```\n\n----------------------------------------\n\nTITLE: Add XAML namespace for Telerik UI\nDESCRIPTION: Adds the Telerik UI namespace to the XAML file, enabling the use of Telerik controls. This namespace is required to use the RadMap control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Obsolete NuGet V2 Server URL\nDESCRIPTION: The original NuGet server URL that is no longer supported, causing retrieval failures for Telerik UI for MAUI packages\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/failed-retrieve-info-remote-source.md#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://nuget.telerik.com/nuget\n```\n\n----------------------------------------\n\nTITLE: Xamarin MaskedInput Namespace Migration (C#)\nDESCRIPTION: This snippet illustrates the C# namespace import required to use the RadMaskedInput control in Xamarin.Forms. By including this `using` directive, you can directly reference the classes within the `Telerik.XamarinForms.Input` namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.XamarinForms.Input;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing XAML Namespace for Telerik Controls\nDESCRIPTION: XAML namespace declaration required for using Telerik MAUI controls\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Running Controls Samples on Specific iOS Device\nDESCRIPTION: Command to build and run the Controls Samples application on a specific iOS device using .NET MAUI, including the device UDID.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/controls-showcase-app.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=02C556DA-64B8-440B-8F06-F8C56BB7CC22\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls - .NET MAUI - C#\nDESCRIPTION: This code snippet registers the Telerik controls in a .NET MAUI application using the Compatibility.UseTelerik extension method within the CreateMauiApp method of the MauiProgram.cs. It configures the application to use Telerik components and includes font settings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace for .NET MAUI\nDESCRIPTION: The namespace required for using Telerik UI components in .NET MAUI applications. This needs to be added to the XAML file to access PDF Viewer and other Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in C#\nDESCRIPTION: This code snippet shows how to register Telerik controls within the `CreateMauiApp` method in `MauiProgram.cs` using the `UseTelerik` extension. This registration is crucial for the application to recognize and utilize the Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/border/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n \"using Telerik.Maui.Controls.Compatibility;\\n\\npublic static class MauiProgram\\n{\\n\tpublic static MauiApp CreateMauiApp()\\n\t{\\n\t\tvar builder = MauiApp.CreateBuilder();\\n\t\tbuilder\\n\t\t\t.UseTelerik()\\n\t\t\t.UseMauiApp<App>()\\n\t\t\t.ConfigureFonts(fonts =>\\n\t\t\t{\\n\t\t\t\tfonts.AddFont(\\\"OpenSans-Regular.ttf\\\", \\\"OpenSansRegular\\\");\\n\t\t\t});\\n\\n\t\treturn builder.Build();\\n\t}\\n}           \"\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry TextChanged Handler for PDF Search\nDESCRIPTION: Implementation of the TextChanged event handler that uses the SearchAsync method to initiate a search operation when the text in an entry field changes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/programmatic.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='pdfviewer-entry-textchanged'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context Menu in XAML\nDESCRIPTION: Code reference for implementing a custom context menu in RichTextEditor. The actual implementation is referenced but not shown in the snippet.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/context-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='richtexteditor-contextmenu-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButtonStyle in XAML\nDESCRIPTION: This XAML snippet covers setting the AcceptButtonStyle property for RadTimePicker's dropdown. The style of the Accept button is tailored to meet specific visual design needs. The code is used within a .NET MAUI application with telerik XAML namespace declared.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/dropdown-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"timepicker-style-accept-button-style\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext for DataPager - .NET MAUI - C#\nDESCRIPTION: This code sets the ViewModel as the BindingContext for the DataPager control in a .NET MAUI application, allowing data binding to occur. This snippet assumes a defined ViewModel and integrates it with the view for data-driven UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid with Template Column in XAML\nDESCRIPTION: This XAML code demonstrates how to define a DataGrid with a Template Column. It includes sorting and grouping functionality for the Age column using SortDescriptor and GroupDescriptor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/template-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid AutoGenerateColumns=\"False\"\n                             ItemsSource=\"{Binding Data}\"\n                             UserSortMode=\"Multiple\">\n    <telerik:RadDataGrid.BindingContext>\n        <local:ViewModel/>\n    </telerik:RadDataGrid.BindingContext>\n    <telerik:RadDataGrid.Columns>\n\t\t<telerik:DataGridTextColumn PropertyName=\"Name\"\n\t                                        HeaderText=\"Name\"\n\t                                        CanUserSort=\"True\"/>\n        <telerik:DataGridTemplateColumn HeaderText=\"Age\"\n                                                CanUserSort=\"True\">\n            <telerik:DataGridTemplateColumn.CellContentTemplate>\n                <DataTemplate>\n                    <Label Text=\"{Binding Age}\" />\n                </DataTemplate>\n            </telerik:DataGridTemplateColumn.CellContentTemplate>\n\n            <!-- Tell the DataGrid to sort using Age property with a SortDescriptor -->\n            <telerik:DataGridTemplateColumn.SortDescriptor>\n                <telerik:PropertySortDescriptor PropertyName=\"Age\" />\n            </telerik:DataGridTemplateColumn.SortDescriptor>\n\n            <!-- Tell the DataGrid to group using Age property with a GroupDescriptor -->\n            <telerik:DataGridTemplateColumn.GroupDescriptor>\n                <telerik:PropertyGroupDescriptor PropertyName=\"Age\" />\n            </telerik:DataGridTemplateColumn.GroupDescriptor>\n        </telerik:DataGridTemplateColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationButton ToolbarItem in .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to add a NavigationButton to a Toolbar in .NET MAUI. It shows the usage of the NavigationButtonToolbarItem class with its properties for text and image source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/navigation-button.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<NavigationButtonToolbarItem Text=\"Navigation Button\"\n                                ImageSource=\"iconimage.png\">\n    <NavigationButtonToolbarItem.Items>\n        <ButtonToolbarItem Text=\"Item 1\" />\n        <ButtonToolbarItem Text=\"Item 2\" />\n        <ButtonToolbarItem Text=\"Item 3\" />\n    </NavigationButtonToolbarItem.Items>\n</NavigationButtonToolbarItem>\n```\n\n----------------------------------------\n\nTITLE: Defining RadCollectionView in XAML for PDF Thumbnails Display\nDESCRIPTION: This snippet demonstrates how to define a RadCollectionView in XAML to display PDF thumbnails and their corresponding names, using data binding to a collection of documents.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-select-pdf-thumbnails-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadCollectionView ItemsSource=\"{Binding ListOfDocuments}\" \n                              ItemTapped=\"RadCollectionView_ItemTapped\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <VerticalStackLayout>\n                <Image Source=\"{Binding YourImage}\" />\n                <Label Text=\"{Binding YourPdfDocumentName}\" />\n            </VerticalStackLayout>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Defining Business Object for DataGrid Grouping in C#\nDESCRIPTION: This snippet defines a Person class with properties for Id, Name, and Age. It serves as the business object for grouping in the DataGrid example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/property-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-object' />\n```\n\n----------------------------------------\n\nTITLE: Listing SideDrawer Events\nDESCRIPTION: Lists the four main events exposed by the SideDrawer control - DrawerOpening, DrawerOpened, DrawerClosing, and DrawerClosed. Each event handler receives a sender parameter (castable to RadSideDrawer) and EventArgs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/events.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `DrawerOpening`&mdash;Raised when the drawer starts opening.\n* `DrawerOpened`&mdash;Raised when the drawer is already opened.\n* `DrawerClosing`&mdash;Raised when the drawer starts closing.\n* `DrawerClosed`&mdash;Raised when the drawer is already closed.\n```\n\n----------------------------------------\n\nTITLE: Telerik MAUI Namespace Declaration\nDESCRIPTION: XML namespace declaration for Telerik MAUI controls, which is required to use RadListPicker in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Integrating ViewModel with ItemsSource in XAML\nDESCRIPTION: This snippet shows the integration of a ViewModel class with an associated ItemsSource collection in a XAML file, enabling dynamic data binding for UI components like the RadListView. It assumes that the ViewModel is properly instantiated and provides necessary data for list item representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/layouts.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-layouts-linearlayout-source'/>\n```\n\n----------------------------------------\n\nTITLE: Styling the Path using the RadSolidColorBrush\nDESCRIPTION: This snippet illustrates how to set a solid color fill and stroke for the `RadPath` control. It defines geometry for the path with specific starting points and segments to create a custom shape.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/path/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadPath x:Name=\"solidPath\"\n                            Grid.Row=\"0\"\n                            StrokeThickness=\"2\"\n                            Stroke=\"#1481FF\"\n                            Fill=\"#BCE1FF\">\n    <telerik:RadPath.Geometry>\n        <telerik:RadPathGeometry>\n            <telerik:RadPathFigure StartPoint=\"0, 1\">\n                <telerik:RadLineSegment Point=\"1, 1\" />\n                <telerik:RadLineSegment Point=\"0.5, 0\" />\n                <telerik:RadLineSegment Point=\"0, 1\" />\n            </telerik:RadPathFigure>\n        </telerik:RadPathGeometry>\n    </telerik:RadPath.Geometry>\n</telerik:RadPath>\n```\n\n----------------------------------------\n\nTITLE: ListPicker ViewModel Implementation\nDESCRIPTION: Sample ViewModel implementation for ListPicker marked with snippet id 'listpicker-features-viewmodel'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-features-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Customizing DataGridComboBoxColumn with Templates in XAML\nDESCRIPTION: Shows how to use CellContentTemplate and CellEditTemplate to customize the appearance and editing experience of a DataGridComboBoxColumn. It includes a complex layout for cell content and a placeholder for the edit template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/picker-column.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridComboBoxColumn PropertyName=\"Country\"\n                                 HeaderText=\"Country\"\n                                 ItemsSourcePath=\"Countries\">\n\t<telerik:DataGridColumn.CellContentTemplate>\n        <DataTemplate>\n            <Grid>\n                <VerticalStackLayout InputTransparent=\"True\">\n                    <Grid BackgroundColor=\"Orange\"\n                          Margin=\"0, 10, 0, 0\">\n                        <Label Text=\"{Binding Country}\"\n                               Margin=\"0, 5, 0, 5\"\n                               HorizontalOptions=\"Center\"\n                               VerticalTextAlignment=\"Center\" /> \n                    </Grid>\n                    <Label Text=\"Some Custom Text\"\n                           TextColor=\"DarkGreen\"\n                           FontSize=\"10\" />  \n                </VerticalStackLayout>\n            </Grid>\n        </DataTemplate>\n    </telerik:DataGridColumn.CellContentTemplate>\t\n\t<telerik:DataGridColumn.CellEditTemplate>\n        <DataTemplate>\n           <!-- add the control here for example: <Picker/> <telerik:RadComboBox/>-->\n        </DataTemplate>\n    </telerik:DataGridColumn.CellEditTemplate>\t\t\t\t\t\t \n</telerik:DataGridComboBoxColumn>\n```\n\n----------------------------------------\n\nTITLE: Customizing DropDownButtonToolbarItem Content in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to define custom content inside a DropDownButtonToolbarItem in a .NET MAUI application. It utilizes the DropDownContentTemplate property to specify a layout using DropDownButtonToolbarItemViewContent. The example includes dependency on Telerik UI components and the use of FontImageSource for icons.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dropdown-button-toolbaritem-net-maui-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             x:Class=\"TelerikMauiApp5.MainPage\">\n\n    <VerticalStackLayout>\n        <telerik:RadToolbar>\n            <telerik:DropDownButtonToolbarItem Text=\"DropDownButton\">\n                <telerik:DropDownButtonToolbarItem.ImageSource>\n                    <FontImageSource Glyph=\"{x:Static telerik:TelerikFont.IconBulleting}\"\n                          FontFamily=\"{x:Static telerik:TelerikFont.Name}\"\n                          Size=\"16\" />\n                </telerik:DropDownButtonToolbarItem.ImageSource>\n                <telerik:DropDownButtonToolbarItem.DropDownContentTemplate>\n                    <ControlTemplate>\n                        <telerik:DropDownButtonToolbarItemViewContent>\n                            <VerticalStackLayout Padding=\"10\">\n                                <Label Text=\"Bulleted\" />\n                                <Label Text=\"Numbered\" />\n                                <Label Text=\"Multilevel\" />\n                            </VerticalStackLayout>\n                        </telerik:DropDownButtonToolbarItemViewContent>\n                    </ControlTemplate>\n                </telerik:DropDownButtonToolbarItem.DropDownContentTemplate>\n            </telerik:DropDownButtonToolbarItem>\n        </telerik:RadToolbar>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in .NET MAUI Application\nDESCRIPTION: Code required in MauiProgram.cs to register Telerik UI controls in a .NET MAUI application. This enables the use of all Telerik controls in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PickerMode to Popup in .NET MAUI ListPicker\nDESCRIPTION: This snippet demonstrates how to set the PickerMode property of the RadListPicker to Popup in XAML. The Popup mode is the default for mobile platforms like Android and iOS, allowing users to pick values from a popup interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListPicker PickerMode=\"Popup\"  />\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext in MainPage (C#)\nDESCRIPTION: This C# code snippet shows how to set the BindingContext of the MainPage to an instance of the ViewModel. This connects the XAML bindings to the ViewModel properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-gridlayout-spancount-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    ViewModel vm;\n\tpublic MainPage()\n\t{\n\t\tInitializeComponent();\n        this.vm = new ViewModel();\n        this.BindingContext = vm;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Configures the MAUI application to use Telerik controls by registering them in the application startup code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the ViewModel as BindingContext\nDESCRIPTION: C# code showing how to set the ViewModel as the BindingContext for the page containing the AIPrompt control, enabling data binding for the suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/suggestions.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='aiprompt-getting-started-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Defining Style Selector Resources in XAML\nDESCRIPTION: XAML resource definitions for the appointment style selector and corresponding styles.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/styling/appointments-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-appointments-styleselector' />\n```\n\n----------------------------------------\n\nTITLE: Setting Binding Context to ViewModel in C#\nDESCRIPTION: This snippet demonstrates how to set the BindingContext of the DataGrid to the ViewModel class in C#. This allows the DataGrid to access the data and logic within the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/group-header-template.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-propertygroupdescriptor-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Default RemoveTokenCommand Implementation in XAML\nDESCRIPTION: Example showing how to implement the default RemoveTokenCommand from a custom TokenTemplate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-default-removetoken' />\n```\n\n----------------------------------------\n\nTITLE: Using Telerik Namespace in XAML\nDESCRIPTION: This snippet illustrates how to incorporate the Telerik namespace into XAML for the DataGrid configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_5\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Image control in XAML\nDESCRIPTION: This XAML snippet adds a Microsoft.Maui.Image control to the page. This image control will later be used to display the saved signature. It relies on the standard Microsoft.Maui.Controls.Image control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/saving-options.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='signaturepad-image-control' />\n```\n\n----------------------------------------\n\nTITLE: Declaring RadAutoComplete in XAML for Plain Mode - XAML\nDESCRIPTION: XAML markup to declare a RadAutoComplete control using the custom DisplayTextFormatter for Plain display mode.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/display-text.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadAutoComplete x:Name=\"autocomplete\"\n    ItemsSource=\"{Binding Clients}\"\n    DisplayTextFormatter=\"{StaticResource MyTextFormatter}\" />\n```\n\n----------------------------------------\n\nTITLE: TreeView Data Model Class in C#\nDESCRIPTION: C# class that defines the data model for TreeView items, including properties for name, children collection, and item access by indexer for hierarchical data representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/events.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Item : NotifyPropertyChangedBase\n{\n    private string name;\n    private bool isSelected;\n    private bool isExpanded;\n    private bool isVisible = true;\n    private ObservableCollection<Item> children;\n\n    public Item(string name)\n    {\n        this.name = name;\n        this.children = new ObservableCollection<Item>();\n    }\n\n    public string Name\n    {\n        get { return this.name; }\n        set\n        {\n            if (this.name != value)\n            {\n                this.name = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public bool IsSelected\n    {\n        get { return this.isSelected; }\n        set\n        {\n            if (this.isSelected != value)\n            {\n                this.isSelected = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public bool IsExpanded\n    {\n        get { return this.isExpanded; }\n        set\n        {\n            if (this.isExpanded != value)\n            {\n                this.isExpanded = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public bool IsVisible\n    {\n        get { return this.isVisible; }\n        set\n        {\n            if (this.isVisible != value)\n            {\n                this.isVisible = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public ObservableCollection<Item> Children\n    {\n        get { return this.children; }\n        set\n        {\n            if (this.children != value)\n            {\n                this.children = value;\n                this.OnPropertyChanged();\n            }\n        }\n    }\n\n    public Item this[int index]\n    {\n        get { return this.Children[index]; }\n    }\n\n    public void Add(Item item)\n    {\n        this.Children.Add(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom String Converter for RangeSlider Labels in C#\nDESCRIPTION: Defines a dictionary-based string converter to replace numeric values with meaningful names for RangeSlider labels.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/labels.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class DictionaryStringConverter : IStringConverter\n{\n    private readonly Dictionary<double, string> valueToStringMap = new Dictionary<double, string>\n    {\n        { 0, \"Very Cold\" },\n        { 25, \"Cold\" },\n        { 50, \"Medium\" },\n        { 75, \"Hot\" },\n        { 100, \"Very Hot\" }\n    };\n\n    public string ConvertToString(double value)\n    {\n        if (this.valueToStringMap.TryGetValue(value, out string result))\n        {\n            return result;\n        }\n        return value.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PlaceholderLabelStyle in .NET MAUI\nDESCRIPTION: This snippet shows how to define the PlaceholderLabelStyle for the TemplatedPicker. This style customizes the appearance of the placeholder label.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='templatedpicker-placeholderlabelstyle' />\n```\n\n----------------------------------------\n\nTITLE: Customizing TokenTemplate in XAML\nDESCRIPTION: This XAML snippet shows how to override the default TokenTemplate of the custom ComboBox to hide the token views. The ContentView is set to be invisible, achieving the desired customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-showmoretemplate-hide-tokentemplate-combobox-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<local:MyComboBox \n   x:Name=\"comboBox\"\n   ItemsSource=\"{Binding Items}\"\n   SelectionMode=\"Multiple\"\n   IsEditable=\"True\"\n   DisplayMemberPath=\"Name\"\n   SelectedItems=\"{Binding SelectedItems}\"\n   AutomationId=\"comboSelectedItemMultiple\"\n   WidthRequest=\"200\">\n           <local:MyComboBox.TokenTemplate>\n       <DataTemplate>\n           <!-- hide the token view -->\n           <ContentView IsVisible=\"False\">\n           </ContentView>\n       </DataTemplate>\n   </local:MyComboBox.TokenTemplate>\n</local:MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik MAUI Namespace in XAML\nDESCRIPTION: Shows how to import the Telerik MAUI namespace in a XAML file, which is required to use any Telerik UI for .NET MAUI controls including the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace needed for utilizing Telerik controls in XAML. It must be declared in the XAML page where Telerik controls like MaskedEntry are used.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"clr-namespace:Telerik.Maui.Controls;assembly=Telerik.Maui.Controls\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel with Location Data in C#\nDESCRIPTION: Creates a ViewModel that provides a hierarchical data structure of countries and cities for binding to the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        var locations = new ObservableCollection<Location>();\n\n        var bulgaria = new Country { Name = \"Bulgaria\" };\n        var usa = new Country { Name = \"USA\" };\n        var germany = new Country { Name = \"Germany\" };\n\n        bulgaria.Cities.Add(new City { Name = \"Sofia\" });\n        bulgaria.Cities.Add(new City { Name = \"Plovdiv\" });\n        bulgaria.Cities.Add(new City { Name = \"Varna\" });\n        bulgaria.Cities.Add(new City { Name = \"Burgas\" });\n\n        usa.Cities.Add(new City { Name = \"New York\" });\n        usa.Cities.Add(new City { Name = \"Washington\" });\n        usa.Cities.Add(new City { Name = \"Chicago\" });\n        usa.Cities.Add(new City { Name = \"Los Angeles\" });\n\n        germany.Cities.Add(new City { Name = \"Berlin\" });\n        germany.Cities.Add(new City { Name = \"Munich\" });\n        germany.Cities.Add(new City { Name = \"Frankfurt\" });\n        germany.Cities.Add(new City { Name = \"Hamburg\" });\n\n        locations.Add(bulgaria);\n        locations.Add(usa);\n        locations.Add(germany);\n\n        this.Locations = locations;\n    }\n\n    public ObservableCollection<Location> Locations { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling and Configuring TemplatedButton in .NET MAUI\nDESCRIPTION: Fully configures a RadTemplatedButton with custom styling, event handling, and templated content for an interactive component with visual feedback.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadTemplatedButton x:Name=\"templatedButton\"\n\t\t\t\t\t\t\tTextColor=\"Black\"\n\t\t\t\t\t\t\tBackground=\"#FAFAFA\"\n\t\t\t\t\t\t\tBorderBrush=\"LightGray\"\n\t\t\t\t\t\t\tBorderThickness=\"1\"\n\t\t\t\t\t\t\tClicked=\"OnTemplatedButtonClicked\"\n\t\t\t\t\t\t\tHorizontalOptions=\"Center\">\n\t<telerik:RadTemplatedButton.Content>\n\t\t<Grid ColumnDefinitions=\"Auto, *\" HorizontalOptions=\"Center\">\n\t\t\t<telerik:RadBusyIndicator x:Name=\"busy\"\n\t\t\t\t\t\t\t\t\tAnimationContentHeightRequest=\"16\"\n\t\t\t\t\t\t\t\t\tAnimationContentColor=\"#80CBC4\"\n\t\t\t\t\t\t\t\t\tAnimationContentWidthRequest=\"16\"\n\t\t\t\t\t\t\t\t\tAnimationType=\"Animation4\"\n\t\t\t\t\t\t\t\t\tIsVisible=\"{Binding IsBusy,Source={x:Reference busy}}\"\n\t\t\t\t\t\t\t\t\tMargin=\"0, 0, 10, 0\" />\n\t\t\t<Label x:Name=\"loadingLabel\" \n\t\t\t\t\tGrid.Column=\"1\"\n\t\t\t\t\tTextColor=\"{Binding Source={RelativeSource AncestorType={x:Type telerik:RadTemplatedButton}}, Path=TextColor}\" \n\t\t\t\t\tText=\"Load Content\" />\n\t\t</Grid>\n\t</telerik:RadTemplatedButton.Content>\n</telerik:RadTemplatedButton>\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Button Style in XAML\nDESCRIPTION: This snippet shows how to set the style for the Toggle button in the DatePicker, allowing developers to create a cohesive look that matches application branding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-toggle-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Width for DataGrid Columns in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to set fixed widths for the DataGrid and its columns in a .NET MAUI application. The `WidthRequest` property on the RadDataGrid defines the total width of the grid. Each `DataGridTextColumn` has its `SizeMode` set to `Fixed` and `Width` property set to specify the width of the column, ensuring a fixed column width.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-set-fixed-width.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" AutoGenerateColumns=\"False\" WidthRequest=\"300\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Country\" HeaderText=\"Country\" Width=\"100\" SizeMode=\"Fixed\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\" HeaderText=\"Capital\" Width=\"200\" SizeMode=\"Fixed\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Registering a Font with PdfProcessing in C#\nDESCRIPTION: This code snippet demonstrates how to register a non-standard font with the Telerik RadPdfProcessing library. It loads the font data from an embedded resource (TTF file), reads the data into a byte array using the `ReadAllBytes` method, and then registers the font using the `FontsRepository.RegisterFont` method. The registered font can then be used in the PDF document.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAssembly assembly = typeof(MainPage).Assembly;\nStream stream = assembly.GetManifestResourceStream(\"SampleApp.Resources.SampleFont.ttf\");\nvar fontData = ReadAllBytes(stream);\nTelerik.Windows.Documents.Fixed.Model.Fonts.FontsRepository.RegisterFont(\n\tnew FontFamily(\"Verdana\"), FontStyles.Normal, FontWeights.Normal, fontData);\n```\n\n----------------------------------------\n\nTITLE: Configuring GridSplitter Resize Behavior in XAML\nDESCRIPTION: This snippet demonstrates how to set the ResizeBehavior property of the GridSplitter control in XAML. It shows the usage of the telerik namespace and the configuration of the ResizeBehavior property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='gridsplitter-resize-configuration' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik NuGet Source with Credentials using .NET CLI\nDESCRIPTION: This command adds the Telerik NuGet server as a package source using .NET CLI. It requires replacing placeholders with actual Telerik account credentials. Note that storing passwords in clear text is discouraged for production use.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/using-dotnet-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source https://nuget.telerik.com/v3/index.json --name TelerikNuGetFeed --username <TELERIK EMAIL> --password <TELERIK PASSWORD> --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Required namespace declaration for using Telerik MAUI controls in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/editors-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to ListView in C#\nDESCRIPTION: This snippet demonstrates adding the `GroupHeaderTapCommand` to the commands collection of the ListView instance, allowing customized handling of header taps.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/expand-collapse.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nlistView.Commands.Add(new GroupHeaderTapCommand());\n```\n\n----------------------------------------\n\nTITLE: Defining TabView Style in XAML Resources\nDESCRIPTION: Demonstrates how to create a style targeting RadTabView in the page resources to customize the TabView headers appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/tabview-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-tabviewstyling-style'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to include the Telerik namespace in a XAML file. This namespace is necessary to use Telerik controls within your .NET MAUI XAML layouts.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\n----------------------------------------\n\nTITLE: NavigationView Namespace Declaration XAML\nDESCRIPTION: This XAML snippet defines the telerik namespace, which is required to use the Telerik UI for .NET MAUI controls. This namespace declaration allows referencing Telerik controls such as NavigationViewItem within the XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/navigationitem.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Arrow Button for TemplatedPicker - XAML\nDESCRIPTION: In this snippet, the IsToggleButtonVisible property is set to True, which makes an arrow button visible for toggling the picker UI. This property is enabled by default for desktop platforms but can be applied to mobile platforms explicitly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/picker-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTemplatedPicker PickerMode=\"DropDown\"\n\t\t\t\t\t\t\tIsToggleButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Header Style\nDESCRIPTION: Sets custom styling for the popup header using HeaderStyle property\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/popup-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker.PopupSettings>\n    <telerik:PickerPopupSettings HeaderStyle=\"{StaticResource HeaderStyle}\" />\n</telerik:RadDatePicker.PopupSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining RadDataGrid for DynamicObject Binding in .NET MAUI\nDESCRIPTION: XAML code to define a RadDataGrid control for binding to a DynamicObject. It sets up auto-generated columns and binds to the Items property of the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/dynamic-data.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\"\n                      ItemsSource=\"{Binding Items}\"\n                      AutoGenerateColumns=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Hyperlink Error Handler Implementation in C#\nDESCRIPTION: C# event handler code for customizing the hyperlink error handling behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/hyperlink-support.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-hyperlinkerrorhandling-code' />\n```\n\n----------------------------------------\n\nTITLE: Displaying TabViewItem in .NET MAUI XAML\nDESCRIPTION: This snippet demonstrates how to add TabViewItems directly to the Items collection of a RadTabView in XAML. The RadTabView serves as a container for TabViewItems, each identified by a HeaderText attribute. Required dependencies include Telerik's RadTabView control for .NET MAUI. When executed, this code results in rendering UI tabs labeled Home, Folder, and View.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/tabviewitem.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\">\n\t<telerik:TabViewItem HeaderText=\"Home\" />\n\t<telerik:TabViewItem HeaderText=\"Folder\" />\n\t<telerik:TabViewItem HeaderText=\"View\" />\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView Data Model in C#\nDESCRIPTION: C# class definition for the data model used in the CollectionView. This model contains a Name property which is used for filtering in the example.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataModel\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TreeView with LoadChildrenOnDemand and CheckBoxMode Recursive in XAML\nDESCRIPTION: XAML code that sets up a TreeView with CheckBoxMode set to Recursive and LoadChildrenOnDemand enabled. This configuration allows for on-demand loading of tree nodes while maintaining the recursive checkbox behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/treeview-net-maui-load-children-checkbox-recursive.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                     ItemsSource=\"{Binding TreeNodes}\"\n                     CheckedItems=\"{Binding CheckedTreeNodes}\"\n                     CheckBoxMode=\"Recursive\"\n                     LoadChildrenOnDemandCommand=\"{Binding LoadChildrenOnDemandCommand}\"\n                     IsLoadChildrenOnDemandEnabled=\"True\">\n    <telerik:RadTreeView.ItemStyle>\n        <Style TargetType=\"telerik:TreeViewItemView\" x:DataType=\"local:TreeNode\">\n            <Setter Property=\"IsChecked\" Value=\"{Binding IsChecked}\" />\n        </Style>\n    </telerik:RadTreeView.ItemStyle>\n    <telerik:TreeViewDescriptor TargetType=\"{x:Type local:TreeNode}\"\n                                DisplayMemberPath=\"Name\"\n                                ItemsSourcePath=\"Children\" />\n</telerik:RadTreeView>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to RadDataGrid in XAML\nDESCRIPTION: This XML code demonstrates how to add the `CustomGenerateColumnCommand` to the `RadDataGrid`'s `Commands` collection within a .NET MAUI application. The `AutoGenerateColumns` property is set to \"True\", triggering the command during column generation. The `local` namespace should be defined to point to the location of the custom command class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-column-generation-raddatagrid-dotnet-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\" AutoGenerateColumns=\"True\">\n    <telerik:RadDataGrid.Commands>\n        <local:CustomGenerateColumnCommand />\n    </telerik:RadDataGrid.Commands>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid and Control in XAML\nDESCRIPTION: This XAML code snippet demonstrates how to define a DataGrid and a switch control in XAML. The DataGrid is bound to the `Data` property of the `ViewModel`, and the `CanUserReorderColumns` property is bound to the `IsToggled` property of the switch.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage\n    x:Class=\"DataGridMAUI.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:DataGridMAUI\"\n    xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n    x:Name=\"page\">\n\n    <ContentPage.BindingContext>\n        <local:ViewModel />\n    </ContentPage.BindingContext>\n\n    <Grid RowDefinitions=\"Auto,*\">\n        <Switch\n            HorizontalOptions=\"Center\"\n            IsToggled=\"{Binding CanUserReorderColumns, Mode=TwoWay}\"\n            VerticalOptions=\"Center\" />\n\n        <telerik:RadDataGrid\n            x:Name=\"dataGrid\"\n            Grid.Row=\"1\"\n            ItemsSource=\"{Binding Data}\"\n            CanUserReorderColumns=\"True\" />\n    </Grid>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Defining RadPopup Template in XAML for MAUI\nDESCRIPTION: XAML template that defines the UI structure for a popup with a button to add items and a vertical stack layout that contains the items. The template is referenced in a resource dictionary and used by the RadPopup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/prevent-popup-resizing-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <DataTemplate x:Key=\"Template1\">\n        <ScrollView>\n            <VerticalStackLayout BackgroundColor=\"LightGray\" Spacing=\"5\" Padding=\"5\">\n                <Button Text=\"add item\" Clicked=\"Button1_Clicked\" />\n                <VerticalStackLayout BackgroundColor=\"LightBlue\">\n                    <Label Text=\"item 0\" />\n                    <Label Text=\"item 1\" />\n                    <Label Text=\"item 2\" />\n                    <Label Text=\"item 3\" />\n                </VerticalStackLayout>\n            </VerticalStackLayout>\n        </ScrollView>\n    </DataTemplate>\n</ContentPage.Resources>\n\n<Grid RowDefinitions=\"Auto,*, Auto\">\n    <VerticalStackLayout HorizontalOptions=\"Center\" VerticalOptions=\"Center\">\n        <Button x:Name=\"Button2\" Text=\"open popup with Content\" Clicked=\"Button2_Clicked\" />\n    </VerticalStackLayout>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration\nDESCRIPTION: Required Telerik XAML namespace declaration for using RadComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-clear-selection-command.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace Definition in .NET MAUI using XAML\nDESCRIPTION: Shows how to add the Telerik namespace to the XAML, which is necessary for accessing Telerik controls like the TemplatedPicker in the project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/data-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Button Toolbar Style Definition\nDESCRIPTION: Shows the style definition for toolbar buttons in the page resources\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-styling-button-toolbar-style'/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Chart with Two Series in XAML\nDESCRIPTION: This XAML code defines a RadCartesianChart with two LineSeries, a CategoricalAxis for the horizontal axis, and a NumericalAxis for the vertical axis.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-multiple-axes.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCartesianChart x:Name=\"chart\" HandlerChanged=\"chart_HandlerChanged\">\n    <telerik:RadCartesianChart.HorizontalAxis>\n        <telerik:CategoricalAxis ShowLabels=\"True\" />\n    </telerik:RadCartesianChart.HorizontalAxis>\n    <telerik:RadCartesianChart.VerticalAxis>\n        <telerik:NumericalAxis Location=\"Left\" Minimum=\"-10\" Maximum=\"110\" MajorStep=\"10\"\n                            ShowLabels=\"True\"/>\n    </telerik:RadCartesianChart.VerticalAxis>\n    <telerik:RadCartesianChart.Series>\n        <telerik:LineSeries CategoryBinding=\"Category\"\n                        ValueBinding=\"Value\"\n                        ShowLabels=\"True\"\n                        ItemsSource=\"{Binding Data1}\" />\n\n        <telerik:LineSeries CategoryBinding=\"Category\"\n            ValueBinding=\"Value\"\n            ShowLabels=\"True\"\n            ItemsSource=\"{Binding Data2}\" />\n    </telerik:RadCartesianChart.Series>\n</telerik:RadCartesianChart>\n```\n\n----------------------------------------\n\nTITLE: Custom RemoveToken Command Implementation\nDESCRIPTION: Custom implementation of the RemoveTokenCommand that inherits from ComboBoxRemoveTokenCommand with confirmation dialog.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-custom-removetokencommand' />\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik MAUI Namespace in XAML\nDESCRIPTION: Adding the required Telerik XAML namespace for using RichTextEditor commands\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: DataGrid Grouping ViewModel Implementation\nDESCRIPTION: C# implementation of the ViewModel class used for DataGrid grouping functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/group-header-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Initializing DataForm with Custom ComboBox Editor in XAML\nDESCRIPTION: Defines a RadDataForm with a custom ComboBox editor using DataFormCustomEditor, enabling multiple selection and binding to SelectedItems collection. Requires setting SelectionMode to Multiple and providing an appropriate binding context.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dataform-custom-editor-combobox-selecteditems.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\" CommitMode=\"Explicit\" AutoGenerateItems=\"False\">\n    <telerik:DataFormCustomEditor PropertyName=\"Accommodation\">\n        <telerik:DataFormCustomEditor.EditorTemplate>\n            <ControlTemplate>\n                <VerticalStackLayout>\n                    <telerik:RadComboBox Text=\"{Binding Value, Mode=TwoWay, Source={RelativeSource Mode=TemplatedParent}}\" \n                                            SelectionMode=\"Multiple\"\n                                            ItemsSource=\"{Binding AvailableAccommodations}\"\n                                            SelectedItems=\"{Binding Values}\"/>\n                </VerticalStackLayout>\n            </ControlTemplate>\n        </telerik:DataFormCustomEditor.EditorTemplate>\n    </telerik:DataFormCustomEditor>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace\nDESCRIPTION: Required namespace declaration to use Telerik MAUI controls in XAML\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/date-range.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: C# code for registering Telerik UI controls in a .NET MAUI application through the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/wraplayout/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Drag Operations in RangeSlider\nDESCRIPTION: Demonstrates how to completely disable dragging functionality in the RangeSlider control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/range-thumb.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-drag-disabled-xaml' />\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ListView HandlerChanged Event Configuration\nDESCRIPTION: Event handler for configuring native ListView properties in .NET MAUI using platform-specific preprocessor directives\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nthis.listView.HandlerChanged += ListView_HandlerChanged;\n\nprivate void ListView_HandlerChanged(object sender, EventArgs e)\n{\n    var handler = ((RadListView)sender).Handler;\n    if (handler != null)\n    {\n#if __IOS__\n        var nativeView = handler.PlatformView as Telerik.Maui.Controls.Compatibility.DataControlsRenderer.iOS.TKExtendedListView;\n        nativeView.Layout.CollectionView.Bounces = false;\n#endif\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid in XAML\nDESCRIPTION: This snippet shows how to define a DataGrid in XAML, which is crucial for the UI representation of the grid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/validation.md#2025-04-21_snippet_4\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='datagrid-commands-validation'/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up ViewModel as BindingContext in C#\nDESCRIPTION: This C# snippet sets up the ViewModel for binding in a .NET MAUI application. It initializes the MainPage and establishes the BindingContext, making the properties of the ViewModel accessible for binding in the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/gauge-rangesdefinition-gradientstop-bindable-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new ViewModel();\n    }\n}\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private double data = 10;\n    public double Data\n    {\n        get =>this.data;\n        set { this.UpdateValue(ref this.data, value);}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating City Business Model\nDESCRIPTION: Data model class representing city information for ComboBox items\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/selection.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='combobox-city-businessmodel'/>\n```\n\n----------------------------------------\n\nTITLE: ComboBox Commands Implementation in XAML\nDESCRIPTION: Demonstrates the basic implementation of ComboBox commands including the default ClearSelectionCommand and custom command implementations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='combobox-commands'/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Namespace Import for Telerik Controls\nDESCRIPTION: XAML namespace declaration required for using Telerik UI for .NET MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/events.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RadListView HandlerChanged Event Handler in C#\nDESCRIPTION: This C# code snippet demonstrates how to implement the HandlerChanged event handler to customize the scrolling animation for RadListView. It includes platform-specific code for both Android and iOS to modify the animation behavior.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-change-animation-scrolling-radlistview-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void listView_HandlerChanged(object sender, EventArgs e)\n{\n    if (this.listView.Handler == null) return;\n\n#if ANDROID\n    Com.Telerik.Widget.List.FadeItemAnimator fadeItemAnimator = new Com.Telerik.Widget.List.FadeItemAnimator();\n    var platform = (Android.Widget.FrameLayout)this.listView.Handler.PlatformView;\n    Telerik.Maui.Controls.Compatibility.DataControlsRenderer.Android.ListView.RadListViewWrapper wrapper = (Telerik.Maui.Controls.Compatibility.DataControlsRenderer.Android.ListView.RadListViewWrapper)platform;\n    wrapper.ListView.SetItemAnimator(fadeItemAnimator);\n\n#elif IOS17_0_OR_GREATER\n\n        var platformList = (TelerikUI.TKListView)this.listView.Handler.PlatformView;\n    TelerikUI.TKListViewLinearLayout layout = (TelerikUI.TKListViewLinearLayout)platformList.Layout;\n    layout.AnimationDuration = 0;\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swipe Template Resources in XAML\nDESCRIPTION: XAML resource definitions for the StartSwipeTemplate and EndSwipeTemplate used by the CollectionView. These templates define the UI elements that appear when swiping items in the list.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/item-swipe/item-swipe-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <DataTemplate x:Key=\"StartTemplate\">\n            <Grid Padding=\"16, 0, 0, 0\" BackgroundColor=\"#FF6F6F\">\n                <Label Text=\"Delete\"\n                       FontSize=\"20\"\n                       VerticalOptions=\"Center\"\n                       HorizontalTextAlignment=\"Start\"\n                       TextColor=\"White\" />\n            </Grid>\n        </DataTemplate>\n        <DataTemplate x:Key=\"EndTemplate\">\n            <Grid Padding=\"0, 0, 16, 0\" BackgroundColor=\"#4C6EF5\">\n                <Label Text=\"Favorite\"\n                       FontSize=\"20\"\n                       VerticalOptions=\"Center\"\n                       HorizontalTextAlignment=\"End\"\n                       TextColor=\"White\" />\n            </Grid>\n        </DataTemplate>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace for .NET MAUI\nDESCRIPTION: Adding the required Telerik namespace to access the PDF Viewer control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/programmatic.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik MAUI Namespace in XAML\nDESCRIPTION: Adding the Telerik XAML namespace to enable access to Telerik MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Handling SelectionChanged Event with XAML and C# - .NET MAUI\nDESCRIPTION: This snippet illustrates how to handle the 'SelectionChanged' event of the RadTimeSpanPicker control, allowing custom logic implementation when a user selects a time value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker SelectionChanged=\"RadTimeSpanPicker_SelectionChanged\"/>\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadTimeSpanPicker_SelectionChanged(object sender, EventArgs e)\n{\n\t// implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TabView Header ItemStyle Selector in XAML\nDESCRIPTION: Demonstrates how to configure the TabView control with a custom HeaderItemStyleSelector to apply different styles to header items based on specific conditions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/styling/header-itemstyle-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\ntabview-styling-headeritemstyleselector\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace to XAML in .NET MAUI\nDESCRIPTION: Adds the Telerik namespace to the XAML file to enable the use of Telerik UI for .NET MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Absolute Offset Gradient Range in .NET MAUI Gauge\nDESCRIPTION: XAML example showing configuration of a gradient range with absolute offset values. The GaugeRangesDefinition includes thickness customization and a specific offset value of 2 for positioning the range relative to the axis line.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/ranges.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeRangesDefinition EndThickness=\"15\"\n                                     StartThickness=\"0\"\n                                     Offset=\"2\">\n    <telerik:GaugeGradientRange From=\"-25\" To=\"25\">\n        <telerik:RadGradientStop Offset=\"-25\" Color=\"Blue\" />\n        <telerik:RadGradientStop Offset=\"25\" Color=\"Red\" />\n    </telerik:GaugeGradientRange>\n</telerik:GaugeRangesDefinition>\n```\n\n----------------------------------------\n\nTITLE: Setting Styles in Page Resources for Navigation View\nDESCRIPTION: This snippet shows how to define styles for ComboBox and Label types in XAML, and set those styles to the DataPagerNavigationView through the NavigationViewStyle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/navigationview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ComboStyle\" TargetType=\"telerik:RadComboBox\">\n\n</Style>\n<Style x:Key=\"LabelStyle\" TargetType=\"Label\">\n\n</Style>\n<Style x:Key=\"NavigationViewStyle\" TargetType=\"telerik:DataPagerNavigationView\">\n    <Setter Property=\"ComboBoxStyle\" Value=\"{StaticResource ComboStyle}\" />\n    <Setter Property=\"LabelsStyle\" Value=\"{StaticResource LabelStyle}\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Required Namespaces\nDESCRIPTION: XAML namespace declaration for Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/item-template-selector.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram\nDESCRIPTION: Demonstrates how to register Telerik controls in the application's startup configuration using the UseTelerik extension method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext for DataGrid in C#\nDESCRIPTION: Demonstrates how to set the BindingContext of the page to an instance of the ViewModel class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new ViewModel();\n```\n\n----------------------------------------\n\nTITLE: Implementing TabView Header Template with Clear Button in XAML\nDESCRIPTION: XAML code that defines the TabView control with a custom HeaderItemTemplate containing a clear button. The template includes a RadBorder container with a Grid layout that holds the content presenter and removal button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/add-clear-button-tabview-header-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\" AutomationId=\"tabView\">\n    <telerik:RadTabView.HeaderItemTemplate>\n        <ControlTemplate>\n            <telerik:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n                                BorderColor=\"{TemplateBinding BorderColor}\"\n                                BorderThickness=\"{TemplateBinding BorderThickness}\"\n                                CornerRadius=\"{TemplateBinding CornerRadius}\"\n                                Padding=\"{TemplateBinding ContentPadding}\">\n                <Grid BindingContext=\"{TemplateBinding}\">\n                    <ContentPresenter />\n                    <Button Text=\"{x:Static telerik:TelerikFont.IconReset}\"\n                            Style=\"{StaticResource HeaderButtonStyle}\"\n                            HorizontalOptions=\"End\"\n                            Clicked=\"OnRemoveTabClicked\" />\n                </Grid>\n            </telerik:RadBorder>\n        </ControlTemplate>\n    </telerik:RadTabView.HeaderItemTemplate>\n    <telerik:TabViewItem HeaderText=\"Home\">\n        <Label Margin=\"10\" Text=\"This is the content of the Home tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"Folder\">\n        <Label Margin=\"10\" Text=\"This is the content of the Folder tab\" />\n    </telerik:TabViewItem>\n    <telerik:TabViewItem HeaderText=\"View\">\n        <Label Margin=\"10\" Text=\"This is the content of the View tab\" />\n    </telerik:TabViewItem>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: iOS Chart Delegate for Tooltip Customization\nDESCRIPTION: Custom chart delegate for iOS platform to handle trackball selection and tooltip text generation with detailed formatting\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-chart-tooltip-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyChartDelegate : Telerik.Maui.Controls.Compatibility.ChartRenderer.iOS.CartesianChartDelegate\n{\n    public MyChartDelegate(RadCartesianChart chart) : base(chart)\n    {\n    }\n\n    public override void TrackballDidTrackSelection(TKChart chart, TKChartSelectionInfo[] selection)\n    {\n        StringBuilder str = new StringBuilder();\n        bool first = true;\n        foreach (TelerikUI.TKChartSelectionInfo info in selection)\n        {\n            var point = info.DataPoint as TelerikUI.TKChartDataPoint;\n            if (!first)\n            {\n                str.Append(\"\\n\");\n            }\n            else\n            {\n                first = !first;\n            }\n            str.Append(string.Format(\"Value of {0} is $ {1}\", point.DataXValue, point.DataYValue));\n        }\n        chart.Trackball.Tooltip.Text = str.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom DataGrid Style to Control\nDESCRIPTION: Example showing how to apply a custom style to a RadDataGrid control by referencing the style in the control's XAML declaration using the Style property and StaticResource markup extension.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/styling-and-themes/customize-the-component-styles.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" Style=\"{StaticResource CustomRadDataGridStyle}\"\n                 ItemsSource=\"{Binding Clubs}\" >\n    <telerik:RadDataGrid.BindingContext>\n    <local:ViewModel />\n    </telerik:RadDataGrid.BindingContext>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Namespace Migration Reference for Telerik UI .NET MAUI\nDESCRIPTION: Reference table showing the mapping between previous XamarinForms namespaces and their new corresponding Maui.Controls.Compatibility namespaces. This includes changes for ListView descriptors and general control namespaces.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/upgrade/breaking-changes/2-0-0.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.XamarinForms.* -> Telerik.Maui.Controls.Compatibility.*\nTelerik.XamarinForms.DataControls.ListView.DelegateFilterDescriptor -> Telerik.Maui.Controls.Compatibility.DataControls.ListView.ListViewDelegateFilterDescriptor\nTelerik.XamarinForms.DataControls.ListView.DelegateGroupDescriptor -> Telerik.Maui.Controls.Compatibility.DataControls.ListView.ListViewDelegateGroupDescriptor\nTelerik.XamarinForms.DataControls.ListView.DelegateSortDescriptor -> Telerik.Maui.Controls.Compatibility.DataControls.ListView.ListViewDelegateSortDescriptor\nTelerik.XamarinForms.DataControls.ListView.PropertyGroupDescriptor -> Telerik.Maui.Controls.Compatibility.DataControls.ListView.ListViewPropertyGroupDescriptor\nTelerik.XamarinForms.DataControls.ListView.PropertySortDescriptor -> Telerik.Maui.Controls.Compatibility.DataControls.ListView.ListViewPropertySortDescriptor\n```\n\n----------------------------------------\n\nTITLE: Selecting All Items in DataGrid\nDESCRIPTION: Shows how to programmatically select all items in the DataGrid using the SelectAll method.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nthis.dataGrid.SelectAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollViewHandler for Android Scrollbar Visibility\nDESCRIPTION: C# implementation to customize the ScrollViewHandler, enabling permanent scrollbar visibility and applying custom styling. Includes platform-specific configurations for Android using conditional compilation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/collectionview-scrollbar-visible-android.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ScrollViewHandler.Mapper.AppendToMapping(\"MyCustom\", (handler, view) => {\n\n#if ANDROID\n    handler.PlatformView.VerticalScrollBarEnabled = true;\n    handler.PlatformView.ScrollBarStyle = Android.Views.ScrollbarStyles.OutsideOverlay;\n    handler.PlatformView.VerticalScrollbarThumbDrawable = AndroidX.AppCompat.Content.Res.AppCompatResources.GetDrawable(Microsoft.Maui.ApplicationModel.Platform.AppContext, Drawable.scrollview_thumb);\n    handler.PlatformView.ScrollbarFadingEnabled = false;\n    handler.PlatformView.ScrollBarSize = 20;\n#endif\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with Required Attribute in C#\nDESCRIPTION: This code snippet demonstrates how to define a ViewModel property with the `Required` attribute for data validation. The `Required` attribute without an explicit error message uses the default .NET framework error message.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/custom-localization-dotnet-maui-dataform.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyViewModel\n{\n    [Required]\n    public string MyProperty { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CellTapUserCommand for Single-Click Edit Mode in MAUI RadDataGrid\nDESCRIPTION: This code snippet defines a custom CellTapUserCommand class that inherits from DataGridCommand. It overrides the Execute method to trigger the cell double tap behavior on a single tap, effectively changing the edit mode activation to a single click.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/changing-edit-mode-behavior-maui-raddatagrid.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CellTapUserCommand : DataGridCommand\n{\n    public CellTapUserCommand()\n    { \n        Id = DataGridCommandId.CellTap;\n    }\n\n    public override bool CanExecute(object parameter)\n    {\n        return true;\n    }\n\n    public override void Execute(object parameter)\n    {\n        if (parameter is not DataGridCellInfo cellInfo)\n        {\n            return;\n        }\n        \n        this.Owner.CommandService.ExecuteDefaultCommand(DataGridCommandId.CellDoubleTap, parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Authentication Settings in nuget.config\nDESCRIPTION: XML configuration for setting up NuGet package sources with token-based authentication using environment variables. Includes both the public NuGet feed and Telerik's private feed with credential configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/nuget-keys.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <packageSources>\n        <clear/>\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n        <add key=\"MyTelerikFeed\" value=\"https://nuget.telerik.com/v3/index.json\" protocolVersion=\"3\"/>\n    </packageSources>\n    <packageSourceCredentials>\n        <MyTelerikFeed>\n        <add key=\"Username\" value=\"api-key\" />\n        <add key=\"ClearTextPassword\" value=\"%MY_API_KEY%\" />\n        </MyTelerikFeed>\n    </packageSourceCredentials>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Range Bar Indicator with Gradient Stops in XAML\nDESCRIPTION: This example shows how to set up a GaugeRangeBarIndicator with custom FromCap, ToCap, Offset, From, and To values, along with gradient stops for color variation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gauge/indicators.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:GaugeRangeBarIndicator FromCap=\"Oval\"\n\t\t\t\t\t\t\t  ToCap=\"Oval\"\n\t\t\t\t\t\t\t  Offset=\"65\"\n\t\t\t\t\t\t\t  From=\"-75\"\n\t\t\t\t\t\t\t  To=\"75\">\n    <telerik:GaugeRangeBarIndicator.GradientStops>\n        <telerik:RadGradientStop Offset=\"-75\" Color=\"Gray\" />\n        <telerik:RadGradientStop Offset=\"-25\" Color=\"Red\" />\n        <telerik:RadGradientStop Offset=\"25\" Color=\"Yellow\" />\n        <telerik:RadGradientStop Offset=\"75\" Color=\"Green\" />\n    </telerik:GaugeRangeBarIndicator.GradientStops>\n</telerik:GaugeRangeBarIndicator>\n```\n\n----------------------------------------\n\nTITLE: Setting DataGrid Header Style in MAUI Using C#\nDESCRIPTION: This code snippet demonstrates how to create a custom style for the DataGrid header, setting properties like font family and border thickness. It utilizes the DataGridColumnHeaderAppearance class to define the style and applies it in the Execute method of a command.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-header-style-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nStyle style = new Style(typeof(DataGridColumnHeaderAppearance));\nstyle.Setters.Add(new Setter() \n{ \n    Property = DataGridColumnHeaderAppearance.TextFontFamilyProperty, \n    Value=\"Helvetica\"\n});\nstyle.Setters.Add(new Setter() \n{ \n    Property = DataGridColumnHeaderAppearance.BorderThicknessProperty, \n    Value = new Microsoft.Maui.Thickness(1) \n});\n// Add more setters as needed.\n...\ncontext.Result.HeaderStyle = style;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to your XAML file, which is required to use Telerik UI components in your .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: ViewModel Implementation for SpanCount Binding (C#)\nDESCRIPTION: This C# code defines a ViewModel class that implements property changed notification for the SpanCountValue property. It also includes an ObservableCollection of Item objects used as the ItemsSource for the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-gridlayout-spancount-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private int span = 3;\n    public ViewModel()\n    {\n        this.Items = new ObservableCollection<Item>();\n        for (int i = 0; i < 40; i++)\n        {\n            var c = 200 - 10 * i;\n            this.Items.Add(new Item() { Name = \"Item \" + i, });\n        }\n    }\n    public int SpanCountValue\n    {\n        get => this.span;\n        set\n        {\n            if(this.span != value)\n            {\n                this.span = value;\n                OnPropertyChanged();\n            }  \n        }\n    }\n    public ObservableCollection<Item> Items { get; set; }\n}\npublic class Item\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OutsideBackgroundColor for .NET MAUI Popup\nDESCRIPTION: Sets the overlay color for a modal popup using the OutsideBackgroundColor property. This example uses a semi-transparent black color with 50% opacity to indicate that the underlying UI cannot be interacted with.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<telerik:RadPopup x:Name=\"popup\"\n             OutsideBackgroundColor=\"#80000000\"\n             IsModal=\"True\"\n             Placement=\"Center\"\n             ContentSizingMode=\"None\">\n    <telerik:RadPopup.Content>\n        <VerticalStackLayout WidthRequest=\"300\" BackgroundColor=\"White\">\n            <Label Text=\"This is a Modal Popup\" Margin=\"10\" FontSize=\"14\" FontAttributes=\"Bold\"/>\n            <Button Text=\"Close\" Clicked=\"OnClose\" HorizontalOptions=\"Center\" Margin=\"10\"/>\n        </VerticalStackLayout>\n    </telerik:RadPopup.Content>\n</telerik:RadPopup>\n```\n\n----------------------------------------\n\nTITLE: Adding CollectionView and BusyIndicator in XAML - XAML\nDESCRIPTION: This code snippet shows how to add the CollectionView and BusyIndicator controls into the XAML view of the .NET MAUI application. It connects the UI to the ViewModel for data binding and visual feedback while loading data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/integration.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"MyApp.MainPage\">\n    <StackLayout>\n        <BusyIndicator IsBusy=\"{Binding IsLoading}\">\n            <CollectionView ItemsSource=\"{Binding Books}\">\n                <CollectionView.ItemTemplate>\n                    <DataTemplate>\n                        <Label Text=\"{Binding Title}\" />\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n        </BusyIndicator>\n    </StackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Setting SuggestionView Position in AutoComplete\nDESCRIPTION: Shows how to explicitly define the position of the suggestions popup relative to the input field in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete SuggestionViewPosition=\"Top\" />\n```\n\n----------------------------------------\n\nTITLE: CellTap Command Implementation\nDESCRIPTION: Creates a custom DataGridCommand class to handle cell tap events with CanExecute and Execute methods.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/commands/cell-tap.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-commands-celltap'/>\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel as BindingContext for DataGrid Page in C#\nDESCRIPTION: This C# code snippet shows how to set the ViewModel as the BindingContext of the page containing the DataGrid. This connects the data to the UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/property-group-descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-propertygroupdescriptor-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for SignaturePad\nDESCRIPTION: XML namespace declaration for Telerik input controls in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/events.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model Class in C#\nDESCRIPTION: Creates an Experience class to represent individual data items with Title and Company properties\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/itemscontrol/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Experience\n{\n\tpublic string Title { get; set; }\n\tpublic string Company { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DataForm Control in XAML\nDESCRIPTION: XAML code for defining a DataForm control. The DataForm will automatically generate editors based on the properties of the bound model.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/data-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<dataForm:RadDataForm x:Name=\"dataForm\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Barcode Symbology in XAML\nDESCRIPTION: Demonstrates how to set the symbology for a Telerik Barcode control, specifically using Code39 as an example\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/value-and-symbology.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='barcode-features-symbology'/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Grouping for Specific Column\nDESCRIPTION: Shows how to disable grouping for a specific column by setting the CanUserGroup property to False. This prevents the individual column from being used in drag and drop grouping.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/grouping-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"dataGrid\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Country\" CanUserGroup=\"False\"/>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Enabling Infinite Looping in .NET MAUI SlideView\nDESCRIPTION: The HasLooping property enables infinite looping of views in the SlideView control. When set to True, users can continue navigating past the last view to return to the first view.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/inifinite-looping.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nHasLooping=\"False\"\n```\n\n----------------------------------------\n\nTITLE: TreeView City Data Model\nDESCRIPTION: Defines the city data model class used for TreeView item hierarchy.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-city-model'/>\n```\n\n----------------------------------------\n\nTITLE: ViewModel implementation for DataGrid\nDESCRIPTION: This C# snippet implements a ViewModel that creates and manages an ObservableCollection of Club objects for the DataGrid. It initializes the collection with sample data for use in data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-celledittemplate-picker-combobox.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    private ObservableCollection<Club> clubs;\n    public ObservableCollection<Club> Clubs => clubs ?? (clubs = CreateClubs());\n    private ObservableCollection<Club> CreateClubs()\n    {\n        return new ObservableCollection<Club>\n        {\n            new Club(\"Text 1\", new TimeSpan(3, 28, 33)),\n            new Club(\"Text 2\", new TimeSpan(2, 56, 44)),\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Culture Info in Android MainActivity\nDESCRIPTION: Implementation for Android platform that overrides device culture settings by modifying the MainActivity class. Sets both CurrentCulture and CurrentUICulture to specified culture info.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/set-cultureinfo-on-app-level-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle? savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        this.SetLocale();\n\n    }\n    void SetLocale()\n    {\n\n        CultureInfo ci = new CultureInfo(\"en-US\");\n\n        Thread.CurrentThread.CurrentCulture = ci;\n        Thread.CurrentThread.CurrentUICulture = ci;\n\n        Console.WriteLine(\"CurrentCulture set: \" + ci.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for HeaderTextFormat Property\nDESCRIPTION: This C# code snippet creates a ViewModel with a property named 'MyProperty'. The value of this property is set in the constructor and can be used to customize the HeaderTextFormat of the RadScheduler. The ViewModel is set as the BindingContext for the MainPage.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-week-number-scheduler-header-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"public partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        InitializeComponent();\n        this.BindingContext = new ViewModel();\n    }\n}\n\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        // Customize the HeaderTextFormat here\n        this.MyProperty = \\\"My property for header text format\\\";\n    }\n\n    public string MyProperty { get; set; }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik NuGet Source in NuGet.Config XML\nDESCRIPTION: This XML snippet shows how to add the Telerik feed to the nuget.config file and set up the package source credentials using a NuGet API key. It includes the necessary configuration for both the package source and the credentials.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/nuget-config.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <packageSources>\n        <clear/>\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n        <add key=\"MyTelerikFeed\" value=\"https://nuget.telerik.com/v3/index.json\" protocolVersion=\"3\"/>\n    </packageSources>\n    <packageSourceCredentials>\n        <MyTelerikFeed>\n        <add key=\"Username\" value=\"api-key\" />\n        <add key=\"ClearTextPassword\" value=\"%MY_API_KEY%\" />\n        </MyTelerikFeed>\n    </packageSourceCredentials>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration for Telerik UI in .NET MAUI - XAML\nDESCRIPTION: This snippet provides the necessary namespace declaration to use Telerik UI components in a .NET MAUI application. It is essential to include this namespace to access all Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/default-time.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for RadDataForm in C#\nDESCRIPTION: This snippet defines the DataTypeEditorsModel class used as the BindingContext for the RadDataForm. It includes properties for FirstName, LastName, Age, and BirthDate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/groups-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataTypeEditorsModel : NotifyPropertyChangedBase\n{\n    private string firstName;\n    private string lastName;\n    private int age;\n    private DateTime birthDate;\n\n    public string FirstName\n    {\n        get { return this.firstName; }\n        set { this.UpdateValue(ref this.firstName, value); }\n    }\n\n    public string LastName\n    {\n        get { return this.lastName; }\n        set { this.UpdateValue(ref this.lastName, value); }\n    }\n\n    public int Age\n    {\n        get { return this.age; }\n        set { this.UpdateValue(ref this.age, value); }\n    }\n\n    public DateTime BirthDate\n    {\n        get { return this.birthDate; }\n        set { this.UpdateValue(ref this.birthDate, value); }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Person Objects for .NET MAUI DataGrid\nDESCRIPTION: Defines a ViewModel class with a collection of Person objects to be used as the ItemsSource for the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n\tpublic ViewModel()\n\t{\n\t\tthis.People = new ObservableCollection<Person>()\n\t\t{\n\t\t\tnew Person { Name = \"Kiko\", Age = 23, Department = \"Production\" },\n\t\t\tnew Person { Name = \"Jerry\", Age = 23, Department = \"Accounting and Finance\"},\n\t\t\tnew Person { Name = \"Ethan\", Age = 51, Department = \"Marketing\" },\n\t\t\tnew Person { Name = \"Isabella\", Age = 25, Department = \"Marketing\" },\n\t\t\tnew Person { Name = \"Joshua\", Age = 45, Department = \"Production\" },\n\t\t\tnew Person { Name = \"Logan\", Age = 26, Department = \"Production\"},\n\t\t\tnew Person { Name = \"Aaron\", Age = 32, Department = \"Production\" },\n\t\t\tnew Person { Name = \"Elena\", Age = 37, Department = \"Accounting and Finance\"},\n\t\t\tnew Person { Name = \"Ross\", Age = 30, Department = \"Marketing\" },\n\t\t};\n\t}\n\n\tpublic ObservableCollection<Person> People { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI DataGrid Namespace Declaration\nDESCRIPTION: XAML and C# namespace declarations for .NET MAUI DataGrid implementation\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Setting DelegateGroupDescriptor in C#\nDESCRIPTION: This snippet shows how to create and apply a delegate for grouping the items in the RadListView, for example, by their first letter.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='listview-grouping-delegategroupdescriptor-settingdelegate' />\n```\n\n----------------------------------------\n\nTITLE: Adding TimeSpanPicker in C#\nDESCRIPTION: This C# snippet demonstrates how to create a RadTimeSpanPicker instance programmatically in a .NET MAUI application. No additional parameters are required.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar timeSpanPicker = new RadTimeSpanPicker();\n```\n\n----------------------------------------\n\nTITLE: Updating C# Namespace for TemplatedPicker\nDESCRIPTION: This code snippet illustrates the necessary change in the C# namespace import when migrating the Telerik TemplatedPicker from Xamarin.Forms to .NET MAUI. The original namespace `Telerik.XamarinForms.Input` should be replaced with `Telerik.Maui.Controls`. This ensures that the correct .NET MAUI version of the TemplatedPicker control is referenced in the C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.XamarinForms.Input;\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for NavigationView\nDESCRIPTION: Declares the Telerik XAML namespace required for using NavigationView controls in a .NET MAUI application\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to ListView\nDESCRIPTION: Shows how to add a custom command to the RadListView Commands collection.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nthis.listView.Commands.Add(new CustomItemTapCommand());\n```\n\n----------------------------------------\n\nTITLE: Declaring a ScatterSpline Series in XAML\nDESCRIPTION: This code snippet demonstrates how to declare a RadCartesianChart that includes a ScatterSpline Series in XAML. This approach allows for a more visual layout when integrating the chart into a user interface.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/series/cartesian/scatter-spline-series.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<snippet id='chart-series-scatterspline-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting Source and DataSource for MapShapeReader\nDESCRIPTION: This snippet covers how to set the Source and DataSource properties of the MapShapeReader to point to .shp and .dbf files, respectively. These files determine the geographic data that will be read and displayed on the map.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/labelstyles.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<MapShapeReader Source=\"YourMapFile.shp\" DataSource=\"YourDataFile.dbf\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ShowSuggestions Method in Focused Event Handler\nDESCRIPTION: This snippet demonstrates how to call the ShowSuggestions method inside the Focused event handler to display all items when the AutoComplete control receives focus.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/methods.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-showsuggestions'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeView Scrolling Settings\nDESCRIPTION: Demonstrates basic TreeView configuration with horizontal and vertical scrolling settings including scroll orientation and scrollbar visibility.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='treeview-scrolling'/>\n```\n\n----------------------------------------\n\nTITLE: Calendar Month Styling - Custom Style Selector Class\nDESCRIPTION: This code defines a custom style selector class that inherits from CalendarStyleSelector. This allows you to implement custom logic for selecting the style to apply to each month based on its properties or other factors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/month-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-styleselectors-custom-calendarstyleselector'/>\n```\n\n----------------------------------------\n\nTITLE: Declaring the ViewModel for Calendar\nDESCRIPTION: This snippet demonstrates the setup of a ViewModel to manage selected dates within the .NET MAUI Calendar.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='calendar-selection-viewmodel'/>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Controls in MauiProgram.cs\nDESCRIPTION: Registers the Telerik controls using the UseTelerik extension method in the MauiProgram.cs file. This is a necessary step to enable Telerik controls compatibility within the .NET MAUI project. The method configures font settings and integrates Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseTelerik()\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\\\"OpenSans-Regular.ttf\\\", \\\"OpenSansRegular\\\");\n            });\n\n        return builder.Build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ListPicker Accept Button Style\nDESCRIPTION: Defines styling for the Accept button in the ListPicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-accept-button-style' />\n```\n\n----------------------------------------\n\nTITLE: Adding PdfProcessing Namespace in C#\nDESCRIPTION: This line adds the necessary namespace for accessing font-related classes from the Telerik RadPdfProcessing library.  Specifically, it enables the use of the `FontFamily`, `FontStyle` and `FontWeight` classes.  Without this namespace, the compiler would not recognize these types.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Documents.Core.Fonts;\n```\n\n----------------------------------------\n\nTITLE: Registering Fonts in MauiProgram.cs for .NET MAUI\nDESCRIPTION: This code snippet demonstrates how to register custom fonts in the MauiProgram.cs file of a .NET MAUI application. It uses the ConfigureFonts method to add font files and assign them friendly names for use in the app.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/troubleshooting-missing-fonts-unpackaged-deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"font1.ttf\", \"Font1\");\n    fonts.AddFont(\"font2.ttf\", \"Font2\");\n    // Add more font files if necessary\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data for DataPager\nDESCRIPTION: This snippet outlines the manner in which you can define sample data to be used with the DataPager. This data will populate the navigation elements and ensure that the control functions as intended.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/styling/buttons.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<DataPager.ItemsSource>\n    <x:Array Type=\"x:String\">\n        <x:String>Item 1</x:String>\n        <x:String>Item 2</x:String>\n        <x:String>Item 3</x:String>\n    </x:Array>\n</DataPager.ItemsSource>\n```\n\n----------------------------------------\n\nTITLE: Error Message for Managed Vtable Types Exception in .NET MAUI SkiaSharp Controls\nDESCRIPTION: The error message displayed when encountering the NotSupportedException with Telerik MAUI SkiaSharp controls on Windows. This exception is triggered when using controls like DataGrid, BusyIndicator, or Gauge after updating Visual Studio or when using specific Windows SDK versions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-managed-vtable-types-notsupportedexception.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.NotSupportedException: Managed vtable types (ie. containing any reference types) are not supported.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Track Style for RangeSlider in .NET MAUI\nDESCRIPTION: Defines a custom style for the back track of a RangeSlider with a TargetType of RadBorder. The style sets the CornerRadius to 4 and BorderThickness to 0.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/styling/track-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"CustomTrackStyle\" TargetType=\"RadBorder\">\n    <Setter Property=\"CornerRadius\" Value=\"4\" />\n    <Setter Property=\"BorderThickness\" Value=\"0\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI BusyIndicator Namespace\nDESCRIPTION: This snippet shows the XAML namespace and C# namespace for the RadBusyIndicator control in .NET MAUI. It highlights how to reference the control in XAML and import the necessary namespace in C# code after migrating to .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/busyindicator/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik Components - XAML\nDESCRIPTION: This code snippet shows how to include the required namespace for the Telerik UI components in a XAML file. This is necessary for utilizing the RadTimeSpanPicker and other Telerik controls within the .NET MAUI framework.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timespan-range.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying TabViewStyle to RadAIPrompt Control\nDESCRIPTION: Shows how to apply the custom TabViewStyle to the RadAIPrompt control to modify its visual appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/tabview-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-tabviewstyling-xaml'/>\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel - C#\nDESCRIPTION: This snippet shows how to define a sample ViewModel for use with the TemplatedPicker, focusing on data binding and context.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new LocationViewModel();\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Label Template Configuration\nDESCRIPTION: XAML configuration for Windows platform-specific PieChart label template with custom styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-pieseries-customization.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<maui:MauiWinUIApplication\n    x:Class=\"ShellApp.WinUI.App\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:maui=\"using:Microsoft.Maui\"\n    xmlns:local=\"using:ShellApp.WinUI\">\n    <maui:MauiWinUIApplication.Resources>\n        <ResourceDictionary>\n            <DataTemplate x:Key=\"PieLabelTemplate\">\n                <Grid Background=\"Red\">\n                    <TextBlock Text=\"{Binding DataItem.Value}\"\n                               Foreground=\"White\"\n                               FontWeight=\"Bold\"\n                               FontSize=\"10\"\n                               Margin=\"5\" />\n                </Grid>\n            </DataTemplate>\n        </ResourceDictionary>\n    </maui:MauiWinUIApplication.Resources>\n</maui:MauiWinUIApplication>\n```\n\n----------------------------------------\n\nTITLE: Xamarin ListView Namespace Configuration\nDESCRIPTION: Namespace declarations for Telerik UI ListView in Xamarin project, specifying data controls and list view components\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikDataControls=\"clr-namespace:Telerik.XamarinForms.DataControls;assembly=Telerik.XamarinForms.DataControls\"\nxmlns:telerikListView=\"clr-namespace:Telerik.XamarinForms.DataControls.ListView;assembly=Telerik.XamarinForms.DataControls\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Shows how to add the Telerik namespace to the XAML file for using CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/data-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tick Template DataTemplate for RangeSlider\nDESCRIPTION: This snippet shows how to define a custom DataTemplate for RangeSlider ticks, creating a custom appearance that includes both a rectangle and a label with the tick value.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/ticks.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"TickTemplate\">\n    <Grid HeightRequest=\"40\">\n        <Rectangle Fill=\"Green\"\n                   WidthRequest=\"2\"\n                   HeightRequest=\"10\"\n                   HorizontalOptions=\"Center\" />\n        <Label Text=\"{Binding Value}\"\n               VerticalOptions=\"End\"\n               HorizontalOptions=\"Center\"\n               FontSize=\"13\" />\n    </Grid>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Update C# Namespace for .NET MAUI Chat\nDESCRIPTION: This snippet demonstrates how to update the C# namespace when migrating from Xamarin.Forms Chat to .NET MAUI Chat. The old namespace `Telerik.XamarinForms.ConversationalUI` is replaced with `Telerik.Maui.Controls`. This is crucial for resolving references to the Telerik Chat control and related classes in your C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chat/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Loading Images from URI in XAML\nDESCRIPTION: Demonstrates how to load an image from a URL into the ImageEditor control using XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/loading-image.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadImageEditor x:Name=\"imageEditor\" \n                        Source=\"https://raw.githubusercontent.com/telerik/maui-samples/main/Samples/ControlsSamples/Resources/Images/borderconfigurationavatar.png\" />\n```\n\n----------------------------------------\n\nTITLE: Calendar Month Styling - Style Selector Definition\nDESCRIPTION: This snippet defines the style selectors that are used to style the months.  These styles can customize properties such as background color and text color.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/month-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-styleselectors-monthstyleselector-definition'/>\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel for AIPrompt Views in C#\nDESCRIPTION: The C# ViewModel implementation that supports the AIPrompt views. This class likely contains the InputText property and PromptRequestCommand that are referenced by the AIPromptInputView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/views/input-view.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='aiprompt-views-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Hot Restart Error Message for iPhone Deployment\nDESCRIPTION: Error message that appears when attempting to deploy to an iPhone device using Hot Restart feature from Visual Studio for Windows. The error occurs due to Hot Restart's limitation with static libraries used by some Telerik .NET MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/telerik-maui-hot-restart.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNSForwarding: warning: does not implement methodSignatureForSelector:\\n\\nNSForwarding: warning: does not implement doesNotRecognizeSelector:\n```\n\n----------------------------------------\n\nTITLE: Video Schema Metadata for .NET MAUI Upgrade Tutorial\nDESCRIPTION: JSON-LD structured data defining metadata for a YouTube video about upgrading Xamarin Forms apps to .NET MAUI. Includes video details like title, description, duration, thumbnails and URLs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/migrate-to-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"@context\": \"https://schema.org\", \n  \"@type\": \"VideoObject\", \n  \"name\": \"Upgrading your Xamarin Forms App to .NET MAUI | DevReach 2023\", \n  \"description\": \"One of the questions the .NET MAUI team has heard the most is What do I have to do to my Xamarin app to upgrade? Good news - it's a really straightforward process! Join Maddy Montaquila, .NET MAUI PM, as she demystifies the upgrade process and shows you the tools you can use to upgrade your app so you can leverage the magic of MAUI in no time!\", \n  \"thumbnailUrl\": \"https://img.youtube.com/vi/-AeFIjW0Jgc/maxresdefault.jpg\", \n  \"uploadDate\": \"2023-11-22\", \n  \"duration\": \"PT52M22S\", \n  \"contentUrl\": \"https://youtu.be/-AeFIjW0Jgc\", \n  \"embedUrl\": \"https://www.youtube.com/embed/-AeFIjW0Jgc\" \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Localization Manager in .NET MAUI\nDESCRIPTION: Creates a custom localization manager by inheriting from TelerikLocalizationManager and overriding GetString() method to provide German translations for MaskedEntry control messages.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/globalization-localization.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomTelerikLocalizationManager : TelerikLocalizationManager\n{\n    public override string GetString(string key)\n    {\n        if (key == \"EmailMaskedEntry_InvalidMessage\")\n        {\n            return \"Email ist ungültig\";\n        }\n\n        if (key == \"RegexMaskedEntry_InvalidMessage\")\n        {\n            return \"Eingabe stimmt nicht mit der Regex überein\";\n        }\n\n        if (key == \"TextMaskedEntry_IncompleteMessage\")\n        {\n            return \"Maske ist unvollständig\";\n        }\n\n        return base.GetString(key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Business Objects and Nested Properties - C#\nDESCRIPTION: This snippet defines the 'Person' class which includes a nested 'Address' object, enabling the use of complex structures within the DataGrid. Dependencies include the 'NotifyPropertyChangedBase' class for property change notifications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/nested-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person : NotifyPropertyChangedBase {\n    public string Name { get; set; }\n    public Address HomeAddress { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Style Resource for SlideViewIndicatorItem\nDESCRIPTION: This snippet demonstrates defining a style for individual SlideViewIndicatorItems within XAML. It allows for granular customization of each indicator element. Required context would be having a SlideView and a SlideViewIndicator to apply this style to individual indicator items effectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/styling/indicator-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"slideview-indicator-item-custom-template\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DropDownViewStyle\nDESCRIPTION: This snippet is a placeholder for XAML code defining the `DropDownViewStyle`. It sets the visual appearance of the dropdown view of the TemplatedPicker, likely including properties for background, border, and other visual characteristics. The style targets the `telerikInput:PickerDropDownContentView` type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/dropdown-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dropDownViewStyle' />\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Namespace in C#\nDESCRIPTION: Required namespace for using RadExpander in C# code. This allows access to the Telerik.Maui.Controls library which contains the RadExpander control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/expander/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI ListView XAML Definition\nDESCRIPTION: Updated ListView implementation for .NET MAUI with simplified namespace references and consistent structure\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView x:Name=\"listView\" ItemsSource=\"{Binding Source}\">\n    <telerik:RadListView.ItemTemplate>\n        <DataTemplate>\n            <telerik:ListViewTemplateCell>\n                <telerik:ListViewTemplateCell.View>\n                    <Grid>\n                        <Label Margin=\"10\" Text=\"{Binding Name}\" />\n                    </Grid>\n                </telerik:ListViewTemplateCell.View>\n            </telerik:ListViewTemplateCell>\n        </DataTemplate>\n    </telerik:RadListView.ItemTemplate>\n</telerik:RadListView>\n```\n\n----------------------------------------\n\nTITLE: Creating Category Model for ComboBox Items in .NET MAUI\nDESCRIPTION: Defines a simple Category class with Id and Name properties to represent items in the ComboBox collection. Used for displaying and identifying items in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-combobox-column-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Category\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying String Converter to Slider - C#\nDESCRIPTION: This snippet demonstrates how to apply the custom string converter to a Slider instance to enhance label readability.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/labels.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nslider.StringConverter = new CustomStringConverter();\n```\n\n----------------------------------------\n\nTITLE: Font Converter Resource\nDESCRIPTION: Defines the font converter in the page's resources. This allows the converter to be used within the XAML markup for data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-fontconverter-resource'/>\n```\n\n----------------------------------------\n\nTITLE: Creating TemplatedButton with Custom Content in .NET MAUI\nDESCRIPTION: Implements a RadTemplatedButton with custom content including a Grid layout containing a BusyIndicator and Label, demonstrating the control's content templating capabilities.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/_contentTemplates/get-started.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:RadTemplatedButton x:Name=\"templatedButton\">\n\t<telerik:RadTemplatedButton.Content>\n\t\t<Grid ColumnDefinitions=\"Auto, *\" HorizontalOptions=\"Center\">\n\t\t\t<telerik:RadBusyIndicator x:Name=\"busy\"\n\t\t\t\t\t\t\tAnimationContentHeightRequest=\"16\"\n\t\t\t\t\t\t\tAnimationContentColor=\"#80CBC4\"\n\t\t\t\t\t\t\tAnimationContentWidthRequest=\"16\"\n\t\t\t\t\t\t\tAnimationType=\"Animation4\"\n\t\t\t\t\t\t\tIsVisible=\"{Binding IsBusy,Source={x:Reference busy}}\"\n\t\t\t\t\t\t\tMargin=\"0, 0, 10, 0\" />\n\t\t\t<Label x:Name=\"loadingLabel\" \n\t\tGrid.Column=\"1\"\n\t\tTextColor=\"{Binding Source={RelativeSource AncestorType={x:Type telerik:RadTemplatedButton}}, Path=TextColor}\" \n\t\tText=\"Load Content\" />\n\t\t</Grid>\n\t</telerik:RadTemplatedButton.Content>\n</telerik:RadTemplatedButton>\n```\n\n----------------------------------------\n\nTITLE: Importing Xamarin.Forms RichTextEditor Namespace in C#\nDESCRIPTION: Demonstrates how to import the Xamarin.Forms RichTextEditor namespace in C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/migrate-from-xamarin.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.RichTextEditor;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pie Series Label Renderer for Android in C#\nDESCRIPTION: This C# class implements a custom PieSeriesLabelRenderer for Android. It allows customization of label appearance, including text color and background.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/piechart-label-customization.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing Android.Graphics;\nusing Android.Runtime;\nusing Com.Telerik.Widget.Chart.Engine.ElementTree;\nusing Com.Telerik.Widget.Chart.Visualization.PieChart;\nusing Color = Android.Graphics.Color;\nusing Paint = Android.Graphics.Paint;\nusing Path = Android.Graphics.Path;\n\nnamespace MauiApp1.Platforms.Android\n{\n    class CustomPieSeriesLabelRenderer : PieSeriesLabelRenderer\n    {\n        private readonly Paint strokePaint = new Paint();\n\n        protected CustomPieSeriesLabelRenderer(IntPtr javaReference, JniHandleOwnership transfer)\n            : base(javaReference, transfer)\n\n        {\n        }\n\n        public CustomPieSeriesLabelRenderer(Com.Telerik.Widget.Chart.Visualization.PieChart.PieSeries p0)\n            : base(p0)\n        {\n        }\n\n\n        public override void RenderLabel(Canvas canvas, ChartNode node)\n        {\n            this.strokePaint.Color = Color.Transparent;\n            LabelStrokePaint = strokePaint;\n            this.LabelTextColor = Color.Black;\n            base.RenderLabel(canvas, node);\n        }\n\n        protected override void DrawLabelText(Canvas canvas, string text, float p2, float p3)\n        {\n            base.DrawLabelText(canvas, text, p2, p3);\n        }\n\n        protected override void DrawLabelBackground(Canvas canvas, Path path, int p2)\n        {\n            base.DrawLabelBackground(canvas, path, p2);\n        }\n\n        protected override Paint GetLabelFillPaint(int p0)\n        {\n            return base.GetLabelFillPaint(p0);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationSummaryStyle in XAML\nDESCRIPTION: This snippet shows how to define a custom style for the validation summary view in XAML. It sets properties like background color, corner radius, and margin.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/validation-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"ValidationSummaryStyle\" TargetType=\"telerik:DataFormValidationSummaryView\">\n    <Setter Property=\"BackgroundColor\" Value=\"#FFF6D9\" />\n    <Setter Property=\"CornerRadius\" Value=\"8\" />\n    <Setter Property=\"Margin\" Value=\"16\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Defining DataModel Class for CollectionView Items\nDESCRIPTION: This C# code defines a sample DataModel class used for the items in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/events.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataModel\n{\n    public string Name { get; set; }\n    public string Context { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpinnerHeader Style\nDESCRIPTION: This snippet provides details on how to set the header style for the spinner in the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker SpinnerHeaderStyle=\"{StaticResource SpinnerHeaderStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation in ListViewLinearLayout\nDESCRIPTION: XAML code that demonstrates how to set the Orientation property to Horizontal for a LinearLayout definition in RadListView, changing from the default vertical orientation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-horizontal-orientation--gridlayout.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LayoutDefinition>\n\t<telerik:ListViewLinearLayout Orientation=\"Horizontal\"/>\n</telerik:RadListView.LayoutDefinition>\n```\n\n----------------------------------------\n\nTITLE: Setting PickerMode to Popup in TimeSpanPicker - XAML\nDESCRIPTION: This snippet shows how to set the PickerMode of the RadTimeSpanPicker to Popup, which displays the time selection UI inside a popup.  The Time property is also initialized. The PickerMode property controls how the time selection interface is presented to the user.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/picker-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\"\n                                PickerMode=\"Popup\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Clear Button Visibility in AutoComplete\nDESCRIPTION: Shows how to control the visibility of the clear button that appears on the right side of the input field in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete IsClearButtonVisible=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Clear Button - .NET MAUI\nDESCRIPTION: This snippet illustrates how to enable a clear button on the RadTimeSpanPicker control to allow users to remove the selected time value easily. Setting the 'IsClearButtonVisible' property to true will display the button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker Time=\"5:10:30:00\" IsClearButtonVisible=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Club Model Class for .NET MAUI DataGrid in C#\nDESCRIPTION: This C# code defines the Club model class used in the DataGrid examples. It includes properties for Name, DateEstablished, and IsChampion.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/cell-templates.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Club\n{\n    public string Name { get; set; }\n    public DateTime DateEstablished { get; set; }\n    public bool IsChampion { get; set; }\n\n    public Club(string name, DateTime dateEstablished, bool isChampion)\n    {\n        this.Name = name;\n        this.DateEstablished = dateEstablished;\n        this.IsChampion = isChampion;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create LevelToMargin Converter (C#)\nDESCRIPTION: This snippet defines a `LevelToMarginConverter` that calculates the margin of each group header based on its level in the hierarchy. The converter helps visually represent the multi-level grouping structure by indenting group headers according to their depth.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/multilevel-grouping.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n \n```\n\n----------------------------------------\n\nTITLE: Adding Telerik namespace in XAML - .NET MAUI XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace required for accessing Telerik controls in a .NET MAUI application. It's necessary for utilizing the GridSplitter control along with its properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Range in .NET MAUI ProgressBar\nDESCRIPTION: Shows how to set minimum and maximum values for the ProgressBar range.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/progressbar/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<snippet id='progressbar-configuration-minmax'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: Demonstrates how to include the Telerik namespace in the XAML file to use Telerik controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/linear-layout.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Comparing XAML Namespaces for TimeSpanPicker in Xamarin vs .NET MAUI\nDESCRIPTION: Shows the difference between the XAML namespace declarations required for the TimeSpanPicker control in Xamarin.Forms versus .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikInput=\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\"\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring QRCode Binding in .NET MAUI XAML\nDESCRIPTION: This XAML snippet demonstrates how to configure the RadBarcode to bind its Value property to a view model property called SelectedCity. The code sets visual properties and provides additional configuration for QR code generation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/data-binding-qrcode-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadBarcode WidthRequest=\"160\" HeightRequest=\"160\"\n                    HorizontalOptions=\"Center\" VerticalOptions=\"Center\"\n                    Margin=\"0, 10, 0, 0\" Value=\"{Binding SelectedCity}\">\n    <telerik:RadBarcode.Symbology>\n        <telerik:QRCode SizingMode=\"Stretch\" CodeMode=\"Byte\"\n                        ErrorCorrectionLevel=\"H\" ECIMode=\"ISO8859_1\"\n                        FNC1Mode=\"SecondPosition\" ApplicationIndicator=\"00\"/>\n    </telerik:RadBarcode.Symbology>\n</telerik:RadBarcode>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace for Telerik Controls\nDESCRIPTION: This XAML namespace declaration is required to use Telerik UI for .NET MAUI controls, including the RadSideDrawer. It maps the 'telerik' prefix to the specified XML namespace, enabling the use of Telerik controls in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/transitions.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \n```\n\n----------------------------------------\n\nTITLE: ListPicker Style Implementation\nDESCRIPTION: Demonstrates basic style definition for ListPicker control marked with snippet id 'listpicker-style'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style' />\n```\n\n----------------------------------------\n\nTITLE: CityFilterControl Code Behind\nDESCRIPTION: This snippet provides the C# code behind for the custom CityFilterControl class, which extends DataGridFilterControlBase. This implementation is necessary for defining the behavior of the custom filter control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/filter-control-template.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Code for CityFilterControl\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Clear Button for ComboBox in XAML\nDESCRIPTION: Shows how to hide the clear button in the ComboBox control by setting the IsClearButtonVisible property to false.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox IsClearButtonVisible=\"False\" />\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButtonStyle for TemplatedPicker\nDESCRIPTION: This snippet illustrates how to define the style for the accept button in the TemplatedPicker popup using XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedpicker-acceptbuttonstyle' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Display Options in XAML\nDESCRIPTION: This snippet demonstrates how to combine text and image options for header display in the DataForm control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/headers.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nHeaderDisplayOptions=\"Image, Text\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadOnDemandCollection in ViewModel\nDESCRIPTION: Demonstrates how to create a ViewModel with a ListViewLoadOnDemandCollection to manage incremental data loading in a ListView. This approach provides an efficient way to load data on demand with minimal code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/load-on-demand.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic ObservableCollection<string> Source { get; set; }\n\npublic ViewModel()\n{\n    Source = new ListViewLoadOnDemandCollection(LoadMoreItems);\n}\n\nprivate IEnumerable<string> LoadMoreItems()\n{\n    // Logic to load more items\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Padding in .NET MAUI BadgeView using XAML\nDESCRIPTION: This snippet shows how to set the Padding property on a Telerik RadBadgeView to adjust its inner margin. The property uses Microsoft.Maui.Controls.Compatibility for defining padding values.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadBadgeView BadgeText=\\\"Add\\\" Padding=\\\"30\\\">\\n     <telerik:RadBadgeView.Content>\\n     <!-- add your content here -->\\n     </telerik:RadBadgeView.Content>\\n</telerik:RadBadgeView>\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueChanged Event Handler in C#\nDESCRIPTION: This C# snippet provides an implementation for the ValueChanged event handler, receiving sender and event arguments to process changes in input value. Telerik.Maui.Controls must be referenced for ValueChangedEventArgs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadNumericInput_ValueChanged(object sender, Telerik.Maui.Controls.ValueChangedEventArgs<double?> e)\n{\n   // implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SpinnerFormat to 'yyyy/dd/MMM' in .NET MAUI DatePicker - XAML\nDESCRIPTION: This snippet shows how to set a custom spinner format in the RadDatePicker control to 'yyyy/dd/MMM', which presents the year, day, and abbreviated month in a specific order.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/formatting.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker SpinnerFormat=\"yyyy/dd/MMM\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Annotations in .NET MAUI DataForm Model\nDESCRIPTION: Example business model showcasing the implementation of various Data Annotations including Required, DataType, Display, and RegularExpression attributes in a .NET MAUI DataForm. This demonstrates how to apply validation and formatting rules to model properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/data-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='dataform-datatype-editors-model'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Font Icon to Label in XAML\nDESCRIPTION: This snippet demonstrates how to add a Telerik font icon to a Label control using XAML. It sets the Text property to the Unicode value of the icon and specifies the FontFamily.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/examples-icons.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"&#xe800;\" FontFamily=\"TelerikFontExamples\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Telerik Font Icons in .NET MAUI XAML\nDESCRIPTION: To use a Telerik font icon in your .NET MAUI XAML, you can reference the icon using its XAML value. For example, to use the 'sort descent' icon, you would use &#xe800; in your XAML code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/examples-icons.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Label Text=\"&#xe800;\" FontFamily=\"{StaticResource TelerikFontFamily}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Date in XAML\nDESCRIPTION: This code snippet shows how to define a DatePicker control in XAML and set its initial `Date` property. The `SpinnerFormat` property is also set to specify the date format displayed in the spinner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker Date=\"2020,05,15\"\n                            SpinnerFormat=\"yyy-MMM\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Person Data Model for CollectionView\nDESCRIPTION: Defines a Person data model class that can be used with CollectionView's load on demand feature. This model is referenced in both the automatic and manual template examples.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='person-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Xamarin MaskedInput Namespace Migration (XAML)\nDESCRIPTION: This snippet shows the Xamarin.Forms XAML namespace declaration for the RadMaskedInput control. It specifies the XML namespace alias `telerikInput` and the corresponding CLR namespace and assembly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/migrate-from-xamarin.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"xmlns:telerikInput=\\\"clr-namespace:Telerik.XamarinForms.Input;assembly=Telerik.XamarinForms.Input\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to include the Telerik namespace in your XAML file, which is necessary to use Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Dialog Methods in XAML\nDESCRIPTION: XAML snippet demonstrating RadScheduler instance with buttons for managing appointment dialogs\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/built-in-dialogs.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='scheduler-dialogs-methods-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Key for .NET MAUI CollectionView\nDESCRIPTION: This markdown table defines the localization key and its default value for the CollectionView component in Telerik UI for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Localization Key | Default Value |\n| -----------------| ------------- |\n| `CollectionView_ManualLoadOnDemandText` | `Load More` |\n```\n\n----------------------------------------\n\nTITLE: Updating C# Namespace for DateTimePicker\nDESCRIPTION: This snippet shows how to update the C# namespace for the DateTimePicker when migrating from Xamarin.Forms to .NET MAUI. The `Telerik.XamarinForms.Input` namespace in Xamarin is replaced by `Telerik.Maui.Controls` in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.XamarinForms.Input;\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Setting LoadOnDemandRowStyle Property (XAML)\nDESCRIPTION: This snippet shows how to set the `LoadOnDemandRowStyle` property of the DataGrid to apply the custom style defined earlier. This style will be applied to the row containing the 'Load More' button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/load-on-demand.md#2025-04-21_snippet_6\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid LoadOnDemandRowStyle=\"{StaticResource LoadOnDemandRowStyle}\"/>\n```\n\n----------------------------------------\n\nTITLE: MaskedEntry ControlTemplate with Hidden Border for .NET MAUI\nDESCRIPTION: A customized ControlTemplate that hides both the normal and focused borders of the RadMaskedEntry control by setting transparent brush colors and zero thickness for the borders.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-border-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"MyMaskedEntry_ControlTemplate\">\n    <telerik:RadEntry AutomationId=\"MaskedEntryView\"\n                        IsValueValid=\"{Binding IsValueValid, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ValidationErrorMessage=\"{Binding ActualValidationErrorMessage, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        IsReadOnly=\"{Binding IsReadOnly, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        IsEnabled=\"{Binding IsEnabled, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        Placeholder=\"{Binding Placeholder, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        FontFamily=\"{Binding FontFamily, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        FontSize=\"{Binding FontSize, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ClearButtonVisibility=\"{Binding ClearButtonVisibility, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        ClearButtonColor=\"{Binding ClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        HoveredClearButtonColor=\"{Binding HoveredClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        PressedClearButtonColor=\"{Binding PressedClearButtonColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        BackgroundColor=\"{Binding EntryBackgroundColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        CornerRadius=\"{Binding EntryCornerRadius, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        TextColor=\"{Binding TextColor, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        Keyboard=\"{Binding Keyboard, Source={x:RelativeSource AncestorType={Type telerik:RadMaskedEntryBase}}}\"\n                        FocusedBorderBrush=\"Transparent\"\n                        FocusedBorderThickness=\"0,0,0,0\" \n                        BorderBrush=\"Transparent\"\n                        BorderThickness=\"0,0,0,0\"/>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Namespace in C#\nDESCRIPTION: This code shows how to import the Telerik namespace in C# to access Telerik UI controls including the ToggleButton.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Adding TimeSpanPicker in XAML\nDESCRIPTION: This XAML snippet adds a RadTimeSpanPicker control to the .NET MAUI application page. Ensure the Telerik namespace is declared in your XAML file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimeSpanPicker />\n```\n\n----------------------------------------\n\nTITLE: Styling the Drop-Down View in .NET MAUI DateTimePicker\nDESCRIPTION: Definition of a Style for the DropDownView of the DateTimePicker. This style targets the PickerDropDownContentView and customizes properties like background color and corner radius.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/dropdown-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"DropDownViewStyle\" TargetType=\"telerik:PickerDropDownContentView\">\n    <Setter Property=\"Background\" Value=\"#D6D2D0\"/>\n    <Setter Property=\"CornerRadius\" Value=\"10\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel for CollectionView in C#\nDESCRIPTION: This snippet shows the implementation of a ViewModel class for the CollectionView. It creates a collection of DataModel objects to be used as the ItemsSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/sorting.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<DataModel> People { get; set; }\n\n    public ViewModel()\n    {\n        this.People = new ObservableCollection<DataModel>\n        {\n            new DataModel { Name = \"Kiko\", Age = 23 },\n            new DataModel { Name = \"Jerry\", Age = 23 },\n            new DataModel { Name = \"Ethan\", Age = 51 },\n            new DataModel { Name = \"Isabella\", Age = 23 },\n            new DataModel { Name = \"Joshua\", Age = 51 },\n            new DataModel { Name = \"Logan\", Age = 51 },\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik UI for .NET MAUI Controls\nDESCRIPTION: Register Telerik controls using the UseTelerik() method in the CreateMauiApp method of MauiProgram.cs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/migrate-to-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ListPicker Header Style\nDESCRIPTION: Specifies styling for the header section of the ListPicker popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-style-header-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation in ListViewGridLayout\nDESCRIPTION: XAML code that shows how to set the Orientation property to Horizontal for a GridLayout definition in RadListView. This changes the default vertical orientation to horizontal.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-horizontal-orientation--gridlayout.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LayoutDefinition>\n    <telerik:ListViewGridLayout Orientation=\"Horizontal\"/>\n</telerik:RadListView.LayoutDefinition>\n```\n\n----------------------------------------\n\nTITLE: Defining DropDownViewStyle\nDESCRIPTION: This snippet illustrates how to set the DropDownViewStyle property to modify the visual appearance of the drop-down view in the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings>\n    <PickerDropDownSettings.DropDownViewStyle>\n        <Style TargetType=\"telerik:PickerDropDownContentView\">\n            <!-- Style properties go here -->\n        </Style>\n    </PickerDropDownSettings.DropDownViewStyle>\n</RadTimeSpanPicker.DropDownSettings>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataGridComboBoxColumn in XAML for .NET MAUI\nDESCRIPTION: Sets up a DataGridComboBoxColumn in XAML with PropertyName, ItemDisplayBindingPath, and ItemsSource to display Category names in a ComboBox column of a DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-combobox-column-maui.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:DataGridComboBoxColumn HeaderText=\"Person\"\n                                PropertyName=\"Person\"\n                                ItemDisplayBindingPath=\"Name\"\n                                ItemsSource=\"{Binding AllCategories, Mode=TwoWay}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ItemTemplate on TreeViewDescriptor Level\nDESCRIPTION: This snippet refers to defining a custom ItemTemplate at the TreeViewDescriptor level, allowing for more specific customization based on different data types in the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='treeview-itemtemplate' />\n```\n\n----------------------------------------\n\nTITLE: Executing the Command in .NET MAUI\nDESCRIPTION: This code snippet illustrates how to execute the defined command associated with the Button in a .NET MAUI application. The implementation requires the integration of command binding capabilities in the view model context.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/button/command.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Button Text=\"Click Me\"\n        Command=\"{Binding YourCommand}\"\n        CommandParameter=\"{Binding YourParameter}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring RadCollectionView with DelegateGroupDescriptor in XAML\nDESCRIPTION: XAML definition of RadCollectionView with a DelegateGroupDescriptor that uses a custom key lookup implementation for grouping items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                              ItemsSource=\"{Binding Items}\">\n    <telerik:RadCollectionView.GroupDescriptors>\n        <telerik:DelegateGroupDescriptor KeyLookup=\"{StaticResource FirstLetterKeyLookup}\"\n                                         SortOrder=\"Descending\"/>\n    </telerik:RadCollectionView.GroupDescriptors>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Implementing AIPrompt Button in XAML for .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define an AIPrompt Button in XAML. The RadAIPromptButton inherits from RadTemplatedButton and requires the AIPrompt and Popup properties to be configured.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/aiprompt-button.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='aiprompt-airpromtbutton-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Define visual states in page resources\nDESCRIPTION: This XAML snippet defines the visual states for the TemplatedButton within the page's resources. It's a placeholder intended to be replaced with the actual XAML implementation of the visual states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/visual-states.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedbutton-visual-states-resources' />\n```\n\n----------------------------------------\n\nTITLE: Add Telerik Namespace in XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace in XAML to use Telerik UI controls. This namespace is required to use the `MaskedEntry` control in XAML. It is necessary to import the Telerik.Maui.Controls namespace.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/value.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n\"xmlns:telerik=\\\"clr-namespace:Telerik.Maui.Controls;assembly=Telerik.Maui.Controls\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Backtrack Style for MAUI Slider\nDESCRIPTION: Custom style definition for the Slider's backtrack with TargetType set to RadBorder. This style can be applied to customize the appearance of the track that the thumb slides along.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/track-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-backtrack-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining VerticalAxisStyle in WinUI Resource Dictionary\nDESCRIPTION: XAML code defining a style for the vertical axis line in the Platforms/Windows/App.xaml file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/chart-bar-series-winui-customization.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"Line\" x:Key=\"VerticalAxisStyle\">\n    <Setter Property=\"Stroke\" Value=\"Red\"/>\n    <Setter Property=\"StrokeDashArray\" Value=\"2 2\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: ComboBox XAML Definition with Custom Clear Command\nDESCRIPTION: XAML markup for defining a RadComboBox with editable mode and custom clear selection command binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-clear-selection-command.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"comboBox\"\n                      IsEditable=\"True\"\n                      Text=\"{Binding MyText , Mode=TwoWay}\"\n                      ItemsSource=\"{Binding Items}\"\n                      DisplayMemberPath=\"Name\"\n                      ClearSelectionCommand=\"{Binding MyCustomCommand}\"\n                      SelectedItem=\"{Binding SelectedItem, Mode=TwoWay}\"\n                      SelectionMode=\"Single\">\n</telerik:RadComboBox>\n```\n\n----------------------------------------\n\nTITLE: Defining Header Drag Template in XAML\nDESCRIPTION: This XAML code snippet defines a DataTemplate for the ColumnHeaderDragVisualTemplate. This template defines the visual representation of the dragged column header during the reordering operation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/reordering.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"HeaderDragTemplate\">\n    <Border BackgroundColor=\"LightBlue\" Padding=\"5\">\n        <Label Text=\"{Binding Caption}\"/>\n    </Border>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: CollectionView ItemView Styling Reference\nDESCRIPTION: Reference to a code snippet demonstrating how to apply ItemViewStyle to CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/item-style.md#2025-04-21_snippet_3\n\nLANGUAGE: unknown\nCODE:\n```\n<snippet id='collectionview-itemview-styling' />\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Viewer Source in Navigation Logic\nDESCRIPTION: This code snippet shows how to set the source of the PDF Viewer to the selected PDF document when navigating from the thumbnails list. It ensures the correct document is displayed in the viewer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-select-pdf-thumbnails-dotnet-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// In the navigation logic from the list box to the PDFViewer page\npdfViewer.Source = selectedPdfDocumentPath;\n```\n\n----------------------------------------\n\nTITLE: Handling Source Exceptions in PDF Viewer\nDESCRIPTION: Demonstrates the use of the SourceException event in .NET MAUI's RadPdfViewer to manage document load errors. It includes how to define the control with a SourceExceptionTemplate and manage errors gracefully.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/events.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='pdfviewer-source-exception-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Declare Custom Filter Control Template XAML\nDESCRIPTION: This snippet outlines how to declare a custom filter control that inherits from the DataGridFilterControlBase class. This is a foundational step for creating a customizable filtering solution in the Telerik .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/filter-control-template.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Snippet for CityFilterControl declaration -->\n\n```\n\n----------------------------------------\n\nTITLE: Country Model Implementation\nDESCRIPTION: Reference to a C# class implementation for the Country model used in the hierarchical data structure example for TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/item-template.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-country-model' />\n```\n\n----------------------------------------\n\nTITLE: Adding SlideView XAML Namespace\nDESCRIPTION: Defines the required XAML namespace for using Telerik MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Using DropDown PickerMode in Telerik UI for .NET MAUI TimePicker - XAML\nDESCRIPTION: This example configures the PickerMode of RadTimePicker to 'DropDown', enabling the picker UI to appear as a drop-down menu, which is optimal for desktop platforms like Windows and macOS. No prerequisites are needed to run this snippet and it primarily involves setting the 'PickerMode'. This mode is particularly useful for desktop applications where a drop-down UI is more appropriate.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/picker-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTimePicker Time=\"10:30:00\"\n\t\t\t\t\t\t\tPickerMode=\"DropDown\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Templates in Page Resources - XAML\nDESCRIPTION: This snippet illustrates how to add template definitions in the page resources for arranging the visual representation of the grouped items in the ListView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/property-group-descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='listview-grouping-templates' />\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik XAML Namespace for MAUI RadListView\nDESCRIPTION: This snippet shows how to reference the Telerik namespace in a XAML file, which is required to use RadListView and other Telerik UI components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-cross-orientation-nesting.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining Group ToolbarItem Properties in C#\nDESCRIPTION: Shows the main property of the Group ToolbarItem, which is a read-only collection of ToolbarItems.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/group.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nItems (IList<ToolbarItem>)\n```\n\n----------------------------------------\n\nTITLE: Updating C# Namespaces - .NET MAUI\nDESCRIPTION: Demonstrates the change required in C# namespaces when migrating from Xamarin to .NET MAUI for the AutoComplete component. The 'using Telerik.XamarinForms.Input;' directive in Xamarin is replaced by 'using Telerik.Maui.Controls;' in .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.XamarinForms.Input;\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"using Telerik.Maui.Controls;\"\n```\n\n----------------------------------------\n\nTITLE: Binding SpanCount in RadListView GridLayout (XAML)\nDESCRIPTION: This XAML snippet shows how to bind the SpanCount property of the ListViewGridLayout to a value in the ViewModel. It uses a binding expression that references the ListView's BindingContext.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-gridlayout-spancount-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LayoutDefinition>\n    <telerik:ListViewGridLayout Orientation=\"Horizontal\"\n                            SpanCount=\"{Binding BindingContext.SpanCountValue, Source={x:Reference listView}}\"\n                            HorizontalItemSpacing=\"15\"\n                            ItemLength=\"120\"/>\n</telerik:RadListView.LayoutDefinition>\n```\n\n----------------------------------------\n\nTITLE: Handling SelectionChanged Event in C#\nDESCRIPTION: This C# snippet provides an event handler named RadTemplatedPicker_SelectionChanged for the SelectionChanged event of the TemplatedPicker. The handler's implementation logic can be defined by the developer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/events.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadTemplatedPicker_SelectionChanged(object sender, System.EventArgs e)\n{\n\t// implement your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Regex Pattern in .NET MAUI RegexMaskedEntry\nDESCRIPTION: This snippet shows how to define a custom input pattern using a regex for the RadRegexMaskedEntry, allowing more complex input restrictions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<RadRegexMaskedEntry Mask=\"[A-Z]\\d{3}\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of 1D Barcode Types\nDESCRIPTION: A markdown table listing all supported 1D barcode types with their descriptions and common usage scenarios. Includes various formats like Codabar, Code 11, Code 25, Code 39, Code 93, Code 128, MSI, EAN, GS1-128, Postnet, Planet, and UPC variants.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/1d-barcodes/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Barcode|Description|\n|----|----|\\n|Codabar|(aka Ames Code/USD-4/NW-7/2 of 7 Code): Used in libraries and blood banks|\\n|Code 11|(USD-8): Used to identify telecommunications equipment|\\n|Code 25 Standard|Used in airline ticket marking, photofinishing|\\n|Code 25 Interleaved|Used in warehouse, industrial applications|\\n|Code 39|(aka USD-3, 3 of 9): U.S. Government and military use, required for DoD applications|\\n|Code 39 Extended|(aka USD-3, 3 of 9): U.S. Government and military use, required for DoD applications, supports full ASCII|\\n|Code 93|(aka USS-93): Compressed form of Code 39|\\n|Code 93 Extended|(aka USS-93): Compressed form of Code 39, supports full ASCII|\\n|Code 128|Very dense code, used extensively worldwide|\\n|Code 128 A|Subset of Code 128 |\\n|Code 128 B|Subset of Code 128  |\\n|Code 128 C|Subset of Code 128  |\\n|MSI|Variation of Plessey code, with similar applications|\\n|EAN 8|Short version of EAN-13, 8 characters|\\n|EAN 13|Used with consumer products internationally, 13 characters|\\n|GS1-128|Formerly known as UCC-128 and EAN-128. Used to encode shipping/product information  |\\n|Postnet|Printed by U.S. Post Office on envelopes|\\n|Planet|Used by the U.S. Postal Service to identify and track pieces of mail during delivery - the Post Office's \"CONFIRM\" services|\\n|UPC A|Used with consumer products in U.S., 12 characters|\\n|UPC E|Short version of UPC symbol, 6 characters|\\n|UPC Supplement 2|Used to indicate magazines and newspaper issue numbers|\\n|UPC Supplement 5|Used to mark suggested retail price of books|\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik Components\nDESCRIPTION: This snippet adds the necessary namespace declaration for Telerik components in XAML, enabling the use of Telerik controls like the TemplatedPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining telerik Namespace in XAML\nDESCRIPTION: This XML namespace declaration is necessary to use Telerik UI controls within the XAML markup. It maps the `telerik` prefix to the Telerik XAML namespace for .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/gestures/items-reorder.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"                 \n```\n\n----------------------------------------\n\nTITLE: Defining RadTimeSpanPicker\nDESCRIPTION: This code snippet demonstrates how to define a RadTimeSpanPicker instance, which serves as the context for applying the drop-down styling.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker x:Name=\"timeSpanPicker\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Editor with AutoSize Property - .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates setting the AutoSize property to 'TextChanges' for a CustomEditor. This makes the editor automatically resize as text is added.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dotnet-maui-editor-scroll-inside-scrollview.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<local:CustomEditor AutoSize=\"TextChanges\" />\n```\n\n----------------------------------------\n\nTITLE: Error Message for Failed Package Retrieval\nDESCRIPTION: Detailed error message indicating failure to retrieve package information from the obsolete NuGet server\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/failed-retrieve-info-remote-source.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFailed to retrieve information about 'Telerik.UI.for.Maui' from remote source 'https://nuget.telerik.com/nuget/FindPackagesById()?id='Telerik.UI.for.Maui'&semVerLevel=2.0.0'.\n```\n\n----------------------------------------\n\nTITLE: DataForm GridLayout Implementation in XAML\nDESCRIPTION: Demonstrates how to define a RadDataForm with DataFormGridLayout. The layout arranges items in a grid with configurable column count and spacing between rows and columns.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/layouts/grid.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-layouts-grid'/>\n```\n\n----------------------------------------\n\nTITLE: Loading Image from Stream Implementation\nDESCRIPTION: Code snippet demonstrating how to load an image from a stream into the ImageEditor\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/custom-toolbar.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='load-image-from-stream'/>\n```\n\n----------------------------------------\n\nTITLE: Creating GroupDescriptor ViewModel Property\nDESCRIPTION: Define an ObservableCollection of GroupDescriptorBase in the ViewModel to manage group descriptors dynamically through data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/grouping/bindable-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate ObservableCollection<GroupDescriptorBase> _groupDescriptors;\n\npublic ObservableCollection<GroupDescriptorBase> GroupDescriptors\n{\n    get => _groupDescriptors;\n    set\n    {\n        _groupDescriptors = value;\n        OnPropertyChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Telerik Namespace in XAML\nDESCRIPTION: XAML namespace declaration required to use Telerik UI components in a .NET MAUI application. This enables access to the CollectionView and related components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/header.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" \n```\n\n----------------------------------------\n\nTITLE: NavigationView ItemStyle Resource\nDESCRIPTION: Defines the ItemStyle resources in the page's resources. This style is applied to all navigation items generated from the ItemsSource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/databinding.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-databinding-itemstyle'/>\n```\n\n----------------------------------------\n\nTITLE: Including ViewModel for TimeOnly\nDESCRIPTION: Illustrates the inclusion of a ViewModel that supports TimeOnly functionality, typically used for data binding and manipulating time values in a structured manner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/timeonly.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-timeonly-viewmodell' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Validation in DataForm\nDESCRIPTION: Shows how to add runtime validation to DataForm editors using the EditorGenerated event. This example demonstrates adding various validation rules to different properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/validation.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar form = new RadDataForm();\nform.EditorGenerated += this.OnEditorGenerated;\n```\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnEditorGenerated(object sender, DataFormEditorGeneratedEventArgs eventArgs)\n{\n\tswitch (eventArgs.PropertyName)\n\t{\n\t\tcase \"FirstName\":\n\t\t\teventArgs.Editor.HeaderText = \"First Name\";\n\t\t\t// This won't be applied on FirstName property, as there is a validation set by using the DataAnnotations\n\t\t\teventArgs.Editor.ValidationRules.Clear();\n\t\t\tbreak;\n\t\tcase \"LastName\":\n\t\t\teventArgs.Editor.HeaderText = \"Last Name\";\n\t\t\t// Add validation rule here\n\t\t\teventArgs.Editor.ValidationRules.Add(new DataFormEditorRequiredValidationRule\n\t\t\t{\n\n\t\t\t});\n\t\t\tbreak;\n\t\tcase \"StartDate\":\n\t\t\teventArgs.Editor = new DataFormRadDatePickerEditor\n\t\t\t{\n\t\t\t\tPropertyName = \"StartDate\",\n\t\t\t\tHeaderText = \"Start Date\"\n\t\t\t};\n\t\t\tbreak;\n\t\tcase \"EndDate\":\n\t\t\t// we remove the editor for this property\n\t\t\teventArgs.Editor = null;\n\t\t\tbreak;\n\t\tcase \"Accommodation\":\n\t\t\teventArgs.Editor = new DataFormRadComboBoxEditor\n\t\t\t{\n\t\t\t\tPropertyName = \"Accommodation\",\n\t\t\t\tHeaderText = \"Accommodation\",\n\t\t\t};\n\t\t\tbreak;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Style Resources\nDESCRIPTION: Defines a default style for buttons used within the SideDrawer, setting properties like width, height, and colors.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ResourceDictionary>\n    <Style x:Key=\"DefaultButtonStyle\" TargetType=\"Button\">\n        <Setter Property=\"WidthRequest\" Value=\"180\" />\n        <Setter Property=\"HeightRequest\" Value=\"40\" />\n        <Setter Property=\"BackgroundColor\" Value=\"#b1b1b1\" />\n        <Setter Property=\"TextColor\" Value=\"Black\" />\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Footer Style in XAML\nDESCRIPTION: Style definition for the PickerPopupFooterView, setting a specific background color\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/popup-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:PickerPopupFooterView\" x:Key=\"footerStyle\">\n    <Setter Property=\"BackgroundColor\" Value=\"#00B5DC\"/>\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for XAML\nDESCRIPTION: This code snippet demonstrates how to add the Telerik namespace to XAML documents, which is necessary for using Telerik controls, including the TemplatedButton with ripple effects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/ripple.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Declaring DelegateAggregateDescriptor in XAML\nDESCRIPTION: XAML configuration for setting up the DelegateAggregateDescriptor in the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/delegate-aggregate-descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datagrid-property-delegate-descriptor-example'/>\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderStyle for TimePicker\nDESCRIPTION: This snippet illustrates how to set the HeaderStyle property in XAML for the TimePicker, customizing the style of the header in the popup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/popup-styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-style-header-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid Model Class\nDESCRIPTION: Sample data model class definition for the DataGrid implementation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/aggregates/delegate-aggregate-descriptor.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-aggregates-model'/>\n```\n\n----------------------------------------\n\nTITLE: Defining a RadDataGrid in XAML\nDESCRIPTION: Defines a RadDataGrid with a binding to the data context set in C#. This XAML code lays out the grid's structure and links it to the ViewModel.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-cell-doubletap.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"grid\" ItemsSource=\"{Binding}\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Styles in Telerik UI for .NET MAUI using Implicit Style\nDESCRIPTION: This snippet demonstrates using an implicit style in .NET MAUI to customize the appearance of chat messages. It targets `TextMessageView` and derived types to apply label styles, specifically changing the text color to red. The style uses `StaticResource` to reference the label style.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-chat-item-styles-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Style x:Key=\\\"LabelStyle\\\" TargetType=\\\"Label\\\">\\n    <Setter Property=\\\"TextColor\\\" Value=\\\"Red\\\" />\\n</Style>\\n<Style TargetType=\\\"telerik:TextMessageView\\\" ApplyToDerivedTypes=\\\"True\\\">\\n    <Setter Property=\\\"LabelStyle\\\" Value=\\\"{StaticResource LabelStyle}\\\" />\\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Implementing HeaderItemStyleSelector Class in C#\nDESCRIPTION: Creates a custom StyleSelector class that determines which style to apply to each TabView header item based on specific logic or conditions\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/styling/header-itemstyle-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntabview-header-styleselector-class\n```\n\n----------------------------------------\n\nTITLE: Defining the RadTemplatedPicker in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to define the RadTemplatedPicker control in your .NET MAUI application. Ensure to set styling properties to customize its appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/styling/styling.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<snippet id='templatedpicker-style' />\n```\n\n----------------------------------------\n\nTITLE: Setting BindingContext for DataForm\nDESCRIPTION: Simple code snippet demonstrating how to set the CustomEditorViewModel as the BindingContext for the page, which enables the custom editor functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/dataform-custom-editor-combobox-selecteditems.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.BindingContext = new CustomEditorViewModel();\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to define the telerik namespace in XAML to access the DockLayout control and its properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/docklayout/docking.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to HandlerChanged Event for RadAutoComplete in .NET MAUI\nDESCRIPTION: This snippet shows how to subscribe to the HandlerChanged event of a RadAutoComplete control to customize its appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-cursor-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMyRadAutoComplete.HandlerChanged += AutoComplete1_HandlerChanged;\n```\n\n----------------------------------------\n\nTITLE: Styling Day Names in .NET MAUI Calendar\nDESCRIPTION: This snippet demonstrates how to define a .NET MAUI Calendar control.  It serves as the starting point for applying styles to the day names.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/calendar/styling/day-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='calendar-daynames-styling'/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Display Template in DatePicker\nDESCRIPTION: Shows how to set a custom display template for the DatePicker, defining how the selected date will be visually represented\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDatePicker DisplayTemplate=\"{StaticResource CustomDisplayTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Setting MMMM dd SpinnerFormat in DateTimePicker\nDESCRIPTION: Sets the SpinnerFormat property to 'MMMM dd' to display the month name followed by the day number in the spinner.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/formatting.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDateTimePicker SpinnerFormat=\"MMMM dd\" />\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI Chart C# Namespace Import\nDESCRIPTION: The updated C# namespace import for the .NET MAUI Chart control, used in .NET MAUI projects to use Telerik Chart classes and functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility.Chart;\n```\n\n----------------------------------------\n\nTITLE: ListPicker Item Style Definition\nDESCRIPTION: Style definition for ListPicker items marked with snippet id 'listpicker-features-itemstyle'.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-features-itemstyle' />\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayTemplate in XAML\nDESCRIPTION: This snippet demonstrates how to define the DisplayTemplate for the ListPicker, which is used when an item is selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"displayTemplate\">\n\t<StackLayout>\n\t\t<Label Text=\"This is the DisplayTemplate of the ListPicker\" FontSize=\"10\"/>\n\t\t<Label Text=\"{TemplateBinding DisplayString}\" TextColor=\"Black\" FontSize=\"15\" Grid.Row=\"1\" VerticalTextAlignment=\"Center\"/>\n\t\t<StackLayout.GestureRecognizers>\n\t\t\t<TapGestureRecognizer Command=\"{TemplateBinding ToggleCommand}\" />\n\t\t</StackLayout.GestureRecognizers>\n\t</StackLayout>\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Read-Only State Converter Implementation\nDESCRIPTION: Converter implementation for handling the visibility of the toolbar based on read-only state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='richtexteditor-readonly-converter' />\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace in XAML\nDESCRIPTION: XAML namespace declaration required to use Telerik UI components including the RadComboBox control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/databinding.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying Platform Theme Based on Device Theme in .NET MAUI\nDESCRIPTION: Implementation for loading the appropriate Platform theme swatch (light/dark) based on the current device theme using TelerikTheming. This code retrieves the current theme from Application.Resources and applies the matching Platform swatch.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/change-telerik-theme-runtime.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void ApplyTelerikTheme()\n{\n    var telerikTheming = Application.Current\n        .Resources\n        .MergedDictionaries\n        .OfType<TelerikTheming>()\n        .Single();\n\n    var swatchName = Application.Current.RequestedTheme == AppTheme.Dark ? \"Dark\" : \"Light\";\n    telerikTheming.Theme = TelerikTheming.Themes\n        .Single(t => t.Theme == \"Platform\" && t.Swatch == swatchName);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TreeView Namespace in C# for Xamarin.Forms\nDESCRIPTION: Demonstrates how to import the namespace for the TreeView control in Xamarin.Forms C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.DataControls;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace - XAML\nDESCRIPTION: This snippet demonstrates adding the Telerik namespace to an XAML file. This step is crucial to utilize Telerik components effectively.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadingTemplate for .NET MAUI AutoComplete\nDESCRIPTION: Defines a template to be displayed during remote search operations. The template includes a 'Searching...' label and a busy indicator animation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/templates/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAutoComplete.LoadingTemplate>\n    <DataTemplate>\n        <HorizontalStackLayout HorizontalOptions=\"Center\"\n                                Margin=\"0, 20, 0, 20\">\n            <Label Text=\"Searching... \" \n                    FontSize=\"16\" \n                    TextColor=\"#8E8E93\"/>\n            <telerik:RadBusyIndicator x:Name=\"busyIndicator\" \n                                        HeightRequest=\"24\" \n                                        WidthRequest=\"24\"\n                                        IsBusy=\"True\"\n                                        VerticalOptions=\"Start\"\n                                        AnimationContentColor=\"#8660C5\"\n                                        AnimationType=\"Animation9\"/>\n        </HorizontalStackLayout>\n    </DataTemplate>\n</telerik:RadAutoComplete.LoadingTemplate>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Definition\nDESCRIPTION: This XAML snippet defines the Telerik namespace, which is required to use Telerik UI controls in the XAML code. This namespace declaration allows you to reference Telerik controls, such as the DataGrid and DataPager, within your XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/paging.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n```XAML\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RadNumericInput XAML Structure\nDESCRIPTION: XAML markup showing how to define RadNumericInput with a Loaded event handler.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/access-radtextinput-inner-entry-telerik-maui-numericinput.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadNumericInput x:Name=\"numeric\" Loaded=\"OnRadNumericInputLoaded\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing TapGestureRecognizer Event Handler in C#\nDESCRIPTION: C# event handler that closes the ComboBox DropDown by setting IsDropDownOpen property to false when a tap is detected outside the component.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-close-dropdown-click-outside-bounds.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void TapGestureRecognizer_Tapped(object sender, TappedEventArgs e)\n{\n    this.comboBox.IsDropDownOpen = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ItemStyleSelector to RadTreeView in XAML\nDESCRIPTION: Sets the ItemStyleSelector property to the RadTreeView control, enabling conditional styling for tree items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/itemstyle-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTreeView x:Name=\"treeView\"\n                     ItemStyleSelector=\"{StaticResource LocationStyleSelector}\" />\n```\n\n----------------------------------------\n\nTITLE: Data Binding Spinner with ItemsSource\nDESCRIPTION: Shows how to bind a collection to the Spinner and configure display options\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/spinner.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:Spinner ItemsSource=\"{Binding MyItems}\" \n              DisplayMemberPath=\"Name\" \n              SelectedItem=\"{Binding SelectedItem}\" />\n```\n\n----------------------------------------\n\nTITLE: Scrolling to a Specific Time in .NET MAUI Scheduler\nDESCRIPTION: Demonstrates how to use the ScrollIntoView method to programmatically scroll the Scheduler view to 10:00 AM.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/programmatic-scrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.scheduler.ScrollIntoView(new TimeOnly(10, 0));\n```\n\n----------------------------------------\n\nTITLE: Restricting Input to Numbers in .NET MAUI TextMaskedEntry\nDESCRIPTION: This snippet allows only numeric input in the RadTextMaskedEntry by applying a numeric mask.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/maskedentry/mask.md#2025-04-21_snippet_6\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTextMaskedEntry Mask=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Spinner Item Templates\nDESCRIPTION: Demonstrates how to define custom templates for Spinner items and selected items\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedpicker/spinner.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:Spinner>\n    <telerik:Spinner.ItemTemplate>\n        <DataTemplate>\n            <!-- Custom item template -->\n        </DataTemplate>\n    </telerik:Spinner.ItemTemplate>\n</telerik:Spinner>\n```\n\n----------------------------------------\n\nTITLE: ViewModel with Collection of Client Objects - C#\nDESCRIPTION: Defines a ViewModel containing a collection of Client objects to be used in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/display-text.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ClientsViewModel {\n    public ObservableCollection<Client> Clients { get; set; }\n    public ClientsViewModel() {\n        Clients = new ObservableCollection<Client>();\n        // Add sample clients\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SelectionMode Property in C# for .NET MAUI DataGrid\nDESCRIPTION: Shows how to set the SelectionMode property to 'Multiple' in C# code-behind for the Telerik UI for .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar dataGrid = new RadDataGrid();\ndataGrid.SelectionMode = Telerik.Maui.Controls.DataGrid.DataGridSelectionMode.Multiple;\n```\n\n----------------------------------------\n\nTITLE: Setting SelectionUnit Property in C# for .NET MAUI DataGrid\nDESCRIPTION: Shows how to set the SelectionUnit property to 'Cell' in C# code-behind for the Telerik UI for .NET MAUI DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/selection.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar dataGrid = new RadDataGrid();\ndataGrid.SelectionUnit = Telerik.Maui.Controls.DataGrid.DataGridSelectionUnit.Cell;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: Defines the Telerik XAML namespace to enable access to Telerik UI controls for .NET MAUI in XAML files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Customizing the Spinner Style in DateTimePicker\nDESCRIPTION: Demonstrates how to define a custom style for the spinner component of the DateTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/styling.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datetimepicker-style-spinner-style' />\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeSlider to Enable Only Range Track Dragging\nDESCRIPTION: Shows how to configure the RangeSlider to allow dragging only the range track between the thumbs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/rangeslider/range-thumb.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='rangeslider-drag-rangetrack-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Adding Name Property to Telerik Control in XAML\nDESCRIPTION: First solution to resolve the schema error by adding an x:Name property to the Telerik control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/telerik-schema-error-cannot-resolve-type.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox x:Name=\"combo\"/>\n```\n\n----------------------------------------\n\nTITLE: Applying the AIPrompt Button Style in Telerik .NET MAUI\nDESCRIPTION: Shows how to apply the custom AIPromptButtonStyle to a RadAIPromptButton control. The example demonstrates setting the Style property to reference the previously defined style resource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/styling/aipromptbutton-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadAIPromptButton OpenAIApiKey=\"{x:Static local:Config.OpenAIKey}\"\n                         Style=\"{StaticResource AIPromptButtonStyle}\"\n                         Text=\"Ask AI\"\n                         ShowAIResponse=\"True\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up TabView with On-Demand Loading in XAML\nDESCRIPTION: This XAML snippet demonstrates how to set up a RadTabView with on-demand content loading using the attached properties defined in TabViewUtils.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-tab-content-on-demand-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadTabView x:Name=\"tabView\"\n                ItemsSource=\"{Binding Data}\"\n                local:TabViewUtils.LoadOnDemand=\"True\">\n    <telerik:RadTabView.ItemTemplate>\n        <DataTemplate>\n            <telerik:TabViewItem HeaderText=\"{Binding Name}\"\n                                local:TabViewUtils.LoadOnDemandTemplate=\"{StaticResource TabViewItemContentTemplate}\" />\n        </DataTemplate>\n    </telerik:RadTabView.ItemTemplate>\n</telerik:RadTabView>\n```\n\n----------------------------------------\n\nTITLE: Defining Business Object for CollectionView in C#\nDESCRIPTION: Shows the definition of a business object used as the data model for the CollectionView. This snippet is referenced but not provided in the text.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/linear-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Snippet content not provided in the original text\n// <snippet id='collectionview-datamodel' />\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik controls in MauiProgram.cs\nDESCRIPTION: C# code showing how to register Telerik UI controls in a .NET MAUI application through the UseTelerik extension method in the MauiProgram.cs file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/gridsplitter/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.Compatibility;\n\npublic static class MauiProgram\n{\n\tpublic static MauiApp CreateMauiApp()\n\t{\n\t\tvar builder = MauiApp.CreateBuilder();\n\t\tbuilder\n\t\t\t.UseTelerik()\n\t\t\t.UseMauiApp<App>()\n\t\t\t.ConfigureFonts(fonts =>\n\t\t\t{\n\t\t\t\tfonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n\t\t\t});\n\n\t\treturn builder.Build();\n\t}\n}           \n```\n\n----------------------------------------\n\nTITLE: Problematic Windows SDK Version Configuration in .NET MAUI Project\nDESCRIPTION: An example of the problematic Windows SDK version configuration in the project file that can cause the NotSupportedException. This typically happens when explicitly setting the Windows SDK version to 10.0.19041.41 or similar versions due to CommunityToolkit requirements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-managed-vtable-types-notsupportedexception.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<WindowsSdkPackageVersion>10.0.19041.41</WindowsSdkPackageVersion>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid with CellContentTemplate in C#\nDESCRIPTION: C# code-behind implementation of RadDataGrid showing how to programmatically create columns and set up CellContentTemplate bindings.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/specifying-binding-cellcontenttemplate-datatable.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MainPage : ContentPage\n{\n    DataTableViewModel vm;\n    public MainPage()\n    {\n        InitializeComponent();\n        this.vm = new DataTableViewModel();\n        this.BindingContext = this.vm;\n\n        var grid = new RadDataGrid();\n        grid.AutoGenerateColumns = false;\n        grid.ItemsSource = this.vm.Data;\n        var textColumn = new DataGridBooleanColumn { PropertyName = \"City\" };\n        textColumn.CellContentTemplate = new DataTemplate(() =>\n        {\n            Label label = new Label();\n            label.SetBinding(Label.TextProperty, new Binding(\"[City]\"));\n            return label;\n        });\n        var checkedColumn = new DataGridBooleanColumn { PropertyName = \"IsVisited\" };\n        checkedColumn.CellContentTemplate = new DataTemplate(() =>\n        {\n            RadCheckBox checkBox = new RadCheckBox();\n            checkBox.SetBinding(RadCheckBox.IsCheckedProperty, new Binding(\"[IsVisited]\"));\n            return checkBox;\n        });\n        grid.Columns.Add(textColumn);\n        grid.Columns.Add(checkedColumn);\n\n        this.Content = grid;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the telerik namespace in XAML, which is necessary for using Telerik UI components in a .NET MAUI project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/header.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Threshold in AutoComplete\nDESCRIPTION: Shows how to set a threshold for the number of characters required before triggering a search in the AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikInput:RadAutoComplete SearchThreshold=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace for Barcode\nDESCRIPTION: Adds the Telerik XAML namespace to enable barcode control usage in a .NET MAUI application\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/value-and-symbology.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: ListPicker Popup Style Definition\nDESCRIPTION: Defines the main ListPicker control with popup styling properties.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/popup-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listpicker-popup-style' />\n```\n\n----------------------------------------\n\nTITLE: Basic Numerical Column Implementation in XAML\nDESCRIPTION: Demonstrates how to create a numerical column with custom formatting and cell styling. The example shows stadium capacity with custom text formatting and green colored text that changes to light coral when selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/column-types/numerical-column.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:DataGridNumericalColumn PropertyName=\"StadiumCapacity\"\n                                     HeaderText=\"Stadium Capacity\"\n                                     CellContentFormat=\" Seats - {0:D}\">\n    <telerik:DataGridNumericalColumn.CellContentStyle>\n        <telerik:DataGridTextCellStyle TextColor=\"Green\"\n                                           FontSize=\"18\"\n                                           SelectedTextColor=\"LightCoral\" />\n    </telerik:DataGridNumericalColumn.CellContentStyle>\n</telerik:DataGridNumericalColumn>\n```\n\n----------------------------------------\n\nTITLE: Defining ListView with TextCell in XAML\nDESCRIPTION: This XAML snippet shows how to define a ListView control using TextCell. It sets up the ListView's ItemsSource and specifies the TextCell properties for displaying the Name and Age of each Person object.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/cells/text-cell.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='listview-celltypes-textcell-listview-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Implementing SlideView with Event Handler\nDESCRIPTION: Demonstrates how to define a RadSlideView control with event handling for CurrentItemChanged.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slideview-events' />\n```\n\n----------------------------------------\n\nTITLE: Creating Business Model for DataGrid\nDESCRIPTION: Defines the business model class that represents the data structure for the DataGrid\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/row-details/row-details-template.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-business-model'/>\n```\n\n----------------------------------------\n\nTITLE: Namespace Declaration for Telerik MAUI Components\nDESCRIPTION: XAML namespace declaration required for using Telerik MAUI components in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/layouts/grid-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting ViewModel BindingContext in C#\nDESCRIPTION: Shows how to set the BindingContext to the ViewModel class that contains the special slots configuration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/scheduler/specialslots/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='scheduler-specialslots-setvm' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleared Event Handler\nDESCRIPTION: Event handler for the Cleared event that displays a 'Cleared' label when the signature pad is cleared\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/signaturepad/events.md#2025-04-21_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Club Model Definition\nDESCRIPTION: C# class defining the Club data model used by the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/skiasharp-cell-renderer.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-club-model' />\n```\n\n----------------------------------------\n\nTITLE: Importing TreeView Namespace in C# for .NET MAUI\nDESCRIPTION: Demonstrates how to import the namespace for the TreeView control in .NET MAUI C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Person Business Object Implementation in C#\nDESCRIPTION: A class representing a Person object with basic properties used for AutoComplete filtering.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/filtering.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-person-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to .NET MAUI Slider\nDESCRIPTION: XAML code showing how to apply the defined styles to the Slider control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slider/styling/thumb-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='slider-value-elements-styling-xaml' />\n```\n\n----------------------------------------\n\nTITLE: Setting Up SwissQR Code Symbology - XAML\nDESCRIPTION: This XAML snippet sets the symbology of the barcode to SwissQRCode for proper barcode generation. Ensure the Telerik namespace is included in your project to leverage the Barcode control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/barcode/2d-barcodes/swissqrcode-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<!-- Assuming existing barcode control setup -->\n<Barcode Symbology=\"SwissQRCode\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Control Template for RadNumericMaskedEntry\nDESCRIPTION: Shows the definition of a custom control template that uses a transparent border brush to remove the border effect.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-border-underline-masked-entry-control-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<ControlTemplate x:Key=\"MaskedEntry_ControlTemplate\">\n    <telerikMauiControls:RadEntry FocusedBorderBrush=\"Transparent\" />\n</ControlTemplate>\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace in XAML\nDESCRIPTION: This code snippet demonstrates how to add the Telerik namespace to the XAML file. This namespace is necessary to use Telerik's .NET MAUI controls, including the DataPager.  Ensure the Telerik UI for .NET MAUI NuGet package is installed in the project.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/ellipsis-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: ViewModel Namespace Import in C#\nDESCRIPTION: Namespace import for NotifyPropertyChangedBase class used in ViewModel\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/columns/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls\n```\n\n----------------------------------------\n\nTITLE: Customizing RadAutoComplete Cursor Color in .NET MAUI (Android and iOS)\nDESCRIPTION: This code demonstrates how to access the native platform view of a RadAutoComplete control and customize its cursor color for both Android and iOS platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/autocomplete-cursor-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void AutoComplete1_HandlerChanged(object sender, EventArgs e)\n{\n    var platformView = sender as RadAutoComplete;\n\n#if ANDROID\n    if (platformView?.Handler?.PlatformView is Telerik.Maui.Border.BorderViewGroup borderViewGroup)\n    {\n        var textInputs = borderViewGroup.GetChildrenOfType<Google.Android.Material.TextField.TextInputLayout>();\n        var textInput = textInputs.FirstOrDefault();\n\n        if (textInput is { EditText.TextCursorDrawable: not null })\n        {\n            textInput.EditText.TextCursorDrawable?.SetColorFilter(new Android.Graphics.PorterDuffColorFilter(Android.Graphics.Color.Red, Android.Graphics.PorterDuff.Mode.Darken));\n        }\n    }\n#elif __IOS__\n    if (platformView?.Handler?.PlatformView is Telerik.Maui.Border.TKBorderView borderView)\n    {\n        var textField = borderView.FindDescendantView<UIKit.UITextField>();\n        \n        if(textField != null)\n            textField.TintColor = UIKit.UIColor.Red;\n    }\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: ListView Selection Event Parameters\nDESCRIPTION: Event parameters for the SelectionChanged event that occurs when the SelectionItems collection is updated.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/events.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsender: object (can be cast to RadListView)\nNotifyCollectionChangedEventArgs: provides collection change information\n```\n\n----------------------------------------\n\nTITLE: Add Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace in XAML to use Telerik controls. This namespace declaration allows you to reference Telerik components within your XAML markup.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/tabview/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n```XAML\n xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n ```\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Namespace in XAML\nDESCRIPTION: XML namespace declaration for Telerik MAUI controls to enable TimePicker usage\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding DelegateFilterDescriptor in C#\nDESCRIPTION: Code showing how to add a DelegateFilterDescriptor to the ListView's FilterDescriptors collection\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listview/filtering.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<listview-add-filter/>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckBox Style for DataForm Editor\nDESCRIPTION: XAML style definition for the DataFormRadCheckBoxEditor customizing its appearance.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/editors-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='dataform-editors-stlying-checkbox-style' />\n```\n\n----------------------------------------\n\nTITLE: Defining DropDownViewStyle in XAML\nDESCRIPTION: Demonstrates how to set the DropDownViewStyle property in XAML for a RadTimePicker control. Ensures the drop-down part is styled according to the specified design requirements. Requires no additional libraries besides Telerik's XAML namespace. Customization is done through Style objects.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/styling/dropdown-styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id=\\\"dropDownViewStyle\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This code snippet adds the Telerik namespace to the XAML file. This is necessary to use the Telerik UI controls in the XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/selection.md#2025-04-21_snippet_7\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Applying Appointment Template to RadScheduler in .NET MAUI\nDESCRIPTION: This XML code shows how to apply the custom appointment template to a RadScheduler control in .NET MAUI. The scheduler is configured to bind its appointments to a data source and uses the predefined custom template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-appointment-display-dot-net-maui-scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:RadScheduler x:Name=\"scheduler\" \n                      AppointmentsSource=\"{Binding Appointments}\"\n                      AppointmentTemplate=\"{StaticResource CustomAppointmentDataTemplate}\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\n```\n\n----------------------------------------\n\nTITLE: Xamarin Accordion C# Namespace Import\nDESCRIPTION: C# using statement for the Telerik Accordion control in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/accordion/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Primitives;\n```\n\n----------------------------------------\n\nTITLE: Custom RemoveTokenCommand Usage in XAML\nDESCRIPTION: XAML implementation showing how to apply the custom RemoveTokenCommand to AutoComplete control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-custom-removetoken' />\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionView ViewModel\nDESCRIPTION: ViewModel implementation that manages the CollectionView's data and drag-drop operations.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/drag-and-drop/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='collectionview-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Defining EditorsViewModel in C#\nDESCRIPTION: This snippet shows the implementation of the EditorsViewModel class used as the BindingContext for the RadDataForm. It includes properties for various data types with validation attributes.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/validation-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class EditorsViewModel : NotifyPropertyChangedBase\n{\n    private string text;\n    private int intNumber;\n    private DateTime date = DateTime.Now;\n    private TimeSpan time;\n    private bool boolean;\n    private int? nullableInt;\n    private List<string> list;\n    private string password;\n    private string phone;\n    private string email;\n    private int quantity;\n    private double decimalNumber;\n\n    [DisplayOptions(HeaderText = \"Text\")]\n    [StringLengthValidator(2, 30, ErrorMessage = \"Text must be between 2 and 30 characters.\")]\n    public string Text\n    {\n        get { return this.text; }\n        set { this.UpdateValue(ref this.text, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Integer Number\")]\n    [NumericalRangeValidator(2, 20, ErrorMessage = \"Value must be between 2 and 20.\")]\n    public int IntNumber\n    {\n        get { return this.intNumber; }\n        set { this.UpdateValue(ref this.intNumber, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Date\")]\n    public DateTime Date\n    {\n        get { return this.date; }\n        set { this.UpdateValue(ref this.date, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Time\")]\n    public TimeSpan Time\n    {\n        get { return this.time; }\n        set { this.UpdateValue(ref this.time, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Boolean\")]\n    public bool Boolean\n    {\n        get { return this.boolean; }\n        set { this.UpdateValue(ref this.boolean, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Nullable Integer\")]\n    [NumericalRangeValidator(1, 10, ErrorMessage = \"Value must be between 1 and 10.\")]\n    public int? NullableInt\n    {\n        get { return this.nullableInt; }\n        set { this.UpdateValue(ref this.nullableInt, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"List\")]\n    public List<string> List\n    {\n        get { return this.list; }\n        set { this.UpdateValue(ref this.list, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Password\")]\n    [StringLengthValidator(3, 10, ErrorMessage = \"Password must be between 3 and 10 characters.\")]\n    public string Password\n    {\n        get { return this.password; }\n        set { this.UpdateValue(ref this.password, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Phone\")]\n    [RegularExpressionValidator(@\"\\d{3}-\\d{3}-\\d{4}\", ErrorMessage = \"Phone must be in format xxx-xxx-xxxx.\")]\n    public string Phone\n    {\n        get { return this.phone; }\n        set { this.UpdateValue(ref this.phone, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Email\")]\n    [RegularExpressionValidator(@\"^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\", ErrorMessage = \"Invalid email address.\")]\n    public string Email\n    {\n        get { return this.email; }\n        set { this.UpdateValue(ref this.email, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Quantity\")]\n    [NumericalRangeValidator(0, 100, ErrorMessage = \"Quantity must be between 0 and 100.\")]\n    public int Quantity\n    {\n        get { return this.quantity; }\n        set { this.UpdateValue(ref this.quantity, value); }\n    }\n\n    [DisplayOptions(HeaderText = \"Decimal Number\")]\n    [NumericalRangeValidator(0, 100, ErrorMessage = \"Value must be between 0 and 100.\")]\n    public double DecimalNumber\n    {\n        get { return this.decimalNumber; }\n        set { this.UpdateValue(ref this.decimalNumber, value); }\n    }\n\n    public EditorsViewModel()\n    {\n        this.list = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\" };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Control Template for RadNumericMaskedEntry in XAML\nDESCRIPTION: Demonstrates how to apply a custom control template to remove the border by setting the ControlTemplate property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-border-underline-masked-entry-control-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadNumericMaskedEntry ControlTemplate=\"{StaticResource MaskedEntry_ControlTemplate}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Business Model in .NET MAUI\nDESCRIPTION: This code snippet exemplifies defining a simple business model in C# for use with the ListPicker. It sets up the structure needed for binding data within a .NET MAUI application, which is a prerequisite for using the ListPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/looping.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Assume this is a C# code snippet defining a simple business model for ListPicker\n```\n\n----------------------------------------\n\nTITLE: Configuring Local NuGet Source in nuget.config\nDESCRIPTION: XML configuration for setting up local and global NuGet package sources in the nuget.config file. Includes paths for both the official NuGet registry and local Telerik package source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/nuget/local-nuget-package.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"telerik\" value=\"add the path to the local package\" />\n    </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styles for TextBox in Windows Platform\nDESCRIPTION: XAML code for a custom ResourceDictionary that defines styles for TextBox controls on Windows, setting background color to black, foreground to white, and applying the same styling when focused.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/set-focused-background-color-maskedentry-windows-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ResourceDictionary xmlns=\"http://xamarin.com/schemas/2014/forms\"\n                    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\">\n    <Style TargetType=\"TextBox\">\n        <Setter Property=\"Background\" Value=\"Black\" />\n        <Setter Property=\"BorderBrush\" Value=\"Black\" />\n        <Setter Property=\"Foreground\" Value=\"White\" />\n        <Setter Property=\"Padding\" Value=\"5\" />\n    </Style>\n    <Style TargetType=\"TextBox\" x:Key=\"FocusVisualStyle\">\n        <Setter Property=\"Background\" Value=\"Black\" />\n        <Setter Property=\"Foreground\" Value=\"White\" />\n    </Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: NavigationView NavigationItem Explicit Style XAML\nDESCRIPTION: This XAML snippet demonstrates how to define an explicit style for a NavigationViewItem using a ResourceDictionary. The style targets the NavigationViewItemView and sets the Spacing property. The style is then applied to a NavigationViewItem using StaticResource.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/styling/navigationitem.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentView.Resources>\n    <ResourceDictionary>\n        <Style TargetType=\"telerik:NavigationViewItemView\" x:Key=\"NavigationItemStyle\">\n            <Setter Property=\"Spacing\" Value=\"10\"/>\n        </Style>\n    </ResourceDictionary>\n</ContentView.Resources>\n\n<telerik:NavigationViewItem Text=\"Item 1\" Style=\"{StaticResource NavigationItemStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace for TemplatedButton Events\nDESCRIPTION: Declare the Telerik XAML namespace to enable RadTemplatedButton and its event handling\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/events.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RadEntry Visual States in XAML\nDESCRIPTION: Demonstrates how to set up visual state configurations for a Telerik RadEntry control using VisualStateManager. Defines different visual states with specific property setters for Normal, Focused, Disabled, and Unfocused states.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/entry-visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"tEntry\" Placeholder=\"telerik\">\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroupList>\n            <VisualStateGroup x:Name=\"CommonStates\">\n                <VisualState x:Name=\"Normal\">\n                    <VisualState.Setters>\n                        <Setter Property=\"FontSize\" Value=\"35\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Focused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Red\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Disabled\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\" Value=\"Pink\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"Unfocused\">\n                    <VisualState.Setters>\n                        <Setter Property=\"BackgroundColor\"  Value=\"yellow\" />\n                    </VisualState.Setters>\n                </VisualState>\n                <VisualState x:Name=\"PointerOver\"/>\n            </VisualStateGroup>\n        </VisualStateGroupList>\n    </VisualStateManager.VisualStateGroups>\n</telerik:RadEntry>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik MAUI Namespace\nDESCRIPTION: Required XML namespace declaration to use Telerik UI controls in XAML. This enables the use of Telerik-specific controls like RadTimePicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/time-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Custom Crop Toolbar Implementation in XAML\nDESCRIPTION: Example showing how to create a custom crop toolbar using XAML markup\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/toolbar/custom-toolbar.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='imageeditor-custom-crop-toolbar'/>\n```\n\n----------------------------------------\n\nTITLE: Running Controls Samples on iOS Simulator\nDESCRIPTION: Command to build and run the Controls Samples application on iOS simulator using .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/controls-showcase-app.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Business Object for AutoComplete\nDESCRIPTION: C# class definition for Client business object used in AutoComplete control with properties for client data.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/visual-states.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-client-businessobject'/>\n```\n\n----------------------------------------\n\nTITLE: Custom AutoComplete Filter Implementation in C#\nDESCRIPTION: Implementation of IAutoCompleteFilter interface for custom filtering logic.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/filtering.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='autocomplete-filtering-class'/>\n```\n\n----------------------------------------\n\nTITLE: Xamarin ListPicker C# Namespace Import\nDESCRIPTION: C# namespace import for Telerik ListPicker in Xamarin.Forms\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Input;\n```\n\n----------------------------------------\n\nTITLE: Adding XAML Namespace for Telerik MAUI Controls\nDESCRIPTION: Demonstrates how to add the required Telerik XAML namespace to access MAUI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/slideview/data-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptButtonStyle\nDESCRIPTION: This snippet illustrates how to define the style for the Accept button in the drop-down settings of the RadTimeSpanPicker.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/styling/dropdown-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<RadTimeSpanPicker.DropDownSettings>\n    <PickerDropDownSettings.AcceptButtonStyle>\n        <Style TargetType=\"Button\">\n            <!-- Style properties go here -->\n        </Style>\n    </PickerDropDownSettings.AcceptButtonStyle>\n</RadTimeSpanPicker.DropDownSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for CheckBox State Management - C#\nDESCRIPTION: This snippet shows the implementation of a ViewModel class in C# that contains a nullable boolean property IsChecked, allowing for the management of the CheckBox state.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/checked-states.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ViewModel : NotifyPropertyChangedBase\n{\n    private bool? isChecked;\n\n    public bool? IsChecked\n    {\n        get { return this.isChecked; }\n        set\n        {\n            if (this.isChecked != value)\n            {\n                this.isChecked = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Telerik Controls Registration\nDESCRIPTION: C# code showing how to register Telerik controls in MauiProgram.cs.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-compatibility-net-telerik-nuget-filenotfoundexception.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing SkiaSharp.Views.Maui.Controls.Hosting;\nusing Telerik.Maui.Controls;\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Code omitted for brevity\n.UseMauiApp<App>()\n.UseTelerikControls()\n.UseSkiaSharp()\n// Code omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik MAUI Namespace\nDESCRIPTION: XAML namespace declaration required for using Telerik MAUI controls in the application\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/imageeditor/zooming-image.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining AutomaticLoadOnDemandTemplate Resource\nDESCRIPTION: XAML resource definition for the AutomaticLoadOnDemandTemplate that determines how the automatic loading indicator appears in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='collectionview-loadondemand-automatic-template-resource' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Namespace declaration required for using Telerik MAUI DatePicker control and its templates\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining ControlTemplate for NavigationViewItemView in .NET MAUI\nDESCRIPTION: This snippet shows how to define an implicit style for customizing the selection indicator color in NavigationViewItemView by overriding its ControlTemplate in .NET MAUI on Windows. It depends on having Telerik UI for .NET MAUI libraries. Define the ControlTemplates in your application resources to apply the customization.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-selection-indicator-color-navigationview.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ResourceDictionary>\n\t<ControlTemplate x:Key=\"NavigationViewItemView_ControlTemplate\">\n\t\t<Grid BackgroundColor=\"Transparent\">\n\t\t\t<telerikMauiControls:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n\t\t\t\t\t\t\t\t\t\t   Background=\"{TemplateBinding Background}\"\n\t\t\t\t\t\t\t\t\t\t   BorderColor=\"{TemplateBinding BorderColor}\"\n\t\t\t\t\t\t\t\t\t\t   BorderBrush=\"{TemplateBinding BorderBrush}\"\n\t\t\t\t\t\t\t\t\t\t   BorderThickness=\"{TemplateBinding BorderThickness}\"\n\t\t\t\t\t\t\t\t\t\t   CornerRadius=\"{TemplateBinding CornerRadius}\"\n\t\t\t\t\t\t\t\t\t\t   Margin=\"{TemplateBinding ContentPadding}\" />\n\t\t\t<Grid ColumnDefinitions=\"Auto, *\"\n\t\t\t\t  ColumnSpacing=\"{TemplateBinding Spacing}\">\n\t\t\t\t<Grid WidthRequest=\"{TemplateBinding LeadingWidth}\">\n\t\t\t\t\t<Image Source=\"{TemplateBinding ActualImageSource}\"\n\t\t\t\t\t\t   Aspect=\"{TemplateBinding ImageAspect}\"\n\t\t\t\t\t\t   WidthRequest=\"{TemplateBinding ImageWidth}\"\n\t\t\t\t\t\t   HeightRequest=\"{TemplateBinding ImageHeight}\" />\n\t\t\t\t</Grid>\n\t\t\t\t<ContentPresenter Grid.Column=\"1\" />\n\t\t\t</Grid>\n\t\t</Grid>\n\t</ControlTemplate>\n\t<ControlTemplate x:Key=\"NavigationViewItemView_ControlTemplate_WinUI\">\n\t\t<Grid BackgroundColor=\"Transparent\">\n\t\t\t<telerikMauiControls:RadBorder BackgroundColor=\"{TemplateBinding BackgroundColor}\"\n\t\t\t\t\t\t\t\t\t\t   Background=\"{TemplateBinding Background}\"\n\t\t\t\t\t\t\t\t\t\t   BorderColor=\"{TemplateBinding BorderColor}\"\n\t\t\t\t\t\t\t\t\t\t   BorderBrush=\"{TemplateBinding BorderBrush}\"\n\t\t\t\t\t\t\t\t\t\t   BorderThickness=\"{TemplateBinding BorderThickness}\"\n\t\t\t\t\t\t\t\t\t\t   CornerRadius=\"{TemplateBinding CornerRadius}\"\n\t\t\t\t\t\t\t\t\t\t   Margin=\"{TemplateBinding ContentPadding}\" />\n\t\t\t<Grid ColumnDefinitions=\"Auto, *\"\n\t\t\t\t  ColumnSpacing=\"{TemplateBinding Spacing}\">\n\t\t\t\t<Grid WidthRequest=\"{TemplateBinding LeadingWidth}\">\n\t\t\t\t\t<Image Source=\"{TemplateBinding ActualImageSource}\"\n\t\t\t\t\t\t   Aspect=\"{TemplateBinding ImageAspect}\"\n\t\t\t\t\t\t   WidthRequest=\"{TemplateBinding ImageWidth}\"\n\t\t\t\t\t\t   HeightRequest=\"{TemplateBinding ImageHeight}\" />\n\t\t\t\t</Grid>\n\t\t\t\t<ContentPresenter Grid.Column=\"1\" />\n\t\t\t</Grid>\n\t\t\t<telerikMauiControls:RadBorder IsVisible=\"{TemplateBinding IsSelected}\"\n\t\t\t\t\t\t\t\t\t\t   BackgroundColor=\"Pink\"\n\t\t\t\t\t\t\t\t\t\t   HorizontalOptions=\"Start\"\n\t\t\t\t\t\t\t\t\t\t   CornerRadius=\"2\"\n\t\t\t\t\t\t\t\t\t\t   WidthRequest=\"3\"\n\t\t\t\t\t\t\t\t\t\t   ScaleY=\"0.5\"\n\t\t\t\t\t\t\t\t\t\t   Margin=\"{TemplateBinding ContentPadding}\" />\n\t\t</Grid>\n\t</ControlTemplate>\n\t<Style TargetType=\"telerik:NavigationViewItemView\">\n\t\t<Setter Property=\"ControlTemplate\" Value=\"{OnPlatform Default={StaticResource NavigationViewItemView_ControlTemplate}, \n\t\t\t\t\t\t\t\t\t\t\t  WinUI={StaticResource NavigationViewItemView_ControlTemplate_WinUI}}\" />\n\t</Style>\n</ResourceDictionary>\n```\n\n----------------------------------------\n\nTITLE: Adding the Telerik Namespace - XAML\nDESCRIPTION: This snippet demonstrates how to add the Telerik namespace for XAML, allowing the use of Telerik components such as RadDataGrid in the application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/populating-with-data/data-binding.md#2025-04-21_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<!-- xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\" -->\n```\n\n----------------------------------------\n\nTITLE: Person Data Model Definition in C#\nDESCRIPTION: Definition of the Person data model class used for DataGrid items.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/current-cell.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-currentcell-dataitem' />\n```\n\n----------------------------------------\n\nTITLE: Defining CancelButton Style\nDESCRIPTION: In this snippet, learn how to set the cancel button style for the DateTimePicker to customize its visual representation.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datetimepicker/styling/popup-styling.md#2025-04-21_snippet_8\n\nLANGUAGE: XAML\nCODE:\n```\n<RadDateTimePicker CancelButtonStyle=\"{StaticResource CancelButtonStyle}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding SideDrawer Namespace in XAML\nDESCRIPTION: Adds the required Telerik XAML namespace for using the SideDrawer control in XAML files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/sidedrawer/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scaffolded Screen as MainPage in C# for Blank App Template\nDESCRIPTION: This snippet demonstrates how to set a newly scaffolded page as the MainPage of the application inside the App.xaml.cs file when using a Blank app template.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-code-integration/scaffoldings.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMainPage = new MyApp.Pages.TelerikDataGridPage();\n```\n\n----------------------------------------\n\nTITLE: Enabling Spell Checking for ComboBox in XAML\nDESCRIPTION: Illustrates how to enable spell checking for the ComboBox control by setting the IsSpellCheckEnabled property.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/combobox/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadComboBox IsSpellCheckEnabled=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Empty Event Handler Setup in C#\nDESCRIPTION: Initial empty event handler setup for the NumericInputEntry Loaded event.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/numericinput-overriding-winui-minwidth.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnNumericInputLoaded(object sender, EventArgs e)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration for Telerik Controls\nDESCRIPTION: Defines the required XAML namespace for using Telerik UI controls in .NET MAUI applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/cells/mouse-hover-cell.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for TimePicker\nDESCRIPTION: In this snippet, the necessary namespace for Telerik UI components is added to the XAML file for the TimePicker to function correctly.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Manual Telerik Assembly References Configuration\nDESCRIPTION: Comprehensive XML configuration for manually referencing Telerik assemblies in the project file.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-compatibility-net-telerik-nuget-filenotfoundexception.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <Reference Include=\"Telerik.Documents.CMapUtils\">\n    <HintPath>\"The dlls location\"\\Shared\\Telerik.Documents.CMapUtils.dll</HintPath>\n  </Reference>\n  <Reference Include=\"Telerik.Documents.Core\">\n    <HintPath>\"The dlls location\"\\Shared\\Telerik.Documents.Core.dll</HintPath>\n  </Reference>\n  <!-- ... Additional references ... -->\n</ItemGroup>\n\n<ItemGroup Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'\">\n  <Reference Include=\"Telerik.Maui.Controls\">\n    <HintPath>\"The dlls location\"\\WinUI\\Telerik.Maui.Controls.dll</HintPath>\n  </Reference>\n  <Reference Include=\"Telerik.Maui.Core\">\n    <HintPath>\"The dlls location\"\\WinUI\\Telerik.Maui.Core.dll</HintPath>\n  </Reference>\n  <Reference Include=\"Telerik.WinUI.Controls\">\n    <HintPath>\"The dlls location\"\\WinUI\\Telerik.WinUI.Controls.dll</HintPath>\n  </Reference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Listing AIPrompt Commands in Markdown\nDESCRIPTION: This code snippet lists the commands exposed by the AIPrompt control using Markdown bullet points. It includes the command names and their types.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/aiprompt/commands-events.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `PromptRequestCommand`(`ICommand`)&mdash;Executed when the end-user makes a request by pressing the input button inside the Input View.\n* `OutputItemCopyCommand`(`ICommand`)&mdash;Executed when the copy button of the generated response item is pressed.\n* `OutputItemRetryCommand`(`ICommand`)&mdash;Executed when the retry button of the generated response item is pressed\n* `OutputItemRatingChangedCommand`(`ICommand`)&mdash;Executed when the rating of the generated response is changed through the UI.\n* `CommandTappedCommand`(`ICommand`)&mdash;Executed when an AIPrompt command is pressed. \n```\n\n----------------------------------------\n\nTITLE: Implementing ViewModel class in C#\nDESCRIPTION: This snippet demonstrates the implementation of a ViewModel class for the TreeView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/descriptor.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='treeview-getting-started-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace Declaration\nDESCRIPTION: This XAML snippet shows how to add the Telerik namespace reference required for using the PDF Viewer control in XAML files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/custom.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Data Item Definition in C#\nDESCRIPTION: This snippet shows the definition of the data item used for binding to the DataGrid. This data item represents the structure of the data displayed in each row of the grid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/group-header-template.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-object' />\n```\n\n----------------------------------------\n\nTITLE: Styling DataFormRadDatePickerEditor in XAML\nDESCRIPTION: Demonstrates how to create a custom style for RadDatePicker and apply it to a DataFormRadDatePickerEditor. The style sets a placeholder, minimum date, and hides the toggle button.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/editors/picker-editors.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Style x:Key=\"RadDatePickerStyle\" TargetType=\"telerik:RadDatePicker\">\n    <Setter Property=\"Placeholder\"\n            Value=\"Enter the starting date\" />\n    <Setter Property=\"MinimumDate\"\n            Value=\"2022,1,1\" />\n    <Setter Property=\"IsToggleButtonVisible\"\n            Value=\"False\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Importing .NET MAUI RichTextEditor Namespace in C#\nDESCRIPTION: Demonstrates how to import the .NET MAUI RichTextEditor namespace in C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/migrate-from-xamarin.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Shows how to include the required Telerik namespace for using the TreeView control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/templates/empty-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Popup Content\nDESCRIPTION: This snippet shows two methods for dynamically changing the content of the global popup, either by replacing the entire Content property or modifying elements within a custom ContentView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-popup-irrespective-screen.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void ShowPopup()\n{\n    var globalPopup = (App.Current.MainPage as AppShell).GlobalPopup;\n\n    // Option 1 - Change the Content property\n    globalPopup.Content = new View();\n\n    // Option 2 - Modify a custom ContentView\n    ((PopupContentView)globalPopup.Content).TitleLabel.Text = \"New Title\";\n    ((PopupContentView)globalPopup.Content).DescriptionLabel.Text = \"New Description\";\n\n    globalPopup.IsOpen = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Prediction in .NET MAUI Entry\nDESCRIPTION: Demonstrates how to enable text prediction and automatic text correction in a Telerik Entry control by setting the IsTextPredictionEnabled property to True.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/entry/text-appearance.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadEntry x:Name=\"entry\"\n\t\t\t\t  IsTextPredictionEnabled=\"True\"\n\t\t\t\t  Placeholder=\"Enter Text\" />\n```\n\n----------------------------------------\n\nTITLE: TimeSpanPicker Custom Templates\nDESCRIPTION: This snippet shows the definition of the TimeSpanPicker control, presumably with custom templates applied for the placeholder, display, header, and footer.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timespanpicker/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<snippet id='timespanpicker-custom-templates' />\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace in XAML\nDESCRIPTION: This snippet shows how to add the Telerik namespace to your XAML file, allowing you to use Telerik UI controls in your .NET MAUI application. This is a necessary step to use any Telerik control in XAML.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/numericinput/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Restoring NuGet Packages from Official Source in .NET MAUI\nDESCRIPTION: This command forces the dotnet restore operation to use the official NuGet package source, ensuring that the correct packages are retrieved and unauthorized access errors are avoided.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/unauthorized-access-errors-dotnet-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet restore --source https://api.nuget.org/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Running Controls Samples on macOS Catalyst\nDESCRIPTION: Command to build and run the Controls Samples application on macOS using .NET MAUI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/controls-showcase-app.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build -t:Run -f net8.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Setting ResourceManager for Localization in .NET MAUI\nDESCRIPTION: Configures the ResourceManager for localization using custom resource files.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/globalization-localization.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nTelerikLocalizationManager.Manager.ResourceManager = MaskResource.ResourceManager;\n\nInitializeComponent();\n```\n\n----------------------------------------\n\nTITLE: Declaring .NET MAUI RichTextEditor in XAML\nDESCRIPTION: Shows the XAML namespace declaration for .NET MAUI RichTextEditor.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/migrate-from-xamarin.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionChanged Event - XAML\nDESCRIPTION: This snippet provides the implementation of the SelectionChanged event handler in XAML. It allows the application to respond to changes in the selected NavigationView item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/navigationview/events.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='navigationview-events-selectionchanged' />\n```\n\n----------------------------------------\n\nTITLE: TimePicker Placeholder Template (XAML)\nDESCRIPTION: This snippet shows how to define a custom template for the TimePicker placeholder. It allows you to customize the appearance of the TimePicker when no time has been selected.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/timepicker/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='timepicker-placeholder-template' />\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik in XAML\nDESCRIPTION: Adds the Telerik namespace to a XAML page to enable the use of Telerik controls like TemplatedButton. This is a prerequisite step for defining the control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\\\"http://schemas.telerik.com/2022/xaml/maui\\\"\n```\n\n----------------------------------------\n\nTITLE: Applying Individual HeaderLabelStyles to DataForm in XAML\nDESCRIPTION: This snippet demonstrates how to apply different HeaderLabelStyles to individual editors in a DataForm. It uses the HeaderStyle and HeaderStyleAlt defined earlier.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/dataform/styling/header-styling.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataForm x:Name=\"dataForm\">\n    <telerik:EntityPropertyEditor PropertyName=\"Age\">\n        <telerik:EntityPropertyEditor.HeaderLabelStyle>\n            <StaticResource Key=\"HeaderStyle\" />\n        </telerik:EntityPropertyEditor.HeaderLabelStyle>\n    </telerik:EntityPropertyEditor>\n    <telerik:EntityPropertyEditor PropertyName=\"Name\">\n        <telerik:EntityPropertyEditor.HeaderLabelStyle>\n            <StaticResource Key=\"HeaderStyleAlt\" />\n        </telerik:EntityPropertyEditor.HeaderLabelStyle>\n    </telerik:EntityPropertyEditor>\n</telerik:RadDataForm>\n```\n\n----------------------------------------\n\nTITLE: Defining Spinner Style in XAML\nDESCRIPTION: This snippet illustrates how to style the spinner element used within the DatePicker's drop-down menu, allowing customization of the item's appearance for a better user experience.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datepicker/styling/styling.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='datepicker-style-spinner-style' />\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor Position Logic in C#\nDESCRIPTION: C# implementation of the Focused event handler that sets the cursor position to the beginning of the MaskedEntry control. It includes helper methods to check if the mask is empty and to find child elements of a specific type.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-cursor-position-at-beginning.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void RadTextMaskedEntry_Focused(object sender, FocusEventArgs e)\n    {\n        if (IsMaskEmpty(this.mask.Text))\n        {\n            RadEntry entry = ChildrenOfType<RadEntry>(this.mask).FirstOrDefault();\n            if (entry != null)\n            {\n                this.mask.Dispatcher.DispatchDelayed(TimeSpan.FromSeconds(0.01), () =>\n                {\n#if IOS\n                entry.CursorPosition = 1;                            \n#endif\n                    entry.CursorPosition = 0;\n                });\n            }\n        }\n    }\n\n    private static IEnumerable<T> ChildrenOfType<T>(IView view)\n    where T : IView\n    {\n        if (view is T t)\n        {\n            yield return t;\n        }\n\n        if (view is Layout layout)\n        {\n            foreach (var child in layout.Children)\n            {\n                foreach (var tChild in ChildrenOfType<T>(child))\n                {\n                    yield return tChild;\n                }\n            }\n        }\n    }\n\n    private static bool IsMaskEmpty(string text)\n    {\n        foreach (var ch in text)\n        {\n            if (ch != '_')\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons for Ripple Effect in XAML\nDESCRIPTION: This snippet shows how to define the buttons in XAML for the TemplatedButton with a ripple effect. It serves as a setup to leverage the ripple effect properties of the RadEffects class.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/templatedbutton/ripple.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='templatedbutton-ripple-effect' />\n```\n\n----------------------------------------\n\nTITLE: Adding Required Namespaces for PDF Viewer\nDESCRIPTION: Required XAML namespaces for using the Telerik PDF Viewer and its search functionality in a .NET MAUI application.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/pdfviewer/search/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\nxmlns:telerikTextSearch=\"clr-namespace:Telerik.Windows.Documents.Fixed.Search;assembly=Telerik.Documents.Fixed\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Extension Access Keyboard Shortcuts\nDESCRIPTION: Keyboard shortcuts for accessing the VS Code extension launcher across different operating systems.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/installation/vs-code-integration/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCtrl+Shift+P on Windows/Linux\nCmd+Shift+P on Mac\n```\n\n----------------------------------------\n\nTITLE: Applying Indicator Style to RadSlideView in .NET MAUI\nDESCRIPTION: This XAML snippet demonstrates how to apply the previously defined IndicatorStyle to a RadSlideView control. By setting the IndicatorStyle property to a static resource, the SlideViewIndicator will inherit the defined style and enable navigation on tap.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/enable-indicator-click-slideview-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<telerik:RadSlideView x:Name=\\\"slideview\\\" AutomationId=\\\"slideView\\\" IndicatorStyle=\\\"{StaticResource IndicatorStyle}\\\">\n    <!-- Add your slide view items here -->\n</telerik:RadSlideView>\"\n```\n\n----------------------------------------\n\nTITLE: Xamarin Chart C# Namespace Import\nDESCRIPTION: The C# namespace import for the Xamarin Chart control, used in Xamarin.Forms projects to use Telerik Chart classes and functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Telerik.XamarinForms.Chart;\n```\n\n----------------------------------------\n\nTITLE: DataTable ViewModel Implementation\nDESCRIPTION: ViewModel class that creates and populates a DataTable with sample city data for the DataGrid.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/specifying-binding-cellcontenttemplate-datatable.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DataTableViewModel : NotifyPropertyChangedBase\n{\n    private DataTable data;\n\n    public DataTableViewModel()\n    {\n        this.Data = this.GetData();\n    }\n\n    public DataTable Data\n    {\n        get { return this.data; }\n        set { this.UpdateValue(ref this.data, value); }\n    }\n\n    private DataTable GetData()\n    {\n        DataTable country = new DataTable();\n        country.TableName = \"Cities\";\n        country.Columns.Add(\"Id\", typeof(int));\n        country.Columns.Add(\"City\", typeof(string));\n        country.Columns.Add(\"Population\", typeof(int));\n        country.Columns.Add(\"Visited On\", typeof(DateTime));\n        country.Columns.Add(\"IsVisited\", typeof(bool));\n\n        country.Rows.Add(0, \"Sofia\", 2000000, new DateTime(2012, 10, 1), true);\n        country.Rows.Add(1, \"New York\", 8419000, null, false);\n        country.Rows.Add(2, \"London\", 8982000, new DateTime(2019, 02, 11), true);\n        country.Rows.Add(3, \"Los Angeles\", 3967000, null, false);\n        country.Rows.Add(4, \"Budapest\", 1765000, new DateTime(2013, 02, 1), true);\n        country.Rows.Add(5, \"Tokyo\", 9375104, new DateTime(2015, 09, 1), true);\n\n        return country;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CryptoTracker on iOS with .NET CLI\nDESCRIPTION: Commands to build and run the CryptoTracker application on iOS using .NET CLI, including an example with specific device targeting\nSOURCE: https://github.com/telerik/maui-docs/blob/master/demos-and-sample-apps/crypto-app.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net8.0-ios\ndotnet build -t:Run -f net8.0-ios -p:_DeviceName=:v2:udid=02C556DA-64B8-440B-8F06-F8C56BB7CC22\n```\n\n----------------------------------------\n\nTITLE: Hiding Toggle Buttons for Case Sensitivity in XAML\nDESCRIPTION: This snippet applies an implicit style to hide the toggle buttons for case sensitivity matching in a Telerik RadToggleButton. This can be useful for simplifying the user interface by removing unnecessary controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/filtering/filter-control-template.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadToggleButton\">\n\t<Setter Property=\"IsVisible\" Value=\"False\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: .NET MAUI Chart XAML Namespace Declaration\nDESCRIPTION: The updated XAML namespace declaration for the .NET MAUI Chart control, used in .NET MAUI projects to reference the Telerik Chart control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/chart/xamarin-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: xaml\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Popup Events in .NET MAUI\nDESCRIPTION: Shows the implementation of event handlers for opening and closing the modal popup. These handlers control the popup's visibility and interaction lifecycle.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/popup/modal-popup.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='popup-features-modal-events' />\n```\n\n----------------------------------------\n\nTITLE: Adding Required XAML Namespace\nDESCRIPTION: Namespace declaration required for using Telerik MAUI controls\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/styling/dropdown-styling.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Expanding a Specific CollectionView Group in C#\nDESCRIPTION: Shows how to expand a particular group in the CollectionView using the ExpandGroup() method after retrieving the groups via GetGroups().\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/expand-collapse.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\ncollectionView-expandgroup\n```\n\n----------------------------------------\n\nTITLE: Defining Business Object for CollectionView\nDESCRIPTION: Creates a Country class with properties for Name and Population to be used as the data model for the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/styling/group-style-selector.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public string Name { get; set; }\n    public double Population { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: MAUI ListPicker C# Namespace Import\nDESCRIPTION: C# namespace import for Telerik ListPicker in .NET MAUI\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/listpicker/xamarin-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Alternative Definition for Horizontal ListViewGridLayout\nDESCRIPTION: Another example of setting Orientation property to Horizontal for a GridLayout definition in RadListView, with slightly different formatting.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/listview-horizontal-orientation--gridlayout.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadListView.LayoutDefinition>\n\t<telerik:ListViewGridLayout Orientation=\"Horizontal\"/>\n</telerik:RadListView.LayoutDefinition>\n```\n\n----------------------------------------\n\nTITLE: XAML Namespace Declaration for Telerik Controls\nDESCRIPTION: This snippet shows the XAML namespace declaration required to use Telerik UI for .NET MAUI controls within your XAML file. This allows you to reference and use the RadMap control and other Telerik components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/map/styling/shapesstyles.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n ```XAML\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n ```\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with Append Mode\nDESCRIPTION: XAML implementation of AutoComplete control with SuggestMode set to Append, which shows inline suggestions.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/autocomplete/suggest-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<snippet id='autocomplete-suggestmode-append'/>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Namespace Declaration in XAML\nDESCRIPTION: Required namespace declaration for using Telerik controls with explicit namespace reference.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/telerik-schema-error-cannot-resolve-type.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikCombo=\"clr-namespace:Telerik.Maui.Controls;assembly=Telerik.Maui.Controls\"\n```\n\n----------------------------------------\n\nTITLE: Defining Style Selectors as Resources in XAML\nDESCRIPTION: XAML code snippet demonstrating how to define MyCellContentStyleSelector, MyCellDecorationStyleSelector, and MyGroupStyleSelector as resources.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/theming-and-styles/style-selectors.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage.Resources>\n    <ResourceDictionary>\n        <local:MyCellContentStyleSelector x:Key=\"MyCellContentStyleSelector\"/>\n        <local:MyCellDecorationStyleSelector x:Key=\"MyCellDecorationStyleSelector\"/>\n        <local:MyGroupStyleSelector x:Key=\"MyGroupStyleSelector\"/>\n    </ResourceDictionary>\n</ContentPage.Resources>\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit Style for RadEntry\nDESCRIPTION: Demonstrates how to create an implicit style that removes the border by setting FocusedBorderBrush to transparent.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/remove-border-underline-masked-entry-control-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<Style TargetType=\"telerik:RadEntry\">\n    <Setter Property=\"FocusedBorderBrush\" Value=\"Transparent\" />\n</Style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Business Object Model for CollectionView\nDESCRIPTION: Defines a Country data model class with Id, Name, and Capital properties that will be used to demonstrate grouping in the CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/grouping/delegate-group-descriptor.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Country\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Capital { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Removal in C#\nDESCRIPTION: C# event handler implementation for the clear button click event that removes the associated tab from the TabView control.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/add-clear-button-tabview-header-net-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void OnRemoveTabClicked(object sender, EventArgs e)\n{\n    if (sender is Button { BindingContext: TabViewHeaderItem headerItem })\n    {\n        var tab = tabView.Items.First(i => i.HeaderText == headerItem.Text);\n        if (tab != null)\n        {\n            tabView.Items.Remove(tab);\n        }\n            \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ViewModel with Person Collection for DataGrid in C#\nDESCRIPTION: This snippet shows a ViewModel class that contains a collection of Person objects. It's used to populate the DataGrid with sample data for grouping demonstration.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datagrid/grouping/property-group-descriptor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<snippet id='datagrid-grouping-viewmodel' />\n```\n\n----------------------------------------\n\nTITLE: Namespace Differences for BadgeView Migration from Xamarin.Forms to .NET MAUI\nDESCRIPTION: Comparison table showing the namespace differences between Xamarin.Forms BadgeView and .NET MAUI BadgeView implementations. The table includes the control name, XAML namespace, and C# namespace for both platforms.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/badgeview/xamarin-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerikPrimitives=\"clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Primitives;\n```\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls;\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik Namespace in XAML for .NET MAUI\nDESCRIPTION: The namespace declaration required to use Telerik UI components in a .NET MAUI XAML file, providing access to controls like RadMaskedEntry.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maskedentry-border-styling.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionView with GroupTapCommand in XAML\nDESCRIPTION: This XAML snippet demonstrates how to define a CollectionView with GroupTapCommand binding and sample ItemTemplate and GroupHeaderTemplate. It shows the usage of the command in a grouped CollectionView.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/commands.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadCollectionView x:Name=\"collectionView\"\n                               ItemsSource=\"{Binding Groups}\"\n                               IsGrouped=\"True\"\n                               GroupHeaderTapCommand=\"{Binding GroupItemTapCommand}\">\n    <telerik:RadCollectionView.ItemTemplate>\n        <DataTemplate>\n            <telerik:RadBorder CornerRadius=\"8\"\n                               Margin=\"2\">\n                <Label Text=\"{Binding Name}\"\n                       FontSize=\"16\"\n                       VerticalOptions=\"Center\"\n                       Margin=\"10\" />\n            </telerik:RadBorder>\n        </DataTemplate>\n    </telerik:RadCollectionView.ItemTemplate>\n    <telerik:RadCollectionView.GroupHeaderTemplate>\n        <DataTemplate>\n            <telerik:RadBorder BackgroundColor=\"LightGray\"\n                               Padding=\"10\">\n                <Label Text=\"{Binding Name}\"\n                       FontAttributes=\"Bold\" />\n            </telerik:RadBorder>\n        </DataTemplate>\n    </telerik:RadCollectionView.GroupHeaderTemplate>\n</telerik:RadCollectionView>\n```\n\n----------------------------------------\n\nTITLE: Error Message Example\nDESCRIPTION: Sample error message showing the FileNotFoundException when Microsoft.Maui.Controls.Compatibility is missing.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-compatibility-net-telerik-nuget-filenotfoundexception.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'Microsoft.Maui.Controls.Compatibility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.'\n```\n\n----------------------------------------\n\nTITLE: Styling LabelToolbarItem in .NET MAUI\nDESCRIPTION: Shows how to style a LabelToolbarItem using various properties. This includes text formatting, image configuration, and layout options for customizing the appearance of the toolbar item.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/toolbar/items/label.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nStyle = new Style(typeof(LabelToolbarItemView))\n{\n    Setters = {\n        new Setter { Property = LabelToolbarItemView.TextProperty, Value = \"Styled Label\" },\n        new Setter { Property = LabelToolbarItemView.TextColorProperty, Value = Colors.Blue },\n        new Setter { Property = LabelToolbarItemView.FontSizeProperty, Value = 18.0 },\n        new Setter { Property = LabelToolbarItemView.FontAttributesProperty, Value = FontAttributes.Bold },\n        new Setter { Property = LabelToolbarItemView.ImageSourceProperty, Value = ImageSource.FromFile(\"icon.png\") },\n        new Setter { Property = LabelToolbarItemView.ImagePositionProperty, Value = ToolbarItemImagePosition.Left },\n        new Setter { Property = LabelToolbarItemView.ImageSpacingProperty, Value = 10.0 },\n        new Setter { Property = LabelToolbarItemView.DisplayOptionsProperty, Value = ToolbarItemDisplayOptions.Text | ToolbarItemDisplayOptions.Image }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Font Icon to Label in C#\nDESCRIPTION: This snippet shows how to programmatically add a Telerik font icon to a Label control using C#. It creates a new Label instance, sets the icon code to the Text property, and specifies the FontFamily.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/controls-icons.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar label = new Label\n{\n    Text = \"\\ue800\",\n    FontFamily = \"TelerikControlsIcons\"\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace for Telerik in XAML - .NET MAUI\nDESCRIPTION: This snippet adds the required namespace for Telerik to the XAML file, enabling the use of Telerik controls within the .NET MAUI application. It is critical for ensuring that XAML recognizes Telerik elements.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/datapager/integration/collectionview.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining TabItems DataTemplate in XAML\nDESCRIPTION: This XAML snippet defines a DataTemplate for TabViewItem content. It includes a RadItemsControl with a nested DataTemplate for displaying customer information.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/load-tab-content-on-demand-net-maui.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<DataTemplate x:Key=\"TabViewItemContentTemplate\">\n    <telerik:RadItemsControl ItemsSource=\"{Binding Customers}\">\n        <telerik:RadItemsControl.ItemTemplate>\n            <DataTemplate>\n                <Grid>\n                    <telerik:RadBorder BorderColor=\"LightGray\"\n                                    Padding=\"10\"\n                                    Margin=\"10,5\"\n                                    BorderThickness=\"1\" \n                                    CornerRadius=\"5\">\n                        <Grid RowDefinitions=\"Auto, Auto\" \n                            RowSpacing=\"5\">\n                            <HorizontalStackLayout Spacing=\"10\">\n                                <Label Text=\"&#xe836;\"\n                                    FontFamily=\"TelerikFontExamples\" />\n                                <Label Text=\"{Binding Name}\" />\n                            </HorizontalStackLayout>\n                            <HorizontalStackLayout Spacing=\"10\"\n                                                Grid.Row=\"1\">\n                                <Label Text=\"&#xe85d;\"\n                                    FontFamily=\"TelerikFontExamples\" />\n                                <Label Text=\"{Binding Number}\" />\n                            </HorizontalStackLayout>\n                        </Grid>\n                    </telerik:RadBorder>\n                </Grid>\n            </DataTemplate>\n        </telerik:RadItemsControl.ItemTemplate>\n    </telerik:RadItemsControl>\n</DataTemplate>\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Font Icons in .NET MAUI Application\nDESCRIPTION: This code snippet demonstrates how to register the Telerik font .ttf files in a .NET MAUI application. It's added to the MauiProgram.cs file to configure the fonts used in the app.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/font-icons/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n    fonts.AddFont(\"telerikcontrolsicons.ttf\", \"TelerikControlsIcons\");\n    fonts.AddFont(\"telerikfontexamples.ttf\", \"TelerikFontExamples\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding telerik Namespace to XAML in .NET MAUI\nDESCRIPTION: Adds the telerik namespace to the XAML file to enable the use of Telerik UI controls.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/togglebutton/command.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Importing .NET MAUI RichTextEditorToolbar Namespace in C#\nDESCRIPTION: Shows how to import the .NET MAUI RichTextEditorToolbar namespace in C# code.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/richtexteditor/migrate-from-xamarin.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Maui.Controls.RichTextEditor;\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Error Message\nDESCRIPTION: Error message displayed when attempting to install the Telerik UI for .NET MAUI package from an incorrect NuGet source.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/unable-to-find-package.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUnable to find package Telerik.UI.for.Maui. No packages exist with this id in source(s): nuget.org\n```\n\n----------------------------------------\n\nTITLE: Setting ItemStyle for TreeView in XAML\nDESCRIPTION: Shows how to define and apply a style for TreeView items using the ItemStyle property at the TreeView level.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/treeview/styling/item-style.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:Style TargetType=\"telerik:TreeViewItemView\">\n    <telerik:Style.Setters>\n        <Setter Property=\"BorderThickness\" Value=\"1\" />\n        <Setter Property=\"BorderBrush\" Value=\"LightGray\" />\n        <Setter Property=\"BackgroundColor\" Value=\"AliceBlue\" />\n    </telerik:Style.Setters>\n</telerik:Style>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik XAML Namespace\nDESCRIPTION: Adding the required Telerik namespace to the XAML file for accessing CollectionView functionality.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/collectionview/load-on-demand/collection.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n```\n\n----------------------------------------\n\nTITLE: Defining DataGrid Control with Custom Columns in XAML\nDESCRIPTION: This snippet shows how to define a DataGrid control with custom columns for Country and Capital, which will use the styled filtering UI.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/styling-filtering-ui-distinct-values-datagrid-maui.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:RadDataGrid x:Name=\"datagrid\" AutoGenerateColumns=\"False\">\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"Country\" >\n        </telerik:DataGridTextColumn>\n        <telerik:DataGridTextColumn PropertyName=\"Capital\"/>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataGrid with CellContentTemplate in XAML\nDESCRIPTION: XAML implementation of RadDataGrid with two columns (City and IsVisited) using CellContentTemplate and proper DataTable binding syntax.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/specifying-binding-cellcontenttemplate-datatable.md#2025-04-21_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<telerik:RadDataGrid ItemsSource=\"{Binding Data}\" AutoGenerateColumns=\"False\">\n    <telerik:RadDataGrid.BindingContext>\n        <local:DataTableViewModel/>\n    </telerik:RadDataGrid.BindingContext>\n    <telerik:RadDataGrid.Columns>\n        <telerik:DataGridTextColumn PropertyName=\"City\">\n            <telerik:DataGridTextColumn.CellContentTemplate>\n                <DataTemplate>\n                    <Label Text=\"{Binding [City]}\"/>\n                </DataTemplate>\n            </telerik:DataGridTextColumn.CellContentTemplate>\n        </telerik:DataGridTextColumn>\n        <telerik:DataGridBooleanColumn PropertyName=\"IsVisited\">\n            <telerik:DataGridBooleanColumn.CellContentTemplate>\n                <DataTemplate>\n                    <telerik:RadCheckBox IsChecked=\"{Binding [IsVisited]}\"/>\n                </DataTemplate>\n            </telerik:DataGridBooleanColumn.CellContentTemplate>\n        </telerik:DataGridBooleanColumn>\n    </telerik:RadDataGrid.Columns>\n</telerik:RadDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Defining DayStyleSelector for Telerik Calendar XML\nDESCRIPTION: This code snippet defines a custom DayStyleSelector in the ResourceDictionary to set various styles for the calendar labels based on their states such as normal, selected, out-of-scope, and those specific to Sundays. It uses styles for customizing the text color, font attributes, and background color for the CalendarBorderLabel and CalendarLabel components.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/customize-calendar-appearance-scheduler-net-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<local:CustomCalendarStyleSelector x:Key=\"DayStyleSelector\">\n    <local:CustomCalendarStyleSelector.CustomSelectedLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\">\n            <Setter Property=\"TextColor\" Value=\"#04A2AA\" />\n            <Setter Property=\"FontAttributes\" Value=\"Italic\" />\n            <Setter Property=\"BorderThickness\" Value=\"0\" />\n            <Setter Property=\"BorderBackgroundColor\" Value=\"#9AD9DD\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.CustomSelectedLabelStyle>\n    <local:CustomCalendarStyleSelector.CustomSelectedMouseOverLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\">\n            <Setter Property=\"BorderBackgroundColor\" Value=\"#B3E3E5\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.CustomSelectedMouseOverLabelStyle>\n    <local:CustomCalendarStyleSelector.CustomOutOfScopeLabelStyle>\n        <Style TargetType=\"telerik:CalendarLabel\">\n            <Setter Property=\"TextColor\" Value=\"#6104A2AA\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.CustomOutOfScopeLabelStyle>\n    <local:CustomCalendarStyleSelector.CustomNormalLabelStyle>\n        <Style TargetType=\"telerik:CalendarLabel\">\n            <Setter Property=\"TextColor\" Value=\"#04A2AA\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.CustomNormalLabelStyle>\n    <local:CustomCalendarStyleSelector.SundayLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\">\n            <Setter Property=\"TextColor\" Value=\"#FF9040\" />\n            <Setter Property=\"HorizontalTextAlignment\" Value=\"Center\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.SundayLabelStyle>\n    <local:CustomCalendarStyleSelector.SundayMouseOverLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\">\n            <Setter Property=\"BorderBackgroundColor\" Value=\"#FFE8D8\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.SundayMouseOverLabelStyle>\n    <local:CustomCalendarStyleSelector.SundaySelectedLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\">\n            <Setter Property=\"BorderBackgroundColor\" Value=\"#FFDDC5\" />\n        </Style>\n    </local:CustomCalendarStyleSelector.SundaySelectedLabelStyle>\n    <local:CustomCalendarStyleSelector.SundaySelectedMouseOverLabelStyle>\n        <Style TargetType=\"telerik:CalendarBorderLabel\" />\n    </local:CustomCalendarStyleSelector.SundaySelectedMouseOverLabelStyle>\n </local:CustomCalendarStyleSelector>\n```\n\n----------------------------------------\n\nTITLE: City Data Model Definition\nDESCRIPTION: C# class defining the data model for city items in the ComboBox.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/combobox-clear-selection-command.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class City\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Model and ViewModel in C# for DataGrid\nDESCRIPTION: This code snippet provides a simple model and ViewModel setup for populating the DataGrid with sample data. It includes an ObservableCollection of data items used as the DataGrid's ItemsSource, facilitating dynamic UI binding and interaction.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/datagrid-maui-cell-content-template-selector.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ViewModel\n{\n    public ObservableCollection<Data> Items { get; set; }\n    public ViewModel()\n    {\n\n        this.Items = new ObservableCollection<Data>()\n        {\n                new Data { Country = \"India\", Capital = \"New Delhi\"},\n                new Data { Country = \"South\", Capital = \"Cape Town\"},\n                new Data { Country = \"Nigeria\", Capital = \"Abuja\"},\n                new Data { Country = \"Singapore\", Capital = \"Singapore\"}\n        };\n    }\n}\npublic class Data\n{\n    public string Country { get; set; }\n    public string Capital { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Xamarin CheckBox C# Namespace Import\nDESCRIPTION: C# namespace import statement for using the Telerik CheckBox control in Xamarin.Forms applications.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/controls/checkbox/xamarin-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.XamarinForms.Primitives;\n```\n\n----------------------------------------\n\nTITLE: Defining RadScheduler in XAML\nDESCRIPTION: This code snippet defines a RadScheduler control in XAML. It binds the HeaderTextFormat property of the MonthViewDefinition to a property named 'MyProperty'. This allows for customization of the header text using data binding.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/display-week-number-scheduler-header-maui.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<telerik:RadScheduler AutomationId=\\\"scheduler\\\" CurrentDate=\\\"10/18/2023\\\">\n    <telerik:RadScheduler.ViewDefinitions>\n        <telerik:MonthViewDefinition Title=\\\"MonthView scheduler\\\" HeaderTextFormat=\\\"{Binding MyProperty}\\\" />\n    </telerik:RadScheduler.ViewDefinitions>\n</telerik:RadScheduler>\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Keyboard by Tapping Outside Entry Control in XAML\nDESCRIPTION: Demonstrates how to set the HideSoftInputOnTapped property on a ContentPage to automatically dismiss the soft keyboard when tapping outside an Entry control\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/hide-softkeyboard-without-losing-focus-maui-entry.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:telerik=\"http://schemas.telerik.com/2022/xaml/maui\"\n             xmlns:local=\"clr-namespace:MauiApp5\"\n             HideSoftInputOnTapped=\"True\"\n             x:Class=\"MauiApp5.MainPage\">\n    <VerticalStackLayout>\n        <Entry Placeholder=\"maui entry\" x:Name=\"maui\"/>\n        <telerik:RadEntry Placeholder=\"telerik entry\" x:Name=\"telerik\"/>\n    </VerticalStackLayout>\n</ContentPage>\n```\n\n----------------------------------------\n\nTITLE: Solution for Fixing NotSupportedException by Updating Windows SDK Version\nDESCRIPTION: The solution to resolve the NotSupportedException involves updating the Windows SDK version in the project file to use version 10.0.19041.54, which contains the necessary fix for the managed vtable types issue in SkiaSharp.\nSOURCE: https://github.com/telerik/maui-docs/blob/master/knowledge-base/maui-managed-vtable-types-notsupportedexception.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<WindowsSdkPackageVersion>10.0.19041.54</WindowsSdkPackageVersion>\n```"
  }
]