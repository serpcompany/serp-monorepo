[
  {
    "owner": "prevwong",
    "repo": "craft.js",
    "content": "TITLE: Setting Up Craft.js Editor and Frame Components in React (JSX)\nDESCRIPTION: This snippet initializes the main page editor using the Craft.js <Editor> and <Frame> components within a React app. It sets up the resolver to include custom user components and arranges the layout with Material UI's Grid and Paper. The Frame defines the editable Canvas area, embedding user components while the sidebar presents editing tools and settings panels. Required dependencies include React, @mui/material, and @craftjs/core. Inputs are provided via user interactivity in the editor UI, while outputs are the rendered, editable page and associated drag-and-drop functionality.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.js\nimport React from 'react';\nimport {Typography, Paper, Grid} from '@mui/material';\n\nimport { Toolbox } from '../components/Toolbox';\nimport { SettingsPanel } from '../components/SettingsPanel';\n\nimport { Container } from '../components/user/Container';\nimport { Button } from '../components/user/Button';\nimport { Card } from '../components/user/Card';\nimport { Text } from '../components/user/Text';\n\nimport {Editor, Frame, Element} from \"@craftjs/core\";\n\nexport default function App() {\n  return (\n    <div>\n      <Typography variant=\"h5\" align=\"center\">A super simple page editor</Typography>\n        <Editor resolver={{Card, Button, Text, Container}}> \n          <Grid container spacing={3}>\n            <Grid item xs>\n              <Frame>\n                <Container padding={5} background=\"#eee\">\n                  <Card />\n                  <Button size=\"small\" variant=\"outlined\">Click</Button>\n                  <Text size=\"small\" text=\"Hi world!\" />\n                  <Container padding={6} background=\"#999\">\n                    <Text size=\"small\" text=\"It's me again!\" />\n                  </Container>\n                </Container>\n              </Frame>\n            </Grid>\n            <Grid item xs={3}>\n              <Paper className={classes.root}>\n                  <Toolbox />\n                  <SettingsPanel />\n              </Paper>          \n            </Grid>\n          </Grid>\n        </Editor>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a React Editor UI with Craft.js Components (JSX)\nDESCRIPTION: This snippet showcases how to assemble a custom page editor UI using Craft.js and React. It integrates the Editor, Frame, Canvas, and Selector components from @craftjs/core and demonstrates how user-defined components can be rendered within a draggable, editable canvas. Expected prerequisites are React and Craft.js; the main inputs are user-defined React components, and the output is a fully navigable editor interface.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport {Editor, Frame, Canvas, Selector} from \"@craftjs/core\";\nconst App = () => {\n  return (\n    <div>\n      <header>Some fancy header or whatever</header>\n      <Editor>\n        // Editable area starts here\n        <Frame resolver={TextComponent, Container}> \n          <Canvas>\n            <TextComponent text=\"I'm already rendered here\" />\n          </Canvas>\n        </Frame>\n      </Editor>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Components with Craft.js in React (JSX/TSX)\nDESCRIPTION: This snippet defines a typed User Component in React for the Craft.js framework, demonstrating how to use the static craft property for configuration including display name, default props, drag-and-drop rules, and related settings panels. It requires Craft.js and React as dependencies, and makes use of the useNode hook for accessing and updating component props. Key parameters include the props for the component (color, text), and rule callbacks for managing drag-and-drop interactions. The code outputs a styled text element and an associated settings panel, and assumes the surrounding infrastructure of Craft.js is in place.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/UserComponent.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype TextProps = {\n  color: string;\n  text: string;\n};\n\nconst TextComponent: UserComponent<TextProps> = ({color, text}) => {\n  return (\n    <h2 style={{color}}>{text}</h2>\n  )\n}\n\nconst TextSettings = () => {\n  const {props, setProp} = useNode();\n  return (\n    <div>\n      Text: <input type=\"text\" value={props.text} onChange={e => setProp(props => props.text = e.target.value) }/>\n      Color: <input type=\"text\" value={props.color} onChange={e => setProp(props => props.color = e.target.value) }/>\n    </div>\n  )\n}\nTextComponent.craft = {\n  displayName: \"My Text Component\",\n  props: {\n    color: \"#000\",\n    text: \"Hi\"\n  },\n  rules: {\n    canDrag: (self: Node, helper) => true,\n    canMoveIn: (incoming: Node[], self: Node, helper) => true,\n    canMoveOut: (outgoing: Node[], self: Node, helper) => true\n  },\n  related: {\n    settings: TextSettings\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assembling the Editor Application Layout with React Components - JavaScript (JSX)\nDESCRIPTION: This index file combines all previously defined components to form the full editor application UI. It imports Toolbox, SettingsPanel, Topbar, and the user components (Container, Button, Card, Text), arranging them with Material-UI Grid and Paper. Entry point is an export default React function (App), and dependencies are Material-UI and the custom components. No runtime constraints; intended as the main page for the editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/index.js\n\nimport React from 'react';\nimport {Typography, Paper, Grid} from '@mui/material';\n\nimport { Toolbox } from '../components/Toolbox';\nimport { SettingsPanel } from '../components/SettingsPanel';\nimport { Topbar } from '../components/Topbar';\n\nimport { Container } from '../components/user/Container';\nimport { Button } from '../components/user/Button';\nimport { Card } from '../components/user/Card';\nimport { Text } from '../components/user/Text';\n\nexport default function App() {\n  return (\n    <div style={{margin: \"0 auto\", width: \"800px\"}}>\n      <Typography variant=\"h5\" align=\"center\">A super simple page editor</Typography>\n      <Grid container spacing={3} style={{paddingTop: \"10px\"}}>\n        <Topbar />\n        <Grid item xs>\n          <Container padding={5} background=\"#eee\">\n            <Card />\n          </Container>\n        </Grid>\n        <Grid item xs={3}>\n          <Paper>\n              <Toolbox />\n              <SettingsPanel />\n          </Paper>          \n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Craft.js Component Metadata with Static Craft Property (Craft.js, JSX)\nDESCRIPTION: This snippet sets up the configuration object on a React component via a static craft property. It defines default props, drag/drop/movement rules as functions, and a related object for extensions. This pattern is required for advanced component behavior in the Craft.js editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = () => {...}\nText.craft = {\n  props: {},\n  rules: {\n    canDrop: () => true,\n    canDrag: () => true,\n    canMoveIn: () => true,\n    canMoveOut: () => true\n  },\n  related: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Draggable User Component with Craft.js and React (JSX)\nDESCRIPTION: This snippet demonstrates how to create a simple draggable user component in a Craft.js-powered React application. It uses the useNode hook from @craftjs/core to set up drag connectors, enabling the component to be manipulated within the editor. The 'text' prop determines the displayed heading. No additional dependencies aside from React and @craftjs/core are required; expected inputs are the component props, and the output is a draggable DOM node.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useNode} from \"@craftjs/core\";\n\nconst TextComponent = ({text}) => {\n  const { connectors: {drag} } = useNode();\n\n  return (\n    <div ref={drag}>\n      <h2>{text}</h2>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Composing the Page Editor UI with Craft.js and React\nDESCRIPTION: This snippet exemplifies how to assemble the entire page editor UI using React and Craft.js. It imports the Editor, Frame, and Element components from @craftjs/core to compose the editable area. User components such as TextComponent and Container are provided to the Frame via the resolver, and the frame contains nested Elements for initial rendering. Dependencies: React, @craftjs/core, user-defined TextComponent and Container. Inputs: no explicit props; relies on context. Output: renders an editor with a customizable header and main editable region.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { Editor, Frame, Element  } from \"@craftjs/core\";\nconst App = () => {\n  return (\n    <div>\n      <header>Some fancy header or whatever</header>\n      <Editor>\n        // Editable area starts here\n        <Frame resolver={{ TextComponent, Container }}>\n          <Element canvas is={TextComponent} text=\"I'm already rendered here\" />\n        </Frame>\n      </Editor>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Related Toolbar Component for Editing Props (Craft.js, JSX)\nDESCRIPTION: This example establishes a related Toolbar settings component via the related property of Text.craft, referencing TextToolbarSettings. The Toolbar component, using useNode, gets and updates fontSize for the Text node. It offers a direct UI for property changes. This supports extensible editor UI and shared node state.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => { /** same as the previous example **/ }\nText.craft = {\n  related: {\n    toolbar: TextToolbarSettings\n  }\n}\n\nconst TextToolbarSettings = () => {\n  const { setProp, fontSize } = useNode((node) => ({\n    fontSize: node.data.props.fontSize\n  }));\n\n  return (\n    <div>\n      <h2>Text settings</h2>\n      <input \n        type = \"number\" \n        value={fontSize} \n        placeholder=\"Font size\"\n        onChange={e => \n          setProp(prop => prop.fontSize = e.target.value) \n        }\n       />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Toolbox with Craft.js in React (JSX)\nDESCRIPTION: This snippet defines a React Toolbox component that provides a set of Material-UI Buttons, each connected to Craft.js's create connector via refs. Users can drag these buttons into a Craft.js-powered editor to instantiate user components (Button, Text, Container, Card) on drop. The example demonstrates use of useEditor from @craftjs/core, integration with Element for droppable containers, and Material-UI for layout and styling. Dependencies include React, @mui/material, and @craftjs/core, and the snippet expects parent context of a Craft.js Editor. Each button creates a specific component instance upon dropping, with properties like text or padding as parameters.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_22\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\";\nimport { Box, Typography, Grid, Button as MaterialButton } from \"@mui/material\";\nimport { Element, useEditor } from \"@craftjs/core\";\nimport { Container } from \"./user/Container\";\nimport { Card } from \"./user/Card\";\nimport { Button } from \"./user/Button\";\nimport { Text } from \"./user/Text\";\n\nexport const Toolbox = () => {\n  const { connectors, query } = useEditor();\n\n  return (\n    <Box px={2} py={2}>\n      <Grid container direction=\"column\"  alignItems=\"center\" justify=\"center\" spacing={1}>\n        <Box pb={2}>\n          <Typography>Drag to add</Typography>\n        </Box>\n        <Grid container direction=\"column\" item>\n          <MaterialButton ref={ref=> connectors.create(ref, <Button text=\"Click me\" size=\"small\" />)} variant=\"contained\">Button</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton ref={ref=> connectors.create(ref, <Text text=\"Hi world\" />)} variant=\"contained\">Text</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton ref={ref=> connectors.create(ref, <Element is={Container} padding={20} canvas />)} variant=\"contained\">Container</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton ref={ref=> connectors.create(ref, <Card />)} variant=\"contained\">Card</MaterialButton>\n        </Grid>\n      </Grid>\n    </Box>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Droppable Container Component in Craft.js (JSX)\nDESCRIPTION: This snippet illustrates how to define a container component in Craft.js, allowing other components to be dropped into a specific region by using the <Canvas /> element. The Container component is made draggable and contains a Canvas section for drag-and-drop content. Dependencies are Craft.js and React; inputs are the child components to be placed inside, and the output is a live droppable UI element.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { connectors: {drag} } = useNode();\n\n  return (\n    <div ref={drag}>\n      <Canvas id=\"drop_section\">\n         // Now users will be able to drag/drop components into this section\n        <TextComponent />\n      </Canvas>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodes in Craft.js Frame with Element - React JSX\nDESCRIPTION: Illustrates how to use the <Element /> component within the <Frame /> of a Craft.js project to define root, child, and canvas nodes. Dependencies include React and Craft.js components (Craft, Frame, Element), and a user-defined component MyComp. The snippet demonstrates specifying droppable and draggable areas using canvas and is props, as well as nested Element usage. Inputs include children passed to the Frame and Element components. Outputs are editable node tree structures in the Craft.js editor. All required props and component imports are assumed available in context.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Element.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Craft, Frame, Element} from \"@craftjs/core\";\n\nconst App = () => {\n  return (\n    <div>\n      <h2>My App!</h2>\n      <Craft resolver={{MyComp}}>\n        <h2>My Page Editor</h2>\n        <Frame> \n          <Element is=\"div\" canvas> // defines the Root Node, droppable\n            <h2>Drag me around</h2> // Node of type h2, draggable\n            <MyComp text=\"You can drag me around too\" /> // Node of type MyComp, draggable\n            <Element is=\"div\" style={{background: \"#333\" }} canvas> // Canvas Node of type div, draggable and droppable\n              <p>Same here</p> // Not a Node; not draggable\n            </Element>\n          </Element>\n        </Frame>\n      </Craft>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Droppable Canvas Region Inside a User Component (Craft.js, JSX)\nDESCRIPTION: Here, the Hero component demonstrates both a linked Text node and a droppable canvas region using two nested Element components: one for the editable title, and one (with canvas prop) for a section with an id. This enables both text editing and drag-and-drop layout inside a parent User Component. Note: The code contains a typo with 'Elemnet', which should be corrected to 'Element'.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = ({background}) => {\n  return (\n    <div style={{ background }}>\n      <Element is={Text} text=\"Hero Title\" id=\"title_text\" />\n      <Element canvas is=\"section\" id=\"droppable_container\">\n        <h2>I'm dropped here for now</h2>\n      </Elemnet>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Canvas Nodes for Drag-and-Drop using Craft.js Element (JSX)\nDESCRIPTION: This code demonstrates how to convert default, static nodes into draggable/droppable Canvas nodes by wrapping user components (e.g. Container) with the <Element /> component and the canvas prop. Immediate children of a Canvas node become draggable, while Canvas nodes themselves become droppable. Required dependency: @craftjs/core. Inputs are user component props; outputs are interactive drag-and-drop areas.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <Element is={Container} padding={5} background=\"#eee\" canvas> // Canvas Node of type Container, droppable\n    <Card /> // Node of type Card\n    <Button size=\"small\" variant=\"outlined\">Click</Button> // Node of type Button, draggable\n    <Text size=\"small\" text=\"Hi world!\" /> // Node of type Text, draggable\n    <Element is={Container} padding={2} background=\"#999\" canvas> // Canvas Node of type Container, droppable and draggable\n       <Text size=\"small\" text=\"It's me again!\" /> // Node of type Text, draggable\n    </Element>\n  </Element>\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Serializing Editor State to JSON in Craft.js (JSX)\nDESCRIPTION: This snippet provides an example of how to serialize the editor's current state to a JSON string using the query.serialize() function from Craft.js. It defines a React SaveButton that, when clicked, logs the JSON representation of the editor state. Required dependency is Craft.js; the output is the serialized JSON, useful for storage or transmission.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst SaveButton = () => {\n  const { query } = useEditor();\n  return <a onClick={() => console.log(query.serialize()) }>Get JSON</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Linked Nodes with Element in User Components - React JSX\nDESCRIPTION: Shows how to use the <Element /> component inside a user-defined component to create linked nodes, which are connected to their parent by a unique ID. Requires React and Craft.js, and assumes a Container component is present. The id prop is mandatory in this context. Inputs are component nesting and ID assignment. Outputs are nodes linked for the Craft.js editor. Note the constraint that an id prop is required when Element is used within a User Component.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Element.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = () => {\n  return (\n    <div>\n      <h3>I'm a Hero</h3>\n      <Element id=\"drop\" is={Container} canvas>\n        <h3>Hi</h3>\n      </Element>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using User Components as Nodes - React (JSX)\nDESCRIPTION: This snippet outlines how a custom user component is defined and incorporated as a node within Craft.js. It requires React and the Craft.js framework. The user component can expose metadata (via the \"craft\" property) to set custom names and options, which are captured in the node's data structure for use in the editor. The example illustrates both component declaration and instantiation with props.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Node.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Definition\\nconst Container = () => {}\\nContainer.craft = {\\n  name: \\\"SimpleContainer\\\"\\n};\\n\\n\\n// Example\\n<Container bg=\\\"#fff\\\" />\\n\\n\\\"node-b\\\": {\\n  id: \\\"node-b\\\",\\n  data: {\\n    type: Container,\\n    props: {\\n      bg: \\\"#fff\\\"\\n    },\\n    name: \\\"Container\\\",\\n    displayName: \\\"SimpleContainer\\\",\\n    isCanvas: false\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Text Component in React (Craft.js, JSX)\nDESCRIPTION: This snippet defines a basic Text component using ES6 syntax, where the fontSize and displayed string are passed as props. The <span> is marked contenteditable, enabling direct manipulation in-page. No external dependencies beyond React are required. Inputs: text, fontSize; Output: a rendered, editable span.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => {\n  return (\n    <span contenteditable=\"true\" style={{fontSize}}>{text}</span>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Properties in Nodes with useNode Hook and Element - React JSX\nDESCRIPTION: Demonstrates a pattern for reading custom node properties (such as css) using the useNode hook in React, and assigning them as styles on the rendered element. Requires React, Craft.js's useNode hook, and Entity and Container components. The custom property is accessed in the node data and applied to the div's style. Inputs include the node's custom properties, outputs are applied visual styles. The snippet also shows attaching a custom property via a static craft field on the component. Limitations: relies on Craft.js's node context.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Element.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = () => {\n  const { css } = useNode(node => ({\n    css: node.data.custom.css\n  }));\n\n  return (\n    <div style={css}>\n      <h3>I'm a Hero</h3>\n      <Element id=\"drop\" is={Container} canvas>\n        <h3>Hi</h3>\n      </Element>\n    </div>\n  )\n}\n\nHero.craft = {\n  custom: {\n    css: {\n      background: \"#eee\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Place Prop Editing with setProp (Craft.js, JSX)\nDESCRIPTION: This version of the Text component demonstrates tying content editing in the UI directly to the node's props in Craft.js using setProp, which is triggered onKeyUp. The snippet makes the span editable and saves user-inputted text into the node's state. This interactivity relies on Craft.js hooks and is meant for use in the editor context.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => {\n  const { connectors: {connect, drag}, actions: {setProp} } = useNode();\n\n  return (\n    <span ref={dom => connect(drag(dom))} style={{fontSize}} onKeyUp={(e) => {\n        setProp(props => {\n          props.text = e.target.innerText;\n        })\n      }}>{text}\n    </span>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Card Component Using Custom User Components - JavaScript (JSX)\nDESCRIPTION: This Card component integrates previously defined Container, Text, and Button components to create a composite UI element. Props include background and padding; it displays a styled card with title, subtitle, and an actionable button. Dependencies are React plus the custom user components. It demonstrates component composition for user-editable content.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Card.js\nimport React  from \"react\";\nimport { Text } from \"./Text\";\nimport { Button } from \"./Button\";\nimport { Container } from \"./Container\";\n\nexport const Card = ({background, padding = 20}) => {\n  return (\n    <Container background={background} padding={padding}>\n      <div className=\"text-only\">\n        <Text text=\"Title\" fontSize={20} />\n        <Text text=\"Subtitle\" fontSize={15} />\n      </div>\n      <div className=\"buttons-only\">\n        <Button size=\"small\" text=\"Learn more\" variant=\"contained\" color=\"primary\" />\n      </div>\n    </Container>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Properties on Element Node - React JSX\nDESCRIPTION: Demonstrates how to pass a custom property (css) to a Hero component rendered as a node via <Element /> within a Craft.js <Frame>. Requires that the Hero component is defined and expects a custom.css structure. The custom prop sets the node's custom property at creation, allowing for dynamic styling. Inputs: custom object with css properties; outputs: applies provided styles to Hero rendered in Frame. Limitations: presumes Hero is configured to use and apply custom properties.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Element.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <Element is={Hero} custom={{\n    css: {\n      background: \"#ddd\"\n    }\n  }} />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Prop Values Using Static Craft Property (Craft.js, JSX)\nDESCRIPTION: This example demonstrates specifying default property values inside the static craft.props for a component, allowing the editor to correctly initialize and manage node state. This prevents empty undefined props when accessing node props programmatically in the editor. The approach is to provide a props object with text and fontSize fields.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => { /** same as previous example **/ }\nText.craft = {\n  props: {\n    text: \"Hi there!\",\n    fontSize: 12\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Copy Function for Components in Craft.js (JSX)\nDESCRIPTION: This snippet highlights how to extend editor functionality in Craft.js by implementing a copy/duplicate feature for components. Using useEditor and useNode hooks, it retrieves the current node's type and props, creates a new node, and adds it to the editor state upon user interaction. Prerequisites are React and Craft.js; inputs are user clicks, and the output is a duplicated component in the editor. Take care to ensure type and prop extraction produces valid React elements.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEditor, useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { actions: {add}, query: { createNode, node } } = useEditor();\n  const { id, connectors: {drag, connect} } = useNode();\n  return (\n    <div ref={dom => connect(drag(dom))}>\n      ...\n      <a onClick={() => {\n        const { data: {type, props}} = node(id).get();\n        add(\n          createNode(React.createElement(type, props));\n        );\n      }}>\n        Make a copy of me\n      </a>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Drag and Connectors in a Container Component (Craft.js, JSX)\nDESCRIPTION: This example implements a Container component with drag and connect capabilities using the useNode hook, making children draggable within the Craft.js editor. The App component showcases nesting, with Element and Container components arranged to demonstrate draggable and droppable regions. Craft.js Editor and Frame components are required dependencies.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Container = ({children}) => {\n  const { connectors: {connect, drag} } = useNode();\n  return (\n    <div ref={dom => connect(drag(dom))}>\n      {children}\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Editor resolvers={{Container}}>\n      <Frame>\n        <Element is={Container} canvas> // (i)\n          <Container> // (ii)\n            <h2>Hi</h2>\n          </Container>\n          <Element is={Container} canvas> // (iii)\n            <h2>Hi</h2>\n          </Element>\n        </Element>\n      </Frame>\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Drag Action Based on Props via Craft.js Rules (Craft.js, JSX)\nDESCRIPTION: This snippet adds a custom drag rule in the static craft property. The canDrag function checks if the text prop is set specifically to 'Drag', preventing dragging otherwise. This access pattern ensures that permitted actions reflect component state and can be customized by developer logic.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => { /** same as the previous example **/ }\nText.craft = {\n  props: { /** same as the previous example **/ },\n  rules: {\n    canDrag: (node) => !!node.data.props.text == \"Drag\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nodes with Custom Properties - React (JSX)\nDESCRIPTION: This snippet shows how to extend nodes with arbitrary custom properties in Craft.js by setting defaults in the component's craft.custom and then overriding them when instantiating the node. React and Craft.js are required. Custom properties provide extra metadata for persistence and editor behavior, with all values merged into the node's data.custom object. This approach supports dynamic and persistent configuration of nodes.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Node.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Definition\\nconst Container = () => {...}\\nContainer.craft = {\\n  custom: { // default custom values\\n    toSaveInDatabase: false\\n  }\\n};\\n\\n// Example\\n<Element is={Container} bg=\\\"#fff\\\" custom={{ toSaveInDatabase: true}} />\\n\\n\\\"node-b\\\": {\\n  id: \\\"node-b\\\",\\n  data: {\\n    ...\\n    custom: {\\n      toSaveInDatabase: true,\\n      style: {{\\n        display: \\\"flex\\\"\\n      }}\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Draggable Text Component with Craft.js in React\nDESCRIPTION: This snippet demonstrates how to define a simple, draggable user component in Craft.js using React. The TextComponent utilizes the useNode hook from @craftjs/core to access the connectors for enabling drag-and-drop behavior. The text to display is passed as a prop, and the core functionality is the ability to attach the necessary drag-and-drop refs. Dependencies: React and @craftjs/core. Input parameter: text (string). Output: renders a <div> containing an <h2> displaying the text, wrapped with drag/connectors.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNode } from \"@craftjs/core\";\n\nconst TextComponent = ({ text }) => {\n  const {\n    connectors: { connect, drag },\n  } = useNode();\n\n  return (\n    <div ref={(ref) => connect(drag(ref))}>\n      <h2>{text}</h2>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Collecting Custom Node State in React Components (Craft.js, JSX)\nDESCRIPTION: This code adds collection of custom node state: isClicked is derived from node.events.selected (collect pattern). The value controls if the span is contentEditable, effectively toggling edit mode on selection. Required dependencies: useNode hook, and the parent must provide context via Craft.js.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Text = ({text, fontSize}) => {\n  // highlight-next-line\n  const { connectors: {connect, drag}, setProp, isClicked } = useNode((node) => ({\n    // highlight-next-line\n    isClicked: node.events.selected\n  }));\n\n  return (\n    // highlight-next-line\n    <span ref={dom => connect(drag(dom))} style={{fontSize}} contentEditable={isClicked} onKeyUp={(e) => {\n        setProp(props => {\n          props.text = e.target.innerText;\n        })\n      }}>{text}\n    </span>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop with useNode Connectors in Craft.js Text Component (JSX)\nDESCRIPTION: This snippet shows how to connect a user component (here, Text) to Craft.js editing events using the useNode hook's connect and drag connectors. These connectors are assigned to the root DOM node, letting Craft.js manage drag/drop functionality. Dependencies: React and @craftjs/core. The main prop is 'text' which is displayed inside the component. Input: 'text', Output: draggable component in editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Text.js\nimport React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useNode } from \"@craftjs/core\";\n\nexport const Text = ({text}) => {\n  const { connectors: {connect, drag} } = useNode();\n  return (\n     <div \n      ref={ref => connect(drag(ref))}\n    >\n      <p>{text}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Draggable User Component - React (JavaScript)\nDESCRIPTION: This snippet defines a simple user component called 'TextComponent' that can be dragged and connected within the Craft.js editor. It demonstrates usage of the useNode hook to obtain editor connectors, and attaches these to the root div reference for drag-and-drop capability. This relies on @craftjs/core as a peer dependency, and expects a 'text' prop. No input/output apart from the rendered prop text.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNode } from \"@craftjs/core\";\n\nconst TextComponent = ({ text }) => {\n  const {\n    connectors: { connect, drag },\n  } = useNode();\n\n  return (\n    <div ref={(ref) => connect(drag(ref))}>\n      <h2>{text}</h2>\n    </div>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Hero Component with Static Props (Craft.js, JSX)\nDESCRIPTION: This code declares a Hero React component with a background prop, illustrating a static section with a non-editable span. It sets up the basic structure for more advanced node handling and is intended for further extension with Craft.js Element-based nodes.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = ({background}) => {\n  return (\n    <div style={{ background }}>\n      <span>Hero Title</span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Nodes with HTML Elements - React (JSX)\nDESCRIPTION: This snippet demonstrates how to create a simple node using an HTML div element in Craft.js, showing both the rendered JSX and the underlying node data structure. It requires React and Craft.js as dependencies. The node is identified by a unique id, contains element attributes as props, and includes metadata such as type and display name. The \"isCanvas\" flag indicates whether the node acts as a canvas container.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Node.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Example\\n<div style={{background: \\\"#eee\\\"}}>Hello</h2>\\n\\n\\\"node-a\\\": {\\n  id: \\\"node-a\\\",\\n  data: {\\n    type: \\\"div\\\",\\n    props: {\\n      style: {{\\n        background: \\\"#eee\\\",\\n      }}\\n      children: \\\"Hello\\\"\\n    },\\n    name: \\\"div\\\",\\n    displayName: \\\"div\\\",\\n    isCanvas: false\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Canvas Node with <Element /> - React - JavaScript\nDESCRIPTION: This example shows how to use Craft.js's <Element /> component to define a Canvas Node in React, making the container droppable and its child Nodes draggable. The critical dependency is the Craft.js library, which provides <Element />. The 'is' prop sets the tag or component type, and the 'canvas' prop enables Canvas behavior. The snippet demonstrates manual configuration of Node properties, where only children of the Canvas Node become draggable. Inputs include the React/Craft.js environment, and output is a structured, interactive editor region.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/nodes.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx {1}\n<Element is=\"div\" style={{ background: \"#333\" }} canvas> // A Canvas Node with the type div;\n  <h1>Hi</h1> // Node of the type h1; draggable\n  <MyComp>Hey</MyComp> //  Node of the type MyComp; draggable\n  <MyContainerComponent> // A Node with the type MyContainerComponent; draggable\n    <h2>Second level</h2> // A Node with the type h2; not draggable! \n  </MyContainerComponent>\n</Element>\n```\n```\n\n----------------------------------------\n\nTITLE: Representing User Elements as Nodes - React - JavaScript\nDESCRIPTION: This snippet demonstrates how various React elements, including HTML tags and custom components, are rendered as Nodes in Craft.js by default. Each element corresponds to a managed Node, but none are draggable until designated as Canvas children. Dependencies include React and Craft.js, with the structure determining parent-child Node relationships. The snippet expects React elements as input and outputs a rendered component hierarchy within the editor, but without drag-and-drop enabled by default.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/nodes.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<div style={{ background: \"#333\" }}> // A Node with the type div;\n  <h1>Hi</h1> // Node of the type h1; not draggable\n  <MyComp>Hey</MyComp> //  Node of the type MyComp; not draggable\n  <MyContainerComponent> // A Node with the type MyContainerComponent; not draggable\n    <h2>Second level</h2> // A Node with the type h2; not draggable! \n  </MyContainerComponent>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Building the Editor UI Structure - React (JavaScript)\nDESCRIPTION: This snippet shows how to structure a page editor UI using Craft.js components like Editor, Frame, and Element. It assembles editable areas using a Frame with a resolver for custom user components. The snippet expects user components (TextComponent, Container) to be available in scope and builds a basic editor scaffold inside a React function component.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\";\nimport { Editor, Frame, Element  } from \"@craftjs/core\";\nconst App = () => {\n  return (\n    <div>\n      <header>Some fancy header or whatever</header>\n      <Editor>\n        // Editable area starts here\n        <Frame resolver={{ TextComponent, Container }}>\n          <Element canvas is={TextComponent} text=\"I'm already rendered here\" />\n        </Frame>\n      </Editor>\n    </div>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Settings Panel for Editing Component Properties - JavaScript (JSX)\nDESCRIPTION: This SettingsPanel component displays dummy fields and UI controls for modifying selected user components' properties. It uses Material-UI's Box, Chip, Grid, Typography, Button, FormControl, FormLabel, and Slider components. Inputs are not yet connected to real editor state, but the structure supports updating component props and deleting elements. Required dependencies include React and @mui/material.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// components/SettingsPanel.js\nimport React from 'react';\nimport { Box, Chip, Grid, Typography, Button as MaterialButton, FormControl, FormLabel, Slider } from \"@mui/material\";\n\nexport const SettingsPanel = () => {  \n  return  (    \n    <Box bgcolor=\"rgba(0, 0, 0, 0.06)\" mt={2} px={2} py={2}>\n      <Grid container direction=\"column\" spacing={0}>\n        <Grid item>\n          <Box pb={2}>\n            <Grid container alignItems=\"center\">\n              <Grid item xs><Typography variant=\"subtitle1\">Selected</Typography></Grid>\n              <Grid item><Chip size=\"small\" color=\"primary\" label=\"Selected\" /></Grid>\n            </Grid>\n          </Box>\n        </Grid>\n        <FormControl size=\"small\" component=\"fieldset\">\n          <FormLabel component=\"legend\">Prop</FormLabel>\n          <Slider\n            defaultValue={0}\n            step={1}\n            min={7}\n            max={50}\n            valueLabelDisplay=\"auto\"\n          />\n        </FormControl>\n        <MaterialButton\n          variant=\"contained\"\n          color=\"default\"\n        >\n          Delete\n        </MaterialButton>\n      </Grid>\n    </Box>\n  ) \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Droppable Container with Craft.js Canvas in React\nDESCRIPTION: This snippet demonstrates the implementation of a droppable Container component using the Canvas area provided by @craftjs/core. The Container uses useNode to retrieve the drag connector, and uses the <Canvas /> component with a unique id to allow dropping of other editable components inside. This enables building nested, composable structures within the page editor. Dependencies: React, @craftjs/core, TextComponent. Input: none. Output: a droppable container rendering TextComponent by default.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { connectors: {drag} } = useNode();\n\n  return (\n    <div ref={drag}>\n      <Canvas id=\"drop_section\">\n         // Now users will be able to drag/drop components into this section\n        <TextComponent />\n      </Canvas>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Linked Node Inside a Component via Element (Craft.js, JSX)\nDESCRIPTION: This code corrects the previous approach by wrapping the Text component in an Element component, assigning an explicit id (title_text). This creates a separate linked node inside Hero, preserving node/prop separation while enabling in-place editing. The id prop is required for linking in Craft.js.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = ({background}) => {\n  return (\n    <div style={{ background }}>\n      <Element is={Text} text=\"Hero Title\" id=\"title_text\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Component Props via Modal in Craft.js (React)\nDESCRIPTION: This code showcases how Craft.js components can expose editing capabilities. The TextComponent uses the useNode hook to detect selection (isClicked) and to set props dynamically. Upon clicking the component, a modal input is displayed where the text prop can be updated live using setProp. Dependencies: React, @craftjs/core, Modal component. Key parameters: text (string, editable); event handling updates the prop. Output: renders text in <h2> and input modal when selected.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNode } from \"@craftjs/core\";\n\nconst TextComponent = ({ text }) => {\n  const {\n    connectors: { connect, drag },\n    isClicked,\n    actions: { setProp },\n  } = useNode((state) => ({\n    isClicked: state.events.selected,\n  }));\n\n  return (\n    <div ref={(dom) => connect(drag(dom))}>\n      <h2>{text}</h2>\n      {isClicked ? (\n        <Modal>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setProp(e.target.value)}\n          />\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Component Editing with Modal Input - React (JavaScript)\nDESCRIPTION: This snippet demonstrates how a component can control its edit mode via a modal input by using Craft.js's useNode hook. When selected, the component displays a modal with a text input that updates the component's 'text' prop through setProp. It leverages the 'state.events.selected' property from Craft.js, requires a Modal component, and assumes the use of @craftjs/core.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNode } from \"@craftjs/core\";\n\nconst TextComponent = ({ text }) => {\n  const {\n    connectors: { connect, drag },\n    isClicked,\n    actions: { setProp },\n  } = useNode((state) => ({\n    isClicked: state.events.selected,\n  }));\n\n  return (\n    <div ref={(dom) => connect(drag(dom))}>\n      <h2>{text}</h2>\n      {isClicked ? (\n        <Modal>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setProp(e.target.value)}\n          />\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Top Bar with Editor Controls - JavaScript (JSX)\nDESCRIPTION: The Topbar component provides toggle and action controls for the editor, featuring a switch to enable/disable functionality and a button to serialize the editor's state. Material-UI's Box, FormControlLabel, Switch, Grid, and Button components are used. Required inputs are none; outputs are rendered UI elements for controlling the editor's state.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// components/Topbar.js\nimport React from \"react\";\nimport { Box, FormControlLabel, Switch, Grid, Button as MaterialButton } from \"@mui/material\";\n\nexport const Topbar = () => {\n  return (\n    <Box px={1} py={1} mt={3} mb={1} bgcolor=\"#cbe8e7\">\n      <Grid container alignItems=\"center\">\n        <Grid item xs>\n          <FormControlLabel\n            control={<Switch checked={true} />}\n            label=\"Enable\"\n          />\n        </Grid>\n        <Grid item>\n          <MaterialButton size=\"small\" variant=\"outlined\" color=\"secondary\">Serialize JSON to console</MaterialButton>\n        </Grid>\n      </Grid>\n    </Box>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Connectors and Setters via useNode (Craft.js, JSX)\nDESCRIPTION: This snippet illustrates how to destructure Craft.js' useNode hook to access connectors (connect, drag), the setProp action, and other state. The collector function passed to useNode can be customized to extract relevant node state and trigger re-rendering. This provides the core mechanism for component-editor integration.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { connectors: {connect, drag}, setProp, ...collected } = useNode((node) => {});\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Droppable Regions in a Custom Card Component with Craft.js (JSX)\nDESCRIPTION: Notifies how to create multiple Canvas (droppable) regions within a user component by embedding <Element canvas /> inside user component render output and assigning explicit 'id' props. Each <Element> becomes its own Canvas node, allowing isolated drag-drop areas inside the component. Inputs: user-defined structure, Outputs: multiple drag regions. Requires: @craftjs/core, useNode.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Card.js\nimport {useNode, Element} from \"@craftjs/core\";\n\nexport const Card = (({bg, padding})) => {\n  return (\n    <Container background={background} padding={padding}>\n      <Element id=\"text\" canvas> // Canvas Node of type div\n        <Text text=\"Title\" fontSize={20} />\n        <Text text=\"Subtitle\" fontSize={15} />\n      </Element>\n      <Element id=\"buttons\" canvas> // Canvas Node of type div\n        <Button size=\"small\" text=\"Learn more\" />\n      </Element>\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Editable Text Component with React and Material-UI - JavaScript (JSX)\nDESCRIPTION: This React component, named Text, displays editable text with customizable font size. It takes two props: text (the string to display) and fontSize (numeric size for the font). No external dependencies are required beyond React; this component is intended for user-interactive editing within the editor, outputting a styled paragraph.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Text.js\nimport React from \"react\";\n\nexport const Text = ({text, fontSize}) => {\n  return (\n      <div>\n         <p style={{fontSize}}>{text}</p>\n      </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Configurable Button Component with Material-UI - JavaScript (JSX)\nDESCRIPTION: This React component, Button, wraps Material-UI's Button to provide flexible size, variant, color, and content. Props include size, variant, color, and children for custom labeling inside the button. Dependencies are React and @mui/material's Button component. It is designed for use as an interactive button in the editor's UI.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Button.js\nimport React  from \"react\";\nimport {Button as MaterialButton} from \"@mui/material\";\n\nexport const Button = ({size, variant, color, children}) => {\n  return (\n    <MaterialButton size={size} variant={variant} color={color}>\n      {children}\n    </MaterialButton>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Layers Panel in Craft.js - React/JSX\nDESCRIPTION: This React code defines a simple page editor UI integrating the Craft.js core Editor and Layers panel. It shows how to import Editor and Layers components, and render them together with basic layout and a title. Assumes dependencies @craftjs/core and @craftjs/layers are installed, and that the Editor is configured with appropriate resolver components ('...'). The Layers component is placed inside the Editor for real-time layer editing. Input is user actions; output is interactive UI updates.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/additional/layers.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport {Editor} from \"@craftjs/core\"\nimport {Layers} from \"@craftjs/layers\"\n\nexport default function App() {\n  return (\n    <div style={{margin: \"0 auto\", width: \"800px\"}}>\n      <Typography variant=\"h5\" align=\"center\">A super simple page editor</Typography>\n      <Editor resolver={...}>\n        <Layers />\n      </Editor>\n    </div>\n  );\n} \n```\n\n----------------------------------------\n\nTITLE: Embedding a Text Component in Hero Without Node Separation (Craft.js, JSX)\nDESCRIPTION: This snippet demonstrates using the Text component directly inside the Hero component, passing in text as a prop. In this usage, Text does not get its own node in Craft.js, so edits will affect the parent (Hero) node's props, which may not be desired. This serves as a warning for node management in composite components.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Hero = ({background}) => {\n  return (\n    <div style={{ background }}>\n      <Text text=\"Hero Title\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Components Using Craft.js Editor API in React\nDESCRIPTION: This code details how to implement a copy functionality for a component within Craft.js. The Container component leverages useEditor for access to actions and query, and useNode for identifying the current id and connectors. When the copy link is clicked, it retrieves the component's type and props, creates a new node via createNode, and adds it with add. Dependencies: React, @craftjs/core. Parameters: none directly; operates on component state and identity. Output: enables duplicating the current component in the editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEditor, useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { actions: {add}, query: { createNode, node } } = useEditor();\n  const { id, connectors: {drag, connect} } = useNode();\n  return (\n    <div ref={dom => connect(drag(dom))}>\n      ...\n      <a onClick={() => {\n        const { data: {type, props}} = node(id).get();\n        add(\n          createNode(React.createElement(type, props));\n        );\n      }}>\n        Make a copy of me\n      </a>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending Editor with Copy Functionality - React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add custom actions to the editor. The Container component uses useEditor and useNode from @craftjs/core to set up a copy mechanism. When the user clicks the link, the current node is duplicated by creating a new node and adding it to the editor with unchanged props. React and Craft.js are required; ensure proper handling of props and that createNode returns a valid node instance.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useEditor, useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { actions: {add}, query: { createNode, node } } = useEditor();\n  const { id, connectors: {drag, connect} } = useNode();\n  return (\n    <div ref={dom => connect(drag(dom))}>\n      ...\n      <a onClick={() => {\n        const { data: {type, props}} = node(id).get();\n        add(\n          createNode(React.createElement(type, props));\n        );\n      }}>\n        Make a copy of me\n      </a>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Restoring Editor State from Serialized JSON - React (JavaScript)\nDESCRIPTION: This snippet reconstructs the editor state in the App component by passing a retrieved JSON string to the Frame component's 'json' prop inside the Editor. Assumes the serialized state was previously generated with query.serialize() and persists through some storage (e.g., server, local storage). Note: The JSON string should match the expected structure for Craft.js state restoration.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const jsonString = /* retrieve JSON from server */\n  return (\n    <Editor>\n      <Frame json={jsonString}>\n        ...\n      </Frame>\n    </Editor>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Destructuring useEditor Output - Craft.js - TypeScript\nDESCRIPTION: Demonstrates how to destructure the output of the useEditor hook to receive connectors, actions, query, and other collected state. This is typically the starting point to utilize editor methods inside a functional React component. Requires the @craftjs/core library and a properly configured <Editor /> context. Key outputs include objects for connecting DOM events, dispatching actions, querying state, and additional state values provided by the collector function.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { connectors, actions, query, ...collected } = useEditor(collector);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Drag Rules to Craft.js User Components (JSX)\nDESCRIPTION: This snippet attaches a craft property to the Text component, specifying a custom drag rule: components are only draggable if the 'text' prop is not equal to 'Drag'. The rules property expects functions that receive the node, allowing fine-grained control of drag/drop logic. Outputs: Only some Text components can be dragged. Inputs: text prop. Requires use with Craft.js and prior use of the useNode hook.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Text = () => {...}\nText.craft = {\n  ...\n  rules: {\n    canDrag: (node) => node.data.props.text != \"Drag\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Nodes - Craft.js - TypeScript\nDESCRIPTION: Provides two approaches for adding new nodes to the editor: by parsing a React element and by constructing a fresh Node object. The useEditor hook grants access to query methods for converting elements into node trees and actions for inserting them into the editor state. Prerequisites include using @craftjs/core and understanding the node structure. One approach requires a valid React component; another starts from a minimal node definition.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useEditor} from \"@craftjs/core\";\n\nconst Example = () => {\n  const { query, actions } = useEditor((state, query) => ({\n    hoveredNodeId: state.events.hovered\n  }));\n\n  return (\n    <div>\n      <a onClick={() => {\n        const nodeTree = query.parseReactElement(<h2>Hi</h2>).toNodeTree();\n        actions.addNodeTree(nodeTree);\n      }}>\n        Add a new Node from a React Element\n      </a>\n        \n      <a onClick={() => {\n        // A fresh Node is a partial Node object\n        // where only the data.type property is required\n        const freshNode = {\n            data: {\n                type: 'h1'\n            }\n        };\n        \n        // Create a new valid Node object from the fresh Node\n        const node = query.parseFreshNode(freshNode).toNode();\n        actions.add(node, 'ROOT');\n      }}>\n        Add a new Node from a Node object\n      </a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom User Components as Canvas with Drag-and-Drop Rules in Craft.js (JSX)\nDESCRIPTION: This more advanced code creates two user components (CardTop, CardBottom) for specific Canvas regions within Card, each with their own drag/drop rules using the craft prop. CardTop's Canvas only accepts Text; CardBottom only accepts Button. Connectors are assigned for Canvas operation, but drag for these regions is omitted to restrict their drag behavior. Inputs: children. Requires: React, @craftjs/core, correct resolver registration. Outputs: Granular drag-and-drop logic in nested canvas zones.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Card.js\nimport React  from \"react\";\nimport Text from \"./Text\";\nimport Button from \"./Button\";\nimport { Element, useNode } from \"@craftjs/core\";\n\nimport { Container }  from \"./Container\";\n\n// Notice how CardTop and CardBottom do not specify the drag connector. This is because we won't be using these components as draggables; adding the drag handler would be pointless.\n\nexport const CardTop = ({children}) => {\n  const { connectors: {connect} } = useNode();\n  return (\n    <div ref={connect} className=\"text-only\">\n      {children}\n    </div>\n  )\n}\n\nCardTop.craft = {\n  rules: {\n    // Only accept Text\n    canMoveIn: (incomingNodes) => incomingNodes.every(incomingNode => incomingNode.data.type === Text)\n  }\n}\n\nexport const CardBottom = ({children}) => {\n  const { connectors: {connect} } = useNode();\n  return (\n    <div ref={connect}>\n      {children}\n    </div>\n  )\n}\n\nCardBottom.craft = {\n  rules: {\n    // Only accept Buttons\n    canMoveIn : (incomingNodes) => incomingNodes.every(incomingNode => incomingNode.data.type === Button)\n  }\n}\n\nexport const Card = ({background, padding = 20}) => {\n  return (\n    <Container background={background} padding={padding}>\n      <Element id=\"text\" is={CardTop} canvas> // Canvas Node of type CardTop\n        <Text text=\"Title\" fontSize={20} />\n        <Text text=\"Subtitle\" fontSize={15} />\n      </Element>\n      <Element id=\"buttons\" is={CardBottom} canvas> // Canvas Node of type CardBottom\n        <Button size=\"small\" text=\"Learn more\" />\n      </Element>\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Node - Craft.js - JSX\nDESCRIPTION: Shows how to move nodes within the editor by setting up source and target node IDs and invoking query and action methods to perform the move. The useEditor hook provides access to actions and queries. Relies on React's useState, Craft.js's editor context, and assumes the presence of valid node IDs in the editor tree. Includes error handling for invalid drop conditions.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const [sourceId, setSourceId] = useState();\n  const [targetId, setTargetId] = useState();\n  \n  const {selectedNodeId, actions, query} = useEditor((state) => ({\n    selectedNodeId: state.events.selected\n  }));\n\n  return selectedNodeId && (\n    <div>\n      <h2>Node selected: {selectedNodeId}</h2>\n      <div>\n        <input type=\"text\" value={sourceId} placeholder=\"Source\" disabled />\n        <button onClick={() => selectedNodeId && setSourceId(selectedNodeId)}>Set selected Node as source</button>\n      </div>\n      <div>\n        <input type=\"text\" value={targetId} placeholder=\"Target\" disabled />\n        <button onClick={() => selectedNodeId && setTargetId(selectedNodeId)}>Set selected Node as target</button>\n      </div>\n      {\n        sourceId && targeId ? (\n          <button onClick={() => {\n            try {\n              // .canDropInParent will throw an error message if the conditions failed\n              query.canDropInParent(sourceId, targetId); \n              actions.move(sourceId, targetId);\n            } catch (e) {\n              console.error(e.message);\n            } \n          }}>Move Node</button>\n        )\n      }\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Node Descendants - Craft.js - TypeScript\nDESCRIPTION: This snippet retrieves the descendants of the currently selected node using query.node(...).descendants() inside the collector of useEditor. The collected descendant IDs are rendered as a list. Depends on Craft.js's query API and requires the editor context and at least one selected node. Showcases advanced usage of the query API in the context of editor state collection.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useEditor} from \"@craftjs/core\";\n\nconst Example = () => {\n  const { selectedDescendants } = useEditor((state, query) => ({\n    selectedDescendants: state.events && query.node(state.events.selected).descendants().map(node => node.id)\n  }));\n\n  return (\n    <ul>\n      {\n        selectedDescendants && selectedDescendants.map(id => <li>{id}</li> )\n      }\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Editor State Information - Craft.js - TypeScript\nDESCRIPTION: Illustrates capturing and rendering editor state using the useEditor hook. The collector function extracts currently hovered node ID from the editor state, and the value is displayed in the component's output. Depends on @craftjs/core, and expects the component to be nested within an <Editor> provider. Input parameters are the state and optional query API; output is any value(s) selected from the state for reactivity.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useEditor} from \"@craftjs/core\";\n\nconst Example = () => {\n  const { hoveredNodeId } = useEditor((state) => ({\n    hoveredNodeId: state.events.hovered\n  }));\n\n  return (\n    <div>\n      The ID of the node currently being hovered is: {hoveredNodeId}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Droppable Canvas Region - React (JavaScript)\nDESCRIPTION: This snippet defines a Container component that provides a droppable region via the Canvas component from @craftjs/core. The useNode hook is used to attach the drag connector and enable drag-and-drop. The Canvas section allows users to drag and drop child components, such as TextComponent, inside the droppable area.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useNode} from \"@craftjs/core\";\nconst Container = () => {\n  const { connectors: {drag} } = useNode();\n\n  return (\n    <div ref={drag}>\n      <Canvas id=\"drop_section\">\n         // Now users will be able to drag/drop components into this section\n        <TextComponent />\n      </Canvas>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Serializing Editor State to JSON with Craft.js in React\nDESCRIPTION: This snippet allows exporting the Craft.js editor's state as a JSON string. The SaveButton component accesses the editor query API via useEditor and triggers query.serialize() on click, logging the resulting JSON. Dependencies: React, @craftjs/core. Input: none. Output: logs the serialized JSON representation of the full editor state, enabling storage or transmission. Limitations: for export only; does not handle import or display.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst SaveButton = () => {\n  const { query } = useEditor();\n  return <a onClick={() => console.log(query.serialize()) }>Get JSON</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering a Related Toolbar in an Editor (Craft.js, JSX)\nDESCRIPTION: This snippet shows a Toolbar component that uses useEditor to access the currently selected node and its related toolbarSettings component. If a selection and toolbarSettings are present, it renders the editor component dynamically via React.createElement. Dependencies: useEditor from Craft.js and React.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/concepts/user-components.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Toolbar = () => {\n  const { selectededNodeId, toolbarSettings } = useEditor((state) => ({\n    selectededNodeId : state.event.selected,\n    toolbarSettings:  state.nodes[state.events.selected].related.toolbar\n  }));\n  return (\n    <div>\n      <h2>My Awesome Toolbar</h2>\n      {\n        selectededNodeId && toolbarSettings ? \n          React.createElement(toolbarSettings)\n        : null\n      }\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing the Editor State as JSON - React (JavaScript)\nDESCRIPTION: This snippet adds a SaveButton component that serializes and logs the current editor state as a JSON string using the useEditor hook's query.serialize method. Assumes @craftjs/core is installed, and the JSON output can be used to persist, backup, or inspect editor content. Triggers on anchor click.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/packages/core/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst SaveButton = () => {\n  const { query } = useEditor();\n  return <a onClick={() => console.log(query.serialize()) }>Get JSON</a>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Customizable Container Component with Material-UI Paper - JavaScript (JSX)\nDESCRIPTION: This Container React component provides a flexible wrapper using Material-UI Paper for background color and padding. Props are background (color), padding (in pixels, default 0), and children (nested elements). Required dependencies are React and @mui/material's Paper. The component helps compose reusable, styled regions in the editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Container.js\nimport React from \"react\";\nimport { Paper } from \"@mui/material\";\n\nexport const Container = ({background, padding = 0, children}) => {\n  return (\n    <Paper style={{margin: \"5px 0\", background, padding: `${padding}px`}}>\n      {children}\n    </Paper>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor with JSON State on Page Load in Craft.js (React)\nDESCRIPTION: This React component showcases how to set Craft.js editor state from a saved JSON string on initial mount. It fetches compressed data, decompresses and decodes it using lzutf8, and passes the resulting JSON to the Frame component via its json prop. This allows restoration of editor nodes as the base state at page load. Dependencies include lzutf8, @craftjs/core, and React. Key parameters: state fetch endpoint, Frame json prop. Limitations: The code expects valid API response and valid compressed data; uses await directly in useEffect which requires correction.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/save-load.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport \"../styles/main.css\";\nimport {Typography, Button as MaterialButton, Paper, Grid, makeStyles} from '@mui/core';\nimport {Toolbox} from '../components/Toolbox';\nimport {Container} from '../components/user/Container';\nimport {Button} from '../components/user/Button';\nimport {Card, CardBottom, CardTop} from '../components/user/Card';\nimport {Text} from '../components/user/Text';\nimport {SettingsPanel} from '../components/SettingsPanel';\nimport {Editor, Frame, Element} from \"@craftjs/core\";\nimport { Topbar } from '../components/Topbar';\n\n\nexport default function App() {\n  const [enabled, setEnabled] = useState(true);\n  const [json, setJson] = useState(null);\n\n  // Load save state from server on page load\n  useEffect(() => {\n    const stateToLoad = await fetch(\"your api to get the compressed data\");\n    const json = lz.decompress(lz.decodeBase64(stateToLoad));\n    setJson(json);\n  }, []);\n\n  return (\n    <div style={{margin: \"0 auto\", width: \"800px\"}}>\n      <Typography style={{margin: \"20px 0\"}} variant=\"h5\" align=\"center\">Basic Page Editor</Typography>\n        <Editor\n          resolver={{Card, Button, Text, Container, CardTop, CardBottom}}\n          enabled={enabled}\n        > \n          <Topbar />\n          <Grid container spacing={5} style={{paddingTop: \"10px\"}}>\n            <Grid item xs>\n              <Frame json={json}>\n                <Element is={Container} padding={5} background=\"#eeeeee\">\n                  ...\n                </Element>\n              </Frame>\n            </Grid>\n            <Grid item xs={4}>\n              ...\n            </Grid>\n          </Grid>\n        </Editor>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Editor State from JSON with Craft.js Frame in React\nDESCRIPTION: This code showcases how to restore a previously saved JSON editor state using Craft.js. The App component retrieves a jsonString (typically via an API or storage), then passes it to the Frame component's json prop within the Editor context. Dependencies: React, @craftjs/core. Input: jsonString (serialized state). Output: Reconstructs and renders the full editor and its contents from the given JSON.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const jsonString = /* retrieve JSON from server */\n  return (\n    <Editor>\n      <Frame json={jsonString}>\n        ...\n      </Frame>\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent-Child Relationships Between Nodes - React (JSX)\nDESCRIPTION: This example demonstrates how to establish hierarchical relationships between nodes in Craft.js using the data.nodes property, showing both the parent and child node structures. It depends on React and Craft.js and illustrates how a parent node references its children for rendering via the \"children\" prop. Parent nodes maintain an array of child node ids, while each child holds a reference to its parent.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Node.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Example\\n<Container bg=\\\"#fff\\\">\\n  // highlight-next-line\\n  <h2>Hello</h2>\\n</Container>\\n\\n\\\"node-a\\\": {\\n  id: \\\"node-a\\\",\\n  data: {\\n    ...\\n    type: Container,\\n    props: {...},\\n    // highlight-next-line\\n    nodes: [\\\"node-b\\\"]\\n  }\\n}\\n\\n\\\"node-b\\\": {\\n  id: \\\"node-b\\\",\\n  data: {\\n    type: \\\"h2,\\n    props: {...},\\n    // highlight-next-line\\n    parent: \\\"node-a\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Nodes via Arbitrary IDs (Linked Nodes) - React (JSX)\nDESCRIPTION: This snippet details how to link nodes with custom identifiers using the linkedNodes property in Craft.js, exampled by embedding a sub-component with its dedicated node id. This feature relies on React and Craft.js and is useful for defining non-hierarchical relationships, such as persistent subcomponents. The linkedNodes map associates custom ids to node objects, while the linked node includes a parent reference.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Node.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Definition\\nconst TextEditable = () => {};\\n\\nconst Container = () => {\\n  return (\\n    <div>\\n      // highlight-next-line\\n      <Element id=\\\"header\\\" is={TextEditable} text=\\\"Header\\\" />\\n    </div>\\n  )\\n}\\n\\n// Example\\n<Container bg=\\\"#fff\\\" />\\n\\n\\\"node-a\\\": {\\n  id: \\\"node-a\\\",\\n  data: {\\n    type: Container,\\n    props: {...},\\n    // highlight-next-line\\n    linkedNodes: {\\n      // highlight-next-line\\n      \\\"header\\\": \\\"node-b\\\"\\n      // highlight-next-line\\n    }\\n  }\\n}\\n\\n\\\"node-b\\\": {\\n  id: \\\"node-b\\\",\\n  data: {\\n    type: TextEditable,\\n    props: {...},\\n    // highlight-next-line\\n    parent: \\\"node-a\\\"\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Event Handlers in Craft.js Editor (React, TypeScript)\nDESCRIPTION: This advanced snippet demonstrates implementing a custom event handler class by extending DefaultEventHandlers from '@craftjs/core' and managing the hover event in a custom way. It overrides the handlers method to inject logic for mouseleave events, updating hovered node state, and logging node exits. The handlers prop of <Editor /> is used to supply this logic. Dependencies include '@craftjs/core' and React; class requires EditorStore and may be configured via options. Parameters include the store and an isMultiSelectEnabled flag. Customization is limited to users familiar with extending and integrating React class components.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Editor.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DefaultEventHandlers,\n  DefaultEventHandlersOptions,\n  Editor,\n  EditorStore,\n  NodeId\n} from '@craftjs/core'\n\nclass CustomEventHandlers extends DefaultEventHandlers {\n  handlers() {\n    const defaultHandlers = super.handlers()\n\n    return {\n      ...defaultHandlers,\n      // Customize the hover event handler\n      hover: (el: HTMLElement, id: NodeId) => {\n        const unbindDefaultHoverHandler = defaultHandlers.hover(el, id)\n\n        // Track when the mouse leaves a node and remove the hovered state\n        const unbindMouseleave = this.addCraftEventListener(el, 'mouseleave', (e) => {\n          e.craft.stopPropagation()\n          this.options.store.actions.setNodeEvent('hovered', '')\n          console.log(`mouseleave node ${id}`)\n        })\n\n        return () => {\n          unbindDefaultHoverHandler();\n          unbindMouseleave();\n        }\n      }\n    }\n  }\n}\n\nconst App = () => {\n  return (\n    <Editor\n      // Use your own event handlers\n      handlers={(store) =>\n        new CustomEventHandlers({ store, isMultiSelectEnabled: () => false })\n      }\n    >\n      ...\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Editing User Components Using Modal and setProp in Craft.js (JSX)\nDESCRIPTION: This example demonstrates how to enable editable user components in a Craft.js-based editor by integrating custom modal dialogs and property updating with setProp. When a component is clicked, it displays a modal allowing input to update the 'text' prop, triggering immediate re-rendering. Dependencies include React, @craftjs/core, and a Modal implementation; inputs involve user interaction and state, and outputs are live-updated components with editable props.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useNode} from \"@craftjs/core\";\n\nconst TextComponent = ({text}) => {\n  const { connectors: { connect, drag }, isClicked, actions: {setProp} } = useNode(\n    (state) => ({\n      isClicked: state.event.selected,\n    })\n  );\n\n  return (\n    <div ref={dom => connect(drag(dom))}>\n      <h2>{text}</h2>\n      {\n        isClicked ? (\n          <Modal>\n            <input\n              type=\"text\"\n              value={text}\n              onChange={e => setProp(e.target.value)}\n            />\n          </Modal>\n        )\n      }\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Drag-and-Drop Indicator Styling in Craft.js Editor (React, JavaScript)\nDESCRIPTION: This snippet configures the indicator prop of the <Editor /> component to use custom colors and styles for drag-and-drop feedback. It showcases how to define success and error colors, as well as specify custom CSS properties and a CSS class. Dependencies include '@craftjs/core' and React. The indicator object accepts parameters for success/error color codes, a custom style object, and an optional className; it affects how drag targets are visually highlighted. Limitations: Ensure CSS class and properties are defined in your project.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Editor.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Editor} from \"@craftjs/core\";\n\nconst App = () => {\n  return (\n    <Editor\n      indicator={{\n        'success': '#2d9d78', // green\n        'error': '#e34850', // red\n        'style': { // custom CSS properties\n          boxShadow: '...\n        },\n        'className': 'your-css-class' // custom CSS class\n      }}\n    >\n      <Frame resolver={{Hero}}>\n        <Element>\n          <h1>Hi</h1>\n          <Hero />\n        </Element>\n      </Frame>\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Card Component Composition without Connectors in Craft.js (JSX)\nDESCRIPTION: Shows that the Card component itself doesn't need connectors since it composes the Container component, which is already connected. Card accepts background and padding, passes them down, and wraps its content in an already 'wiredup' user component (Container). Requires user to understand composed drag behavior. Inputs: background, padding.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Card.js (No changes)\n\n// It's not necessary to add connectors for our Card component since it's a composition of our Container component - which already has connectors applied.\nexport const Card = ({background, padding = 0}) => {\n  return (\n    <Container background={background} padding={padding}>\n      ...\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of User Elements in Craft.js Editor (React, JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the onRender prop of the <Editor /> component from Craft.js to wrap all rendered user elements inside a custom styled div. It relies on the RenderNode wrapper function and passes it to the onRender prop, providing a mechanism to modify how user elements appear throughout the editor. Dependencies include '@craftjs/core' and React; key parameters include the onRender function and the elements being rendered. Input is the user elements within the editor tree, and output is the modified, wrapped React elements rendered in the editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Editor.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Editor} from \"@craftjs/core\";\n\nconst RenderNode = ({element}) => {\n  return (\n    <div style={{background: \"#000\", padding: \"5px\" }}>\n      {element}\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Editor onRender={RenderNode}>\n      <Frame resolver={{Hero}}>\n        <Element>\n          <h1>Hi</h1>\n          <Hero />\n        </Element>\n      </Frame>\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Hooking into Node Changes with onNodesChange Callback in Craft.js Editor (React, JavaScript)\nDESCRIPTION: This snippet shows how to use the onNodesChange callback prop of <Editor /> to execute a side effect (e.g., saving JSON) whenever the node state changes. It serializes editor state using query.serialize() and posts it to a server endpoint via axios. Dependencies include '@craftjs/core', React, and axios; the onNodesChange parameter receives the editor's query methods. Input is the updated node state, and output is a POST network request. The limitation is that the axios library must be installed and imported in your project.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/Editor.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Editor} from \"@craftjs/core\";\n\nconst App = () => {\n  return (\n    <Editor\n      // Save the updated JSON whenever the Nodes has been changed\n      onNodesChange={query => {\n        const json = query.serialize();\n        // save to server\n        axios.post('/saveJSON', { json });\n      }}\n    >\n      ..\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Compressed Editor State in Craft.js with React (jsx)\nDESCRIPTION: This component extends the Craft.js Topbar to add a button that serializes the editor state, compresses it with lzutf8, encodes it as base64, and copies it to the user's clipboard using copy-to-clipboard. It uses React hooks to manage UI state, including displaying a Snackbar notification upon success. Dependencies: @craftjs/core, lzutf8, copy-to-clipboard, @mui/core. The main parameter is the editor state, accessed via useEditor; output is a compressed, encoded string copied to clipboard. Limit: Only works when the editor is enabled.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/save-load.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { Box, FormControlLabel, Switch, Grid, Button as MaterialButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Snackbar } from \"@mui/core\";\nimport { useEditor } from \"@craftjs/core\";\nimport lz from \"lzutf8\";\nimport copy from 'copy-to-clipboard';\n\nexport const Topbar = () => {\n  const { actions, query, enabled } = useEditor((state) => ({\n    enabled: state.options.enabled\n  }));\n\nconst [snackbarMessage, setSnackbarMessage] = useState();\n  return (\n    <Box px={1} py={1} mt={3} mb={1} bgcolor=\"#cbe8e7\">\n      <Grid container alignItems=\"center\">\n        <Grid item xs>\n          <FormControlLabel\n            className=\"enable-disable-toggle\"\n            control={<Switch checked={enabled} onChange={(_, value) => actions.setOptions(options => options.enabled = value)} />}\n            label=\"Enable\"\n          />\n        </Grid>\n        <Grid item>\n          <MaterialButton \n            className=\"copy-state-btn\"\n            size=\"small\" \n            variant=\"outlined\" \n            color=\"secondary\"\n            onClick={() => {\n              const json = query.serialize();\n              copy(lz.encodeBase64(lz.compress(json)));\n              setSnackbarMessage(\"State copied to clipboard\")\n            }}\n          >\n              Copy current state\n          </MaterialButton>\n          <Snackbar\n            autoHideDuration={1000}\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n            open={!!snackbarMessage}\n            onClose={() => setSnackbarMessage(null)}\n            message={<span>{snackbarMessage}</span>}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Restoring Editor State from Serialized JSON in Craft.js (JSX)\nDESCRIPTION: This example demonstrates how to restore the Craft.js editor state from a JSON string by passing it as the 'json' prop to the Frame component, thereby rehydrating the entire editor from a saved state. Dependencies are Craft.js and React; inputs are JSON strings obtained from serialization, and the output is a fully reconstructed editor view.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/overview.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const jsonString = /* retrieve JSON from server */\n  return (\n    <Editor>\n      <Frame json={jsonString}>\n        ...\n      </Frame>\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Properties - Craft.js - TypeScript\nDESCRIPTION: Shows how to update properties of a selected node via setProp from the useEditor hook. The collector retrieves the selected node's ID, and clicking the anchor element invokes setProp to change its props. Relies on @craftjs/core library, functional React components, and requires that setProp is only called with valid node IDs within the <Editor> context. Triggered by event handlers such as onClick.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useEditor} from \"@craftjs/core\";\n\nconst Example = () => {\n  const { selectedNodeId, actions: {setProp} } = useEditor((state) => ({\n    selectedNodeId: state.events.selected\n  }));\n\n  return (\n    <a\n      onClick={_ => {\n        setProp(selectedNodeId, props => {\n          props.text = \"new value\";\n        });\n      }}\n    >\n      Update\n    </a>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Compressed Editor State with Dialog in Craft.js (React)\nDESCRIPTION: This React component extends the Topbar to add a 'Load State' button that opens a dialog for users to paste a compressed base64 string. On confirmation, it decodes and decompresses the state using lzutf8 and dispatches an action to update the Craft.js editor state via actions.deserialize(). React's useState hook tracks dialog, input, and Snackbar state. Dependencies include @mui/core, lzutf8, @craftjs/core, copy-to-clipboard. Main input: base64-compressed editor state. Output: replaces the editor's node state. Limitation: expects valid lzutf8-encoded state; no error handling for invalid input is present.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/save-load.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { Box, FormControlLabel, Switch, Grid, Button as MaterialButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Snackbar } from \"@mui/core\";\nimport { useEditor } from \"@craftjs/core\";\nimport lz from \"lzutf8\";\nimport copy from 'copy-to-clipboard';\n\nexport const Topbar = () => {\n  const { actions, query, enabled } = useEditor((state) => ({\n    enabled: state.options.enabled\n  }));\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState();\n  const [stateToLoad, setStateToLoad] = useState(null);\n\n  return (\n    <Box px={1} py={1} mt={3} mb={1} bgcolor=\"#cbe8e7\">\n      <Grid container alignItems=\"center\">\n        <Grid item xs>\n          <FormControlLabel\n            className=\"enable-disable-toggle\"\n            control={<Switch checked={enabled} onChange={(_, value) => actions.setOptions(options => options.enabled = value)} />}\n            label=\"Enable\"\n          />\n        </Grid>\n        <Grid item>\n          <MaterialButton \n            className=\"copy-state-btn\"\n            size=\"small\" \n            variant=\"outlined\" \n            color=\"secondary\"\n            onClick={() => {\n              const json = query.serialize();\n              copy(lz.encodeBase64(lz.compress(json)));\n              setSnackbarMessage(\"State copied to clipboard\")\n            }}\n          >\n              Copy current state\n          </MaterialButton>\n          <MaterialButton \n            className=\"load-state-btn\"\n            size=\"small\" \n            variant=\"outlined\" \n            color=\"secondary\"\n            onClick={() => setDialogOpen(true)}\n          >\n              Load\n          </MaterialButton>\n          <Dialog\n            open={dialogOpen}\n            onClose={() => setDialogOpen(false)}\n            fullWidth\n            maxWidth=\"md\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">Load state</DialogTitle>\n            <DialogContent>\n              <TextField \n                multiline \n                fullWidth\n                placeholder='Paste the contents that was copied from the \"Copy Current State\" button'\n                size=\"small\"\n                value={stateToLoad}\n                onChange={e => setStateToLoad(e.target.value)}\n              />\n            </DialogContent>\n            <DialogActions>\n              <MaterialButton onClick={() => setDialogOpen(false)} color=\"primary\">\n                Cancel\n              </MaterialButton>\n              <MaterialButton \n                onClick={() => {\n                  setDialogOpen(false);\n                  const json = lz.decompress(lz.decodeBase64(stateToLoad));\n                  actions.deserialize(json);\n                  setSnackbarMessage(\"State loaded\")\n                }} \n                color=\"primary\" \n                autoFocus\n              >\n                Load\n              </MaterialButton>\n            </DialogActions>\n          </Dialog>\n          <Snackbar\n            autoHideDuration={1000}\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n            open={!!snackbarMessage}\n            onClose={() => setSnackbarMessage(null)}\n            message={<span>{snackbarMessage}</span>}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Compression and Clipboard in JavaScript (bash)\nDESCRIPTION: This command installs external libraries needed for state compression (lzutf8) and clipboard interaction (copy-to-clipboard) in a JavaScript/React project. Both are required for the Topbar features that copy or load compressed editor state. It assumes use of yarn as a package manager and will add the packages to project dependencies.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/save-load.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add lzutf8 copy-to-clipboard\n```\n\n----------------------------------------\n\nTITLE: Customizing Layer Rendering with Default Components in Craft.js - React/JSX\nDESCRIPTION: This example shows how to create a custom React component for rendering layers using Craft.js's <DefaultLayerHeader />, and integrate it into the editor using the Layers renderLayer prop. The Layer component wraps DefaultLayerHeader, and is passed to the Layers component for customized layer display. Requires @craftjs/core, @craftjs/layers, and related dependencies. Inputs include user actions and editor structure; outputs are custom layer UI elements rendered in the layers panel.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/additional/layers.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Layer = () => {\n  return (\n    <div>\n      <DefaultLayerHeader />\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Editor>\n      <Frame>\n        ...\n      </Frame>\n      <Layers \n        renderLayer={Layer}\n      />\n    </Editor>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding and Deleting a Node - Craft.js - JSX\nDESCRIPTION: Demonstrates using the useEditor hook to access actions for hiding and deleting nodes in the editor. The selected node ID is retrieved, and conditionally rendered controls allow the user to hide or remove it. This snippet does not include imports but assumes the use of Craft.js's useEditor within a React environment. Requires the editor context and a valid selected node.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/api/useEditor.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n  const {selectedNodeId, actions} = useEditor((state) => ({\n    selectedNodeId: state.events.selected\n  }));\n  return selectedNodeId && (\n    <div>\n      <h2>Node selected: {selectedNodeId}</h2>\n      <a onClick={() => actions.hide(selectedNodeId)}>Hide</a>\n      <a onClick={() => actions.delete(selectedNodeId)}>Delete</a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop for a Container Component in Craft.js (JSX)\nDESCRIPTION: This snippet wires up drag-and-drop connectors using the useNode hook for a Container component that renders its children inside a styled Paper. The root Paper receives connect and drag for Craft.js event handling. Inputs: background, padding, children. Output: Droppable/draggable container. Dependencies: @mui/material (Paper), @craftjs/core.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Container.js\nexport const Container = ({background, padding = 0, children}) => {\n  const { connectors: {connect, drag} } = useNode();\n  return (\n    <Paper ref={ref=> connect(drag(ref))} style={{ background, padding: `${padding}px`}}>\n      ...\n    </Paper>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop for Custom Button User Component in Craft.js (JSX)\nDESCRIPTION: Enables drag-and-drop for a Button component by using the useNode hook's connect and drag connectors, wiring them to the root DOM node (here, a MaterialButton). Inputs are the standard MaterialButton props (size, variant, color, children). Output: a draggable button in the Craft.js editor. Dependencies: Material UI, @craftjs/core.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// components/user/Button.js\nexport const Button = ({size, variant, color, children}) => {\n  const { connectors: {connect, drag} } = useNode();\n  return (\n    <MaterialButton ref={ ref => connect(drag(ref))} size={size} variant={variant} color={color} >\n      ...\n    </MaterialButton>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Craft.js Layers with Yarn - Bash\nDESCRIPTION: This command installs the @craftjs/layers package using Yarn. Run it in your terminal from the project root to add Layer Panel functionality to your Craft.js-based project. Make sure Yarn is installed and your environment can reach the public npm registry.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/additional/layers.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @craftjs/layers\n```\n\n----------------------------------------\n\nTITLE: Registering Custom User Components in Craft.js Editor Resolver (JSX)\nDESCRIPTION: This snippet demonstrates how to register custom user components (Card, Button, Text, CardTop, CardBottom) with the Craft.js Editor via the resolver prop, making them available for rendering, drag/drop, and serialization. All referenced components must be included for correct function. No direct output aside from composed editor behavior.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n...\nexport default function App() {\n  return (\n    ...\n        <Editor\n          resolver={{Card, Button, Text, CardTop, CardBottom}}\n        > \n         ...\n        </Editor>\n     ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Toolbox for Drag-and-Drop Component Creation - JavaScript (JSX)\nDESCRIPTION: This Toolbox component serves as a palette for creating new instances of user components via drag-and-drop actions. It uses Material-UI's Box, Typography, Grid, and Button components. No special input parameters; this snippet is mainly for UI, listing buttons to create Button, Text, Container, and Card elements in the editor.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// components/Toolbox.js\nimport React from \"react\";\nimport { Box, Typography, Grid, Button as MaterialButton } from \"@mui/material\";\n\nexport const Toolbox = () => {\n  return (\n    <Box px={2} py={2}>\n      <Grid container direction=\"column\"  alignItems=\"center\" justify=\"center\" spacing={1}>\n        <Box pb={2}>\n          <Typography>Drag to add</Typography>\n        </Box>\n        <Grid container direction=\"column\" item>\n          <MaterialButton variant=\"contained\">Button</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton variant=\"contained\">Text</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton variant=\"contained\">Container</MaterialButton>\n        </Grid>\n        <Grid container direction=\"column\" item>\n          <MaterialButton variant=\"contained\">Card</MaterialButton>\n        </Grid>\n      </Grid>\n    </Box>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Dev Server - Yarn - Bash\nDESCRIPTION: This snippet shows how to install all necessary dependencies using yarn and then start the development server for Craft.js. Dependencies: yarn installed globally on the machine. Input: none. Output: installs node_modules and starts the dev server. No additional configuration is required before running these commands.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> yarn install\n> yarn dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating Craft.js Repository - Bash\nDESCRIPTION: This snippet demonstrates the process to clone the Craft.js repository from GitHub and change the working directory to the project folder. Pre-requisites: git should be installed. Inputs: none. Outputs: a local copy of the repository and the user in the correct directory. No specific constraints are required beyond standard git usage.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-name/craft.js\ncd craft.js\n```\n\n----------------------------------------\n\nTITLE: Common NPM Scripts for Craft.js Monorepo - Yarn - Bash\nDESCRIPTION: This snippet lists useful npm scripts available for the Craft.js monorepo, including cleaning build files, creating production builds, and running linter/tests. Dependencies: yarn, project must be in the craft.js directory. Inputs: none. Outputs: script-specific results like cleaned build files or built packages. Scripts should be run in the repo root.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> yarn clean # clean all build files from all packages in the monorepo\n> yarn build # create production build for all craftjs packages\n> yarn lint # run tests across the monorepo \n```\n\n----------------------------------------\n\nTITLE: Installing Craft.js Core via Yarn - Bash Script\nDESCRIPTION: This snippet demonstrates how to add the core Craft.js package to a project using the Yarn package manager. It is required for leveraging Craft.js functionality within a React-based page editor. No input parameters are used, and upon completion, the @craftjs/core dependency becomes part of the project.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @craftjs/core\n```\n\n----------------------------------------\n\nTITLE: Installing Craft.js Core via npm - Bash Script\nDESCRIPTION: This bash command shows how to install the core Craft.js package using npm with the --save flag. This is essential for integrating Craft.js with a React project. There are no input parameters, and it adds @craftjs/core as a dependency in the package.json file.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @craftjs/core\n```\n\n----------------------------------------\n\nTITLE: Understanding Node Types with Craft.js Frame and Element (JSX)\nDESCRIPTION: This snippet visualizes how elements placed inside <Frame> are internally managed as Nodes by Craft.js, assigning them types that dictate their drag or drop behaviors. Each React component in the hierarchy becomes a Node, with default (non-Canvas) behavior when wrapped directly in Frame, making them non-draggable and non-droppable. No special dependencies are required; this is a conceptual code block for understanding node type mapping. No direct output except for developer context.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Explanation\n<Frame>\n  <Container padding={5} background=\"#eee\"> // Node of type Container\n    <Card /> // Node of type Card\n    <Button size=\"small\" variant=\"outlined\">Click</Button> // Node of type Button\n    <Text size=\"small\" text=\"Hi world!\" /> // Node of type Text\n    <Container padding={2} background=\"#999\"> // Node of type Container\n       <Text size=\"small\" text=\"It's me again!\" /> // Node of type Text\n    </Container>\n  </Container>\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies for Editor Design - Bash Script\nDESCRIPTION: This snippet installs Material UI, react-contenteditable, and a color picker for building the editor interface. Using Yarn, it streamlines the addition of multiple packages needed for advanced UI features. After running this command, all three packages are ready to be used as dependencies in React components.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/site/docs/guides/basic-tutorial.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material react-contenteditable material-ui-color-picker\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Craft.js Releases - Yarn - Bash\nDESCRIPTION: This snippet illustrates the command to initiate a changeset in Craft.js, ensuring that relevant changes are tracked prior to release. Dependency: yarn; Changesets must be installed as per project requirements. Input: none. Output: starts an interactive process to generate a new changeset. Used primarily when submitting functional changes to packages.\nSOURCE: https://github.com/prevwong/craft.js/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn changeset\n```"
  }
]