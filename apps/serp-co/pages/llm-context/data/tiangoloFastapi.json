[
  {
    "owner": "tiangolo",
    "repo": "fastapi",
    "content": "TITLE: Creating a Basic FastAPI Application in Python\nDESCRIPTION: This snippet shows how to import FastAPI, create an instance, and define a simple GET endpoint that returns a JSON response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Path Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare a path parameter named `item_id` in a FastAPI route.  The path parameter is defined within the route's decorator, and its value is passed as an argument to the function. The function then returns a JSON response containing the value of the `item_id`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FastAPI Application in Python\nDESCRIPTION: This snippet shows how to create a simple FastAPI application with two GET endpoints. It demonstrates path parameters, query parameters, and type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Response Example\nDESCRIPTION: Sample JSON response from a FastAPI endpoint showing returned item_id and query parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Web Application\nDESCRIPTION: Basic FastAPI application setup with root endpoint and type-annotated items route\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Optional\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: bool = Optional[None]\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Optional[str] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic FastAPI Application in Python\nDESCRIPTION: This snippet shows how to create a simple FastAPI application with a single GET endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a root path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Deeply Nested Model Structures\nDESCRIPTION: Definition of complex nested model relationships with multiple levels of hierarchy for representing complex JSON structures.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass Image:\n    url: str\n    name: str\n\n\nclass Item:\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer:\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n```\n\n----------------------------------------\n\nTITLE: Sample OpenAPI JSON Schema\nDESCRIPTION: This JSON snippet demonstrates the structure of the OpenAPI schema generated by FastAPI for the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a basic FastAPI application with async\nDESCRIPTION: This Python code snippet demonstrates an asynchronous FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. The `async def` syntax allows the routes to handle asynchronous operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/\")\\nasync def read_root():\\n    return {\\\"Hello\\\": \\\"World\\\"}\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: int, q: Union[str, None] = None):\\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple WebSocket Connections with FastAPI\nDESCRIPTION: Demonstrates how to manage multiple WebSocket connections and handle disconnections. This implementation maintains a connection manager that tracks all active connections for broadcasting messages.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    while True:\n        data = await websocket.receive_text()\n        await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n        await manager.broadcast(f\"Client #{client_id} says: {data}\")\nexcept WebSocketDisconnect:\n    manager.disconnect(websocket)\n    await manager.broadcast(f\"Client #{client_id} left the chat\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Type Declarations with FastAPI\nDESCRIPTION: Example showing how to use Python type hints with FastAPI, including a basic function with type annotation and a Pydantic model definition for data validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare a variable as a str\n# and get editor support inside the function\ndef main(user_id: str):\n    return user_id\n\n\n# A Pydantic model\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Running a FastAPI Application with Uvicorn\nDESCRIPTION: This command demonstrates how to start the FastAPI application using Uvicorn. It specifies the main module, the app instance, and enables auto-reloading for development.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FastAPI Application\nDESCRIPTION: Example of a simple FastAPI application with two routes: a root endpoint and an item endpoint with path and query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Starting FastAPI Application with Uvicorn - Python\nDESCRIPTION: This snippet demonstrates how to start a FastAPI application using the Uvicorn ASGI server, enabling live reloading during development.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n<span style=\"color: green;\">INFO</span>:     Started reloader process [28720]\n<span style=\"color: green;\">INFO</span>:     Started server process [28722]\n<span style=\"color: green;\">INFO</span>:     Waiting for application startup.\n<span style=\"color: green;\">INFO</span>:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Creating Pydantic Data Model\nDESCRIPTION: Defines a Pydantic model class for validating request body data with optional and required fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n```\n\n----------------------------------------\n\nTITLE: Adding Global Dependencies to FastAPI Application\nDESCRIPTION: Demonstrates how to configure dependencies at the FastAPI application level that will be applied to all path operations. This example shows the app instantiation with dependencies parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/global-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\\n\\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI and Uvicorn in Python\nDESCRIPTION: Commands to install FastAPI with all optional dependencies and the Uvicorn ASGI server using pip.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n\n---> 100%\n\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Using await with Asynchronous Functions in FastAPI\nDESCRIPTION: This code demonstrates how to use the `await` keyword within an asynchronous path operation in FastAPI. The `read_burgers` function, decorated with `@app.get('/burgers')`, is defined as `async def` and uses `await` to call the `get_burgers` function, ensuring that the burger results are awaited before being returned. The `@app.get('/burgers')` is assumed to be previously defined.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"2-3\"\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Application in Python\nDESCRIPTION: A simple FastAPI application with two routes - a root endpoint and an item endpoint with path and query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Example (Python 3.10+)\nDESCRIPTION: Example of defining and using a Pydantic model in Python 3.10+, demonstrating data validation and type hinting.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import List\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str = 'John Doe'\n    signup_ts: datetime | None = None\n    friends: List[int] = []\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, 2, '3'],\n}\nuser = User(**external_data)\nprint(user.id)\nprint(repr(user.signup_ts))\nprint(user.friends)\n```\n\n----------------------------------------\n\nTITLE: Configuring APIRouter with Prefix, Tags, and Dependencies in FastAPI (Python)\nDESCRIPTION: This code shows how to configure an APIRouter with a prefix, tags, extra responses, and dependencies for a group of item-related endpoints in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Schema with FastAPI\nDESCRIPTION: This snippet defines an Item schema using FastAPI, illustrating how to declare parameters types with standard Python type hints. This allows FastAPI to automatically handle data validation and conversion.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nitem_id: int\n\"\"\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nitem: Item\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI\nDESCRIPTION: This code shows how to instantiate and use Pydantic models in FastAPI. It demonstrates creating a model instance directly with parameters and also using dictionary unpacking to populate a model from a data dictionary.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI Application Metadata\nDESCRIPTION: Set custom metadata for an API, including title, description, and version for OpenAPI documentation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    title=\"My Super Project\",\n    description=\"This is a very fancy project, with auto docs for the API and everything\",\n    version=\"2.5.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Heroes List Endpoint in FastAPI\nDESCRIPTION: Implements GET endpoint to retrieve list of heroes, using HeroPublic model for response serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    *,\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, lte=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Generation Endpoint in FastAPI\nDESCRIPTION: This Python code snippet demonstrates how to implement a token generation endpoint in FastAPI. It authenticates the user and returns a JWT token upon successful authentication.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/token\", response_model=Token)\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n):\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Annotated Dependencies in FastAPI\nDESCRIPTION: Shows how to create a reusable Annotated dependency to reduce code duplication when using the same dependency in multiple path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Mixing Path and Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to use both path parameters (`item_id`) and query parameters (`q`) in the same FastAPI endpoint.  FastAPI automatically distinguishes between them based on the function signature.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Dependencies in FastAPI\nDESCRIPTION: This snippet showcases the creation of dependencies for user authentication, including checking for user existence, authentication, and active status.  It demonstrates how to use `HTTPException` to return errors if the user is not found, not authenticated, or inactive, and how to return a `User` object after successful authentication and activity verification.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n    hashed_password: str\n\n\nclass UserInDB(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n    hashed_password: str\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"email\": \"johndoe@example.com\",\n        \"full_name\": \"John Doe\",\n        \"disabled\": False,\n        \"hashed_password\": \"fakehashedsecret\",\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"email\": \"alice@example.com\",\n        \"full_name\": \"Alice Alison\",\n        \"disabled\": True,\n        \"hashed_password\": \"fakehashedsecret\",\n    },\n}\n\n\ndef fake_hash_password(password: str):\n    return f\"fakehashed{password}\"\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nasync def get_user(username: str):\n    if username in fake_users_db:\n        user_dict = fake_users_db[username]\n        return User(**user_dict)\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = await get_user(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: Annotated[User, Depends(get_current_user)]):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\napp = FastAPI()\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = fake_users_db.get(form_data.username)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    if not fake_hash_password(form_data.password) == user[\"hashed_password\"]:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return {\"access_token\": user[\"username\"], \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Secure Username/Password Check with FastAPI\nDESCRIPTION: This snippet extends the basic example by adding a dependency that checks if the username and password are correct using `secrets.compare_digest()` for timing attack protection. It first converts the username and password to bytes using UTF-8 encoding. If the credentials are incorrect, it raises an `HTTPException`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/security/tutorial007_an_py39.py hl[1,12:24] *}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Summary and Description to FastAPI Endpoints\nDESCRIPTION: Example of adding summary and description metadata to FastAPI path operations using decorator parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/items/\",\n    summary=\"Create an item\",\n    description=\"Create an item with all the information\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hero Endpoint in FastAPI\nDESCRIPTION: Implements POST endpoint to create a new hero using HeroCreate model for input validation and HeroPublic model for response serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):\n    hero_db = Hero.model_validate(hero)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n```\n\n----------------------------------------\n\nTITLE: Importing and Raising HTTPException in FastAPI\nDESCRIPTION: Shows how to import and raise HTTPException for handling API errors with custom status codes and messages.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import HTTPException\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application\nDESCRIPTION: This command shows how to start a FastAPI application in development mode. It assumes the main application code is in a file named `main.py`. The `fastapi dev` command starts the server and provides useful information about the application's status, including the URL for accessing the documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"fastapi dev <u style=\\\"text-decoration-style:solid\\\">main.py</u>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLModel Engine for Database Connection in Python\nDESCRIPTION: Initializes a SQLModel engine to connect to an SQLite database. It uses check_same_thread=False to allow FastAPI to use the same SQLite database in different threads.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nengine = create_engine(sqlite_url, echo=True, connect_args={\"check_same_thread\": False})\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic FastAPI Metadata\nDESCRIPTION: Example showing how to set basic metadata fields like title, summary, description, version, terms of service, contact info, and license information for a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\ndescription = \"\"\"\nChimichangas FastAPI helps you do awesome stuff. 🚀\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_)\n* **Read users** (_not implemented_)\n\"\"\"\n\ntags_metadata = [\n    {\n        \"name\": \"items\",\n        \"description\": \"Operations with items. The _cool_ stuff.\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Hero Model with SQLModel in Python\nDESCRIPTION: Defines a Hero class using SQLModel to represent a table in the SQL database. It includes fields for id, name, age, and secret name, with annotations for primary key and index.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Hero(SQLModel, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: int | None = Field(default=None, index=True)\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Basic Auth with FastAPI\nDESCRIPTION: This snippet demonstrates the basic implementation of HTTP Basic Authentication using FastAPI. It imports `HTTPBasic` and `HTTPBasicCredentials`, creates a security scheme, and uses it in a path operation dependency. The path operation returns an `HTTPBasicCredentials` object containing the provided username and password.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Python Type Declarations with Pydantic in FastAPI\nDESCRIPTION: Demonstrates how to use Python type hints with Pydantic models in FastAPI. The example shows a simple function with type annotation and a Pydantic model definition for a User entity with typed fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# 변수를 str로 선언\n# 그 후 함수 안에서 편집기 지원을 받으세요\ndef main(user_id: str):\n    return user_id\n\n\n# Pydantic 모델\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Pydantic Settings class definition (v2)\nDESCRIPTION: This code defines a Pydantic `Settings` class to handle configuration values, reading them from environment variables. It demonstrates type annotations, default values, and additional validation using `Field()` from Pydantic v2.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom pydantic import BaseModel, Field\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = Field(\"Awesome API\", alias=\"APP_NAME\")\n    admin_email: str\n    items_per_user: int = 50\n    model_config = SettingsConfigDict(env_file=\".env\", env_prefix=\"MY_PREFIX_\")\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Defining a Dependency as a Class in FastAPI\nDESCRIPTION: This code defines a dependency as a Python class, `CommonQueryParams`. This approach allows for type hints and better code organization compared to using dictionaries. The class's `__init__` method handles the query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Function in Python\nDESCRIPTION: This code defines a fake_decode_token function to simulate token decoding and user retrieval, and a get_current_user dependency that uses the OAuth2 scheme to authenticate users.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n```\n\n----------------------------------------\n\nTITLE: Customizing Documentation UI URLs\nDESCRIPTION: Example of customizing the URLs for Swagger UI documentation and disabling ReDoc in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n```\n\n----------------------------------------\n\nTITLE: Returning a Dictionary from a FastAPI Path Operation\nDESCRIPTION: This snippet illustrates returning a dictionary from a FastAPI path operation function. FastAPI automatically converts the returned dictionary into a JSON response. The dictionary can contain any serializable data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"    return {\"message\": \"Hello World\"}\"\n```\n\n----------------------------------------\n\nTITLE: URL Validation with HttpUrl\nDESCRIPTION: Uses Pydantic's HttpUrl type for URL validation in Image model\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, HttpUrl\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Settings Class in Python\nDESCRIPTION: Defines a Settings class using Pydantic BaseSettings to manage environment variables with type hints and default values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseSettings, Field\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Path Parameter in FastAPI\nDESCRIPTION: This code snippet demonstrates how to declare a basic path parameter in a FastAPI application. The `item_id` parameter is extracted from the URL path and passed as an argument to the `read_item` function. The function then returns a dictionary containing the received `item_id`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    return {\"item_id\": item_id}\"\"\n```\n\n----------------------------------------\n\nTITLE: Path Parameters with Enum in FastAPI\nDESCRIPTION: This code demonstrates how to use Python's `Enum` to define predefined valid values for a path parameter. The `ModelName` enum specifies the allowed values for the `model_name` parameter. The route then uses this enum to perform comparisons and return values based on the selected model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from enum import Enum\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware in FastAPI\nDESCRIPTION: Implementation of a FastAPI middleware that measures request processing time and adds a custom X-Process-Time header to the response. Uses time.perf_counter() for precise timing measurement.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Password Flow in FastAPI\nDESCRIPTION: This code snippet demonstrates how to set up OAuth2 password flow authentication in a FastAPI application. It defines a token endpoint and a protected route that requires authentication.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation for Query Parameters using Pydantic AfterValidator in FastAPI (Python 3.10+)\nDESCRIPTION: Implements custom validation for an item ID parameter using Pydantic's AfterValidator. The validator checks if the item ID starts with either 'isbn-' or 'imdb-', enforcing a specific format pattern.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import AfterValidator\n\napp = FastAPI()\n\ndata = {\n    \"imdb-tt0371724\": \"The Hitchhiker's Guide to the Galaxy\",\n    \"isbn-9780575079212\": \"The Restaurant at the End of the Universe\",\n    \"imdb-tt0297969\": \"A Hitchhiker's Guide to the Galaxy (original TV series)\",\n}\n\n\ndef validate_item_id(value: str) -> str:\n    if not value.startswith((\"isbn-\", \"imdb-\")):\n        raise ValueError(\"Not a valid ISBN or IMDB ID\")\n    return value\n\n\n@app.get(\"/items/{item_id}\")\nasync def get_item_info(\n    item_id: Annotated[str | None, AfterValidator(validate_item_id)] = None,\n):\n    if item_id is None:\n        # Provide a random item\n        id, name = random.choice(list(data.items()))\n        return {\"id\": id, \"name\": name, \"description\": \"Random Item\"}\n    name = data.get(item_id)\n    return {\"id\": item_id, \"name\": name, \"description\": \"Specific Item\"}\n```\n\n----------------------------------------\n\nTITLE: Type hinting for Item model in FastAPI\nDESCRIPTION: This snippet shows how to use type hints with a custom model `Item` in FastAPI.  This enables data validation, serialization, and automatic API documentation. FastAPI uses this type information to handle data conversion and validation automatically.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nitem: Item\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse for File Downloads in FastAPI\nDESCRIPTION: Example showing how to use FileResponse to serve a file for download. This handles Content-Length, Last-Modified, and ETag headers automatically.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    some_file_path = \"large-video-file.mp4\"\n    return FileResponse(some_file_path)\n```\n\n----------------------------------------\n\nTITLE: Defining a Pydantic Model in Python 3.8+\nDESCRIPTION: This code snippet defines a Pydantic model with various fields and their corresponding type hints. Pydantic validates and converts data when an instance of the model is created. The `User` model is defined using `BaseModel` and includes fields like `id`, `name`, `signup_ts`, and `friends`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"from datetime import datetime\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = 'John Doe'\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, '2', b'3'],\n}\n\nuser = User(**external_data)\nprint(user.id)\nprint(user.friends)\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Response Parameter in Path Function\nDESCRIPTION: Demonstrates how to set cookies by defining a Response parameter in a path function, allowing temporary cookie configuration before final response generation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Snippet referencing Response parameter for cookie management\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Middleware in FastAPI - Python\nDESCRIPTION: This code snippet demonstrates how to add a custom ASGI middleware to a FastAPI application using the `add_middleware` method. The middleware class and any additional configuration can be specified as arguments. This approach ensures that server errors and custom exception handlers function properly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom unicorn import UnicornMiddleware\n\napp = FastAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Dependency for FastAPI in Python\nDESCRIPTION: Defines a FastAPI dependency that provides a new SQLModel Session for each request, ensuring a single session per request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\nSessionDep = Annotated[Session, Depends(get_session)]\n```\n\n----------------------------------------\n\nTITLE: FastAPI Asynchronous Endpoint Implementation\nDESCRIPTION: Demonstrates how to create a FastAPI endpoint that uses async/await to handle asynchronous operations. The function asynchronously retrieves burger data and returns it to the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Reading a Single Hero API Endpoint with FastAPI and SQLModel in Python\nDESCRIPTION: Implements a GET endpoint to read a single Hero from the database by ID using SQLModel and FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=Hero)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating APIRouter in FastAPI (Python)\nDESCRIPTION: This snippet shows how to import APIRouter from FastAPI and create an instance of it in a users module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n```\n\n----------------------------------------\n\nTITLE: Importing the FastAPI Class in Python\nDESCRIPTION: Shows how to import the FastAPI class directly from the fastapi module. This is the fundamental import needed to create a FastAPI application instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/fastapi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n```\n\n----------------------------------------\n\nTITLE: Creating a Hero API Endpoint with FastAPI and SQLModel in Python\nDESCRIPTION: Implements a POST endpoint to create a new Hero in the database using SQLModel and FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/heroes/\", response_model=Hero)\ndef create_hero(hero: Hero, session: SessionDep):\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n```\n\n----------------------------------------\n\nTITLE: Running pytest for FastAPI Tests\nDESCRIPTION: Command to run pytest for executing the FastAPI test suite.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Using settings from config in main module\nDESCRIPTION: This snippet demonstrates how to import and use the `Settings` object defined in the `config.py` module within the main application file (`main.py`). It showcases accessing the settings to configure the application's behavior.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\nfrom .config import settings\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI\nDESCRIPTION: Demonstration of how to instantiate and use Pydantic models in FastAPI, including direct instantiation and dictionary unpacking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering a Jinja2 Template in FastAPI\nDESCRIPTION: Illustrates how to configure and use Jinja2 templates within a FastAPI application by importing Jinja2Templates, creating a templates object, and rendering a template with TemplateResponse. This example also covers setting context for templates and specifying that the response is HTML.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI()\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\"item.html\", {\"request\": request, \"id\": id})\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI with openapi_tags - Python\nDESCRIPTION: This code snippet demonstrates how to add metadata for tags in FastAPI using the `openapi_tags` parameter. It shows how to include descriptions and external documentation links for each tag.  Markdown can be used in descriptions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Metadata for tags.\n\"\"\"\n\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs description\",\n            \"url\": \"https://example.com/\",\n        },\n    },\n]\n\napp = FastAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Potter\"}]\n\n\n@app.get(\"/items\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Potter\"}]\n\n\n@app.get(\"/items\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Path Parameter with Integer Validation\nDESCRIPTION: Demonstrates type annotation for path parameters, enabling automatic type conversion and validation in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Webhooks in FastAPI Application\nDESCRIPTION: This snippet demonstrates how to define webhooks in a FastAPI application using the webhooks property. It shows creating a POST webhook for 'new-subscription' events, complete with request body model definition using Pydantic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/openapi-webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\nclass WebhookEvent(BaseModel):\n    event_type: str\n    item_id: int\n    webhook_url: str\n\n\n# Define a webhook that your app will call to notify external systems\n# The name \"new-subscription\" is just an identifier for the webhook\n@app.webhooks.post(\"new-subscription\")\ndef subscription_webhook(body: WebhookEvent):\n    \"\"\"\n    Example of a webhook that would be called by this app when there's a new subscription.\n    \n    The external URL would be defined by users of your API, not here in your code.\n    \n    This function isn't meant to be called by your API users directly,\n    it's meant to document the shape of the webhook request that your system would make.\n    \"\"\"\n    # This is just for documentation, it won't be called in normal operation\n    # Your actual webhook sending code would be elsewhere in your application\n    return JSONResponse(content={\"message\": \"Webhook received\"})\n```\n\n----------------------------------------\n\nTITLE: Combining Path, Query, and Request Body Parameters\nDESCRIPTION: Shows how to handle path parameters, query parameters, and request body data in a single endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item, q: str | None = None):\n```\n\n----------------------------------------\n\nTITLE: Adding a Background Task in FastAPI Path Operation Function\nDESCRIPTION: This snippet demonstrates how to add a background task within a path operation function using the .add_task() method.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbackground_tasks.add_task(write_notification, email, message=\"some notification\")\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Data Types in FastAPI Path Operations\nDESCRIPTION: This example demonstrates how to use complex data types like UUID, datetime, and others in a FastAPI path operation. The function parameters automatically receive the correct data types after conversion from request data, allowing for natural operations like date arithmetic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime | None = Body(default=None),\n    end_datetime: datetime | None = Body(default=None),\n    repeat_at: time | None = Body(default=None),\n    process_after: timedelta | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating a Hero\nDESCRIPTION: This snippet updates an existing hero using a `PATCH` request and the `HeroUpdate` model. `exclude_unset=True` ensures only provided data from the client is updated. It fetches the existing hero, updates fields using `hero_db.sqlmodel_update(hero_data)`, commits changes, and refreshes the object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\nasync def update_hero(hero_id: int, hero: HeroUpdate, db: Session = Depends(get_db)):\n    hero_db = db.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.dict(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    db.add(hero_db)\n    db.commit()\n    db.refresh(hero_db)\n    return hero_db\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Password Bearer Authentication in FastAPI\nDESCRIPTION: Configure OAuth2 password authentication scheme using OAuth2PasswordBearer, setting up a token URL for authentication and security dependencies\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/items/\")\ndef read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n----------------------------------------\n\nTITLE: Mixed Required and Optional Query Parameters in FastAPI\nDESCRIPTION: This example shows a combination of required, optional, and default-valued query parameters in a FastAPI route. It includes a required string, an integer with a default value, and an optional integer.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Related User Models in FastAPI\nDESCRIPTION: Demonstrates creating different Pydantic models for user data: input model with password, output model without password, and database model with hashed password.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return f\"supersecret{raw_password}\"\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\napp = FastAPI()\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Operation Function in FastAPI (Async)\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI. The `@app.get(\"/\")` decorator associates the `root` function with the root path (\"/\") and the GET HTTP method.  The function returns a dictionary which FastAPI automatically converts to JSON.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\"\n```\n\n----------------------------------------\n\nTITLE: Main FastAPI Application Initialization\nDESCRIPTION: Initializes the main FastAPI application with global dependencies and imports submodule routers\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\nfrom .routers import items, users\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Endpoint in FastAPI\nDESCRIPTION: Demonstrates how to create a simple WebSocket endpoint in a FastAPI application. It includes importing necessary modules and defining a WebSocket route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Credentials in FastAPI\nDESCRIPTION: This snippet shows how to check for invalid username or password and return an `HTTPException` with a 401 status code. It checks if a user exists in the database and raises an exception if not.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    user = fake_users_db.get(form_data.username)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Test Setup in Python\nDESCRIPTION: Example of setting up a basic test for a FastAPI application using TestClient and pytest.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Reading Heroes API Endpoint with FastAPI and SQLModel in Python\nDESCRIPTION: Implements a GET endpoint to read Heroes from the database with pagination using SQLModel and FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/\", response_model=list[Hero])\ndef read_heroes(offset: int = 0, limit: int = Query(default=100, le=100), session: SessionDep):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication and Error in FastAPI\nDESCRIPTION: This code snippet demonstrates how to handle user authentication by checking the username from form data against a database. It raises an HTTPException if the user is not found.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import HTTPException, status\n\nuser = fake_users_db.get(form_data.username)\nif not user:\n    raise HTTPException(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        detail=\"Incorrect username or password\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Path Operation Function in FastAPI\nDESCRIPTION: Demonstrates how to create an asynchronous path operation function in FastAPI that awaits a third-party library response. This allows FastAPI to handle other requests while waiting for the library to respond.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Password Bearer Authentication in FastAPI\nDESCRIPTION: Configure OAuth2 password bearer authentication using FastAPI's OAuth2PasswordBearer class, setting up a token URL and security scheme for API endpoints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT and Password Hashing in FastAPI\nDESCRIPTION: This Python code snippet demonstrates how to implement JWT token handling and password hashing in a FastAPI application. It includes functions for password hashing, verification, and JWT token generation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom datetime import datetime, timedelta\nfrom typing import Annotated\n\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n```\n\n----------------------------------------\n\nTITLE: Importing Depends in FastAPI\nDESCRIPTION: Shows how to import the Depends function from FastAPI, which is used to declare dependencies in path operation functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\n```\n\n----------------------------------------\n\nTITLE: Combining Path, Query, and Request Body Parameters\nDESCRIPTION: Demonstrates how to use path parameters, query parameters, and request body parameters together in a single path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication and Authorization Dependencies\nDESCRIPTION: This snippet defines dependencies for getting the current user and verifying if the user is active, which can be used in protected routes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)]\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI with API Metadata - Python\nDESCRIPTION: This code snippet demonstrates how to initialize a FastAPI application and set API metadata such as title, summary, description, version, terms_of_service, contact, and license_info. These metadata fields are used in the OpenAPI specification and automatic API documentation interfaces. The description field supports Markdown.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Metadata.\n\"\"\"\n\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"My Super Project\",\n    summary=\"Very nice project with automatic docs, using Pydantic and FastAPI.\",\n    description=\"\"\"\n        ## My Super Project\n\n        Very nice project with automatic docs, using **Pydantic** and _FastAPI_.\n        \"\"\",\n    version=\"0.1.0\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://example.com/contact/\",\n        \"email\": \"dp@example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n```\n\n----------------------------------------\n\nTITLE: Password Hashing and JWT Token Generation in FastAPI\nDESCRIPTION: This snippet shows password hashing using passlib and JWT token generation with PyJWT.  It defines functions for hashing passwords, verifying passwords, and creating access tokens.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom typing import Optional\n\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\n\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef get_password_hash(password: str):\n    return pwd_context.hash(password)\n\n\ndef verify_password(plain_password: str, hashed_password: str):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"email\": \"johndoe@example.com\",\n        \"full_name\": \"John Doe\",\n        \"hashed_password\": get_password_hash(\"secret\"),\n        \"disabled\": False,\n    }\n}\n\n\ndef get_user(username: str):\n    if username in fake_users_db:\n        user_dict = fake_users_db[username]\n        return user_dict\n\n\ndef authenticate_user(username: str, password: str):\n    user = get_user(username)\n    if not user:\n        return False\n    if not verify_password(password, user[\"hashed_password\"]):\n        return False\n    return user\n\n\n\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"  # Change this in production\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfrom pydantic import BaseModel\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n```\n\n----------------------------------------\n\nTITLE: OpenAPI JSON Schema for FastAPI Application\nDESCRIPTION: This JSON snippet represents a portion of the automatically generated OpenAPI schema for the FastAPI application. It includes basic information about the API and its endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Function in Python\nDESCRIPTION: Shows how to create an asynchronous function using async def syntax. This function asynchronously creates and returns burgers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_burgers(number: int):\n    # Do some asynchronous stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Using jsonable_encoder in FastAPI (Python)\nDESCRIPTION: This code snippet demonstrates how to use the jsonable_encoder function to convert a Pydantic model to a JSON-compatible format. It includes the import statement and an example of encoding a fake_db_item.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/encoder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.encoders import jsonable_encoder\n\n# ... (other code)\n\nfake_db_item = jsonable_encoder(item)\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Scopes for Path Operations in Python\nDESCRIPTION: This snippet shows how to declare required scopes for path operations using the Security class from FastAPI. It demonstrates setting different scopes for different levels of dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.security import SecurityScopes\n\n# ...\n\nget_current_active_user = Security(get_current_active_user, scopes=[\"me\"])\n\n# ...\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Security(get_current_active_user, scopes=[\"items\"])):\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handler Implementation\nDESCRIPTION: Shows how to create and register a custom exception handler for handling specific exceptions across the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"}\n    )\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Callable Class in FastAPI\nDESCRIPTION: This snippet shows the instantiation of a callable class, allowing the encapsulated parameters to be used as dependencies in FastAPI path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nchecker = FixedContentQueryChecker(fixed_content=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Extended FastAPI Test Suite in Python\nDESCRIPTION: A comprehensive test suite for the extended FastAPI application, covering various scenarios including error cases and header validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_users_me():\n    response = client.get(\"/users/me\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\ndef test_read_users_me_unauth():\n    response = client.get(\"/users/me\", headers={\"X-Token\": \"wrong\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_read_users():\n    response = client.get(\"/users\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 200\n    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\ndef test_read_user():\n    response = client.get(\"/users/fakecurrentuser\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\ndef test_read_user_unauth():\n    response = client.get(\"/users/fakecurrentuser\", headers={\"X-Token\": \"wrong\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n\n\ndef test_read_user_not_found():\n    response = client.get(\"/users/wronguser\", headers={\"X-Token\": \"fake-super-secret-token\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Wrong username\"}\n\n\ndef test_create_user():\n    response = client.post(\n        \"/users\",\n        headers={\"X-Token\": \"fake-super-secret-token\"},\n        json={\"username\": \"fakecurrentuser\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"username\": \"fakecurrentuser\"}\n\n\ndef test_create_user_invalid():\n    response = client.post(\n        \"/users\",\n        headers={\"X-Token\": \"fake-super-secret-token\"},\n        json={\"username\": \"invaliduser\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Wrong username\"}\n\n\ndef test_create_user_invalid_token():\n    response = client.post(\n        \"/users\",\n        headers={\"X-Token\": \"wrong\"},\n        json={\"username\": \"fakecurrentuser\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n```\n\n----------------------------------------\n\nTITLE: Lanzando una excepción personalizada\nDESCRIPTION: Ejemplo de cómo lanzar una excepción personalizada (UnicornException) desde una path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/unicorns/{name}\")\\nasync def read_unicorn(name: str):\\n    if name == \"yolo\":\\n        raise UnicornException(name=name)\\n    return {\"unicorn_name\": name}\n```\n\n----------------------------------------\n\nTITLE: UJSONResponse Example in FastAPI\nDESCRIPTION: This example demonstrates the usage of `UJSONResponse` in FastAPI. It imports the `UJSONResponse` class and then uses it as the `response_class` for a *path operation*.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_class=UJSONResponse)  # HL\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n\n```\n\n----------------------------------------\n\nTITLE: Verify User Credentials with FastAPI\nDESCRIPTION: This code snippet demonstrates how to verify user credentials in FastAPI using the secrets.compare_digest() function to prevent timing attacks. The username and password are first encoded to bytes using UTF-8, and then compared using secrets.compare_digest() to ensure they match the expected values. If the credentials are invalid, an HTTPException is raised with a 401 status code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"import secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    correct_username = secrets.compare_digest(credentials.username, \\\"stanleyjobson\\\")\n    correct_password = secrets.compare_digest(credentials.password, \\\"swordfish\\\")\n    if not (correct_username and correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\\\"Incorrect email or password\\\",\n            headers={\\\"WWW-Authenticate\\\": \\\"Basic\\\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return HTMLResponse(f\\\"Hello <b>{username}</b>\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with Pydantic Model in FastAPI\nDESCRIPTION: Demonstrates how to create a Pydantic model for query parameters in FastAPI, showing parameter declaration and model usage in an endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n../../docs_src/query_param_models/tutorial001_an_py310.py\n```\n\n----------------------------------------\n\nTITLE: Using the settings object\nDESCRIPTION: This code snippet demonstrates how to access and use the attributes of a `Settings` object in a FastAPI application. The settings have already been populated with values from environment variables and default values, and data validation has been done.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items():\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Using Lists of Submodels in Pydantic for FastAPI\nDESCRIPTION: This snippet demonstrates how to use Pydantic models as subtypes of list fields, allowing for complex nested structures in FastAPI request bodies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimages: List[Image]\n```\n\n----------------------------------------\n\nTITLE: Update get_current_user with JWT token verification\nDESCRIPTION: This code snippet shows how to update the `get_current_user` function to retrieve and verify JWT tokens from the Authorization header. It decodes the token, checks its validity, and returns the current user.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\n\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n```\n\n----------------------------------------\n\nTITLE: Reusing FastAPI's Default Exception Handlers\nDESCRIPTION: This code snippet illustrates how to reuse FastAPI's default exception handlers after performing custom actions on the exception. It imports default exception handlers from `fastapi.exception_handlers` and calls them within a custom exception handler, allowing you to extend the default behavior.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Request, status\\nfrom fastapi.encoders import jsonable_encoder\\nfrom fastapi.exceptions import RequestValidationError\\nfrom fastapi.exception_handlers import (\\n    request_validation_exception_handler,\\n    http_exception_handler,\\n)\\nfrom fastapi.responses import JSONResponse\\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\\n\\napp = FastAPI()\\n\\n\\n@app.exception_handler(StarletteHTTPException)\\nasync def custom_http_exception_handler(\\n    request: Request, exc: StarletteHTTPException\\n) -> JSONResponse:\\n    print(f\\\"Ooooops! HTTPException!: {exc.detail}\\\")\\n    return await http_exception_handler(request, exc)\\n\\n\\n@app.exception_handler(RequestValidationError)\\nasync def custom_validation_exception_handler(\\n    request: Request, exc: RequestValidationError\\n) -> JSONResponse:\\n    print(f\\\"Ooooops! RequestValidationError!: {exc.errors()}\\\")\\n    return await request_validation_exception_handler(request, exc)\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: int):\\n    if item_id == 3:\\n        raise StarletteHTTPException(status_code=status.HTTP_418_IM_A_TEAPOT, detail=\\\"Nope! I don't like 3.\\\")\\n    return {\\\"item_id\\\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic API Metadata in FastAPI\nDESCRIPTION: This snippet demonstrates how to set basic metadata for a FastAPI application including title, description, version, terms of service, contact information, and license details.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"My Super Project\",\n    summary=\"FastAPI example with metadata and docs URLs\",\n    description=\"This is a very fancy project, with auto docs for the API and everything\",\n    version=\"2.5.0\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpond\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in FastAPI Path Operation\nDESCRIPTION: This snippet shows how to set a custom HTTP status code (201 Created) for a POST request in a FastAPI application using the status_code parameter in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", status_code=201)\n```\n\n----------------------------------------\n\nTITLE: Implementing get_current_user Dependency in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates the implementation of a get_current_user dependency in FastAPI. It uses the OAuth2 scheme to extract the token and a fake_decode_token function to validate and return the user.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n```\n\n----------------------------------------\n\nTITLE: Multi-Stage Docker Build with Poetry for FastAPI\nDESCRIPTION: A multi-stage Dockerfile that leverages Poetry for dependency management, generating a requirements.txt file in the first stage and building the final image in the second stage. Includes proper workspace setup and command configuration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9 as requirements-stage\n\nWORKDIR /tmp\n\nRUN pip install poetry\n\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Partial Update with PATCH in FastAPI (Python)\nDESCRIPTION: This code shows how to perform a partial update using the HTTP PATCH method in FastAPI. It uses Pydantic's exclude_unset and model_copy methods to apply updates only to specified fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nstored_item_data = items[item_id]\nstored_item_model = Item(**stored_item_data)\nupdate_data = item.dict(exclude_unset=True)\nupdated_item = stored_item_model.copy(update=update_data)\nitems[item_id] = jsonable_encoder(updated_item)\nreturn updated_item\n```\n\n----------------------------------------\n\nTITLE: Installing a Custom Exception Handler in FastAPI\nDESCRIPTION: This code shows how to install a custom exception handler for a specific exception type (UnicornException).  The `@app.exception_handler()` decorator is used to register a function that will handle exceptions of the specified type. The handler receives the `Request` object and the exception instance as arguments, and it must return a `Response` object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Request\\nfrom fastapi.responses import JSONResponse\\n\\napp = FastAPI()\\n\\nclass UnicornException(Exception):\\n    def __init__(self, name: str):\\n        self.name = name\\n\\n\\n@app.exception_handler(UnicornException)\\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\\n    return JSONResponse(\\n        status_code=418,\\n        content={\\\"message\\\": f\\\"Oops! {exc.name} did something. There goes a rainbow...\\\"},\\n    )\\n\\n\\n@app.get(\"/unicorns/{name}\")\\nasync def read_unicorn(name: str):\\n    if name == \\\"yolo\\\":\\n        raise UnicornException(name=name)\\n    return {\\\"unicorn_name\\\": name}\"\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies with WebSocket Endpoints in FastAPI\nDESCRIPTION: Shows how to implement dependency injection in WebSocket endpoints using FastAPI's Depends. This example demonstrates parameter validation and authorization through dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: str = Depends(get_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {q}\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Password Verification in FastAPI OAuth2 Implementation\nDESCRIPTION: This snippet shows the password verification process in the OAuth2 implementation. It uses a fake password hashing system and compares the hashed password with the one stored in the database.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nuser = UserInDB(**user_dict)\nif not fake_verify_password(form_data.password, user.hashed_password):\n    raise HTTPException(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        detail=\"Incorrect username or password\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Reading Single Hero Endpoint in FastAPI\nDESCRIPTION: Implements GET endpoint to retrieve a single hero by ID, using HeroPublic model for response serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(*, hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n```\n\n----------------------------------------\n\nTITLE: Using RedirectResponse in FastAPI\nDESCRIPTION: Shows how to use RedirectResponse to perform a redirect in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware in FastAPI\nDESCRIPTION: Example showing how to configure CORS middleware in a FastAPI application with custom origins, methods, and headers. Demonstrates setting up allowed origins, credentials, and HTTP methods for cross-origin requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\norigins = [\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Response Parameter in FastAPI\nDESCRIPTION: This code snippet demonstrates how to declare a Response parameter in a FastAPI path operation function to manage headers in a response object. The headers set in the temporal response object will be included in the final response returned by the API.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, response: Response):\n    response.headers[\"X-Custom-Header\"] = \"Value\"\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple SQLModel Models for Improved Security in Python\nDESCRIPTION: Creates multiple models (HeroBase, Hero, HeroPublic) using SQLModel to enhance security and versatility in the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass HeroBase(SQLModel):\n    name: str\n    age: int | None = None\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\nclass HeroPublic(HeroBase):\n    id: int\n```\n\n----------------------------------------\n\nTITLE: Async Context Manager for FastAPI Lifespan\nDESCRIPTION: This code snippet demonstrates how to define an async context manager using `@asynccontextmanager` for use with FastAPI's `lifespan` parameter. The code before the `yield` is executed during application startup, and the code after `yield` during shutdown.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@asynccontextmanager\\nasync def lifespan(app: FastAPI):\\n    # Load the ML model\\n    models = {}\\n    models[\"model1\"] = load_model()\\n    yield\\n    # Clean up the ML models\\n    models.clear()\"\n```\n\n----------------------------------------\n\nTITLE: Using Current User in FastAPI Path Operation (Python)\nDESCRIPTION: This snippet demonstrates how to use the get_current_user dependency in a FastAPI path operation. It injects the current user into the function and returns the user data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: FastAPI App Definition\nDESCRIPTION: This snippet demonstrates a basic FastAPI application with path operations that define models for request and response payloads. It uses `Item` and `ResponseMessage` models to structure the data, allowing automatic generation of API documentation and client code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nExternal Data Validation and Management.\\n\"\"\"\n\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\", response_model=ResponseMessage)\nasync def update_item(item_id: int, item: Item):\n    return {\"message\": f\"Item {item_id} updated\"}\n\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundTasks and Defining Path Operation Function in FastAPI\nDESCRIPTION: This snippet shows how to import the BackgroundTasks class and define a path operation function with a BackgroundTasks parameter in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import BackgroundTasks\n\n# ...\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables on FastAPI Startup in Python\nDESCRIPTION: Sets up an event handler to create database tables when the FastAPI application starts.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI()\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n```\n\n----------------------------------------\n\nTITLE: Creating a basic FastAPI application\nDESCRIPTION: This Python code snippet defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter.  It utilizes FastAPI's decorator-based routing and type hinting for request parameter validation and automatic documentation generation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/\")\\ndef read_root():\\n    return {\\\"Hello\\\": \\\"World\\\"}\\n\\n\\n@app.get(\"/items/{item_id}\")\\ndef read_item(item_id: int, q: Union[str, None] = None):\\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Raising HTTPException in FastAPI\nDESCRIPTION: This code demonstrates how to raise an `HTTPException` with a specific status code (404 in this case) and a detail message when an item is not found.  The `HTTPException` is raised when the `item_id` is not \"foo\", which simulates an item not being found. FastAPI automatically converts this exception into an appropriate HTTP response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, HTTPException\\n\\napp = FastAPI()\\n\\nitems = {\\n    \"foo\": {\\n        \"name\": \\\"The Foo Wrestlers\\\"\\n    }\\n}\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: str):\\n    if item_id not in items:\\n        raise HTTPException(status_code=404, detail=\\\"Item not found\\\")\\n    return items[item_id]\"\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP POST Route with Custom Status Code in FastAPI\nDESCRIPTION: This code snippet shows how to use FastAPI's @app.post() decorator to create a route that returns a specific HTTP status code upon successful item creation. The status_code parameter allows for customization of the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\\nasync def create_item(item: Item):\\n    return item\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in FastAPI Path Operations\nDESCRIPTION: Demonstrates how to use the Depends function to inject dependencies into path operation functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Using a Class Instance as a Dependency in FastAPI\nDESCRIPTION: This final snippet illustrates how to use the instance of a callable class as a dependency in a FastAPI path operation, enabling parameterized access to the instance's functionality.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\n\nasync def some_path_operation(q: str = Depends(checker)): \n    return {'fixed_content_included': q}\n```\n\n----------------------------------------\n\nTITLE: Python Union Type Declaration\nDESCRIPTION: This code snippet illustrates how to declare a variable that can accept values of different types using the `Union` type hint from the `typing` module in Python. It shows how to specify that a variable can be either of type `PlaneItem` or `CarItem`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"some_variable: PlaneItem | CarItem\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Dependencies in FastAPI\nDESCRIPTION: Creates dependencies to get the current user and check if the user is active, raising appropriate HTTP exceptions for invalid cases.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)]\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse in FastAPI\nDESCRIPTION: Demonstrates how to use ORJSONResponse for faster JSON serialization in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Extra for Custom Metadata in FastAPI\nDESCRIPTION: This snippet demonstrates how to extend the OpenAPI schema by using the `openapi_extra` parameter. This allows adding custom metadata that appears in the OpenAPI documentation for the specific path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npath_operation_function(openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\n```\n\n----------------------------------------\n\nTITLE: Fake Token Decoding Function in FastAPI (Python)\nDESCRIPTION: This code shows a fake implementation of a token decoding function. In a real application, this would validate the token and return the corresponding user data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in RequestValidationError Handler in FastAPI\nDESCRIPTION: This snippet shows how to access the invalid request body within a `RequestValidationError` handler. This is useful for logging or debugging purposes. `exc.body` provides access to the body of the request that caused the validation error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Union\\n\\nfrom fastapi import FastAPI, HTTPException, Request\\nfrom fastapi.encoders import jsonable_encoder\\nfrom fastapi.exceptions import RequestValidationError\\nfrom fastapi.responses import JSONResponse\\nfrom pydantic import BaseModel\\n\\napp = FastAPI()\\n\\n\\nclass Item(BaseModel):\\n    title: str\\n    size: int\\n\\n\\n@app.exception_handler(RequestValidationError)\\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\\n    print(f\\\"OMG! The client sent invalid data!: {exc.body}\\\")\\n    return JSONResponse(\\n        status_code=422,\\n        content=jsonable_encoder({\\\"detail\\\": exc.errors(), \\\"body\\\": exc.body}),\\n    )\\n\\n\\n@app.post(\"/items/\")\\nasync def create_item(item: Item):\\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Scheme in FastAPI (Python)\nDESCRIPTION: This snippet shows how to define an OAuth2 scheme in FastAPI, which is used as a dependency for token-based authentication.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n```\n\n----------------------------------------\n\nTITLE: Defining Input and Output Models for User Data in FastAPI\nDESCRIPTION: This snippet defines separate Pydantic models for user input (with password) and output (without password) in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Updating Item with PUT in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates how to update an item using the HTTP PUT method in FastAPI. It uses jsonable_encoder to convert input data to JSON-compatible format.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nitems[item_id] = jsonable_encoder(item)\nreturn items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Defining Path Operations with APIRouter in FastAPI (Python)\nDESCRIPTION: This code demonstrates how to use APIRouter to define path operations for user-related endpoints in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n```\n\n----------------------------------------\n\nTITLE: StreamingResponse in FastAPI\nDESCRIPTION: This snippet demonstrates how to use `StreamingResponse` to stream data from a generator function. This is particularly useful for large datasets or when generating data on the fly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\nimport asyncio\n\napp = FastAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"  # HL\n        await asyncio.sleep(0.01)\n\n\n@app.get(\"/video\")\nasync def main():\n    return StreamingResponse(fake_video_streamer(), media_type=\"video/mp4\")  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Configuring an APIRouter with prefix, tags, responses, and dependencies\nDESCRIPTION: Demonstrates how to configure an APIRouter with prefix, tags, responses and dependencies to avoid code duplication across path operations within the same module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Current User Retrieval Function\nDESCRIPTION: Creating a function to decode and validate OAuth2 tokens, retrieving the current authenticated user's information\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=401,\n        detail=\"Could not validate credentials\"\n    )\n    return user\n```\n\n----------------------------------------\n\nTITLE: Request Body with Price Calculation\nDESCRIPTION: Shows a complete FastAPI endpoint that processes request body data and calculates total price with tax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.model_dump()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n```\n\n----------------------------------------\n\nTITLE: Using Different Input and Output Models in FastAPI Route\nDESCRIPTION: This example shows how to use different models for input and output in a FastAPI route, filtering out sensitive data like passwords.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/user/\", response_model=UserOut)\ndef create_user(user: UserIn) -> Any:\n    return user\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GzipRoute Class in Python for FastAPI\nDESCRIPTION: This code snippet defines a GzipRoute class that extends FastAPI's APIRoute to use the custom GzipRequest class. It overrides the get_route_handler() method to create a GzipRequest from the original request before processing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Upgrading FastAPI Application with PUT Request and Request Body\nDESCRIPTION: This snippet extends the basic FastAPI application by adding a PUT endpoint that accepts a request body. It uses Pydantic for data validation and serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with Password Verification\nDESCRIPTION: Process user login by verifying username, checking password hash, and handling authentication errors\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse with File-like Objects in FastAPI\nDESCRIPTION: Demonstrates how to stream file-like objects as HTTP responses in FastAPI, which is useful for serving files from disk or from external services.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\nimport io\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef main():\n    fake_file = io.StringIO(\"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\")\n    return StreamingResponse(fake_file, media_type=\"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Including APIRouters in FastAPI Application\nDESCRIPTION: Demonstrates how to include APIRouters from imported modules into the main FastAPI application using the include_router() method.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\napp.include_router(users.router)\napp.include_router(items.router)\n```\n\n----------------------------------------\n\nTITLE: Complete Async Path Operation Function Example\nDESCRIPTION: A complete example of an async path operation function that awaits an async function and returns the results. This shows the proper pattern for handling async operations in FastAPI endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Multiple File Uploads with Additional Metadata\nDESCRIPTION: Shows how to handle multiple file uploads while specifying additional metadata parameters for each file in the list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def create_upload_files(\n    files: list[UploadFile] = File(\n        description=\"Multiple files as UploadFile\",\n    ),\n):\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with SQLModel in Python\nDESCRIPTION: Defines a function to create database tables for all table models using SQLModel.metadata.create_all(engine).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n```\n\n----------------------------------------\n\nTITLE: WebSocket with Dependencies in FastAPI\nDESCRIPTION: Shows how to use dependencies like Depends, Security, Cookie, Header, Path, and Query with WebSocket connections in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: str | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or token value is: {cookie_or_token}\"\n        )\n        if q:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a FastAPI Dependency to Retrieve the Current User\nDESCRIPTION: This code snippet demonstrates how to create a dependency, `get_current_user`, to retrieve the current user based on a token.  It utilizes a fake utility function, `fake_decode_token`, to simulate token decoding and user retrieval. This dependency is then used in a path operation to access the current user.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\n\n\ndef fake_decode_token(token):\n    # This doesn't do any actual validation\n    user = User(username=token + \"_user\")\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid authentication credentials\", headers={\"WWW-Authenticate\": \"Bearer\"})\n    return user\n\n\n@app.get(\"/users/me/\")\nasync def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Class as a Dependency in FastAPI\nDESCRIPTION: Creates a CommonQueryParams class to be used as a dependency in FastAPI, replacing the previous dict-based approach. The class initializer defines query parameters with types and default values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Pydantic Settings class definition (v1)\nDESCRIPTION: This code defines a Pydantic `Settings` class for handling configuration values, reading them from environment variables. It demonstrates type annotations, default values, and additional validation using `Field()` from Pydantic v1.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom pydantic import BaseModel, BaseSettings, Field\n\n\nclass Settings(BaseSettings):\n    app_name: str = Field(\"Awesome API\", env=\"APP_NAME\")\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n        env_prefix = \"MY_PREFIX_\"\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Password Request Form Handling in FastAPI\nDESCRIPTION: This snippet demonstrates how to use `OAuth2PasswordRequestForm` to handle username and password submission from a form in a FastAPI endpoint. It imports the necessary class and uses it as a dependency with `Depends` in the `/token` endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\n\napp = FastAPI()\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    return {\"access_token\": form_data.username, \"token_type\": \"bearer\"}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a TimedRoute Class for Response Timing in FastAPI\nDESCRIPTION: This code snippet defines a TimedRoute class that extends APIRoute to measure and report the time taken to process a request. It adds an X-Response-Time header to the response with the processing time in seconds.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            return response\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Using the Pydantic Model Data in the Path Operation\nDESCRIPTION: Demonstrates how to access and use the attributes of the Pydantic model instance within the path operation function, including conditional operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI Path Operation with Extra Data Types\nDESCRIPTION: This snippet demonstrates how to use various data types like UUID, datetime, date, and time in a FastAPI path operation. It also shows how to perform date manipulations within the function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime | None = None,\n    end_datetime: datetime | None = None,\n    repeat_at: time | None = None,\n    process_after: timedelta | None = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Schema Declaration with Scopes\nDESCRIPTION: Defines an OAuth2 security scheme with available scopes 'me' and 'items'. The scopes are defined as a dictionary with scope names as keys and descriptions as values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"}\n)\n```\n\n----------------------------------------\n\nTITLE: FastAPI app with Lifespan\nDESCRIPTION: This snippet shows how to use the `lifespan` function with the `FastAPI` app. This allows you to perform startup and shutdown tasks. It creates a FastAPI instance and passes the `lifespan` async context manager to it.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"app = FastAPI(lifespan=lifespan)\"\n```\n\n----------------------------------------\n\nTITLE: 创建FastAPI子应用\nDESCRIPTION: 创建将被挂载的子应用，这是一个独立的FastAPI应用，拥有自己的路径操作。\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsubapi = FastAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n```\n\n----------------------------------------\n\nTITLE: Returning Response Directly in FastAPI\nDESCRIPTION: This snippet shows how to create and return a Response directly in FastAPI, including setting custom headers as parameters. This allows for full control over the response, including headers and status code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return Response(content=\"{\\\"item_id\\\": \\\"{}\\\"}\".format(item_id), headers={\"X-Custom-Header\": \"Value\"})\n```\n\n----------------------------------------\n\nTITLE: Docker Setup for Larger FastAPI Applications\nDESCRIPTION: Dockerfile for multi-file FastAPI applications with special handling of app directory paths to maintain proper application structure.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n```\n\n----------------------------------------\n\nTITLE: Accepting a List as the Main Request Body\nDESCRIPTION: Configuring a FastAPI endpoint to accept a list of Pydantic models as the main request body, rather than a single object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nasync def create_multiple_images(images: list[Image]):\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Headers with JSONResponse in FastAPI\nDESCRIPTION: This snippet shows how to return a JSON response directly using FastAPI, allowing for custom headers or cookies to be included. It utilizes JSONResponse as a class for creating the response object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.responses import JSONResponse\n\nasync def custom_response():\n    return JSONResponse(content={\"message\": \"Hello World\"}, headers={\"X-Custom-Header\": \"Value\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in HTML/JavaScript with FastAPI\nDESCRIPTION: A simple HTML/JavaScript implementation to serve as a WebSocket client. This code creates a basic UI with a message input and display area to communicate with a FastAPI WebSocket endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\n```\n\n----------------------------------------\n\nTITLE: Token Generation Endpoint\nDESCRIPTION: Create a token endpoint that generates access tokens with token type and user-specific access credentials\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreturn {\"access_token\": username, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring JSON Responses with Various Status Codes in FastAPI\nDESCRIPTION: This JSON snippet demonstrates how to declare additional API responses in FastAPI with diverse status codes like 404 and 422 using Pydantic models such as Message and HTTPValidationError. The snippet emphasizes the structure of the OpenAPI schema for various HTTP responses. This configuration requires defining components and schemas in OpenAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket server in FastAPI\nDESCRIPTION: This code snippet demonstrates how to create a WebSocket endpoint in a FastAPI application, including handling connections and message exchange.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Basic Auth with FastAPI\nDESCRIPTION: This snippet shows how to implement simple HTTP Basic Authentication in FastAPI using `HTTPBasic` and `HTTPBasicCredentials`. It creates a security scheme using `HTTPBasic` and uses it with a dependency in the path operation, returning an `HTTPBasicCredentials` object containing the username and password sent by the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/items/\")\ndef read_items(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload - Python FastAPI\nDESCRIPTION: Implementation of multiple file upload functionality using list of bytes or UploadFile\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File()\n):\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile]\n):\n```\n\n----------------------------------------\n\nTITLE: Custom OpenAPI Content Type with Pydantic Model in FastAPI\nDESCRIPTION: Demonstrates how to use a Pydantic model to define a JSON schema for a custom content type (YAML in this case) in the OpenAPI schema, while handling the request manually.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom pydantic import BaseModel\nimport yaml\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str]\n\napp = FastAPI()\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/x-yaml\": {\n                    \"schema\": Item.model_json_schema()\n                }\n            }\n        }\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = yaml.safe_load(raw_body)\n    item = Item(**data)\n    return item\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Model Structure\nDESCRIPTION: Demonstrates deeply nested Pydantic models with Offer containing Items and Images\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Image(BaseModel):\n    url: str\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    images: list[Image] | None = None\n\nclass Offer(BaseModel):\n    name: str\n    items: list[Item]\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Async Function in FastAPI\nDESCRIPTION: This example demonstrates the proper way to call an async function using await within an async path operation function. The get_burgers function is correctly awaited inside an async def path function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Creating User Model with Pydantic in FastAPI (Python)\nDESCRIPTION: This code defines a Pydantic User model for representing user data in FastAPI. It includes fields for username, email, full name, and disabled status.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: Command to start the FastAPI development server with auto-reload enabled using the fastapi CLI tool\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Model in FastAPI\nDESCRIPTION: This example defines a sub-model `Image` using Pydantic's `BaseModel`, which includes URL and name fields. This sub-model can then be used as a type for an attribute in another Pydantic model, creating a nested structure.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: list = []\n    image: Optional[Image] = None\"\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Basic Authentication in FastAPI\nDESCRIPTION: Basic implementation of HTTP Basic Auth in FastAPI, using HTTPBasic and HTTPBasicCredentials to secure a path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ORJSON Response Class in Python\nDESCRIPTION: Implementation of a custom response class using orjson with indent formatting option. The class inherits from Response and overrides the render method to return bytes with custom JSON formatting.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.responses import Response\nimport orjson\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content) -> bytes:\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n```\n\n----------------------------------------\n\nTITLE: Injecting Current User in Route Operation\nDESCRIPTION: Demonstrates how to inject current user dependency into a route operation with type checking\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\ndef read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TimedRoute for Response Time Measurement\nDESCRIPTION: This snippet implements a TimedRoute class that adds an X-Response-Time header to responses, showing how long it took to generate the response. It demonstrates how to modify response headers in a custom route handler.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            return response\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Importing File and UploadFile in FastAPI\nDESCRIPTION: This snippet shows how to import `File` and `UploadFile` from the `fastapi` library, which are essential for handling file uploads in FastAPI applications. These classes are used to define file parameters in your API endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, File, UploadFile\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Lifespan Context Manager in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates how to create a lifespan context manager for a FastAPI application. It uses the @asynccontextmanager decorator and defines actions to be performed before and after the yield statement.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    model = load_model()\n    # Yield control back to FastAPI\n    yield\n    # Clean up the ML models and release the resources\n    model.unload()\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for FastAPI Application\nDESCRIPTION: Docker configuration file that sets up a Python environment, installs dependencies, and configures the FastAPI application to run on port 80.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Validation Error Handlers\nDESCRIPTION: Examples of overriding FastAPI's default validation error handlers for custom error responses and formats.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n```\n\n----------------------------------------\n\nTITLE: Using FastAPI's lifespan parameter with Context Manager\nDESCRIPTION: Shows how to pass an async context manager to the FastAPI app's lifespan parameter to handle startup and shutdown logic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse for Async Streaming in FastAPI\nDESCRIPTION: Example showing how to use StreamingResponse to stream data from an async generator function. This is useful for large responses that should be streamed in chunks.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\", response_class=StreamingResponse)\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n```\n\n----------------------------------------\n\nTITLE: Mixing Path, Query, and Body Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to combine `Path`, `Query`, and request body parameters in a FastAPI path operation. It defines a path operation that accepts a path parameter (`item_id`), a query parameter (`q`), and an optional request body parameter (`item`). The `Item` model defines the structure of the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n\"\n```\n\n----------------------------------------\n\nTITLE: Including APIRouter with Custom Prefix and Settings\nDESCRIPTION: Shows how to include an APIRouter with a custom prefix, tags, responses, and dependencies without modifying the original router, useful for shared routers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse for Performance\nDESCRIPTION: Demonstrates how to use ORJSONResponse for faster JSON serialization with FastAPI. This approach bypasses default JSON encoding overhead and provides improved performance for large responses.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\ndef read_items():\n    return {\"item_id\": \"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Multiple File Uploads in FastAPI\nDESCRIPTION: This snippet demonstrates how to handle multiple file uploads simultaneously in FastAPI. It shows how to declare a list of `bytes` or `UploadFile` to receive multiple files associated with the same form field.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile] = File()):\n    return {\"filenames\": [file.filename for file in files]}\"\n```\n\n----------------------------------------\n\nTITLE: File Parameters with UploadFile in FastAPI\nDESCRIPTION: This snippet shows how to define a file parameter using `UploadFile` in FastAPI. `UploadFile` provides advantages over `bytes`, like using a spooled file to handle larger files efficiently. It includes metadata like filename and content_type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"async def upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\"\n```\n\n----------------------------------------\n\nTITLE: Reducing Model Code Duplication with Inheritance\nDESCRIPTION: This code snippet demonstrates how to reduce code duplication by defining a base model `UserBase` and inheriting from it to create `UserIn`, `UserOut`, and `UserInDB` models. It shows how to define only the differences between the models, such as the presence of the `password` or `hashed_password` fields, in the derived classes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Optional\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass UserBase(BaseModel):\\n    username: str\\n    email: str\\n    full_name: Optional[str] = None\\n\\n\\nclass UserIn(UserBase):\\n    password: str\\n\\n\\nclass UserOut(UserBase):\\n    pass\\n\\n\\nclass UserInDB(UserBase):\\n    hashed_password: str\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TimedRoute Class in Python\nDESCRIPTION: Defines a TimedRoute class that extends APIRoute to add timing information. It overrides the handle() method to measure the response time and add it as a header to the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TimedRoute(APIRoute):\n    def handle(self, call: Callable, request: Request, **kwargs: Any) -> Coroutine[Any, Any, Response]:\n        before = time.time()\n        response: Response = await super().handle(call, request, **kwargs)\n        duration = time.time() - before\n        response.headers[\"X-Response-Time\"] = str(duration)\n        return response\n```\n\n----------------------------------------\n\nTITLE: Complete Partial Update Workflow\nDESCRIPTION: Full workflow for applying partial updates, including model retrieval, update generation, and database storage\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Complete partial update workflow demonstration\n```\n\n----------------------------------------\n\nTITLE: Declaring Examples in Pydantic Model with JSON Schema (Python)\nDESCRIPTION: This snippet demonstrates how to declare examples for a Pydantic model using the model_config attribute with json_schema_extra. The examples will be added to the generated JSON Schema and used in API docs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: FastAPI Main Application and Callback Router\nDESCRIPTION: This snippet shows the main FastAPI application setup, including importing necessary modules, defining data models for the request body, setting up a callback router, and defining the main path operation with a callback URL query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import APIRouter, FastAPI, Query\nfrom pydantic import BaseModel, Url\n\napp = FastAPI()\n\n\ninvoices_callback_router = APIRouter()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\n@invoices_callback_router.post(\"/invoices/{$request.body.id}\", response_model=InvoiceEventReceived)\nasync def invoice_callback(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url = Query(\n        ...,\n        description=\"URL to send notifications when the invoice is processed.\",\n    ),\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Convertendo Modelo Pydantic para JSON Compatível em Python\nDESCRIPTION: Este snippet demonstra como usar a função jsonable_encoder do FastAPI para converter um modelo Pydantic em um dicionário compatível com JSON. Ele também mostra como a função lida com a conversão de tipos complexos como datetime.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/encoder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.encoders import jsonable_encoder\n\n# Código omitido\n\nfake_db[id] = jsonable_encoder(item)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with a Union Type Parameter in Python 3.10+\nDESCRIPTION: This code defines a function `say_hi` with a `name` parameter using the `|` operator to indicate it can be either a string or None. This is a concise and readable way to define union types in modern Python.  The function prints a greeting using the provided name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"def say_hi(name: str | None):\n    print(f'Hi {name}')\n\"\n```\n\n----------------------------------------\n\nTITLE: FastAPI Route Definitions with Request Body\nDESCRIPTION: Python code demonstrating FastAPI route definitions including GET and PUT endpoints with Pydantic model for request body validation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: RedirectResponse Example in FastAPI\nDESCRIPTION: This code snippet shows how to return a redirect response using `RedirectResponse`. The example creates an endpoint that returns a `RedirectResponse` to a specified URL.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\")\nasync def redirect_to_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Configuration as a Dependency (main.py)\nDESCRIPTION: This code defines a FastAPI dependency `get_settings` that returns a new `Settings` object, leveraging `lru_cache` for optimization.  The `read_root` route then uses this dependency to access configuration values. This particular snippet is for python version > 3.9.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache()\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/\")\nasync def read_root(settings: Settings = Depends(get_settings)):\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Complete Partial Update Workflow\nDESCRIPTION: Full example of partial data update process, including model validation, data extraction, and database update using Pydantic and FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntutorial002.py (lines 30-37)\n```\n\n----------------------------------------\n\nTITLE: FastAPI Type Hint Examples\nDESCRIPTION: Examples of type hints used in FastAPI for parameter and model definitions\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nitem_id: int\n```\n\nLANGUAGE: python\nCODE:\n```\nitem: Item\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Validation Error Details\nDESCRIPTION: Shows how to access and return detailed validation error information including the invalid request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=400,\n        content={\"detail\": exc.errors(), \"body\": exc.body}\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies using Response parameter in FastAPI\nDESCRIPTION: This code snippet demonstrates how to set a cookie in a FastAPI route using the `Response` parameter. It sets a cookie named \"some_cookie\" with a value of \"some_value\" on the response object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Response\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(response: Response):\\n    response.set_cookie(key=\"some_cookie\", value=\"some_value\")\\n    return {\"message\": \"Come to the dark side, we have cookies\"}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Background Task Function in FastAPI\nDESCRIPTION: This snippet demonstrates how to create a function that will be run as a background task. The function writes to a file, simulating sending an email.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare optional query parameters in FastAPI using the `Optional` type hint or setting a default value of `None`. The `q` parameter is optional, and if not provided in the query, it will be `None`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(skip: int = 0, limit: int = 10, q: Union[str, None] = None):\n    if q:\n        return {\"items\": [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}], \"q\": q}\n    return {\"items\": [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]}\n```\n\n----------------------------------------\n\nTITLE: Creating reusable dependencies in a separate module\nDESCRIPTION: Shows how to define dependencies in a separate module that can be reused across the application. This example creates a dependency for validating an X-Token header.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n```\n\n----------------------------------------\n\nTITLE: Using Trusted Host Middleware - Python\nDESCRIPTION: The `TrustedHostMiddleware` enforces validation on incoming requests to ensure they have a correctly set `Host` header. This helps to protect against HTTP Host Header attacks, allowing a list of permitted hostnames as parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Middleware implementation goes here\n```\n\n----------------------------------------\n\nTITLE: Database Dependency with Yield in FastAPI\nDESCRIPTION: This code defines a dependency that simulates a database connection.  The `yield` keyword separates the setup (creating the database dependency) from the teardown (closing the connection) phases.  The dependency is injected into a path operation function, providing access to the 'database' object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Generator\\n\\nfrom fastapi import Depends, FastAPI\\n\\napp = FastAPI()\\n\\n\\nasync def get_db() -> Generator[dict, None, None]:\\n    db = {\"name\": \"foo\"}\\n    try:\\n        yield db\\n    finally:\\n        db.clear()\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(db: dict = Depends(get_db)):\\n    return db\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Larger FastAPI Applications with File Structure\nDESCRIPTION: This Dockerfile is adapted for larger FastAPI applications with a specific file structure. It copies the `requirements.txt` file, installs the dependencies, and then copies the application code from the `./app` directory to the `/app/app` directory inside the container.  The `hl_lines=\"7\"` indicates the line that is specifically highlighted.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP Basic Authentication in FastAPI\nDESCRIPTION: This snippet shows how to import and set up HTTP Basic Authentication in a FastAPI application. It creates a security scheme and uses it with a path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifespan with Async Context Manager in FastAPI\nDESCRIPTION: Demonstrates how to use an async context manager with FastAPI's lifespan parameter to load and unload machine learning models before the application starts and after it stops handling requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    ml_models = {}\n    # Here you would load the model\n    ml_models[\"answer_to_everything\"] = 42\n    yield {\"ml_models\": ml_models}\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for FastAPI with Multiple Workers\nDESCRIPTION: This Dockerfile demonstrates how to build a container image for a FastAPI application with multiple worker processes. It installs dependencies, copies the application code, and uses the 'fastapi' command to run the app with 4 workers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--workers\", \"4\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring List of Models as Response\nDESCRIPTION: This snippet demonstrates how to declare a response that consists of a list of Pydantic models using `typing.List`. It showcases how to return a list of `Item` objects as a response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import List\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass Item(BaseModel):\\n    name: str\\n    description: str | None = None\\n    price: float\\n    tax: float | None = None\\n\\n\\nasync def read_items() -> List[Item]:\\n    return [\\n        Item(name=\"Portal Gun\", price=42.0),\\n        Item(name=\"Plumbus\", description=\"A plumbus\", price=3.5),\\n        Item(name=\"Plasma Sword\", price=42.0),\\n    ]\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cookie Parameter Model with FastAPI\nDESCRIPTION: This code snippet shows how to define a Pydantic model for cookie parameters and use it in a FastAPI path operation. The FastAPI framework automatically extracts the cookie values based on the field names in the Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\n\nclass Ads(BaseModel):\n    dark_mode: Union[bool, None] = None\n    items_per_page: int = 50\n\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_ads(ads: Ads = Cookie()):\n    return ads\"\n```\n\n----------------------------------------\n\nTITLE: Annotated Dockerfile for FastAPI Applications\nDESCRIPTION: A commented version of the Dockerfile that details each step in the container build process, showing the base image selection, working directory setup, requirements installation, and code copying.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# (1)!\nFROM python:3.9\n\n# (2)!\nWORKDIR /code\n\n# (3)!\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)!\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)!\nCOPY ./app /code/app\n```\n\n----------------------------------------\n\nTITLE: StreamingResponse with File-like Objects in FastAPI\nDESCRIPTION: This example demonstrates using `StreamingResponse` with a file-like object to stream a file without loading it entirely into memory. It opens a file and streams its content using a generator function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\nimport os\n\napp = FastAPI()\n\n\nasync def iterfile():  # HL\n    with open(\"file.txt\", mode=\"rb\") as file_like:  # HL\n        yield from file_like  # HL\n\n\n@app.get(\"/files/{file_path}\")\nasync def get_file(file_path: str):\n    return StreamingResponse(iterfile(), media_type=\"text/plain\")  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Managing Startup and Shutdown Events with TestClient in Python\nDESCRIPTION: This snippet utilizes FastAPI's TestClient within a `with` statement to ensure that application event handlers such as `startup` and `shutdown` are executed when running tests. It requires FastAPI and its TestClient module as dependencies. The context manager pattern is used to manage application lifecycle events during tests to guarantee resource initialization and cleanup. Expected input is the FastAPI application and tests involving resource-intensive operations. Outputs include proper execution of resource lifecycle hooks.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith TestClient(app) as client:\n    response = client.get('/')\n    assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Single Values in the Request Body in FastAPI\nDESCRIPTION: This snippet shows how to use the `Body` parameter to explicitly define a single value as part of the request body. It defines a path operation that accepts an `Item`, a `User`, and an `importance` value as part of the request body, using `Body` to specify that `importance` should be treated as a body parameter instead of a query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/items/\")\nasync def create_item(\n    item: Item,\n    user: User,\n    importance: int = Body(),\n):\n    return {\"item\": item, \"user\": user, \"importance\": importance}\"\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse with Generators in FastAPI\nDESCRIPTION: Shows how to create a streaming HTTP response in FastAPI using a generator function that yields content, allowing for efficient handling of large responses.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n```\n\n----------------------------------------\n\nTITLE: Validating Token Data and Scopes in Python\nDESCRIPTION: This snippet shows how to validate the token data using a Pydantic model and check if the token contains all required scopes. It demonstrates error handling for invalid tokens or missing scopes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n# ...\n\ntry:\n    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    username: str = payload.get(\"sub\")\n    if username is None:\n        raise credentials_exception\n    token_scopes = payload.get(\"scopes\", [])\n    token_data = TokenData(scopes=token_scopes, username=username)\nexcept (JWTError, ValidationError):\n    raise credentials_exception\nuser = get_user(fake_users_db, username=token_data.username)\nif user is None:\n    raise credentials_exception\nfor scope in security_scopes.scopes:\n    if scope not in token_data.scopes:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Not enough permissions\",\n            headers={\"WWW-Authenticate\": authenticate_value},\n        )\n```\n\n----------------------------------------\n\nTITLE: Pydantic v1 Settings Configuration\nDESCRIPTION: This Python code snippet demonstrates how to configure Pydantic v1 settings to read environment variables from a `.env` file. The `Config` inner class with `env_file` attribute specifies the path to the `.env` file. Requires `python-dotenv` package.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n\"from pydantic import BaseSettings\\n\\n\\nclass Settings(BaseSettings):\\n    admin_email: str\\n    app_name: str = \\\"Awesome API\\\"\\n\\n    class Config:\\n        env_file = \\\".env\\\"\\n\\n\\nsettings = Settings()\\n\\nprint(\\\"Admin E-mail:\\\", settings.admin_email)\\nprint(\\\"App Name:\\\", settings.app_name)\"\n```\n\n----------------------------------------\n\nTITLE: Config file without a default settings instance\nDESCRIPTION: This shows the `config.py` without creating a default settings instance. This allows deferring the instantiation of the `Settings` object, which is useful when you want to provide different settings during testing or in different environments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n```\n\n----------------------------------------\n\nTITLE: Startup Event Handler in FastAPI\nDESCRIPTION: This code demonstrates how to define a startup event handler in FastAPI using the `@app.on_event(\"startup\")` decorator. The function decorated will be executed once before the application starts receiving requests. In this case, it initializes a dictionary named `items`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.on_event(\\\"startup\\\")\\nasync def startup_event():\\n    items.clear()\\n    items.update({\\\"foo\\\": \\\"Foo\\\", \\\"bar\\\": \\\"Bar\\\"})\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Body and Query Parameters in FastAPI\nDESCRIPTION: This snippet illustrates how to combine multiple body parameters with a query parameter in a FastAPI path operation. It defines a path operation that accepts an `Item`, a `User` in the request body and a query parameter `q`. It shows how FastAPI handles both body and query parameters simultaneously.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/items/\")\nasync def create_item(\n    item: Item,\n    user: User,\n    importance: int = Body(),\n    q: Union[str, None] = None,\n):\n    results = {\"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TimedRoute Class in FastAPI\nDESCRIPTION: This code defines a custom `TimedRoute` class which inherits from `fastapi.routing.APIRoute`. The `get_route_handler` method is overridden to add an `X-Response-Time` header to the response, indicating the time it took to process the request.  This demonstrates customizing route behavior in a reusable way.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport time\nfrom typing import Callable\n\nfrom fastapi import FastAPI, Request, Response\nfrom fastapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            return response\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Response\nDESCRIPTION: Shows how to return an HTML response using HTMLResponse in FastAPI. This demonstrates setting the response content type and returning HTML directly from a path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=HTMLResponse)\ndef read_root():\n    return \"<html><body><h1>Hello World</h1></body></html>\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Sub-Application\nDESCRIPTION: Mounts the FastAPI sub-application to the main application at a specified path.  This allows the sub-application to handle all requests under that path, including its own OpenAPI documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nIn your top-level application, `app`, mount the sub-application, `subapi`.\\n\\nIn this case, it will be mounted at the path `/subapi`:\\n\"\"\"\napp.mount(\"/subapi\", subapi)\n\n```\n\n----------------------------------------\n\nTITLE: Converting Pydantic Model to Dictionary\nDESCRIPTION: Demonstrates how to convert a Pydantic model to a Python dictionary using the dict() method.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nuser_dict = user_in.dict()\n```\n\n----------------------------------------\n\nTITLE: Combining Path Parameters with Request Body\nDESCRIPTION: Demonstrates how to combine path parameters with a request body in a FastAPI endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item):\n```\n\n----------------------------------------\n\nTITLE: Extended FastAPI Application Example in Python\nDESCRIPTION: An extended FastAPI application with multiple path operations, including GET and POST methods with error handling and header validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n\nasync def get_token_header(x_token: str = Header(...)) -> None:\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(token: str = Depends(get_token_header)):\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@app.get(\"/users\")\nasync def read_users(token: str = Depends(get_token_header)):\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str, token: str = Depends(get_token_header)):\n    if username != \"fakecurrentuser\":\n        raise HTTPException(status_code=400, detail=\"Wrong username\")\n    return {\"username\": username}\n\n\n@app.post(\"/users\")\nasync def create_user(username: str, token: str = Depends(get_token_header)):\n    if username != \"fakecurrentuser\":\n        raise HTTPException(status_code=400, detail=\"Wrong username\")\n    return {\"username\": username}\n```\n\n----------------------------------------\n\nTITLE: Path Operation with Security Scopes\nDESCRIPTION: Declare path operations with specific security scope requirements using FastAPI's Security dependency injection\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me/items/\", response_model=List[Item])\ndef read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n):\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving WebSocket Messages\nDESCRIPTION: Illustrates how to receive messages from and send messages to a WebSocket client.  It shows the basic structure for handling WebSocket communication, including accepting the connection, receiving data, and sending responses, ensuring a continuous bidirectional channel.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"    try:\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    except WebSocketDisconnect:\n        print(\"Client disconnected\")\"\n```\n\n----------------------------------------\n\nTITLE: Pydantic exclude_unset example\nDESCRIPTION: This snippet shows how to use the `exclude_unset` parameter in the `.dict()` method of a Pydantic model to generate a dictionary containing only the data that was explicitly set during model creation, excluding default values. This is particularly useful for partial updates where you only want to update specific fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    update_data = item.dict(exclude_unset=True)\n```\n\n----------------------------------------\n\nTITLE: Defining path operations with APIRouter in a users module\nDESCRIPTION: Demonstrates how to define path operations using an APIRouter instance in a users module, following the same pattern as with the FastAPI class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous FastAPI Application\nDESCRIPTION: Alternative version of the FastAPI application using async/await for asynchronous request handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GzipRequest Class in Python for FastAPI\nDESCRIPTION: This code snippet defines a GzipRequest class that extends FastAPI's Request to handle gzip-compressed request bodies. It overrides the body() method to check for gzip Content-Encoding and decompress the body accordingly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies in Path Operation Functions\nDESCRIPTION: Demonstrates how to declare a dependency in a path operation function using the Depends function with a parameter. FastAPI will call the dependency and inject its result.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object and Path Parameter in FastAPI\nDESCRIPTION: This code snippet demonstrates how to access both the Starlette Request object and a path parameter in a FastAPI route handler. It shows how to retrieve client information while still benefiting from FastAPI's parameter validation for other inputs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/using-request-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in FastAPI\nDESCRIPTION: Demonstrates how to set up CORS middleware in a FastAPI application with custom origin, method, and header configurations\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:8080\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating User Authentication Dependencies\nDESCRIPTION: Implement user authentication and active user verification dependencies in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Caching Settings with lru_cache\nDESCRIPTION: This Python code snippet shows how to use `lru_cache` from `functools` to cache the `Settings` object. This ensures that the `.env` file is only read once during the application's lifetime, improving performance. Requires the `python-dotenv` package to load environment variables.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n\"from functools import lru_cache\\n\\nfrom pydantic_settings import BaseSettings\\n\\n\\nclass Settings(BaseSettings):\\n    admin_email: str\\n    app_name: str = \\\"Awesome API\\\"\\n\\n    model_config = {\\n        \\\"env_file\\\": \\\".env\\\",\\n    }\\n\\n\\n@lru_cache\\ndef get_settings():\\n    return Settings()\\n\\n\\nsettings = get_settings()\\n\\nprint(\\\"Admin E-mail:\\\", settings.admin_email)\\nprint(\\\"App Name:\\\", settings.app_name)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet shows how to define an optional query parameter 'q' of type str or None in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Combining Path Parameters with Request Body\nDESCRIPTION: Shows how to use both path parameters and request body parameters in the same path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n```\n\n----------------------------------------\n\nTITLE: FastAPI: Injecting Current User\nDESCRIPTION: This shows how to inject the current user into a path operation using the `Depends` function with the `get_current_user` dependency.  The type of `current_user` is declared as the Pydantic model `User`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\\\"/users/me/\\\")\nasync def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Mounting StaticFiles in FastAPI (Python)\nDESCRIPTION: This code snippet demonstrates how to import StaticFiles from fastapi.staticfiles and mount it to serve static files from a directory. The StaticFiles instance is mounted at the '/static' path and serves files from the 'static' directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/static-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.staticfiles import StaticFiles\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Poetry for Dependency Management\nDESCRIPTION: This Dockerfile uses multi-stage builds to manage dependencies with Poetry. The first stage installs Poetry, copies the `pyproject.toml` and `poetry.lock` files, and exports the dependencies to a `requirements.txt` file.  The second stage copies the `requirements.txt` file, installs the dependencies, and then copies the application code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# (1)\nFROM python:3.9 as requirements-stage\n\n# (2)\nWORKDIR /tmp\n\n# (3)\nRUN pip install poetry\n\n# (4)\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\n# (5)\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\n# (6)\nFROM python:3.9\n\n# (7)\nWORKDIR /code\n\n# (8)\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n# (9)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (10)\nCOPY ./app /code/app\n```\n\n----------------------------------------\n\nTITLE: Importing File and UploadFile in FastAPI\nDESCRIPTION: This snippet demonstrates how to import the `File` and `UploadFile` classes from the `fastapi` module. These classes are essential for handling file uploads in FastAPI applications. `File` is typically used for smaller files handled in memory, while `UploadFile` is suitable for larger files.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, File, UploadFile\"\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies in WebSockets\nDESCRIPTION: Demonstrates how to use dependencies, including `Depends`, `Security`, `Cookie`, `Header`, `Path`, and `Query`, within WebSocket endpoints. This is achieved by defining dependencies and injecting them into the WebSocket route function, similar to standard FastAPI path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import Cookie, Depends, FastAPI, Header, Path, Query, WebSocket\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \\\"\\\"\\\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Item ID: <span id=\\\"item-id\\\"></span></h2>\n        <h2>Token: <span id=\\\"token\\\"></span></h2>\n        <form action=\\\"\\\" onsubmit=\\\"sendMessage(event)\\\">\n            <input type=\\\"text\\\" id=\\\"messageText\\\" autocomplete=\\\"off\\\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var itemId = document.getElementById('item-id')\n            itemId.textContent = \\\"{item_id}\\\"\n            var token = document.getElementById('token')\n            token.textContent = \\\"{token}\\\"\n            var ws = new WebSocket(\\\"ws://localhost:8000/ws/{item_id}?token={token}\\\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\\\"messageText\\\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\\\"\\\"\\\"\n\n\n@app.get(\"/\")\nasync def get(\n    item_id: int,\n    token: str,\n    q: Optional[str] = None,\n    cookie_id: Optional[str] = Cookie(None),\n):\n    return HTMLResponse(\n        html.format(item_id=item_id, token=token)\n    )\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    cookie_id: Optional[str] = Cookie(None),\n    token: Optional[str] = Query(None),\n):\n    if cookie_id:\n        return cookie_id\n    if token:\n        return token\n    await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n\n\n@app.websocket(\"/ws/{item_id}\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: int = Path(title=\\\"The ID of the item to get\\\"),\n    token: str = Depends(get_cookie_or_token),\n    cookie_id: Optional[str] = Cookie(None),\n    x_header: Optional[str] = Header(None),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {token}\")\n\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import WebSocketException, status\"\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI\nDESCRIPTION: Shows how to create and use Pydantic model instances in FastAPI. It demonstrates direct instantiation and creation from a dictionary of data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Types with Pydantic in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define standard Python types and Pydantic models in FastAPI. It shows a function with type hints and a Pydantic model definition with typed fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare a variable as a str\n# and get editor support inside the function\ndef main(user_id: str):\n    return user_id\n\n\n# A Pydantic model\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Containing Paths in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a path parameter that can contain a path itself using Starlette's path convertor. The `:path` suffix in the path definition tells FastAPI to match any path for the `file_path` parameter. This allows capturing entire file paths in the parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Access Token in FastAPI\nDESCRIPTION: Generates and returns an access token upon successful authentication, following the OAuth2 specification.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"access_token\": user.username, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Combining Response Information with Examples in FastAPI\nDESCRIPTION: Example showing how to combine response_model with additional response information like custom descriptions and examples in a FastAPI endpoint. This enhances the OpenAPI documentation with more detailed response specifications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n```\n\n----------------------------------------\n\nTITLE: Using SecurityScopes in Dependency Function in Python\nDESCRIPTION: This code demonstrates how to use the SecurityScopes class in a dependency function. It shows how to access the required scopes and create a custom HTTPException for scope-related errors.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.security import SecurityScopes\n\n# ...\n\nasync def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating and Returning Access Token\nDESCRIPTION: This code generates a simple access token (using the username in this example) and returns it along with the token type as specified by the OAuth2 standard.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"access_token\": user.username, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Context Manager with Yield Dependencies\nDESCRIPTION: Example of using context managers within yield dependencies\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n```\n\n----------------------------------------\n\nTITLE: Dependency with HTTPException After Yield\nDESCRIPTION: Shows how to raise HTTPException in the cleanup phase after yield. This pattern is useful for handling errors during resource cleanup.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def get_session():\n    session = Session()\n    try:\n        yield session\n    except Exception as e:\n        logger.error(f\"Error: {e}\")\n        raise HTTPException(status_code=400, detail=\"Session error\")\n    finally:\n        session.close()\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with UploadFile\nDESCRIPTION: This snippet demonstrates how to handle file uploads using the `UploadFile` type hint in a FastAPI endpoint. `UploadFile` provides a more sophisticated way to handle file uploads, especially for larger files. It allows you to access the filename, content type, and file contents, and supports asynchronous operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import Body, FastAPI, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File()], token: Annotated[str, Body()]\n):\n    return {\"filename\": file.filename, \"content_type\": file.content_type, \"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Settings and Testing\nDESCRIPTION: This snippet illustrates how to override the `Settings` dependency during testing in FastAPI. It defines a function to create a test settings object and uses it in a dependency override to modify the application's configuration during testing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n\nfrom .main import app, get_settings\n\n\ndef get_settings_override():\n    return Settings(app_name=\"Test App Name\", admin_email=\"test@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\nclient = TestClient(app)\n\n\ndef test_read_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\"app_name\": \"Test App Name\", \"admin_email\": \"test@example.com\"}\n\n\napp.dependency_overrides = {}\n```\n\n----------------------------------------\n\nTITLE: Pydantic v2 Settings Configuration\nDESCRIPTION: This Python code snippet demonstrates how to configure Pydantic v2 settings to read environment variables from a `.env` file.  The `env_file` attribute in `model_config` specifies the path to the `.env` file. Requires `python-dotenv` package.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"from pydantic_settings import BaseSettings\\n\\n\\nclass Settings(BaseSettings):\\n    admin_email: str\\n    app_name: str = \\\"Awesome API\\\"\\n\\n    model_config = {\\n        \\\"env_file\\\": \\\".env\\\",\\n    }\\n\\n\\nsettings = Settings()\\n\\nprint(\\\"Admin E-mail:\\\", settings.admin_email)\\nprint(\\\"App Name:\\\", settings.app_name)\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Larger FastAPI Applications with Multiple Files\nDESCRIPTION: A Dockerfile variation for larger FastAPI applications that contain multiple files. It adjusts the destination path for app files to maintain proper directory structure for larger applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies Using Response Parameter in FastAPI\nDESCRIPTION: This snippet shows how to declare a Response parameter in a FastAPI path operation function and use it to set cookies. The function can then return any data, which will be automatically processed by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/cookie/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response\nDESCRIPTION: Shows how to create a streaming response using StreamingResponse. This enables sending large or dynamically generated content as a stream, which is memory efficient.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n@app.get(\"/stream\")\ndef stream_response():\n    async def generate():\n        for i in range(10):\n            yield f\"data: {i}\\n\\n\"\n    return StreamingResponse(generate(), media_type=\"text/event-stream\")\n```\n\n----------------------------------------\n\nTITLE: FastAPI App with Tags\nDESCRIPTION: This FastAPI snippet demonstrates using tags to separate path operations. The `items` and `users` path operations are grouped using the `tags` parameter, allowing for better organization and separation in the generated client code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/items/\", tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/{item_id}\", tags=[\"items\"])\nasync def read_item(item_id: int):\n    return {\"name\": \"Foo\", \"price\": 50.2}\n\n\n@app.post(\"/users/\", tags=[\"users\"])\nasync def create_user(user: User):\n    return user\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-Based Dependency in FastAPI\nDESCRIPTION: Implementation of a class that serves as a dependency for handling common query parameters with proper type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Excluding Path Operations from OpenAPI Schema in FastAPI\nDESCRIPTION: This snippet shows how to exclude a path operation from the OpenAPI schema by using the `include_in_schema` parameter set to False. This is useful when you want to hide specific operations from automatic documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npath_operation_function(include_in_schema=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependent Injectable in FastAPI\nDESCRIPTION: This code defines a dependency that both injects and depends on another dependency. It uses the query_extractor and also checks for a cookie, demonstrating nested dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def query_or_cookie_extractor(q: Annotated[str, Depends(query_extractor)], last_query: str | None = Cookie(default=None)):\n```\n\n----------------------------------------\n\nTITLE: Using OAuth2PasswordBearer Dependency in FastAPI\nDESCRIPTION: This snippet demonstrates how to use the OAuth2PasswordBearer as a dependency in a FastAPI route. The dependency injects the `token` (access token) that's passed by the user, which can then be used for authorization purposes. FastAPI automatically handles the validation and authentication processes when the dependency is declared.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"async def read_items(token: str = Depends(oauth2_scheme)):\\n    return {\"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Dict with Type Constraints\nDESCRIPTION: Demonstrates declaring a dictionary with specific key and value type constraints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    weights: Dict[int, float]\n```\n\n----------------------------------------\n\nTITLE: Using Annotated for Parameter Ordering Without Asterisk\nDESCRIPTION: Shows how Annotated simplifies parameter ordering by removing the need for default values in function parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str,\n    item_id: Annotated[int, Path()],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Protected Route with User Authentication in FastAPI\nDESCRIPTION: This snippet demonstrates how to create a protected route in FastAPI that requires user authentication. It uses the get_current_user dependency to inject the authenticated user into the route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Lanzando un HTTPException en una path operation\nDESCRIPTION: Ejemplo de cómo lanzar un HTTPException con código de estado 404 cuando un ítem no se encuentra en la base de datos.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    if item_id not in items:\\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in Exception Handler in FastAPI\nDESCRIPTION: This snippet shows how to access the request body within an exception handler in FastAPI. By wrapping the request processing in a `try`/`except` block, you can still access the `Request` instance and its body even if an exception occurs during the request handling. This is useful for logging or further processing of the request body when errors arise.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.exception_handler(500)\nasync def internal_exception_handler(request: Request, exc: Exception):\n    body = await request.body()\n    return JSONResponse(\n        status_code=500,\n        content={\"message\": f\"Oops! Internal Server Error! {exc} {body=}\"},\n    )\n```\n\n----------------------------------------\n\nTITLE: Documenting HTMLResponse and overriding Response in FastAPI\nDESCRIPTION: This code shows how to use the `response_class` parameter to document the response type in OpenAPI while also returning an `HTMLResponse` object directly. This allows OpenAPI to correctly document the endpoint as returning HTML.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\nasync def generate_html_response(item_id: str):\n    html_content = f\"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>{item_id}</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/{item_id}\", response_class=HTMLResponse)  # HL\nasync def read_item(item_id: str):\n    return await generate_html_response(item_id)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Simple FastAPI Application in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two endpoints: a root endpoint that returns a greeting and an items endpoint that accepts an ID parameter and an optional query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration Dependency Override\nDESCRIPTION: This test code demonstrates how to override the `get_settings` dependency in FastAPI during testing. It defines a new `Settings` object with a modified `admin_email`, overrides the dependency, sends a test request, and asserts that the response contains the overridden value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n\nfrom .main import app, get_settings\n\n\ndef test_settings_override():\n    def override_settings():\n        return Settings(admin_email=\"testing@example.com\")\n\n    app.dependency_overrides[get_settings] = override_settings\n\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing@example.com\",\n    }\n\n    app.dependency_overrides = {}\n```\n\n----------------------------------------\n\nTITLE: FastAPI Callback Router Creation\nDESCRIPTION: This snippet demonstrates how to create an APIRouter instance specifically for defining callback routes. This router will then be used to document the structure of the external API that the main API will be calling back to.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import APIRouter, FastAPI, Query\nfrom pydantic import BaseModel, Url\n\napp = FastAPI()\n\n\ninvoices_callback_router = APIRouter()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\n@invoices_callback_router.post(\"/invoices/{$request.body.id}\", response_model=InvoiceEventReceived)\nasync def invoice_callback(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url = Query(\n        ...,\n        description=\"URL to send notifications when the invoice is processed.\",\n    ),\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Lanzando HTTPException en path operation para validación\nDESCRIPTION: Ejemplo de cómo lanzar un HTTPException cuando se valida un ítem en una ruta específica.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: int):\\n    if item_id == 3:\\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Creating Hero\nDESCRIPTION: This snippet showcases how to create a new hero using the `HeroCreate` model for request validation and `HeroPublic` for the response. The FastAPI endpoint receives data according to `HeroCreate`, creates a database entry, and returns a `HeroPublic` model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.post(\"/heroes/\", response_model=HeroPublic)\nasync def create_hero(hero: HeroCreate, db: Session = Depends(get_db)):\n    db_hero = Hero.from_orm(hero)\n    db.add(db_hero)\n    db.commit()\n    db.refresh(db_hero)\n    return db_hero\"\n```\n\n----------------------------------------\n\nTITLE: Settings as a dependency in main app file\nDESCRIPTION: This code demonstrates how to inject a `Settings` object as a dependency into a FastAPI path operation function. It uses `lru_cache` to ensure that the `Settings` object is created only once.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/items/\")\nasync def read_items(settings: Settings = Depends(get_settings)):\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Python Type Hints Example with Pydantic Model\nDESCRIPTION: Demonstrates basic Python type hints usage and Pydantic model definition with typed fields including date, string and integer types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare uma variável como str\n# e obtenha suporte do editor dentro da função\ndef main(user_id: str):\n    return user_id\n\n\n# Um modelo do Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Function\nDESCRIPTION: Example of defining an asynchronous function using the async def syntax. This allows the use of await within the function body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_burgers(number: int):\n    # Do some asynchronous stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Basic String Type Hints in Python Function\nDESCRIPTION: Demonstrates basic type hints for string parameters in a function that concatenates first and last names.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Models in FastAPI\nDESCRIPTION: This snippet showcases the definition of deeply nested Pydantic models in FastAPI, creating a complex data structure. It involves `Image`, `Item`, and `Offer` models, where `Offer` contains a list of `Item` models, and each `Item` can have a list of optional `Image` models. Demonstrates complex data structures with nested lists and optional fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List, Optional\n\nfrom pydantic import BaseModel, HttpUrl\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: list = []\n    images: Optional[List[Image]] = None\n\n\nclass Offer(BaseModel):\n    items: List[Item]\"\n```\n\n----------------------------------------\n\nTITLE: RedirectResponse with status_code in FastAPI\nDESCRIPTION: This example shows how to combine the `response_class` parameter with the `status_code` parameter when using `RedirectResponse`. It allows setting a specific status code for the redirect.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/redirect\", response_class=RedirectResponse, status_code=302)  # HL\nasync def redirect():\n    return \"https://www.example.com\"  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Creando un Héroe con FastAPI y SQLModel en Python\nDESCRIPTION: Implementa un endpoint POST para crear un nuevo héroe. Recibe un HeroCreate, crea un Hero en la base de datos, y devuelve un HeroPublic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate):\n    with Session(engine) as session:\n        hero_db = Hero.model_validate(hero)\n        session.add(hero_db)\n        session.commit()\n        session.refresh(hero_db)\n        return hero_db\n```\n\n----------------------------------------\n\nTITLE: Raising Exceptions in FastAPI Dependency Functions\nDESCRIPTION: This snippet illustrates how to raise exceptions within dependency functions used in FastAPI. It shows the pattern for raising HTTPException with a specific status code and detail message.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nif x_token != \"fake-super-secret-token\":\n    raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\nif x_key != \"fake-super-secret-key\":\n    raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n```\n\n----------------------------------------\n\nTITLE: Using response_model_include and response_model_exclude in FastAPI\nDESCRIPTION: This example shows how to use `response_model_include` and `response_model_exclude` to selectively include or exclude fields from the response. These are quick shortcuts for filtering data from a Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", response_model=Item, response_model_include={\"name\", \"description\"})\nasync def read_item(item_id: str):\n    item = items[item_id]\n    return item\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude={\"tax\", \"description\"})\nasync def read_item(item_id: str):\n    item = items[item_id]\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Using Dataclasses in FastAPI Request and Response Models\nDESCRIPTION: This snippet demonstrates using Python's standard dataclasses within FastAPI to define request and response models. FastAPI, through Pydantic, is capable of converting these dataclasses into Pydantic models to leverage validation and serialization features without explicit dependency on Pydantic models.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{* ../../docs_src/dataclasses/tutorial001.py hl[1,7:12,19:20] *}\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Type Aliases for Dependencies\nDESCRIPTION: Shows how to use Python's type alias feature with Annotated to reduce code duplication when using the same dependency in multiple path operations while preserving type information.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GzipRequest Class in FastAPI\nDESCRIPTION: This code snippet demonstrates how to create a custom `GzipRequest` class that inherits from FastAPI's `Request` class. It overrides the `body()` method to decompress the request body if the `gzip` encoding is present in the headers. This allows handling Gzip-compressed requests seamlessly within a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom fastapi import FastAPI, Header, Request\nfrom fastapi.responses import JSONResponse\nimport gzip\n\n\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if \"gzip\" in self.headers.getlist(\"Accept-Encoding\", []):\n            body = await super().body()\n            return gzip.decompress(body)\n        return await super().body()\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Application with Async Routes\nDESCRIPTION: Shows how to create a FastAPI application using async/await syntax for asynchronous route handlers, demonstrating modern Python concurrency patterns.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Constructing Callback Path Expression\nDESCRIPTION: This snippet shows how to construct a callback path expression using OpenAPI 3 syntax, allowing dynamic URL building based on the original request data received by your API.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"{$callback_url}/invoices/{$request.body.id}\"\n```\n\n----------------------------------------\n\nTITLE: Using GZip Middleware - Python\nDESCRIPTION: The `GZipMiddleware` handles GZip responses for requests with the `Accept-Encoding` header including 'gzip'. It allows for both standard and streaming responses, with parameters for minimum response size and compression level.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Middleware implementation goes here\n```\n\n----------------------------------------\n\nTITLE: Configuring Pydantic Settings to Use .env File\nDESCRIPTION: Shows how to configure Pydantic Settings to read from a .env file for environment variables.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PATCH Operation for Partial Updates in FastAPI\nDESCRIPTION: This code demonstrates how to implement a PATCH operation in FastAPI to partially update an existing item. It uses exclude_unset=True to only include fields that were explicitly set in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.patch(\"/items/{item_id}\", response_model=Item)\ndef update_item(item_id: str, item: Item):\n    stored_item_data = items.get(item_id)\n    if stored_item_data is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n```\n\n----------------------------------------\n\nTITLE: Implementing PUT Operation for Complete Updates in FastAPI\nDESCRIPTION: This code demonstrates how to implement a PUT operation in FastAPI to replace an existing item completely. It uses jsonable_encoder to convert the received data to a JSON-compatible format.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.put(\"/items/{item_id}\", response_model=Item)\ndef update_item(item_id: str, item: Item):\n    stored_item_data = items.get(item_id)\n    if stored_item_data is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict()\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n```\n\n----------------------------------------\n\nTITLE: Automatic Linking to Static Files Using Jinja2 and FastAPI\nDESCRIPTION: Exemplifies using the `url_for` function in Jinja2 to generate links to static files in FastAPI applications. Demonstrates serving static assets such as CSS stylesheets via configured routes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_5\n\nLANGUAGE: jinja\nCODE:\n```\n<link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Reading from .env file - Pydantic v2\nDESCRIPTION: This code configures a Pydantic `Settings` class to read environment variables from a `.env` file. It uses the `model_config` attribute with `SettingsConfigDict` to specify the `env_file` to load.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str\n    admin_email: str\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic models for form validation in FastAPI\nDESCRIPTION: Example showing how to define a Pydantic model with form fields and use it as a Form parameter in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhl[9:11,15]\n```\n\n----------------------------------------\n\nTITLE: Synchronous Route Handler\nDESCRIPTION: Example of a synchronous route handler for libraries that don't support async/await\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using a Class Dependency in a FastAPI Route\nDESCRIPTION: Demonstrates how to use the CommonQueryParams class as a dependency in a FastAPI route function. The dependency is declared using the Depends() function and type annotation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Asynchronous FastAPI Route Using Await\nDESCRIPTION: Complete example of an asynchronous FastAPI route handler that uses await to call another asynchronous function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Using Docstrings for FastAPI Endpoint Description\nDESCRIPTION: Shows how to use function docstrings to provide detailed descriptions for FastAPI path operations with Markdown support.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items():\n    \"\"\"    \n    Create an item with all the information:\n    \n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Title Metadata to Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to add a title to a query parameter for additional metadata in the OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(title=\"Query string\")] = None\n```\n\n----------------------------------------\n\nTITLE: FastAPI: Get Current User Dependency\nDESCRIPTION: This code defines a dependency function `get_current_user` that retrieves the current user based on the provided token. It uses the same `oauth2_scheme` as before and returns a `User` model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_user(token: str):\n    user = fake_users_db.get(token)\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"User not found\")\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = await get_user(token)\n    if user is None:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid authentication credentials\", headers={\"WWW-Authenticate\": \"Bearer\"})\n    return user\n```\n\n----------------------------------------\n\nTITLE: Server Information Output\nDESCRIPTION: This snippet shows the server information output when running the FastAPI development server.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Embedding a Single Request Body in FastAPI\nDESCRIPTION: This snippet demonstrates how to use the `embed` parameter of the `Body` object to wrap a single request body parameter in a JSON object with a specific key.  It defines a path operation that accepts an `Item` as the request body, but specifies `embed=True` in the `Body` object, causing FastAPI to expect the `Item` data to be nested under the `item` key in the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/items/\")\nasync def create_item(item: Item = Body(embed=True)):\n    return {\"item\": item}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple WebSocket Clients in FastAPI\nDESCRIPTION: Demonstrates how to handle multiple WebSocket connections and broadcast messages to all connected clients. It also shows how to handle disconnections.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexcept WebSocketDisconnect:\n    manager.disconnect(websocket)\n    await manager.broadcast(f\"Client #{client_id} left the chat\")\n```\n\n----------------------------------------\n\nTITLE: Combining Dataclasses with Pydantic for Complex Models\nDESCRIPTION: Demonstrates how to use dataclasses with Pydantic for more complex data structures. This example shows nested dataclasses and lists of dataclasses in API responses.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import field\nfrom typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic.dataclasses import dataclass\n\napp = FastAPI()\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item]\n\n@app.get(\"/authors/{author_id}/items\", response_model=List[Item])\ndef read_author_items(author_id: str):\n    return [\n        {\"name\": \"Foo\", \"price\": 50.2},\n        {\"name\": \"Bar\", \"price\": 62},\n        {\"name\": \"Baz\", \"price\": 10.2},\n    ]\n\n@app.get(\"/authors\", response_model=List[Author])\ndef read_authors():\n    return [\n        {\n            \"name\": \"Foo\",\n            \"items\": [\n                {\"name\": \"Bar\", \"price\": 62},\n                {\"name\": \"Baz\", \"price\": 10.2},\n            ],\n        },\n        {\n            \"name\": \"Bin\",\n            \"items\": [\n                {\"name\": \"Foo\", \"price\": 50.2},\n            ],\n        },\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation URLs in FastAPI\nDESCRIPTION: This code snippet illustrates how to configure the documentation URLs for Swagger UI and ReDoc in a FastAPI application. The `docs_url` and `redoc_url` parameters control the URLs where these documentation interfaces are served. Setting a URL to `None` disables the corresponding interface.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom fastapi import FastAPI\n\napp = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket endpoint\nDESCRIPTION: Defines a WebSocket endpoint within a FastAPI application. This snippet illustrates the creation of a WebSocket route using the `@app.websocket_route` decorator. It shows basic setup for handling WebSocket connections.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\nhtml = \\\"\\\"\\\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\\\"\\\" onsubmit=\\\"sendMessage(event)\\\">\n            <input type=\\\"text\\\" id=\\\"messageText\\\" autocomplete=\\\"off\\\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\\\"ws://localhost:8000/ws\\\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\\\"messageText\\\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\\\"\\\"\\\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\"\n```\n\n----------------------------------------\n\nTITLE: FastAPI PUT request with jsonable_encoder\nDESCRIPTION: This snippet demonstrates how to use the `jsonable_encoder` function to convert input data into JSON format when performing a full update using the HTTP `PUT` method in FastAPI. It is useful when dealing with simple data types for storage in NoSQL databases. The endpoint expects an item_id and an Item object in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n    item_json = jsonable_encoder(item)\n    stored_items[item_id] = item_json\n    return item_json\n```\n\n----------------------------------------\n\nTITLE: Response Model Exclusion Configuration\nDESCRIPTION: Demonstrates excluding unset values from the response using response_model_exclude_unset parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", response_model_exclude_unset=True)\n```\n\n----------------------------------------\n\nTITLE: Configuration in a Separate Module (config.py)\nDESCRIPTION: This code defines a `Settings` class in a separate module (`config.py`) using Pydantic's `BaseSettings` for configuration management. It includes default values for `app_name`, requires an `admin_email` environment variable, and sets a default `items_per_user` value. An instance of the `Settings` class is created as `settings` to be used elsewhere in the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseSettings, EmailStr\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: EmailStr\n    items_per_user: int = 50\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers in FastAPI Dependencies with yield\nDESCRIPTION: Illustrates how to use context managers within FastAPI dependencies that use yield. This example shows a custom context manager class being used in a dependency function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n```\n\n----------------------------------------\n\nTITLE: Partial Update using Pydantic's exclude_unset Parameter\nDESCRIPTION: Shows how to generate a dictionary with only explicitly set values using `exclude_unset=True`, avoiding default value overrides during partial updates\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntutorial002.py (line 34)\n```\n\n----------------------------------------\n\nTITLE: FastAPI Route with Asynchronous Function\nDESCRIPTION: This snippet shows a FastAPI route defined with an asynchronous function. The `async def` syntax allows the route to handle requests concurrently without blocking the main thread. The `await` keyword is used to asynchronously call `get_burgers(2)`, ensuring that the application remains responsive while waiting for the burgers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"2 3\"\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Python Optional Type Hint with Typing Module\nDESCRIPTION: This code snippet demonstrates the use of `Optional` from the `typing` module.  `Optional[str]` indicates that the `name` parameter can either be a string or `None`. Using `Optional` improves code clarity and allows for more robust error handling when a value might be absent.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\\\"Hi {name}\\\")\n    else:\n        print(\\\"Hello World\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Restricting Extra Form Fields in FastAPI with Pydantic\nDESCRIPTION: This code snippet showcases how to use Pydantic's model configuration to prohibit extra fields in form data. By setting `extra = \"forbid\"` in the `Config` class within the Pydantic model, FastAPI will raise an error if the client sends any form fields that are not defined in the model.  It illustrates how to prevent unexpected data from being processed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-form-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Form\n\nfrom pydantic import BaseModel, ConfigDict\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = ConfigDict(extra='forbid')\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(\n    item: Annotated[Item, Form(...)],\n):\n    return item\n```\n\n----------------------------------------\n\nTITLE: FastAPI Application with Tag Organization\nDESCRIPTION: A FastAPI application with routes organized using tags for 'items' and 'users', which helps generate more structured client code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\napp = FastAPI(\n    title=\"FastAPI Client Example\"\n)\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": f\"Item {item.name} created\"}\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n```\n\n----------------------------------------\n\nTITLE: FastAPI Header Declaration Example 1\nDESCRIPTION: This code snippet demonstrates how to declare a header parameter named `user_agent` using FastAPI's `Header` class. The `user_agent` parameter is of type `str` and is automatically converted from the HTTP header `user-agent` due to the automatic underscore conversion.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\"\n```\n\n----------------------------------------\n\nTITLE: Secure Credential Validation with Timing Attack Protection\nDESCRIPTION: A more complete example that validates credentials securely using the secrets module to prevent timing attacks, with proper error handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect email or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return {\"username\": credentials.username}\n```\n\n----------------------------------------\n\nTITLE: Raising exceptions from dependencies in FastAPI\nDESCRIPTION: Shows how path decorator dependencies can raise exceptions like regular dependencies.  The `get_token_header` and `get_key` functions demonstrate raising an `HTTPException` if the header value is invalid, which will be handled by FastAPI's exception handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"async def get_token_header(x_token: str = Header()):\\n    if x_token != \\\"fixed-token\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\\n    return x_token\\n\\nasync def get_key(x_key: str = Header()):\\n    if x_key != \\\"fixed-key\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\\n    return x_key\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", dependencies=[Depends(get_token_header), Depends(get_key)])\\nasync def read_items(item_id: str):\\n    return {\"item_id\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from FastAPI Endpoint\nDESCRIPTION: This JSON snippet shows the expected response from the root endpoint of the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse in FastAPI\nDESCRIPTION: This code snippet demonstrates how to use `ORJSONResponse` in FastAPI to improve performance when returning JSON responses. It imports `ORJSONResponse` and sets it as the `response_class` in the *path operation decorator*.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_class=ORJSONResponse)  # HL\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to define an optional query parameter in FastAPI using `Union[str, None]` with Python 3.10 syntax.  The `q` parameter is optional and defaults to `None` if not provided in the request. FastAPI handles the type hinting and makes the parameter optional.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(q: Union[str, None] = None):\\n    return {\"q\": q}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Settings in FastAPI Application\nDESCRIPTION: Demonstrates how to use the Settings object in a FastAPI application to access configuration values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Application with Models for Client Generation\nDESCRIPTION: A simple FastAPI application with Item and ResponseMessage models that demonstrates how to structure an API for client generation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\napp = FastAPI(\n    title=\"FastAPI Client Example\"\n)\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": f\"Item {item.name} created\"}\n```\n\n----------------------------------------\n\nTITLE: Nested Dependencies with Yield\nDESCRIPTION: Demonstrates how to implement nested dependencies with yield where each dependency depends on others. Shows proper dependency chaining and cleanup order.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\nasync def dependency_b(dep_a: DepA = Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\nasync def dependency_c(dep_b: DepB = Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Status Codes with JSONResponse in FastAPI Python\nDESCRIPTION: This code snippet demonstrates how to return different HTTP status codes based on conditions by directly returning a JSONResponse object. It handles updating an item with status code 200 or creating a new item with status code 201 if it doesn't exist.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\ndef upsert_item(item_id: str, name: str, description: str | None = None):\n    if item_id in items:\n        item = {\"item_id\": item_id, \"name\": name, \"description\": description}\n        items[item_id] = item\n        return item\n    else:\n        item = {\"item_id\": item_id, \"name\": name, \"description\": description}\n        items[item_id] = item\n        return JSONResponse(status_code=201, content=item)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Path Operation Functions\nDESCRIPTION: Illustrates how to declare dependencies in route handlers using Depends and Annotated, showing how to pass common parameters to multiple endpoints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\ndef read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Pydantic Models for FastAPI\nDESCRIPTION: This example illustrates how to create nested Pydantic models to represent complex JSON objects in FastAPI, including the use of the HttpUrl type for URL validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseModel, HttpUrl\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: Set[str] = set()\n    image: Image | None = None\n```\n\n----------------------------------------\n\nTITLE: Using the Settings Object in FastAPI\nDESCRIPTION: This code snippet shows how to use the `Settings` object defined earlier within a FastAPI route. It imports the `Settings` object and accesses its attributes (e.g., `settings.app_name`) within the route's function to return configuration data in the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\nfrom .config import settings\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Reading a Hero\nDESCRIPTION: This code snippet showcases reading a single hero by ID, returning a `HeroPublic` model as the API response. It includes error handling for when the hero is not found.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\nasync def read_hero(hero_id: int, db: Session = Depends(get_db)):\n    hero = db.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Synchronous Function in Python\nDESCRIPTION: Demonstrates a non-asynchronous function definition using regular def syntax for comparison with async functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# This is not asynchronous\ndef get_sequential_burgers(number: int):\n    # Do some sequential stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Validation with Minimum and Maximum Length\nDESCRIPTION: Demonstrates adding both minimum and maximum length constraints to a query parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(min_length=3, max_length=50)] = None\n```\n\n----------------------------------------\n\nTITLE: Combining Required, Optional and Default Query Parameters in FastAPI\nDESCRIPTION: This snippet combines required, optional, and default query parameters in a FastAPI route. The `needy` parameter is required, `skip` has a default value of 0, and `limit` is optional. This demonstrates the flexibility of FastAPI in handling different types of query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_user_item(\\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\\n):\\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\\n    return item\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Dependencies with Yield in FastAPI\nDESCRIPTION: This code demonstrates how to define hierarchical dependencies using `yield`.  Each dependency can depend on another, creating a nested structure. FastAPI handles the execution order, ensuring that teardown phases are executed in the reverse order of the setup phases.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated, Generator\\n\\nfrom fastapi import Depends, FastAPI\\n\\napp = FastAPI()\\n\\n\\nasync def dependency_a() -> str:\\n    yield \"dependency_a\"\\n\\n\\nasync def dependency_b(dep_a: Annotated[str, Depends(dependency_a)]) -> Generator[str, None, None]:\\n    yield f\"dependency_b({dep_a})\"\\n\\n\\nasync def dependency_c(dep_b: Annotated[str, Depends(dependency_b)]) -> Generator[str, None, None]:\\n    yield f\"dependency_c({dep_b})\"\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(dep_c: Annotated[str, Depends(dependency_c)]):\\n    return dep_c\"\n```\n\n----------------------------------------\n\nTITLE: Adding Description Metadata to Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to add a description to a query parameter for more detailed documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(\n    default=None,\n    title=\"Query string\",\n    description=\"Query string for the items to search in the database that have a good match\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Settings Dependency in FastAPI\nDESCRIPTION: Implements a dependency function to provide Settings object, using lru_cache for performance optimization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import lru_cache\n\n@lru_cache()\ndef get_settings():\n    return Settings()\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Models and API Path Operation with Callback in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define Pydantic models for invoices and events, and implement a FastAPI path operation with callback functionality. It includes the model definitions and the main endpoint that receives invoice creation requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom enum import Enum\nfrom typing import Dict, Optional\n\nfrom fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\",\n    response_model=InvoiceEventReceived,\n)\nasync def invoice_notification(\n    body: InvoiceEvent,\n):\n    pass\n\n\n@app.post(\n    \"/invoices/\",\n    callbacks=invoices_callback_router.routes,\n)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Optional[HttpUrl] = None,\n):\n    \"\"\"Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the cash from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the cash, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic User Model and OAuth2 Dependency in FastAPI\nDESCRIPTION: This snippet showcases the creation of a Pydantic user model with `username`, `email`, and `full_name` fields.  It also initializes the `OAuth2PasswordBearer` scheme to handle token-based authentication. The user model is a standard way to represent user data in the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\n\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n\"\n```\n\n----------------------------------------\n\nTITLE: Custom Content-Type Handling in FastAPI Using Pydantic\nDESCRIPTION: This snippet demonstrates how to manually define a content-type for a path operation's request body in FastAPI using a Pydantic model, even when the type is not JSON, such as YAML. It shows the flexibility in specifying and validating different content types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n\n@app.post(\"/items/\")\nasync def create_item(item: Item = Body(..., media_type=\"application/x-yaml\")):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Modifying a return statement in FastAPI\nDESCRIPTION: This snippet shows a return statement in a FastAPI function that returns a dictionary. This is an example of data conversion; FastAPI converts the Python dictionary to JSON in the API response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Parameters with Pydantic in FastAPI\nDESCRIPTION: This code snippet demonstrates how to declare multiple cookie parameters using a Pydantic model in a FastAPI application. It defines a Pydantic model with fields representing cookie parameters and then uses this model as a dependency in a FastAPI route to extract and validate the cookies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\nfrom typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Ads(BaseModel):\n    dark_mode: Union[bool, None] = None\n    items_per_page: int\n\n\n@app.get(\"/\")\nasync def read_ads(ads: Ads = Depends()):\n    return ads\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Form Parameters in FastAPI\nDESCRIPTION: Shows how to define form parameters using the `Form` class within a FastAPI endpoint function.  It demonstrates how to declare a form parameter with type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/request-forms.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"async def read_items(username: str = Form(), password: str = Form()):\n    return {\"username\": username, \"password\": password}\"\n```\n\n----------------------------------------\n\nTITLE: FastAPI: OAuth2 Scheme\nDESCRIPTION: This snippet creates an OAuth2PasswordBearer instance for handling OAuth2 password-based authentication.  This is used as a sub-dependency to obtain the token.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Cookie Parameters in FastAPI\nDESCRIPTION: Demonstrates how to declare a cookie parameter using the Cookie class. Similar to Path and Query parameters, it allows specifying a default value and additional validation parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/cookie-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Reports\nDESCRIPTION: Command to execute tests and generate HTML coverage reports for the FastAPI codebase. This creates a directory of reports that can be viewed in a browser to assess test coverage.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/test-cov-html.sh\n```\n\n----------------------------------------\n\nTITLE: Using Generic List for Query Parameter in FastAPI\nDESCRIPTION: This example demonstrates using a generic list type for a query parameter, which doesn't check the content type of the list items.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[list, Query()] = []\n```\n\n----------------------------------------\n\nTITLE: Changing Response Status Code with Response Parameter\nDESCRIPTION: Shows how to set a custom HTTP status code using the Response parameter in a FastAPI path operation function. Allows dynamically setting status codes while still supporting response model filtering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Assuming a path operation function that uses Response\n# to change the status code dynamically\ndef create_item(response: Response, item: Item):\n    # Logic to potentially create a new item\n    if not existing_item:\n        response.status_code = status.HTTP_201_CREATED\n    return item\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: This command runs a Docker container based on the image named `myimage`. The `-d` flag runs the container in detached mode (in the background). The `--name mycontêiner` option assigns the name `mycontêiner` to the container.  The `-p 80:80` option maps port 80 on the host to port 80 in the container, allowing access to the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"docker run -d --name mycontêiner -p 80:80 myimage\"\n```\n\n----------------------------------------\n\nTITLE: Using jsonable_encoder in FastAPI with Python 3.10\nDESCRIPTION: This example demonstrates how to use FastAPI's jsonable_encoder to convert a Pydantic model to a JSON-compatible dictionary, including handling datetime objects by converting them to ISO-formatted strings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/encoder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\napp = FastAPI()\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n```\n\n----------------------------------------\n\nTITLE: Returning a List of Models in FastAPI\nDESCRIPTION: Shows how to declare a response that contains a list of Pydantic model objects using standard Python typing annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in FastAPI\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code for a FastAPI path operation.  It shows setting the status code directly with an integer and also using the `status` constants for better readability.  The status code is included in the OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom fastapi import FastAPI\nfrom fastapi import status\n\napp = FastAPI()\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Marking test function as asynchronous with pytest\nDESCRIPTION: The `@pytest.mark.anyio` decorator marks a test function as asynchronous, allowing it to use `await` and other asynchronous operations. This informs pytest that the function should be invoked in an asynchronous context.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"{* ../../docs_src/async_tests/test_main.py hl[7] *}\"\n```\n\n----------------------------------------\n\nTITLE: Path Parameter with Type Annotation in FastAPI\nDESCRIPTION: This snippet shows how to declare the type of a path parameter using Python type annotations. Here, `item_id` is annotated as an `int`, which enables automatic data conversion and validation by FastAPI. If a non-integer value is provided in the path, FastAPI will return an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\"\"\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse in FastAPI\nDESCRIPTION: Shows how to use StreamingResponse to return a streaming response in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n```\n\n----------------------------------------\n\nTITLE: Using jsonable_encoder with JSONResponse in FastAPI\nDESCRIPTION: This snippet demonstrates how to use the jsonable_encoder to convert a Pydantic model to a JSON-compatible dict before passing it to a JSONResponse in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post(\"/items\")\ndef create_item(item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n```\n\n----------------------------------------\n\nTITLE: Data Models Definition\nDESCRIPTION: This code snippet shows the definition of data models `HeroPublic`, `HeroCreate`, and `HeroUpdate` using SQLModel. These models are used for data validation and serialization in the FastAPI application, defining the structure of the data that is received and sent by the API. The snippets are extracted from tutorial002_an_py310.py\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"class HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Optional[str] = None\n    age: Optional[int] = None\n    secret_name: Optional[str] = None\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Optional String Type\nDESCRIPTION: This code snippet shows how to define a query parameter `q` with an optional string type using `Union[str, None]` (or `str | None` in Python 3.10+). FastAPI will automatically recognize that if the parameter is not provided, its value will be `None`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Metadata in FastAPI\nDESCRIPTION: This snippet shows how to create metadata for tags in FastAPI.  The `openapi_tags` parameter accepts a list of dictionaries, where each dictionary defines metadata for a specific tag, including its name and description. Markdown formatting is supported in the description.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have docs for each one.\",\n    },\n]\n\napp = FastAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"John\"}, {\"name\": \"Jane\"}]\n\n\n@app.get(\"/items\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"Portal Gun\"}, {\"name\": \"Plumbus\"}]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Status Codes with JSONResponse in FastAPI (Python)\nDESCRIPTION: This code snippet demonstrates how to use JSONResponse to return custom status codes in a FastAPI application. It shows an example of returning 200 for updates and 201 for new item creation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: str, name: str, model: str):\n    if item_id in items:\n        return {\"id\": item_id, \"name\": name, \"model\": model}\n    else:\n        return JSONResponse(status_code=201, content={\"id\": item_id, \"name\": name, \"model\": model})\n```\n\n----------------------------------------\n\nTITLE: Using openapi_examples Parameter in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates the use of the openapi_examples parameter in FastAPI's Body(). It shows how to declare OpenAPI-specific examples with additional metadata that will be displayed in the API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price strings to actual numbers automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Ordering with Star Argument and Annotated (Python 3.9+)\nDESCRIPTION: This snippet shows how to use `Annotated` with `Path` and the star argument to define path and query parameters.  Since `Annotated` avoids relying on default values for function parameters, there is no need to use `*` to force keyword arguments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(*, item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\")], q: str):\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Regular Expression Validation\nDESCRIPTION: This code shows how to use the `regex` parameter of the `Query` class to validate a string query parameter against a regular expression.  The regular expression is used to ensure that the input conforms to a specific pattern.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, regex=\"^fixedquery$\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GzipRequest Class in Python\nDESCRIPTION: Creates a custom GzipRequest class that extends the base Request class to handle gzipped request bodies. It overrides the body() method to decompress gzipped content if present.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n```\n\n----------------------------------------\n\nTITLE: Docker Cache Optimization Snippets\nDESCRIPTION: Demonstrates the recommended approach for optimizing Docker cache usage with requirements and app code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY ./requirements.txt /code/requirements.txt\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY ./app /code/app\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables and running FastAPI\nDESCRIPTION: This command demonstrates setting environment variables `ADMIN_EMAIL` and `APP_NAME` directly in the terminal when running the FastAPI application. This allows configuring the application without modifying the code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" fastapi run main.py\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Using Extra Data Types in FastAPI Path Operation\nDESCRIPTION: This code snippet demonstrates how to use extra data types such as UUID, datetime, date, time, and timedelta as parameters in a FastAPI path operation. It illustrates how FastAPI handles these types for input validation and output serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from datetime import date, datetime, time, timedelta\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: UUID,\n    start_datetime: Optional[datetime] = Body(default=None),\n    end_date: Optional[date] = Body(default=None),\n    repeat_at: Optional[time] = Body(default=None),\n    process_after: Optional[timedelta] = Body(default=None),\n):\n    results = {\"item_id\": item_id}\n    if start_datetime:\n        results.update({\"start_datetime\": start_datetime})\n    if end_date:\n        results.update({\"end_date\": end_date})\n    if repeat_at:\n        results.update({\"repeat_at\": repeat_at})\n    if process_after:\n        results.update({\"process_after\": process_after})\n    return results\n\"\n```\n\n----------------------------------------\n\nTITLE: Importing APIRouters in FastAPI Main File\nDESCRIPTION: Shows how to import APIRouters from submodules using relative imports in the main FastAPI application file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom .routers import items, users\n```\n\n----------------------------------------\n\nTITLE: Send Callback Notification in FastAPI\nDESCRIPTION: This snippet demonstrates how to send a callback notification to an external API when an invoice is processed. It utilizes the 'httpx' library to post the notification which includes the invoice status.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncallback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Connections with TestClient\nDESCRIPTION: Demonstrates how to establish and test a WebSocket connection using FastAPI's TestClient in a with statement. Provides a method to programmatically connect to and interact with WebSocket endpoints during testing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith test_client.websocket_connect(\"/ws\") as websocket:\n    data = websocket.receive_json()\n    websocket.send_json({\"message\": \"Hello\"})\n```\n\n----------------------------------------\n\nTITLE: FastAPI Header Conversion Example\nDESCRIPTION: This code snippet demonstrates how to disable the automatic conversion of underscores to hyphens in header names by setting `convert_underscores` to `False`.  This allows you to define the header name exactly as it should appear in the HTTP request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_user_agent: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"User-Agent\": strange_user_agent}\n```\n\n----------------------------------------\n\nTITLE: FastAPI: Setting Response Status Code\nDESCRIPTION: This code snippet demonstrates how to declare a `Response` parameter in a FastAPI path operation function and use it to dynamically set the HTTP status code. It shows a scenario where a resource is created if it doesn't exist, and a 'CREATED' status code (201) is returned, while still using a response model to filter and convert the data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.post(\"/items/{item_id}\")\nasync def create_item(item_id: int, response: Response):\n    if item_id == 3:\n        response.status_code = 201\n        return {\"item_id\": item_id, \"name\": \"The Foo\"}\n    else:\n        return {\"item_id\": item_id, \"name\": \"The Bar\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Model for Request Body Validation\nDESCRIPTION: Demonstrates how to create a Pydantic model by inheriting from BaseModel and defining class attributes with standard Python types to validate incoming JSON data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Query Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to set a default value for a query parameter along with other validations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nq: str = Query(default=\"fixedquery\", min_length=3)\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with Defaults in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define query parameters with default values in a FastAPI endpoint. The `skip` parameter defaults to 0 and the `limit` parameter defaults to 10, allowing clients to omit these parameters in their requests. The function then returns a JSON response containing the values of `skip` and `limit`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/\")\nasync def read_items(skip: int = 0, limit: int = 10):\n    return {\"skip\": skip, \"limit\": limit}\"\n```\n\n----------------------------------------\n\nTITLE: Using Body() with Examples in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates how to use Body() with examples in FastAPI. It shows how to pass a single example of the expected data in the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n        },\n    ),\n):\n```\n\n----------------------------------------\n\nTITLE: File Reading with Context Manager\nDESCRIPTION: Basic example of using a context manager to safely read and close a file\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n```\n\n----------------------------------------\n\nTITLE: Validating User Credentials and Returning Error for Invalid Login\nDESCRIPTION: This code snippet demonstrates how to validate user credentials against a database and return an HTTP exception if the username is incorrect.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import HTTPException, status\n\nuser_dict = fake_users_db.get(form_data.username)\nif not user_dict:\n    raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n```\n\n----------------------------------------\n\nTITLE: Protegiendo ruta con autenticación de usuario en FastAPI\nDESCRIPTION: Aplica la dependencia de usuario autenticado y activo a una ruta para asegurar que solo usuarios autorizados puedan acceder.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Defining a Root GET Endpoint with FastAPI\nDESCRIPTION: Creating a simple root endpoint that returns a JSON response. The function is decorated with @app.get() to specify the HTTP method and route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Overriding Request Validation Exception Handler in FastAPI\nDESCRIPTION: This snippet demonstrates how to override the default exception handler for `RequestValidationError`.  This allows you to customize the error response returned to the client when request data is invalid. The handler receives the `Request` object and the `RequestValidationError` instance as arguments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Request\\nfrom fastapi.exceptions import RequestValidationError\\nfrom fastapi.responses import JSONResponse\\n\\napp = FastAPI()\\n\\n\\n@app.exception_handler(RequestValidationError)\\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\\n    return JSONResponse(\\n        status_code=422,\\n        content={\\\"detail\\\": exc.errors(), \\\"body\\\": exc.body}\\n    )\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: int):\\n    return {\\\"item_id\\\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Direct Response Usage in FastAPI\nDESCRIPTION: Shows how to directly return a Response object in FastAPI, allowing for complete control over the response properties like headers, status code, and content.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"\n    <?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        Apply shampoo here.\n    </Header>\n    <Body>\n        You'll have to use soap here.\n    </Body>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Request Body Parameters\nDESCRIPTION: Defining multiple request body parameters with different Pydantic models\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_item(item: Item, user: User)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with Response Parameter in FastAPI\nDESCRIPTION: This snippet shows how to declare a Response parameter in a FastAPI path operation function and set custom headers. The function returns normal content, while FastAPI handles adding the custom headers to the final response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-headers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"item\": \"Plumbus\"}\n```\n\n----------------------------------------\n\nTITLE: Implementando una Dependencia Parametrizable en Python con FastAPI\nDESCRIPTION: Define una clase FixedContentQueryChecker con métodos __init__ y __call__. El método __init__ permite parametrizar la dependencia, mientras que __call__ es utilizado por FastAPI para resolver la dependencia.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str | None = None):\n        if q:\n            return self.fixed_content in q\n        return False\n```\n\n----------------------------------------\n\nTITLE: FastAPI Docker Command with TLS Proxy Support\nDESCRIPTION: Docker CMD configuration that includes proxy headers support for running behind TLS termination proxies like Nginx or Traefik.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--proxy-headers\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Components Schema Example for FastAPI\nDESCRIPTION: JSON representation of the components schemas section in an OpenAPI document. This shows how Pydantic models are converted to JSON Schema definitions that can be referenced in response objects.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Authentication and Error Handling\nDESCRIPTION: Validate user credentials and handle authentication failures using HTTPException for unauthorized access attempts\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nraise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n```\n\n----------------------------------------\n\nTITLE: Single-File FastAPI Dockerfile\nDESCRIPTION: Complete Dockerfile configuration for a single-file FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./main.py /code/\n\nCMD [\"fastapi\", \"run\", \"main.py\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Defining File Parameter with File()\nDESCRIPTION: This snippet shows how to define a file parameter in a FastAPI endpoint using the `File()` function. This tells FastAPI that the endpoint expects a file to be uploaded as part of the request. The file will be received as bytes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import Body, FastAPI, File\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()], fileb: Annotated[bytes, File()], token: Annotated[str, Body()])\n:\n    return {\"file_size\": len(file), \"fileb_size\": len(fileb), \"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Defining File and Form Parameters in FastAPI (Python)\nDESCRIPTION: Example of defining path operation parameters using File and Form to receive file uploads and form data simultaneously. Parameters can be defined to receive file content as bytes or as UploadFile objects.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Body Parameters in FastAPI (Python)\nDESCRIPTION: Demonstrates how to define an optional body parameter 'item' in a FastAPI route function, along with path and query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def update_item(\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n```\n\n----------------------------------------\n\nTITLE: Context Manager as Dependency with Yield in FastAPI\nDESCRIPTION: This code shows how to use a context manager class as a dependency with `yield` in FastAPI.  The `__enter__` method is executed before the request, and the `__exit__` method is executed afterward for cleanup.  This is similar to using `@contextlib.contextmanager` or `@contextlib.asynccontextmanager`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Generator\\n\\nfrom fastapi import Depends, FastAPI\\n\\napp = FastAPI()\\n\\n\\nclass MyContextManager:\\n    def __init__(self, name: str):\\n        self.name = name\\n\\n    def __enter__(self):\\n        print(\"Entering the context\")\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        print(\"Exiting the context\")\\n\\n\\nasync def get_context_manager() -> Generator[MyContextManager, None, None]:\\n    context_manager = MyContextManager(name=\"example\")\\n    yield context_manager\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(context_manager: MyContextManager = Depends(get_context_manager)):\\n    return {\"message\": f\"Hello {context_manager.name}\"}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Path Operation Decorator\nDESCRIPTION: Example showing how to add dependencies to a FastAPI path operation decorator using the dependencies parameter. Demonstrates dependency validation with custom headers X-Key and X-Token.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def get_items(\n    *,\n    dependencies=[\n        Depends(verify_token),\n        Depends(verify_key)\n    ]\n):\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation with Scopes\nDESCRIPTION: Creates a JWT token that includes the requested scopes as part of the token payload.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naccess_token = create_access_token(data={\"sub\": user.username, \"scopes\": form_data.scopes})\n```\n\n----------------------------------------\n\nTITLE: UploadFile with Additional Metadata in FastAPI\nDESCRIPTION: This snippet shows how to use `File()` with `UploadFile` to set additional metadata for the uploaded file. The `File()` function allows adding constraints or configurations for the file upload.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file to upload\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_file(file: UploadFile = File(description=\"A file to upload\")):\n    return {\"filename\": file.filename}\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Password and Creating UserInDB Instance\nDESCRIPTION: This snippet shows the process of verifying the user's password using a hashing function and creating a UserInDB instance with the user data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nuser = UserInDB(**user_dict)\nif not verify_password(form_data.password, user.hashed_password):\n    raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n```\n\n----------------------------------------\n\nTITLE: Directly Creating Response with Cookies\nDESCRIPTION: Shows how to create a Response object directly and set cookies when returning a response, providing more explicit control over cookie configuration\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Snippet demonstrating direct Response creation with cookie setting\n```\n\n----------------------------------------\n\nTITLE: StreamingResponse in FastAPI\nDESCRIPTION: Shows how to use StreamingResponse to stream the response body using an asynchronous generator or a normal generator/iterator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dependency Function in FastAPI\nDESCRIPTION: A simple function that serves as a dependency for path operations. It takes query parameters and returns them in a dictionary, demonstrating the basic structure of a FastAPI dependency.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI\nDESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to enforce multiple numeric constraints on a path parameter `item_id`. Here, `gt=0` ensures the value is greater than 0, and `le=1000` ensures it is less than or equal to 1000.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\", gt=0, le=1000)]):\n    return {\\\"item_id\\\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Path Operation Function in FastAPI (Sync)\nDESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI. Similar to the asynchronous example, the `@app.get(\"/\")` decorator links the `root` function to the root path and the GET method. The key difference is the absence of `async` in the function definition, making it a standard Python function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\"\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Application Example for Containerization\nDESCRIPTION: A simple FastAPI application with two endpoints - a root endpoint returning a hello world message and an items endpoint that accepts path and query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Dependencies in FastAPI OAuth2 Flow\nDESCRIPTION: This snippet shows the implementation of user dependencies in the OAuth2 flow. It includes functions to get the current user and check if the user is active, raising appropriate HTTP exceptions when necessary.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)]\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: FastAPI Custom Unique ID Function\nDESCRIPTION: This snippet shows how to customize the generation of unique IDs for path operations in FastAPI. It defines a function that uses the first tag and the function name to create the ID, ensuring uniqueness while providing cleaner method names in generated clients. This function is then passed to the FastAPI constructor via the `generate_unique_id_function` parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\n\n\ndef generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = FastAPI(generate_unique_id_function=generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.post(\"/items/\", tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/{item_id}\", tags=[\"items\"])\nasync def read_item(item_id: int):\n    return {\"name\": \"Foo\", \"price\": 50.2}\n\n```\n\n----------------------------------------\n\nTITLE: Defining File and Form Parameters in FastAPI\nDESCRIPTION: This snippet shows how to define parameters for file uploads and form data in a FastAPI route. It includes examples of handling both file and text form fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form()):\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Path Operation Function in FastAPI\nDESCRIPTION: This snippet shows how to define an asynchronous path operation function in FastAPI using the 'async def' syntax. It's recommended for functions that may involve I/O operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def path_operation_function():\n    # Asynchronous code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Python Types with FastAPI in Spanish\nDESCRIPTION: Example showing how to use Python type annotations with FastAPI, demonstrating basic type declarations and Pydantic model definition for a User class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declara una variable como un str\n# y obtiene soporte del editor dentro de la función\ndef main(user_id: str):\n    return user_id\n\n\n# Un modelo de Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Response Class in FastAPI\nDESCRIPTION: Example showing how to create a custom response class by extending Response and implementing the render method. This example creates a custom ORJSON response with indentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\nimport orjson\n\napp = FastAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content):\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Headers in FastAPI\nDESCRIPTION: This example demonstrates how to declare a header that can appear multiple times. The values are received as a Python list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n```\n\n----------------------------------------\n\nTITLE: Defining Response Model in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define a response model for a FastAPI endpoint using the `response_model` parameter. This ensures the output data is converted to the specified type, validated, and included in the OpenAPI schema. This example does not include the actual code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" This example does not include the actual code, but demonstrates where the response_model parameter is used.\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: int):\n    ...\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hero Create Model in Python\nDESCRIPTION: Creates a HeroCreate model that inherits from HeroBase and adds a secret_name field for hero creation. This model validates client data and handles sensitive information like secret names.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass HeroCreate(HeroBase):\n    secret_name: str\n```\n\n----------------------------------------\n\nTITLE: Returning Item Data from API\nDESCRIPTION: This snippet demonstrates how to return specific item data in the JSON format from an API endpoint. It showcases how FastAPI can auto-complete and validate object attributes based on type definitions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n    return {\"item_name\": item.name, \"item_id\": item_id}\n\"\"\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n        ... \"item_name\": item.name ...\n\"\"\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n        ... \"item_price\": item.price ...\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameter\nDESCRIPTION: Defining an optional query parameter with Union or inline type hint\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = None\n# Or in Python 3.10+\nq: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Disabling Underscore to Dash Conversion in FastAPI Headers\nDESCRIPTION: Example showing how to disable the automatic conversion of underscores to dashes in header parameters by setting convert_underscores=False in the Header class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(strange_header: str | None = Header(default=None, convert_underscores=False)):\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Server in Python\nDESCRIPTION: Code to directly run a Uvicorn server within a FastAPI application, using the __name__ == \"__main__\" pattern to ensure the server only runs when the file is executed directly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp import app\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to FastAPI Route Decorator in Python\nDESCRIPTION: This snippet demonstrates how to add dependencies to a FastAPI route decorator using the 'dependencies' argument. It includes examples of dependencies that check headers and raise exceptions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header(...)):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n```\n\n----------------------------------------\n\nTITLE: Using Body() with Multiple Examples in FastAPI (Python)\nDESCRIPTION: This code shows how to use Body() with multiple examples in FastAPI. It demonstrates passing multiple examples of the expected data in the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price strings to actual numbers automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Query Parameters in FastAPI\nDESCRIPTION: Demonstrates how to define query parameters in a FastAPI route function with default values. The parameters 'skip' and 'limit' are defined as integers with default values of 0 and 10 respectively.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(skip: int = 0, limit: int = 10):\n```\n\n----------------------------------------\n\nTITLE: List of Nested Models\nDESCRIPTION: Demonstrates declaring a list of nested model objects\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    images: List[Image]\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads\nDESCRIPTION: This snippet demonstrates how to handle multiple file uploads in a FastAPI endpoint by declaring the file parameter as a list of `bytes` or `UploadFile`. This allows the endpoint to receive multiple files in a single request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile] = File()):\n    return {\"filenames\": [file.filename for file in files]}\"\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the recommended directory structure for a FastAPI Docker project.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app\n│   ├── __init__.py\n│   └── main.py\n├── Dockerfile\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Mixing Required and Optional Query Parameters in FastAPI\nDESCRIPTION: This example shows how to mix required, optional, and query parameters with default values in a FastAPI endpoint. The `needy` parameter is required, `skip` has a default value of 0, and `limit` is optional with a default value of `None`.  The function returns a dictionary containing these parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str,\n    needy: str,\n    skip: int = 0,\n    limit: int | None = None,\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies\nDESCRIPTION: This snippet demonstrates how to use a dependency in a path operation function. It declares a single dependency, `query_or_cookie_extractor`. FastAPI automatically handles resolving the sub-dependency `query_extractor` before calling `query_or_cookie_extractor`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/\")\nasync def read_items(query_or_cookie: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_cookie}\"\n```\n\n----------------------------------------\n\nTITLE: Returning Response Directly in FastAPI\nDESCRIPTION: Demonstrates how to return a Response object directly in a FastAPI endpoint, utilizing type annotations for Response or its subclasses\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef read_item(item_id: str):\n    return RedirectResponse(\"/docs\")\n```\n\n----------------------------------------\n\nTITLE: Using UJSONResponse for JSON Serialization in FastAPI\nDESCRIPTION: Example showing how to use UJSONResponse as an alternative JSON serializer. This replaces the default JSONResponse with ujson library implementation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies in FastAPI Python\nDESCRIPTION: This code snippet shows how to override dependencies in a FastAPI application using the app.dependency_overrides dictionary. It demonstrates setting and clearing dependency overrides for testing purposes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.dependency_overrides[get_current_username] = get_current_username_mock\n\n# Run your tests here\n\napp.dependency_overrides = {}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Route Class on APIRouter in Python\nDESCRIPTION: Demonstrates how to set a custom route class (TimedRoute) on an APIRouter instance. This applies the custom route handling to all routes defined on this router.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrouter = APIRouter(route_class=TimedRoute)\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Query Parameter Validation in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet shows how to use a regular expression pattern to validate a query parameter in FastAPI using Annotated and Query.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")] = None):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Setting up Conditional OpenAPI with Environment Variables in FastAPI\nDESCRIPTION: Code example showing how to configure OpenAPI documentation using Pydantic settings and environment variables. The openapi_url setting controls whether the API documentation is accessible.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"  # default value\n\n\nsettings = Settings()\n\napp = FastAPI(\n    openapi_url=settings.openapi_url  # None or the default \"/openapi.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Schema for Non-JSON Responses in FastAPI\nDESCRIPTION: Shows how to customize the OpenAPI schema for a path operation that returns non-JSON data, using openapi_extra to define the response schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.get(\n    \"/items/\",\n    openapi_extra={\n        \"responses\": {\n            \"200\": {\n                \"content\": {\n                    \"application/vnd.apache.avro+json\": {\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/AvroUsersSchema\"\n                        }\n                    }\n                },\n                \"description\": \"Return an Avro schema\",\n            }\n        }\n    },\n)\ndef read_items():\n    data = magic_data_reader()\n    return Response(content=data, media_type=\"application/vnd.apache.avro+json\")\n```\n\n----------------------------------------\n\nTITLE: Custom Path Operation with Tags and Responses\nDESCRIPTION: Defines a path operation with multiple tags and custom responses using FastAPI's advanced configuration options\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef read_item(item_id: int):\n    tags=[\"items\", \"custom\"],\n    responses={404: {\"description\": \"Item not found\"},\n               403: {\"description\": \"Operation forbidden\"}}\n```\n\n----------------------------------------\n\nTITLE: Directly Returning an HTMLResponse in FastAPI\nDESCRIPTION: Example showing how to directly return an HTMLResponse object instead of setting it as the response_class. Note that this approach doesn't get documented in OpenAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=content)\n```\n\n----------------------------------------\n\nTITLE: Using Status Codes in FastAPI Route (Python)\nDESCRIPTION: This example demonstrates how to use a status code in a FastAPI route decorator. It sets the response status code to 418 (I'm a teapot) using the status module's named constant.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/status.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, status\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n```\n\n----------------------------------------\n\nTITLE: Handling List Bodies in FastAPI Endpoints\nDESCRIPTION: This snippet illustrates how to define a FastAPI endpoint that expects a list of items as the request body, using Pydantic models for validation and documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Operations with Advanced Data Types in Python\nDESCRIPTION: Example of a FastAPI path operation that uses advanced data types including UUID, datetime, and datetime.date. Shows how to define endpoints with these parameters and perform date operations within the function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime | None = Body(default=None),\n    end_datetime: datetime | None = Body(default=None),\n    repeat_at: time | None = Body(default=None),\n    process_after: timedelta | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n```\n\n----------------------------------------\n\nTITLE: Nested Dataclasses in FastAPI using Pydantic\nDESCRIPTION: This code snippet shows how to use nested dataclasses in FastAPI. By using pydantic.dataclasses as a drop-in replacement for standard dataclasses, it becomes possible to create complex nested structures. This approach helps in generating API documentation and ensures that dataclasses are serialized properly in response models.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n{* ../../docs_src/dataclasses/tutorial003.py hl[1,5,8:11,14:17,23:25,28] *}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object Directly in FastAPI Path Operation Function\nDESCRIPTION: This example demonstrates how to inject and use the Request object in a FastAPI path operation function alongside regular path parameters. The code retrieves the client's host information through the Request object while still using normal path parameter validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/using-request-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Using Annotated for Metadata in Python 3.8+\nDESCRIPTION: This code demonstrates how to use `Annotated` from `typing_extensions` to add metadata to type hints in Python versions before 3.9. `Annotated` allows adding metadata to types without affecting the actual type. This metadata can be used by tools or libraries to provide additional information or validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"from typing_extensions import Annotated\n\nfrom typing import Union\n\nname: Annotated[str, 'some metadata'] = 'John Doe'\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Response Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to use a `Response` parameter in a FastAPI path operation function to set cookies.  A temporary `Response` object is used to set the cookie, and then the function returns the desired data, which is then filtered by the `response_model` if defined. The example showcases the setting of a cookie named \"example-cookie\".\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom fastapi import FastAPI, Response\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(item_id: str, response: Response):\\n    response.set_cookie(key=\"example-cookie\", value=\"some-cookie-value\")\\n    return {\"item_id\": item_id}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Tags in FastAPI\nDESCRIPTION: Shows how to use Python Enums to define consistent tags for FastAPI path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n@app.get(\"/items/\", tags=[Tags.items])\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Status Codes with JSONResponse in FastAPI\nDESCRIPTION: This code demonstrates how to return different HTTP status codes based on application logic in FastAPI. It creates a path operation that returns status code 200 for updating existing items and 201 for creating new items by directly returning a JSONResponse with the appropriate status code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, status\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\nfrom typing import Annotated, Any\n\napp = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\nclass Item(BaseModel):\n    name: str\n    size: int\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str, item: Item, response_model_exclude_unset: bool = False\n) -> Annotated[Any, JSONResponse]:\n    if item_id in items:\n        # Item exists, return 200 status code\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_200_OK, content=item.model_dump())\n    else:\n        # Item doesn't exist yet, create it and return 201 status code\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item.model_dump())\n```\n\n----------------------------------------\n\nTITLE: Converting Pydantic Model to JSON-Compatible Dictionary\nDESCRIPTION: Demonstrates how to use `jsonable_encoder()` to transform a Pydantic model with datetime attributes into a JSON-compatible dictionary for database storage or JSON serialization\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/encoder.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n\nitem = Item(title=\"Foo\", timestamp=datetime.now())\nprint(jsonable_encoder(item))\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Attributes with Pydantic Field in Python\nDESCRIPTION: This snippet shows how to define model attributes within a Pydantic model using the `Field` class. It demonstrates assigning default values and using `Field` to add metadata and validations to the attributes. This is used to define the structure and constraints of request body data in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n        description: str = Field(\n            default=\"A very nice Item\", title=\"Item Description\"\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Defining Deeply Nested Pydantic Models for FastAPI\nDESCRIPTION: This example shows how to create deeply nested Pydantic models with multiple levels of nesting, including optional fields and lists of submodels.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: Set[str] = set()\n    images: List[Image] | None = None\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: List[Item]\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Content with HTMLResponse in FastAPI\nDESCRIPTION: Example demonstrating how to return HTML content by setting HTMLResponse as the response_class parameter. This sets the Content-Type header to text/html.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"<html><head><title>Some HTML in here</title></head><body><h1>Look ma! HTML!</h1></body></html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Headers in FastAPI\nDESCRIPTION: This snippet demonstrates how to handle duplicate header values in FastAPI by using a list type declaration. When a header appears multiple times, FastAPI will collect all the values into a Python list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import List, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\"\n```\n\n----------------------------------------\n\nTITLE: Restricting Extra Headers with Pydantic Model Configuration in FastAPI\nDESCRIPTION: This example shows how to use Pydantic model configuration to prohibit any extra headers beyond those explicitly defined. If a client sends undefined headers, FastAPI will return an error response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass HeaderModel(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n    \n    x_token: str\n    x_api_version: str | None = None\n    user_agent: str | None = None\n    content_language: str | None = \"en-US\"\n    content_type: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Query Parameter List with Default Values in FastAPI (Python 3.9+)\nDESCRIPTION: Defines a query parameter 'q' that accepts multiple values and provides default values ['foo', 'bar'] when no parameter is provided in the URL.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n```\n\n----------------------------------------\n\nTITLE: Async Path Operation Function with Await\nDESCRIPTION: Demonstrates declaring a path operation function with async def and using await for asynchronous library calls\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Definindo Rota com Tipos de Dados Adicionais em FastAPI\nDESCRIPTION: Este snippet demonstra como definir uma rota FastAPI usando tipos de dados adicionais como UUID, datetime, e frozenset. A função também realiza uma operação de data simples.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime | None = None,\n    end_datetime: datetime | None = None,\n    repeat_at: time | None = None,\n    process_after: timedelta | None = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"repeat_at\": repeat_at,\n        \"process_after\": process_after,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n```\n\n----------------------------------------\n\nTITLE: Ordering Parameters with Query and Path in FastAPI (Python)\nDESCRIPTION: Demonstrates how to order parameters when using Query and Path in FastAPI without Annotated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n```\n\n----------------------------------------\n\nTITLE: FastAPI: User Model Definition\nDESCRIPTION: This snippet defines a User model using Pydantic. It illustrates how Pydantic can be used to declare data models for request bodies and other parts of the application, ensuring type safety and data validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    disabled: Optional[bool] = None\n```\n\n----------------------------------------\n\nTITLE: Excluding Path Operations from OpenAPI in FastAPI\nDESCRIPTION: This snippet shows how to exclude a specific path operation from the OpenAPI schema using the `include_in_schema` parameter. Setting it to `False` effectively removes the operation from generated API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/items/', include_in_schema=False)\nasync def read_items():\n    return ['item1', 'item2']\n```\n\n----------------------------------------\n\nTITLE: Creating a basic FastAPI application\nDESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: `/` and `/items/{item_id}`.  The `/` endpoint returns a JSON response with a \"Hello\": \"World\" message. The `/items/{item_id}` endpoint takes an item ID (integer) and an optional query parameter `q` (string or None), and returns a JSON response containing the item ID and the value of `q`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Sample Python requirements.txt for FastAPI Project\nDESCRIPTION: A basic requirements.txt file specifying FastAPI with standard extensions and Pydantic with appropriate version ranges to ensure compatibility.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi[standard]>=0.113.0,<0.114.0\npydantic>=2.7.0,<3.0.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Optional Query Parameter with Type Hints\nDESCRIPTION: Demonstrates defining an optional query parameter with type hints and default value of None\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = None\n```\n\nLANGUAGE: Python\nCODE:\n```\nq: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dependency Function in FastAPI\nDESCRIPTION: Demonstrates how to create a simple dependency function with optional query parameters that can be reused across different route operations\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Query Parameter in FastAPI\nDESCRIPTION: This code shows how to make a query parameter required by using '...' as the default value in Query.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nq: str = Query(..., min_length=3)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dict Type with Type Hints in Python 3.8+\nDESCRIPTION: This example shows how to declare a dictionary variable with type hints for both keys and values in Python 3.8 and above, using the typing module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Dict\n\nprices: Dict[str, float] = {\"apple\": 0.4, \"banana\": 0.5}\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Pydantic Models in FastAPI with Python\nDESCRIPTION: This snippet demonstrates how to define variable types using Python type hints and create Pydantic models with type annotations. It showcases the use of `typing` for specifying list and dictionary types, `datetime` for handling dates, and `pydantic.BaseModel` for defining data models with type validations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List, Dict\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Değişkeni str olarak belirt\n# ve o fonksiyon için harika bir editör desteği al\ndef main(user_id: str):\n    return user_id\n\n\n# Pydantic modeli\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Float with Greater Than and Less Than in FastAPI\nDESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to validate float values. It enforces that the `item_id` must be greater than 0 and less than 1 using `gt` and `lt`, which is useful for values that must be strictly within a certain range.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(item_id: Annotated[float, Path(title=\\\"The ID of the item to get\\\", gt=0, lt=1)]):\n    return {\\\"item_id\\\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Second-level Dependency\nDESCRIPTION: This snippet defines a second-level dependency in FastAPI. It declares a dependency on another function `query_extractor` and assigns its return value to the parameter `q`. It also defines an optional cookie named `last_query`, which is used if the query parameter `q` is not provided.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def query_or_cookie_extractor(\n    q: str | None = Depends(query_extractor),\n    last_query: str | None = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n```\n\n----------------------------------------\n\nTITLE: HTML Response in FastAPI\nDESCRIPTION: This snippet shows how to return an HTML response from a FastAPI endpoint using `HTMLResponse`. It imports `HTMLResponse` and passes it as the `response_class` parameter in the *path operation decorator*.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_class=HTMLResponse)  # HL\nasync def read_item(item_id: str):\n    return f\"<html><body><h1>Item ID: {item_id}</h1></body></html>\"\n\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse with response_class in FastAPI\nDESCRIPTION: Demonstrates how to use FileResponse as a response_class parameter in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\nsome_file_path = \"large-video-file.mp4\"\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n```\n\n----------------------------------------\n\nTITLE: Defining a dependency using a class in FastAPI\nDESCRIPTION: This code demonstrates how to define a dependency using a Python class in FastAPI.  The `CommonQueryParams` class encapsulates the common query parameters and FastAPI will instantiate and inject this class. The `__init__` method defines the parameters that FastAPI will use for dependency injection.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Containing a Path in FastAPI\nDESCRIPTION: This snippet illustrates how to declare a path parameter that can contain slashes, effectively capturing a full file path. By adding `:path` to the path parameter declaration, FastAPI knows to capture all characters until the end of the URL as the value for that parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n```\n\n----------------------------------------\n\nTITLE: FastAPI Multiple Header Values Example\nDESCRIPTION: This code snippet demonstrates how to handle headers with multiple values by declaring the header parameter as a `list`.  FastAPI will automatically collect all values for the given header into a Python list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart for File Uploads in FastAPI\nDESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling file uploads in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Initializing Admin APIRouter with Prefix and Dependencies\nDESCRIPTION: Creates an APIRouter for admin routes with a specific prefix, dependencies, and configuration settings for handling administrative endpoints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{!../../docs_src/bigger_applications/app/internal/admin.py!}\n```\n\n----------------------------------------\n\nTITLE: Returning Direct Response Objects in FastAPI\nDESCRIPTION: Example showing how to directly return a Response object with custom content, status code, and headers. This bypasses model validation but gives complete control over the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"\n    <?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        Apply shampoo here.\n    </Header>\n    <Body>\n        You'll have to use soap here.\n    </Body>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Object with Cookies in FastAPI\nDESCRIPTION: Shows how to create and return a Response object directly with cookies set. This method provides more direct control over the response, including setting cookies before returning.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Creating and returning a Response with cookies\ndef create_response_with_cookies():\n    response = JSONResponse(content={\"message\": \"Hello World\"})\n    response.set_cookie(key=\"session_id\", value=\"123456\")\n    return response\n```\n\n----------------------------------------\n\nTITLE: Define .env file\nDESCRIPTION: This bash code snippet shows an example `.env` file containing environment variables for configuration settings like admin email and application name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n\"ADMIN_EMAIL=\\\"deadpool@example.com\\\"\\nAPP_NAME=\\\"ChimichangApp\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Dict Responses in FastAPI\nDESCRIPTION: Demonstrates how to declare a response using an arbitrary dictionary with defined key and value types, useful when field names are not known in advance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Basic Auth with FastAPI\nDESCRIPTION: This snippet demonstrates the basic implementation of HTTP Basic Authentication in FastAPI. It imports HTTPBasic and HTTPBasicCredentials, creates a security scheme using HTTPBasic, and uses the security scheme as a dependency in a route operation. The operation returns an HTTPBasicCredentials object containing the username and password sent by the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/items/\")\ndef read_items(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Cookie Parameters in FastAPI Python\nDESCRIPTION: This code demonstrates how to declare a cookie parameter in a FastAPI route function. It uses the Cookie class to define an optional string parameter named 'ads_id'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n```\n\n----------------------------------------\n\nTITLE: FastAPI Integrating Callback Router into Main Path Operation\nDESCRIPTION: This snippet shows how to integrate the callback router's routes into the main API's path operation. By passing the `.routes` attribute of the callback router to the `callbacks` argument in the `@app.post` decorator, the callback API documentation is included in the main API's documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import APIRouter, FastAPI, Query\nfrom pydantic import BaseModel, Url\n\napp = FastAPI()\n\n\ninvoices_callback_router = APIRouter()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\n@invoices_callback_router.post(\"/invoices/{$request.body.id}\", response_model=InvoiceEventReceived)\nasync def invoice_callback(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url = Query(\n        ...,\n        description=\"URL to send notifications when the invoice is processed.\",\n    ),\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring List Type with Type Hint in Python 3.9+\nDESCRIPTION: This example shows how to declare a variable as a list of strings using type hints in Python 3.9 and above.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nitems: list[str] = [\"Foo\", \"Bar\", \"Baz\"]\n```\n\n----------------------------------------\n\nTITLE: Pydantic v2: Defining Settings with BaseSettings\nDESCRIPTION: This code snippet defines a `Settings` class using Pydantic's `BaseSettings` to automatically load configuration from environment variables. It defines attributes `app_name`, `admin_email`, and `items_per_user` with type annotations and default values. Pydantic automatically maps environment variables (e.g., `APP_NAME`) to corresponding attributes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom pydantic import BaseSettings, EmailStr\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: EmailStr\n    items_per_user: int = 50\n\n\n    class Config:\n        env_file = \".env\"\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Swagger UI Parameters\nDESCRIPTION: Example of how to override default Swagger UI parameters, specifically disabling deepLinking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"deepLinking\": False}\n)\n```\n\n----------------------------------------\n\nTITLE: Combining response_class with Direct Response Return in FastAPI\nDESCRIPTION: This example shows how to both document the response type in OpenAPI using response_class while still returning a direct Response object for more control.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=content)\n    \n    # Could also do:\n    # return content\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with Direct Response Object in FastAPI\nDESCRIPTION: This example demonstrates how to set custom headers by creating and returning a Response object directly in a FastAPI path operation function. This method allows for more control over the response, including status code and content.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-headers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Defining Hero Update Model in Python\nDESCRIPTION: Implements a HeroUpdate model with optional fields for updating hero information. All fields have None as default value to make them optional during updates.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom XML Response in FastAPI\nDESCRIPTION: This snippet demonstrates how to return a custom XML response in FastAPI by manually creating a Response object. It showcases the flexibility of FastAPI in returning various content types without enforcing any data validation or conversion.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom starlette.responses import Response\n\napp = FastAPI()\n\n@app.get(\"/custom-xml\")\nasync def get_custom_xml():\n    xml_content = \"<note><body>Hello, XML!</body></note>\"\n    return Response(content=xml_content, media_type=\"application/xml\")\n```\n\n----------------------------------------\n\nTITLE: Shutdown Event Handler in FastAPI\nDESCRIPTION: This snippet shows how to define a shutdown event handler in FastAPI using the `@app.on_event(\"shutdown\")` decorator. The decorated function will be executed once when the application is shutting down. This example writes a line to a log file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.on_event(\\\"shutdown\\\")\\ndef shutdown_event():\\n    with open(\\\"log.txt\\\", mode=\\\"a\\\") as f:\\n        f.write(\\\"Application shutdown\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Returning item details in FastAPI endpoint\nDESCRIPTION: Returns a dictionary containing the 'item_name' and 'item_id' for a specified item upon GET request, utilizing FastAPI's automatic response generation features.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Using Function Names as Operation IDs in FastAPI\nDESCRIPTION: This snippet demonstrates how to use the names of path operation functions as operation IDs in OpenAPI. It involves iterating through the API's path operations and setting their `operation_id` based on the function's name, ensuring uniqueness across all operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfor route in app.routes:\n    if hasattr(route, 'name'):\n        route.operation_id = route.name\n```\n\n----------------------------------------\n\nTITLE: Async Route Handler Definition in FastAPI\nDESCRIPTION: Implementation of an async route handler that uses await to call async functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse to stream files in FastAPI\nDESCRIPTION: Demonstrates how to use FileResponse to asynchronously stream a file as a response. FileResponse automatically includes appropriate Content-Length, Last-Modified, and ETag headers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef main():\n    return FileResponse(\"large-file.txt\")\n\n```\n\n----------------------------------------\n\nTITLE: Response Model Basic Configuration\nDESCRIPTION: Demonstrates how to define and use response models using Pydantic models in FastAPI endpoints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse_model = UserOut\n```\n\n----------------------------------------\n\nTITLE: Partial Update with PATCH and Pydantic exclude_unset\nDESCRIPTION: Illustrates how to perform partial updates using PATCH method and Pydantic's exclude_unset parameter to generate dict with only set values\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nitem.dict(exclude_unset=True)\n```\n\n----------------------------------------\n\nTITLE: Definindo Modelos de Entrada e Saída em FastAPI\nDESCRIPTION: Exemplo de definição de modelos Pydantic separados para entrada e saída de dados em uma API FastAPI, incluindo um campo sensível (senha) apenas no modelo de entrada.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, EmailStr\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n@app.post(\"/user/\", response_model=UserOut)\ndef create_user(user: UserIn) -> Any:\n    return user\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dependency Function in FastAPI\nDESCRIPTION: Demonstrates a simple dependency function that accepts optional query parameters and returns a dictionary of common parameters. Showcases how dependencies can be used to extract and standardize input parameters across different route handlers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Including APIRouter in Another APIRouter - FastAPI - Python\nDESCRIPTION: This snippet demonstrates how to include one APIRouter inside another in a FastAPI application using the include_router method. This allows for the organization of routes and modularization of code within the FastAPI app. Ensure that this operation is performed before integrating the main router into the FastAPI app to establish the correct routing hierarchy.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nrouter.include_router(other_router)\n```\n\n----------------------------------------\n\nTITLE: Verifying Credentials in HTTP Basic Authentication\nDESCRIPTION: This snippet demonstrates how to securely verify username and password in HTTP Basic Authentication using the secrets module. It includes protection against timing attacks.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport secrets\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect email or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return {\"username\": credentials.username, \"password\": credentials.password}\n```\n\n----------------------------------------\n\nTITLE: Usando response_model em Decorador de Rota FastAPI\nDESCRIPTION: Demonstração do uso do parâmetro response_model no decorador de rota FastAPI para especificar o modelo de resposta.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/users/\", response_model=UserOut)\ndef create_user(user: UserIn) -> Any:\n    return user\n\n@app.get(\"/items/\", response_model=List[Item])\ndef read_items():\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Float Validation with Range Constraints\nDESCRIPTION: Demonstrates how to validate float values with specific range constraints using gt and lt parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsize: Annotated[float, Query(gt=0, lt=10.5)] = 1\n```\n\n----------------------------------------\n\nTITLE: Adding Type Hints to Function Parameters\nDESCRIPTION: Demonstrates adding type hints to function parameters to improve editor autocomplete and type checking\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef get_full_name(first_name: str, last_name: str):\n    return f\"{first_name.title()} {last_name.title()}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a GET request in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define a GET request operation in FastAPI using the `@app.get()` decorator. It defines a function `read_url` that returns a JSON object with a message.  This example is contrasted with the Requests library's syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameter with Default List Values in FastAPI\nDESCRIPTION: This snippet shows how to declare a query parameter that accepts multiple values and has a default list of values if none are provided.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[list[str], Query()] = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jinja2Templates in FastAPI\nDESCRIPTION: Python code snippet showing how to set up Jinja2Templates in a FastAPI application, including importing necessary modules, creating a templates object, and defining a route that uses template rendering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/templates/tutorial001.py hl[4,11,15:18] *}\n```\n\n----------------------------------------\n\nTITLE: Using Await in an Asynchronous Function\nDESCRIPTION: Demonstration of using the await keyword to call an asynchronous function and wait for its result.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nburgers = await get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads\nDESCRIPTION: Shows how to accept multiple file uploads simultaneously by defining parameters as lists of bytes or UploadFile objects.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Dependency Declaration\nDESCRIPTION: Demonstrates a concise way of declaring class dependencies using Depends() without repeating the class name\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncommons: Annotated[CommonQueryParams, Depends()]\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional OpenAPI URL in FastAPI (Python)\nDESCRIPTION: This snippet shows how to use Pydantic BaseSettings to define a configurable OpenAPI URL. It allows disabling the OpenAPI documentation by setting an environment variable.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = FastAPI(openapi_url=settings.openapi_url)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dockerfile for FastAPI Application Using Official Image\nDESCRIPTION: A simple Dockerfile that uses the official tiangolo/uvicorn-gunicorn-fastapi image as a base. It copies the requirements file, installs dependencies, and copies the application code into the container.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\n----------------------------------------\n\nTITLE: User Authentication and Authorization Flow\nDESCRIPTION: Implement functions to retrieve current user, validate active status, and manage authentication states\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Using HTTPS Redirect Middleware - Python\nDESCRIPTION: This section refers to the `HTTPSRedirectMiddleware` which enforces that all incoming requests must be secure (`https` or `wss`). Any request made via insecure protocols will be redirected to the secure scheme.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Middleware implementation goes here\n```\n\n----------------------------------------\n\nTITLE: Mounting Static Files with FastAPI\nDESCRIPTION: This code snippet demonstrates how to include and mount a `StaticFiles` instance in a FastAPI application to serve static files from a specified directory. It imports necessary modules and defines the application and mounting point for the static files.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/static-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\\nfrom fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles\n\napp = FastAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn with standard dependencies\nDESCRIPTION: Command to install Uvicorn with its recommended standard dependencies including uvloop, which provides performance improvements for asyncio-based applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"uvicorn[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Using Docstrings for Description in FastAPI\nDESCRIPTION: This snippet shows how to use a docstring to provide a description for a FastAPI path operation. FastAPI automatically reads the docstring of the path operation function and uses it as the description. Markdown within the docstring is correctly interpreted and displayed in the documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(name: str):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: Each item must have a name\n    - description: A long description\n    - price: Must be non-negative\n    - tax: If the item is taxable\n    \"\"\"\n    return {\"name\": name}\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Directly in FastAPI\nDESCRIPTION: This snippet demonstrates how to return a Response object directly in a FastAPI route. It uses RedirectResponse as an example, which is a subclass of Response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: FastAPI Path Operation with Request Body\nDESCRIPTION: Demonstrates declaring a FastAPI endpoint that accepts a request body using the Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n```\n\n----------------------------------------\n\nTITLE: Using a Pydantic Model as Path Operation Input Parameter in FastAPI\nDESCRIPTION: A code example showing how to use a Pydantic model as an input parameter in a FastAPI path operation. The model's description field is not required for input because it has a default value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Body Parameters in FastAPI (Python)\nDESCRIPTION: Shows how to define multiple body parameters ('item' and 'user') in a FastAPI route function, along with a query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def update_item(\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n):\n```\n\n----------------------------------------\n\nTITLE: Defining a Dependency Function in Python\nDESCRIPTION: Creates a simple dependency function that handles common query parameters. It demonstrates the basic structure of a FastAPI dependency.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef common_parameters(q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Creating a Callable Instance with __call__ Method in Python for FastAPI Dependencies\nDESCRIPTION: This code snippet shows how to make a class instance callable by implementing the `__call__` method, which FastAPI will use to check parameters and subdependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: Union[str, None] = None):\n        if q:\n            return self.fixed_content in q\n        return False\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Query Parameters in FastAPI (Python 3.9+)\nDESCRIPTION: This snippet shows how to declare a required query parameter with validations using Annotated and Query in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Required Query Parameter with Ellipsis\nDESCRIPTION: Making a query parameter required using the Ellipsis (...) syntax in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = Query(default=..., min_length=3)\n```\n\n----------------------------------------\n\nTITLE: Defining a Pydantic Model in Python 3.10+\nDESCRIPTION: This code snippet defines a Pydantic model using Python 3.10 syntax. Pydantic is used for data validation and serialization.  The `User` model has `id`, `name`, and `signup_ts` fields with specified types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = 'John Doe'\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, '2', b'3'],\n}\n\nuser = User(**external_data)\nprint(user.id)\nprint(user.friends)\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based Dependency in FastAPI Path Operation\nDESCRIPTION: This snippet shows how to use the `CommonQueryParams` class as a dependency in a FastAPI path operation. FastAPI will automatically create an instance of the class and inject it into the path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    return commons\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Relative Import from Current Package\nDESCRIPTION: Demonstrates importing a module using a single dot (.) from the current package, searching in the same directory\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom .dependencies import get_token_header\n```\n\n----------------------------------------\n\nTITLE: Python Function with Simple Type Hints\nDESCRIPTION: This Python function `process_items` demonstrates the use of simple type hints for standard Python types like `int`, `float`, `bool`, and `bytes`. It receives parameters with specified types and returns a string that includes these values. It helps ensure type consistency and improves code clarity.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"def process_items(amount: int, price: float, is_offer: bool, encoded: bytes):\n    return f\\\"{amount} {price} {is_offer} {encoded}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Additional Response with Pydantic Model in FastAPI\nDESCRIPTION: Example of declaring an additional response with status code 404 and a Pydantic model 'Message' in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    responses={404: {\"model\": Message, \"description\": \"Additional Response\"}},\n    response_model=Item,\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Python\nDESCRIPTION: Demonstrates how to read environment variables in Python using os.getenv() with a default fallback value. The code shows reading a MY_NAME variable and printing it with string formatting.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Response Parameter in FastAPI\nDESCRIPTION: Demonstrates how to set cookies by declaring a Response parameter in a path operation function. This allows adding cookies to a temporary response object before returning the main response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Path operation function with Response parameter\ndef set_cookie_with_response(response: Response):\n    response.set_cookie(key=\"cookie_name\", value=\"cookie_value\")\n    return {\"message\": \"Cookie set successfully\"}\n```\n\n----------------------------------------\n\nTITLE: Pure List Body in FastAPI\nDESCRIPTION: This example demonstrates how to accept a JSON list (array) directly as the request body in FastAPI.  It defines a function that takes a `List[Image]` as a parameter, where `Image` is a Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/\")\nasync def create_images(images: List[Image]):\n    return images\"\n```\n\n----------------------------------------\n\nTITLE: Returning Response Objects with Headers Directly in FastAPI (Python)\nDESCRIPTION: Demonstrates how to add headers when returning a Response object directly in FastAPI. This approach allows setting headers as an additional parameter when creating the response object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-headers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameters in FastAPI\nDESCRIPTION: This example demonstrates how to declare an optional query parameter 'q' by setting its default value to None. FastAPI automatically recognizes it as a query parameter distinct from the path parameter 'item_id'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(item_id: str, q: str | None = None):\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Required Value\nDESCRIPTION: This snippet demonstrates how to make a query parameter required by not providing a default value to the `Query` function. If the client does not provide a value for this parameter, FastAPI will return an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameters in FastAPI\nDESCRIPTION: This snippet shows how to declare query parameters in a FastAPI route function. The 'skip' and 'limit' parameters are automatically interpreted as query parameters with default values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(skip: int = 0, limit: int = 10):\n```\n\n----------------------------------------\n\nTITLE: Caching OpenAPI Schema in FastAPI\nDESCRIPTION: This snippet demonstrates how to cache the generated OpenAPI schema within the FastAPI application instance. This prevents the application from re-generating the schema on every request, improving performance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"    app.openapi_schema = openapi_schema\\n    return app.openapi_schema\"\n```\n\n----------------------------------------\n\nTITLE: Importing Path and Annotated in FastAPI\nDESCRIPTION: Shows how to import the necessary Path component from FastAPI and Annotated from typing for path parameter validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Mounting WSGI Flask Application in FastAPI using WSGIMiddleware\nDESCRIPTION: Demonstrates how to wrap a Flask application using WSGIMiddleware and mount it under a specific path in a FastAPI application\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/wsgi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.wsgi import WSGIMiddleware\nfrom flask import Flask\n\nflask_app = Flask(__name__)\n@flask_app.route(\"/\")\ndef flask_route():\n    return \"Hello, World from Flask!\"\n\napp = FastAPI()\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than or Equal in FastAPI\nDESCRIPTION: This snippet illustrates how to use numeric validation with `Path`. Specifically, it uses `ge=1` to ensure that the `item_id` path parameter is an integer greater than or equal to 1.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(\\n    item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str | None = None\\n):\\n    return {\"item_id\": item_id, \"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation URLs - Python\nDESCRIPTION: This code snippet demonstrates how to configure the URLs for the Swagger UI and ReDoc documentation interfaces in FastAPI. It shows how to set the `docs_url` and `redoc_url` parameters to customize where these interfaces are served or to disable them completely by setting them to `None`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n\n```\n\n----------------------------------------\n\nTITLE: FastAPI shortcut with Depends() for classes\nDESCRIPTION: This code demonstrates a shortcut in FastAPI for class-based dependencies.  When the dependency is explicitly a class, FastAPI can infer the dependency and create an instance. This means you can just use `Depends()` instead of `Depends(CommonQueryParams)` when a type annotation is present.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Simple Type Hints for Primitive Types\nDESCRIPTION: Shows type hints for basic Python types like int, float, bool, and bytes\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef process_data(value: int, flag: bool, size: float, data: bytes):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Declaring Form parameters in FastAPI\nDESCRIPTION: Example of declaring form parameters using the Form class in a FastAPI route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def login(username: str = Form(...), password: str = Form(...))\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in Exception Handler with Custom Route Class in FastAPI\nDESCRIPTION: This code snippet shows how to implement a custom route handler that wraps the request processing in a try/except block to access the request body when handling exceptions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def custom_route_handler(request: Request) -> Response:\n    try:\n        return await original_route_handler(request)\n    except Exception as exc:\n        body = await request.body()\n        print(f\"Error: {exc}\\nRequest body: {body}\")\n        raise\n```\n\n----------------------------------------\n\nTITLE: Deleting a Hero\nDESCRIPTION: This snippet demonstrates deleting a hero by ID. The endpoint retrieves a hero, deletes it from the database, and commits the changes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.delete(\"/heroes/{hero_id}\")\nasync def delete_hero(hero_id: int, db: Session = Depends(get_db)):\n    hero = db.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    db.delete(hero)\n    db.commit()\n    return {\"ok\": True}\"\n```\n\n----------------------------------------\n\nTITLE: Reordering Parameters in FastAPI\nDESCRIPTION: This snippet shows how FastAPI allows reordering of parameters, even when some parameters have default values and others don't.  FastAPI detects parameters by name, type annotations, and default declarations (like `Query`, `Path`).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(\\n    item_id: int = Path(title=\"The ID of the item to get\"), q: str\\n):\\n    return {\"item_id\": item_id, \"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse for Improved Performance in FastAPI\nDESCRIPTION: Example showing how to use ORJSONResponse for better performance with large responses. This replaces the default JSONResponse with the faster orjson library implementation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Implementing GzipRequest Class for Decompressing Gzip-encoded Bodies in FastAPI\nDESCRIPTION: This code snippet creates a custom GzipRequest class that overrides the Request.body() method to decompress the request body if an appropriate gzip header is present. This allows transparent handling of gzip-compressed request bodies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n```\n\n----------------------------------------\n\nTITLE: Resetting Dependency Overrides in FastAPI - Python\nDESCRIPTION: This snippet demonstrates how to reset all dependency overrides by setting `app.dependency_overrides` to an empty dictionary. This is useful for ensuring that overrides used in one test do not affect other tests. There are no special dependencies or parameters needed; it simply requires access to the FastAPI application object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.dependency_overrides = {}\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than and Less Than or Equal\nDESCRIPTION: Shows how to use gt (greater than) and le (less than or equal) constraints with Path for path parameter validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Returning Access Token in FastAPI\nDESCRIPTION: This snippet demonstrates how to return a JSON response containing the `access_token` and `token_type`. In this example, the username is used as the access token for simplicity.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n    return {\"access_token\": user[\"username\"], \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Using a Parameterized Instance as a Dependency in FastAPI\nDESCRIPTION: This code demonstrates how to use the parameterized instance as a dependency in a FastAPI route. The dependency returns a boolean indicating whether the fixed content is included in the query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n```\n\n----------------------------------------\n\nTITLE: Importing Field from Pydantic\nDESCRIPTION: Demonstrates how to import the Field class from Pydantic for adding validations and metadata to model attributes\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\n```\n\n----------------------------------------\n\nTITLE: Async Route with Async Call\nDESCRIPTION: Complete example showing an async route handler that makes an async call to get data\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Path Order Matters in FastAPI\nDESCRIPTION: This example illustrates the importance of path order when defining routes in FastAPI. The more specific route `/users/me` should be defined before the route with a path parameter `/users/{user_id}`. Otherwise, FastAPI will interpret 'me' as the `user_id`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n```\n\n----------------------------------------\n\nTITLE: Combining Required, Optional, and Default Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to combine required query parameters (`needy`), optional query parameters (`limit`), and query parameters with default values (`skip`). FastAPI handles all of these cases seamlessly based on the function signature.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n```\n\n----------------------------------------\n\nTITLE: Type-Annotated Path Parameters with Integer Validation\nDESCRIPTION: Shows how to declare path parameters with type hints for automatic type conversion and validation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Yield Dependencies\nDESCRIPTION: Example showing proper exception handling in yield dependencies\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_db():\n    db = DBSession()\n    try:\n        yield db\n    except InternalError as e:\n        print(\"Error occurred\")\n        raise\n```\n\n----------------------------------------\n\nTITLE: Returning OAuth2 Token in FastAPI\nDESCRIPTION: This code snippet demonstrates how to return an OAuth2 token in the response. It includes the access token and token type as required by the OAuth2 specification.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"access_token\": user.username, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with List Type\nDESCRIPTION: This code shows how to define a query parameter that accepts a list of values. By declaring the parameter as a `list` and using `Query`, FastAPI automatically handles multiple values for the same parameter name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query()):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Mixing Body Parameters and Query Parameters in FastAPI (Python)\nDESCRIPTION: Demonstrates how to mix body parameters with query parameters in a FastAPI route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def update_item(\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n```\n\n----------------------------------------\n\nTITLE: Defining CMD for Running Uvicorn Server in Dockerfile\nDESCRIPTION: This snippet sets the command to start the Uvicorn server for a FastAPI application within a Docker container. It specifies the host, port, and application module to run.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Enum Path Parameter Definition\nDESCRIPTION: Uses Python Enum to define pre-defined values for path parameters with automatic documentation and validation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n@app.get(\"/models/{model_name}\")\ndef get_model(model_name: ModelName):\n    return {\"model_name\": model_name}\n```\n\n----------------------------------------\n\nTITLE: Using Status Code Convenience Variables in FastAPI\nDESCRIPTION: This example demonstrates how to use convenience variables from fastapi.status to set the HTTP status code (201 Created) for a POST request, improving code readability and maintainability.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, status\n\napp = FastAPI()\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables in Linux/macOS/Windows Bash\nDESCRIPTION: Linux, macOS 또는 Windows Bash 환경에서 환경 변수를 생성하고 사용하는 방법을 보여줍니다. export 명령어를 사용하여 변수를 설정하고 $로 접근합니다.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n```\n\n----------------------------------------\n\nTITLE: Defining dependencies with request requirements in FastAPI\nDESCRIPTION: Illustrates how path decorator dependencies can declare request requirements (e.g., response headers) or other sub-dependencies. The `get_token_header` and `get_key` functions are defined as dependencies, with the former requiring a specific response header and the latter being called by the path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"async def get_token_header(x_token: str = Header()):\\n    if x_token != \\\"fixed-token\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\\n    return x_token\\n\\nasync def get_key(x_key: str = Header()):\\n    if x_key != \\\"fixed-key\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\\n    return x_key\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", dependencies=[Depends(get_token_header), Depends(get_key)])\\nasync def read_items(item_id: str):\\n    return {\"item_id\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Response Type with Type Annotation in FastAPI\nDESCRIPTION: This snippet shows how to declare the response type for a FastAPI route using a type annotation on the function return.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\")\ndef read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Declaring Header Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare a header parameter named `User-Agent` with a default value and how to access it within a FastAPI path operation. The `Header` class is used to define the header parameter, and the value is automatically converted from underscores to hyphens.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Python 3.10+\nDESCRIPTION: Example of defining a function with an optional parameter in Python 3.10+, using the | syntax for union types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pydantic User Model for Authentication\nDESCRIPTION: Defining a Pydantic model to represent user data with strongly typed attributes for secure user representation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass User(BaseModel):\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Multiple Path and Query Parameters in FastAPI\nDESCRIPTION: This example illustrates how to use multiple path and query parameters in a single FastAPI route. The framework correctly identifies each parameter type based on its declaration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_user_item(user_id: int, item_id: str, q: str | None = None, short: bool = False):\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Query Parameters in FastAPI\nDESCRIPTION: This snippet shows how to declare a required query parameter in FastAPI. By not providing a default value, FastAPI will enforce that the `needy` parameter is included in the request. If it's missing, FastAPI will return an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI with Python\nDESCRIPTION: This snippet shows how to instantiate Pydantic models with direct value assignment and dictionary unpacking. It demonstrates creating instances of the `User` model with both explicitly defined values and data from a dictionary, leveraging the `**` operator for dictionary unpacking to match model field names.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Merging Predefined and Custom Responses in FastAPI\nDESCRIPTION: Demonstrates how to combine predefined response dictionaries with custom responses using Python dictionary unpacking. This allows reusing common response definitions across multiple endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}})\nasync def read_item(item_id: str, img: bool = False):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Function with Await\nDESCRIPTION: Demonstrates how to create an asynchronous function that returns burgers. This example shows the basic pattern for defining functions that can be awaited by other async functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_burgers(number: int):\n    # Do some asynchronous stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Combining response_class with Direct Response Return in FastAPI\nDESCRIPTION: Shows how to document the response type in OpenAPI using response_class while still directly returning a custom Response object for more flexibility.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n```\n\n----------------------------------------\n\nTITLE: Using Annotated for Type Hints with Metadata (Python 3.9+)\nDESCRIPTION: Example of using Annotated to add metadata to type hints in Python 3.9+.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\ndef say_hello(name: Annotated[str, \"This is just metadata\"]):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Scope Verification Dependency\nDESCRIPTION: Implement a dependency function that validates user token scopes against required permissions using SecurityScopes\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_user(\n    security_scopes: SecurityScopes,\n    token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=401,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value}\n    )\n```\n\n----------------------------------------\n\nTITLE: Required Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare a required query parameter 'needy' by not providing a default value. It also includes an optional parameter 'skip' with a default value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameter Metadata in FastAPI\nDESCRIPTION: This snippet shows how to define metadata, such as `title`, for a path parameter using `Path` in FastAPI. The path parameter is always required and should be declared with `...` to indicate this.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\")]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GzipRoute Class in FastAPI\nDESCRIPTION: This snippet implements a custom APIRoute subclass that uses the GzipRequest class. It overrides the get_route_handler() method to replace the standard Request with the custom GzipRequest, enabling automatic decompression of gzip-encoded request bodies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Injectable Dependency in FastAPI\nDESCRIPTION: This snippet shows how to create a basic injectable dependency that extracts an optional query parameter 'q' and returns it.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def query_extractor(q: str | None = None):\n    return q\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart for File and Form Handling in FastAPI\nDESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling file uploads and form data in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Returning Custom XML Response in FastAPI\nDESCRIPTION: This example shows how to return a custom XML response by creating the content as a string and wrapping it in a Response object with the appropriate media type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: str):\n    content = f\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<item>\n    <id>{item_id}</id>\n    <value>Foo</value>\n</item>\n    \"\"\"\n    return Response(content=content, media_type=\"application/xml\")\n```\n\n----------------------------------------\n\nTITLE: Pydantic v1: Defining Settings with BaseSettings\nDESCRIPTION: This code snippet defines a `Settings` class using Pydantic's `BaseSettings` to automatically load configuration from environment variables, compatible with Pydantic v1. It defines attributes `app_name`, `admin_email`, and `items_per_user` with type annotations and default values. Pydantic automatically maps environment variables (e.g., `APP_NAME`) to corresponding attributes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Optional\n\nfrom pydantic import BaseSettings, EmailStr\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: EmailStr\n    items_per_user: int = 50\n\n\n    class Config:\n        env_file = \".env\"\n```\n\n----------------------------------------\n\nTITLE: Reducing Duplication with Pydantic Model Inheritance\nDESCRIPTION: Shows how to use model inheritance to avoid code duplication when working with multiple related models. A base model defines common attributes while subclasses add specific fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return f\"supersecret{raw_password}\"\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\napp = FastAPI()\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n```\n\n----------------------------------------\n\nTITLE: FastAPI: Token Dependency\nDESCRIPTION: This code snippet shows how a path operation function receives a token as a string using the dependency injection system in FastAPI. The security system provides a token to the function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\\\"/items/\\\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GzipRoute Class in Python\nDESCRIPTION: Defines a custom GzipRoute class that extends APIRoute to use the GzipRequest. It overrides the get_route_handler() method to create a new handler that uses GzipRequest instead of the default Request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Including APIRouters with Custom Configuration\nDESCRIPTION: Demonstrates adding APIRouters to the main application with custom prefixes, tags, dependencies, and responses\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\napp.include_router(admin.router, \n    prefix=\"/admin\", \n    tags=[\"admin\"], \n    dependencies=[Depends(get_token_header)], \n    responses={418: {\"description\": \"Teapot\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting a default response class in FastAPI\nDESCRIPTION: Shows how to specify a default response class for all path operations in a FastAPI application by using the default_response_class parameter when creating the FastAPI instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/\")\ndef main():\n    return {\"message\": \"Hello World\"}\n\n```\n\n----------------------------------------\n\nTITLE: Configuration as a Dependency (config.py)\nDESCRIPTION: This code defines a `Settings` class in `config.py` without creating a default instance, preparing it to be used as a dependency.  The `Settings` class utilizes Pydantic's `BaseSettings` and `EmailStr` for type validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseSettings, EmailStr\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: EmailStr\n    items_per_user: int = 50\n```\n\n----------------------------------------\n\nTITLE: User Input and Output Models\nDESCRIPTION: Shows creation of separate input and output models with different attributes for secure data handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserIn(BaseModel):\n    username: str\n    password: str\n```\n\n----------------------------------------\n\nTITLE: Setting API Metadata in FastAPI\nDESCRIPTION: This code snippet demonstrates how to set the title and description metadata for a FastAPI application. The `title` parameter sets the API's title, and the `description` parameter sets a brief description. Markdown can be used in the description.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    title=\"My Super Project\",\n    description=\"This is a very fancy project, with auto docs for the API and everything\",\n)\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Header Parameters with Pydantic Model in FastAPI\nDESCRIPTION: This snippet shows how to create a Pydantic model for header parameters and use it in a FastAPI route. It demonstrates the declaration of multiple header parameters within a single model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\nclass HeaderModel(BaseModel):\n    user_agent: str\n    accept_language: str | None = None\n\napp = FastAPI()\n\n@app.get(\"/headers/\")\nasync def get_headers(headers: HeaderModel = Header()):\n    return headers\n```\n\n----------------------------------------\n\nTITLE: Adding Regular Expression Validation to Query Parameter (Python 3.10+)\nDESCRIPTION: Shows how to define a query parameter with a regular expression pattern, enforcing strict matching criteria. This supports advanced validation scenarios in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(regex='^fixedquery$')] = None\n```\n\n----------------------------------------\n\nTITLE: Using Function Names as Operation IDs in FastAPI\nDESCRIPTION: Shows how to use function names as operationIds by overriding the default behavior for all path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.routing import APIRoute\n\ndef use_route_names_as_operation_ids(app: FastAPI) -> None:\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\napp = FastAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"item_id\": \"Foo\"}]\n\nuse_route_names_as_operation_ids(app)\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Directly in FastAPI\nDESCRIPTION: This example shows how to return a Response object directly in a FastAPI route, which is automatically handled by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/portal\")\ndef get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n```\n\n----------------------------------------\n\nTITLE: Form Data Extraction with Pydantic in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define a Pydantic model to represent form data and use it as a parameter in a FastAPI endpoint, allowing FastAPI to automatically extract form data into the Pydantic model. It shows the import statements, the Pydantic model definition, and the FastAPI endpoint that utilizes the model with `Form`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-form-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Form\n\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(\n    item: Annotated[Item, Form(...)],\n):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Database Session Dependency with Yield in Python\nDESCRIPTION: Create a database session dependency that opens a session before path operation and closes it after response is sent\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Using a List of Nested Models\nDESCRIPTION: Declaration of a field that contains a list of Pydantic model instances, allowing for arrays of structured objects in the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimages: list[Image] | None = None\n```\n\n----------------------------------------\n\nTITLE: Importing Depends from FastAPI\nDESCRIPTION: Shows how to import the Depends function from FastAPI, which is used to declare dependencies in path operation functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\n```\n\n----------------------------------------\n\nTITLE: Using Class Dependency with Any Type and Depends\nDESCRIPTION: Example showing how to use a class dependency with Any type annotation, relying on Depends for the actual type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Response Model with Default Values\nDESCRIPTION: Shows a Pydantic model with default values for optional fields, demonstrating how to handle default and unset values in responses\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n```\n\n----------------------------------------\n\nTITLE: Initializing Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to define query parameters in a FastAPI path operation function. The `skip` and `limit` parameters are defined as integers with default values. FastAPI automatically handles parsing and validation based on the type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(skip: int = 0, limit: int = 10):\\n    return {\"skip\": skip, \"limit\": limit}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies by Returning a Response Directly in FastAPI\nDESCRIPTION: This code snippet demonstrates how to set a cookie in a FastAPI route by returning a `Response` object directly. It creates a `Response` object with content and sets a cookie named \"some_cookie\" with a value of \"some_value\".\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Response\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/\")\\nasync def read_root():\\n    content = \"<html><body><h1>Hello, world!</h1></body></html>\"\\n    response = Response(content=content, media_type=\"text/html\")\\n    response.set_cookie(key=\"some_cookie\", value=\"some_value\")\\n    return response\"\n```\n\n----------------------------------------\n\nTITLE: Class as Dependency: Python\nDESCRIPTION: This code demonstrates how to define a class `CommonQueryParams` with parameters `q`, `skip`, and `limit`, and inject it as a dependency using FastAPI. It showcases how FastAPI automatically handles the instantiation and dependency injection of the class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    class CommonQueryParams:\n        def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n            self.q = q\n            self.skip = skip\n            self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Combinando Responses Predefinidos y Personalizados en FastAPI\nDESCRIPTION: Este ejemplo muestra cómo combinar responses predefinidos con responses personalizados en FastAPI utilizando la técnica de desempaquetado de diccionarios de Python.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponses = {\n    302: {\"description\": \"The item was moved\"},\n    404: {\"description\": \"The item was not found\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\n```\n\n----------------------------------------\n\nTITLE: Importing TestClient for FastAPI Testing\nDESCRIPTION: Shows how to import the TestClient class from the fastapi.testclient module. This client allows testing FastAPI applications without creating actual HTTP connections.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/testclient.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n```\n\n----------------------------------------\n\nTITLE: List Field Definition in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a list field in a Pydantic model using FastAPI. It shows a basic example where the type of elements within the list is not explicitly specified, but `tags` is defined as a list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: list = []\"\n```\n\n----------------------------------------\n\nTITLE: Using UploadFile for File Handling in FastAPI\nDESCRIPTION: This code demonstrates how to use the UploadFile class for more advanced file handling in FastAPI, including access to file metadata and asynchronous operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial001_an_py39.py hl[14] *}\n```\n\n----------------------------------------\n\nTITLE: Single-File FastAPI Dockerfile Configuration\nDESCRIPTION: Complete Dockerfile configuration for a single-file FastAPI application, including dependency management and proper file copying.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./main.py /code/\n\nCMD [\"fastapi\", \"run\", \"main.py\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code with Response Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to use a Response parameter in a FastAPI route to change the HTTP status code dynamically. The example creates a new item and returns a 201 CREATED status instead of the default 200 OK, while still utilizing response_model for data filtering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response, status\n\napp = FastAPI()\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item):\n    # 这里假设我们将项目保存到数据库中\n    # 然后获取新ID\n    # 然后返回一个包含ID的新模型\n    return {\"id\": \"foo\", \"name\": item.name, \"description\": item.description}\n\n\n@app.get(\"/items/\", response_model=Item)\nasync def read_item(response: Response):\n    # 假设我们有这种情况，当项目不存在时，我们将创建它\n    # 但我们想用状态码201而不是默认的200来表示项目已创建\n    item = {\"id\": \"foo\", \"name\": \"Foo\", \"description\": \"This item was created\"}\n    response.status_code = status.HTTP_201_CREATED\n    return item\n```\n\n----------------------------------------\n\nTITLE: Defining URL Field with HttpUrl Type\nDESCRIPTION: Using Pydantic's HttpUrl type for the url field to ensure it contains a valid URL string with proper validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nurl: HttpUrl\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Path Operations in FastAPI\nDESCRIPTION: This snippet shows how to add tags to FastAPI path operations.  The `tags` parameter is used with a list of strings to categorize the operations.  These tags are then used in the OpenAPI schema and the interactive documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\n@app.get(\"/models/{model_name}\", tags=[\"models\"])\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n```\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", tags=[\"items\"])\nasync def create_item(name: str):\n    return {\"name\": name}\n```\n\n----------------------------------------\n\nTITLE: Overriding FastAPI OpenAPI Method\nDESCRIPTION: This snippet overrides the default `.openapi()` method of the FastAPI application with the custom function `custom_openapi`. This ensures that the customized OpenAPI schema is used when the documentation endpoint is accessed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"app.openapi = custom_openapi\"\n```\n\n----------------------------------------\n\nTITLE: Basic Database Session Dependency with Yield\nDESCRIPTION: Example of creating and closing a database session using a dependency with yield. The code shows the basic structure of yielding a session and closing it after use.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def get_db():\n    db = DBSession()\n    try:\n        yield db\n        db.close()\n    finally:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Extensions in FastAPI Path Operation\nDESCRIPTION: Demonstrates how to add custom OpenAPI extensions to a path operation using the openapi_extra parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\n```\n\n----------------------------------------\n\nTITLE: Defining a Shutdown Event Handler in FastAPI (Python)\nDESCRIPTION: This snippet shows how to create a shutdown event handler function in FastAPI. The function is decorated with @app.on_event(\"shutdown\") and will be executed when the application is shutting down.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n```\n\n----------------------------------------\n\nTITLE: Importando e Lançando HTTPException em FastAPI\nDESCRIPTION: Demonstra como importar e usar HTTPException para retornar erros HTTP em uma aplicação FastAPI. O exemplo mostra um caso onde um erro 404 é lançado quando um item não é encontrado.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\n\n# ... código omitido ...\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n```\n\n----------------------------------------\n\nTITLE: Deleting Hero Endpoint in FastAPI\nDESCRIPTION: Implements DELETE endpoint to remove a hero from the database by ID.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(*, session: Session = Depends(get_session), hero_id: int):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Attributes with Field Validation\nDESCRIPTION: Demonstrates using Pydantic Field to declare model attributes with validation rules and metadata. Shows validation for item name, description, and price fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    name: str = Field(example=\"Foo\")\n    description: str | None = Field(default=None, example=\"A very nice Item\")\n    price: float = Field(gt=0, description=\"The price must be greater than zero\", example=35.4)\n    tax: float | None = Field(default=None, example=3.2)\n```\n\n----------------------------------------\n\nTITLE: Defining Webhooks in FastAPI Application\nDESCRIPTION: This code snippet demonstrates how to create a FastAPI application with webhooks. It shows the setup of a FastAPI app with a regular endpoint and a webhook definition that uses Pydantic models for request validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/openapi-webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(\n    title=\"My app with webhooks\",\n    description=\"An application with FastAPI webhooks\",\n)\n\n\n# Define the webhook with the \"new-subscription\" identifier\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Item):\n    \"\"\"Webhook for new subscription.\n\n    This webhook is triggered when a new subscription is created.\n    \"\"\"\n    return {\"msg\": \"Notification received\"}\n\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Multiple Workers using the fastapi CLI\nDESCRIPTION: Example command for running a FastAPI application with 4 worker processes using the fastapi CLI. This allows the application to utilize multiple CPU cores and handle more concurrent requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi run --workers 4 main.py\n```\n\n----------------------------------------\n\nTITLE: Returning Direct HTML Response in FastAPI\nDESCRIPTION: Demonstrates how to return an HTML response directly from a FastAPI route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\ndef generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <body>\n            <h1>Hello World</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n```\n\n----------------------------------------\n\nTITLE: Using Inheritance for Type Annotations and Data Filtering in FastAPI\nDESCRIPTION: This snippet demonstrates using class inheritance to get better type support while maintaining FastAPI's data filtering capabilities.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\nclass UserIn(BaseUser):\n    password: str\n\n@app.post(\"/user/\")\ndef create_user(user: UserIn) -> BaseUser:\n    return user\n```\n\n----------------------------------------\n\nTITLE: Using a Nested Model as a Field Type\nDESCRIPTION: Including a nested Pydantic model as a field in another model, allowing for hierarchical data structures in request bodies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimage: Image | None = None\n```\n\n----------------------------------------\n\nTITLE: Declaring Additional Responses with Pydantic Models in FastAPI\nDESCRIPTION: Example of how to declare an additional 404 response with a Pydantic model in a FastAPI endpoint. This snippet shows how to use the 'responses' parameter in the route decorator to define supplementary response types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image Using Official FastAPI Image\nDESCRIPTION: Dockerfile for creating a container based on the tiangolo/uvicorn-gunicorn-fastapi image, installing requirements, and copying application code into the container.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Webhooks\nDESCRIPTION: This code snippet demonstrates how to define webhooks in a FastAPI application. It shows the creation of a webhook named 'new-subscription' that sends a POST request with subscription details when triggered. The webhook is documented in the OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Item):\n    \"\"\"Notify about new subscription.\n\n    Whenever a user creates a new subscription in the system, this webhook\n    will be triggered to notify your system about it.\n\n    You will need to register a URL in the dashboard to receive these\n    notifications.\n    \"\"\"\n    return {\"webhook\": \"new-subscription\", \"body\": body}\n\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.webhooks.post(\"new-item\")\ndef new_item(body: Item):\n    \"\"\"Notify about new item.\n\n    Whenever a user creates a new item in the system, this webhook\n    will be triggered to notify your system about it.\n\n    You will need to register a URL in the dashboard to receive these\n    notifications.\n    \"\"\"\n    return {\"webhook\": \"new-item\", \"body\": body}\n\n\n@app.webhooks.post(\"updated-item\")\ndef updated_item(body: Item):\n    \"\"\"Notify about an updated item.\n\n    Whenever a user updates an item in the system, this webhook\n    will be triggered to notify your system about it.\n\n    You will need to register a URL in the dashboard to receive these\n    notifications.\n    \"\"\"\n    return {\"webhook\": \"updated-item\", \"body\": body}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Path Operation Decorator in FastAPI\nDESCRIPTION: This snippet demonstrates how to add dependencies to a FastAPI path operation decorator using the 'dependencies' parameter. It shows the structure of adding multiple Depends() calls to the decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/users/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n```\n\n----------------------------------------\n\nTITLE: FastAPI PATCH request with Pydantic update\nDESCRIPTION: This snippet shows how to handle a partial update request using the HTTP `PATCH` method in FastAPI. It utilizes the `exclude_unset` parameter to extract only the updated fields from the request and then uses the `copy` method with the `update` parameter to update an existing item, ensuring that only the provided fields are modified.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n    stored_item_data = stored_items[item_id]\n    stored_item_model = Item(**stored_item_data)\n\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n\n    stored_items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple UploadFile Objects\nDESCRIPTION: Demonstrates how to handle multiple file uploads using a list of UploadFile objects, which provides more flexibility and metadata.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n```\n\n----------------------------------------\n\nTITLE: ReDoc HTML Generation Function in FastAPI\nDESCRIPTION: Function to generate ReDoc HTML documentation page from OpenAPI specifications. Provides alternative documentation interface to Swagger UI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_redoc_html\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Validations to Query Parameters in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet demonstrates how to add multiple validations (min_length and max_length) to a query parameter using Annotated and Query in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50)] = None):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Defining File and Form Parameters in FastAPI\nDESCRIPTION: This code demonstrates how to define parameters for file uploads and form data in a FastAPI route. It shows the use of File and Form decorators to specify the expected input types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form()):\n```\n\n----------------------------------------\n\nTITLE: Python Context Manager Example\nDESCRIPTION: This demonstrates using a Python context manager to handle file operations. The `with` statement ensures that the file is automatically closed, even if exceptions occur. `open('./somefile.txt')` returns an object that implements the context manager protocol (__enter__ and __exit__ methods)\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"with open(\"./somefile.txt\") as f:\\n    contents = f.read()\\n    print(contents)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in FastAPI Middleware\nDESCRIPTION: This code snippet demonstrates how to add a custom header (X-Process-Time) to the response within a FastAPI middleware.  It measures the time taken to process the request by recording the start and end times using `time.time()`.  The measured processing time is then added as a string to the response headers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"    start_time = time.time()\\n    response = await call_next(request)\\n    process_time = time.time() - start_time\\n    response.headers[\\\"X-Process-Time\\\"] = str(process_time)\"\n```\n\n----------------------------------------\n\nTITLE: List Response with typing.List\nDESCRIPTION: Declaring responses that return lists of objects using Python's typing.List\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n\ndef get_items() -> List[Item]:\n    # Implementation logic\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Body\nDESCRIPTION: Shows sample JSON request body formats that match the Pydantic model structure.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Foo\",\n    \"description\": \"An optional description\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n```\n\n----------------------------------------\n\nTITLE: Update /token path operation to return JWT\nDESCRIPTION: This code snippet updates the `/token` path operation to create and return a JWT access token upon successful authentication. It sets the expiration time for the token and returns it in the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom datetime import timedelta\n\n\n\napp = FastAPI()\n\n\n@app.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=401,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user[\"username\"]},\n        expires_delta=access_token_expires,\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Creating an APIRouter for OpenAPI Callbacks\nDESCRIPTION: This snippet demonstrates how to create an APIRouter instance specifically for defining OpenAPI callbacks.  It allows to document the expected structure of an external API by creating a router and defining routes for the callback.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ninvoices_callback_router = APIRouter()\n```\n\n----------------------------------------\n\nTITLE: Importing Path and Annotated in FastAPI\nDESCRIPTION: This snippet demonstrates how to import the `Path` class from `fastapi` and `Annotated` from `typing` which is required for defining path parameters with validations and metadata in FastAPI. `Annotated` support was added in FastAPI version 0.95.0 and is the recommended approach.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\"\n```\n\n----------------------------------------\n\nTITLE: List of nested models in Pydantic\nDESCRIPTION: This snippet shows how to define a list of `Image` models as a type annotation for the `images` field in another Pydantic model, enabling validation of lists containing nested objects.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"images: list[Image] | None = None\"\n```\n\n----------------------------------------\n\nTITLE: Returning JSONResponse with Encoded Data in FastAPI\nDESCRIPTION: This snippet demonstrates how to use jsonable_encoder to convert data to a JSON-compatible format and return it as a JSONResponse in a FastAPI route handler.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/{id}\")\ndef read_item(id: str):\n    item = {\"id\": id, \"value\": \"Foo\"}\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n```\n\n----------------------------------------\n\nTITLE: Updating Hero Endpoint in FastAPI\nDESCRIPTION: Implements PATCH endpoint to update hero information using HeroUpdate model, with support for partial updates.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    *,\n    session: Session = Depends(get_session),\n    hero_id: int,\n    hero: HeroUpdate,\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Disconnections\nDESCRIPTION: Demonstrates how to handle WebSocket disconnections using a try-except block. It captures the `WebSocketDisconnect` exception and handles it gracefully, which is useful for cleaning up resources or notifying other clients in a chat application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\nhtml = \\\"\\\"\\\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\\\"\\\" onsubmit=\\\"sendMessage(event)\\\">\n            <input type=\\\"text\\\" id=\\\"messageText\\\" autocomplete=\\\"off\\\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\\\"ws://localhost:8000/ws\\\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\\\"messageText\\\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\\\"\\\"\\\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nmanager = ConnectionManager()\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{websocket.client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{websocket.client_id} left the chat\")\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n        websocket.client_id = id(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"    except WebSocketDisconnect:\n        manager.disconnect(websocket)\"\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse with File-like Objects in FastAPI\nDESCRIPTION: Demonstrates how to use StreamingResponse with file-like objects in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\nimport csv\nimport io\n\napp = FastAPI()\n\ndef iter_csv(data):\n    with io.StringIO() as buffer:\n        writer = csv.writer(buffer)\n        writer.writerows(data)\n        yield from buffer.getvalue()\n\n@app.get(\"/\")\ndef get_csv():\n    data = [[\"A\", \"B\"], [1, 2]]\n    return StreamingResponse(\n        iter_csv(data),\n        media_type=\"text/csv\",\n        headers={\"Content-Disposition\": \"attachment; filename=some_file.csv\"}\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Application Code\nDESCRIPTION: Simple FastAPI application with two endpoints - a root endpoint returning Hello World and an items endpoint accepting an ID and optional query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Depends in FastAPI Route\nDESCRIPTION: Shows how to import the Depends class and use it to inject dependencies into route functions with automatic parameter resolution\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\n\n@app.get(\"/items/\")\ndef read_items(commons: dict = Depends(common_parameters)):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI application with Uvicorn\nDESCRIPTION: This command starts the FastAPI application using Uvicorn, an ASGI server.  The `--reload` flag enables automatic reloading of the server upon code changes, which is useful for development.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI Configuration in FastAPI\nDESCRIPTION: The default Swagger UI configuration parameters used by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nswagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Using response_model Parameter in FastAPI Route Decorator\nDESCRIPTION: This example demonstrates how to use the response_model parameter in a FastAPI route decorator to specify the response model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", response_model=List[Item])\ndef read_items():\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic BaseModel in FastAPI\nDESCRIPTION: Shows how to import the BaseModel class from Pydantic, which is used to define request body schemas.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n```\n\n----------------------------------------\n\nTITLE: Adding a Background Task in FastAPI Path Operation Function\nDESCRIPTION: This snippet shows how to add a background task to the BackgroundTasks object within a path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbackground_tasks.add_task(write_notification, email, message=\"some notification\")\n```\n\n----------------------------------------\n\nTITLE: Shorthand Dependency Injection in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates a shorthand syntax for class-based dependency injection in FastAPI. By using Annotated with Depends(), you can avoid repeating the class name, making the code more concise.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: FastAPI Package Requirements\nDESCRIPTION: Package requirements file specifying FastAPI and Pydantic version dependencies for the application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfastapi[standard]>=0.113.0,<0.114.0\npydantic>=2.7.0,<3.0.0\n```\n\n----------------------------------------\n\nTITLE: Declaring File and Form Parameters in FastAPI Endpoint\nDESCRIPTION: Example showing how to declare parameters in a FastAPI endpoint function to receive both file uploads and form fields simultaneously using the File and Form parameter types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form())\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Schema for Binary Responses in FastAPI\nDESCRIPTION: Demonstrates how to customize the OpenAPI schema for a path operation that returns binary data, using a Pydantic model to define the schema and openapi_extra to specify the response format.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    data: str\n\napp = FastAPI()\n\n@app.get(\n    \"/items/{item_id}\",\n    response_class=Response,\n    responses={\n        200: {\n            \"content\": {\"application/octet-stream\": {}},\n            \"description\": \"Return an image.\",\n        }\n    },\n    openapi_extra={\n        \"responses\": {\n            \"200\": {\n                \"content\": {\n                    \"application/octet-stream\": {\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"format\": \"binary\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n)\ndef read_item(item_id: str):\n    file_data = get_file(item_id)\n    return Response(content=file_data, media_type=\"application/octet-stream\")\n```\n\n----------------------------------------\n\nTITLE: Converting Query Parameter to Boolean in FastAPI\nDESCRIPTION: This snippet illustrates how FastAPI automatically converts query parameters to boolean types. The `short` parameter will be interpreted as `True` if the query includes `short=1`, `short=True`, `short=true`, `short=on`, or `short=yes` (case-insensitive); otherwise, it will be `False`. The function returns a dictionary containing the `item_id` and the boolean value of `short`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, short: bool | None = None):\n    return {\"item_id\": item_id, \"short\": short}\"\n```\n\n----------------------------------------\n\nTITLE: Using PlainTextResponse in FastAPI\nDESCRIPTION: Example showing how to return plain text content by setting PlainTextResponse as the response_class. This sets the Content-Type header to text/plain.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=PlainTextResponse)\nasync def read_items():\n    return \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Password Verification Function\nDESCRIPTION: Implement secure password verification without directly storing passwords, using a hashing mechanism to compare credentials\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n```\n\n----------------------------------------\n\nTITLE: Using Configuration from a Separate Module (main.py)\nDESCRIPTION: This code demonstrates how to import and use the `Settings` object defined in a separate `config.py` module within a FastAPI application. It imports the `settings` object from the `config` module and accesses its attributes in the `read_root` route to return configuration data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\nfrom .config import settings\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Declaring OAuth2 Security Scheme with Scopes in Python\nDESCRIPTION: This snippet shows how to declare an OAuth2 security scheme with two scopes: 'me' and 'items'. The scopes are defined as a dictionary with scope names as keys and descriptions as values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Uvicorn Command in Dockerfile\nDESCRIPTION: This snippet defines the command to run the Uvicorn server within the Docker container.  It specifies the application module (app.main) and the app object to be served, sets the host to 0.0.0.0, and configures the port to 80.  This command is executed when the container starts, launching the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"CMD [\\\"uvicorn\\\", \\\"app.main:app\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"80\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse with response_class parameter in FastAPI\nDESCRIPTION: Shows how to use FileResponse as a response_class parameter in a path operation decorator. This allows directly returning the file path from the function instead of creating the FileResponse instance manually.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\ndef main():\n    return \"large-file.txt\"\n\n```\n\n----------------------------------------\n\nTITLE: Extending OpenAPI with Custom Schema in FastAPI\nDESCRIPTION: This snippet demonstrates how to extend the OpenAPI schema with additional metadata using the `openapi_extra` parameter. It allows the inclusion of non-standard fields that can be helpful for the API consumers while maintaining the standard OpenAPI structure.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/items/', openapi_extra={\"x-custom-field\": \"value\"})\nasync def read_items():\n    return ['item1', 'item2']\n```\n\n----------------------------------------\n\nTITLE: Declaring Path Parameter with Type Hinting in FastAPI\nDESCRIPTION: This snippet showcases how to declare a path parameter with a type hint, specifying that the `item_id` should be an integer.  FastAPI uses this type hint for data validation and conversion. If the provided value is not an integer, FastAPI will automatically return an error response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Including Scopes in JWT Token Response in Python\nDESCRIPTION: This code snippet demonstrates how to include the requested scopes in the JWT token response. It uses the scopes property from OAuth2PasswordRequestForm and adds them to the token data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naccess_token = create_access_token(data={\"sub\": user.username, \"scopes\": form_data.scopes}, expires_delta=access_token_expires)\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Query Parameters in FastAPI (Python 3.10+)\nDESCRIPTION: Demonstrates how to add both a title and description to a query parameter, enhancing the API documentation with detailed explanations of the parameter's purpose and requirements.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for FastAPI Path Operation\nDESCRIPTION: This JSON example displays the expected output of a FastAPI path operation. It demonstrates how FastAPI can return response data, excluding defaults when parameters are explicitly set.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"name\": \"Foo\",\n\"price\": 50.2\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Token Authentication in FastAPI\nDESCRIPTION: Setting up a basic OAuth2 token authentication scheme with token handling and dependency injection\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n```\n\n----------------------------------------\n\nTITLE: Forbidding Extra Headers in FastAPI with Pydantic Model\nDESCRIPTION: This example demonstrates how to restrict the headers that can be received by using Pydantic's model configuration to forbid extra fields. This can be useful in special use cases where you want to strictly control the accepted headers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass HeaderModel(BaseModel):\n    user_agent: str\n    accept_language: str | None = None\n\n    model_config = {\n        \"extra\": \"forbid\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies by Returning a Response Directly in FastAPI\nDESCRIPTION: This snippet shows how to return a `Response` object directly from a FastAPI path operation function to set cookies.  The example shows how to create the `Response` object and set a cookie named `example-cookie` with a specified value. It highlights the need to handle the response type and potential `response_model` filtering manually.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom fastapi import FastAPI, Response\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(item_id: str):\\n    response = Response(\"Hello {item_id}\")\\n    response.set_cookie(key=\"example-cookie\", value=\"some-cookie-value\")\\n    return response\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Usando Herança de Classe para Tipo de Retorno e Filtragem de Dados\nDESCRIPTION: Demonstração de como usar herança de classe para obter suporte de ferramentas com anotações de tipo e filtragem de dados do FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, EmailStr\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\nclass UserIn(BaseUser):\n    password: str\n\n@app.post(\"/user/\")\ndef create_user(user: UserIn) -> BaseUser:\n    return user\n```\n\n----------------------------------------\n\nTITLE: Directly Returning an HTMLResponse in FastAPI\nDESCRIPTION: Demonstrates how to bypass the response_class parameter and directly return an HTMLResponse object from a FastAPI route handler.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FastAPI Application for Testing\nDESCRIPTION: This code snippet shows a simple FastAPI application with a root endpoint that returns JSON data. This serves as the application to be tested with async tests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/async-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Using regular def in FastAPI for synchronous operations\nDESCRIPTION: This snippet shows how to define a regular (non-async) path operation function in FastAPI when working with libraries that don't support await. This is common with most database libraries that operate synchronously.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Pydantic Model\nDESCRIPTION: Creation of a Pydantic model called Image with url and name fields that can be used as a nested model within other models.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Image:\n    url: str\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket with dependencies in FastAPI\nDESCRIPTION: This snippet shows how to use dependencies like Query parameters and Path parameters with WebSocket endpoints in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket, Depends, Query\n\napp = FastAPI()\n\nasync def get_cookie_or_token(websocket: WebSocket, session: str | None = Cookie(None), token: str | None = Query(None)):\n    if session is None and token is None:\n        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: str | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to FastAPI Path Operations\nDESCRIPTION: Demonstrates how to add tags to FastAPI path operations using the tags parameter to group related endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n```\n\n----------------------------------------\n\nTITLE: Leyendo Héroes con FastAPI y SQLModel en Python\nDESCRIPTION: Implementa un endpoint GET para leer todos los héroes de la base de datos, devolviendo una lista de HeroPublic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n```\n\n----------------------------------------\n\nTITLE: Return Statement Type Example\nDESCRIPTION: Shows a simple return statement with dictionary containing item details\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"item_name\": item.name, \"item_id\": item_id}\n```\n\nLANGUAGE: Python\nCODE:\n```\nreturn {\"item_price\": item.price}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Request Body Parameter in a Path Operation\nDESCRIPTION: Shows how to use a Pydantic model as a parameter in a FastAPI path operation function to receive and validate the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n```\n\n----------------------------------------\n\nTITLE: Implementing Current User Dependency in FastAPI\nDESCRIPTION: Creates a dependency function to retrieve current user using OAuth2 token and user utility function\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n```\n\n----------------------------------------\n\nTITLE: Building a Basic Docker Image for FastAPI Applications\nDESCRIPTION: A Dockerfile template for containerizing FastAPI applications. It starts from a Python 3.9 base image, sets up the working directory, copies requirements, installs dependencies, and adds the application code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n\n# Si estás detrás de un proxy como Nginx o Traefik añade --proxy-headers\n# CMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--proxy-headers\"]\n```\n\n----------------------------------------\n\nTITLE: Using Query as Default Value for Parameter Validation in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet shows the older method of using Query as the default value to add a max_length validation to a query parameter in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Values Query Parameter in FastAPI (Python 3.10+)\nDESCRIPTION: Declares a query parameter 'q' that can accept multiple values by using Query with a list type annotation. When the URL contains multiple instances of the same parameter, they will be collected into a Python list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n```\n\n----------------------------------------\n\nTITLE: Declaring Metadata for Path Parameter in FastAPI (Python)\nDESCRIPTION: Example of declaring metadata (title) for a path parameter 'item_id' using Path in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nitem_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n```\n\n----------------------------------------\n\nTITLE: Pydantic update example\nDESCRIPTION: This snippet demonstrates how to create a copy of an existing Pydantic model using `.copy()` and update it with a dictionary of new values using the `update` parameter. This allows for efficient merging of existing data with new data for partial updates.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    updated_item = stored_item_model.copy(update=update_data)\n```\n\n----------------------------------------\n\nTITLE: Checking the active Python interpreter (Windows PowerShell)\nDESCRIPTION: This PowerShell command checks if the virtual environment is correctly activated. It retrieves the command information for `python`, which should point to the Python executable within the `.venv\\Scripts` directory of the project.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Settings function\nDESCRIPTION: The following python function exemplifies getting settings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_settings():\\n    return Settings()\"\n```\n\n----------------------------------------\n\nTITLE: Using Annotated and Query for Parameter Validation in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet demonstrates how to use Annotated and Query to add a max_length validation to a query parameter in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundTasks and Defining Path Operation Function in FastAPI\nDESCRIPTION: This snippet shows how to import BackgroundTasks from fastapi and define a path operation function with a BackgroundTasks parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import BackgroundTasks, FastAPI\n\n# ...\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Class - Python FastAPI\nDESCRIPTION: Demonstrates how to import the WebSocket class from FastAPI, which is originally provided by Starlette and used for handling WebSocket connections.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import WebSocket\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Exception Handler - Python FastAPI\nDESCRIPTION: Shows how to import the WebSocketDisconnect exception class from FastAPI for handling client disconnection events.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import WebSocketDisconnect\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Response Class in FastAPI\nDESCRIPTION: Shows how to create a custom response class using orjson with custom options in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nimport orjson\n\napp = FastAPI()\n\nclass CustomORJSONResponse(JSONResponse):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Using a class dependency in a FastAPI path operation\nDESCRIPTION: This code shows how to use a class-based dependency in a FastAPI path operation.  `Depends(CommonQueryParams)` tells FastAPI to resolve the `CommonQueryParams` dependency and inject it as the `commons` argument.  The type hint `CommonQueryParams` is useful for editor support but not strictly required by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameter for Multiple Values in FastAPI\nDESCRIPTION: This example demonstrates how to declare a query parameter that can accept multiple values, resulting in a list of strings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[list[str] | None, Query()] = None\n```\n\n----------------------------------------\n\nTITLE: Importando dependencias OAuth2 en FastAPI\nDESCRIPTION: Importa OAuth2PasswordRequestForm para manejar el formulario de inicio de sesión y HTTPException para manejar errores de autenticación.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordRequestForm\n```\n\n----------------------------------------\n\nTITLE: Async Function Definition\nDESCRIPTION: Example showing how to define an async function that performs asynchronous operations\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_burgers(number: int):\n    # Do some asynchronous stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: PUT Update with JSON Encoder in FastAPI\nDESCRIPTION: Demonstrates how to use `jsonable_encoder` to convert data for storage, particularly useful for converting complex types like datetime to JSON-compatible formats\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntutorial001.py\n```\n\n----------------------------------------\n\nTITLE: Returning a Dictionary as a Dependency in FastAPI\nDESCRIPTION: This snippet showcases a simple dependency that returns a dictionary.  It demonstrates a basic example where a function serves as a dependency, providing a dictionary with predefined values. The problem is that editors are not able to provide much support for dict key and value types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nfrom typing import Optional\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\nasync def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI Applications\nDESCRIPTION: Shows how to instantiate and use Pydantic models in FastAPI. The example demonstrates direct initialization and dictionary unpacking to create model instances with automatic validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Sobrescrevendo o Manipulador de Exceção de Validação\nDESCRIPTION: Mostra como sobrescrever o manipulador padrão de exceções de validação de requisição (RequestValidationError) para personalizar a resposta de erro.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = FastAPI()\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: FastAPI App with Root Path Configuration\nDESCRIPTION: Demonstrates configuring a FastAPI application to work with a proxy path prefix by setting the root_path parameter during app initialization\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(root_path=\"/api/v1\")\n```\n\n----------------------------------------\n\nTITLE: List of Sub-Models in FastAPI\nDESCRIPTION: This example shows how to define a list of Pydantic models as a field in another Pydantic model. It defines the `images` field in the `Item` model as a `List[Image]`, allowing multiple image objects to be associated with an item.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List, Optional\n\nfrom pydantic import BaseModel, HttpUrl\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: list = []\n    images: Optional[List[Image]] = None\"\n```\n\n----------------------------------------\n\nTITLE: Converting Input Data with jsonable_encoder in PUT Request\nDESCRIPTION: Code snippet showing how to update an item using HTTP PUT, converting the input data to a JSON-compatible format using jsonable_encoder before storing it.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: str, item: Item = Body(embed=True)\n):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Password Request Form\nDESCRIPTION: Set up OAuth2PasswordRequestForm to handle username, password, and optional scope authentication parameters using FastAPI's Depends\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nOAuth2PasswordRequestForm\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Headers in FastAPI\nDESCRIPTION: Example demonstrating how to handle multiple values for the same header using a list type annotation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n```\n\n----------------------------------------\n\nTITLE: RedirectResponse with response_class in FastAPI\nDESCRIPTION: Demonstrates using RedirectResponse with the response_class parameter, allowing direct return of the URL from the path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\", response_class=RedirectResponse)\nasync def redirect_typer():\n    return \"https://typer.tiangolo.com\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Typed List with Typing Module\nDESCRIPTION: Shows how to import and use List from typing module to specify list element type\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n```\n\n----------------------------------------\n\nTITLE: Defining a Token Dependency in FastAPI\nDESCRIPTION: This code snippet defines a dependency that retrieves a token as a string.  It's used as part of a security system, allowing the path operation function to receive the token for authentication and authorization. This token is expected to be provided by the client in the authorization header.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function Definition in Python\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous function in Python using the `async def` syntax. The function `get_burgers` is marked as asynchronous, allowing it to use the `await` keyword inside. It takes an integer as input and returns burgers asynchronously.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"1\"\nasync def get_burgers(number: int):\n    # burgerleri oluşturmak için asenkron birkaç iş\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Multiple User Models with Password Variations\nDESCRIPTION: Demonstrates creating different Pydantic models for user input, output, and database storage with varying password handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: str\n    full_name: str = None\n\nclass UserOut(BaseModel):\n    username: str\n    email: str\n    full_name: str = None\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: str\n    full_name: str = None\n```\n\n----------------------------------------\n\nTITLE: Using BackgroundTasks with Dependency Injection in FastAPI\nDESCRIPTION: This code shows how to use BackgroundTasks with dependency injection in FastAPI, allowing background tasks to be used in multiple functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\ndef send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n```\n\n----------------------------------------\n\nTITLE: Injecting the Current User Dependency into a FastAPI Path Operation\nDESCRIPTION: This snippet shows how to inject the `get_current_user` dependency into a path operation using `Depends`.  The `read_current_user` function receives the `current_user` as a `User` object, which is automatically populated by the dependency.  This allows easy access to the current user's information within the path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/users/me/\")\nasync def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Requirements\nDESCRIPTION: Shows how to implement dependency requirements using request headers in FastAPI. The code checks for specific headers and raises HTTP exceptions if requirements aren't met.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_token(x_token: str = Header()) -> str:\n    if not x_token:\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n    return x_token\n\nasync def verify_key(x_key: str = Header()) -> str:\n    if not x_key:\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to UploadFile in FastAPI\nDESCRIPTION: This code shows how to add additional metadata to an UploadFile parameter using the File class in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial001_03_an_py39.py hl[9,15] *}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Path Operation Decorator\nDESCRIPTION: This code snippet demonstrates how to add a list of dependencies to the path operation decorator using the `dependencies` argument. The dependencies are executed but their return values are not passed to the path operation function. This approach is useful when the dependencies perform actions without needing to provide data to the function itself, and to avoid warnings from code editors about unused function parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\\\"item\\\": \\\"Foo\\\"}, {\\\"item\\\": \\\"Bar\\\"}]\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Background Task Function in FastAPI\nDESCRIPTION: This code defines a function to be run as a background task. It writes a notification to a file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n```\n\n----------------------------------------\n\nTITLE: Using Alias for Query Parameter in FastAPI\nDESCRIPTION: This code demonstrates how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(default=None, alias=\"item-query\")\n```\n\n----------------------------------------\n\nTITLE: Model Creation with Dict Unpacking\nDESCRIPTION: Shows how to create a new Pydantic model instance by unpacking a dictionary from another model with additional parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUserInDB(**user_in.dict(), hashed_password=hashed_password)\n\nUserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n```\n\n----------------------------------------\n\nTITLE: Using a nested model in another Pydantic model\nDESCRIPTION: This snippet shows how to use the `Image` model as a type annotation for the `image` field in another Pydantic model.  It uses the custom `Image` model as an attribute type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"image: Image | None = None\"\n```\n\n----------------------------------------\n\nTITLE: Using UJSONResponse for JSON Serialization in FastAPI\nDESCRIPTION: Shows how to use UJSONResponse as an alternative JSON serializer in FastAPI that leverages the ujson library for potentially faster processing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return {\"item_id\": \"Foo\"}\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Non-Annotated Syntax\nDESCRIPTION: Shows how to handle parameter ordering when using Path without Annotated, including required query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(q: str, item_id: int = Path(..., title=\"The ID of the item to get\")):\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket disconnections and multiple clients in FastAPI\nDESCRIPTION: This code demonstrates how to handle WebSocket disconnections and manage multiple client connections in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\n\napp = FastAPI()\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\nmanager = ConnectionManager()\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous Path Operation Function in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a synchronous path operation function in FastAPI, as an alternative to the asynchronous version. It uses a regular def instead of async def.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef read_root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to HTTPException\nDESCRIPTION: Demonstrates how to add custom headers when raising an HTTPException for advanced scenarios like security requirements.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Process Management\nDESCRIPTION: Example showing how to run a FastAPI application with Uvicorn in development mode. This is the simplest deployment method but not recommended for production use as it lacks automatic restarts and process management.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastapi run\n```\n\n----------------------------------------\n\nTITLE: Defining a set with type annotation\nDESCRIPTION: This snippet shows how to define a set with a specific type, such as a set of strings, which ensures that the elements are unique.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"tags: set[str] = set()\"\n```\n\n----------------------------------------\n\nTITLE: Pydantic Dict Method Usage in Python\nDESCRIPTION: Examples of using Pydantic's .dict() method to create and manipulate model data, showing how to create objects and convert them to dictionaries.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n\nuser_dict = user_in.dict()\n\nprint(user_dict)\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Default Value and Length Constraint\nDESCRIPTION: Demonstrates setting a default value and minimum length for a query parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(min_length=3)] = \"fixedquery\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies Using Direct Response Object in FastAPI\nDESCRIPTION: This example demonstrates how to create a Response object directly, set cookies on it, and return it from a FastAPI path operation function. This method allows more control over the response but requires manual handling of data serialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n```\n\n----------------------------------------\n\nTITLE: Handling Optional File Uploads\nDESCRIPTION: This code snippet demonstrates how to handle optional file uploads by providing a default value of `None` to the `File` parameter.  This allows the endpoint to function correctly even if a file is not provided in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated, Optional\n\nfrom fastapi import FastAPI, File, Form\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[Optional[bytes], File()] = None,\n    fileb: Annotated[Optional[bytes], File()] = None,\n    token: Annotated[str, Form()] = None,\n):\n    return {\"file_size\": file, \"token\": token}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_file(\n    file: Annotated[Optional[bytes], File()] = None,\n    token: Annotated[str, Form()] = None,\n):\n    return {\"filename\": file, \"token\": token}\"\n```\n\n----------------------------------------\n\nTITLE: Creating RedirectResponse in FastAPI\nDESCRIPTION: Demonstrates how to perform HTTP redirects in FastAPI by returning a RedirectResponse object that will automatically redirect the client to a specified URL.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: Number Validation with Greater Than or Equal\nDESCRIPTION: Shows how to implement numeric validation ensuring values are greater than or equal to a specified number.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nitem_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)] = 1\n```\n\n----------------------------------------\n\nTITLE: Default Swagger UI Parameters in FastAPI\nDESCRIPTION: Default configuration parameters for Swagger UI interface. Defines standard settings used when generating Swagger UI documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nswagger_ui_default_parameters\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Package.json for Client Generation\nDESCRIPTION: A package.json configuration that defines a script to generate TypeScript client code using openapi-ts with the FastAPI OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic List Type for Query Parameters in FastAPI (Python 3.9+)\nDESCRIPTION: Demonstrates using a generic list type instead of list[str] for a query parameter. This approach won't check the content types within the list but still accepts multiple values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n```\n\n----------------------------------------\n\nTITLE: Accediendo al body en errores de validación\nDESCRIPTION: Muestra cómo acceder y retornar el cuerpo de la solicitud que causó un error de validación para facilitar la depuración.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@app.exception_handler(RequestValidationError)\\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\\n    return JSONResponse(\\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Server from root_path in OpenAPI\nDESCRIPTION: A FastAPI application that disables the automatic inclusion of the root_path as a server in the OpenAPI schema by setting root_path_in_servers to False, while still defining custom servers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\nasync def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation with Greater Than or Equal\nDESCRIPTION: Example of using ge (greater than or equal) validation with path parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\\\"/items/{item_id}\\\")\\nasync def read_items(\\n    item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\", ge=1)]\\n):\\n    return {\\\"item_id\\\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Forbidding Extra Query Parameters in FastAPI\nDESCRIPTION: Shows how to configure a Pydantic model to forbid extra query parameters using model configuration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n../../docs_src/query_param_models/tutorial002_an_py310.py\n```\n\n----------------------------------------\n\nTITLE: Defining an API endpoint in FastAPI\nDESCRIPTION: This snippet shows how to define a simple API endpoint in FastAPI using the `@app.get` decorator.  This endpoint returns a JSON response with a \"message\" key.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\\\"/some/url\\\")\ndef read_url():\n    return {\\\"message\\\": \\\"Hello World\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Header Class in FastAPI\nDESCRIPTION: This snippet shows how to import the Header class from FastAPI, which is necessary for declaring header parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Header\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with Maximum Length Validation (Python 3.10+)\nDESCRIPTION: Defines an optional query parameter 'q' with a type hint of 'str | None' and sets the default value as 'None'. The parameter is validated to ensure its length does not exceed 50 characters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None] = Query(default=None, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Defining a GET path operation in FastAPI\nDESCRIPTION: This code snippet demonstrates how to define a GET path operation in FastAPI, which is used to handle requests to a specific URL. It uses a decorator `@app.get()` to associate the function `read_url` with the `/some/url` endpoint. The function returns a dictionary, which FastAPI automatically converts to JSON.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\"\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Example\nDESCRIPTION: This example from Pydantic documentation showcases the creation of a Pydantic model for data validation.  It defines a `User` class with type-annotated attributes and demonstrates its instantiation, showing the library's data validation capabilities.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"from datetime import datetime\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name = 'John Doe'\n    signup_ts: Optional[datetime] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, '2', b'3'],\n}\n\nuser = User(**external_data)\nprint(user.id)\" \n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Media Types in FastAPI Responses\nDESCRIPTION: Implementation of a FastAPI endpoint that can return different media types - both JSON and PNG image formats. The snippet shows how to define multiple response content types in the OpenAPI documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_item(item_id: str, img: bool = False):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function Definition in Python\nDESCRIPTION: This code snippet demonstrates how to define an asynchronous function in Python using the `async def` syntax. The `async` keyword signifies that the function can pause its execution to allow other tasks to run, improving concurrency. This is crucial for handling I/O-bound operations efficiently.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"1\"\nasync def get_burgers(number: int):\n    # Fazer alguma coisa assíncrona para criar os hambúrgueres\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Body Request Example Configuration\nDESCRIPTION: Demonstrates adding an example to a Body parameter in a FastAPI endpoint, which will be displayed in the documentation UI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\ndef create_item(\n    item: Item = Body(\n        example={\n            \"name\": \"Foo\",\n            \"description\": \"A very nice Item\",\n            \"price\": 35.4,\n            \"tax\": 3.2\n        }\n    )\n):\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than or Equal in FastAPI\nDESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to enforce that a path parameter `item_id` is greater than or equal to 1 using the `ge` parameter. The parameter `item_id` will be validated to ensure its value meets the given criteria.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\", ge=1)]):\n    return {\\\"item_id\\\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Multiple File Uploads with Metadata in FastAPI\nDESCRIPTION: This snippet expands on multiple file uploads by demonstrating how to include additional metadata for each file using `File()`. It applies to scenarios where you need specific configurations or descriptions for each file being uploaded.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Scheme and User Model in Python\nDESCRIPTION: This snippet shows how to define an OAuth2 scheme and create a Pydantic model for representing users in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with an Optional Parameter in Python\nDESCRIPTION: This code defines a function `say_hi` with a `name` parameter annotated as `Optional[str]`. While the parameter is technically not optional in the sense that it must be provided during the function call, its value can be `None`. The code also highlights the use of `Union[str, None]` as an alternative.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional\n\ndef say_hi(name: Optional[str]):\n    print(f'Hi {name}')\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining File Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a file parameter in a FastAPI path operation function.  It uses the `File` class to indicate that the parameter should be treated as a file uploaded via form data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"async def upload_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\"\n```\n\n----------------------------------------\n\nTITLE: Secure Username and Password Validation with FastAPI\nDESCRIPTION: This snippet demonstrates how to securely validate a username and password in FastAPI using Python's `secrets` module to prevent timing attacks.  It converts the username and password to bytes using UTF-8 encoding and compares them using `secrets.compare_digest()` to ensure the credentials match predefined values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    correct_username = secrets.compare_digest(credentials.username, \"stanleyjobson\")\n    correct_password = secrets.compare_digest(credentials.password, \"swordfish\")\n    if not (correct_username and correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n```\n\n----------------------------------------\n\nTITLE: Overriding HTTPException Handler in FastAPI\nDESCRIPTION: This example shows how to override the default handler for `HTTPException`. The custom handler will return a plain text response instead of the default JSON response. The handler receives the `Request` object and the `HTTPException` instance as arguments and it returns a `PlainTextResponse` object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, HTTPException\\nfrom fastapi.requests import Request\\nfrom fastapi.responses import PlainTextResponse\\n\\napp = FastAPI()\\n\\n\\n@app.exception_handler(HTTPException)\\nasync def http_exception_handler(request: Request, exc: HTTPException):\\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: str):\\n    if item_id != \\\"foo\\\":\\n        raise HTTPException(status_code=404, detail=\\\"Item not found\\\")\\n    return {\\\"item\\\": \\\"The Foo Wrestlers\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Float Parameter Validation in FastAPI\nDESCRIPTION: Shows how to validate float parameters with greater than and less than constraints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\\\"/items/{item_id}\\\")\\nasync def read_items(\\n    item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\", ge=0, le=1000)],\\n    size: Annotated[float, Query(gt=0, lt=10.5)]\\n):\\n    return {\\\"item_id\\\": item_id, \\\"size\\\": size}\n```\n\n----------------------------------------\n\nTITLE: Output Model Configuration in FastAPI Endpoint\nDESCRIPTION: Shows how the same Pydantic model is used as a return type in a FastAPI route, with different schema generation behavior\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", response_model=Item)\ndef create_item(item: Item):\n    return item\n```\n\n----------------------------------------\n\nTITLE: First-level Dependency\nDESCRIPTION: This snippet defines a first-level dependency in FastAPI, which is a function that declares an optional query parameter 'q' of type string and returns its value. This function serves as a basic building block for demonstrating sub-dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None)):\n    return {\"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Path Operation Tags\nDESCRIPTION: Assign custom tags to specific path operations for organization and documentation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/users/\", tags=[\"users\"])\n@app.get(\"/items/\", tags=[\"items\"])\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPException in FastAPI\nDESCRIPTION: This snippet shows how to import the `HTTPException` class from the `fastapi` module. The `HTTPException` class is used to raise HTTP exceptions in FastAPI applications, allowing you to return specific HTTP status codes and error messages to the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, HTTPException\"\n```\n\n----------------------------------------\n\nTITLE: Importing Cookie class in FastAPI (Python)\nDESCRIPTION: This snippet shows how to import the Cookie class from FastAPI, which is used to declare cookie parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/cookie-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Cookie\n```\n\n----------------------------------------\n\nTITLE: Setting root_path Parameter in FastAPI Application\nDESCRIPTION: A FastAPI application that directly sets the root_path parameter during initialization, which serves the same purpose as using the --root-path command line option with Uvicorn or Hypercorn.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\nasync def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Dependencies\nDESCRIPTION: This code snippet demonstrates how dependencies can raise exceptions using `raise`. Similar to standard dependencies, dependencies defined within the path operation decorator's `dependencies` parameter can halt execution and return an error response. This mechanism is useful for implementing authentication or authorization checks before proceeding with the main path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \\\"fake-super-secret-token\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\n\n\nasync def verify_key(x_key: str = Header(...)):\n    if x_key != \\\"fake-super-secret-key\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with Standard Dependencies\nDESCRIPTION: This command shows how to install FastAPI using pip.  The `fastapi[standard]` option includes common, optional dependencies that provide additional functionality. Alternatively, `pip install fastapi` can be used for a minimal installation without these dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"pip install \\\"fastapi[standard]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Password Request Form in FastAPI\nDESCRIPTION: Configure OAuth2 password request form to handle username, password, and optional scope during authentication process\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nOAuth2PasswordRequestForm\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Flexible Responses\nDESCRIPTION: This code shows how to use `typing.Union` to define a response that can be one of several types, which translates to `anyOf` in OpenAPI.  The example uses `Union` to define a return that can be either a `PlaneItem` or a `CarItem` allowing the endpoint to return different object types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass PlaneItem(BaseModel):\\n    size: int\\n    wings: bool\\n\\n\\nclass CarItem(BaseModel):\\n    size: int\\n    wheels: int\\n\\n\\nItem = Union[PlaneItem, CarItem]\\n\\n\\nasync def read_item(item_id: str) -> Item:\\n    if item_id == \"plane\":\\n        return PlaneItem(size=10, wings=True)\\n    return CarItem(size=2, wheels=4)\\n\\n\\nasync def main():\\n    item = await read_item(item_id=\"plane\")\\n    print(item)\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Required Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to define a required query parameter in a FastAPI endpoint by not providing a default value. The `needy` parameter is required, and the client must include it in the request; otherwise, FastAPI will return an error. The function returns a dictionary containing the `item_id` and the required query parameter `needy`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Importing File and Form in FastAPI\nDESCRIPTION: This snippet shows how to import the File and Form components from FastAPI, which are necessary for handling file uploads and form data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import File, Form\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Model with Default Values in Python\nDESCRIPTION: A Python code snippet showing a Pydantic model definition with a default value. The Item class has two fields: name (required) and description (with default value None).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Change Syntax Highlighting Theme in Swagger UI with FastAPI\nDESCRIPTION: This snippet shows how to change the syntax highlighting theme in Swagger UI by setting the `syntaxHighlight.theme` parameter in the `swagger_ui_parameters` dictionary. This allows customizing the color scheme used for displaying code examples in the Swagger UI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"syntaxHighlight.theme\": \"monokai\"})\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Model in FastAPI\nDESCRIPTION: This example shows how to disable the response model generation in FastAPI by setting response_model=None. This allows using any return type annotation without affecting the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\", response_model=None)\ndef read_item(item_id: str) -> Union[dict, Response]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Lists Instead of Sets in FastAPI Response Model Parameters\nDESCRIPTION: This snippet demonstrates that FastAPI can handle lists or tuples instead of sets for response_model_include and response_model_exclude parameters. It automatically converts them to sets for proper functionality.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\napp = FastAPI()\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Required Query Parameters\nDESCRIPTION: Shows how to create mandatory query parameters by removing default values\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef read_item(item_id: str, needy: str):\n    return {\"item_id\": item_id, \"needy\": needy}\n```\n\n----------------------------------------\n\nTITLE: Defining Item with type int in FastAPI\nDESCRIPTION: Defines 'item_id' as an integer type parameter for FastAPI routes, ensuring that only valid integers can be processed. This parameter is crucial for identifying specific items in API requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nitem_id: int\n```\n\n----------------------------------------\n\nTITLE: Using response_model_include and response_model_exclude in FastAPI\nDESCRIPTION: This example shows how to use response_model_include and response_model_exclude parameters to include or exclude specific attributes from the response model. It uses sets of attribute names to specify which fields to include or exclude.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\napp = FastAPI()\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Annotating with a Response Subclass in FastAPI\nDESCRIPTION: This snippet demonstrates how to use a subclass of Response in the type annotation, which is also automatically handled by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/teleport\")\ndef get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Responses in FastAPI Using HTMLResponse\nDESCRIPTION: Shows how to return HTML content from a FastAPI endpoint by setting HTMLResponse as the response_class parameter in the route decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"<html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Reutilizando Manipuladores de Exceção do FastAPI\nDESCRIPTION: Demonstra como reutilizar os manipuladores de exceção padrão do FastAPI ao personalizar o tratamento de exceções.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Declaring Examples with Field() in Pydantic Model (Python)\nDESCRIPTION: This code shows how to use Field() with Pydantic models to declare additional examples. The examples are specified directly in the field definition.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Extensions to FastAPI Path Operation\nDESCRIPTION: Demonstrates how to add custom OpenAPI extensions to a path operation using the openapi_extra parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Annotated Syntax\nDESCRIPTION: Demonstrates the preferred way to handle parameter ordering using Annotated syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using Alias for Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(alias=\"item-query\")] = None\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameters with Pydantic Models in FastAPI\nDESCRIPTION: This example demonstrates how to create a Pydantic model for related header parameters and use it in a FastAPI route. FastAPI will extract each field from the request headers and provide the defined Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HeaderModel(BaseModel):\n    x_token: str\n    x_api_version: str | None = None\n    user_agent: str | None = None\n    content_language: str | None = \"en-US\"\n    content_type: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[HeaderModel, Header()]):\n    return {\"headers\": headers}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Endpoint in FastAPI\nDESCRIPTION: Demonstrates how to create a WebSocket endpoint in FastAPI. This code defines a route that accepts WebSocket connections and implements a simple message echo functionality.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n----------------------------------------\n\nTITLE: Response Model Include/Exclude Fields\nDESCRIPTION: Shows how to include or exclude specific fields from the response using response_model_include and response_model_exclude parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_include={\"name\", \"description\"})\ndef read_item(item_id: str):\n    return item_from_database\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in FastAPI Path Operation Function\nDESCRIPTION: This snippet demonstrates how to declare a path operation function that directly accesses the Request object. It allows retrieving the client's host IP address from the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/using-request-directly.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Basic Cookie Model Implementation in FastAPI\nDESCRIPTION: Demonstrates using a Pydantic model to declare cookie parameters for a FastAPI endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    Cookie(\n        title=\"Cookie Session ID\",\n        description=\"Required cookie containing session ID\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Arbitrary Dict Bodies in FastAPI\nDESCRIPTION: This example shows how to define a FastAPI endpoint that accepts a dictionary with arbitrary keys of one type and values of another type, using Pydantic for validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n```\n\n----------------------------------------\n\nTITLE: Docker CMD Configuration - Exec Form\nDESCRIPTION: Demonstrates the recommended exec form for CMD instruction in Dockerfile to ensure proper FastAPI shutdown and lifespan event handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: FastAPI Invoice Creation with Callback URL\nDESCRIPTION: This snippet shows a FastAPI route operation that receives an Invoice object and a callback URL. It includes the use of a Pydantic Url type for the callback URL and passes the routes of the callback router to the callbacks argument of the route decorator. This allows documenting the expected structure of the external API that will receive the callback.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url,\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple User Models with Different Attributes\nDESCRIPTION: Demonstrates creating different Pydantic models for user input, output, and database storage with varying password handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: str\n    full_name: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Single-File FastAPI Dockerfile\nDESCRIPTION: Dockerfile configuration for a single-file FastAPI application with simplified file structure\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./main.py /code/\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency with Sub-dependency in FastAPI\nDESCRIPTION: Defines a dependency function that itself depends on another dependency (query_extractor). It also extracts a cookie, demonstrating how dependencies can be chained in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def query_or_cookie_extractor(q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)):\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation with Scopes\nDESCRIPTION: Create a JWT access token that includes requested OAuth2 scopes, enabling scope-based access control during token generation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naccess_token = create_access_token(\n    data={\"sub\": user.username, \"scopes\": form_data.scopes},\n    expires_delta=access_token_expires\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Dataclass for FastAPI Response Model\nDESCRIPTION: Example of using a Python dataclass to define a response model in FastAPI. The dataclass is used as the response_model parameter in the route decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: str | None = None\n    tax: float | None = None\n\n@app.get(\"/items/next\", response_model=Item)\ndef read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be be playin' and havin' fun\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse in FastAPI\nDESCRIPTION: Example of using ORJSONResponse for improved performance with large responses. It demonstrates how to import and declare the response class in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Setting Response Description in FastAPI\nDESCRIPTION: Example of setting a specific response description for a FastAPI endpoint using the response_description parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", response_description=\"Successful Response with List of Items\")\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Update with .copy() Method\nDESCRIPTION: Demonstrates creating a model copy with updated values using the `update` parameter, enabling partial model updates without modifying the original instance\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntutorial002.py (line 35)\n```\n\n----------------------------------------\n\nTITLE: Plain Text Response\nDESCRIPTION: Demonstrates returning a plain text response using PlainTextResponse. This allows setting the content type to plain text and returning simple string content.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n@app.get(\"/message\", response_class=PlainTextResponse)\ndef read_message():\n    return \"Hello, this is a plain text message!\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking Dict with **user_in.dict()\nDESCRIPTION: Demonstrates how to convert a Pydantic model instance to a dictionary using `.dict()` and then unpack it using `**` to pass the dictionary's key-value pairs as keyword arguments to another Pydantic model constructor. This allows initializing a new model with data from an existing model instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"user_in = UserIn(username=\\\"john\\\", password=\\\"secret\\\", email=\\\"john.doe@example.com\\\")\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"user_dict = user_in.dict()\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"print(user_dict)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(**user_dict)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(\n    username=\\\"john\\\",\n    password=\\\"secret\\\",\n    email=\\\"john.doe@example.com\\\",\n    full_name=None,\n)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(\n    username = user_dict[\\\"username\\\"],\n    password = user_dict[\\\"password\\\"],\n    email = user_dict[\\\"email\\\"],\n    full_name = user_dict[\\\"full_name\\\"],\n)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"user_dict = user_in.dict()\nUserInDB(**user_dict)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(**user_in.dict())\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(**user_in.dict(), hashed_password=hashed_password)\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"UserInDB(\n    username = user_dict[\\\"username\\\"],\n    password = user_dict[\\\"password\\\"],\n    email = user_dict[\\\"email\\\"],\n    full_name = user_dict[\\\"full_name\\\"],\n    hashed_password = hashed_password,\n)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Jinja2Templates in FastAPI\nDESCRIPTION: Shows how to import the Jinja2Templates class from FastAPI's templating module. This class is used to render Jinja2 templates in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/templating.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.templating import Jinja2Templates\n```\n\n----------------------------------------\n\nTITLE: Declarando Response Adicional con Modelo en FastAPI\nDESCRIPTION: Este snippet muestra cómo declarar un response adicional con un código de estado 404 y un modelo Pydantic personalizado en FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"}\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom APIRoute Class in FastAPI Router\nDESCRIPTION: This code snippet demonstrates how to configure an APIRouter to use a custom route class (TimedRoute) for all routes declared under that router. The route_class parameter is used to specify the custom class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrouter = APIRouter(route_class=TimedRoute)\n```\n\n----------------------------------------\n\nTITLE: Multiple Query Parameter Values\nDESCRIPTION: Configuring a query parameter to accept multiple values as a list\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nq: List[str] = Query(default=[\"foo\", \"bar\"])\n```\n\n----------------------------------------\n\nTITLE: Path Operation Ordering in FastAPI\nDESCRIPTION: This snippet illustrates the importance of path operation order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter matching the former and misinterpreting 'me' as a user ID. It also shows that you cannot redefine a path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\"\"\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Example\nDESCRIPTION: This code snippet demonstrates the use of Pydantic for data validation and parsing. A `User` model is defined with type-annotated attributes, and Pydantic automatically validates and converts the input data to the correct types. This ensures data integrity and simplifies data handling in Python applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nfrom pydantic import BaseModel\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: List[str] = []\n    image: Image | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n    email: str | None = None\n    items: List[Item]\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Separate Input/Output Schemas in FastAPI Application\nDESCRIPTION: Code showing how to disable the separation of input and output schemas in FastAPI by setting separate_input_output_schemas=False when creating the FastAPI application instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI(separate_input_output_schemas=False)\n```\n\n----------------------------------------\n\nTITLE: FastAPI OpenAPI Schema with Multiple Servers\nDESCRIPTION: This JSON snippet shows the resulting OpenAPI schema when additional servers are configured. It includes the auto-generated server from root_path at the beginning, followed by custom servers for staging and production environments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.1.0\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Staging environment\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Production environment\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Path and Query Parameters\nDESCRIPTION: Example of defining multiple path and query parameters with flexible order\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(skip: int = 0, limit: int | None = None):\n    return {\"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: PlainTextResponse in FastAPI\nDESCRIPTION: Shows how to use PlainTextResponse to return a plain text response. It demonstrates the import and usage in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Creating Union Type Responses in FastAPI\nDESCRIPTION: Demonstrates defining API responses that can return multiple model types using typing.Union\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef get_item(item_id: int) -> Union[PlaneItem, CarItem]:\n    if item_id == 1:\n        return PlaneItem(name=\"Boeing\")\n    return CarItem(name=\"Tesla\")\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter with Maximum Length Validation (Python <3.9)\nDESCRIPTION: Defines the same optional query parameter 'q' but uses 'Union[str, None]' as the type hint in versions of Python below 3.9 while also incorporating the maximum length validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[Union[str, None]] = Query(default=None, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Preventing Extra Cookies with Pydantic Config\nDESCRIPTION: This snippet demonstrates how to prevent additional (unexpected) cookies from being accepted by a FastAPI endpoint. It uses the `extra = \"forbid\"` configuration in the Pydantic model to raise a validation error if extra cookies are sent in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel, ConfigDict\n\n\nclass Ads(BaseModel):\n    model_config = ConfigDict(extra='forbid')\n    dark_mode: Union[bool, None] = None\n    items_per_page: int = 50\n\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_ads(ads: Ads = Cookie()):\n    return ads\"\n```\n\n----------------------------------------\n\nTITLE: Declaring User Model with Pydantic and Type Annotations\nDESCRIPTION: Demonstrates how to create a Pydantic model with type-annotated fields using standard Python types and date handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Объявляем параметр user_id с типом `str`\n# и получаем поддержку редактора внутри функции\ndef main(user_id: str):\n    return user_id\n\n\n# Модель Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with List Default Value\nDESCRIPTION: This snippet shows how to define a query parameter that accepts a list of strings with a default value. If no parameter is provided, the default list will be used.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Updating FastAPI example with Pydantic\nDESCRIPTION: This Python code defines a FastAPI application with a data model (Item) using Pydantic. It includes route definitions for GET and PUT requests, automatically converting data to and from JSON while providing validation and documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Pydantic URL validation\nDESCRIPTION: This snippet defines a field `url` within an `Image` Pydantic model, specifying it should be a `HttpUrl`. Pydantic will then validate the input string to ensure it is a properly formatted HTTP URL.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n    \"url: HttpUrl\n    name: str\"\n```\n\n----------------------------------------\n\nTITLE: Model Update with Pydantic copy and update\nDESCRIPTION: Shows how to create a copy of an existing model and update it with new data using the update parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nstored_item_model.copy(update=update_data)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Schema\nDESCRIPTION: This snippet uses the `get_openapi` utility function from FastAPI to generate the OpenAPI schema.  It's called within `custom_openapi` and is used to create the initial OpenAPI schema with the application's routes, title, and version.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi.openapi.utils import get_openapi\\n\\ndef custom_openapi():\\n    if app.openapi_schema:\\n        return app.openapi_schema\\n    openapi_schema = get_openapi(\\n        title=app.title,\\n        version=app.version,\\n        openapi_version=app.openapi_version,\\n        description=app.description,\\n        routes=app.routes,\\n    )\\n    return openapi_schema\"\n```\n\n----------------------------------------\n\nTITLE: Using the Lifespan Context Manager in FastAPI (Python)\nDESCRIPTION: This code shows how to apply the lifespan context manager to a FastAPI application instance. The lifespan function is passed as an argument to the FastAPI constructor.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Database Session Dependency with Yield\nDESCRIPTION: Example showing how to create a database session dependency that handles cleanup after the response\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: HTML Response in FastAPI\nDESCRIPTION: Demonstrates how to return an HTML response using HTMLResponse. It shows the import and usage of HTMLResponse in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"<html><body><h1>Hello World</h1></body></html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Path Parameters in FastAPI\nDESCRIPTION: This code demonstrates how to use Python's `Enum` to define a set of allowed values for a path parameter in FastAPI.  The `Enum` class is used to create a custom type, and the route handler utilizes this type to enforce validation on the path parameter, restricting it to one of the defined enum values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nfrom fastapi import FastAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = FastAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Optional File Uploads\nDESCRIPTION: This example displays how to handle optional lists of uploaded files, utilizing `File()` alongside optional types to allow the endpoint to process requests with or without files.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List, Optional\n\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Optional[List[UploadFile]] = File(None)):\n    if not files:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filenames\": [file.filename for file in files]}\"\n```\n\n----------------------------------------\n\nTITLE: Using Annotated for Type Hints with Metadata (Python 3.8+)\nDESCRIPTION: Example of using Annotated to add metadata to type hints in Python 3.8+, importing from typing_extensions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Annotated\n\ndef say_hello(name: Annotated[str, \"This is just metadata\"]):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Using response_model_exclude_unset in FastAPI\nDESCRIPTION: This snippet demonstrates the use of response_model_exclude_unset parameter to exclude default values from the response. It defines an Item model with default values and uses the parameter in the route decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union, List\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\napp = FastAPI()\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Using Class-based Dependency in FastAPI Route (Python)\nDESCRIPTION: This code snippet shows how to use a class-based dependency in a FastAPI route. The CommonQueryParams class is used with the Depends function to inject the dependency into the route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Underscore to Hyphen Conversion in FastAPI Headers\nDESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in header names by setting the convert_underscores parameter to False.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(strange_header: Annotated[str | None, Header(convert_underscores=False)] = None):\n```\n\n----------------------------------------\n\nTITLE: Updating User Authentication in FastAPI\nDESCRIPTION: This Python code snippet shows how to update the user authentication process in FastAPI to use JWT tokens. It includes a function to get the current user from a token.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Disabled OpenAPI Documentation\nDESCRIPTION: Console command example showing how to run a FastAPI application with OpenAPI documentation disabled by setting the OPENAPI_URL environment variable to empty.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ OPENAPI_URL= uvicorn main:app\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Defining Form Parameters in FastAPI Python Application\nDESCRIPTION: This snippet shows how to define form parameters using the Form class in a FastAPI application. It creates a username parameter that is required and must be a string.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nusername: str = Form(...)\n```\n\n----------------------------------------\n\nTITLE: Defining a nested model with Pydantic\nDESCRIPTION: This snippet shows how to define a Pydantic model named `Image` with `url` and `name` fields of type `str`. This demonstrates how to create a custom data structure that can be validated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n    \"url: str\n    name: str\"\n```\n\n----------------------------------------\n\nTITLE: Python Tuple and Set Type Hints with Typing Module\nDESCRIPTION: This code snippet shows how to use `Tuple` and `Set` types from the `typing` module to define variables that are tuples and sets with specific element types. `Tuple` specifies a tuple with elements of defined types, while `Set` indicates a set containing elements of a particular type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Tuple, Set\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\"\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in FastAPI Response Models\nDESCRIPTION: Demonstrates how to create a response model that can return one of multiple model types using Python's Union type, which is mapped to OpenAPI's anyOf specification.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Installing the required dependency for form handling in FastAPI\nDESCRIPTION: Command to install the python-multipart library which is required for handling form data in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Combining Response Information in FastAPI\nDESCRIPTION: Shows how to combine response information from multiple sources, including response_model, status_code, and the responses parameter in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    response_model=Item,\n    status_code=status.HTTP_200_OK,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Route Class in FastAPI Router\nDESCRIPTION: This code shows how to set a custom route class for all routes in a specific router by using the route_class parameter. In this example, the router uses the TimedRoute class for all its endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrouter = APIRouter(route_class=TimedRoute)\n```\n\n----------------------------------------\n\nTITLE: Importing Path in FastAPI\nDESCRIPTION: This code snippet demonstrates how to import the `Path` class from the `fastapi` library.  `Path` is used to declare validations and metadata for path parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path\\n\\napp = FastAPI()\"\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in FastAPI\nDESCRIPTION: This snippet demonstrates how to handle multiple file uploads in FastAPI using a list of bytes or UploadFile objects.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial002_an_py39.py hl[10,15] *}\n```\n\n----------------------------------------\n\nTITLE: Importing Path and Annotated in FastAPI\nDESCRIPTION: Demonstrates how to import the Path function from fastapi and Annotated from typing for use with path parameter validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Floating Point, Greater Than, Less Than in FastAPI\nDESCRIPTION: This snippet extends numeric validation to floating-point numbers. It uses `gt` and `lt` to ensure a `price` parameter is greater than 0 and less than 1, making 0.5 a valid value but 0.0 and 0 invalid.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(\\n    item_id: int,\\n    q: str | None = None,\\n    price: float = Query(gt=0, lt=1),\\n):\\n    results = {\"item_id\": item_id, \"price\": price}\\n    if q:\\n        results.update({\"q\": q})\\n    return results\"\n```\n\n----------------------------------------\n\nTITLE: FastAPI: Minimal Path Operation\nDESCRIPTION: This example demonstrates how concise a path operation can be when leveraging dependency injection for security. It showcases a 3-line endpoint using the security system.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\\\"/users/me/\\\")\nasync def read_current_user(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Synchronous Path Operation Function\nDESCRIPTION: Shows how to declare a standard synchronous path operation function for libraries without await support\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Usage Example\nDESCRIPTION: Shows how to instantiate and use Pydantic models with direct initialization and dictionary unpacking for data validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Documentation in FastAPI\nDESCRIPTION: Disables the automatic documentation by setting the docs_url and redoc_url to None when creating a FastAPI application instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(docs_url=None, redoc_url=None)\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Maximum Length Validation\nDESCRIPTION: This code shows how to use the `Query` class to set a maximum length for a string query parameter.  The `max_length` parameter of `Query` is used to specify the maximum allowed length. FastAPI will automatically validate the input and return an error if it exceeds the limit.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Application Setup\nDESCRIPTION: Initial setup of a FastAPI application with a basic route handler.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Type Conversion for Query Parameters in FastAPI\nDESCRIPTION: This snippet shows how FastAPI automatically converts query parameter values to the declared type, in this case, `bool`. It handles various truthy and falsy strings like \"1\", \"True\", \"true\", \"on\", \"yes\" for `True` and their opposites for `False`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, short: bool = False):\n    item = {\"item_id\": item_id, \"name\": \"Awesome Item\"}\n    if short:\n        item.update({\"description\": \"This is a great item that has a lot of features\"})\n    return item\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Query Parameter Validation in FastAPI\nDESCRIPTION: This code shows how to use a regular expression to validate the format of a query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nq: str = Query(default=None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n```\n\n----------------------------------------\n\nTITLE: Generating Bearer Token for Authentication\nDESCRIPTION: Create access token with bearer token type following OAuth2 specification\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"access_token\": username,\n    \"token_type\": \"bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare query parameters in a FastAPI endpoint. It shows how to define parameters like `skip` and `limit` as function arguments. FastAPI automatically recognizes them as query parameters and converts the data types based on the type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(skip: int = 0, limit: int = 10):\n    return {\"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Declaring Header Parameters in FastAPI\nDESCRIPTION: Example of declaring a header parameter in a route function using the Header class. This shows how to make a user-agent header parameter with type annotation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(user_agent: str | None = Header(default=None)):\n```\n\n----------------------------------------\n\nTITLE: Using a Pydantic Model as Path Operation Output in FastAPI\nDESCRIPTION: A code example highlighting how a Pydantic model is used as a return type/output in a FastAPI path operation. For output, all fields including those with default values are marked as required in the OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Route Operation with APIRouter\nDESCRIPTION: This snippet showcases how to define a callback route operation using an APIRouter. It exemplifies how to specify the expected request body and response model for an external API that will receive a callback. The route itself can include an OpenAPI 3 expression, using variables with parameters and parts of the original request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\",\n    response_model=InvoiceEventReceived,\n)\nasync def invoice_paid_callback(body: InvoiceEvent):\n    pass\"\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with Response Parameter in FastAPI (Python)\nDESCRIPTION: Shows how to declare a Response parameter in a path operation function and set headers on it while still returning any object type. FastAPI extracts the headers from this temporary response and includes them in the final response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-headers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Application\nDESCRIPTION: Creates a separate FastAPI application, defining its own path operations. This sub-application will be mounted within the main application at a specified path.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nThen, create your sub-application and its *path operations*.\\n\\nThis sub-application is just another standard FastAPI application, but this is the one that will be \"mounted\":\\n\"\"\"\nsubapi = FastAPI()\n\n\n@subapi.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n\n```\n\n----------------------------------------\n\nTITLE: Using Await with Third-Party Libraries in FastAPI\nDESCRIPTION: Shows how to properly use await with third-party libraries in an async path operation function. This pattern should be used when libraries support async/await operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresults = await some_library()\n```\n\n----------------------------------------\n\nTITLE: Basic Async Route Handler\nDESCRIPTION: Example showing basic async/await usage in a FastAPI route handler function that calls an async library\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Modifying item name in FastAPI endpoint\nDESCRIPTION: This Python code snippet shows a modification to the update_item function in FastAPI.  The original code is replaced with an alternative implementation using the item price.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n        ... \"item_name\": item.name ...\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n        ... \"item_price\": item.price ...\n```\n\n----------------------------------------\n\nTITLE: Reutilizando manejadores de excepciones predeterminados\nDESCRIPTION: Ejemplo de cómo importar y reutilizar los manejadores de excepciones predeterminados de FastAPI mientras se agrega funcionalidad personalizada.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\\nfrom fastapi.exception_handlers import (\\n    http_exception_handler,\\n    request_validation_exception_handler,\\n)\\nfrom fastapi.exceptions import RequestValidationError\\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\\n\\n\\napp = FastAPI()\\n\\n\\n@app.exception_handler(StarletteHTTPException)\\nasync def custom_http_exception_handler(request, exc):\\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\\n    return await http_exception_handler(request, exc)\\n\\n\\n@app.exception_handler(RequestValidationError)\\nasync def validation_exception_handler(request, exc):\\n    print(f\"OMG! The client sent invalid data!: {exc}\")\\n    return await request_validation_exception_handler(request, exc)\n```\n\n----------------------------------------\n\nTITLE: Reducing Model Duplication with Base Model\nDESCRIPTION: Creating a base model to reduce code duplication and simplify model inheritance in Pydantic\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    full_name: str = None\n\nclass UserIn(UserBase):\n    password: str\n\nclass UserOut(UserBase):\n    pass\n\nclass UserInDB(UserBase):\n    hashed_password: str\n```\n\n----------------------------------------\n\nTITLE: Required Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to define a required query parameter in FastAPI. By not providing a default value for the `needy` parameter, FastAPI will require it to be present in the query string.  If it's missing, FastAPI will automatically return an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: str, needy: str):\\n    return {\"item_id\": item_id, \"needy\": needy}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Context Manager Dependency with Yield\nDESCRIPTION: Demonstrate using context managers within a FastAPI dependency with yield and error handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_resource():\n    with open_resource() as resource:\n        try:\n            yield resource\n        finally:\n            resource.cleanup()\n```\n\n----------------------------------------\n\nTITLE: Importing File and UploadFile in FastAPI\nDESCRIPTION: This code snippet demonstrates how to import the File and UploadFile classes from FastAPI, which are essential for handling file uploads.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial001_an_py39.py hl[3] *}\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous FastAPI Route Handler\nDESCRIPTION: Example of defining a synchronous route handler in FastAPI using the regular def syntax. This is used when the function does not need to use await or perform asynchronous operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI app with Uvicorn in production\nDESCRIPTION: Command to run a FastAPI application using Uvicorn in production mode, without the reload option.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --host 0.0.0.0 --port 80\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Initializing New Language Translation Directory - Console\nDESCRIPTION: Command to generate a new translation directory for a new language using the docs.py script. Shows the process of creating initial translation files for Creole (ht).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\n```\n\n----------------------------------------\n\nTITLE: Importing Header in FastAPI\nDESCRIPTION: This code snippet imports the `Header` class from the `fastapi` module. This is a necessary step to declare header parameters in your FastAPI path operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Header\"\n```\n\n----------------------------------------\n\nTITLE: Adding Summary and Description to Path Operations in FastAPI\nDESCRIPTION: This snippet demonstrates how to add a summary and description to a FastAPI path operation.  The `summary` parameter provides a short summary of the operation, while the `description` parameter allows for a more detailed explanation.  Both are used in the OpenAPI schema and the interactive documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/items/\", summary=\"Create an item\")\nasync def create_item(name: str):\n    \"\"\"\n    Create an item with all the information:\n\n    - name: Each item must have a name\n    - description: A long description\n    - price: Must be non-negative\n    - tax: If the item is taxable\n    \"\"\"\n    return {\"name\": name}\n```\n\n----------------------------------------\n\nTITLE: Removing Default OpenAPI Schema Tags in FastAPI\nDESCRIPTION: Shows how to remove default tags from the OpenAPI schema for a path operation by using a form feed character.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/items/\",\n    tags=[\"items\"],\n    summary=\"Read Items\",\n    response_description=\"Successful Response\",\n    description=\"\\f\"\n)\ndef read_items():\n    return [\"Portal gun\", \"Plumbus\"]\n```\n\n----------------------------------------\n\nTITLE: Deprecating Path Operations in FastAPI\nDESCRIPTION: This snippet shows how to mark a FastAPI path operation as deprecated using the `deprecated` parameter.  Deprecated operations are marked as such in the interactive documentation, indicating that they should no longer be used.  This allows for a smoother transition when phasing out older functionality.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", deprecated=True)\nasync def read_item(item_id: str):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than or Equal in FastAPI (Python)\nDESCRIPTION: Example of using 'ge' (greater than or equal) numeric validation with Path in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nitem_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)]\n```\n\n----------------------------------------\n\nTITLE: Generic List Type (Python 3.9+)\nDESCRIPTION: Demonstrates type hints for lists using Python 3.9+ syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef process_items(items: list[str]):\n    for item in items:\n        print(item)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Response Class in FastAPI\nDESCRIPTION: Example showing how to configure ORJSONResponse as the default response class for a FastAPI application instance. This affects all path operations unless explicitly overridden.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI(default_response_class=ORJSONResponse)\n```\n\n----------------------------------------\n\nTITLE: Disabling Syntax Highlighting in Swagger UI with FastAPI\nDESCRIPTION: Code snippet showing how to disable syntax highlighting in Swagger UI by setting syntaxHighlight to False in the swagger_ui_parameters dictionary when creating a FastAPI app instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"syntaxHighlight\": False}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in FastAPI\nDESCRIPTION: Example of setting HTTP status code for a FastAPI path operation using status code constants from fastapi.status.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, status\n\napp = FastAPI()\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\n```\n\n----------------------------------------\n\nTITLE: Handling User Authentication in FastAPI\nDESCRIPTION: Retrieves user data from the database using the submitted username and checks for user existence. Raises an HTTPException if the user is not found.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import HTTPException, status\n\nuser_dict = fake_users_db.get(form_data.username)\nif not user_dict:\n    raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server with Live Reloading\nDESCRIPTION: Command to serve documentation locally with live reloading for development purposes. This enables instant preview of documentation changes at http://127.0.0.1:8008.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py live\n\n<span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008\n<span style=\"color: green;\">[INFO]</span> Start watching changes\n<span style=\"color: green;\">[INFO]</span> Start detecting changes\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX for TestClient in Python\nDESCRIPTION: Command to install HTTPX, which is required for using TestClient in FastAPI testing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install httpx\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Complex Model\nDESCRIPTION: Shows creating a complex nested model with multiple levels of relationships\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    image: Optional[Image] = None\n\nclass Offer(BaseModel):\n    name: str\n    items: List[Item]\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Description\nDESCRIPTION: This snippet shows how to add a description to a query parameter using the `description` argument in the `Query` function. The description is used for API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, title=\"Query string\", description=\"Query string for the items to search in the database that have a good match\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Python Dict Type Hints with Typing Module\nDESCRIPTION: This example demonstrates how to use the `Dict` type from the `typing` module to declare a dictionary with specific key and value types. The example uses `str` for keys and `float` for values, indicating that the dictionary maps string names to float prices.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Dict\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, price in prices.items():\n        print(item_name, price)\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with List and List[str] Type\nDESCRIPTION: This snippet shows the usage of `List[str]` type annotation instead of `list` for the query parameter. When using `List[str]`, FastAPI can perform type checking on the list elements.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query()):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: FastAPI Default Swagger UI Settings\nDESCRIPTION: This snippet displays the default configurations for Swagger UI that FastAPI utilizes. It includes settings like `filter`, `showExtensions`, `showCommonExtensions`, `displayOperationId`, `defaultModelsExpandDepth`, `defaultModelExpandDepth`, `defaultModelRendering`, `displayRequestDuration`, `docExpansion`, `showRequestPerEndpoint`, `deepLinking`, and `persistAuthorization`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsettings = {\n    \"filter\": \"\",\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n    \"displayOperationId\": False,\n    \"defaultModelsExpandDepth\": 1,\n    \"defaultModelExpandDepth\": 1,\n    \"defaultModelRendering\": \"example\",\n    \"displayRequestDuration\": False,\n    \"docExpansion\": \"none\",\n    \"showRequestPerEndpoint\": False,\n    \"deepLinking\": True,\n    \"persistAuthorization\": False,\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Minimum Length Validation\nDESCRIPTION: This snippet demonstrates how to use the `min_length` parameter of the `Query` class to enforce a minimum length constraint on a string query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Return Values in Dependencies\nDESCRIPTION: This code demonstrates that dependencies can return values, but those values are not used when the dependencies are passed via `dependencies` to the path operation decorator.  This allows re-use of existing dependencies (that might return a value) without needing to modify them, even if the returned value is not used in a specific path operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \\\"fake-super-secret-token\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\n    return  \\\"OK\\\" \n\nasync def verify_key(x_key: str = Header(...)):\n    if x_key != \\\"fake-super-secret-key\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\n    return \\\"OK\\\"\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Output from Jinja2 Template\nDESCRIPTION: Example of HTML rendered output from a Jinja2 template using a context dictionary with key-value pairs. Shows how template variables are replaced with actual data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nItem ID: 42\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Depends in FastAPI\nDESCRIPTION: Demonstrates how to import the Depends class and use it to inject dependencies into route handlers. Shows the basic syntax for declaring dependencies using Annotated type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Path Operation to FastAPI App\nDESCRIPTION: Demonstrates how to add a single path operation directly to the main FastAPI application, in addition to included routers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Models in FastAPI in Spanish\nDESCRIPTION: Example demonstrating how to instantiate and use Pydantic models in FastAPI, including direct instantiation and dictionary unpacking for model creation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server with CLI\nDESCRIPTION: This snippet demonstrates how to use the FastAPI CLI to start a development server for a FastAPI application. It shows the output of the command, including server information and logs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n\n  FastAPI  Starting development server 🚀\n\n             Searching for package file structure from directories with\n             __init__.py files\n             Importing from /home/user/code/awesomeapp\n\n   module  🐍 main.py\n\n     code  Importing the FastAPI app object from the module with the\n             following code:\n\n             from main import app\n\n      app  Using import string: main:app\n\n   server  Server started at http://127.0.0.1:8000\n   server  Documentation at http://127.0.0.1:8000/docs\n\n      tip  Running in development mode, for production use:\n             fastapi run\n\n             Logs:\n\n     INFO  Will watch for changes in these directories:\n             ['/home/user/code/awesomeapp']\n     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to\n             quit)\n     INFO  Started reloader process [383138] using WatchFiles\n     INFO  Started server process [383153]\n     INFO  Waiting for application startup.\n     INFO  Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Using lru_cache to create Settings only once\nDESCRIPTION: This code snippet demonstrates using `@lru_cache` to ensure that the `Settings` object is created only once. This is important for optimizing performance when reading from a file, such as a `.env` file, as it avoids reading the file multiple times.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings\n\napp = FastAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/items/\")\nasync def read_items(settings: Settings = Depends(get_settings)):\n    return {\"app_name\": settings.app_name, \"admin_email\": settings.admin_email}\n```\n\n----------------------------------------\n\nTITLE: Shortened Dependency Injection: Python\nDESCRIPTION: This snippet shows an alternative way of declaring the dependency. `Depends()` can be called with no parameters if a type annotation is present. The type annotation will be used for dependency injection.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def items(commons: CommonQueryParams = Depends()):\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in Exception Handler - Usage in FastAPI\nDESCRIPTION: This code snippet demonstrates how to use the exception handler defined in the previous step. It defines a route that intentionally raises an exception. The exception handler then catches this exception, accesses the request body, and returns a JSON response with an error message and the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(request: Request):\n    raise ValueError(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Parameter Conversion in FastAPI\nDESCRIPTION: This snippet illustrates how FastAPI automatically converts query parameters of type `bool`. It demonstrates that various string representations (e.g., \"1\", \"True\", \"true\", \"on\", \"yes\") will be interpreted as `True`, while others will be `False`. This happens automatically without requiring explicit parsing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: str, short: bool = False):\\n    return {\"item_id\": item_id, \"short\": short}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Underscore Conversion in FastAPI Header\nDESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in FastAPI header parameters by setting `convert_underscores` to `False`.  This is useful when you need to preserve the original header name with underscores.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_user_agent: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"Strange-User-Agent\": strange_user_agent}\"\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP PUT Route with Custom Status Code in FastAPI\nDESCRIPTION: This snippet demonstrates how to set up a PUT route using FastAPI's @app.put() decorator, allowing you to specify a successful response status code. This is useful for updating existing items.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\", status_code=status.HTTP_200_OK)\\nasync def update_item(item_id: int, item: Item):\\n    return {\"item_id\": item_id, **item.dict()}\n```\n\n----------------------------------------\n\nTITLE: Using Complex Dependencies in FastAPI Route\nDESCRIPTION: This snippet shows how to use a complex dependency in a FastAPI route operation. The route depends on query_or_cookie_extractor, which in turn depends on query_extractor.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_query(query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]):\n```\n\n----------------------------------------\n\nTITLE: Python List Type Hint with typing\nDESCRIPTION: This example demonstrates how to use the `List` type from the `typing` module to specify that a variable is a list of strings (`List[str]`). This allows editors to provide specific support for string operations when working with the list elements.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import List\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Using SPDX License Identifier in FastAPI Metadata\nDESCRIPTION: This snippet shows how to use SPDX license identifiers instead of URLs for license information in FastAPI applications. This feature is available since OpenAPI 3.1.0 and FastAPI 0.99.0.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlicense_info={\n    \"name\": \"Apache 2.0\",\n    \"identifier\": \"Apache-2.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Path and Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to mix path and query parameters within a single FastAPI route. FastAPI automatically determines which parameters are part of the path and which are query parameters based on their declaration within the function signature, without needing a specific order.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Union\\n\\nfrom fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_user_item(\\n    item_id: str, needy: str, q: Union[str, None] = None, short: bool = False\\n):\\n    item = {\"item_id\": item_id, \"needy\": needy, \"short\": short}\\n    if q:\\n        item.update({\"q\": q})\\n    return item\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Query Parameter from OpenAPI Schema in FastAPI (Python 3.10+)\nDESCRIPTION: Shows how to exclude a query parameter from the OpenAPI documentation by setting include_in_schema=False. This is useful for parameters that should be hidden from public documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    return {\"hidden_query\": \"Not found\"}\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Non-Annotated Path Parameters\nDESCRIPTION: Shows how to handle parameter ordering when using Path without Annotated, placing the required query parameter before the path parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: Annotated[str, Path()],\n    item_id: int,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Float Numeric Validation in FastAPI (Python)\nDESCRIPTION: Shows how to use numeric validations with float values in FastAPI, using 'gt' and 'lt'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsize: Annotated[float, Query(gt=0, lt=10.5)]\n```\n\n----------------------------------------\n\nTITLE: Route Operation with Security Scopes\nDESCRIPTION: Demonstrates how to declare required scopes for a route operation using the Security class from FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n```\n\n----------------------------------------\n\nTITLE: Using Regular Functions for Non-Async Libraries in FastAPI\nDESCRIPTION: Shows how to define a regular (non-async) path operation function when working with libraries that don't support async/await. This is common with many database libraries.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Servers in FastAPI\nDESCRIPTION: Example of configuring additional servers in FastAPI's OpenAPI schema to enable interaction with different environments (staging and production) alongside the proxy path.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nopenapi_tags = [\n    {\"name\": \"items\", \"description\": \"Operaciones con items\"}\n]\nservers = [\n    {\"url\": \"https://stag.example.com\", \"description\": \"Entorno de pruebas\"},\n    {\"url\": \"https://prod.example.com\", \"description\": \"Entorno de producción\"},\n]\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Dict Body in FastAPI\nDESCRIPTION: This snippet illustrates how to accept an arbitrary dictionary as the request body in FastAPI.  It defines a function that takes a `dict[int, float]` as a parameter, allowing the API to receive a dictionary with integer keys and float values. Note that JSON only supports string keys, but Pydantic will automatically convert numeric strings to integers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Dict\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.post(\"/weights/\")\nasync def create_weights(weights: Dict[int, float]):\n    return weights\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Response Class in FastAPI\nDESCRIPTION: Demonstrates how to set a default response class for all routes in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI(default_response_class=ORJSONResponse)\n```\n\n----------------------------------------\n\nTITLE: Using Requests Library for HTTP GET Request\nDESCRIPTION: Demonstrates how to make a GET request using the Requests library, which inspired FastAPI's intuitive API design.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresponse = requests.get(\"http://example.com/some/url\")\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart for Form Handling in Python\nDESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling form data in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Disable Syntax Highlighting in Swagger UI with FastAPI\nDESCRIPTION: This snippet demonstrates how to disable syntax highlighting in Swagger UI by setting `syntaxHighlight` to `False` in the `swagger_ui_parameters` dictionary when creating a FastAPI app. This configuration is passed directly to the Swagger UI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n```\n\n----------------------------------------\n\nTITLE: Creating a basic FastAPI application with async def\nDESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints: `/` and `/items/{item_id}`.  The `/` endpoint returns a JSON response with a \"Hello\": \"World\" message. The `/items/{item_id}` endpoint takes an item ID (integer) and an optional query parameter `q` (string or None), and returns a JSON response containing the item ID and the value of `q`.  The use of `async def` allows the endpoints to handle requests concurrently.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Excluding Query Parameter from Schema\nDESCRIPTION: This code shows how to exclude a query parameter from the generated API schema using `include_in_schema=False` within the `Query` function. This makes the parameter invisible in the documentation and OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(hidden_query: Union[str, None] = Query(default=None, include_in_schema=False)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if hidden_query:\n        results.update({\"hidden_query\": hidden_query})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Embedding a Single Body Parameter in FastAPI (Python)\nDESCRIPTION: Shows how to use Body(embed=True) to embed a single body parameter 'item' in its own JSON object in the request body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def update_item(item: Item = Body(embed=True)):\n```\n\n----------------------------------------\n\nTITLE: Reordering Parameters Trick with * in FastAPI\nDESCRIPTION: This snippet demonstrates using the `*` argument in a function signature to force all subsequent arguments to be keyword arguments.  This allows you to reorder parameters such that a query parameter without a default can come before a path parameter defined with `Path`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\\n    return {\"item_id\": item_id, \"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja2 via pip\nDESCRIPTION: Command to install the Jinja2 template engine using pip in the command line. Ensure that a virtual environment is activated before running this command.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install jinja2\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous FastAPI Application in Python\nDESCRIPTION: This code snippet shows the asynchronous version of the basic FastAPI application, using async/await syntax for both the root endpoint and the items endpoint, enabling non-blocking operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Using HttpUrl Type for URL Validation\nDESCRIPTION: Importing and using Pydantic's HttpUrl type to validate that a string is a proper URL, with automatic documentation in JSON Schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseModel, HttpUrl\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Request Parameter Functions\nDESCRIPTION: Shows how to import all the special parameter functions from the FastAPI framework. These functions enable extraction of data from different parts of the request in path operation functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Body, Cookie, File, Form, Header, Path, Query\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Uvicorn server manually\nDESCRIPTION: Example showing how to manually run a FastAPI application using the Uvicorn ASGI server. The command specifies the import path to the app object and sets the host and port for the server.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --host 0.0.0.0 --port 80\n```\n\n----------------------------------------\n\nTITLE: Excluding Path Operation from OpenAPI Schema in FastAPI\nDESCRIPTION: Demonstrates how to exclude a path operation from the OpenAPI schema generation using the include_in_schema parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", include_in_schema=False)\n```\n\n----------------------------------------\n\nTITLE: Using Class-Based Dependency with Type Hinting\nDESCRIPTION: This example demonstrates using a class-based dependency and omitting the explicit class name in `Depends`. It illustrates a cleaner syntax where the type hint on the parameter informs FastAPI of the dependency to inject.  This reduces redundancy.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\nfrom typing import Optional\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    return commons\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI in Development with CLI\nDESCRIPTION: This command starts the FastAPI application in development mode using the `fastapi dev` command. It enables automatic reloading of the server on code changes. The command expects the path to the main Python file containing the FastAPI app instance as an argument.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/fastapi-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ <font color=\"#4E9A06\">fastapi</font> dev <u style=\"text-decoration-style:solid\">main.py</u>\n```\n\n----------------------------------------\n\nTITLE: Forbidding Extra Cookies with Pydantic Configuration in FastAPI\nDESCRIPTION: This code snippet demonstrates how to forbid extra cookies using Pydantic's configuration in a FastAPI application. It defines a Pydantic model with `extra = 'forbid'` in the `Config` class, which causes Pydantic to raise an error if any extra cookies are sent in the request that are not defined in the model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\nfrom typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Ads(BaseModel):\n    dark_mode: Union[bool, None] = None\n    items_per_page: int\n\n    class Config:\n        extra = \"forbid\"\n\n\n@app.get(\"/\")\nasync def read_ads(ads: Ads = Depends()):\n    return ads\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary as Response\nDESCRIPTION: This code demonstrates how to declare a response consisting of a dictionary with specific key and value types using `typing.Dict`.  Useful in situations where the keys/attributes are not known in advance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Dict\\n\\n\\nasync def read_items() -> Dict[str, int]:\\n    return {\\n        \"foo\": 1,\\n        \"bar\": 2,\\n    }\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Python Optional Type Hint with typing\nDESCRIPTION: This example uses `Optional` from the `typing` module to indicate that a variable can be either a string (`str`) or `None`.  `Optional[str]` is equivalent to `Union[str, None]`, which signals to the editor that the variable might not always have a string value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Optional\n\ndef get_name(name: Optional[str] = None):\n    if name:\n        return f\"Name is {name}\"\n    return \"No name provided\"\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Strawberry GraphQL with FastAPI\nDESCRIPTION: This code example demonstrates how to integrate Strawberry GraphQL with FastAPI by creating a GraphQL schema with a Query type that has a hello resolver, and then mounting the GraphQL ASGI app to the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/graphql.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom fastapi import FastAPI\nfrom strawberry.asgi import GraphQL\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n\n\napp = FastAPI()\n\n# Crear una API GraphQL usando Strawberry\ngraphql_app = GraphQL(schema)\n\n# Agregar la API de GraphQL como una subAPIication\napp.add_route(\"/graphql\", graphql_app)\napp.add_websocket_route(\"/graphql\", graphql_app)\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Multiple Workers using Uvicorn directly\nDESCRIPTION: Example command for running a FastAPI application with 4 worker processes using the Uvicorn CLI directly. This specifies the host, port, and the number of worker processes to utilize multiple CPU cores.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n```\n\n----------------------------------------\n\nTITLE: Defining GET Route in FastAPI\nDESCRIPTION: Shows how to define a GET route in FastAPI. This snippet is used to compare the API design of FastAPI with that of the Requests library, highlighting the similarities in simplicity and intuitiveness.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Parameters in FastAPI\nDESCRIPTION: Demonstrates how to use boolean query parameters. The 'short' parameter will be converted to a boolean value based on the string provided in the URL (1, True, true, on, yes are all converted to True).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(item_id: str, short: bool = False):\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Docker Command Configuration\nDESCRIPTION: Docker CMD configuration for running a FastAPI application using the exec form, which ensures proper application shutdown and lifespan event handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Importing BackgroundTasks in FastAPI\nDESCRIPTION: Shows how to import the BackgroundTasks class from FastAPI framework to enable background task functionality in path operation functions or dependency functions\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/background.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import BackgroundTasks\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Headers in FastAPI\nDESCRIPTION: Example showing how to receive duplicate headers by using a list type annotation. This allows the route function to receive multiple values for the same header.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n```\n\n----------------------------------------\n\nTITLE: Creating User Database Model\nDESCRIPTION: Generate a Pydantic model representing user database entry with hashed password and user details\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nUserInDB(**user_dict)\n```\n\n----------------------------------------\n\nTITLE: Declaring Cookie Parameters in FastAPI (Python)\nDESCRIPTION: This example demonstrates how to declare a cookie parameter named 'ads_id' using the Cookie class. It shows that you can set default values and apply validations similar to Query and Path parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/cookie-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n```\n\n----------------------------------------\n\nTITLE: Dictionary Type Annotation with String and Float\nDESCRIPTION: This snippet demonstrates how to use a Python dictionary with string keys and float values. This allows for dynamic data structures within Pydantic models, with keys that are strings and corresponding values that are floating-point numbers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"weights: dict[str, float] | None = None\"\n```\n\n----------------------------------------\n\nTITLE: Optional File Upload in FastAPI\nDESCRIPTION: This snippet demonstrates how to make a file upload optional by setting a default value of `None`.  This allows the API endpoint to function correctly even if the client doesn't provide a file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, File\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_file(file: Annotated[UploadFile | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"filename\": file.filename}\"\n```\n\n----------------------------------------\n\nTITLE: Importing TrustedHostMiddleware in FastAPI\nDESCRIPTION: Shows how to import the trusted host middleware from FastAPI. This middleware ensures requests are only served from trusted hosts defined in your application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command\nDESCRIPTION: Terminal command for running a Docker container with port mapping\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name mycontainer -p 80:80 myimage\n```\n\n----------------------------------------\n\nTITLE: Definiendo endpoint de token OAuth2 en FastAPI\nDESCRIPTION: Crea un endpoint /token que acepta credenciales de usuario y devuelve un token de acceso si la autenticación es exitosa.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/token\")\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n```\n\n----------------------------------------\n\nTITLE: Nested Image Model Definition\nDESCRIPTION: Defines a Pydantic model for Image with URL and name fields\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Image:\n    url: str\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than or Equal\nDESCRIPTION: Demonstrates how to use the ge parameter with Path to validate that a path parameter is greater than or equal to a specific value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Query Parameters\nDESCRIPTION: JSON error response returned when extra query parameters are provided but forbidden.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"query\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Uvicorn Launch Command for TLS Proxy Configuration\nDESCRIPTION: A modified Docker CMD instruction that includes the --proxy-headers flag for proper handling of HTTPS requests when using a TLS termination proxy like Nginx or Traefik.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Using HttpUrl in FastAPI\nDESCRIPTION: This code snippet demonstrates the use of Pydantic's `HttpUrl` type for the `url` field in the `Image` model. This ensures that the string value is a valid URL and will be validated as such.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom pydantic import BaseModel, HttpUrl\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: list = []\n    image: Optional[Image] = None\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Pydantic User Model\nDESCRIPTION: Shows how to instantiate a Pydantic model using direct initialization and dictionary unpacking\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Adding Type Hints to Function Parameters in Python\nDESCRIPTION: This example shows how to add type hints to function parameters, specifying that both parameters are strings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAPI operationId in FastAPI Path Operation\nDESCRIPTION: Demonstrates how to set a custom OpenAPI operationId for a path operation using the operation_id parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\n```\n\n----------------------------------------\n\nTITLE: Union Type Hints (Python 3.10+)\nDESCRIPTION: Demonstrates declaring a variable that can be of multiple types using the new union syntax\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nitem: int | str = 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Metadata and Routes\nDESCRIPTION: Demonstrates how to set up tag metadata for API documentation and apply tags to path operations in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://fastapi.tiangolo.com/\",\n        },\n    },\n]\n\napp = FastAPI(openapi_tags=tags_metadata)\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [\"Rick\", \"Morty\"]\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [\"Portal Gun\", \"Plumbus\"]\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Server Configuration with Path Prefix\nDESCRIPTION: JSON configuration showing how to declare server URL with a path prefix for OpenAPI schema\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.1.0\",\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Path from OpenAPI Schema in FastAPI\nDESCRIPTION: Demonstrates how to exclude a specific path from the OpenAPI schema (and thus from automatic documentation) using the include_in_schema parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", include_in_schema=False)\n```\n\n----------------------------------------\n\nTITLE: Including Admin Router in Main FastAPI Application\nDESCRIPTION: Demonstrates how to include a specific router with custom configuration into the main FastAPI application using app.include_router() method\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{!../../docs_src/bigger_applications/app/main.py!}\n```\n\n----------------------------------------\n\nTITLE: Self-Hosting Static Files for FastAPI Documentation\nDESCRIPTION: Configures FastAPI to serve and use locally hosted static files for Swagger UI and ReDoc documentation. This includes mounting a StaticFiles instance and creating custom path operations for documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom fastapi.staticfiles import StaticFiles\n\napp = FastAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Changing Response Status Code in FastAPI Python\nDESCRIPTION: This code snippet demonstrates how to use a Response parameter in a FastAPI path operation function to set a custom status code. It shows creating a new item with a 201 CREATED status while still using response_model for data filtering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response, status\n\napp = FastAPI()\n\n@app.post(\"/items/\", response_model=Item, status_code=200)\ndef create_item(item: Item, response: Response):\n    if item.id in stored_items:\n        return stored_items[item.id]\n    stored_items[item.id] = item\n    response.status_code = status.HTTP_201_CREATED\n    return item\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from FastAPI Endpoint\nDESCRIPTION: This JSON snippet shows the expected response from the root endpoint of the FastAPI application. It returns a simple message in JSON format.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Annotating a Response Subclass in FastAPI\nDESCRIPTION: This example shows how to annotate a route function with a specific Response subclass. It uses RedirectResponse as the return type annotation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\")\nasync def redirect_typer() -> RedirectResponse:\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional OpenAPI in FastAPI with Environment Variables\nDESCRIPTION: This snippet demonstrates how to conditionally enable or disable OpenAPI documentation in FastAPI applications using Pydantic settings and environment variables. It declares a Settings class with an openapi_url configuration that can be controlled through the OPENAPI_URL environment variable.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = FastAPI(openapi_url=settings.openapi_url)\n\n```\n\n----------------------------------------\n\nTITLE: Full Update with PUT Method\nDESCRIPTION: Demonstrates how to use HTTP PUT to replace entire item data, converting input data to JSON-compatible format using jsonable_encoder\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Tutorial snippet for full update with PUT\n```\n\n----------------------------------------\n\nTITLE: Basic Python Async Function with Await\nDESCRIPTION: Demonstrates how to use the await keyword in Python to handle asynchronous operations. The code shows a function that asynchronously retrieves burger data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nburgers = await get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Actualizando un Héroe con FastAPI y SQLModel en Python\nDESCRIPTION: Implementa un endpoint PATCH para actualizar un héroe existente. Recibe un HeroUpdate, actualiza el Hero en la base de datos, y devuelve un HeroPublic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate):\n    with Session(engine) as session:\n        hero_db = session.get(Hero, hero_id)\n        if not hero_db:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        hero_data = hero.model_dump(exclude_unset=True)\n        hero_db.sqlmodel_update(hero_data)\n        session.add(hero_db)\n        session.commit()\n        session.refresh(hero_db)\n        return hero_db\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example\nDESCRIPTION: Sample JSON response demonstrating query parameter and path parameter handling\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Default List for Multiple Value Query Parameter in FastAPI\nDESCRIPTION: This code shows how to set a default list of values for a query parameter that can accept multiple values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nq: List[str] = Query(default=[\"foo\", \"bar\"])\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI app with Hypercorn using Trio\nDESCRIPTION: Command to run a FastAPI application using Hypercorn with Trio as the worker class, enabling Trio-based asynchronous execution.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ hypercorn main:app --worker-class trio\n```\n\n----------------------------------------\n\nTITLE: Defining a Startup Event Handler in FastAPI (Python)\nDESCRIPTION: This example demonstrates how to create a startup event handler function in FastAPI. The function is decorated with @app.on_event(\"startup\") and will be executed when the application starts.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"startup\")\ndef startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Documentation UI URLs in FastAPI\nDESCRIPTION: This snippet demonstrates how to customize the URLs for Swagger UI and ReDoc documentation interfaces. In this example, Swagger UI is moved to '/documentation' and ReDoc is disabled.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n```\n\n----------------------------------------\n\nTITLE: Defining a Pydantic Model in Python 3.9+\nDESCRIPTION: This code snippet defines a Pydantic model using Python 3.9 syntax. The `User` model includes fields with type hints and default values.  Pydantic automatically validates and converts data to the specified types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"from datetime import datetime\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = 'John Doe'\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, '2', b'3'],\n}\n\nuser = User(**external_data)\nprint(user.id)\nprint(user.friends)\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Body Error Handling in Python\nDESCRIPTION: Shows how to wrap the request body access in a try/except block to handle potential errors. If an error occurs, it creates a new Request object with the error information.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def custom_route_handler(request: Request) -> Response:\n    try:\n        body = await request.body()\n    except Exception as e:\n        body = bytes(str(e), encoding=\"utf-8\")\n        request = Request(request.scope, receive=lambda: body)\n    return await original_route_handler(request)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI and Documentation URLs\nDESCRIPTION: Customize OpenAPI schema and documentation UI URLs, including paths for Swagger and ReDoc\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    openapi_url=\"/api/v1/openapi.json\",\n    docs_url=\"/documentation\",\n    redoc_url=None\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata for Tags in FastAPI\nDESCRIPTION: This snippet demonstrates how to add metadata for tags used to group path operations in FastAPI. It includes descriptions with Markdown formatting and links to external documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://fastapi.tiangolo.com/\",\n        },\n    },\n]\n\napp = FastAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: Command to start FastAPI development server with a main.py file using uvicorn for local development\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Security Scopes Validation Implementation\nDESCRIPTION: Shows the implementation of scope validation logic using SecurityScopes, including error handling and scope checking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def get_current_user(\n    security_scopes: SecurityScopes,\n    token: Annotated[str, Depends(oauth2_scheme)]\n) -> User:\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n```\n\n----------------------------------------\n\nTITLE: Using Typed Lists in Pydantic Models for FastAPI\nDESCRIPTION: This example demonstrates how to import and use a typed List from the typing module to specify the type of elements in a list field of a Pydantic model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\ntags: List[str]\n```\n\n----------------------------------------\n\nTITLE: Using a Set for Unique Items in Python 3.10+\nDESCRIPTION: Declaration of a field as a set of strings, which ensures all elements are unique even if duplicates are provided in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntags: set[str]\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPConnection from FastAPI\nDESCRIPTION: Shows how to import the HTTPConnection class from fastapi.requests module. This class is used when defining dependencies that need to be compatible with both HTTP and WebSocket connections.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/httpconnection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.requests import HTTPConnection\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter in FastAPI\nDESCRIPTION: This code snippet shows how to define an optional query parameter in a FastAPI endpoint by setting its default value to `None`. The `q` parameter is optional and will be `None` if not provided in the request. The function then returns a dictionary containing the `item_id` and the optional query `q`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    return {\"item_id\": item_id, \"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Path and Annotated in FastAPI (Python)\nDESCRIPTION: Import Path from fastapi and Annotated from typing for use with path parameters in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation for Float Parameters\nDESCRIPTION: Demonstrates numeric validation for floating-point numbers, showing how to use gt and lt constraints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsize: float = Path(gt=0, lt=10.5)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated regex Parameter Instead of pattern (Pydantic v1)\nDESCRIPTION: Shows the deprecated approach using the regex parameter instead of pattern for regular expression validation with Pydantic v1.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n    ] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Definition\nDESCRIPTION: This example demonstrates a simple Pydantic model.  Pydantic models are classes that define the structure and types of data. When an instance of the class is created with data, Pydantic validates and converts the data to the declared types, providing data validation and type safety.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from datetime import datetime\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name = 'John Doe'\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    'id': '123',\n    'signup_ts': '2019-06-01 12:22',\n    'friends': [1, '2', b'3'],\n}\n\nuser = User(**external_data)\nprint(user.id)\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic root_path Server in OpenAPI Schema\nDESCRIPTION: Example showing how to disable the automatic inclusion of a server using the root_path in the OpenAPI schema by setting root_path_in_servers parameter to False.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nopenapi_tags = [\n    {\"name\": \"items\", \"description\": \"Operaciones con items\"}\n]\nservers = [\n    {\"url\": \"https://stag.example.com\", \"description\": \"Entorno de pruebas\"},\n    {\"url\": \"https://prod.example.com\", \"description\": \"Entorno de producción\"},\n]\napp = FastAPI(openapi_tags=openapi_tags, servers=servers, root_path_in_servers=False)\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Response Class\nDESCRIPTION: Shows how to import the Response class from FastAPI. This class can be used to customize HTTP responses with headers, cookies, and other response data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Response\n```\n\n----------------------------------------\n\nTITLE: FastAPI Callback Path Operation Definition\nDESCRIPTION: This snippet defines a path operation within the callback router, showcasing how to document the expected request body and response model for the callback API. The path uses an OpenAPI expression to dynamically construct the URL based on the original request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import APIRouter, FastAPI, Query\nfrom pydantic import BaseModel, Url\n\napp = FastAPI()\n\n\ninvoices_callback_router = APIRouter()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Optional[str] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\n@invoices_callback_router.post(\"/invoices/{$request.body.id}\", response_model=InvoiceEventReceived)\nasync def invoice_callback(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url = Query(\n        ...,\n        description=\"URL to send notifications when the invoice is processed.\",\n    ),\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a FastAPI GET Endpoint\nDESCRIPTION: Shows how to create a GET endpoint in FastAPI that returns a JSON response, highlighting the similarities with the Requests library syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Input Model Configuration in FastAPI Endpoint\nDESCRIPTION: Demonstrates using the Pydantic model as an input parameter in a FastAPI route, showing how optional fields are handled\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Cookie Parameters with Pydantic Model in FastAPI\nDESCRIPTION: Demonstrates how to create a Pydantic model to define cookie parameters in FastAPI. The example shows a model with two cookie parameters: ads_id and session_token.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CookieModel(BaseModel):\n    ads_id: str\n    session_token: str\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[CookieModel, Cookie()]):\n    return cookies\n```\n\n----------------------------------------\n\nTITLE: Custom OpenAPI Schema without Pydantic in FastAPI\nDESCRIPTION: This snippet illustrates how to define a custom OpenAPI schema for a path operation without relying on Pydantic for request parsing. It reads raw request data as bytes used for a specific schema definition.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npath_operation_function(openapi_extra={\"requestBody\": {\"content\": {\"application/x-yaml\": {\"schema\": {\"type\": \"object\"}}}}})\n```\n\n----------------------------------------\n\nTITLE: Using Field with Model Attributes\nDESCRIPTION: Demonstrates how to use Field to declare validations and metadata for model attributes in a Pydantic model\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(default=None, title=\"Description\", max_length=300)\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Required Value and None\nDESCRIPTION: This code demonstrates using `None` as default value, while declaring that the field cannot accept a `None` value. FastAPI will raise an error if `None` is passed to the parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Creating Pydantic User Model in FastAPI\nDESCRIPTION: Defines a Pydantic User model with username and email for authentication and user representation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Basic Optional Query Parameter with Type Hint\nDESCRIPTION: Demonstrates declaring an optional query parameter with type hint and None default value in a FastAPI application\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = None\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than or Equal\nDESCRIPTION: Demonstrates how to validate path parameters with numeric constraints using ge (greater than or equal)\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nitem_id: int = Path(ge=1)\n```\n\n----------------------------------------\n\nTITLE: SwaggerUI HTML Generation Function in FastAPI\nDESCRIPTION: Function to generate custom Swagger UI HTML documentation page with OpenAPI specifications. Allows configuring Swagger UI with custom parameters and OAuth2 settings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nget_swagger_ui_html\n```\n\n----------------------------------------\n\nTITLE: Adding Min Length Validation to Query Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to add both min_length and max_length validations to a query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nq: str = Query(default=None, min_length=3, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI with License Identifier - Python\nDESCRIPTION: This code snippet shows how to set the license information using the identifier field instead of the url in the FastAPI application metadata. This is available since OpenAPI 3.1.0 and FastAPI 0.99.0.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlicense_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Instantiation with Type Conversion\nDESCRIPTION: This code shows how to instantiate Pydantic models using both keyword arguments and dictionary unpacking. It demonstrates that Pydantic automatically converts strings to dates based on the model's type annotations. This highlights Pydantic's ability to perform type validation and conversion during object creation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/features.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n```\n\n----------------------------------------\n\nTITLE: Basic Async Function Call Example in Python\nDESCRIPTION: Example showing how to call an async third-party library function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresults = await some_library()\n```\n\n----------------------------------------\n\nTITLE: Using Query for Parameter Validation in FastAPI\nDESCRIPTION: This code shows how to use the Query class to add a max_length validation to the 'q' parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(default=None, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Using PlainTextResponse in FastAPI\nDESCRIPTION: Example of returning plain text content from a FastAPI endpoint by setting PlainTextResponse as the response_class parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Relative Import from Parent Package\nDESCRIPTION: Shows importing a module using two dots (..) to navigate to the parent package and locate a module\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ..dependencies import get_token_header\n```\n\n----------------------------------------\n\nTITLE: Using Function Names as OpenAPI operationId in FastAPI\nDESCRIPTION: Shows how to automatically use function names as OpenAPI operationIds by iterating through all routes and updating their operation_id.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRoute\n\napp = FastAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\ndef use_route_names_as_operation_ids(app: FastAPI) -> None:\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items' for the first route\n\nuse_route_names_as_operation_ids(app)\n```\n\n----------------------------------------\n\nTITLE: Dictionary with Type Parameters\nDESCRIPTION: Shows how to define a dictionary with specific types for keys and values\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef create_weights(weights: dict[int, float]):\n    return weights\n```\n\n----------------------------------------\n\nTITLE: Copying Single File in Dockerfile\nDESCRIPTION: This command copies the `main.py` file from the current directory to the `/code` directory inside the Docker image. This is used when the FastAPI application consists of a single file instead of a directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"COPY ./main.py /code/\"\n```\n\n----------------------------------------\n\nTITLE: Defining a List Field in a Pydantic Model in Python 3.10+\nDESCRIPTION: Declaration of a Pydantic model field as a Python list without specifying element types, allowing any type of elements in the list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntags: list\n```\n\n----------------------------------------\n\nTITLE: OAuth2PasswordBearer Initialization in FastAPI\nDESCRIPTION: This code snippet initializes the OAuth2PasswordBearer for handling password-based OAuth2 flows in a FastAPI application. It defines the `/token` endpoint where users can exchange their username and password for an access token. The token URL specifies the endpoint for obtaining the token.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\"\n```\n\n----------------------------------------\n\nTITLE: Dataclasses in FastAPI response_model Parameter\nDESCRIPTION: This snippet illustrates the use of dataclasses as response models in FastAPI. By passing a dataclass to the 'response_model' parameter, it is automatically converted to a Pydantic dataclass, enabling it to appear in the API documentation interface.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{* ../../docs_src/dataclasses/tutorial002.py hl[1,7:13,19] *}\n```\n\n----------------------------------------\n\nTITLE: Using Annotated with Query and Path in FastAPI (Python)\nDESCRIPTION: Shows how to use Annotated with Query and Path for parameter ordering in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(q: Annotated[str, Query()], item_id: Annotated[int, Path()]):\n```\n\n----------------------------------------\n\nTITLE: Combinando Información de Response en FastAPI\nDESCRIPTION: Este snippet ilustra cómo combinar información de response de múltiples fuentes, incluyendo response_model, status_code y responses en FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Class Dependency in FastAPI Path Operation Function\nDESCRIPTION: This code demonstrates how to use the 'CommonQueryParams' class as a dependency in a FastAPI path operation function. It shows both the full syntax and a shortcut provided by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    return {\"message\": \"Hello World\", \"params\": commons}\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic Field\nDESCRIPTION: Imports the `Field` class from the `pydantic` library. This allows the user to define data validation and metadata for Pydantic model attributes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from pydantic import Field\"\n```\n\n----------------------------------------\n\nTITLE: Selective Field Inclusion/Exclusion\nDESCRIPTION: Shows how to include or exclude specific fields from the response using response_model_include and response_model_exclude\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\", response_model=Item, response_model_include={\"name\", \"description\"})\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema with Automatically Added root_path Server\nDESCRIPTION: JSON example showing how FastAPI automatically inserts a server with the root_path value at the beginning of the servers list in the OpenAPI schema.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.1.0\",\n    // Más cosas aquí\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Entorno de pruebas\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Entorno de producción\"\n        }\n    ],\n    \"paths\": {\n            // Más cosas aquí\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI URL in FastAPI\nDESCRIPTION: This example demonstrates how to configure the OpenAPI URL in a FastAPI application using the `openapi_url` parameter.  By default, the OpenAPI schema is served at `/openapi.json`.  This example shows how to change it to `/api/v1/openapi.json`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfrom fastapi import FastAPI\n\napp = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Async Test Function with pytest.mark.anyio\nDESCRIPTION: Example of an asynchronous test function using pytest and AnyIO marker to test a FastAPI application\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@pytest.mark.anyio\nasync def test_read_main(test_app):\n    async with AsyncClient(app=app, base_url=\"http://test\") as client:\n        response = await client.get(\"/\")\n        assert response.status_code == 200\n        assert response.json() == {\"Hello\": \"World\"}\n```\n\n----------------------------------------\n\nTITLE: Deprecating FastAPI Endpoints\nDESCRIPTION: Shows how to mark a FastAPI path operation as deprecated using the deprecated parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", deprecated=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Response with Content, Status Code, Headers, and Media Type\nDESCRIPTION: This example shows how to create a basic `Response` object with custom content, status code, headers, and media type.  It demonstrates the most fundamental way to customize a response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\nfrom starlette.responses import PlainTextResponse\n\napp = FastAPI()\n\nitems = {\n    \"foo\": {\"name\": \"Foo\"},\n    \"bar\": {\"name\": \"Bar\"},\n}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        return Response(content=\"Item not found\", status_code=404)\n    return items[item_id]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional OpenAPI Servers in FastAPI\nDESCRIPTION: This snippet shows how to define additional servers in the OpenAPI schema alongside the automatic server from root_path. This allows the docs UI to interact with multiple environments like staging and production.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Parameter Conversion in FastAPI\nDESCRIPTION: This snippet shows how to declare a boolean query parameter 'short' in FastAPI. The framework will automatically convert various string inputs to boolean values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(item_id: str, short: bool = False):\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than and Less Than or Equal\nDESCRIPTION: Shows how to apply more complex numeric constraints using gt (greater than) and le (less than or equal)\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nitem_id: int = Path(gt=0, le=1000)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Operation ID in FastAPI Path Operation\nDESCRIPTION: Demonstrates how to set a custom operationId for a FastAPI path operation using the operation_id parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\n```\n\n----------------------------------------\n\nTITLE: Deprecating Query Parameters in FastAPI (Python 3.10+)\nDESCRIPTION: Demonstrates how to mark a query parameter as deprecated using deprecated=True in the Query class. The parameter will still work but will be visually indicated as deprecated in the API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Embedding Single Body Parameter\nDESCRIPTION: Forcing a single body parameter to be embedded in a nested JSON structure\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nitem: Item = Body(embed=True)\n```\n\n----------------------------------------\n\nTITLE: Optional File Upload - Python FastAPI\nDESCRIPTION: Implementation of optional file upload functionality using None as default value\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes | None = File(default=None)\n):\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile | None = None\n):\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Query Parameter That Can Be None in FastAPI\nDESCRIPTION: This snippet shows how to declare a query parameter that is required but can accept None as a value, using ellipsis (...) as the default value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(min_length=3)] = ...\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Exceptions\nDESCRIPTION: Shows how to import HTTPException and WebSocketException from the FastAPI framework for handling error responses and request termination.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import HTTPException, WebSocketException\n```\n\n----------------------------------------\n\nTITLE: Python hl_lines example for FastAPI Response Model\nDESCRIPTION: The code snippet provides a sample FastAPI response using Pydantic, illustrating how to include parameters with default values and manage response data display. It highlights the use of response model decorators to exclude unset defaults and adjust the JSON output.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n{\"name\": \"Baz\",\n\"description\": None,\n\"price\": 50.2,\n\"tax\": 10.5,\n\"tags\": []}\n```\n\n----------------------------------------\n\nTITLE: Generic Types Example (Python 3.8+)\nDESCRIPTION: Shows type hints for list using typing.List in Python 3.8+.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Values for Query Parameter in FastAPI\nDESCRIPTION: This snippet demonstrates how to handle multiple values for a single query parameter using List[str].\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nq: List[str] = Query(default=None)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification Example from FastAPI - JSON\nDESCRIPTION: This code snippet provides an example of the OpenAPI specification generated by FastAPI, which describes API endpoints and configurations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"FastAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n...\n\n```\n\n----------------------------------------\n\nTITLE: Error response for forbidden extra form fields\nDESCRIPTION: JSON error response returned when a client tries to submit form fields not defined in the Pydantic model when extra fields are forbidden.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting Arbitrary Dict with Typed Keys and Values\nDESCRIPTION: Using a dict with typed keys and values to accept arbitrary key-value pairs in the request body, with automatic conversion and validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nasync def create_index_weights(weights: dict[int, float]):\n```\n\n----------------------------------------\n\nTITLE: Defining User Models with Pydantic\nDESCRIPTION: This snippet defines three Pydantic models for handling user data: `UserIn` for input (including a password), `UserOut` for output (excluding the password), and `UserInDB` for database storage. It illustrates how to structure models to manage sensitive data appropriately in different contexts.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nfrom typing import Optional\\n\\nfrom pydantic import BaseModel\\n\\n\\nclass UserIn(BaseModel):\\n    username: str\\n    password: str\\n    email: str\\n    full_name: Optional[str] = None\\n\\n\\nclass UserOut(BaseModel):\\n    username: str\\n    email: str\\n    full_name: Optional[str] = None\\n\\n\\nclass UserInDB(BaseModel):\\n    username: str\\n    password: str\\n    email: str\\n    full_name: Optional[str] = None\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Set Type in FastAPI\nDESCRIPTION: This code demonstrates the usage of Python's `set` data type within a Pydantic model in FastAPI, enforcing unique items. It utilizes `typing.Set` to declare a set of strings for the `tags` field, ensuring no duplicate entries are allowed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional, Set\n\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: Set[str] = set()\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a List with Type Parameter in Python 3.10+\nDESCRIPTION: Definition of a list field with a type parameter to specify that it should contain strings, providing type checking and validation for list elements.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntags: list[str]\n```\n\n----------------------------------------\n\nTITLE: Using response model encoding parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to define default values in a Pydantic model and how `response_model_exclude_unset` parameter can be used to exclude fields with default values from the response if they haven't been explicitly set.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"class Item(BaseModel):\n    name: str\n    price: float\n    description: str = None  # Default value\n    tax: float = 10.5  # Default value\n    tags: List[str] = []  # Default value\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str, response_model_exclude_unset=True):\n    item = items[item_id]\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Restricting Extra Cookies with Pydantic Model Configuration\nDESCRIPTION: Shows how to configure a Pydantic model to forbid extra cookies in requests using model_config. This creates strict validation that rejects any cookies not defined in the model.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodel_config = ConfigDict(extra='forbid')\n```\n\n----------------------------------------\n\nTITLE: Multiple Body Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare multiple request body parameters in a FastAPI path operation. It defines a path operation that accepts two request body parameters: `item` of type `Item` and `user` of type `User`. FastAPI automatically handles combining these into a single expected JSON body.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/items/\")\nasync def create_item(item: Item, user: User):\n    return {\"item\": item, \"user\": user}\"\n```\n\n----------------------------------------\n\nTITLE: Optional Body Parameter with None Type\nDESCRIPTION: Defining a body parameter that can be optional with a None default value\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nitem: Item = None\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Parameters with Validation\nDESCRIPTION: Configure cookie parameters with default values and optional validation rules similar to Query and Path parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/cookie-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(cookie_param: str = Cookie(default=None))\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Root Path Server in FastAPI OpenAPI Schema\nDESCRIPTION: This snippet demonstrates how to disable the automatic inclusion of a server with the root_path in the OpenAPI schema by setting root_path_in_servers=False in the FastAPI initialization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(root_path_in_servers=False)\n```\n\n----------------------------------------\n\nTITLE: Disabling Swagger UI Syntax Highlighting\nDESCRIPTION: Example of how to disable syntax highlighting in Swagger UI by setting syntaxHighlight to False in the FastAPI app configuration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"syntaxHighlight\": False}\n)\n```\n\n----------------------------------------\n\nTITLE: Return HTTP Error on Incorrect Credentials\nDESCRIPTION: This snippet shows how to return an HTTPException with a 401 status code and the WWW-Authenticate header when the provided credentials are incorrect. This prompts the browser to display the login prompt again, ensuring that the user is re-authenticated if their initial credentials were invalid.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\\\"Incorrect email or password\\\",\n            headers={\\\"WWW-Authenticate\\\": \\\"Basic\\\"},\n        )\"\n```\n\n----------------------------------------\n\nTITLE: Returning the same input data as response model in FastAPI\nDESCRIPTION: This example showcases a scenario where the input model (`UserIn`) includes a plain text password, and the same model is used as the response model. This can lead to security vulnerabilities if the API returns the password in the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"class UserIn(BaseModel):\n    username: str\n    password: str  # Plain text password\n\n# Using UserIn model as response model is potentially unsafe\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"# Using the UserIn model to declare the output is unsafe because password will be exposed\n@app.post(\"/users/\", response_model=UserIn)\nasync def create_user(user: UserIn):\n    return user\"\n```\n\n----------------------------------------\n\nTITLE: Using UploadFile with Additional Metadata\nDESCRIPTION: Demonstrates how to combine UploadFile with the File() function to provide additional metadata for the file parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def create_upload_file(file: UploadFile = File(description=\"A file read as UploadFile\")):\n```\n\n----------------------------------------\n\nTITLE: Invalid Asynchronous Function Call Without Await\nDESCRIPTION: Illustrates an incorrect way to call an async function without using the await keyword, which would result in an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# This won't work, because get_burgers was defined with: async def\nburgers = get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Nested Dependencies with Yield\nDESCRIPTION: Demonstration of multiple nested dependencies using yield with proper cleanup order\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\nasync def dependency_b(dep_a: Annotated[DependencyA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.clean(dep_a)\n\nasync def dependency_c(dep_b: Annotated[DependencyB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n```\n\n----------------------------------------\n\nTITLE: Union Response Types with typing.Union\nDESCRIPTION: Declaring response types that can be one of multiple models using Python's typing.Union\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n\nclass User(BaseModel):\n    name: str\n\ndef get_item_or_user(item_id: str) -> Union[Item, User]:\n    # Implementation logic\n```\n\n----------------------------------------\n\nTITLE: Dict Type Annotation\nDESCRIPTION: This snippet demonstrates how to annotate a variable as a dictionary with specific key and value types using the `typing` module.  It shows how to specify the types of keys and values within a dictionary.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Dict\n\nprices: Dict[str, float]\"\n```\n\n----------------------------------------\n\nTITLE: Importing Query and Annotated in Python 3.10+\nDESCRIPTION: Shows how to import the Query class from fastapi and Annotated from typing to use them for query parameter validation in Python 3.10+.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Definiendo Modelos de Datos para Héroes en Python\nDESCRIPTION: Define los modelos de datos HeroPublic, HeroCreate y HeroUpdate heredando de HeroBase. HeroPublic excluye secret_name, HeroCreate incluye todos los campos, y HeroUpdate hace todos los campos opcionales.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    secret_name: str | None = None\n    age: int | None = None\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter with Title Metadata\nDESCRIPTION: Demonstrates how to declare a path parameter with title metadata using Path and Annotated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nitem_id: Annotated[int, Path(title=\"The ID of the item to get\")] = 1\n```\n\n----------------------------------------\n\nTITLE: Type Hints with String Concatenation\nDESCRIPTION: Shows type hints usage with string operations and age conversion to string.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Query Parameters That Can Be None in FastAPI (Python 3.10+)\nDESCRIPTION: This snippet demonstrates how to declare a required query parameter that can accept None as a value, using Annotated and Query in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)]):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Required Query Parameters in FastAPI\nDESCRIPTION: Demonstrates how to make query parameters required by not providing a default value. The 'needy' parameter is a required string query parameter while 'skip' has a default value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):\n```\n\n----------------------------------------\n\nTITLE: Swagger UI OAuth2 Redirect Handler in FastAPI\nDESCRIPTION: Function to generate HTML for handling OAuth2 redirect flows in Swagger UI. Essential for OAuth2 authentication documentation and testing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_swagger_ui_oauth2_redirect_html\n```\n\n----------------------------------------\n\nTITLE: Adding Regex Pattern Validation to a Query Parameter\nDESCRIPTION: Demonstrates using a regular expression pattern to validate a query parameter, ensuring it exactly matches 'fixedquery'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers to Read Files in Python\nDESCRIPTION: This snippet demonstrates how to use a context manager to handle file reading in Python, ensuring the file is closed properly after being used. It showcases the 'with' statement, which simplifies resource management by automatically handling exceptions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nwith open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic Field\nDESCRIPTION: Shows how to import the Field class from Pydantic library for use with FastAPI models.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\n```\n\n----------------------------------------\n\nTITLE: List Type Annotation\nDESCRIPTION: This snippet demonstrates how to define a variable as a list of strings using the `List` type from the `typing` module. It shows how to specify the type of elements within a list.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\nitems: List[str]\"\n```\n\n----------------------------------------\n\nTITLE: Main FastAPI application example\nDESCRIPTION: This is a simple FastAPI application example.  It likely defines routes and handlers that can be tested using asynchronous testing techniques.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"{* ../../docs_src/async_tests/main.py *}\"\n```\n\n----------------------------------------\n\nTITLE: 创建顶层FastAPI应用\nDESCRIPTION: 创建主(顶层)FastAPI应用及其路径操作，这是整个应用的基础部分。\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Additional WebSocket Classes - Python FastAPI\nDESCRIPTION: Demonstrates importing additional WebSocket-related classes including WebSocketDisconnect and WebSocketState from the fastapi.websockets module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.websockets import WebSocketDisconnect, WebSocketState\n```\n\n----------------------------------------\n\nTITLE: Importing Form from FastAPI in Python\nDESCRIPTION: This code snippet shows how to import the `Form` class from the `fastapi` library in Python. This allows you to define form parameters in your API endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/request-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Form\"\n```\n\n----------------------------------------\n\nTITLE: Synchronous Function Definition in Python\nDESCRIPTION: This code snippet shows a synchronous function definition in Python using the `def` keyword.  It represents a sequential (non-asynchronous) operation for creating burgers, contrasting with the asynchronous example. It takes an integer as input and returns burgers synchronously.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"2\"\n# bu kod asenkron değil\ndef get_sequential_burgers(number: int):\n    # burgerleri oluşturmak için senkron bırkaç iş\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAPI Tags Metadata\nDESCRIPTION: Configure custom metadata for API tags, including names, descriptions, and external documentation links\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    openapi_tags=[\n        {\n            \"name\": \"users\",\n            \"description\": \"Operations with **login** and _fancy_ users\"\n        },\n        {\n            \"name\": \"items\",\n            \"description\": \"Manage items\"\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Body() for Singular Values in FastAPI (Python)\nDESCRIPTION: Illustrates how to use Body() to treat a singular value 'importance' as a body parameter instead of a query parameter in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def update_item(\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n):\n```\n\n----------------------------------------\n\nTITLE: Creating Model with Dictionary Unpacking and Additional Arguments\nDESCRIPTION: Demonstrates how to create a new Pydantic model by unpacking a dictionary and adding additional keyword arguments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nUserInDB(**user_in.dict(), hashed_password=hashed_password)\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Attributes with Field\nDESCRIPTION: Shows how to use Field to add validations, constraints, and metadata to Pydantic model attributes with similar functionality to Query, Path, and Body\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ModelName:\n    attribute: str = Field(..., description=\"Attribute description\")\n```\n\n----------------------------------------\n\nTITLE: Optional Type Annotation\nDESCRIPTION: This example shows how to use `Optional` to indicate that a variable can be either a specific type or `None`.  This allows for representing optional values, which is important for handling cases where a value might be missing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nname: Optional[str] = None\"\n```\n\n----------------------------------------\n\nTITLE: Handling Startup Events in FastAPI (Deprecated)\nDESCRIPTION: Demonstrates the deprecated method of handling startup events by registering an event handler function that initializes a database with some values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"startup\")\ndef startup_event():\n    items_db.append({\"name\": \"Foo\"})\n    items_db.append({\"name\": \"Bar\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Query Parameters in FastAPI (Python 3.9+)\nDESCRIPTION: This snippet demonstrates how to set a default value for a query parameter while also applying validations using Annotated and Query in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{ \"item_id\": \"Foo\" }, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: FastAPI Dependency Override Example\nDESCRIPTION: This snippet demonstrates how to override a dependency in a FastAPI application using `app.dependency_overrides`. It shows the basic structure of the override using a dictionary.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.dependency_overrides = {}\n```\n\n----------------------------------------\n\nTITLE: Serving Files with FileResponse in FastAPI\nDESCRIPTION: Shows how to serve static files from the filesystem using FastAPI's FileResponse, which handles content type detection and proper HTTP headers automatically.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    some_file_path = \"large-video-file.mp4\"\n    return FileResponse(some_file_path)\n```\n\n----------------------------------------\n\nTITLE: Using RedirectResponse Directly in FastAPI\nDESCRIPTION: Example showing how to directly return a RedirectResponse to redirect users to another URL. By default, this uses a 307 status code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: Returning Arbitrary Dictionary Response\nDESCRIPTION: Demonstrates returning a flexible dictionary response with type-hinted keys and values\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\ndef read_keyword_weights():\n    return {\"python\": 10.0, \"fastapi\": 9.5}\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with pip\nDESCRIPTION: This command installs FastAPI along with its standard dependencies using pip.  The `fastapi[standard]` option ensures that necessary components are included for typical web application development. Using quotes around the package name ensures compatibility across different terminals.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ pip install \\\"fastapi[standard]\\\"\\n\\n---> 100%\\n\"\n```\n\n----------------------------------------\n\nTITLE: Mounting WSGI Application with WSGIMiddleware in FastAPI\nDESCRIPTION: Demonstrates how to wrap a WSGI application (Flask) and mount it under a specific path in a FastAPI application using WSGIMiddleware\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/wsgi.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.wsgi import WSGIMiddleware\nfrom flask import Flask\n\nflask_app = Flask(__name__)\n@flask_app.route(\"/\")\ndef hello_flask():\n    return \"Hello, World from Flask!\"\n\napp = FastAPI()\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n\n@app.get(\"/v2\")\ndef hello_fastapi():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Using List for type annotation\nDESCRIPTION: This code snippet demonstrates how to use the `List` type from the `typing` module to define a list with string types. This approach is required for Python versions prior to 3.9.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"tags: List[str] = []\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Presets Configuration for Swagger UI\nDESCRIPTION: Example of JavaScript-only configuration for Swagger UI presets that cannot be set directly through Python.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npresets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n```\n\n----------------------------------------\n\nTITLE: Importing File and Form in FastAPI (Python)\nDESCRIPTION: Import statement for FastAPI's File and Form components needed to handle multipart/form-data requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, File, Form\n```\n\n----------------------------------------\n\nTITLE: Importing WSGIMiddleware in FastAPI\nDESCRIPTION: Shows how to import the WSGI middleware from FastAPI. This middleware allows mounting WSGI applications (like Flask or Django) within a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.wsgi import WSGIMiddleware\n```\n\n----------------------------------------\n\nTITLE: Copying Requirements File in Dockerfile\nDESCRIPTION: This command copies the `requirements.txt` file from the host machine to the `/code` directory within the Docker image.  Copying the requirements file separately from the rest of the application code leverages Docker's caching mechanism to optimize image build times. Since the requirements file changes less frequently, Docker can cache this step and the subsequent dependency installation step.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"COPY ./requirements.txt /code/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI\nDESCRIPTION: This snippet showcases the use of `gt` (greater than) and `le` (less than or equal) for numeric validation of path parameters.  It builds upon the previous example, implying the same FastAPI setup.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(\\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\\n    q: str | None = None,\\n):\\n    return {\"item_id\": item_id, \"q\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Tuple and Set Types with Type Hints in Python 3.8+\nDESCRIPTION: This example shows how to declare tuple and set variables with type hints in Python 3.8 and above, using the typing module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Tuple, Set\n\nitems_t: Tuple[int, int, str] = (1, 2, \"foo\")\nitems_s: Set[bytes] = {b\"foo\", b\"bar\", b\"baz\"}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Metadata\nDESCRIPTION: Adding title and description metadata to a query parameter for OpenAPI documentation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = Query(\n    default=None, \n    title=\"Query Parameter\", \n    description=\"A sample query parameter with metadata\"\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple String Validation Techniques\nDESCRIPTION: Applying multiple string validations like min_length and regex pattern matching\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = Query(default=None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n```\n\n----------------------------------------\n\nTITLE: Defining Form Parameters in Python\nDESCRIPTION: This snippet demonstrates how to define form parameters within a FastAPI endpoint using the `Form` class.  It shows how to specify default values and metadata for the form fields.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/request-forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/login/\")\nasync def login(username: str = Form(...), password: str = Form(...)):\n    return {\"username\": username, \"password\": password}\"\n```\n\n----------------------------------------\n\nTITLE: Importing List from typing module\nDESCRIPTION: This snippet shows how to import the `List` type from the `typing` module, used in Python versions before 3.9 for type hinting with generic types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Validation with Regex Pattern\nDESCRIPTION: Shows how to validate query parameters using regular expression constraints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(regex=\"^fixedquery$\")] = None\n```\n\n----------------------------------------\n\nTITLE: Handling Shutdown Events in FastAPI (Deprecated)\nDESCRIPTION: Shows the deprecated method of handling shutdown events by registering an event handler function that writes to a log file when the application shuts down.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n```\n\n----------------------------------------\n\nTITLE: Basic Function with Name Formatting\nDESCRIPTION: A simple function that takes first and last names, capitalizes them, and concatenates them with a space\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef get_full_name(first_name, last_name):\n    return f\"{first_name.title()} {last_name.title()}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Updates with PATCH and Pydantic Models\nDESCRIPTION: Code snippet demonstrating how to implement partial updates using HTTP PATCH by extracting only the set fields from the input model and applying them to the stored item.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-updates.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(\n    item_id: str, item: Annotated[Item, Body(embed=True)]\n):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Security Tools\nDESCRIPTION: Import statement showing all available security tools in FastAPI that can be used to create dependables for authentication and authorization. These tools integrate with OpenAPI to be shown in the automatic documentation UI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/security/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI version in requirements.txt\nDESCRIPTION: This snippet demonstrates how to pin a specific FastAPI version (e.g., 0.45.0) in a requirements.txt file. This ensures that the application always uses the exact version it was tested with, preventing unexpected issues from updates.  The requirements.txt file is commonly used to specify project dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"fastapi==0.45.0\"\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Handling\nDESCRIPTION: This snippet shows how to implement custom validation error handling using RequestValidationError in FastAPI. It overrides the default validation error handler to return a plain text response with the error details instead of the default JSON response. This example provides a customized way to present validation errors to the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Request, FastAPI\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=422,\n        content={\"detail\": exc.errors(), \"body\": exc.body},\n    )\n```\n\nLANGUAGE: Python\nCODE:\n```\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    print(exc.errors())\n    return PlainTextResponse(str(exc), status_code=422)\n\n```\n\n----------------------------------------\n\nTITLE: Using Alias for Query Parameters in FastAPI (Python 3.10+)\nDESCRIPTION: Shows how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name. The alias 'item-query' is used in the URL while the function uses 'q' internally.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2PasswordRequestForm in FastAPI\nDESCRIPTION: Imports the OAuth2PasswordRequestForm class from FastAPI security utilities and uses it as a dependency in the token route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.security import OAuth2PasswordRequestForm\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n```\n\n----------------------------------------\n\nTITLE: Password Hashing and User Authentication in FastAPI\nDESCRIPTION: This snippet illustrates how to use a (fake) password hashing system to verify a user's password and create a `UserInDB` Pydantic model. If the passwords don't match, it raises an `HTTPException`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    if not fake_hash_password(form_data.password) == user[\"hashed_password\"]:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n```\n\n----------------------------------------\n\nTITLE: Disabling Separate Input/Output Schemas\nDESCRIPTION: Demonstrates how to disable separate input and output schemas in FastAPI using the separate_input_output_schemas parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(separate_input_output_schemas=False)\n```\n\n----------------------------------------\n\nTITLE: Using Query as Default Value for Optional Parameter (Python <3.10)\nDESCRIPTION: Demonstrates the older approach of using 'Query' directly as the default value for the optional query parameter 'q' to achieve the same effect as using 'Annotated'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(default=None, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Importing File and Form in FastAPI\nDESCRIPTION: Code snippet showing how to import the File and Form classes from FastAPI, which are required for handling file uploads and form data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, File, Form\n```\n\n----------------------------------------\n\nTITLE: Custom Operation ID Generation in FastAPI\nDESCRIPTION: A FastAPI application with custom operation ID generation using tags and function names, resulting in cleaner client method names.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = FastAPI(\n    title=\"FastAPI Client Example\",\n    generate_unique_id_function=custom_generate_unique_id,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with pip\nDESCRIPTION: Command to install FastAPI with all optional dependencies using pip in the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Advanced Docstring Description for Path Operations in FastAPI\nDESCRIPTION: This code snippet illustrates how to limit the output lines of a docstring in a path operation for OpenAPI. By adding a page break character, signal FastAPI to truncate the OpenAPI documentation at that point while allowing other documentation tools to use the rest of the docstring.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def read_items():\n    \"\"\"\n    This is the docstring for the path operation.\n    It will be truncated here.\f\n    More details follow.\n    \"\"\"\n    return ['item1', 'item2']\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI App\nDESCRIPTION: This snippet showcases the standard way to define a FastAPI application with a simple endpoint. It's the foundation for customizing the OpenAPI schema later on. The code defines a FastAPI app and a root endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/\")\\nasync def read_root():\\n    return {\"Hello\": \"World\"}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying OpenAPI Schema with ReDoc Extension\nDESCRIPTION: This snippet demonstrates how to modify the generated OpenAPI schema to include a custom extension, specifically the ReDoc x-logo extension. It accesses the `info` object within the schema and adds the custom logo information.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"    openapi_schema[\"info\"][\"x-logo\"] = {\\n        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Query Parameters in FastAPI\nDESCRIPTION: Demonstrates how to declare query parameters with default values and automatic type conversion\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(skip: int = 0, limit: int = 10):\n    return {\"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Specifying FastAPI Project Dependencies in requirements.txt\nDESCRIPTION: This code snippet defines the package dependencies for the FastAPI project, including their version constraints. It covers packages for testing, documentation, database interaction, and type checking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .[all]\n-r requirements-docs-tests.txt\npytest >=7.1.3,<9.0.0\ncoverage[toml] >= 6.5.0,< 8.0\nmypy ==1.8.0\ndirty-equals ==0.9.0\nsqlmodel==0.0.23\nflask >=1.1.2,<4.0.0\nanyio[trio] >=3.2.1,<5.0.0\nPyJWT==2.8.0\npyyaml >=5.3.1,<7.0.0\npasslib[bcrypt] >=1.7.2,<2.0.0\ninline-snapshot==0.19.3\n# types\ntypes-ujson ==5.10.0.20240515\ntypes-orjson ==3.6.2\n```\n\n----------------------------------------\n\nTITLE: Sync Function Definition\nDESCRIPTION: Example showing a regular synchronous function definition for comparison\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_sequential_burgers(number: int):\n    # Do some sequential stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: This command demonstrates how to run the FastAPI development server using the 'fastapi' CLI tool.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ fastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Boolean Query Parameter Type Conversion\nDESCRIPTION: Demonstrates automatic boolean type conversion for query parameters with multiple truthy input formats\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef read_item(item_id: str, short: bool = False):\n    return {\"item_id\": item_id, \"short\": short}\n```\n\n----------------------------------------\n\nTITLE: Class as Type\nDESCRIPTION: This snippet demonstrates how to use a class as a type annotation for a variable. This allows developers to define custom types and use them for type checking and editor support.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n\"class Person:\n    name: str\n\n\nfirst_person: Person\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Alias\nDESCRIPTION: Creating a query parameter with a custom URL alias different from the Python variable name\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = Query(default=None, alias=\"item-query\")\n```\n\n----------------------------------------\n\nTITLE: Adding Title Metadata to Query Parameter in FastAPI\nDESCRIPTION: This code demonstrates how to add a title to a query parameter for better documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(default=None, title=\"Query string\")\n```\n\n----------------------------------------\n\nTITLE: Using response_model_exclude_unset\nDESCRIPTION: Demonstrates how to exclude default values from the response by setting response_model_exclude_unset=True\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\ndef read_item(item_id: str):\n    return item_from_database\n```\n\n----------------------------------------\n\nTITLE: Synchronous Function Definition (Non-Async)\nDESCRIPTION: Shows a standard synchronous function definition that does not support asynchronous operations\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Ceci n'est pas asynchrone\ndef get_sequential_burgers(number: int):\n    # Opérations asynchrones pour créer les burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Title\nDESCRIPTION: This example demonstrates how to add a title to a query parameter using the `title` argument in the `Query` function.  The title is used for documentation purposes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, title=\"Query string\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja2 for FastAPI\nDESCRIPTION: Command to install the Jinja2 library using pip, which is required for template rendering in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install jinja2\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: List Type Parameters in Python\nDESCRIPTION: Demonstrates how to import and use List type from typing module for type annotations in Python versions before 3.9.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI version in requirements.txt\nDESCRIPTION: This snippet shows how to specify an exact FastAPI version in the `requirements.txt` file. This ensures that your application always uses the tested and compatible version of FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"fastapi==0.45.0\"\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI to Exact Version in requirements.txt\nDESCRIPTION: Shows how to pin FastAPI to an exact version (0.112.0) in a requirements.txt file, ensuring consistent dependency management.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfastapi[standard]==0.112.0\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment (Windows PowerShell)\nDESCRIPTION: This command activates a virtual environment in Windows PowerShell by executing the 'Activate.ps1' script located in the environment's Scripts directory. Activating modifies environment variables like PATH.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment (Linux, macOS)\nDESCRIPTION: This command activates a virtual environment in Linux and macOS using the 'source' command.  Activating the environment modifies the PATH variable to prioritize the environment's Python interpreter and packages.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: HTTPException with Yield Dependencies\nDESCRIPTION: Example of raising HTTPException in yield dependencies with cleanup code\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_session():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        if some_condition:\n            raise HTTPException(status_code=400, detail=\"Session error\")\n        session.close()\n```\n\n----------------------------------------\n\nTITLE: Complex Path Parameter with Enum Type\nDESCRIPTION: Demonstrates creating predefined path parameters using Python's Enum class with advanced type checking and value management\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nfrom fastapi import FastAPI\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\napp = FastAPI()\n\n@app.get(\"/models/{model_name}\")\ndef get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI URL in FastAPI\nDESCRIPTION: This snippet shows how to customize the URL where the OpenAPI schema is served. By default, it's available at '/openapi.json', but this can be changed or disabled completely.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic URLs in Jinja2 Templates with url_for\nDESCRIPTION: Explains how to use the `url_for()` function within Jinja2 templates to generate dynamic URLs based on path operation arguments. Suitable for creating links that match application routing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_4\n\nLANGUAGE: jinja\nCODE:\n```\n<a href=\"{{ url_for('read_item', id=id) }}\">\n```\n\n----------------------------------------\n\nTITLE: Using ORJSONResponse for Better Performance in FastAPI\nDESCRIPTION: Example of using ORJSONResponse as the response_class parameter in a FastAPI route to improve JSON serialization performance with the orjson library.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return {\"item_id\": \"Foo\"}\n```\n\n----------------------------------------\n\nTITLE: Ausführen von Uvicorn mit mehreren Workern für FastAPI\nDESCRIPTION: Startet Uvicorn direkt mit 4 Workerprozessen, die eine FastAPI-Anwendung aus der Datei 'main.py' ausführen und auf Port 8080 lauschen.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n```\n\n----------------------------------------\n\nTITLE: Excluding Query Parameter from OpenAPI Schema in FastAPI\nDESCRIPTION: This snippet shows how to exclude a query parameter from the OpenAPI schema and automatic documentation systems.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nhidden_query: Annotated[str | None, Query(include_in_schema=False)] = None\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Query Parameter in FastAPI\nDESCRIPTION: This example demonstrates how to make a query parameter 'q' required by not specifying a default value, while still using Query for validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(min_length=3)]\n```\n\n----------------------------------------\n\nTITLE: Importing File and Form in FastAPI\nDESCRIPTION: This code snippet demonstrates how to import the File and Form classes from FastAPI, which are used to handle file uploads and form data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import File, Form\n```\n\n----------------------------------------\n\nTITLE: Generate a secure random secret key using openssl\nDESCRIPTION: This command generates a cryptographically secure random key that can be used as a secret for signing JWT tokens. It is essential for the security of the JWT implementation to use a strong, randomly generated secret.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from requirements.txt with pip\nDESCRIPTION: Command to install all packages listed in a requirements.txt file using pip.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Pinning Exact FastAPI Version in Requirements.txt\nDESCRIPTION: Demonstrates how to pin FastAPI to a specific version using requirements.txt file. This ensures exact version matching for consistent deployments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfastapi[standard]==0.112.0\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart dependency for FastAPI\nDESCRIPTION: Command to install the python-multipart package, which is required for handling form data in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Media Types to FastAPI Response\nDESCRIPTION: Demonstrates how to add multiple media types (JSON and PNG image) to a FastAPI response using the 'responses' parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n    response_model=Item,\n```\n\n----------------------------------------\n\nTITLE: Adding min_length and max_length Validations to a Query Parameter\nDESCRIPTION: Shows how to apply both minimum and maximum length constraints to a string query parameter using Query with Annotated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Query Parameter Request\nDESCRIPTION: Example of an HTTP request URL with query parameters that would trigger an error due to extra parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://example.com/items/?limit=10&tool=plumbus\n```\n\n----------------------------------------\n\nTITLE: Docker CMD with TLS Proxy Headers\nDESCRIPTION: Configuration for running FastAPI behind a TLS termination proxy with proper header handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--proxy-headers\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows Bash\nDESCRIPTION: Command to activate the Python virtual environment on Windows using Bash (e.g., Git Bash).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Defining a FastAPI Application with Custom Name in Python\nDESCRIPTION: This snippet demonstrates how to create a FastAPI application instance with a custom name. This affects how you would reference the app when running it with Uvicorn.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmy_awesome_api = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse in FastAPI\nDESCRIPTION: Shows how to use FileResponse to return a file in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\nsome_file_path = \"large-video-file.mp4\"\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n```\n\n----------------------------------------\n\nTITLE: Function with Type Annotations and Error\nDESCRIPTION: This code shows an example function with type annotations and an error. The editor can detect the type mismatch, providing assistance to the developer. This code highlights the benefits of type annotations for error detection.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with Alias\nDESCRIPTION: This code demonstrates how to use the `alias` parameter in the `Query` function to specify a different name for the query parameter in the URL. This is useful when the desired query parameter name is not a valid Python variable name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(item_query: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if item_query:\n        results.update({\"item_query\": item_query})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Creating a custom response class in FastAPI with orjson\nDESCRIPTION: Demonstrates how to create a custom response class by inheriting from Response. This example creates a CustomORJSONResponse that formats JSON with indentation using orjson.OPT_INDENT_2 option.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\nimport orjson\n\napp = FastAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content) -> bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\ndef main():\n    return {\"message\": \"Hello World\"}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Types with Typing.Optional in Python\nDESCRIPTION: This code snippet demonstrates how to declare a variable that can be either a string or None using `typing.Optional`. This helps the editor identify potential errors where a value is assumed to always be a string but could be None.  `Optional[str]` is a shorthand for `Union[str, None]`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Optional\n\nname: Optional[str] = None\n\"\n```\n\n----------------------------------------\n\nTITLE: Importing Header Parameter in FastAPI\nDESCRIPTION: Example showing how to import the Header class from FastAPI to handle header parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Header\n```\n\n----------------------------------------\n\nTITLE: Importing UploadFile Class in FastAPI\nDESCRIPTION: Shows how to import the UploadFile class from FastAPI. This class is used to handle file uploads in path operation functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/uploadfile.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import UploadFile\n```\n\n----------------------------------------\n\nTITLE: Importing StaticFiles from FastAPI\nDESCRIPTION: Code snippet showing how to import the StaticFiles class from the fastapi.staticfiles module. This class is used to serve static files such as JavaScript, CSS, and images in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/staticfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.staticfiles import StaticFiles\n```\n\n----------------------------------------\n\nTITLE: Field Additional Arguments in Schema\nDESCRIPTION: Shows how to add extra information to individual model fields using Field with additional arguments, which are added as annotations without validation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str = Field(example=\"Foo\")\n    description: Optional[str] = Field(\n        default=None,\n        example=\"A very nice Item\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI Version Range in Requirements.txt\nDESCRIPTION: Shows how to specify an acceptable range of FastAPI versions, allowing patch updates while preventing minor version changes that might include breaking changes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nfastapi[standard]>=0.112.0,<0.113.0\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux/macOS\nDESCRIPTION: Command to activate the Python virtual environment on Linux or macOS systems.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Combining Default Responses with Custom Ones in FastAPI\nDESCRIPTION: Demonstrates how to combine default responses with custom ones using Python dictionary unpacking in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponses = {\n    400: {\"description\": \"Bad request\"},\n    401: {\"description\": \"Unauthorized\"},\n}\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 404: {\"description\": \"Not found\"}},\n)\n```\n\n----------------------------------------\n\nTITLE: Single File Upload with UploadFile - Python FastAPI\nDESCRIPTION: Example demonstrating file upload handling using UploadFile class in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile\n):\n```\n\n----------------------------------------\n\nTITLE: Traefik Configuration with Path Prefix Stripping\nDESCRIPTION: A Traefik TOML configuration file that sets up a proxy on port 9999 and configures path prefix stripping for an API path. This allows the proxy to remove the /api/v1 prefix before forwarding requests to the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n```\n\n----------------------------------------\n\nTITLE: List with Type Parameters in FastAPI\nDESCRIPTION: This snippet illustrates how to declare a list with type parameters using `typing.List` in a Pydantic model within FastAPI. It demonstrates specifying the type of elements contained within the list, providing more explicit type information.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n    tags: List[str] = []\"\n```\n\n----------------------------------------\n\nTITLE: Return HTTP Error with WWW-Authenticate Header\nDESCRIPTION: This snippet shows how to return an HTTPException with a status code 401 and the WWW-Authenticate header after detecting incorrect credentials, triggering the browser to display the login prompt again. The WWW-Authenticate header includes the 'Basic' scheme and optionally a realm.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/security/tutorial007_an_py39.py hl[26:30] *}\n\n```\n\n----------------------------------------\n\nTITLE: Using await with async def in FastAPI path operations\nDESCRIPTION: This snippet demonstrates how to properly define an asynchronous path operation function in FastAPI when using a library that requires await calls. The function is declared with async def and uses await to call an asynchronous library function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresults = await some_library()\n```\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Multiple Path and Query Parameters in FastAPI\nDESCRIPTION: Shows how to define a function with both path and query parameters. FastAPI automatically distinguishes between them based on their declaration in the function parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):\n```\n\n----------------------------------------\n\nTITLE: Importing Query and Annotated in Python 3.8+\nDESCRIPTION: Shows how to import the Query class from fastapi and Annotated from typing_extensions for Python versions below 3.9.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Union\nfrom typing_extensions import Annotated\n```\n\n----------------------------------------\n\nTITLE: Criando um Manipulador de Exceção Personalizado\nDESCRIPTION: Demonstra como criar um manipulador de exceção personalizado para uma exceção customizada (UnicornException) usando o decorador @app.exception_handler().\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\napp = FastAPI()\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n```\n\n----------------------------------------\n\nTITLE: Declaring Path Parameter with Metadata in FastAPI\nDESCRIPTION: Example of declaring a path parameter with title metadata using Annotated and Path.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI()\\n\\n@app.get(\\\"/items/{item_id}\\\")\\nasync def read_items(\\n    item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\")]\\n):\\n    return {\\\"item_id\\\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart\nDESCRIPTION: This command installs the 'python-multipart' package, which is necessary to handle form data in FastAPI applications. Ensure a virtual environment is activated before installation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Response Classes\nDESCRIPTION: Shows how to import all available response classes from fastapi.responses module. These classes include support for file serving, HTML rendering, JSON responses (with different implementations), plain text, redirects, and streaming responses.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/responses.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n```\n\n----------------------------------------\n\nTITLE: Pydantic Schema Extra Configuration with Config\nDESCRIPTION: Demonstrates how to add extra schema information using Pydantic's Config and schema_extra, allowing additional metadata to be directly output in JSON Schema\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n    price: float\n    tax: Optional[float] = None\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Basic Types Example\nDESCRIPTION: Shows declaration of basic Python types using type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_e\n```\n\n----------------------------------------\n\nTITLE: Setting Response Description in FastAPI\nDESCRIPTION: This snippet demonstrates how to set the description for the response of a FastAPI path operation using the `response_description` parameter.  This specifically describes the response, as opposed to the general `description` which describes the entire operation. FastAPI automatically generates a default response description if one is not provided.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_description=\"The item\")\nasync def read_item(item_id: str):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in the virtual environment\nDESCRIPTION: This command upgrades the `pip` package installer to the latest version within the active virtual environment. It ensures that you are using the most up-to-date version of `pip` when installing Python packages, which can prevent errors during installation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ python -m pip install --upgrade pip\n\n---> 100%\n```\n```\n\n----------------------------------------\n\nTITLE: Synchronous Route Handler Definition in FastAPI\nDESCRIPTION: Implementation of a synchronous route handler for non-async libraries.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\ndef results():\n    results = some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using UJSONResponse in FastAPI\nDESCRIPTION: Demonstrates how to use UJSONResponse for JSON serialization in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional File Parameters\nDESCRIPTION: Shows how to make file uploads optional by setting default values to None and using standard type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def create_file(file: bytes | None = File(default=None)):\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema with root_path Server Configuration\nDESCRIPTION: An example of OpenAPI JSON schema showing how FastAPI adds a server using the root_path value at the beginning of the servers list. This is the structure generated for the OpenAPI documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"openapi\": \"3.0.2\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Dict Type Hint with typing\nDESCRIPTION: This code shows how to use the `Dict` type from the `typing` module to specify the types of both keys and values in a dictionary. In this case, the dictionary `prices` has string keys (`str`) and float values (`float`).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Dict\n\ndef process_prices(prices: Dict[str, float]):\n    for item_name, price in prices.items():\n        print(f\"{item_name}: {price}\")\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Callable Class Instance in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a class with a __call__ method, which allows an instance of the class to be callable. This is utilized by FastAPI to handle additional parameters for dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str):\n        return self.fixed_content in q\n```\n\n----------------------------------------\n\nTITLE: Accessing item name from a FastAPI response\nDESCRIPTION: Accesses the 'item_name' attribute from the 'item' object to prepare responses for API clients, ensuring that clients receive relevant item details correctly formatted.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n... \"item_name\": item.name ...\n```\n\n----------------------------------------\n\nTITLE: Installing Typer CLI Completion for Documentation Management\nDESCRIPTION: Command to install shell completion for Typer CLI, which provides autocompletion for documentation management commands. This improves the developer experience when working with the docs.py script.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Attributes with Field\nDESCRIPTION: Demonstrates how to use the `Field` class to declare attributes within a Pydantic model. The `Field` function works similarly to `Query`, `Path`, and `Body`, allowing parameters like descriptions and default values to be set for model attributes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"class Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\\\"Description of the item\\\", max_length=300\n    )\n    price: float\n    tax: float | None = None\"\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Root Path Option in Console\nDESCRIPTION: Demonstrates starting a FastAPI application using the `--root-path` command line argument to account for reverse proxy modifications. It sets up the server to expect the path prefix modified by the proxy, necessary for correct routing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi run main.py --root-path /api/v1\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Different Project Directory\nDESCRIPTION: Shows the command to change directory to a different project. This illustrates the scenario where you might move to a new project while still having the previous project's virtual environment active.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n```\n\n----------------------------------------\n\nTITLE: Importing Cookie from FastAPI\nDESCRIPTION: Import the Cookie parameter class from FastAPI to enable cookie parameter handling in route definitions\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/cookie-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Cookie\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for File Uploading in FastAPI\nDESCRIPTION: This snippet demonstrates how to import the necessary libraries for managing file uploads in FastAPI. It requires the 'python-multipart' library to handle multipart form data submissions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import UploadFile, File\n```\n\n----------------------------------------\n\nTITLE: Leyendo un Héroe Específico con FastAPI y SQLModel en Python\nDESCRIPTION: Implementa un endpoint GET para leer un héroe específico por su ID, devolviendo un HeroPublic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        return hero\n```\n\n----------------------------------------\n\nTITLE: Performing Date Manipulations\nDESCRIPTION: This snippet shows how to perform standard date manipulations using the datetime object within a FastAPI application.  It allows you to interact with dates as you normally would in Python after they have been received and validated by FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/extra-data-types.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"    if start_datetime:\n        results.update({\"start_datetime\": start_datetime})\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in FastAPI\nDESCRIPTION: Demonstrates how to add CORS middleware to a FastAPI application with configurable settings for handling cross-origin requests\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/cors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a File Parameter with UploadFile Type\nDESCRIPTION: Demonstrates how to use the UploadFile type for file uploads, which provides better handling for large files and additional metadata.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def create_upload_file(file: UploadFile):\n```\n\n----------------------------------------\n\nTITLE: Reducing Model Duplication with Base Model Inheritance\nDESCRIPTION: Shows how to create a base user model and derive specific models with minimal code repetition using inheritance\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    full_name: Optional[str] = None\n\nclass UserIn(UserBase):\n    password: str\n\nclass UserOut(UserBase):\n    pass\n\nclass UserInDB(UserBase):\n    hashed_password: str\n```\n\n----------------------------------------\n\nTITLE: Required, Default, and Optional Query Parameters in FastAPI\nDESCRIPTION: Shows a combination of different parameter types: required query parameters ('needy'), parameters with default values ('skip'), and fully optional parameters ('limit').\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):\n```\n\n----------------------------------------\n\nTITLE: Declaring Path Parameter Metadata with Title\nDESCRIPTION: Shows how to add metadata like title to a path parameter using Path from FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nitem_id: int = Path(title=\"The ID of the item to get\")\n```\n\n----------------------------------------\n\nTITLE: Using Set Types in Pydantic Models for FastAPI\nDESCRIPTION: This snippet shows how to use a Set type for fields that should contain unique items, such as tags in a Pydantic model used with FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Set\n\ntags: Set[str]\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPSRedirectMiddleware in FastAPI\nDESCRIPTION: Shows how to import the HTTPS redirect middleware from FastAPI. This middleware automatically redirects HTTP requests to HTTPS.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n```\n\n----------------------------------------\n\nTITLE: Deactivating and Activating Virtual Environments in Console\nDESCRIPTION: This snippet shows the process of deactivating the current virtual environment, navigating to a new project directory, and activating the correct virtual environment for that project.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv 🚀\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment ✨\n$ python main.py\n\nI solemnly swear 🐺\n```\n\n----------------------------------------\n\nTITLE: Installing python-multipart for Form and File Handling in FastAPI\nDESCRIPTION: Command to install the required python-multipart library which enables handling form data and file uploads in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Generic Type Hints for Lists (Python 3.9+)\nDESCRIPTION: Demonstrates declaring a list of strings using modern Python type hint syntax\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nitems: list[str] = [\"apple\", \"banana\", \"cherry\"]\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameters with Default None\nDESCRIPTION: Shows how to create optional query parameters by setting default value to None\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with Standard Dependencies\nDESCRIPTION: This snippet shows how to install FastAPI with its standard optional dependencies using pip. It's recommended to use a virtual environment for installation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Importing Form class in FastAPI\nDESCRIPTION: Code snippet showing how to import the Form class from FastAPI module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Form\n```\n\n----------------------------------------\n\nTITLE: Creando y Utilizando una Instancia de Dependencia Parametrizable en FastAPI\nDESCRIPTION: Crea una instancia de FixedContentQueryChecker y la utiliza como dependencia en una ruta de FastAPI. La dependencia verifica si el parámetro de consulta 'q' contiene el contenido fijo especificado.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchecker = FixedContentQueryChecker(\"bar\")\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n```\n\n----------------------------------------\n\nTITLE: Traefik Routes Configuration for API Proxy\nDESCRIPTION: A Traefik routes configuration that sets up stripping the /api/v1 prefix from incoming requests and forwards them to a service running on localhost port 8000. It defines middleware, router rules, and service endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n```\n\n----------------------------------------\n\nTITLE: Using RedirectResponse with response_class in FastAPI\nDESCRIPTION: Example showing how to use RedirectResponse as a response_class parameter, which allows returning just the URL string from the route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\", response_class=RedirectResponse)\nasync def redirect_typer():\n    return \"https://typer.tiangolo.com\"\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI to Version Range in requirements.txt\nDESCRIPTION: Demonstrates how to specify a version range for FastAPI in requirements.txt, allowing patch updates but preventing minor version changes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nfastapi[standard]>=0.112.0,<0.113.0\n```\n\n----------------------------------------\n\nTITLE: Using List Type for Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to use the list type directly instead of List[str] for a query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nq: list = Query(default=[])\n```\n\n----------------------------------------\n\nTITLE: Agregando headers personalizados a HTTPException\nDESCRIPTION: Muestra cómo agregar encabezados personalizados al lanzar un HTTPException, útil para escenarios de seguridad avanzados.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    if item_id not in items:\\n        raise HTTPException(\\n            status_code=404,\\n            detail=\"Item not found\",\\n            headers={\"X-Error\": \"There goes my error\"},\\n        )\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Header Parameter in FastAPI\nDESCRIPTION: Demonstrates how to declare a basic header parameter with type annotation and optional validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(user_agent: str | None = Header(default=None)):\n```\n\n----------------------------------------\n\nTITLE: Illustrating Browser-Proxy-Server Routing\nDESCRIPTION: This Mermaid diagram demonstrates the flow of HTTP requests from a browser through a proxy to a FastAPI server. The proxy modifies the path to ensure the server receives requests correctly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nbrowser(\"Browser\")\nproxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Server on http://127.0.0.1:8000/app\"]\n\nbrowser --> proxy\nproxy --> server\n```\n\n----------------------------------------\n\nTITLE: Declaring Union Types with Type Hints in Python 3.8+\nDESCRIPTION: This example shows how to declare a variable that can be of multiple types using the Union type from the typing module in Python 3.8 and above.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nitem: Union[int, str] = 1\n```\n\n----------------------------------------\n\nTITLE: Error Response for Extra Cookies\nDESCRIPTION: This JSON snippet shows the error response that FastAPI returns when a client sends additional (forbidden) cookies. The response includes details such as the type of error, location, message, and input value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n    \\\"detail\\\": [\n        {\n            \\\"type\\\": \\\"extra_forbidden\\\",\n            \\\"loc\\\": [\\\"cookie\\\", \\\"santa_tracker\\\"],\n            \\\"msg\\\": \\\"Extra inputs are not permitted\\\",\n            \\\"input\\\": \\\"good-list-please\\\",\n        }\n    ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Making a GET request with Requests library in Python\nDESCRIPTION: This code snippet demonstrates how to make a simple GET request to a URL using the Requests library in Python. The Requests library simplifies making HTTP requests and handling responses. It is essential for interacting with APIs as a client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"response = requests.get(\"http://example.com/some/url\")\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Class Dependency with Annotated Type\nDESCRIPTION: Shows how to declare a class dependency using Annotated type hint and Depends() in Python 3.6+\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncommons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous FastAPI Route Handler\nDESCRIPTION: Example of defining an asynchronous route handler in FastAPI using the async def syntax. This allows the use of await within the function to call other asynchronous functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Model Generation\nDESCRIPTION: Demonstrates how to disable response model generation by setting response_model=None while maintaining type hints for tooling support\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\", response_model=None)\ndef read_item(item_id: str):\n    return some_arbitrary_object\n```\n\n----------------------------------------\n\nTITLE: Using BackgroundTasks with Dependency Injection in FastAPI\nDESCRIPTION: This example demonstrates how to use BackgroundTasks with FastAPI's dependency injection system at multiple levels, including path operation functions and dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\ndef send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Path and Query Parameters in FastAPI\nDESCRIPTION: This code snippet demonstrates how to use multiple path and query parameters in a FastAPI endpoint, showcasing that the order of declaration does not matter. FastAPI can distinguish between the path parameter `item_id` and the query parameters `q` and `short` based on their names and the route definition. The function returns a dictionary containing the `item_id`, query parameter `q`, and boolean parameter `short`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str,\n    q: str | None = None,\n    short: bool = False,\n):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Importing APIRouter and creating an instance in a users module\nDESCRIPTION: Shows how to import the APIRouter class from FastAPI and instantiate it in a users module to organize path operations related to user management.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n```\n\n----------------------------------------\n\nTITLE: Combining Dictionaries in Python\nDESCRIPTION: This Python snippet demonstrates how to use dictionary unpacking to combine existing predefined responses with new custom responses. This technique aids in reusing existing API response structures while introducing new elements where needed. This approach requires understanding Python dict operations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nold_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Caching in FastAPI\nDESCRIPTION: This code demonstrates how to disable caching for a dependency in FastAPI. By setting use_cache=False, the dependency will be re-evaluated on each call, even within the same request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n```\n\n----------------------------------------\n\nTITLE: Example PATH variable after activating (Windows)\nDESCRIPTION: This demonstrates how the PATH variable looks after activating a virtual environment in Windows. The environment's Scripts directory is prepended, prioritizing its executables.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with Multiple Workers\nDESCRIPTION: Command to run Uvicorn directly with multiple worker processes. It specifies 4 workers, binds to all interfaces on port 8080, and runs the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n<font color=\"#A6E22E\">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)\n<font color=\"#A6E22E\">INFO</font>:     Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>]\n<font color=\"#A6E22E\">INFO</font>:     Started server process [<font color=\"#A1EFE4\">27368</font>]\n<font color=\"#A6E22E\">INFO</font>:     Waiting for application startup.\n<font color=\"#A6E22E\">INFO</font>:     Application startup complete.\n<font color=\"#A6E22E\">INFO</font>:     Started server process [<font color=\"#A1EFE4\">27369</font>]\n<font color=\"#A6E22E\">INFO</font>:     Waiting for application startup.\n<font color=\"#A6E22E\">INFO</font>:     Application startup complete.\n<font color=\"#A6E22E\">INFO</font>:     Started server process [<font color=\"#A1EFE4\">27370</font>]\n<font color=\"#A6E22E\">INFO</font>:     Waiting for application startup.\n<font color=\"#A6E22E\">INFO</font>:     Application startup complete.\n<font color=\"#A6E22E\">INFO</font>:     Started server process [<font color=\"#A1EFE4\">27367</font>]\n<font color=\"#A6E22E\">INFO</font>:     Waiting for application startup.\n<font color=\"#A6E22E\">INFO</font>:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Adding max_length Validation to a Query Parameter Using Annotated\nDESCRIPTION: Demonstrates using Query with Annotated to add max_length validation to an optional string query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(max_length=50)] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Installing PyJWT and PassLib in Python\nDESCRIPTION: These console commands show how to install PyJWT for JWT token handling and PassLib with Bcrypt for password hashing in a Python virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pyjwt\n\n---> 100%\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install \"passlib[bcrypt]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Making a GET request using Requests library in Python\nDESCRIPTION: This snippet demonstrates how to make a simple GET request to a URL using the Python Requests library. It shows the basic syntax for fetching data from an API endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"response = requests.get(\"http://example.com/some/url\")\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure in Bash\nDESCRIPTION: Commands to create a directory structure for a new Python project, including a 'code' directory in the home folder and a project-specific directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd\n$ mkdir code\n$ cd code\n$ mkdir awesome-project\n$ cd awesome-project\n```\n\n----------------------------------------\n\nTITLE: Initializing class instance\nDESCRIPTION: This is an example of creating class instance using `__init__`\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Example lru_cache function\nDESCRIPTION: This Python code snippet provides an example of how `lru_cache` works by caching the results of a function based on its input arguments.  Subsequent calls with the same arguments will return the cached result, avoiding re-execution of the function's code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n\"from functools import lru_cache\\n\\n\\n@lru_cache\\ndef say_hi(name: str, salutation: str = \\\"Ms.\\\"):\\n    return f\\\"Hello {salutation} {name}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Request Class from FastAPI\nDESCRIPTION: This snippet demonstrates how to import the Request class directly from the FastAPI module. This class allows direct access to the raw HTTP request object without any validation in path operation functions or dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/request.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Request\n```\n\n----------------------------------------\n\nTITLE: Making a GET request with Requests\nDESCRIPTION: This snippet demonstrates how to make a simple GET request to a URL using the Requests library. Requests is a Python library for interacting with APIs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"response = requests.get(\"http://example.com/some/url\")\"\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Ordering with Star Argument (Python 3.8)\nDESCRIPTION: This snippet demonstrates using the `*` argument in a function signature to force subsequent parameters to be keyword arguments. This allows defining a query parameter `q` without `Query` before a path parameter `item_id` defined with `Path`, even if `q` lacks a default value.  Using `Annotated` resolves this issue more cleanly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(*, item_id: int = Path(title=\\\"The ID of the item to get\\\"), q: str):\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Using list of Pydantic Models\nDESCRIPTION: This snippet demonstrates how to use a list of a Pydantic model (Image) as a type annotation for a variable, enforcing that the list contains only objects of that model type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n\"images: list[Image]\"\n```\n\n----------------------------------------\n\nTITLE: Rendering FastAPI Team Members with Jinja2 Loop\nDESCRIPTION: This code renders a list of FastAPI team members using Jinja2 templating. It iterates through team members and displays their GitHub profile information including avatar and username.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n<div class=\"user-list user-list-center\">\n\n{% for user in members[\"members\"] %}\n\n<div class=\"user\"><a href=\"{{ user.url }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"{{ user.avatar_url }}\"/></div><div class=\"title\">@{{ user.login }}</div></a></div>\n\n{% endfor %}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Hints for Error Checking\nDESCRIPTION: This example shows a Python function `process_age` that uses type hints to specify that `name` is a string and `age` is an integer. When an incorrect type (e.g., a string for `age`) is passed, the editor can detect a potential error, helping to prevent bugs and improve code reliability.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"def process_age(name: str, age: int):\n    return name + \" is \" + age\"\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Behind TLS Termination Proxy in Dockerfile\nDESCRIPTION: This command configures Uvicorn to run behind a TLS termination proxy, trusting the headers sent by the proxy and assuming the application is running under HTTPS.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Hints\nDESCRIPTION: This Python function `get_full_name` demonstrates the use of type hints by specifying that `first_name` and `last_name` are strings (`str`). Type hints improve code readability, enable editor support for autocompletion and error checking, and allow tools like FastAPI to automatically perform data validation and conversion.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_full_name(first_name: str, last_name: str):\n    return first_name.title() + \" \" + last_name.title()\"\n```\n\n----------------------------------------\n\nTITLE: Using Query with Length Validation\nDESCRIPTION: Importing Query from FastAPI and applying max_length validation to a query parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Query\n\nq: Union[str, None] = Query(default=None, max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Defining Uvicorn Command for Single File App\nDESCRIPTION: This command configures the execution of the Uvicorn server when the FastAPI application is in a single file (`main.py`).  It instructs Uvicorn to import the `app` object from the `main` module, serving the application.  The `--host` and `--port` flags set the listening address and port for the server.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"CMD [\\\"uvicorn\\\", \\\"main:app\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"80\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation for Float Values\nDESCRIPTION: Demonstrates numeric validation for float values, using gt and lt constraints to specify an acceptable range with decimal precision.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path, Query\nfrom typing import Annotated\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: UploadFile with Additional Metadata - Python FastAPI\nDESCRIPTION: Example showing how to add metadata to file uploads using File() with UploadFile\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(description=\"A file read as bytes\")\n):\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\")\n):\n```\n\n----------------------------------------\n\nTITLE: Visualizing lru_cache Behavior with Mermaid Sequence Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the behavior of a function decorated with @lru_cache. It shows how the function executes for new argument combinations and returns cached results for repeated calls with the same arguments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_16\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n\nparticipant code as Code\nparticipant function as say_hi()\nparticipant execute as Execute function\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> execute: execute function code\n        execute ->> code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> code: return stored result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Rick\")\n        function ->> execute: execute function code\n        execute ->> code: return the result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function ->> execute: execute function code\n        execute ->> code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Rick\")\n        function ->> code: return stored result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> code: return stored result\n    end\n```\n\n----------------------------------------\n\nTITLE: Declaring Metadata for Path Parameters with Annotated\nDESCRIPTION: Shows how to declare title metadata for a path parameter using Path with Annotated in a FastAPI endpoint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\nfrom typing import Annotated\n\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    return {\"item_id\": item_id}\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating FastAPI Instance with Global Dependencies\nDESCRIPTION: Demonstrates how to import FastAPI, create an instance, and add global dependencies that will be combined with dependencies from each APIRouter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = FastAPI(dependencies=[Depends(get_query_token)])\n```\n\n----------------------------------------\n\nTITLE: OpenAPI JSON Schemas for FastAPI Responses\nDESCRIPTION: This JSON snippet defines schemas used to detail response components in OpenAPI for FastAPI applications. It outlines Pydantic models like Message, Item, ValidationError, and HTTPValidationError. The schemas are integrated into OpenAPI, offering structured data representation for API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Tuple and Set Type Hints with typing\nDESCRIPTION: This snippet demonstrates the usage of `Tuple` and `Set` from the `typing` module. It defines a tuple `items_t` containing an integer, another integer and a string, and a set `items_s` which contains bytes. Type hints for tuples need to define the type of each element.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"from typing import Tuple, Set\n\ndef process_data(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    print(items_t, items_s)\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with pip\nDESCRIPTION: This command installs FastAPI and its standard dependencies using pip. The `[standard]` extra includes commonly used packages.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Docker Container Startup Command\nDESCRIPTION: Launches FastAPI application using Uvicorn with specific host and port configurations\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Integration with Strawberry and FastAPI\nDESCRIPTION: Demonstrates how to set up a basic GraphQL endpoint using Strawberry with FastAPI. Shows query definition and route mounting with ASGI middleware.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/graphql.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\nschema = strawberry.Schema(Query)\n\napp = FastAPI()\n\ngraphql_app = GraphQLRouter(schema)\n\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Changing Syntax Highlighting Theme in Swagger UI with FastAPI\nDESCRIPTION: Code snippet demonstrating how to change the syntax highlighting theme in Swagger UI by configuring the syntaxHighlight.theme parameter when initializing a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"syntaxHighlight.theme\": \"agate\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with the Asterisk Trick\nDESCRIPTION: Demonstrates using the asterisk (*) to force FastAPI to treat all following parameters as keyword arguments, allowing flexible parameter ordering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n\n```\n\n----------------------------------------\n\nTITLE: Install Passlib with Bcrypt support using pip\nDESCRIPTION: This command installs the Passlib library along with the Bcrypt hashing algorithm. Passlib is used for securely hashing and verifying passwords, and Bcrypt is a recommended algorithm for password security.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"passlib[bcrypt]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Manual Setup for Translated Documentation\nDESCRIPTION: Alternative approach to serve translated documentation by navigating to the language-specific directory and running MkDocs directly. This example is for Spanish documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs/es/\n$ mkdocs serve --dev-addr 127.0.0.1:8008\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cached Function with lru_cache in Python\nDESCRIPTION: Example of a simple Python function decorated with @lru_cache that stores return values based on input parameters. When called with the same parameters, the function returns the cached result instead of executing the function body again.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Single-File FastAPI Application\nDESCRIPTION: This Dockerfile is designed for a FastAPI application contained in a single file. It copies the main.py file and sets the command to run Uvicorn with the appropriate module path.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./main.py /code/\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Annotating Response Subclass\nDESCRIPTION: Shows how to annotate a function with a Response subclass like RedirectResponse, which FastAPI handles automatically\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef read_item(item_id: str) -> RedirectResponse:\n    return RedirectResponse(\"/docs\")\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Conversion\nDESCRIPTION: This code corrects the error from the previous snippet by explicitly converting the integer `age` to a string using `str(age)` before concatenating it with the other strings. This resolves the potential TypeError.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"def get_name_with_age(name: str, age: int):\n    return name + \" is \" + str(age)\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Type Annotations in FastAPI\nDESCRIPTION: Demonstrates basic type annotations for parameters and models using standard Python type hints\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nitem_id: int\n```\n\nLANGUAGE: Python\nCODE:\n```\nitem: Item\n```\n\n----------------------------------------\n\nTITLE: FastAPI Test File Structure Example\nDESCRIPTION: Demonstrates the recommended file structure for testing a FastAPI application with async capabilities\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app\n│   ├── __init__.py\n│   ├── main.py\n│   └── test_main.py\n```\n\n----------------------------------------\n\nTITLE: Override Deep Linking in Swagger UI with FastAPI\nDESCRIPTION: This snippet demonstrates how to override the default `deepLinking` setting in Swagger UI by setting it to `False` in the `swagger_ui_parameters` dictionary when creating a FastAPI app. This allows disabling deep linking functionality within the Swagger UI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI(swagger_ui_parameters={\"deepLinking\": False})\n```\n\n----------------------------------------\n\nTITLE: Importing Path and Annotated in FastAPI\nDESCRIPTION: Shows how to import Path from fastapi and Annotated from typing to handle path parameter validations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Path\\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Python Function with Basic Type Hints\nDESCRIPTION: This function shows how to use basic Python types as type hints, including `int`, `float`, `bool`, and `bytes`. These type hints specify the expected data type for each parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"def process_data(number: int, price: float, is_active: bool, data: bytes):\n    print(number, price, is_active, data)\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Making a GET request with Requests\nDESCRIPTION: This code snippet shows how to make a GET request to a URL using the Requests library.  It demonstrates the simple and intuitive API of Requests, which inspired FastAPI's design.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nresponse = requests.get(\"http://example.com/some/url\")\n```\n\n----------------------------------------\n\nTITLE: Docker Command for FastAPI Behind TLS Termination Proxy\nDESCRIPTION: Modified uvicorn command for running FastAPI applications behind a TLS termination proxy like Nginx or Traefik, enabling proper handling of forwarded headers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Query from FastAPI\nDESCRIPTION: This snippet demonstrates how to import the `Query` class from the `fastapi` module.  The `Query` class is used to add validations and metadata to query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Adding Title Metadata to Query Parameters in FastAPI (Python 3.10+)\nDESCRIPTION: Shows how to add a title to a query parameter using the Query class. This title will be included in the OpenAPI documentation to provide more context about the parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Copying Application Code in Dockerfile\nDESCRIPTION: This command copies the application code (located in the `./app` directory on the host) to the `/code/app` directory within the Docker image. This step is placed towards the end of the Dockerfile because application code changes more frequently.  This approach minimizes the amount of the Dockerfile that needs to be re-executed during development, improving build times.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"COPY ./app /code/app\"\n```\n\n----------------------------------------\n\nTITLE: Using RedirectResponse with response_class in FastAPI\nDESCRIPTION: Demonstrates how to use RedirectResponse as a response_class parameter in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\", response_class=RedirectResponse)\nasync def redirect_typer():\n    return \"https://typer.tiangolo.com\"\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Asterisk in FastAPI (Python)\nDESCRIPTION: Demonstrates a special syntax using asterisk for parameter ordering in FastAPI without Annotated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Dockerfile\nDESCRIPTION: This command uses `pip` to install the Python package dependencies listed in the `/code/requirements.txt` file within the Docker image. The `--no-cache-dir` option prevents `pip` from storing downloaded packages locally, saving space in the image.  The `--upgrade` flag ensures that packages are updated if they are already installed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Making GET Request with Python Requests Library\nDESCRIPTION: Demonstrates how to make a simple GET request using the Requests library in Python. This snippet is used to illustrate the simplicity of the Requests API, which inspired FastAPI's design.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = requests.get(\"http://example.com/some/url\")\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic Field\nDESCRIPTION: Shows how to import Field from Pydantic library for use with FastAPI models\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\n```\n\n----------------------------------------\n\nTITLE: Documenting HTMLResponse in OpenAPI\nDESCRIPTION: Demonstrates how to document the response in OpenAPI while still overriding the response within the function. It uses the response_class parameter for documentation and returns a Response object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\ndef generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Types and Pydantic Models in FastAPI\nDESCRIPTION: Demonstrates how to use Python type hints and Pydantic models in FastAPI applications. It shows type hinting for function parameters and defining a Pydantic model for user data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare a variable as a str\n# and get editor support inside the function\ndef main(user_id: str):\n    return user_id\n\n\n# A Pydantic model\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Deprecated Query Parameter\nDESCRIPTION: Marking a query parameter as deprecated in FastAPI documentation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nq: Union[str, None] = Query(default=None, deprecated=True)\n```\n\n----------------------------------------\n\nTITLE: Disable Dependency Caching\nDESCRIPTION: This snippet shows how to disable caching for a dependency using the `use_cache` parameter in `Depends`.  Setting `use_cache` to `False` ensures that the dependency is called every time it is needed within the same request, rather than using a cached value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n```\n\n----------------------------------------\n\nTITLE: Version Range Example for Older FastAPI Release\nDESCRIPTION: Example of pinning an older FastAPI version range, demonstrating the version constraint pattern for any minor version.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nfastapi>=0.45.0,<0.46.0\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements with pip\nDESCRIPTION: Command to install all development dependencies for FastAPI using pip within a virtual environment. This installs packages listed in requirements.txt, including a local editable version of FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with Python\nDESCRIPTION: This code snippet demonstrates how to read environment variables using Python's `os.getenv()` function.  It imports the `os` module and uses `os.getenv()` to retrieve the value of the environment variable \"MY_NAME\", providing a default value of \"World\" if the variable is not set. The value is then used in a print statement.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image from the Dockerfile in the current directory.  The `-t myimage` option tags the image with the name `myimage`, making it easier to reference later. The `.` specifies the build context, which is the directory containing the Dockerfile and any files it references.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"docker build -t myimage .\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAPI URL - Python\nDESCRIPTION: This code snippet shows how to configure the URL where the OpenAPI schema is served in a FastAPI application. By default, it is served at `/openapi.json`, but this can be changed using the `openapi_url` parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n\n```\n\n----------------------------------------\n\nTITLE: Required Query and Path Parameters without Annotated\nDESCRIPTION: Shows parameter ordering with required query and path parameters without using Annotated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\\\"/items/{item_id}\\\")\\ndef read_items(q: str, item_id: int = Path(title=\\\"The ID of the item to get\\\")):\\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\n```\n\n----------------------------------------\n\nTITLE: Using UploadFile with Default Values\nDESCRIPTION: This snippet showcases how to utilize `UploadFile` while providing a default value using `File()`.  This is useful when the file upload is optional.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated, Optional\n\nfrom fastapi import FastAPI, UploadFile\n\napp = FastAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[Optional[UploadFile], File()] = None\n):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Header Parameters in FastAPI\nDESCRIPTION: This example demonstrates how to declare a header parameter using the Header class. It includes defining a default value and can include additional validation or annotation parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n```\n\n----------------------------------------\n\nTITLE: Formatting FastAPI Code\nDESCRIPTION: Command to run the formatting script that cleans and formats all code, including auto-sorting imports. This ensures code consistency throughout the project.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/format.sh\n```\n\n----------------------------------------\n\nTITLE: Reading Heroes\nDESCRIPTION: This code demonstrates how to read multiple `Hero` objects and serialize them into a list of `HeroPublic` models for the API response. This ensures that only the public data is returned.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/heroes/\", response_model=list[HeroPublic])\nasync def read_heroes(offset: int = 0, limit: int = Query(default=100, lte=100), db: Session = Depends(get_db)):\n    heroes = db.query(Hero).offset(offset).limit(limit).all()\n    return heroes\"\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Path Operation Function in FastAPI\nDESCRIPTION: This snippet demonstrates how to define a synchronous path operation function in FastAPI using the regular 'def' syntax. FastAPI runs these functions in an external threadpool.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef path_operation_function():\n    # Synchronous code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Reading from .env file - Pydantic v1\nDESCRIPTION: This code configures a Pydantic `Settings` class to read environment variables from a `.env` file. It uses the `Config` inner class to specify the `env_file` to load.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str\n    admin_email: str\n\n    class Config:\n        env_file = \".env\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn and Uvicorn\nDESCRIPTION: Install Gunicorn and Uvicorn with the standard extras using pip.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"uvicorn[standard]\" gunicorn\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Defining a File Parameter with bytes Type\nDESCRIPTION: Shows how to define a file parameter using the File class with bytes type, which loads the entire file content into memory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def create_file(file: bytes = File()):\n```\n\n----------------------------------------\n\nTITLE: Importing Form from FastAPI in Python\nDESCRIPTION: This code snippet demonstrates how to import the Form class from the FastAPI module, which is essential for handling form data in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Form\n```\n\n----------------------------------------\n\nTITLE: Importing Security Function in FastAPI\nDESCRIPTION: Shows how to import the Security function from FastAPI. The Security() function is used similarly to Depends() but with the additional capability of declaring OAuth2 scopes for authorization purposes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Security\n```\n\n----------------------------------------\n\nTITLE: Returning HTMLResponse Directly in FastAPI\nDESCRIPTION: Shows how to return an HTMLResponse directly from a path operation function, overriding the default behavior.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n```\n\n----------------------------------------\n\nTITLE: Using Class Dependency with Explicit Type and Depends\nDESCRIPTION: Example of declaring a dependency using a class with both type annotation and Depends.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for FastAPI Templates\nDESCRIPTION: CSS code snippet for styling the HTML template, which is served as a static file in the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n{!../../docs_src/templates/static/styles.css!}\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Python\nDESCRIPTION: Python에서 os.getenv() 함수를 사용하여 환경 변수를 읽는 방법을 보여줍니다. 환경 변수가 설정되지 않은 경우 기본값을 지정할 수 있습니다. 이 예제는 MY_NAME 환경 변수를 읽고 인사말을 출력합니다.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Python Script to Preprocess OpenAPI JSON\nDESCRIPTION: This Python script preprocesses an OpenAPI JSON file to remove the prefixed tag from operation IDs. It loads the OpenAPI specification from `openapi.json`, iterates through the paths, and modifies the operation IDs by removing the tag prefix, resulting in cleaner method names for generated clients.  The modified OpenAPI spec is then written back to `openapi.json`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport json\n\nwith open(\"openapi.json\") as f:\n    data = json.load(f)\n\nfor path, path_item in data[\"paths\"].items():\n    for operation, operation_item in path_item.items():\n        operation_id = operation_item.get(\"operationId\")\n        if operation_id:\n            parts = operation_id.split(\"-\", 1)\n            if len(parts) > 1:\n                new_operation_id = parts[1]\n                operation_item[\"operationId\"] = new_operation_id\n\nwith open(\"openapi.json\", \"w\") as f:\n    json.dump(data, f, indent=2)\n\n```\n\n----------------------------------------\n\nTITLE: Importing Header in FastAPI\nDESCRIPTION: Import the Header class from FastAPI, which is required to define header parameters in route functions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Header\n```\n\n----------------------------------------\n\nTITLE: Python Type Declarations and Pydantic Model Definition\nDESCRIPTION: This snippet demonstrates the usage of Python type declarations and Pydantic models for defining data structures and validating input. It shows how to declare parameter types for functions and how to define a Pydantic model with type annotations for fields. This leverages Python's type hinting system and Pydantic's validation capabilities.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/features.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Zadeklaruj parametr jako str\n# i uzyskaj wsparcie edytora wewnątrz funkcji\ndef main(user_id: str):\n    return user_id\n\n\n# Model Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in Validation Exception Handler\nDESCRIPTION: This snippet illustrates how to access the request body within a RequestValidationError exception handler in FastAPI. By accessing the exc.body attribute, the handler can retrieve the original request body that caused the validation error. This is useful for including the invalid data in the error response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Request\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=422,\n        content={\"detail\": exc.errors(), \"body\": exc.body},\n    )\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Validation with Annotated in Python 3.10+\nDESCRIPTION: Shows how to add max_length validation for query parameters using Annotated and Query\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(max_length=50)] = None\n```\n\n----------------------------------------\n\nTITLE: Importing Path from FastAPI\nDESCRIPTION: Demonstrates how to import the Path class from FastAPI for declaring path parameter validations and metadata\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Path\n```\n\n----------------------------------------\n\nTITLE: Pinning Pydantic version in requirements.txt\nDESCRIPTION: This snippet shows how to specify a version range for Pydantic in the `requirements.txt` file. It is recommended to use Pydantic versions 1.0.0 and above with FastAPI. This will ensure a stable API for Pydantic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n\"pydantic>=1.2.0,<2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding Description Metadata to Query Parameter in FastAPI\nDESCRIPTION: This example demonstrates how to add both a title and a description to a query parameter for more detailed OpenAPI documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(title=\"Query string\", description=\"Query string for the items to search in the database that have a good match\")] = None\n```\n\n----------------------------------------\n\nTITLE: Pydantic Version Constraint in Requirements.txt\nDESCRIPTION: Shows how to specify compatible Pydantic versions, ensuring compatibility with FastAPI while allowing updates within major version 2.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\npydantic>=2.7.0,<3.0.0\n```\n\n----------------------------------------\n\nTITLE: Switching Projects Without Deactivating Virtual Environment\nDESCRIPTION: Demonstrates an error that occurs when trying to run a Python script in a new project without deactivating the previous virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importando sirius, no está instalado 😱\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Body Parameter\nDESCRIPTION: Introducing an additional body parameter using Body parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_item(item: Item, user: User, importance: int = Body(...))\n```\n\n----------------------------------------\n\nTITLE: Installing a package with extras using pip\nDESCRIPTION: This example shows how to install a package (FastAPI) with extras (standard) using pip.  Extras allow installing optional dependencies along with the core package.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n// Don't run this now, it's just an example 🤓\n$ pip install \"fastapi[standard]\"\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Python Class Type Hint\nDESCRIPTION: This code shows how to use a class (`Person`) as a type hint.  By annotating the `person` variable with the `Person` class, the editor can provide autocompletion and type checking for the `person` object's attributes and methods.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"class Person:\n    def __init__(self, name: str):\n        self.name = name\n\ndef get_person_name(person: Person):\n    return person.name\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment\nDESCRIPTION: This command activates a Python virtual environment. It modifies the shell's environment variables to ensure that the Python executable and packages within the virtual environment are used. The input is the path to the `activate` script within the virtual environment directory. The output is the modified shell environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"$ source .venv/bin/activate\"\n```\n\n----------------------------------------\n\nTITLE: Declare Dependency in Path Operation: Python\nDESCRIPTION: This code shows how to declare a dependency of type `CommonQueryParams` in a FastAPI path operation function. It uses the `Depends` function to inject an instance of `CommonQueryParams` into the `commons` parameter of the function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n```\n\n----------------------------------------\n\nTITLE: Using Annotated for Metadata in Python 3.9+\nDESCRIPTION: This code snippet demonstrates using `Annotated` from the `typing` module to add metadata to type hints in Python 3.9 and later. `Annotated` allows you to provide extra information about a type without changing its underlying type. In this example, it is used to add metadata to a string type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"from typing import Annotated\n\nfrom typing import Union\n\nname: Annotated[str, 'some metadata'] = 'John Doe'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Package JSON for OpenAPI Client Generation\nDESCRIPTION: Configures package.json script to generate a TypeScript client using openapi-ts with Axios, reading from a local openapi.json file\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Script (Error)\nDESCRIPTION: This example shows an error that occurs when running a Python script without activating the correct virtual environment. The script attempts to import a module ('sirius') that is not installed in the currently active environment, resulting in an `ImportError`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed 😱\nTraceback (most recent call last):\n    File \\\"main.py\\\", line 1, in <module>\n        import sirius\"\n```\n\n----------------------------------------\n\nTITLE: Using RedirectResponse with Custom Status Code in FastAPI\nDESCRIPTION: Example showing how to use RedirectResponse as a response_class with a custom status code instead of the default 307.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/typer\", response_class=RedirectResponse, status_code=302)\nasync def redirect_typer():\n    return \"https://typer.tiangolo.com\"\n```\n\n----------------------------------------\n\nTITLE: Custom APIRoute Class in a Router in FastAPI\nDESCRIPTION: This code snippet shows how to use a custom `APIRoute` class with an `APIRouter` in FastAPI. The `route_class` parameter of `APIRouter` is set to the custom `TimedRoute` class. This ensures that all routes defined within the router will use the custom route class, enabling consistent behavior and modifications across multiple endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter(prefix=\"/items\", route_class=TimedRoute)\n```\n\n----------------------------------------\n\nTITLE: Returning a dictionary from a dependency in FastAPI\nDESCRIPTION: This code snippet demonstrates how to return a dictionary from a dependency function in FastAPI. The dictionary contains common query parameters that can be used in multiple path operations. However, it lacks type support compared to using classes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSockets\nDESCRIPTION: Installs the `websockets` library using pip. This is a necessary dependency for using WebSockets in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ pip install websockets\n\n---> 100%\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional File Upload in FastAPI\nDESCRIPTION: This snippet illustrates how to make file uploads optional in FastAPI by using type annotations and setting a default value of None.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial001_02_an_py310.py hl[9,17] *}\n```\n\n----------------------------------------\n\nTITLE: Python List Type Hint with Typing Module\nDESCRIPTION: This code snippet demonstrates how to use the `List` type from the `typing` module to specify that a variable is a list of strings.  The `typing` module provides support for more complex type hints beyond the basic Python types, enabling more precise type annotations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import List\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\"\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse with file-like objects in FastAPI\nDESCRIPTION: Creates a generator function that yields content from a file-like object to stream it as a response without loading everything into memory first. The with block ensures the file is properly closed after streaming completes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(\"large-file.txt\", mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile())\n\n```\n\n----------------------------------------\n\nTITLE: Overriding FastAPI's Exception Handlers\nDESCRIPTION: This snippet demonstrates how to override FastAPI's default exception handlers. It shows how to import the built-in exception handlers from fastapi.exception_handlers, and then set them. This allows you to customize the behavior of the default exception handlers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Request\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.exception_handlers import (  # Import the exception handlers\n    request_validation_exception_handler,\n    http_exception_handler,\n)\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    return await http_exception_handler(request, exc)\n```\n\n----------------------------------------\n\nTITLE: Running Example FastAPI Applications from Documentation\nDESCRIPTION: Command to run FastAPI example applications from the documentation using the CLI development mode. This allows testing documentation examples while simultaneously viewing the documentation on a different port.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev tutorial001.py\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Web Framework in Python\nDESCRIPTION: Initial step of importing the FastAPI class to create a web application. This is the foundation for building a web API with FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n```\n\n----------------------------------------\n\nTITLE: Returning values from dependencies in FastAPI\nDESCRIPTION: Illustrates that path operation functions do not use the return values of path decorator dependencies, regardless of whether they return values or not. The example reuses the `get_token_header` and `get_key` dependencies, which return values, but these values are ignored by the `read_items` function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"async def get_token_header(x_token: str = Header()):\\n    if x_token != \\\"fixed-token\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\\n    return x_token\\n\\nasync def get_key(x_key: str = Header()):\\n    if x_key != \\\"fixed-key\\\":\\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\\n    return x_key\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", dependencies=[Depends(get_token_header), Depends(get_key)])\\nasync def read_items(item_id: str):\\n    return {\"item_id\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Query and Annotated for Parameter Validation in FastAPI (Python 3.10+)\nDESCRIPTION: Imports the necessary modules 'Query' from FastAPI and 'Annotated' from typing to enable enhanced query parameter validations. 'Annotated' provides metadata support unlike traditional type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Query\nfrom typing import Annotated\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Command with Proxy Headers\nDESCRIPTION: This command extends the basic Uvicorn command to include the `--proxy-headers` option. This is useful when running the container behind a TLS termination proxy (like Nginx or Traefik). It ensures Uvicorn trusts the headers sent by the proxy, correctly identifying that the app is running behind HTTPS.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"CMD [\\\"uvicorn\\\", \\\"app.main:app\\\", \\\"--proxy-headers\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"80\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Python Class Type Hint\nDESCRIPTION: This code snippet demonstrates how to use a custom class as a type hint. The `Person` class is defined, and then a variable is annotated with this class, indicating that the variable should be an instance of the `Person` class. This allows for better code organization and editor support.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n\"class Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\ndef get_person(person: Person):\n    return person.name\"\n```\n\n----------------------------------------\n\nTITLE: Marking Query Parameter as Deprecated in FastAPI\nDESCRIPTION: This example demonstrates how to mark a query parameter as deprecated in the OpenAPI schema and documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str | None, Query(deprecated=True)] = None\n```\n\n----------------------------------------\n\nTITLE: Installing File Upload Dependencies - Python Console\nDESCRIPTION: Command to install python-multipart package required for handling file uploads in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install python-multipart\n```\n\n----------------------------------------\n\nTITLE: Eliminando un Héroe con FastAPI y SQLModel en Python\nDESCRIPTION: Implementa un endpoint DELETE para eliminar un héroe específico por su ID.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int):\n    with Session(engine) as session:\n        hero = session.get(Hero, hero_id)\n        if not hero:\n            raise HTTPException(status_code=404, detail=\"Hero not found\")\n        session.delete(hero)\n        session.commit()\n        return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: 挂载FastAPI子应用到顶层应用\nDESCRIPTION: 将子应用挂载到顶层应用的指定路径(/subapi)下，使子应用成为顶层应用的一部分，但保持独立的文档和路径。\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsubapi = FastAPI()\n\napp.mount(\"/subapi\", subapi)\n```\n\n----------------------------------------\n\nTITLE: Deactivating and Activating Virtual Environments When Switching Projects\nDESCRIPTION: Shows the correct process of deactivating the current virtual environment, changing to a new project directory, and activating the new project's virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n// No necesitas estar en el directorio antiguo para desactivar, puedes hacerlo donde sea que estés, incluso después de ir al otro proyecto 😎\n$ deactivate\n\n// Activa el entorno virtual en prisoner-of-azkaban/.venv 🚀\n$ source .venv/bin/activate\n\n// Ahora cuando ejecutes python, encontrará el paquete sirius instalado en este entorno virtual ✨\n$ python main.py\n\nI solemnly swear 🐺\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Hints and String Conversion\nDESCRIPTION: This Python function `process_age` includes type hints and converts the `age` integer to a string using `str(age)` before concatenating it with the name. This demonstrates how to handle type mismatches and ensure that the function returns the expected output without type-related errors.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"def process_age(name: str, age: int):\n    return name + \" is \" + str(age)\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Swagger UI Parameters in FastAPI\nDESCRIPTION: Example of how to override FastAPI's default Swagger UI parameters by passing custom values in the swagger_ui_parameters dictionary, in this case disabling deepLinking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"deepLinking\": False}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GzipRoute Class in FastAPI\nDESCRIPTION: This code defines a custom `GzipRoute` class that inherits from `fastapi.routing.APIRoute`. It overrides the `get_route_handler()` method to create a `GzipRequest` instance from the original request. This allows the application to automatically handle Gzip-compressed requests by using the custom `GzipRequest` class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Callable, Type\n\nfrom fastapi import Depends, FastAPI, Header, Request, Response\nfrom fastapi.routing import APIRoute\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Unpacking Dictionary to Create New Pydantic Model\nDESCRIPTION: Shows how to use the ** operator to unpack a dictionary when creating a new Pydantic model instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nUserInDB(**user_dict)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: Specifies required Python packages and their version constraints for the FastAPI project. Includes core dependencies like PyGithub for GitHub integration, pydantic for data validation, httpx for HTTP requests, pyyaml for YAML processing, and smokeshow for testing.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-github-actions.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.28.0\npyyaml >=5.3.1,<7.0.0\nsmokeshow\n```\n\n----------------------------------------\n\nTITLE: Manual Documentation Server Setup Alternative\nDESCRIPTION: Alternative approach to serve documentation by navigating to the documentation directory and running MkDocs directly. This achieves the same result as the docs.py script.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs/en/\n$ mkdocs serve --dev-addr 127.0.0.1:8008\n```\n\n----------------------------------------\n\nTITLE: Error Response for Forbidden Extra Fields\nDESCRIPTION: This JSON response example is returned when a client submits form data with fields not allowed by the Pydantic model configuration. It contains details about the forbidden extra field.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous test example with pytest and HTTPX\nDESCRIPTION: This code snippet represents an asynchronous test example for a FastAPI application. It likely uses pytest with AnyIO and HTTPX to perform asynchronous requests and assertions.  The tests likely interact with the application defined in `main.py`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"{* ../../docs_src/async_tests/test_main.py *}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Package Version with Pip\nDESCRIPTION: Example of installing a specific version of a package using pip, which helps manage package dependencies\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"harry==1\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"harry==3\"\n```\n\n----------------------------------------\n\nTITLE: Importing File and UploadFile in FastAPI\nDESCRIPTION: Demonstrates how to import the File and UploadFile classes from the FastAPI framework, which are necessary for handling file uploads.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, File, UploadFile\n```\n\n----------------------------------------\n\nTITLE: Using the FastAPI CLI to run applications\nDESCRIPTION: Example showing how to use the 'fastapi run' command to start a FastAPI application in production mode. The command automatically locates the app object and serves it on the default host and port.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi run main.py\n```\n\n----------------------------------------\n\nTITLE: Sample .env file\nDESCRIPTION: This is an example of a `.env` file containing environment variables used to configure the application.  Each line defines a variable assignment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment using venv\nDESCRIPTION: Command to create a new Python virtual environment named '.venv' using the built-in venv module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Restricting form fields to only those defined in Pydantic model\nDESCRIPTION: Example showing how to configure a Pydantic model to forbid extra fields in form data submissions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhl[12]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Python (Pre-3.10)\nDESCRIPTION: Example of defining a function with an Optional parameter in Python versions before 3.10. The parameter is required but can accept None as a value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n```\n\n----------------------------------------\n\nTITLE: UJSONResponse in FastAPI\nDESCRIPTION: Demonstrates the use of UJSONResponse as an alternative JSON response using ujson. It shows how to import and use UJSONResponse in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Async Function Await Usage\nDESCRIPTION: Demonstrates how to use await with an asynchronous function to retrieve results, allowing Python to perform other operations during wait times\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nburgers = await get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with Standard Dependencies\nDESCRIPTION: Pip command to install FastAPI with optional standard dependencies for full feature support\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/index.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic's BaseModel in FastAPI\nDESCRIPTION: Shows how to import the BaseModel class from Pydantic, which is required for creating data models that will be used to validate request bodies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n```\n\n----------------------------------------\n\nTITLE: Working with Pydantic Model Dictionary Conversion\nDESCRIPTION: Explains how to convert between Pydantic models using the dict() method and Python's dictionary unpacking with ** operator to create new model instances from existing ones.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nuser_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Type hinting for int in FastAPI\nDESCRIPTION: This snippet demonstrates how to use type hints in FastAPI to define the type of a parameter. Here, `item_id` is declared as an integer. This type hint is used for data validation, editor support, and automatic API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nitem_id: int\n```\n\n----------------------------------------\n\nTITLE: Declaring Tuple and Set Types with Type Hints in Python 3.9+\nDESCRIPTION: This example demonstrates how to declare tuple and set variables with type hints in Python 3.9 and above.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nitems_t: tuple[int, int, str] = (1, 2, \"foo\")\nitems_s: set[bytes] = {b\"foo\", b\"bar\", b\"baz\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for FastAPI\nDESCRIPTION: This code snippet defines the required Python packages and their version constraints for the FastAPI project. It includes httpx for HTTP client functionality and tests, as well as ruff for linting and generating documentation versions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# For mkdocstrings and tests\nhttpx >=0.23.0,<0.28.0\n# For linting and generating docs versions\nruff ==0.11.2\n```\n\n----------------------------------------\n\nTITLE: Declaring List Type with Type Hint in Python 3.8+\nDESCRIPTION: This example shows how to declare a variable as a list of strings using type hints in Python 3.8 and above, using the typing module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n\nitems: List[str] = [\"Foo\", \"Bar\", \"Baz\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Servers in OpenAPI with root_path\nDESCRIPTION: A FastAPI application that defines custom OpenAPI servers for staging and production environments, which FastAPI will combine with an automatically generated server from the root_path value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n\n\n@app.get(\"/app\")\nasync def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n\n```\n\n----------------------------------------\n\nTITLE: Installing packages using pip\nDESCRIPTION: This command installs a specified Python package (in this case, `fastapi[standard]`) using `pip` within the active virtual environment. The `fastapi[standard]` syntax indicates that the `fastapi` package should be installed along with the `standard` extras.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ pip install \"fastapi[standard]\"\n\n---> 100%\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Form in FastAPI\nDESCRIPTION: Imports the `Form` class from the `fastapi` module. This is necessary to define form parameters in your API endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/request-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, Form\"\n```\n\n----------------------------------------\n\nTITLE: Displaying FastAPI Experts with Contribution Count using Jinja2\nDESCRIPTION: This code snippet creates a display of FastAPI experts who have helped with questions on GitHub. It shows each user's avatar, username, and the count of questions they've replied to, while filtering out certain users.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n<div class=\"user-list user-list-center\">\n\n{% for user in people.last_month_experts[:10] %}\n\n{% if user.login not in skip_users %}\n\n<div class=\"user\"><a href=\"{{ user.url }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"{{ user.avatarUrl }}\"/></div><div class=\"title\">@{{ user.login }}</div></a> <div class=\"count\">Questions replied: {{ user.count }}</div></div>\n\n{% endif %}\n\n{% endfor %}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Custom Name Using Uvicorn\nDESCRIPTION: This command shows how to start a FastAPI application with a custom name using Uvicorn. It references the main module and the custom app instance name.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:my_awesome_api --reload\n```\n\n----------------------------------------\n\nTITLE: Using Set for Unique Tags\nDESCRIPTION: Demonstrates declaring a set of unique string tags using Set from typing module\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Set\n\nclass Item(BaseModel):\n    name: str\n    tags: Set[str]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Script to Preprocess OpenAPI JSON\nDESCRIPTION: This JavaScript script preprocesses an OpenAPI JSON file to remove the prefixed tag from operation IDs. It reads the OpenAPI specification from `openapi.json`, iterates through the paths, and modifies the operation IDs by removing the tag prefix, resulting in cleaner method names for generated clients. The modified OpenAPI spec is then written back to `openapi.json`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require('fs');\n\nfs.readFile('openapi.json', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  const jsonData = JSON.parse(data);\n\n  for (const path in jsonData.paths) {\n    for (const operation in jsonData.paths[path]) {\n      const operationId = jsonData.paths[path][operation]?.operationId;\n      if (operationId) {\n        const parts = operationId.split('-', 1);\n        if (parts.length > 1) {\n          jsonData.paths[path][operation].operationId = parts[1];\n        }\n      }\n    }\n  }\n\n  fs.writeFile('openapi.json', JSON.stringify(jsonData, null, 2), err => {\n    if (err) {\n      console.error(err);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Response Class Globally in FastAPI\nDESCRIPTION: Example showing how to set a default response class for the entire FastAPI application by using the default_response_class parameter. This changes the default from JSONResponse to ORJSONResponse.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\napp = FastAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n```\n\n----------------------------------------\n\nTITLE: Correcting Type Mismatch in Python Function\nDESCRIPTION: This function corrects the type mismatch by converting the integer age to a string before concatenation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n```\n\n----------------------------------------\n\nTITLE: Specifying Pydantic version range in requirements.txt\nDESCRIPTION: This snippet illustrates how to specify a version range for Pydantic in a requirements.txt file.  This allows the usage of any Pydantic version above 1.2.0 and below 2.0.0. Pydantic is used for data validation and settings management.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n\"pydantic>=1.2.0,<2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Official FastAPI Docker Image with Gunicorn and Uvicorn\nDESCRIPTION: Dockerfile configuration using the official tiangolo/uvicorn-gunicorn-fastapi base image for more complex deployment scenarios\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Terminal command for building a Docker image for a FastAPI application\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t myimage .\n```\n\n----------------------------------------\n\nTITLE: Import Error Due to Wrong Virtual Environment\nDESCRIPTION: Demonstrates the error that occurs when trying to run a Python script with a virtual environment from a different project. The import fails because the required package isn't installed in the active environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Erro ao importar o Sirius, ele não está instalado 😱\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Dependency in FastAPI\nDESCRIPTION: Creates a simple dependency function that extracts an optional query parameter 'q' and returns it. This serves as a basic example of a 'dependable' in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def query_extractor(q: str | None = None):\n```\n\n----------------------------------------\n\nTITLE: Setting Routes with Traefik in routes.toml\nDESCRIPTION: This TOML file sets up the routing for the Traefik reverse proxy, configuring path prefixes and defining service URLs. It's instrumental for ensuring requests are properly forwarded from Traefik to the FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n```\n\n----------------------------------------\n\nTITLE: Using Context Values in a Jinja2 Template\nDESCRIPTION: Demonstrates how to reference context dictionary values within Jinja2 templates, including the usage of context identifiers like 'id' for dynamic content rendering.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\nItem ID: {{ id }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Function with lru_cache in Python\nDESCRIPTION: This snippet demonstrates the use of @lru_cache decorator to cache function results. The function 'say_hi' takes a name and an optional salutation, returning a greeting string. The cache ensures that repeated calls with the same arguments return the stored result instead of re-executing the function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example\nDESCRIPTION: This snippet demonstrates a simple Python function that concatenates a first name and last name, capitalizing the first letter of each. It highlights a use case where type hints can enhance editor auto-completion and code assistance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\nprint(get_full_name(\"john\", \"doe\"))\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Synchronous Function\nDESCRIPTION: Example of defining a regular synchronous function using the def keyword.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef get_sequential_burgers(number: int):\n    # Do some sequential stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Declaring Metadata for Path Parameters in FastAPI\nDESCRIPTION: This snippet showcases how to declare metadata, specifically the `title`, for a path parameter named `item_id` using `Path`.  The `...` indicates that the path parameter is required.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"from fastapi import FastAPI, Path\\n\\napp = FastAPI()\\n\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_items(\\n    item_id: int = Path(title=\"The ID of the item to get\"),\\n):\\n    return {\"item_id\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: RedirectResponse in FastAPI\nDESCRIPTION: Shows how to use RedirectResponse to return an HTTP redirect. It demonstrates direct return of RedirectResponse from a path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")\n```\n\n----------------------------------------\n\nTITLE: Truncating Docstring for OpenAPI in FastAPI\nDESCRIPTION: Shows how to limit the docstring text used in OpenAPI by using a form feed character (\\f) to truncate the output.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items():\n    \"\"\"Read items.\n\n    This is a long description that will be truncated.\n    \\f\n    :param foo: An extra parameter that won't be visible in OpenAPI.\n    \"\"\"\n    return [\"Foo\", \"Bar\", \"Baz\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Cookie Class in FastAPI\nDESCRIPTION: Shows how to import the Cookie class from FastAPI framework for cookie parameter handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/cookie-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Cookie\n```\n\n----------------------------------------\n\nTITLE: Declaring Dict Type with Type Hints in Python 3.9+\nDESCRIPTION: This example demonstrates how to declare a dictionary variable with type hints for both keys and values in Python 3.9 and above.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nprices: dict[str, float] = {\"apple\": 0.4, \"banana\": 0.5}\n```\n\n----------------------------------------\n\nTITLE: Function with Type Hints and Type Mismatch in Python\nDESCRIPTION: This function demonstrates a type mismatch where an integer is concatenated with strings, which would raise an error.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom CDN for FastAPI Documentation\nDESCRIPTION: Configures FastAPI to use custom CDN URLs for Swagger UI and ReDoc documentation. This includes importing necessary functions, disabling automatic docs, and creating custom path operations for documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = FastAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Types in Python Function Parameters\nDESCRIPTION: This function demonstrates the use of various simple type hints for function parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_e\n```\n\n----------------------------------------\n\nTITLE: Installing WebSockets package in Python\nDESCRIPTION: This snippet shows how to install the WebSockets package using pip, which is required for WebSocket functionality in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install websockets\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn ASGI Server\nDESCRIPTION: Command line instructions for installing Uvicorn with standard extras, which serves as the ASGI server required to run FastAPI applications in production.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPException in FastAPI\nDESCRIPTION: This code snippet demonstrates how to import the HTTPException class from fastapi, which is used to raise HTTP exceptions within your application. This allows you to return specific HTTP status codes and error details to the client when errors occur.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import HTTPException\"\n```\n\n----------------------------------------\n\nTITLE: Single File Upload with Bytes - Python FastAPI\nDESCRIPTION: Example showing how to handle single file upload using File and bytes type in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, File\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: bytes = File()\n):\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment (Windows PowerShell)\nDESCRIPTION: This command activates the virtual environment using PowerShell on Windows. It executes the `Activate.ps1` script located in the `.venv\\Scripts` directory to configure the PowerShell session to use the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ .venv\\Scripts\\Activate.ps1\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Regular Synchronous Function\nDESCRIPTION: Shows a regular (non-async) function for contrast with the async version. This function cannot be awaited and will block execution when called.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# This is not asynchronous\ndef get_sequential_burgers(number: int):\n    # Do some sequential stuff to create the burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Regex Parameter in Pydantic v1 for Query Validation\nDESCRIPTION: Illustrates the use of the 'regex' parameter in older versions of Pydantic as a means of validating string patterns in query parameters. This approach is now deprecated, shifting to 'pattern' in newer versions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(regex='^fixedquery$')] = None\n```\n\n----------------------------------------\n\nTITLE: Multiple Files with Metadata - Python FastAPI\nDESCRIPTION: Example of handling multiple file uploads with additional metadata parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\")\n):\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n    token: str = Form()\n):\n```\n\n----------------------------------------\n\nTITLE: Package.json with Local OpenAPI File for Client Generation\nDESCRIPTION: An updated package.json configuration that uses a local preprocessed OpenAPI schema file instead of fetching it from the server.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Type Annotation Examples\nDESCRIPTION: Simple type annotation examples for integer and complex model types\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nitem_id: int\n\nitem: Item\n```\n\n----------------------------------------\n\nTITLE: Declaring Union Types with Type Hints in Python 3.10+\nDESCRIPTION: This example demonstrates how to declare a variable that can be of multiple types using the new union syntax in Python 3.10 and above.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nitem: int | str = 1\n```\n\n----------------------------------------\n\nTITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI (Python)\nDESCRIPTION: Demonstrates using 'gt' (greater than) and 'le' (less than or equal) numeric validations with Path in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nitem_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)]\n```\n\n----------------------------------------\n\nTITLE: Synchronous Function Definition in Python\nDESCRIPTION: This code snippet illustrates a standard, synchronous function definition in Python using `def`.  Unlike asynchronous functions, synchronous functions execute sequentially and block the execution of other tasks until they complete. This is suitable for CPU-bound tasks that do not involve waiting for external resources.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n```Python hl_lines=\"2\"\n# Isso não é assíncrono\ndef get_sequential_burgers(number: int):\n    # Faz alguma coisa sequencial para criar os hambúrgueres\n    return burgers\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with a Name Attribute in Python\nDESCRIPTION: This code defines a simple `Person` class with a `name` attribute. This class can then be used as a type hint for variables.  The `name` attribute is initialized in the constructor.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"class Person:\n    def __init__(self, name: str):\n        self.name = name\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment using uv\nDESCRIPTION: Command to create a new Python virtual environment using the uv tool, which automatically creates it in a '.venv' directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ uv venv\n```\n\n----------------------------------------\n\nTITLE: Example PATH variable (Linux, macOS)\nDESCRIPTION: This is an example of how the PATH environment variable might look before activating a virtual environment on Linux or macOS. It lists directories where the operating system searches for executable programs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Python Dictionary Unpacking Example\nDESCRIPTION: Simple example showing how to use Python's dictionary unpacking technique to merge dictionaries. This is useful for combining predefined responses with custom ones in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nold_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing item price from a FastAPI response\nDESCRIPTION: Accesses the 'item_price' attribute from the 'item' object to include pricing information in responses sent to clients using the FastAPI framework.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n... \"item_price\": item.price ...\n```\n\n----------------------------------------\n\nTITLE: Dependencies Request Requirements\nDESCRIPTION: This code snippet showcases dependency functions that declare request requirements, such as headers, and also have sub-dependencies. These dependencies can enforce request validation or authentication before the main path operation is executed. The values returned by these dependencies (if any) are not utilized when they are declared within `dependencies` in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \\\"fake-super-secret-token\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Token header invalid\\\")\n\n\nasync def verify_key(x_key: str = Header(...)):\n    if x_key != \\\"fake-super-secret-key\\\":\n        raise HTTPException(status_code=400, detail=\\\"X-Key header invalid\\\")\n```\n\n----------------------------------------\n\nTITLE: Simple Python Function\nDESCRIPTION: This simple Python function `get_full_name` takes two string arguments, `first_name` and `last_name`, converts the first letter of each name to uppercase using the `title()` method, and returns the full name by concatenating them with a space in between. It showcases a basic string manipulation task in Python without type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_full_name(first_name, last_name):\n    return first_name.title() + \" \" + last_name.title()\n\nprint(get_full_name(\"john\", \"doe\"))\"\n```\n\n----------------------------------------\n\nTITLE: Dependency Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the execution flow of dependencies with yield, including exception handling and background tasks.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,operation: Can raise exceptions, including HTTPException\n    client ->> dep: Start request\n    Note over dep: Run code up to yield\n    opt raise Exception\n        dep -->> handler: Raise Exception\n        handler -->> client: HTTP error response\n    end\n    dep ->> operation: Run dependency, e.g. DB session\n    opt raise\n        operation -->> dep: Raise Exception (e.g. HTTPException)\n        opt handle\n            dep -->> dep: Can catch exception, raise a new HTTPException, raise other exception\n        end\n        handler -->> client: HTTP error response\n    end\n\n    operation ->> client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation -->> tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks -->> tasks: Handle exceptions in the background task code\n    end\n```\n\n----------------------------------------\n\nTITLE: Python Main Check Pattern\nDESCRIPTION: Example of the __name__ == \"__main__\" conditional check pattern used to control code execution based on how the file is run.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\n----------------------------------------\n\nTITLE: Swagger UI JavaScript Presets\nDESCRIPTION: This snippet shows the default JavaScript presets used by FastAPI in Swagger UI.  These presets are JavaScript objects and cannot be directly passed from Python code.  They define the Swagger UI bundles and standalone presets.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npresets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic Field in Python\nDESCRIPTION: This snippet demonstrates how to import the `Field` class from the `pydantic` library. This import is necessary to use `Field` for defining validations and metadata within Pydantic models in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"from pydantic import Field\"\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Discussion Template for Translations in Markdown\nDESCRIPTION: This Markdown snippet provides a template for creating a new GitHub Discussion for a language translation. It includes a title, description, and a link to review PRs with specific labels.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## Bosnian translations\n\nThis is the issue to track translations of the docs to Bosnian. 🚀\n\nHere are the [PRs to review with the label `lang-bs`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓\n```\n\n----------------------------------------\n\nTITLE: Defining a Class and Using it as a Type\nDESCRIPTION: Example of defining a Person class and using it as a type annotation for a variable.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Person:\n    def __init__(self, name: str):\n        self.name = name\n\none_person: Person = Person(name=\"John\")\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI Minor Version in requirements.txt\nDESCRIPTION: Shows how to pin FastAPI to a specific minor version range, allowing patch updates for bug fixes while preventing potentially breaking changes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nfastapi>=0.45.0,<0.46.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Dependency Instance in FastAPI\nDESCRIPTION: This code shows how to create an instance of the callable class to be used as a parameterized dependency, with a fixed content value of \"bar\".\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nchecker = FixedContentQueryChecker(fixed_content=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Installing pydantic-settings\nDESCRIPTION: This command shows how to install the `pydantic-settings` package using pip. This package is required to use Pydantic's Settings management features in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ pip install pydantic-settings\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Defining File Parameters in FastAPI\nDESCRIPTION: This snippet shows how to define file parameters in a FastAPI route using the File class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial001_an_py39.py hl[9] *}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Dependency in FastAPI Endpoint\nDESCRIPTION: Use OAuth2PasswordBearer with Depends to add token-based authentication to a specific API endpoint, enabling security verification\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\ndef read_users_me(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with uv\nDESCRIPTION: Command to install FastAPI with all optional dependencies using uv in the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ uv pip install \"fastapi[standard]\"\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Adding max_length Validation to a Query Parameter Using Default Value\nDESCRIPTION: Shows the legacy approach of using Query as a default value to add max_length validation to an optional string query parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\nfrom typing import Union\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Awaiting an Asynchronous Function in Python\nDESCRIPTION: This snippet showcases the use of the `await` keyword when calling an asynchronous function in Python.  The `await` keyword ensures that the program waits for the `get_burgers(2)` function to complete its execution before assigning the result to the `burgers` variable.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n```Python\nburgers = await get_burgers(2)\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying FastAPI version range in requirements.txt\nDESCRIPTION: This snippet shows how to specify a version range for FastAPI in a requirements.txt file. This allows for using versions greater than or equal to 0.45.0 but less than 0.46.0, enabling bug fixes while avoiding potentially breaking changes. The requirements.txt file is commonly used to specify project dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"fastapi>=0.45.0,<0.46.0\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Response Status Code with FastAPI\nDESCRIPTION: This code snippet shows how to use the Response parameter in a FastAPI route to customize the status code. It demonstrates returning either a 200 OK or 201 Created status based on whether the item already exists.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item, response: Response):\n    if item.id in stored_items:\n        response.status_code = 200\n        return {\"message\": \"Item already exists\"}\n    else:\n        response.status_code = 201\n        return {\"message\": \"Item created successfully\"}\n```\n\n----------------------------------------\n\nTITLE: package.json using local OpenAPI file\nDESCRIPTION: This `package.json` snippet configures a frontend application with a script to generate client code using `openapi-ts`. The `generate-client` script uses a local OpenAPI specification file (`./openapi.json`) and outputs the generated client code to the `./src/client` directory, utilizing the `axios` library for HTTP requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables in Windows PowerShell\nDESCRIPTION: Windows PowerShell에서 환경 변수를 생성하고 사용하는 방법을 보여줍니다. $Env: 구문을 사용하여 환경 변수를 설정하고 접근합니다.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameter with Default Value in FastAPI\nDESCRIPTION: This snippet shows how to declare a query parameter 'q' with a minimum length of 3 and a default value of 'fixedquery'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nq: Annotated[str, Query(min_length=3)] = \"fixedquery\"\n```\n\n----------------------------------------\n\nTITLE: Installing Backports for Python 3.6\nDESCRIPTION: Install async-exit-stack and async-generator for Python 3.6 compatibility with yield dependencies\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install async-exit-stack async-generator\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment with uv\nDESCRIPTION: This command creates a virtual environment using the `uv` tool. By default, `uv` creates the environment in a directory called `.venv`. Alternatively a directory name can be specified.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ uv venv\n```\n```\n\n----------------------------------------\n\nTITLE: Returning HTMLResponse directly in FastAPI\nDESCRIPTION: This example demonstrates how to return an `HTMLResponse` object directly from a FastAPI endpoint. Instead of relying on the `response_class` parameter, the function creates and returns an `HTMLResponse` instance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    html_content = f\"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>{item_id}</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Creation for FastAPI with tiangolo/uvicorn-gunicorn-fastapi\nDESCRIPTION: This Dockerfile utilizes the `tiangolo/uvicorn-gunicorn-fastapi` base image for Python 3.9. It copies the `requirements.txt` file, installs the dependencies, and then copies the application code into the container. This is a basic setup for deploying a FastAPI application with Gunicorn and Uvicorn.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\n----------------------------------------\n\nTITLE: Tuple and Set Type Annotations\nDESCRIPTION: This example illustrates how to annotate variables as tuples and sets with specific types using the `typing` module. This snippet clarifies how to specify element types for tuples and sets.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Tuple, Set\n\nitems_t: Tuple[int, int, str]\nitems_s: Set[bytes]\"\n```\n\n----------------------------------------\n\nTITLE: Mixed Query Parameter Types and Requirements\nDESCRIPTION: Example of combining required, optional, and default-valued query parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(needy: str, skip: int = 0, limit: int | None = None):\n    return {\"needy\": needy, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Console Commands for Running Python App\nDESCRIPTION: Terminal commands demonstrating how to run a Python FastAPI application directly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Embedding Mailjet Newsletter Form in HTML\nDESCRIPTION: HTML iframe element that embeds a Mailjet subscription form with specific styling and attributes. The form is set to full width with a fixed height of 800px.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/newsletter.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe data-w-type=\"embedded\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" src=\"https://xr4n4.mjt.lu/wgt/xr4n4/hj5/form?c=40a44fa4\" width=\"100%\" style=\"height: 800px;\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Linux/macOS PATH Environment Example\nDESCRIPTION: Shows the structure of PATH environment variable on Linux and macOS systems, displaying system directories where executables are searched.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Translation Admonition Section Examples in Markdown\nDESCRIPTION: Examples demonstrating correct and incorrect ways to format translation admonitions, including proper keyword preservation and optional localized labels\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n/// tip\n\nThis is a tip.\n\n///\n\n/// tip\n\nEsto es un consejo.\n\n///\n\n/// consejo\n\nEsto es un consejo.\n\n///\n\n/// tip | consejo\n\nEsto es un consejo.\n\n///\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Functions with Requirements in FastAPI\nDESCRIPTION: This code snippet shows how to implement dependency functions that declare request requirements, such as headers. It demonstrates the structure of dependency functions used in FastAPI path operation decorators.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync def verify_token(x_token: str = Header()):\n    ...\n\nasync def verify_key(x_key: str = Header()):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python type hint for int\nDESCRIPTION: Example of a type hint for an integer\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nitem_id: int\n```\n\n----------------------------------------\n\nTITLE: Defining a FastAPI Endpoint for File Uploading\nDESCRIPTION: This snippet defines a FastAPI route that handles file uploads through the multipart/form-data content type. It utilizes the UploadFile and File classes to receive the uploaded files. The expected input is a file from a form, with the output being a response indicating success or failure.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile = File(...)):\n    return {\"filename\": file.filename}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Syntax Highlighting Theme\nDESCRIPTION: Shows how to change the syntax highlighting theme in Swagger UI using the syntaxHighlight.theme parameter.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp = FastAPI(\n    swagger_ui_parameters={\"syntaxHighlight.theme\": \"monokai\"}\n)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Response Schema Example for FastAPI\nDESCRIPTION: JSON representation of an OpenAPI response schema generated by FastAPI. This shows how different response types are structured in the OpenAPI documentation, including references to component schemas.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a return statement in FastAPI\nDESCRIPTION: This snippet is part of the return statement modification example, showing how to change the return value.  This demonstrates how simple changes can affect the API's response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n        ... \"item_name\": item.name ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags and Responses to FastAPI Router\nDESCRIPTION: Shows how to add custom tags and responses to a specific path operation in a FastAPI router, in addition to the tags and responses applied to the entire router.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@router.get(\"/users/{user_id}/items/{item_id}\", tags=[\"custom\"], responses={403: {\"description\": \"Operation forbidden\"}})\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows PowerShell\nDESCRIPTION: Command to activate the Python virtual environment on Windows using PowerShell.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition (Python 3.8)\nDESCRIPTION: This snippet defines a path parameter `item_id` using `Path` and a query parameter `q` without `Query`. It demonstrates how to handle parameter order when a parameter with a default value appears before one without a default value, which requires reordering the parameters. Using `Annotated` resolves this issue.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Optional\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(*, item_id: int = Path(title=\\\"The ID of the item to get\\\"), q: Optional[str] = None):\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI app with Hypercorn in production\nDESCRIPTION: Command to run a FastAPI application using Hypercorn in production mode, binding to all interfaces on port 80.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ hypercorn main:app --bind 0.0.0.0:80\n\nRunning on 0.0.0.0:8080 over http (CTRL + C to quit)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Async Function in FastAPI\nDESCRIPTION: This example shows an incorrect way of calling an async function without using await. The function get_burgers is defined with async def but is being called directly without await, which will not work properly.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Ceci ne fonctionne pas, car get_burgers a été défini avec async def\nburgers = get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP DELETE Route with Custom Status Code in FastAPI\nDESCRIPTION: This snippet illustrates how to define a DELETE route using @app.delete() and how to return a specific status code when an item is successfully deleted. The status_code parameter helps in indicating the successful operation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/items/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\\nasync def delete_item(item_id: int):\\n    return {\"message\": \"Item deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse with response_class in FastAPI\nDESCRIPTION: Example showing how to use FileResponse as a response_class parameter, which allows returning just the file path string from the route function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    some_file_path = \"large-video-file.mp4\"\n    return some_file_path\n```\n\n----------------------------------------\n\nTITLE: Nested Pydantic Model with Image Submodel\nDESCRIPTION: Shows creating a nested model with an Image submodel as an attribute\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\nclass Item(BaseModel):\n    name: str\n    image: Image\n```\n\n----------------------------------------\n\nTITLE: Running Python Script in Virtual Environment\nDESCRIPTION: Command to run a Python script (main.py) within the activated virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ python main.py\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Declaring a Variable with a Class Type in Python\nDESCRIPTION: This code demonstrates how to declare a variable with the type of a user-defined class (`Person`). This allows for editor support and type checking when working with instances of that class.  `one_person` is an instance of the `Person` class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"one_person: Person = Person(name='John')\"\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Hints and Error\nDESCRIPTION: This function demonstrates how type hints can help catch errors. The `age` parameter is annotated as an integer (`int`), but the code attempts to concatenate it with a string, which would raise a TypeError without proper conversion.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"def get_name_with_age(name: str, age: int):\n    return name + \" is \" + age\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON response from FastAPI\nDESCRIPTION: This JSON snippet represents a typical API response from a FastAPI endpoint.  It includes the `item_id` and the query parameter `q` as keys.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for FastAPI with Poetry Dependency Management\nDESCRIPTION: A multi-stage Dockerfile that uses Poetry for dependency management. The first stage generates a requirements.txt file from Poetry configuration, while the second stage builds the final image with only the necessary dependencies.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.9 as requirements-stage\n\nWORKDIR /tmp\n\nRUN pip install poetry\n\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Function with Type Annotations and Corrected Error\nDESCRIPTION: This code fixes the error in the previous example by converting the integer `age` to a string using `str(age)`.  This demonstrates how type annotations can help identify and correct type-related errors early in the development process.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\"\n```\n\n----------------------------------------\n\nTITLE: Calling Settings function\nDESCRIPTION: The following python function exemplifies retrieving settings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n\"Settings()\"\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment with venv\nDESCRIPTION: This command creates a virtual environment in a directory named `.venv` within the project directory using the `venv` module that comes with Python. It uses the python interpreter to run the venv module, which creates a new virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ python -m venv .venv\n```\n```\n\n----------------------------------------\n\nTITLE: Including Mailjet JavaScript Integration\nDESCRIPTION: Script tag to include Mailjet's non-captcha embedded form functionality JavaScript file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/newsletter.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://app.mailjet.com/pas-nc-embedded-v1.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Checking the active Python interpreter (Linux, macOS, Windows Bash)\nDESCRIPTION: This command verifies that the virtual environment is activated by displaying the path to the `python` executable. When the environment is active, it should point to the Python interpreter within the `.venv/bin` directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Environment in Linux/macOS\nDESCRIPTION: Uses the 'which' command to determine the path of the active Python interpreter, indicating if a virtual environment is in use.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Running a FastAPI Application with Uvicorn\nDESCRIPTION: Command to run a FastAPI application using the Uvicorn ASGI server with auto-reload enabled for development.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Python Module Import Example\nDESCRIPTION: Example showing how to import a FastAPI app from another module, demonstrating when the Uvicorn server won't automatically start.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp import app\n\n# Some more code\n```\n\n----------------------------------------\n\nTITLE: RedirectResponse as response_class in FastAPI\nDESCRIPTION: This code snippet demonstrates the use of `RedirectResponse` as a `response_class` in FastAPI. This configuration allows you to simply return the URL string, and FastAPI will handle the redirection using the `RedirectResponse` class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n\n@app.get(\"/redirect\", response_class=RedirectResponse)  # HL\nasync def redirect():\n    return \"https://www.example.com\"  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Importing with Relative Imports in Python\nDESCRIPTION: Demonstrates how to use relative imports in Python to import modules from parent directories. Shows examples with single and double dots.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom .dependencies import get_token_header\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom ..dependencies import get_token_header\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom ...dependencies import get_token_header\n```\n\n----------------------------------------\n\nTITLE: Starting FastAPI Application with Uvicorn\nDESCRIPTION: This snippet describes how to run a FastAPI application using Uvicorn. It initializes the main application and allows for live reloading during development. The command uses 'main.py' as the entry point.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/sub-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n\n<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Types with Union in Python 3.10+\nDESCRIPTION: This code snippet demonstrates how to declare a variable that can be either a string or None using the `|` operator in Python 3.10 and later. This is a cleaner way to express the same concept as `Union[str, None]`.  Using `str | None` declares a variable that can be either a string or None.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"name: str | None = None\"\n```\n\n----------------------------------------\n\nTITLE: PlainTextResponse Example in FastAPI\nDESCRIPTION: This code snippet demonstrates how to return a plain text response from a FastAPI endpoint using `PlainTextResponse`.  It sets the `response_class` to `PlainTextResponse` and returns the plain text content.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\", response_class=PlainTextResponse)  # HL\nasync def read_item(item_id: str):\n    return f\"Item ID: {item_id}\"  # HL\n\n```\n\n----------------------------------------\n\nTITLE: Checking active Python (Linux, macOS, Windows Bash)\nDESCRIPTION: This command, used in Linux, macOS, and Windows Bash, displays the full path to the Python interpreter currently being used. It verifies which Python is active after environment activation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with all extras\nDESCRIPTION: This command installs FastAPI along with all optional dependencies specified in the `all` extras. This includes `pydantic-settings` along with other utilities.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ pip install \"fastapi[all]\"\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Marking Query Parameter as Deprecated in FastAPI\nDESCRIPTION: This snippet shows how to mark a query parameter as deprecated in the API documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = Query(\n    default=None,\n    alias=\"item-query\",\n    title=\"Query string\",\n    description=\"Query string for the items to search in the database that have a good match\",\n    min_length=3,\n    max_length=50,\n    regex=\"^fixedquery$\",\n    deprecated=True\n)\n```\n\n----------------------------------------\n\nTITLE: Deactivating the virtual environment\nDESCRIPTION: This command deactivates the currently active virtual environment. It reverts the shell environment to its original state, so that subsequent `python` commands will use the system-wide Python interpreter and packages instead of the virtual environment's.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ deactivate\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Callback Routes\nDESCRIPTION: This snippet registers the previously defined callback router in the main FastAPI application. It demonstrates the correct usage of callbacks in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.post(\"/invoices/\", callbacks=invoice_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: str):\n    # Logic to process the invoice\n    pass\n```\n\n----------------------------------------\n\nTITLE: package.json with openapi-ts script\nDESCRIPTION: This `package.json` snippet configures a frontend application with a script to generate client code using `openapi-ts`. The `generate-client` script uses the OpenAPI specification from a running FastAPI application (at http://localhost:8000/openapi.json) and outputs the generated client code to the `./src/client` directory, utilizing the `axios` library for HTTP requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample requirements.txt File\nDESCRIPTION: Example content of a requirements.txt file specifying package dependencies and versions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nfastapi[standard]==0.113.0\npydantic==2.8.0\n```\n\n----------------------------------------\n\nTITLE: Pinning FastAPI version with a range in requirements.txt\nDESCRIPTION: This snippet shows how to specify a version range for FastAPI in the `requirements.txt` file. This allows for automatic upgrades to bug fixes while preventing potentially breaking changes from minor version upgrades.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"fastapi>=0.45.0,<0.46.0\"\n```\n\n----------------------------------------\n\nTITLE: Return HTTP Error on Incorrect Credentials\nDESCRIPTION: This snippet shows how to return an `HTTPException` with a 401 status code and the `WWW-Authenticate` header when the provided credentials are incorrect. This prompts the browser to display the login prompt again.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    if not (correct_username and correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n```\n\n----------------------------------------\n\nTITLE: Reading a File Using Context Manager in Python\nDESCRIPTION: Demonstrates how to use a context manager with the 'with' statement to read a file in Python. This ensures the file is properly closed after reading, even if exceptions occur.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nwith open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependencies in Python\nDESCRIPTION: Shows how to install the necessary WebSocket library using pip.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install websockets\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Sample ReDoc JavaScript File Content\nDESCRIPTION: The beginning of the ReDoc JavaScript file that should be visible when testing the static file serving. This confirms the correct setup of static file hosting.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*!\n * ReDoc - OpenAPI/Swagger-generated API Reference Documentation\n * -------------------------------------------------------------\n *   Version: \"2.0.0-rc.18\"\n *   Repo: https://github.com/Redocly/redoc\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof m\n\n...\n```\n\n----------------------------------------\n\nTITLE: FastAPI Default Swagger UI Configuration Parameters\nDESCRIPTION: Default Swagger UI configuration parameters set by FastAPI. These are appropriate for most use cases and include settings for DOM ID, layout, deepLinking, presets, and other UI behaviors.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nswagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n    \"oauth2RedirectUrl\": swagger_ui_oauth2_redirect_url,\n    \"presets\": [\n        \"SwaggerUIBundle.presets.apis\",\n        \"SwaggerUIBundle.SwaggerUIStandalonePreset\",\n    ],\n    \"syntaxHighlight\": {\n        \"activated\": True,\n        \"theme\": \"agate\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Extra Cookies in FastAPI (JSON)\nDESCRIPTION: This JSON snippet shows the error response returned by the FastAPI application when a client sends extra cookies that are not defined in the Pydantic model with `extra = 'forbid'`. The `detail` array contains information about the extra input, including its type, location, message, and input value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"json\n{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"cookie\", \"santa_tracker\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"good-list-please\",\n        }\n    ]\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Function with Type Annotations\nDESCRIPTION: This snippet shows the addition of type annotations to the function parameters.  This enables editors to provide better auto-completion and type checking, improving the developer experience.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\"\n```\n\n----------------------------------------\n\nTITLE: Serving Multi-language Documentation - Console\nDESCRIPTION: Command to serve the built documentation locally for preview, specifically for viewing translated content.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n```\n\n----------------------------------------\n\nTITLE: Importing List Type from typing Module\nDESCRIPTION: Import statement for the List type from Python's typing module, required for type annotations in Python versions before 3.9.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import List\n```\n\n----------------------------------------\n\nTITLE: Installing packages from requirements.txt using pip\nDESCRIPTION: This command installs Python packages from a `requirements.txt` file using `pip` within the active virtual environment. The `-r` option tells `pip` to read the list of packages to install from the specified file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ pip install -r requirements.txt\n---> 100%\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Active Python Virtual Environment in Windows PowerShell\nDESCRIPTION: Demonstrates how to use the 'Get-Command python' cmdlet in Windows PowerShell to verify the active Python interpreter. The output should show the path to the Python executable inside your project's virtual environment directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP GET Route with Custom Status Code in FastAPI\nDESCRIPTION: This code snippet demonstrates how to use FastAPI's @app.get() decorator to define a route that responds with a specific HTTP status code. It leverages the status_code parameter to customize the response when the endpoint is accessed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\", status_code=status.HTTP_200_OK)\\nasync def read_item(item_id: int):\\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Disabling Underscore Conversion in Header Parameters\nDESCRIPTION: Shows how to disable automatic underscore to hyphen conversion in header parameter names using convert_underscores=False.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(strange_header: str | None = Header(default=None, convert_underscores=False)):\n```\n\n----------------------------------------\n\nTITLE: Importing GZipMiddleware in FastAPI\nDESCRIPTION: Shows how to import the GZip compression middleware from FastAPI. This middleware enables automatic compression of responses.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.gzip import GZipMiddleware\n```\n\n----------------------------------------\n\nTITLE: Sobrescribiendo el manejador de excepciones de validación\nDESCRIPTION: Implementación de un manejador personalizado para errores de validación de requests, sobrescribiendo el comportamiento predeterminado de FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException, Request\\nfrom fastapi.exceptions import RequestValidationError\\nfrom fastapi.responses import PlainTextResponse\\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\\n\\n\\napp = FastAPI()\\n\\n\\n@app.exception_handler(StarletteHTTPException)\\nasync def http_exception_handler(request, exc):\\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\\n\\n\\n@app.exception_handler(RequestValidationError)\\nasync def validation_exception_handler(request, exc):\\n    return PlainTextResponse(str(exc), status_code=400)\n```\n\n----------------------------------------\n\nTITLE: Example directory to python after activating (Linux, macOS)\nDESCRIPTION: This specifies the exact directory to the python executable in virtual environment on Linux or macOS.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with Current User\nDESCRIPTION: Using FastAPI's dependency injection to automatically authenticate and inject user information into route handlers\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Installing WebSockets Package\nDESCRIPTION: Shows the command to install the required WebSockets package for implementing WebSocket functionality in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install websockets\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Installation von Gunicorn und Uvicorn für FastAPI\nDESCRIPTION: Installiert Uvicorn mit zusätzlichen 'standard'-Paketen für hohe Leistung sowie Gunicorn für die Verwendung als Prozessmanager.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"uvicorn[standard]\" gunicorn\n```\n\n----------------------------------------\n\nTITLE: Returning List of Models as API Response\nDESCRIPTION: Shows how to define API endpoints that return lists of model objects using typing.List\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\", response_model=List[Item])\ndef read_items():\n    return [\n        Item(name=\"Portal Gun\"),\n        Item(name=\"Plumbus\")\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding .gitignore entry for the virtual environment\nDESCRIPTION: This command adds an entry to the `.gitignore` file to exclude the `.venv` directory from Git version control. It uses `echo` to write the wildcard `*` (representing all files) into the `.venv/.gitignore` file, preventing the virtual environment's contents from being tracked by Git.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ echo \"*\" > .venv/.gitignore\n```\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI in Development Mode with CLI\nDESCRIPTION: Command to start a FastAPI application in development mode, which automatically detects the FastAPI app and enables hot-reloading\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/fastapi-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI URL\nDESCRIPTION: Shows how to customize the OpenAPI JSON schema URL endpoint in a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing packages using uv pip\nDESCRIPTION: This command installs a specified Python package (in this case, `fastapi[standard]`) using `uv pip` within the active virtual environment. The `fastapi[standard]` syntax indicates that the `fastapi` package should be installed along with the `standard` extras.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ uv pip install \"fastapi[standard]\"\n---> 100%\n```\n```\n\n----------------------------------------\n\nTITLE: Installing a specific package version using pip\nDESCRIPTION: This command installs version 3 of the 'harry' package using pip. If a different version of 'harry' is already installed, installing this version may automatically uninstall the previous one.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"harry==3\"\n```\n\n----------------------------------------\n\nTITLE: Running Python Script (Success)\nDESCRIPTION: This snippet shows a successful execution of a Python script after activating the correct virtual environment. The script imports and uses the 'sirius' module because it is installed in the now-active virtual environment. The output indicates the successful execution of the script.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ python main.py\n\nЯ торжественно клянусь в этом! 🐺\"\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token Example\nDESCRIPTION: This code snippet shows an example of a JWT token. It's not executable code, but rather an illustration of what a JWT token looks like.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n----------------------------------------\n\nTITLE: Path Order with User Routes\nDESCRIPTION: Shows the importance of route order when defining paths with fixed and dynamic segments\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\ndef read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n@app.get(\"/users/{user_id}\")\ndef read_user(user_id: str):\n    return {\"user_id\": user_id}\n```\n\n----------------------------------------\n\nTITLE: Example .gitignore file\nDESCRIPTION: This shows an example of `.gitignore` file, which tells Git to ignore everything (`*`) in this directory (the .venv folder). This prevent committing virtual environment files.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n```gitignore\n*\n```\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server for Translations\nDESCRIPTION: Command to run the documentation server for a specific language translation. This example shows how to serve Spanish documentation with live reloading for translation work.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py live es\n\n<span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008\n<span style=\"color: green;\">[INFO]</span> Start watching changes\n<span style=\"color: green;\">[INFO]</span> Start detecting changes\n```\n\n----------------------------------------\n\nTITLE: Generic Type Hints for Dictionaries (Python 3.9+)\nDESCRIPTION: Shows how to declare a dictionary with string keys and float values\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nprices: dict[str, float] = {\"apple\": 0.5, \"banana\": 0.75}\n```\n\n----------------------------------------\n\nTITLE: Example requirements.txt file\nDESCRIPTION: This shows an example of `requirements.txt` file containing a list of Python packages with specific versions. These packages will be installed with `pip install -r requirements.txt` or `uv pip install -r requirements.txt`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\n```requirements.txt\nfastapi[standard]==0.113.0\npydantic==2.8.0\n```\n```\n\n----------------------------------------\n\nTITLE: Using list instead of set for include/exclude in FastAPI\nDESCRIPTION: This snippet demonstrates that FastAPI automatically converts `list` or `tuple` to a `set` when used with `response_model_include` or `response_model_exclude`. It ensures the code still works as expected even if a `list` or `tuple` is mistakenly provided instead of a `set`.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", response_model=Item, response_model_include=[\"name\", \"description\"])\nasync def read_item(item_id: str):\n    item = items[item_id]\n    return item\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude=[\"tax\", \"description\"])\nasync def read_item(item_id: str):\n    item = items[item_id]\n    return item\"\n```\n\n----------------------------------------\n\nTITLE: Example PATH variable after activating (Linux, macOS)\nDESCRIPTION: This shows an example of the PATH variable after activating a virtual environment on Linux/macOS. The environment's bin directory is prepended, ensuring its executables are found first.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Required Parameters with Annotated Syntax\nDESCRIPTION: Demonstrates using Annotated for declaring required parameters in FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\\nfrom fastapi import FastAPI, Path, Query\\n\\napp = FastAPI()\\n\\n@app.get(\\\"/items/{item_id}\\\")\\nasync def read_items(\\n    item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\")],\\n    q: Annotated[str, Query()]\\n):\\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\n```\n\n----------------------------------------\n\nTITLE: Language Inheritance Configuration - YAML\nDESCRIPTION: YAML configuration file that inherits documentation structure from the English version. Created in the new language directory to maintain consistency with the main docs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nINHERIT: ../en/mkdocs.yml\n```\n\n----------------------------------------\n\nTITLE: Installing packages from requirements.txt using uv pip\nDESCRIPTION: This command installs Python packages from a `requirements.txt` file using `uv pip` within the active virtual environment. The `-r` option tells `uv pip` to read the list of packages to install from the specified file.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ uv pip install -r requirements.txt\n---> 100%\n```\n```\n\n----------------------------------------\n\nTITLE: Building Multi-language Documentation - Console\nDESCRIPTION: Command to build documentation for all available languages, combining them into a single site directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py build-all\n\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\n```\n\n----------------------------------------\n\nTITLE: Initializing List Field in Pydantic Model\nDESCRIPTION: Demonstrates declaring a list attribute in a Pydantic model without specifying element type\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    tags: list\n```\n\n----------------------------------------\n\nTITLE: Defining a path operation with FastAPI\nDESCRIPTION: This snippet shows how to define a simple API endpoint using FastAPI. It illustrates the use of the `@app.get` decorator to handle GET requests to a specific URL path, returning a simple JSON response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World!\"}\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI JSON Schema with Proxy Path\nDESCRIPTION: This JSON snippet is an example of an OpenAPI schema with the server URL set for proxy path prefix use. It's crucial for documentation UI to correctly reflect the proxy path.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"openapi\": \"3.1.0\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Raising HTTPException in FastAPI\nDESCRIPTION: This code snippet showcases how to raise an HTTPException in a FastAPI endpoint. When the item_id is not \"foo\", an HTTPException with a status code of 404 and a detail message \"Item not found\" is raised. This results in a HTTP 404 response being returned to the client.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n        from fastapi import HTTPException\n\n        @app.get(\"/items/{item_id}\")\n        def read_item(item_id: str):\n            if item_id != \"foo\":\n                raise HTTPException(status_code=404, detail=\"Item not found\")\n            return {\"item\": \"The Foo Wrestlers\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Status Module in FastAPI (Python)\nDESCRIPTION: This snippet shows how to import the status module from FastAPI. The status module provides named constants for HTTP status codes, making it easier to use them in your application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/status.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import status\n```\n\n----------------------------------------\n\nTITLE: Disabling Underscore to Hyphen Conversion in FastAPI Header Parameters\nDESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in header parameter names when using Pydantic models. It's useful when you need to preserve underscores in header names, though it's generally not recommended due to potential issues with some HTTP proxies and servers.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/headers/\")\nasync def get_headers(headers: HeaderModel = Header(convert_underscores=False)):\n    return headers\n```\n\n----------------------------------------\n\nTITLE: Installing Packages from requirements.txt with uv\nDESCRIPTION: Command to install all packages listed in a requirements.txt file using uv.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ uv pip install -r requirements.txt\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Running a Python program\nDESCRIPTION: This command executes the Python program `main.py` using the Python interpreter within the active virtual environment. It assumes that `main.py` is located in the current working directory and that the virtual environment is activated.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ python main.py\n\nHello World\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter Definition in FastAPI\nDESCRIPTION: Defines a simple path parameter using Python string formatting syntax, demonstrating how FastAPI handles path parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Example directory to python after activating (Windows)\nDESCRIPTION: This specifies the exact directory to the python executable in virtual environment on Windows.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Async Function Without Await\nDESCRIPTION: Demonstrates the incorrect way to call an async function without await, which will not work as expected. Instead of returning the results, this will return a coroutine object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# This won't work, because get_burgers was defined with: async def\nburgers = get_burgers(2)\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with String Parameters in Python\nDESCRIPTION: This function takes two string parameters and returns a concatenated full name with capitalized first letters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Optional Dependencies\nDESCRIPTION: Command to install all optional dependencies for FastAPI using pip. This includes extensions for email validation, settings management, additional types, HTTP client, templating, multipart parsing, and server support.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/hu/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"fastapi[all]\"\n```\n\n----------------------------------------\n\nTITLE: Importando HTTPException en FastAPI\nDESCRIPTION: Muestra cómo importar la clase HTTPException desde el módulo fastapi para manejar errores HTTP en una API.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, HTTPException\n```\n\n----------------------------------------\n\nTITLE: Installing Hypercorn in Python\nDESCRIPTION: Command to install Hypercorn, an ASGI server compatible with HTTP/2 and WebSockets, using pip.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install hypercorn\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Environment (Windows PowerShell)\nDESCRIPTION: This snippet illustrates how to check the active Python environment in Windows PowerShell using the `Get-Command python` command. It displays the path to the Python executable, indicating if it's from the virtual environment or the global installation. The expected output is the path to the Python executable within the active virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"$ Get-Command python\n\nC:\\\\Users\\\\user\\\\code\\\\awesome-project\\\\.venv\\\\Scripts\\\\python\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example\nDESCRIPTION: Example of formatted JSON output with indentation, showing the difference in response formatting when using custom ORJSON response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Hello World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTPS Diagram in Markdown\nDESCRIPTION: This snippet embeds an SVG image illustrating the HTTPS process in a Markdown document. The image is located at '/img/deployment/https/https.svg' and is used to visually represent the HTTPS concept.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/https.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/deployment/https/https.svg\">\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Python Virtual Environment\nDESCRIPTION: This command deactivates the currently active Python virtual environment.  This ensures that subsequent Python commands will use the system-wide Python installation or another explicitly activated environment.  There are no specific inputs or outputs, but it changes the shell's environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"$ deactivate\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from FastAPI - JSON\nDESCRIPTION: This snippet shows the expected JSON response structure when accessing the root endpoint of a FastAPI application.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Importing APIRouter from FastAPI in Python\nDESCRIPTION: Shows how to import the APIRouter class directly from the fastapi package. APIRouter is a core component used to organize routes in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/apirouter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter\n```\n\n----------------------------------------\n\nTITLE: Agregando Media Type Adicional para Response Principal en FastAPI\nDESCRIPTION: Este ejemplo demuestra cómo agregar un media type adicional (image/png) para el response principal de una operación de path en FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Ausführen von Gunicorn mit Uvicorn-Workern für FastAPI\nDESCRIPTION: Startet Gunicorn als Prozessmanager mit 4 Uvicorn-Workern, die eine FastAPI-Anwendung aus der Datei 'main.py' ausführen und auf Port 80 lauschen.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Response in FastAPI\nDESCRIPTION: Shows how to return an HTML response using HTMLResponse in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"<html><body><h1>Hello World</h1></body></html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying a return statement in FastAPI\nDESCRIPTION: This snippet shows the suggested modification to the return statement, replacing the name with the price.  This change highlights the integration with editor support and type awareness within FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n        ... \"item_price\": item.price ...\n```\n\n----------------------------------------\n\nTITLE: Windows PATH Environment Example\nDESCRIPTION: Demonstrates the structure of PATH environment variable on Windows systems, showing directory paths where executables are searched.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n```\n\n----------------------------------------\n\nTITLE: Displaying FastAPI Creator Information with Jinja2 Template\nDESCRIPTION: This code snippet uses Jinja2 templating to display information about the creator of FastAPI, including their GitHub profile, avatar, and contribution statistics.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n<div class=\"user-list user-list-center\">\n{% for user in people.maintainers %}\n\n<div class=\"user\"><a href=\"{{ contributors.tiangolo.url }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"{{ contributors.tiangolo.avatarUrl }}\"/></div><div class=\"title\">@{{ contributors.tiangolo.login }}</div></a> <div class=\"count\">Answers: {{ user.answers }}</div><div class=\"count\">Pull Requests: {{ contributors.tiangolo.count }}</div></div>\n{% endfor %}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Environment (Linux/macOS)\nDESCRIPTION: This code snippet demonstrates how to check the active Python environment using the `which python` command in Linux or macOS. It displays the path to the Python executable being used, confirming whether it's from the virtual environment or the system-wide installation. The expected output is the path to the Python executable within the active virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\"\n```\n\n----------------------------------------\n\nTITLE: Installing Hypercorn with Trio support in Python\nDESCRIPTION: Command to install Hypercorn with Trio support using pip, enabling asynchronous programming with Trio.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"hypercorn[trio]\"\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Response Example with JSON Showing Root Path\nDESCRIPTION: A JSON response example illustrating how the root_path is included in responses when a path prefix is used. Useful for checking if the application correctly recognizes the root path configured via command line arguments or code.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FastAPI Callback Router\nDESCRIPTION: This snippet outlines the creation of an APIRouter specifically for handling callback operations. It contains structure for the paths that the external API should implement without executing any operational code, as it is purely for documentation purposes.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Create a new APIRouter\ninvoice_callback_router = APIRouter()\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Interpreter on Linux/macOS\nDESCRIPTION: Command to verify the active Python interpreter on Linux or macOS, ensuring it's from the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Basic Python Function\nDESCRIPTION: This is a basic Python function that concatenates two strings (first_name and last_name), capitalizes the first letter of each, and returns the full name. It demonstrates a simple operation without type hints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\nprint(get_full_name(\"john\", \"doe\"))\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing CORSMiddleware in FastAPI\nDESCRIPTION: Shows how to import the Cross-Origin Resource Sharing (CORS) middleware from FastAPI. This middleware handles CORS headers for cross-domain requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.cors import CORSMiddleware\n```\n\n----------------------------------------\n\nTITLE: Restricting Extra Cookies in FastAPI Model\nDESCRIPTION: Shows how to configure a Pydantic model to reject any additional cookies not specified in the model using extra='forbid'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    extra = \"forbid\"\n```\n\n----------------------------------------\n\nTITLE: Setting License Identifier in FastAPI\nDESCRIPTION: Shows how to configure license information using SPDX identifier instead of URL in FastAPI application metadata.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlicense_info={\n    \"name\": \"Apache 2.0\",\n    \"identifier\": \"Apache-2.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Interpreter on Windows PowerShell\nDESCRIPTION: Command to verify the active Python interpreter on Windows using PowerShell, ensuring it's from the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Documentation Dependencies\nDESCRIPTION: Lists required Python packages and their versions for building FastAPI documentation. Includes MkDocs Material theme, Chinese search support, image processing capabilities, and Python documentation tools.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements-docs-tests.txt\nmkdocs-material==9.6.1\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\ntyper == 0.12.5\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\njieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.1.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\nmkdocstrings[python]==0.26.1\ngriffe-typingdoc==0.2.7\n# For griffe, it formats with black\nblack==25.1.0\nmkdocs-macros-plugin==1.3.7\nmarkdown-include-variants==0.0.4\n```\n\n----------------------------------------\n\nTITLE: Importing Depends Function in FastAPI\nDESCRIPTION: Shows how to import the Depends function from FastAPI. The Depends() function is the primary way to handle dependencies in FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends\n```\n\n----------------------------------------\n\nTITLE: Specifying Pydantic AI Package Version\nDESCRIPTION: Defines the required version of pydantic-ai package as 0.0.30. This is used to ensure compatibility and consistent behavior across installations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-translations.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npydantic-ai==0.0.30\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with pip\nDESCRIPTION: Command to install FastAPI with its standard dependencies using pip in a virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"fastapi[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip in Virtual Environment\nDESCRIPTION: Command to upgrade pip to the latest version within the activated virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install --upgrade pip\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Optional Query Parameters in FastAPI\nDESCRIPTION: Shows how to define an optional query parameter by setting its default value to None. The parameter 'q' is declared as an optional string that will be None if not provided in the request.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def read_items(item_id: str, q: str | None = None):\n```\n\n----------------------------------------\n\nTITLE: Python type hint for Item model\nDESCRIPTION: Example of a type hint for an Item model\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nitem: Item\n```\n\n----------------------------------------\n\nTITLE: Implementando dependencias de usuario autenticado en FastAPI\nDESCRIPTION: Define funciones de dependencia para obtener el usuario actual y verificar si está activo, utilizadas para proteger rutas que requieren autenticación.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user_dict = fake_users_db.get(token)\n    if not user_dict:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return UserInDB(**user_dict)\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn with standard extras in Python\nDESCRIPTION: Command to install Uvicorn with standard extras using pip. This includes uvloop for improved performance.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Path Parameters in FastAPI\nDESCRIPTION: Demonstrates how to define and use simple path parameters with Python string formatting syntax in a FastAPI route\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with pip\nDESCRIPTION: Command line instructions for installing FastAPI package using pip, which is necessary to create FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install fastapi\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Traefik Proxy Configuration with Path Stripping\nDESCRIPTION: Traefik configuration file demonstrating how to set up path prefix stripping and routing for a FastAPI application\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[http.middlewares.api-stripprefix.stripPrefix]\n    prefixes = [\"/api/v1\"]\n\n[http.routers.app-http]\n    entryPoints = [\"http\"]\n    service = \"app\"\n    rule = \"PathPrefix(`/api/v1`)\"\n    middlewares = [\"api-stripprefix\"]\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment (Windows Bash)\nDESCRIPTION: This command activates the virtual environment using Bash on Windows (e.g., Git Bash). It sources the `activate` script located in the `.venv/Scripts` directory to configure the Bash session to use the virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ source .venv/Scripts/activate\n```\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with Uvicorn Workers\nDESCRIPTION: Command to run Gunicorn with Uvicorn workers for a FastAPI application. It specifies 4 worker processes, binds to all interfaces on port 80, and uses the UvicornWorker class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80\n\n[19499] [INFO] Starting gunicorn 20.1.0\n[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)\n[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker\n[19511] [INFO] Booting worker with pid: 19511\n[19513] [INFO] Booting worker with pid: 19513\n[19514] [INFO] Booting worker with pid: 19514\n[19515] [INFO] Booting worker with pid: 19515\n[19511] [INFO] Started server process [19511]\n[19511] [INFO] Waiting for application startup.\n[19511] [INFO] Application startup complete.\n[19513] [INFO] Started server process [19513]\n[19513] [INFO] Waiting for application startup.\n[19513] [INFO] Application startup complete.\n[19514] [INFO] Started server process [19514]\n[19514] [INFO] Waiting for application startup.\n[19514] [INFO] Application startup complete.\n[19515] [INFO] Started server process [19515]\n[19515] [INFO] Waiting for application startup.\n[19515] [INFO] Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Docker CMD Configuration - Shell Form (Not Recommended)\nDESCRIPTION: Shows the shell form of CMD instruction which should be avoided for FastAPI applications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD fastapi run app/main.py --port 80\n```\n\n----------------------------------------\n\nTITLE: Deactivating and Activating Correct Virtual Environment\nDESCRIPTION: Shows how to properly switch between project environments by deactivating the current one and activating the correct environment for the new project. The example demonstrates successful execution after switching environments.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n// Você não precisa estar no diretório antigo para desativar, você pode fazer isso de onde estiver, mesmo depois de ir para o outro projeto 😎\n$ deactivate\n\n// Ative o ambiente virtual em prisoner-of-azkaban/.venv 🚀\n$ source .venv/bin/activate\n\n// Agora, quando você executar o python, ele encontrará o pacote sirius instalado neste ambiente virtual ✨\n$ python main.py\n\nEu juro solenemente 🐺\n```\n\n----------------------------------------\n\nTITLE: Formatting Translation PR Title in Markdown\nDESCRIPTION: Example showing the correct format for translation PR titles using the globe emoji and proper file path notation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n🌐 Add Spanish translation for `docs/es/docs/teleporting.md`\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment (Linux, macOS)\nDESCRIPTION: This command activates the virtual environment on Linux and macOS systems. It sources the `activate` script located in the `.venv/bin` directory, modifying the shell environment to use the virtual environment's Python interpreter and installed packages.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n$ source .venv/bin/activate\n```\n```\n\n----------------------------------------\n\nTITLE: Deprecated Query Parameter\nDESCRIPTION: This example demonstrates how to mark a query parameter as deprecated using the `deprecated=True` argument in the `Query` function. This indicates that the parameter should no longer be used.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, deprecated=True)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Example PATH variable (Windows)\nDESCRIPTION: This is an example of how the PATH environment variable might look before activating a virtual environment on Windows.  It specifies directories where the operating system searches for executable programs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Windows\\System32\n```\n\n----------------------------------------\n\nTITLE: Deactivating Virtual Environment\nDESCRIPTION: Command to deactivate the current virtual environment and return to the global Python installation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Checking active Python (Windows PowerShell)\nDESCRIPTION: This command, used in Windows PowerShell, retrieves information about the Python interpreter being used, including its path. It confirms the active Python environment after activation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for FastAPI Cloud Deployment\nDESCRIPTION: Markdown documentation explaining cloud deployment options for FastAPI applications, including sponsored providers like Platform.sh, Porter, Coherence, and Render.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Deploy FastAPI on Cloud Providers\n\nYou can use virtually **any cloud provider** to deploy your FastAPI application.\n\nIn most of the cases, the main cloud providers have guides to deploy FastAPI with them.\n\n## Cloud Providers - Sponsors\n\nSome cloud providers ✨ [**sponsor FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, this ensures the continued and healthy **development** of FastAPI and its **ecosystem**.\n\nAnd it shows their true commitment to FastAPI and its **community** (you), as they not only want to provide you a **good service** but also want to make sure you have a **good and healthy framework**, FastAPI. 🙇\n\nYou might want to try their services and follow their guides:\n\n* <a href=\"https://docs.platform.sh/languages/python.html?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023\" class=\"external-link\" target=\"_blank\">Platform.sh</a>\n* <a href=\"https://docs.porter.run/language-specific-guides/fastapi\" class=\"external-link\" target=\"_blank\">Porter</a>\n* <a href=\"https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=website\" class=\"external-link\" target=\"_blank\">Coherence</a>\n* <a href=\"https://docs.render.com/deploy-fastapi?utm_source=deploydoc&utm_medium=referral&utm_campaign=fastapi\" class=\"external-link\" target=\"_blank\">Render</a>\n```\n\n----------------------------------------\n\nTITLE: Navigating to a New Project Directory in Console\nDESCRIPTION: This snippet shows how to change the current directory to a different project folder using the 'cd' command in the console.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Different Platforms\nDESCRIPTION: Commands for activating a virtual environment across Linux, macOS, and Windows operating systems using different shell interfaces\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ source .venv/bin/activate\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$ .venv\\Scripts\\Activate.ps1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Installing a specific package version using pip\nDESCRIPTION: This command installs a specific version of the 'harry' package using pip. It ensures that the project uses the required version, avoiding conflicts with other projects that may need different versions.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ pip install \"harry==1\"\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with Incorrect Virtual Environment in Console\nDESCRIPTION: This example demonstrates the error that occurs when trying to run a Python script with dependencies not installed in the active virtual environment.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed 😱\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n```\n\n----------------------------------------\n\nTITLE: Invalid Return Type Annotation in FastAPI\nDESCRIPTION: This snippet illustrates an invalid return type annotation in FastAPI. It uses a Union of Response and dict, which is not a valid Pydantic type or a single Response class.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: str) -> Union[dict, Response]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: This snippet demonstrates how to start the FastAPI development server using the 'fastapi dev' command. It shows the server output, including the server address, documentation URL, and logging information.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n\n  FastAPI  Starting development server 🚀\n\n             Searching for package file structure from directories\n             with __init__.py files\n             Importing from /home/user/code/awesomeapp\n\n   module  🐍 main.py\n\n     code  Importing the FastAPI app object from the module with\n             the following code:\n\n             from main import app\n\n      app  Using import string: main:app\n\n   server  Server started at http://127.0.0.1:8000\n   server  Documentation at http://127.0.0.1:8000/docs\n\n      tip  Running in development mode, for production use:\n             fastapi run\n\n             Logs:\n\n     INFO  Will watch for changes in these directories:\n             ['/home/user/code/awesomeapp']\n     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C\n             to quit)\n     INFO  Started reloader process [383138] using WatchFiles\n     INFO  Started server process [383153]\n     INFO  Waiting for application startup.\n     INFO  Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command navigates the terminal to a specific project directory. This is a common initial step when working on a project to ensure commands are executed in the correct context.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"$ cd ~/code/prisoner-of-azkaban\"\n```\n\n----------------------------------------\n\nTITLE: Declarando Tipo de Retorno em Função de Rota FastAPI\nDESCRIPTION: Exemplo de como declarar o tipo de retorno em uma função de rota FastAPI usando anotações de tipo Python.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\", response_model=Item)\ndef read_item(item_id: str):\n    return items[item_id]\n```\n\n----------------------------------------\n\nTITLE: Complete FastAPI Security Example\nDESCRIPTION: This is a complete FastAPI example that sets up the OAuth2PasswordBearer, and uses it as a dependency in a route to enforce security. It defines a `/token` endpoint where users can obtain an access token, and also a `/items/` endpoint which requires a valid access token to be accessed.  `python-multipart` needs to be installed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import Depends, FastAPI, HTTPException\\nfrom fastapi.security import OAuth2PasswordBearer\\n\\napp = FastAPI()\\n\\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\\n\\n\\n@app.get(\"/items/\")\\nasync def read_items(token: str = Depends(oauth2_scheme)):\\n    return {\"token\": token}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Python import syntax for FastAPI applications\nDESCRIPTION: Example showing the Python import syntax that ASGI servers use to load FastAPI applications. The import statement references the app object from the main module.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom main import app\n```\n\n----------------------------------------\n\nTITLE: Creating .gitignore for Virtual Environment\nDESCRIPTION: Command to create a .gitignore file that excludes all contents of the .venv directory from version control.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"*\" > .venv/.gitignore\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition with Annotated (Python 3.9+)\nDESCRIPTION: This snippet showcases defining a path parameter `item_id` with metadata using `Path` and `Annotated`, along with an optional query parameter `q`.  The use of `Annotated` avoids issues with parameter order, as it doesn't rely on default values for parameter declaration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"from typing import Annotated, Optional\n\nfrom fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get(\\\"/items/{item_id}\\\")\nasync def read_items(item_id: Annotated[int, Path(title=\\\"The ID of the item to get\\\")], q: Optional[str] = None):\n    return {\\\"item_id\\\": item_id, \\\"q\\\": q}\"\n```\n\n----------------------------------------\n\nTITLE: Definiendo un manejador de excepciones personalizado\nDESCRIPTION: Implementación de un manejador personalizado para una excepción propia (UnicornException) utilizando el decorador @app.exception_handler().\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass UnicornException(Exception):\\n    def __init__(self, name: str):\\n        self.name = name\\n\\n\\n@app.exception_handler(UnicornException)\\ndef unicorn_exception_handler(request: Request, exc: UnicornException):\\n    return JSONResponse(\\n        status_code=418,\\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to HTTP Exceptions in FastAPI\nDESCRIPTION: This snippet demonstrates how to add custom headers to an `HTTPException` when raising it.  This allows you to include additional information in the HTTP response headers. The `headers` parameter in the `HTTPException` constructor accepts a dictionary of header key-value pairs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"from fastapi import FastAPI, HTTPException\\n\\napp = FastAPI()\\n\\n@app.get(\"/items/{item_id}\")\\nasync def read_item(item_id: str):\\n    if item_id != \\\"foo\\\":\\n        raise HTTPException(\\n            status_code=404, detail=\\\"Item not found\\\", headers={\\\"X-Error\\\": \\\"There goes my error\\\"}\\n        )\\n    return {\\\"item\\\": \\\"The Foo Wrestlers\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Adding an output model to FastAPI\nDESCRIPTION: This example demonstrates the best practice of creating separate input (`UserIn`) and output (`UserOut`) models.  The input model may contain sensitive data, while the output model exposes only necessary information. The `response_model` parameter is used to specify the `UserOut` model, ensuring the password is not included in the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"class UserIn(BaseModel):\n    username: str\n    password: str\n\nclass UserOut(BaseModel):\n    username: str\n    full_name: Optional[str] = None\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"@app.post(\"/users/\", response_model=UserOut)\nasync def create_user(user: UserIn):\n    # The function returns the input user but the password is not included in the response\n    return user\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"# response_model declared as UserOut, which does not contain the password\"\n```\n\n----------------------------------------\n\nTITLE: Processing OpenAPI Schema for Better Client Generation\nDESCRIPTION: A Python script that modifies OpenAPI JSON to remove tag prefixes from operation IDs, resulting in cleaner generated client methods.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport re\n\n# Read the OpenAPI schema from the file\nwith open(\"openapi.json\", \"r\") as file:\n    openapi_schema = json.load(file)\n\n# Process the operation IDs to remove the tag prefix\nfor path in openapi_schema[\"paths\"]:\n    for method in openapi_schema[\"paths\"][path]:\n        operation = openapi_schema[\"paths\"][path][method]\n        if \"operationId\" in operation:\n            # Replace something like \"items-get_items\" with \"get_items\"\n            operation[\"operationId\"] = re.sub(\n                r\"^[a-zA-Z0-9_-]+-\", \"\", operation[\"operationId\"]\n            )\n\n# Save the modified schema back to the file\nwith open(\"openapi.json\", \"w\") as file:\n    json.dump(openapi_schema, file)\n```\n\n----------------------------------------\n\nTITLE: Custom OpenAPI Schema Generation with Logo\nDESCRIPTION: Complete implementation showing how to override FastAPI's default OpenAPI schema generation to include a custom logo using ReDoc extensions. Includes schema caching for performance optimization.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware in FastAPI\nDESCRIPTION: This code snippet shows how to create a simple HTTP middleware in FastAPI using the `@app.middleware(\"http\")` decorator. The middleware receives the request and a `call_next` function, which it can call to process the request further down the chain. It also shows how to access and modify the response before it is sent back.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.middleware(\\\"http\\\")\\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\\\"X-Process-Time\\\"] = str(process_time)\n    return response\"\n```\n\n----------------------------------------\n\nTITLE: Path Parameters with File Paths\nDESCRIPTION: Handles path parameters that include full file paths using Starlette's path converter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/files/{file_path:path}\")\ndef read_file(file_path: str):\n    return {\"file_path\": file_path}\n```\n\n----------------------------------------\n\nTITLE: Rendering Top Contributors with Jinja2 Templates\nDESCRIPTION: This code displays the top contributors to FastAPI, showing their avatars, usernames, and the number of pull requests they've made. It limits the display to the top 50 contributors while filtering out specified users.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_3\n\nLANGUAGE: jinja2\nCODE:\n```\n<div class=\"user-list user-list-center\">\n\n{% for user in (contributors.values() | list)[:50] %}\n\n{% if user.login not in skip_users %}\n\n<div class=\"user\"><a href=\"{{ user.url }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"{{ user.avatarUrl }}\"/></div><div class=\"title\">@{{ user.login }}</div></a> <div class=\"count\">Pull Requests: {{ user.count }}</div></div>\n\n{% endif %}\n\n{% endfor %}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Path Ordering in FastAPI\nDESCRIPTION: This snippet demonstrates an incorrect order for defining routes in FastAPI. Since `/users/{user_id}` is defined before `/users/me`, any request to `/users/me` will be incorrectly routed to `/users/{user_id}`, with `user_id` being assigned the value 'me'.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Schema for Path in FastAPI\nDESCRIPTION: Shows how to customize the OpenAPI schema for a path operation, including defining a custom request body schema without using automatic Pydantic validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                        },\n                    }\n                }\n            }\n        }\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n```\n\n----------------------------------------\n\nTITLE: Initializing Translation Configuration in YAML\nDESCRIPTION: This YAML snippet defines the inheritance structure for a new language translation in the FastAPI documentation. It inherits from the English version of mkdocs.yml.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nINHERIT: ../en/mkdocs.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Tests with pytest.mark.anyio and HTTPX\nDESCRIPTION: This code snippet demonstrates how to write async tests for a FastAPI application using pytest.mark.anyio decorator and HTTPX's AsyncClient. The test makes an async request to the application's endpoint and verifies the response.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/async-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom httpx import AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        response = await ac.get(\"/\")\n    \n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Simple Type Declarations\nDESCRIPTION: This snippet presents examples of basic type declarations in Python using common types like `int`, `float`, `bool`, and `bytes`. This is a foundational example showcasing how to specify variable types.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"age: int\nprice: float\nactive: bool\nbinary: bytes\"\n```\n\n----------------------------------------\n\nTITLE: Python Function with Type Hints\nDESCRIPTION: This code snippet shows a Python function with type hints for the parameters `first_name` and `last_name`, specifying that they are strings (`str`). This allows editors and other tools to provide better support, such as autocompletion and type checking.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\nprint(get_full_name(\"john\", \"doe\"))\"\"\n```\n\n----------------------------------------\n\nTITLE: Returning Custom XML Response in FastAPI\nDESCRIPTION: This example shows how to return a custom XML response in a FastAPI route by creating a Response object with XML content and specifying the media type.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-directly.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import Response\n\napp = FastAPI()\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"\n    <?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        <Company>ACME Shampoo Company</Company>\n    </Header>\n    <Calculations>\n        <Calculation>\n            <Value1>37</Value1>\n            <Value2>2</Value2>\n            <Answer>39</Answer>\n        </Calculation>\n    </Calculations>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n```\n\n----------------------------------------\n\nTITLE: Defining Class-based Dependency in FastAPI (Python)\nDESCRIPTION: This snippet demonstrates how to create a class-based dependency in FastAPI. The CommonQueryParams class defines query parameters with type hints and default values, which FastAPI uses for parameter validation and documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Defining nested Pydantic Models\nDESCRIPTION: This snippet shows the definitions of nested Pydantic models: `Image`, `Item`, and `Offer`. The `Offer` model includes a list of `Item` and each `Item` contains a list of `Image` models, demonstrating complex data structures.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n    \"url: str\n    name: str\"\n      }, {\n        \"code\": \"tags: list[str] = []\n    items: list[Item] | None = None\"\n      }, {\n        \"code\": \"items: list[Item]\"\n```\n\n----------------------------------------\n\nTITLE: Passing Callback Routes to FastAPI Route\nDESCRIPTION: This snippet showcases how to pass the routes from a callback router to a FastAPI route. The routes are passed to the `callbacks` argument of the route decorator. This includes the use of the `.routes` attribute of the callback router.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\nasync def create_invoice(\n    invoice: Invoice,\n    callback_url: Url,\n):\n    return {\"id\": invoice.id}\"\n```\n\n----------------------------------------\n\nTITLE: Query Parameter with None Default and Required\nDESCRIPTION: This snippet shows how to declare that the query parameter might be `None` while using the `Query` parameter. If the client sends `None` then `None` is accepted.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n```\n\n----------------------------------------\n\nTITLE: Extended FastAPI Application with PUT Request in Python\nDESCRIPTION: An extended FastAPI application that includes a PUT endpoint for updating items, using Pydantic for request body validation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Settings in a separate config module\nDESCRIPTION: This shows how to define a Pydantic `Settings` class within a dedicated `config.py` module. This allows for better organization and separation of configuration from the main application logic.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n```\n\n----------------------------------------\n\nTITLE: Implementing a GET Endpoint in FastAPI with Path Operation Decorator\nDESCRIPTION: Demonstrates FastAPI's path operation decorator syntax which was inspired by the Requests library's intuitive method naming. Shows how routes are defined using decorators with HTTP verbs.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/alternatives.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik with Traefik.toml\nDESCRIPTION: A TOML configuration example for Traefik, setting up to listen on a specific port and using an external routing file. Traefik acts as a reverse proxy managing path prefixes for inbound requests.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Error Handling\nDESCRIPTION: This snippet demonstrates how to define a custom HTTP error with custom headers in FastAPI. This can be useful for adding additional metadata to error responses. It showcases how to return a custom status code and headers when handling an exception.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.responses import JSONResponse\n\n\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n```\n\nLANGUAGE: Python\nCODE:\n```\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"name\": name}\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2PasswordRequestForm and Using it as a Dependency in FastAPI\nDESCRIPTION: This snippet shows how to import OAuth2PasswordRequestForm and use it as a dependency in the token endpoint of a FastAPI application. It handles form data for username and password in the OAuth2 password flow.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.security import OAuth2PasswordRequestForm\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n```\n\n----------------------------------------\n\nTITLE: Class Initialization: Python\nDESCRIPTION: This code snippet shows the initialization method (`__init__`) for the `CommonQueryParams` class. It defines the constructor and its parameters: `q` (string or None), `skip` (integer), and `limit` (integer).\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n        def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current root_path in FastAPI Application\nDESCRIPTION: A FastAPI application that returns the current root_path from the request scope along with a hello world message, demonstrating how to access the root_path value that was set via command line or configuration.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n\n@app.get(\"/app\")\nasync def read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n\n```\n\n----------------------------------------\n\nTITLE: Install PyJWT using pip\nDESCRIPTION: This command installs the PyJWT library, which is used for generating and verifying JSON Web Tokens (JWTs) in Python. It's a prerequisite for creating secure authentication tokens.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install pyjwt\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Adding dependencies to path operation decorator in FastAPI\nDESCRIPTION: Demonstrates how to add a `dependencies` list to the path operation decorator using the `dependencies` parameter. The dependencies are executed or resolved the same way as regular dependencies but their return values are not passed to the path operation function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"@app.get(\"/items/{item_id}\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items(item_id: str):\\n    return {\"item_id\": item_id}\"\n```\n\n----------------------------------------\n\nTITLE: Using Depends without Type Annotation in FastAPI\nDESCRIPTION: This code shows using Depends without explicit type annotation. The type annotation is useful for editor assistance, but the actual dependency resolution is handled by Depends.  This code is functionally equivalent to the previous example but lacks the type hint.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FastAPI Application with Routes\nDESCRIPTION: Demonstrates creating a basic FastAPI application with two routes: a root endpoint and an item retrieval endpoint. Includes support for type hints and optional query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Dependencies for FastAPI Documentation Tools\nDESCRIPTION: This snippet defines three Git dependencies using HTTPS URLs with authentication tokens. It includes MkDocs Material Insiders for documentation styling, a custom Griffe plugin for handling deprecated typing, and MkDocstrings for Python documentation generation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs-insiders.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngit+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n```\n\n----------------------------------------\n\nTITLE: Using StreamingResponse with File-Like Objects in FastAPI\nDESCRIPTION: Example showing how to stream a file-like object using StreamingResponse. This creates a generator function that yields from the file-like object.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(\"some-file.txt\", mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile())\n```\n\n----------------------------------------\n\nTITLE: Verifying Active Python Virtual Environment in Linux/macOS/Windows Bash\nDESCRIPTION: Shows how to use the 'which python' command to verify that the active Python interpreter is from the desired virtual environment. The output path should point to the Python executable within your project's virtual environment directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency for Token Validation in FastAPI (Python 3.9+)\nDESCRIPTION: This snippet defines a dependency function to validate a custom X-Token header in a FastAPI application using Python 3.9+ syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Header, HTTPException\nfrom typing import Annotated\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n```\n\n----------------------------------------\n\nTITLE: Creating a project directory\nDESCRIPTION: These commands create a directory for the new Python project inside the user's code directory. It navigates to the home directory, creates 'code', then 'awesome-project', and enters the project directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n```console\n// Vá para o diretório inicial\n$ cd\n// Crie um diretório para todos os seus projetos de código\n$ mkdir code\n// Entre nesse diretório de código\n$ cd code\n// Crie um diretório para este projeto\n$ mkdir awesome-project\n// Entre no diretório do projeto\n$ cd awesome-project\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CommonQueryParams Class as Dependency in FastAPI\nDESCRIPTION: This snippet shows how to create a class 'CommonQueryParams' to be used as a dependency in FastAPI. It defines query parameters with type hints and default values.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency with Cache Control - Python\nDESCRIPTION: Example showing how to implement a dependency with cache control using Python 3.8+ syntax. The code demonstrates setting use_cache=False when needing fresh values for each dependency call.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n```\n\n----------------------------------------\n\nTITLE: Importing Annotated from typing_extensions for Parameter Validation in FastAPI (Python <3.9)\nDESCRIPTION: Import 'Annotated' from typing_extensions for versions of Python below 3.9 to ensure compatibility with FastAPI. This allows for the addition of metadata to function parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Query\nfrom typing_extensions import Annotated\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency for Token Validation in FastAPI (Python 3.8+)\nDESCRIPTION: This snippet defines a dependency function to validate a custom X-Token header in a FastAPI application using Python 3.8+ syntax.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Header, HTTPException\n\nasync def get_token_header(x_token: str = Header(...)):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency without Annotations - Python\nDESCRIPTION: Alternative implementation of dependency with cache control using Python 3.8+ syntax without Annotated type hints. Shows how to directly use Depends in the parameter default value.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n```\n\n----------------------------------------\n\nTITLE: Testing FastAPI Event Handlers with TestClient\nDESCRIPTION: Demonstrates how to test FastAPI application startup and shutdown event handlers using the TestClient within a with statement context manager.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/testing-events.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    items.clear()\n\nwith TestClient(app) as client:\n    response = client.get(\"/items/foo\")\n    assert response.status_code == 200\n    assert response.json() == {\"name\": \"Fighters\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a list with type annotation\nDESCRIPTION: This snippet demonstrates how to define a list with a specific type using standard Python list. It specifies that the 'tags' field should contain a list of strings.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"tags: list[str] = []\"\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment (Windows Bash)\nDESCRIPTION: This command activates a virtual environment in Windows Bash (e.g., Git Bash) using the 'source' command. It executes the 'activate' script within the virtual environment's Scripts directory.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ source .venv/Scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Adicionando Cabeçalhos Personalizados ao HTTPException\nDESCRIPTION: Mostra como adicionar cabeçalhos personalizados ao lançar uma HTTPException, útil para cenários de segurança ou outras necessidades específicas.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n```\n\n----------------------------------------\n\nTITLE: Returning Values from FastAPI Dependency Functions\nDESCRIPTION: This code demonstrates how dependency functions in FastAPI can return values, even though these values won't be used when the dependencies are specified in the path operation decorator.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nreturn x_token\n\nreturn x_key\n```\n\n----------------------------------------\n\nTITLE: Creating Main FastAPI App\nDESCRIPTION: Creates the main FastAPI application instance and defines a root path operation. This is the top-level app where the sub-application will be mounted.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\\nFirst, create the main, top-level **FastAPI** application and its *path operations*:\\n\"\"\"\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"message\": \"Hello from the root app\"}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Caching in FastAPI\nDESCRIPTION: Shows how to disable caching for a specific dependency using the use_cache parameter. This is useful in scenarios where fresh values are needed for each dependency call.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nasync def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n```\n\nLANGUAGE: Python\nCODE:\n```\nasync def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Model with Default Values\nDESCRIPTION: Creates a Pydantic model for an item with optional description and name fields, demonstrating how default values affect schema generation\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth2PasswordRequestForm and Using it as a Dependency\nDESCRIPTION: This snippet shows how to import OAuth2PasswordRequestForm and use it as a dependency in the token endpoint to handle username and password form data.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.security import OAuth2PasswordRequestForm\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in Exception Handlers with Custom Routes\nDESCRIPTION: This example shows how to access the request body in an exception handler using a custom APIRoute. The route handler tries to process the request and if an exception occurs, it can access the request body for error handling.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def custom_route_handler(request: Request) -> Response:\n    request = RequestWithBody(request.scope, request.receive)\n    try:\n        return await original_route_handler(request)\n    except Exception as exc:\n        body = await request.body()\n        print(f\"Error: {exc}\\nRequest body: {body}\")\n        raise\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Requests HTTP GET Method Syntax in Python\nDESCRIPTION: Shows the simple API design of the Requests library for making GET requests, which inspired FastAPI's intuitive API design and HTTP method usage.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/alternatives.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nresponse = requests.get(\"http://example.com/some/url\")\n```\n\n----------------------------------------\n\nTITLE: Shortcut for Class Dependencies in FastAPI\nDESCRIPTION: Shows a shortcut syntax for declaring class dependencies in FastAPI, reducing code repetition by omitting the class name in the Depends() function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Single File FastAPI Docker Image Configuration\nDESCRIPTION: Dockerfile configuration for deploying a single-file FastAPI application with minimal container setup\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./main.py /code/\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Hero API Endpoint with FastAPI and SQLModel in Python\nDESCRIPTION: Implements a DELETE endpoint to remove a Hero from the database by ID using SQLModel and FastAPI.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsors with Conditional Rendering in Jinja2\nDESCRIPTION: This code section renders the sponsors of FastAPI in different tiers (Gold, Silver, Bronze). It conditionally displays each tier only if sponsors exist for that tier, with each sponsor shown with their logo and link.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_4\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if sponsors %}\n\n{% if sponsors.gold %}\n\n### Gold Sponsors\n\n{% for sponsor in sponsors.gold -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\" style=\"border-radius:15px\"></a>\n{% endfor %}\n{% endif %}\n\n{% if sponsors.silver %}\n\n### Silver Sponsors\n\n{% for sponsor in sponsors.silver -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\" style=\"border-radius:15px\"></a>\n{% endfor %}\n{% endif %}\n\n{% if sponsors.bronze %}\n\n### Bronze Sponsors\n\n{% for sponsor in sponsors.bronze -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\" style=\"border-radius:15px\"></a>\n{% endfor %}\n{% endif %}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Class Dependency in FastAPI\nDESCRIPTION: Demonstrates how to create a class-based dependency with query parameters and initialize it for use in a FastAPI route\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect Response\nDESCRIPTION: Demonstrates how to create a redirect response using RedirectResponse. This shows both direct response creation and using response_class for URL redirection.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\n@app.get(\"/redirect\")\ndef redirect_example():\n    return RedirectResponse(url=\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Using Class Dependency with Shortcut Syntax\nDESCRIPTION: Example demonstrating FastAPI's shortcut syntax for class dependencies, using empty Depends() with type annotation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n```\n\n----------------------------------------\n\nTITLE: Shortcut for Class Dependencies in FastAPI\nDESCRIPTION: This snippet illustrates the shortcut syntax for using class dependencies in FastAPI, which reduces code duplication by omitting the class name in the Depends() call.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    return {\"message\": \"Hello World\", \"params\": commons}\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Application Instance\nDESCRIPTION: Instantiating the FastAPI class to create the main application object. This object serves as the primary interaction point for defining routes and API endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for lru_cache Behavior\nDESCRIPTION: Mermaid sequence diagram showing how a function decorated with @lru_cache behaves with repeated and different calls. The diagram illustrates when the function executes its code versus when it returns stored results.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\nparticipant code as Código\nparticipant function as say_hi()\nparticipant execute as Ejecutar función\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> execute: ejecutar código de la función\n        execute ->> code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> code: devolver resultado almacenado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Rick\")\n        function ->> execute: ejecutar código de la función\n        execute ->> code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function ->> execute: ejecutar código de la función\n        execute ->> code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Rick\")\n        function ->> code: devolver resultado almacenado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code ->> function: say_hi(name=\"Camila\")\n        function ->> code: devolver resultado almacenado\n    end\n```\n\n----------------------------------------\n\nTITLE: Checking Active Python Environment in Windows PowerShell\nDESCRIPTION: Uses the 'Get-Command' cmdlet to find the path of the active Python interpreter in Windows, showing if a virtual environment is active.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n----------------------------------------\n\nTITLE: Dict Unpacking with Pydantic Models\nDESCRIPTION: Demonstrates Python dict unpacking with Pydantic models, showing how to create new model instances from existing ones.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nUserInDB(**user_dict)\n\nUserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function Definition with Await\nDESCRIPTION: Demonstrates how to define an asynchronous function using async def and await keywords in Python for handling operations that require waiting\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_burgers(number: int):\n    # Opérations asynchrones pour créer les burgers\n    return burgers\n```\n\n----------------------------------------\n\nTITLE: Creating a Jinja2 HTML Template\nDESCRIPTION: Example of a Jinja2 HTML template file (item.html) that demonstrates basic template syntax and use of variables passed from the FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n{!../../docs_src/templates/templates/item.html!}\n```\n\n----------------------------------------\n\nTITLE: Declaring OAuth2 Security Scheme with Scopes\nDESCRIPTION: Configure OAuth2 security scheme with predefined scopes like 'me' and 'items' to enable fine-grained access control in FastAPI\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\n        \"me\": \"Read your own user information\",\n        \"items\": \"Read and modify items\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Password Verification in FastAPI\nDESCRIPTION: Verifies the submitted password against the hashed password stored in the database using a fake hashing system.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nuser = UserInDB(**user_dict)\nif not fake_hash_password(form_data.password, user.hashed_password):\n    raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n```\n\n----------------------------------------\n\nTITLE: Markdown link to FastAPI Tutorial\nDESCRIPTION: A simple markdown link directing users to the FastAPI tutorial, which is recommended for those looking to learn FastAPI rather than browsing the reference documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[FastAPI Tutorial](https://fastapi.tiangolo.com/tutorial/)\n```\n\n----------------------------------------\n\nTITLE: Dict to Dependency: Python\nDESCRIPTION: This code demonstrates how to pass a `dict` as a dependency using FastAPI. The `commons` dictionary is passed to the endpoint function.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"q: str | None = None\"\n```\n\n----------------------------------------\n\nTITLE: Path Parameter with Full File Path\nDESCRIPTION: Demonstrates handling path parameters that include entire file paths using Starlette's path conversion\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/files/{file_path:path}\")\ndef read_file(file_path: str):\n    return {\"file_path\": file_path}\n```\n\n----------------------------------------\n\nTITLE: Creating and using AsyncClient for asynchronous requests\nDESCRIPTION: This snippet demonstrates how to create an `AsyncClient` instance and use it to send asynchronous requests to a FastAPI application. The `await` keyword is used to ensure the requests are executed asynchronously.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"{* ../../docs_src/async_tests/test_main.py hl[9:12] *}\"\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Dict Response with typing.Dict\nDESCRIPTION: Creating flexible responses with arbitrary dictionaries when field names are not known in advance\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\n\ndef get_arbitrary_data() -> Dict[str, str]:\n    # Implementation logic\n```\n\n----------------------------------------\n\nTITLE: Multiple File Uploads with Metadata in FastAPI\nDESCRIPTION: This code shows how to handle multiple file uploads with additional metadata in FastAPI using the File class and UploadFile.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{* ../../docs_src/request_files/tutorial003_an_py39.py hl[11,18:20] *}\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI in Production Mode with CLI\nDESCRIPTION: Command to start a FastAPI application in production mode, with automatic reloading disabled and listening on all network interfaces\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/fastapi-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastapi run main.py\n```\n\n----------------------------------------\n\nTITLE: Running a FastAPI Application with WebSockets\nDESCRIPTION: Demonstrates how to run a FastAPI application that includes WebSocket endpoints using the FastAPI development server.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Path and Query Parameters\nDESCRIPTION: Demonstrates how to order parameters with and without default values using Path and optional query parameters\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(q: str, item_id: int = Path(gt=0))\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenAPI Documentation Output\nDESCRIPTION: Example of the JSON response received when OpenAPI documentation is disabled and a user attempts to access the documentation endpoints.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": \"Not Found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Dependency in a FastAPI Path Operation\nDESCRIPTION: Demonstrates how to use a dependency in a FastAPI path operation function. FastAPI automatically resolves the dependency chain, calling sub-dependencies as needed.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n```\n\n----------------------------------------\n\nTITLE: Parameter Ordering with Keyword Arguments\nDESCRIPTION: Shows a technique to declare parameters as keyword arguments by using * as the first parameter\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef read_items(*, q: str, item_id: int = Path(gt=0))\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Query Parameter in FastAPI\nDESCRIPTION: This snippet shows how to define an optional query parameter 'q' with a default value of None.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nq: Union[str, None] = None\n```\n\n----------------------------------------\n\nTITLE: Importing Cookie from FastAPI in Python\nDESCRIPTION: This snippet shows how to import the Cookie class from FastAPI, which is used to define cookie parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Cookie\n```\n\n----------------------------------------\n\nTITLE: Using a Dictionary as a Dependency in FastAPI\nDESCRIPTION: Example showing a function-based dependency that returns a dictionary with query parameters.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Function Parameter with Common Parameters\nDESCRIPTION: Original function parameter definition from the dictionary-based dependency example.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n```\n\n----------------------------------------\n\nTITLE: Using PlainTextResponse in FastAPI\nDESCRIPTION: Shows how to return a plain text response using PlainTextResponse in a FastAPI route.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Path Operation\nDESCRIPTION: This snippet illustrates how to define a path operation for handling incoming callback requests. The path operation includes the body and response model declarations required for the external API specifications.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@invoice_callback_router.post(\"/invoices/{invoice_id}\")\nasync def receive_invoice(invoice_id: str, body: InvoiceEvent):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining List Fields in Pydantic Models for FastAPI\nDESCRIPTION: This snippet shows how to define a field as a Python list in a Pydantic model, which FastAPI will use for request body validation and documentation.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntags: list\n```\n\n----------------------------------------\n\nTITLE: Synchronous HTTP Request Equivalent\nDESCRIPTION: Shows the equivalent synchronous HTTP request method compared to the async version\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nresponse = client.get('/')\n```\n\n----------------------------------------\n\nTITLE: Version range example in requirements.txt\nDESCRIPTION: An example version range to follow for fastapi in the requirements.txt\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n\"fastapi>=0.45.0,<0.46.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI Development Dependencies\nDESCRIPTION: Requirements file listing development dependencies for FastAPI project. Includes all optional dependencies, test requirements, documentation requirements, pre-commit hooks configuration and playwright for screenshots.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .[all]\n-r requirements-tests.txt\n-r requirements-docs.txt\npre-commit >=2.17.0,<5.0.0\n# For generating screenshots\nplaywright\n```\n\n----------------------------------------\n\nTITLE: Importing Query from FastAPI\nDESCRIPTION: This snippet demonstrates how to import the Query class from FastAPI, which is used for additional parameter validations.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI, Query\n```\n\n----------------------------------------\n\nTITLE: Pinning Pydantic Version in requirements.txt\nDESCRIPTION: Demonstrates how to pin Pydantic to a compatible version range that works with FastAPI, allowing updates within major version 2.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\npydantic>=2.7.0,<3.0.0\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Sponsors List Template\nDESCRIPTION: Template code that iterates through GitHub sponsors and displays them in a grid with avatars and usernames. It excludes sponsors that already have badges and uses Liquid templating syntax combined with HTML.\nSOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% if github_sponsors %}\n{% for group in github_sponsors.sponsors %}\n\n<div class=\"user-list user-list-center\">\n\n{% for user in group %}\n{% if user.login not in sponsors_badge.logins %}\n\n<div class=\"user\"><a href=\"{{ user.url }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"{{ user.avatarUrl }}\"/></div><div class=\"title\">@{{ user.login }}</div></a></div>\n\n{% endif %}\n{% endfor %}\n\n</div>\n\n{% endfor %}\n{% endif %}\n```"
  }
]