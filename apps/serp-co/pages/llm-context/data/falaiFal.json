[
  {
    "owner": "fal-ai",
    "repo": "fal",
    "content": "TITLE: Creating a Cloud-Executed Function with fal in Python\nDESCRIPTION: This snippet illustrates how to use fal to create a function that runs in the cloud. It creates a virtual environment, installs the 'pyjokes' package, and returns a joke.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fal\n\n@fal.function(\n    \"virtualenv\",\n    requirements=[\"pyjokes\"],\n)\ndef tell_joke() -> str:\n    import pyjokes\n\n    joke = pyjokes.get_joke()\n    return joke\n\nprint(\"Joke from the clouds: \", tell_joke())\n```\n\n----------------------------------------\n\nTITLE: Using fal to run a Python function in the cloud\nDESCRIPTION: Example of using fal to define and execute a Python function in the cloud. The function creates a virtual environment, installs the pyjokes package, and returns a random joke.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fal\n\n@fal.function(\n    \"virtualenv\",\n    requirements=[\"pyjokes\"],\n)\ndef tell_joke() -> str:\n    import pyjokes\n\n    joke = pyjokes.get_joke()\n    return joke\n\nprint(\"Joke from the clouds: \", tell_joke())\n```\n\n----------------------------------------\n\nTITLE: Basic usage with synchronous request\nDESCRIPTION: Example showing how to make a synchronous request to the fast-sdxl model for image generation using a prompt, and accessing the response URL.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fal_client\n\nresponse = fal_client.run(\"fal-ai/fast-sdxl\", arguments={\"prompt\": \"a cute cat, realistic, orange\"})\nprint(response[\"images\"][0][\"url\"])\n```\n\n----------------------------------------\n\nTITLE: Uploading files to fal.media CDN\nDESCRIPTION: Example showing how to upload a file to fal.media CDN and use the resulting URL in a request to the whisper speech recognition model.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport fal_client\n\naudio_url = fal_client.upload_file(\"path/to/audio.wav\")\nresponse = fal_client.run(\"fal-ai/whisper\", arguments={\"audio_url\": audio_url})\nprint(response[\"text\"])\n```\n\n----------------------------------------\n\nTITLE: Queuing requests with status updates\nDESCRIPTION: Example showing how to submit a request and monitor its progress through various stages (queued, in progress, completed) while also receiving logs from the model execution.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport fal_client\n\nasync def main():\n    response = await fal_client.submit_async(\"fal-ai/fast-sdxl\", arguments={\"prompt\": \"a cute cat, realistic, orange\"})\n\n    logs_index = 0\n    async for event in response.iter_events(with_logs=True):\n        if isinstance(event, fal_client.Queued):\n            print(\"Queued. Position:\", event.position)\n        elif isinstance(event, (fal_client.InProgress, fal_client.Completed)):\n            new_logs = event.logs[logs_index:]\n            for log in new_logs:\n                print(log[\"message\"])\n            logs_index = len(event.logs)\n\n    result = await response.get()\n    print(result[\"images\"][0][\"url\"])\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Making asynchronous requests\nDESCRIPTION: Example demonstrating how to use asynchronous requests with the client. This allows for non-blocking operations when interacting with fal.ai models.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport fal_client\n\nasync def main():\n    response = await fal_client.run_async(\"fal-ai/fast-sdxl\", arguments={\"prompt\": \"a cute cat, realistic, orange\"})\n    print(response[\"images\"][0][\"url\"])\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Encoding files as in-memory data URLs\nDESCRIPTION: Example demonstrating how to encode a file as a data URL to avoid uploading it to the CDN, which can reduce latency in some cases.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport fal_client\n\naudio_data_url = fal_client.encode_file(\"path/to/audio.wav\")\nresponse = fal_client.run(\"fal-ai/whisper\", arguments={\"audio_url\": audio_data_url})\nprint(response[\"text\"])\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous API Calls in Python\nDESCRIPTION: Demonstrates how to make synchronous API calls and handle responses. This shows both simple data retrieval and detailed response handling with status codes.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openapi_fal_rest.models import MyDataModel\nfrom openapi_fal_rest.api.my_tag import get_my_data_model\nfrom openapi_fal_rest.types import Response\n\nmy_data: MyDataModel = get_my_data_model.sync(client=client)\n# or if you need more info (e.g. status_code)\nresponse: Response[MyDataModel] = get_my_data_model.sync_detailed(client=client)\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous API Calls in Python\nDESCRIPTION: Demonstrates how to make asynchronous API calls using the asyncio pattern. This is useful for non-blocking API interactions in async applications.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openapi_fal_rest.models import MyDataModel\nfrom openapi_fal_rest.api.my_tag import get_my_data_model\nfrom openapi_fal_rest.types import Response\n\nmy_data: MyDataModel = await get_my_data_model.asyncio(client=client)\nresponse: Response[MyDataModel] = await get_my_data_model.asyncio_detailed(client=client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client in Python\nDESCRIPTION: Creates an authenticated client for accessing protected API endpoints. This client includes a token for authorization when making requests.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openapi_fal_rest import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"https://api.example.com\", token=\"SuperSecretToken\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Client in Python\nDESCRIPTION: Creates a basic client for accessing API endpoints without authentication. This is suitable for public API endpoints that don't require authorization.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openapi_fal_rest import Client\n\nclient = Client(base_url=\"https://api.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with fal CLI\nDESCRIPTION: This snippet demonstrates how to authenticate with fal using the command-line interface. Authentication is necessary to use fal services.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfal auth login\n```\n\n----------------------------------------\n\nTITLE: Authenticating with fal\nDESCRIPTION: Command to authenticate with fal using the CLI.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfal auth login\n```\n\n----------------------------------------\n\nTITLE: Setting up API key as environment variable\nDESCRIPTION: Command to set the fal.ai API key as an environment variable for authentication.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport FAL_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Installing fal Package using pip\nDESCRIPTION: This snippet shows how to install the fal package using pip, which is required to use fal in your Python projects.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install fal\n```\n\n----------------------------------------\n\nTITLE: Installing fal package using pip\nDESCRIPTION: Command to install the fal package using pip package manager.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install fal\n```\n\n----------------------------------------\n\nTITLE: Installing fal-client via pip\nDESCRIPTION: Command to install the fal-client Python package using pip package manager.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fal-client\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL Certificate in Python\nDESCRIPTION: Shows how to configure the client to use a custom SSL certificate bundle for verification. This is useful when connecting to internal APIs with custom certificates.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(\n    base_url=\"https://internal_api.example.com\", \n    token=\"SuperSecretToken\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing fal in Editable Mode with Dev Dependencies\nDESCRIPTION: This snippet shows how to install fal and its related projects in editable mode with development dependencies, which is useful for contributors.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npip install -e 'projects/fal[dev]'\npip install -e 'projects/fal_client[dev]'\npip install -e 'projects/isolate_proto[dev]'\n```\n\n----------------------------------------\n\nTITLE: Installing fal in editable mode with dev dependencies\nDESCRIPTION: Commands to install fal and its related projects in editable mode with development dependencies.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -e 'projects/fal[dev]'\npip install -e 'projects/fal_client[dev]'\npip install -e 'projects/isolate_proto[dev]'\n```\n\n----------------------------------------\n\nTITLE: Regenerating gRPC Definitions for Isolate Controller\nDESCRIPTION: A sequence of commands to regenerate gRPC definitions for the Isolate Controller. The process involves changing to the isolate_proto directory, installing development dependencies, running a regeneration script with a specific isolate version, and running pre-commit hooks on all files.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/isolate_proto/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd projects/isolate_proto\n$ pip install -e '.[dev]'\n$ python ../../tools/regen_grpc.py --isolate-version <isolate version>\n$ pre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Running Tests for fal Project\nDESCRIPTION: This snippet demonstrates how to run tests for the fal project using pytest, which is essential for maintaining code quality and ensuring functionality.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running fal tests\nDESCRIPTION: Command to run the test suite for fal using pytest.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Verification in Python\nDESCRIPTION: Demonstrates how to disable SSL certificate verification. This should be used with caution as it presents a security risk in production environments.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/openapi-fal-rest/README.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(\n    base_url=\"https://internal_api.example.com\", \n    token=\"SuperSecretToken\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for fal Project\nDESCRIPTION: This snippet shows how to set up pre-commit hooks for the fal project, which helps maintain code quality and consistency before committing changes.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd projects/fal\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Setting up pre-commit hooks for fal\nDESCRIPTION: Commands to change to the fal project directory and install pre-commit hooks.\nSOURCE: https://github.com/fal-ai/fal/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd projects/fal\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Setting up toctree in Sphinx documentation\nDESCRIPTION: Configures the table of contents tree (toctree) directive that defines the hierarchical structure of the documentation. It specifies a maximum depth of 2 levels, includes a caption labeled 'Contents:', and links to the 'modules' documentation page.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal_client/docs/index.rst#2025-04-11_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   modules\n```\n\n----------------------------------------\n\nTITLE: Setting up toctree directive in Sphinx for fal_sdk documentation\nDESCRIPTION: This code snippet shows the toctree directive configuration for the fal_sdk documentation. It sets the maximum depth to 2 levels, adds a caption labeled 'Contents:', and includes the 'modules' document in the table of contents.\nSOURCE: https://github.com/fal-ai/fal/blob/main/projects/fal/docs/index.rst#2025-04-11_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   modules\n```"
  }
]