[
  {
    "owner": "actix",
    "repo": "actix-web",
    "content": "TITLE: Creating a Basic Actix Web Application in Rust\nDESCRIPTION: This code snippet demonstrates how to create a simple Actix Web application in Rust. It includes a route handler for a GET request, an asynchronous main function, and server setup. The application responds with a greeting message that includes a name parameter from the URL.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{get, web, App, HttpServer, Responder};\n\n#[get(\"/hello/{name}\")]\nasync fn greet(name: web::Path<String>) -> impl Responder {\n    format!(\"Hello {name}!\")\n}\n\n#[actix_web::main] // or #[tokio::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new().service(greet)\n    })\n    .bind((\"127.0.0.1\", 8080))?\n    .run()\n    .await\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Service in Actix Web\nDESCRIPTION: Demonstrates how to set up static file serving in an Actix Web application. The example shows configuring a Files service to serve static files from the current directory under the /static path prefix with UTF-8 encoding preference.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-files/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::App;\nuse actix_files::Files;\n\nlet app = App::new()\n    .service(Files::new(\"/static\", \".\").prefer_utf8(true));\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters in Actix-web\nDESCRIPTION: Adds methods to extract the matched resource pattern and name from HttpRequest and ServiceRequest. This allows accessing dynamic path segments.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\nHttpRequest::match_pattern()\nServiceRequest::match_pattern()\nHttpRequest::match_name()\nServiceRequest::match_name()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Actix Web Server with a Greeting Route\nDESCRIPTION: This example demonstrates how to create a simple Actix Web server with a single route that greets a user. It includes setting up an HTTP server, defining a route handler, and running the server.\nSOURCE: https://github.com/actix/actix-web/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{get, web, App, HttpServer, Responder};\n\n#[get(\"/hello/{name}\")]\nasync fn greet(name: web::Path<String>) -> impl Responder {\n    format!(\"Hello {name}!\")\n}\n\n#[actix_web::main] // or #[tokio::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| {\n        App::new().service(greet)\n    })\n    .bind((\"127.0.0.1\", 8080))?\n    .run()\n    .await\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Middleware Implementation in Actix Web v4\nDESCRIPTION: This code snippet demonstrates how to update a middleware implementation for Actix Web v4. It shows changes to the Transform and Service traits, including modifications to type parameters and method signatures.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n  use std::{\n-     cell::RefCell,\n      future::Future,\n      pin::Pin,\n      rc::Rc,\n-     task::{Context, Poll},\n  };\n\n  use actix_web::{\n      dev::{Service, ServiceRequest, ServiceResponse, Transform},\n      Error,\n  };\n  use futures_util::future::{ok, LocalBoxFuture, Ready};\n\n  pub struct SayHi;\n\n- impl<S, B> Transform<S> for SayHi\n+ impl<S, B> Transform<S, ServiceRequest> for SayHi\n  where\n-     S: Service<Request = ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n+     S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n      S::Future: 'static,\n      B: 'static,\n  {\n-     type Request = ServiceRequest;\n      type Response = ServiceResponse<B>;\n      type Error = Error;\n      type InitError = ();\n      type Transform = SayHiMiddleware<S>;\n      type Future = Ready<Result<Self::Transform, Self::InitError>>;\n\n      fn new_transform(&self, service: S) -> Self::Future {\n          ok(SayHiMiddleware {\n-             service: Rc::new(RefCell::new(service)),\n+             service: Rc::new(service),\n          })\n      }\n  }\n\n  pub struct SayHiMiddleware<S> {\n-     service: Rc<RefCell<S>>,\n+     service: Rc<S>,\n  }\n\n- impl<S, B> Service for SayHiMiddleware<S>\n+ impl<S, B> Service<ServiceRequest> for SayHiMiddleware<S>\n  where\n-     S: Service<Request = ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n+     S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n      S::Future: 'static,\n      B: 'static,\n  {\n-     type Request = ServiceRequest;\n      type Response = ServiceResponse<B>;\n      type Error = Error;\n      type Future = LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n\n-     fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n-         self.service.poll_ready(cx)\n-     }\n+     actix_web::dev::forward_ready!(service);\n\n-     fn call(&mut self, req: ServiceRequest) -> Self::Future {\n+     fn call(&self, req: ServiceRequest) -> Self::Future {\n          println!(\"Hi from start. You requested: {}\", req.path());\n\n          let fut = self.service.call(req);\n\n          Box::pin(async move {\n              let res = fut.await?;\n\n              println!(\"Hi from response\");\n              Ok(res)\n          })\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Migrating from HttpRequest Body Methods to Extractors in Actix-Web 1.0\nDESCRIPTION: Shows how to update from using HttpRequest methods for accessing the body to using dedicated extractors like Bytes in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfn index(req: &HttpRequest) -> Responder {\n   req.body()\n     .and_then(|body| {\n        ...\n     })\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn index(body: Bytes) -> Responder {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with MultipartForm in Actix Web\nDESCRIPTION: This example demonstrates how to handle multipart/form-data requests in Actix Web using the MultipartForm extractor. It shows file uploading with size limits and JSON metadata processing. The example includes a form structure with a TempFile field for file uploads and a Json field for metadata.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{post, App, HttpServer, Responder};\n\nuse actix_multipart::form::{json::Json as MpJson, tempfile::TempFile, MultipartForm};\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct Metadata {\n    name: String,\n}\n\n#[derive(Debug, MultipartForm)]\nstruct UploadForm {\n    #[multipart(limit = \"100MB\")]\n    file: TempFile,\n    json: MpJson<Metadata>,\n}\n\n#[post(\"/videos\")]\npub async fn post_video(MultipartForm(form): MultipartForm<UploadForm>) -> impl Responder {\n    format!(\n        \"Uploaded file {}, with size: {}\",\n        form.json.name, form.file.size\n    )\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(move || App::new().service(post_video))\n        .bind((\"127.0.0.1\", 8080))?\n        .run()\n        .await\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NormalizePath Middleware in Rust\nDESCRIPTION: Demonstrates configuring the NormalizePath middleware with different TrailingSlash behaviors to control URL normalization.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nNormalizePath::new(TrailingSlash::MergeOnly)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Either Extractor in Rust\nDESCRIPTION: Shows how to use the new Either<web::Json<T>, web::Form<T>> extractor to handle both JSON and form data inputs. This allows extracting the inner type regardless of which variant was created.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nEither<web::Json<T>, web::Form<T>>::into_inner()\n```\n\n----------------------------------------\n\nTITLE: Using Query Extractor in Actix-web 0.6 (Rust)\nDESCRIPTION: Demonstrates how to use the Query extractor in actix-web 0.6 to handle query parameters, replacing the deprecated HttpRequest::query() method.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-0.x.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn index(q: Query<HashMap<String, String>>) -> Result<..> {\n    ...\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet q = Query::<HashMap<String, String>>::extract(req);\n```\n\n----------------------------------------\n\nTITLE: Defining Actix Web Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to include Actix Web as a dependency in a Rust project's Cargo.toml file. It specifies version 4 of the actix-web crate.\nSOURCE: https://github.com/actix/actix-web/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nactix-web = \"4\"\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Services with App in Rust\nDESCRIPTION: Demonstrates the new services! macro for registering multiple services to an Actix-Web App. Also shows how to register a vec of services of the same type.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nservices!()\n```\n\n----------------------------------------\n\nTITLE: Client Connector Configuration\nDESCRIPTION: Configuration of the client connector with custom timeout settings.\nSOURCE: https://github.com/actix/actix-web/blob/master/awc/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nConnector\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request with AWC in Rust\nDESCRIPTION: This code snippet demonstrates how to use the AWC client to send an HTTP GET request to www.rust-lang.org. It creates a default client, sets a custom User-Agent header, sends the request, and prints the response. The code runs within Actix's runtime system.\nSOURCE: https://github.com/actix/actix-web/blob/master/awc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_rt::System;\nuse awc::Client;\n\nfn main() {\n    System::new().block_on(async {\n        let client = Client::default();\n\n        let res = client\n            .get(\"http://www.rust-lang.org\")    // <- Create request builder\n            .insert_header((\"User-Agent\", \"Actix-web\"))\n            .send()                             // <- Send http request\n            .await;\n\n        println!(\"Response: {:?}\", res);        // <- server http response\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Multipart Form Data with File Upload\nDESCRIPTION: This cURL command demonstrates how to send a multipart/form-data request to the Actix Web server. It includes a JSON field with metadata and a file field that uploads the local Cargo.lock file.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v --request POST \\\n  --url http://localhost:8080/videos \\\n  -F 'json={\"name\": \"Cargo.lock\"};type=application/json' \\\n  -F file=@./Cargo.lock\n```\n\n----------------------------------------\n\nTITLE: Configuring Extractor with Route in Actix-web 0.7 (Rust)\nDESCRIPTION: Shows how to configure an extractor using the new Route::with_config() method in actix-web 0.7, replacing the previous approach of chaining configuration methods.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-0.x.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n      let app = App::new().resource(\"/index.html\", |r| {\n          r.method(http::Method::GET)\n                .with_config(index, |cfg| { // <- register handler\n                    cfg.limit(4096);  // <- limit size of the payload\n                  })\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTTP Server with Actix\nDESCRIPTION: Creates a basic HTTP server using actix-http and actix-server. Sets up logging, configures timeouts, and responds with 'Hello world!' and a custom header. Server listens on localhost port 8080.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-http/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::{env, io};\n\nuse actix_http::{HttpService, Response};\nuse actix_server::Server;\nuse futures_util::future;\nuse http::header::HeaderValue;\nuse tracing::info;\n\n#[actix_rt::main]\nasync fn main() -> io::Result<()> {\n    env::set_var(\"RUST_LOG\", \"hello_world=info\");\n    env_logger::init();\n\n    Server::build()\n        .bind(\"hello-world\", \"127.0.0.1:8080\", || {\n            HttpService::build()\n                .client_timeout(1000)\n                .client_disconnect(1000)\n                .finish(|_req| {\n                    info!(\"{:?}\", _req);\n                    let mut res = Response::Ok();\n                    res.header(\"x-head\", HeaderValue::from_static(\"dummy value!\"));\n                    future::ok::<_, ()>(res.body(\"Hello world!\"))\n                })\n                .tcp()\n        })?\n        .run()\n        .await\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Resource Registration in Actix-Web 1.0\nDESCRIPTION: Shows how to update resource registration to use the new .service() method that replaces the direct resource registration approach used in previous versions.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().resource(\"/welcome\", |r| r.f(welcome))\n```\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().service(\n    web::resource(\"/welcome\")\n        .route(web::get().to(welcome))\n        .route(web::post().to(post_handler))\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Actix Web Handler with TestServer in Rust\nDESCRIPTION: Example showing how to use actix-test to create integration tests for Actix Web handlers. Demonstrates setting up a test server, defining a handler, and making HTTP requests to test endpoints.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::{get, web, test, App, HttpResponse, Error, Responder};\n\n#[get(\"/\")]\nasync fn my_handler() -> Result<impl Responder, Error> {\n    Ok(HttpResponse::Ok())\n}\n\n#[actix_rt::test]\nasync fn test_example() {\n    let srv = actix_test::start(||\n        App::new().service(my_handler)\n    );\n\n    let req = srv.get(\"/\");\n    let res = req.send().await.unwrap();\n\n    assert!(res.status().is_success());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Responder Trait Implementation in Actix Web v4\nDESCRIPTION: This snippet shows how to update the implementation of the Responder trait for Actix Web v4. It demonstrates the removal of the Future type and changes to the respond_to method signature.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n  impl Responder for &'static str {\n-     type Error = Error;\n-     type Future = Ready<Result<HttpResponse, Error>>;\n+     type Body = &'static str;\n\n-     fn respond_to(self, req: &HttpRequest) -> Self::Future {\n+     fn respond_to(self, req: &HttpRequest) -> HttpResponse<Self::Body> {\n          let res = HttpResponse::build(StatusCode::OK)\n              .content_type(\"text/plain; charset=utf-8\")\n              .body(self);\n\n-         ok(res)\n+         res\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring Actix Web Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to declare the Actix Web dependency in a Rust project's Cargo.toml file. It specifies the latest version 4 of the actix-web crate.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nactix-web = \"4\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Scope Registration in Actix-Web 1.0\nDESCRIPTION: Demonstrates how to update scope registration using the new .service() method and web::scope() factory function, replacing the previous direct scope approach.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet app = App::new().scope(\"/{project_id}\", |scope| {\n      scope\n          .resource(\"/path1\", |r| r.f(|_| HttpResponse::Ok()))\n          .resource(\"/path2\", |r| r.f(|_| HttpResponse::Ok()))\n          .resource(\"/path3\", |r| r.f(|_| HttpResponse::MethodNotAllowed()))\n});\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet app = App::new().service(\n    web::scope(\"/{project_id}\")\n        .service(web::resource(\"/path1\").to(|| HttpResponse::Ok()))\n        .service(web::resource(\"/path2\").to(|| HttpResponse::Ok()))\n        .service(web::resource(\"/path3\").to(|| HttpResponse::MethodNotAllowed()))\n);\n```\n\n----------------------------------------\n\nTITLE: Using ReqData Extractor in Rust\nDESCRIPTION: Shows usage of the new web::ReqData extractor for accessing request-local data in Actix-Web handlers.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nweb::ReqData\n```\n\n----------------------------------------\n\nTITLE: Converting Web::to Closures for Actix Web V4\nDESCRIPTION: Shows how to convert a synchronous web::to closure to an async one in Actix Web V4, which is now required when returning HttpResponse directly.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- web::to(|| HttpResponse::Ok().finish())\n+ web::to(|| async { HttpResponse::Ok().finish() })\n```\n\n----------------------------------------\n\nTITLE: Converting Error Responses in Actix Web V4\nDESCRIPTION: Shows how to replace direct use of HttpResponse as an error with the recommended error module builders that provide better error handling capabilities.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- Err(HttpResponse::InternalServerError().finish())\n+ Err(error::ErrorInternalServerError(\"reason\"))\n\n- Err(HttpResponse::InternalServerError().body(third_party_error.to_string()))\n+ Err(error::ErrorInternalServerError(err))\n\n- .map_err(|err| HttpResponse::InternalServerError().finish())?\n+ .map_err(error::ErrorInternalServerError)?\n```\n\n----------------------------------------\n\nTITLE: Converting web::block Usage for Result Returns in Actix Web V4\nDESCRIPTION: Shows how to update code using web::block for Result return values, now requiring double question mark operator.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n- let n: u32 = web::block(|| Ok(123)).await?;\n+ let n: u32 = web::block(|| Ok(123)).await??;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responder for Tuple in Rust\nDESCRIPTION: Adds implementation of Responder trait for a tuple of (T, StatusCode) where T implements Responder. This allows returning a custom status code along with a response.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nimpl Responder for (T, StatusCode) where T: Responder\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Response in Actix-Web 1.0\nDESCRIPTION: Shows how to update custom error implementations to use both error_response and render_response methods required by the ResponseError trait in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nfn render_response(&self) -> HttpResponse {\n  self.error_response()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Guard Implementation in Actix Web v4\nDESCRIPTION: This snippet demonstrates how to update the implementation of a custom Guard for Actix Web v4. It shows changes to the check method signature and how to access request information.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n  struct MethodGuard(HttpMethod);\n\n  impl Guard for MethodGuard {\n-     fn check(&self, request: &RequestHead) -> bool {\n+     fn check(&self, ctx: &GuardContext<'_>) -> bool {\n-         request.method == self.0\n+         ctx.head().method == self.0\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Feature Flag: ssl to openssl in Actix-Web 2.0.0\nDESCRIPTION: Shows how to update the feature flag reference in Cargo.toml from 'ssl' to 'openssl'. This change is required when migrating to Actix-Web 2.0.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-2.0.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nactix-web = { version = \"2.0.0\", features = [\"ssl\"] }\n```\n\nLANGUAGE: rust\nCODE:\n```\nactix-web = { version = \"2.0.0\", features = [\"openssl\"] }\n```\n\n----------------------------------------\n\nTITLE: Updating Header API Usage\nDESCRIPTION: Example showing how to update header-related API calls to use new standardized methods.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n- .set_header(\"Api-Key\", \"1234\")\n+ .insert_header((\"Api-Key\", \"1234\"))\n\n- .header(\"Api-Key\", \"1234\")\n+ .append_header((\"Api-Key\", \"1234\"))\n\n- .set(ContentType::json())\n+ .insert_header(ContentType::json())\n```\n\n----------------------------------------\n\nTITLE: Simplifying Handlers with HttpResponseBuilder in Actix Web V4\nDESCRIPTION: Shows how to simplify very basic handlers by using an HttpResponseBuilder directly instead of a closure that returns HttpResponse.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- web::to(|| HttpResponse::Ok().finish())\n+ web::to(HttpResponse::Ok)\n```\n\n----------------------------------------\n\nTITLE: Migrating State to Data in Actix-Web 1.0\nDESCRIPTION: Shows how to migrate from State to the new Data mechanism for registering and accessing application state in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nApp.with_state(T)\n```\n\nLANGUAGE: rust\nCODE:\n```\nApp.new()\n     .data(T)\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::web::Data;\n\nfn endpoint_handler(Data<T>)){\n    ...\n  }\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn endpoint_handler(req: HttpRequest) {\n\tlet data: Option<Data<T>> = req.app_data::<T>();\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handler with New Response in Actix Web v4\nDESCRIPTION: This snippet shows how to update an error handler that creates a new response. It demonstrates the changes needed to work with the new EitherBody type and ServiceResponse structure.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n  fn error_handler<B>(res: ServiceResponse<B>) -> Result<ErrorHandlerResponse<B>, Error> {\n-     let req = res.request().clone();\n+     let (req, _res) = res.into_parts();\n\n      let res = actix_files::NamedFile::open(\"./templates/404.html\")?\n          .set_status_code(StatusCode::NOT_FOUND)\n-         .into_response(&req)?\n-         .into_body();\n+         .into_response(&req);\n\n-     let res = ServiceResponse::new(req, res);\n+     let res = ServiceResponse::new(req, res).map_into_right_body();\n      Ok(ErrorHandlerResponse::Response(res))\n  }\n```\n\n----------------------------------------\n\nTITLE: Migrating Request Payload Access in Actix-Web 1.0\nDESCRIPTION: Shows how to update from using HttpRequest to access payload streams to using the dedicated Payload extractor in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn index(req: &HttpRequest) -> Box<Future<Item=HttpResponse, Error=Error>> {\n  req\n     .payload()\n     .from_err()\n     .fold((), |_, chunk| {\n          ...\n      })\n     .map(|_| HttpResponse::Ok().finish())\n     .responder()\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn index(stream: web::Payload) -> impl Future<Item=HttpResponse, Error=Error> {\n   stream\n     .from_err()\n     .fold((), |_, chunk| {\n          ...\n      })\n     .map(|_| HttpResponse::Ok().finish())\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters in Actix Web 3.0.0 (Rust)\nDESCRIPTION: Demonstrates the new ways to access path parameters in Actix Web 3.0.0. It shows the old method that no longer works and two new methods: using destructuring with into_inner() and using pattern matching in the function signature.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-3.0.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Previously:\nasync fn some_route(path: web::Path<(String, String)>) -> String {\n  format!(\"Hello, {} {}\", path.0, path.1)\n}\n\n// Now (this also worked before):\nasync fn some_route(path: web::Path<(String, String)>) -> String {\n  let (first_name, last_name) = path.into_inner();\n  format!(\"Hello, {} {}\", first_name, last_name)\n}\n// Or (this wasn't previously supported):\nasync fn some_route(web::Path((first_name, last_name)): web::Path<(String, String)>) -> String {\n  format!(\"Hello, {} {}\", first_name, last_name)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Map in Actix-web Request\nDESCRIPTION: Adds methods to access the application's resource map from ServiceRequest and HttpRequest structs. This allows inspecting registered routes and resources.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nServiceRequest::resource_map()\nHttpRequest::resource_map()\n```\n\n----------------------------------------\n\nTITLE: Updating Client Import Path\nDESCRIPTION: Example showing how to update the import path for the HTTP client after awc removal.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n- use actix_web::client::Client;\n+ use awc::Client;\n```\n\n----------------------------------------\n\nTITLE: Creating Data from Arc in Actix-web\nDESCRIPTION: Adds an option to create Data<T> from Arc<T>, allowing shared ownership of application data.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/CHANGES.md#2025-04-22_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nData::from(Arc<T>)\n```\n\n----------------------------------------\n\nTITLE: Migrating from App::data to App::app_data in Actix Web v4\nDESCRIPTION: This code snippet demonstrates how to replace the deprecated App::data method with App::app_data in Actix Web v4. It shows the changes needed in the application setup and how to use Data<T> correctly.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n  use actix_web::web::Data;\n\n  #[get(\"/\")]\n  async fn handler(my_state: Data<MyState>) -> { todo!() }\n\n  HttpServer::new(|| {\n-     App::new()\n-         .data(MyState::default())\n-         .service(handler)\n\n+     let my_state: Data<MyState> = Data::new(MyState::default());\n+\n+     App::new()\n+         .app_data(my_state)\n+         .service(handler)\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating Imports and Test Macros in Actix Web v4\nDESCRIPTION: These snippets show how to update imports and test macros when migrating to Actix Web v4. It demonstrates the removal of direct dependencies on actix-rt and actix-service.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n- use actix_service::{Service, Transform};\n+ use actix_web::dev::{Service, Transform};\n```\n\nLANGUAGE: rust\nCODE:\n```\n- #[actix_rt::test]\n+ #[actix_web::test]\n  async fn test_thing() {\n```\n\n----------------------------------------\n\nTITLE: Converting Function Handlers for Actix Web V4\nDESCRIPTION: Shows how to convert a synchronous handler function to an async one in Actix Web V4, which is now required when returning HttpResponse directly.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- fn handler() -> HttpResponse {\n+ async fn handler() -> HttpResponse {\n    HttpResponse::Ok().finish()\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Middleware Registration in Actix-Web 1.0\nDESCRIPTION: Shows how to update from .middleware() to the new .wrap() method for registering middleware in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet app = App::new()\n     .middleware(middleware::Logger::default())\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet app = App::new()\n     .wrap(middleware::Logger::default())\n     .route(\"/index.html\", web::get().to(index));\n```\n\n----------------------------------------\n\nTITLE: Converting web::block Usage for Non-Result Returns in Actix Web V4\nDESCRIPTION: Shows how to update code using web::block for non-Result return values since the return type has changed in Actix Web V4.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n- let n: u32 = web::block(|| Ok(123)).await?;\n+ let n: u32 = web::block(|| 123).await?;\n```\n\n----------------------------------------\n\nTITLE: Replacing .f() Handler Registration with .to() in Actix-Web 1.0\nDESCRIPTION: Demonstrates how to replace the removed .f(), .a(), and .h() handler registration methods with the new .to() and .to_async() methods in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().resource(\"/welcome\", |r| r.f(welcome))\n```\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().service(web::resource(\"/welcome\").to(welcome))\n```\n\n----------------------------------------\n\nTITLE: Installing actix-web-codegen Crate in Rust\nDESCRIPTION: Command to add the actix-web-codegen crate as a dependency in a Rust project. The crate provides routing and runtime macros for Actix Web.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![crates.io](https://img.shields.io/crates/v/actix-web-codegen?label=latest)](https://crates.io/crates/actix-web-codegen)\n```\n\n----------------------------------------\n\nTITLE: Updating FromRequest Trait Implementation\nDESCRIPTION: Example showing removal of Config associated type from FromRequest trait implementation.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n  impl FromRequest for MyExtractor {\n-   type Config = ();\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating TestServer Import\nDESCRIPTION: Example showing how to update the import path for TestServer after moving to actix-test.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n- use use actix_web::test::start;\n+ use use actix_test::start;\n```\n\n----------------------------------------\n\nTITLE: Migrating Extractor Configuration in Actix-Web 1.0\nDESCRIPTION: Demonstrates how to migrate extractor configuration from the old approach to the new Data mechanism in Actix-Web 1.0 for both setting and retrieving configuration.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\nstruct ExtractorConfig {\n   config: String,\n}\n\nimpl FromRequest for YourExtractor {\n   type Config = ExtractorConfig;\n   type Result = Result<YourExtractor, Error>;\n\n   fn from_request(req: &HttpRequest, cfg: &Self::Config) -> Self::Result {\n       println!(\"use the config: {:?}\", cfg.config);\n       ...\n   }\n}\n\nApp::new().resource(\"/route_with_config\", |r| {\n   r.post().with_config(handler_fn, |cfg| {\n       cfg.0.config = \"test\".to_string();\n   })\n})\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Default)]\nstruct ExtractorConfig {\n   config: String,\n}\n\nimpl FromRequest for YourExtractor {\n   type Error = Error;\n   type Future = Result<Self, Self::Error>;\n   type Config = ExtractorConfig;\n\n   fn from_request(req: &HttpRequest, payload: &mut Payload) -> Self::Future {\n       let cfg = req.app_data::<ExtractorConfig>();\n       println!(\"config data?: {:?}\", cfg.unwrap().role);\n       ...\n   }\n}\n\nApp::new().service(\n   resource(\"/route_with_config\")\n       .data(ExtractorConfig {\n           config: \"test\".to_string(),\n       })\n       .route(post().to(handler_fn)),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Path Extractor Usage\nDESCRIPTION: Example showing new way to access path parameters using into_inner() method.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n- async fn handler(web::Path((foo, bar)): web::Path<(String, String)>) {\n+ async fn handler(params: web::Path<(String, String)>) {\n+   let (foo, bar) = params.into_inner();\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Arguments with Extractors in Actix-Web 1.0\nDESCRIPTION: Shows how to update handler functions to use multiple argument extractors instead of tuple extractors in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn welcome((body, req): (Bytes, HttpRequest)) -> ... {\n  ...\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn welcome(body: Bytes, req: HttpRequest) -> ... {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handler Response in Actix Web v4\nDESCRIPTION: This snippet demonstrates how to modify an error handler that only updates the response headers. It shows the changes needed to use the new EitherBody type in ErrorHandlerResponse.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n  fn add_error_header<B>(mut res: ServiceResponse<B>) -> Result<ErrorHandlerResponse<B>, Error> {\n      res.response_mut().headers_mut().insert(\n          header::CONTENT_TYPE,\n          header::HeaderValue::from_static(\"Error\"),\n      );\n-     Ok(ErrorHandlerResponse::Response(res))\n+     Ok(ErrorHandlerResponse::Response(res.map_into_left_body()))\n  }\n```\n\n----------------------------------------\n\nTITLE: Migrating Identity Middleware from actix-web to actix-identity\nDESCRIPTION: This code shows how to migrate from using Identity middleware directly from actix-web to the new dedicated actix-identity crate in Actix-Web 1.0.1.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::middleware::identity::{Identity, CookieIdentityPolicy, IdentityService};\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_identity::{Identity, CookieIdentityPolicy, IdentityService};\n```\n\n----------------------------------------\n\nTITLE: HeaderMap FromIterator Implementation\nDESCRIPTION: Implementation of FromIterator trait for HeaderMap to construct it from an iterator of header name-value pairs in version 3.9.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-http/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl FromIterator<(HeaderName, HeaderValue)> for HeaderMap\n```\n\n----------------------------------------\n\nTITLE: Accessing actix-web-codegen Documentation\nDESCRIPTION: Link to the documentation for the actix-web-codegen crate on docs.rs. The badge shows the current version of the documentation.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Documentation](https://docs.rs/actix-web-codegen/badge.svg?version=4.3.0)](https://docs.rs/actix-web-codegen/4.3.0)\n```\n\n----------------------------------------\n\nTITLE: Package Metadata Display in Markdown\nDESCRIPTION: Markdown code displaying various badges and metadata information for the actix-multipart-derive crate, including version, documentation links, Rust version requirements, license information, and community links.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart-derive/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `actix-multipart-derive`\n\n> The derive macro implementation for actix-multipart-derive.\n\n<!-- prettier-ignore-start -->\n\n[![crates.io](https://img.shields.io/crates/v/actix-multipart-derive?label=latest)](https://crates.io/crates/actix-multipart-derive)\n[![Documentation](https://docs.rs/actix-multipart-derive/badge.svg?version=0.7.0)](https://docs.rs/actix-multipart-derive/0.7.0)\n![Version](https://img.shields.io/badge/rustc-1.72+-ab6000.svg)\n![MIT or Apache 2.0 licensed](https://img.shields.io/crates/l/actix-multipart-derive.svg)\n<br />\n[![dependency status](https://deps.rs/crate/actix-multipart-derive/0.7.0/status.svg)](https://deps.rs/crate/actix-multipart-derive/0.7.0)\n[![Download](https://img.shields.io/crates/d/actix-multipart-derive.svg)](https://crates.io/crates/actix-multipart-derive)\n[![Chat on Discord](https://img.shields.io/discord/771444961383153695?label=chat&logo=discord)](https://discord.gg/NWpN5mmg3x)\n\n<!-- prettier-ignore-end -->\n```\n\n----------------------------------------\n\nTITLE: Updating NormalizePath Middleware Usage\nDESCRIPTION: Example showing how to update route definitions and NormalizePath middleware configuration to match v4 behavior.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n- #[get(\"/test/\")]\n+ #[get(\"/test\")]\n  async fn handler() {\n\n  App::new()\n-   .wrap(NormalizePath::default())\n+   .wrap(NormalizePath::trim())\n```\n\n----------------------------------------\n\nTITLE: Actix-Web Changelog Entry - Version 0.6.0\nDESCRIPTION: Changelog entry documenting the addition of MultipartForm derive macro feature.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart-derive/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.0\n\n- Add `MultipartForm` derive macro.\n```\n\n----------------------------------------\n\nTITLE: Migrating Handler Registration Methods in Actix-Web 1.0\nDESCRIPTION: Shows how to update from .with() and .with_async() registration methods to the new .to() and .to_async() methods in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().resource(\"/welcome\", |r| r.with(welcome))\n```\n\nLANGUAGE: rust\nCODE:\n```\nApp.new().service(web::resource(\"/welcome\").to(welcome))\n```\n\n----------------------------------------\n\nTITLE: Displaying Download Statistics\nDESCRIPTION: Badge showing the number of downloads for the actix-web-codegen crate from crates.io.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[![Download](https://img.shields.io/crates/d/actix-web-codegen.svg)](https://crates.io/crates/actix-web-codegen)\n```\n\n----------------------------------------\n\nTITLE: Handling Request Payload in Actix-web 0.7 (Rust)\nDESCRIPTION: Shows how to read request payload in actix-web 0.7 using the new .payload() method instead of implementing Stream for HttpRequest.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-0.x.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn index(req: HttpRequest) -> impl Responder {\n      req\n        .payload()  // <- get request payload stream\n        .from_err()\n        .fold(...)\n        ....\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Version Compatibility\nDESCRIPTION: Badge indicating the minimum required Rust compiler version for the actix-web-codegen crate.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Version](https://img.shields.io/badge/rustc-1.72+-ab6000.svg)\n```\n\n----------------------------------------\n\nTITLE: Using Tuple of Extractors in Actix-web 0.7 (Rust)\nDESCRIPTION: Demonstrates how to use a tuple of extractors in route handlers for actix-web 0.7, replacing the deprecated Route::with2() and Route::with3() methods.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-0.x.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn index((query, json): (Query<..>, Json<MyStruct>)) -> impl Responder {}\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Status\nDESCRIPTION: Badge and link to check the current dependency status of the actix-web-codegen crate.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![dependency status](https://deps.rs/crate/actix-web-codegen/4.3.0/status.svg)](https://deps.rs/crate/actix-web-codegen/4.3.0)\n```\n\n----------------------------------------\n\nTITLE: Migrating Cors Middleware from actix-web to actix-cors\nDESCRIPTION: This code demonstrates how to migrate from using Cors middleware directly from actix-web to the new dedicated actix-cors crate in Actix-Web 1.0.1.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::middleware::cors::Cors;\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_cors::Cors;\n```\n\n----------------------------------------\n\nTITLE: Removing AsyncResponder in Actix-Web 1.0\nDESCRIPTION: Shows how to remove AsyncResponder and .responder() method, using impl Future return types directly in Actix-Web 1.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-1.0.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse actix_web::AsyncResponder;\n\n  fn endpoint_handler(...) -> impl Future<Item=HttpResponse, Error=Error>{\n\t...\n      .responder()\n}\n```\n\n----------------------------------------\n\nTITLE: Local Address Binding Configuration\nDESCRIPTION: Binding client to a specific local IP address using ClientBuilder::local_address method.\nSOURCE: https://github.com/actix/actix-web/blob/master/awc/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nClientBuilder::local_address\n```\n\n----------------------------------------\n\nTITLE: Client Response Timeout Configuration\nDESCRIPTION: Setting timeout for collecting response body using ClientResponse::timeout method.\nSOURCE: https://github.com/actix/actix-web/blob/master/awc/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nClientResponse::timeout\n```\n\n----------------------------------------\n\nTITLE: Header Manipulation Methods\nDESCRIPTION: Methods for inserting and appending typed headers to client requests.\nSOURCE: https://github.com/actix/actix-web/blob/master/awc/CHANGES.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nClientRequest::insert_header\nClientRequest::append_header\n```\n\n----------------------------------------\n\nTITLE: Bytes and Vec<u8> to Payload Conversion\nDESCRIPTION: Implementation of From trait for converting Bytes and Vec<u8> into Payload type in version 3.10.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-http/CHANGES.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl From<Bytes> for Payload\nimpl From<Vec<u8>> for Payload\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBody for Cow Types\nDESCRIPTION: Implementation of MessageBody trait for Cow<'static, str> and Cow<'static, [u8]> types in version 3.3.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-http/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl MessageBody for Cow<'static, str>\nimpl MessageBody for Cow<'static, [u8]>\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageBody for Reference Types\nDESCRIPTION: Implementation of MessageBody trait for &mut B where B: MessageBody + Unpin and Pin<B> where B::Target: MessageBody in version 3.3.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-http/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl<B> MessageBody for &mut B where B: MessageBody + Unpin\nimpl<B> MessageBody for Pin<B> where B::Target: MessageBody\n```\n\n----------------------------------------\n\nTITLE: Router Path Pattern Example\nDESCRIPTION: Example of using path patterns in Actix Router, showing the \"/path/{tail}*\" syntax for remainder matching.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-router/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\"/path/{tail}\\*\"\n```\n\n----------------------------------------\n\nTITLE: Router Resource Path Pattern Example\nDESCRIPTION: Example of path pattern syntax used in ResourceDef and Router implementations.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-router/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nresource_path_from_iter(\"/path/{param}/nested\")\n```\n\n----------------------------------------\n\nTITLE: Compiler Error Example for HttpResponse in Actix Web V4\nDESCRIPTION: Shows an example of a compiler error that occurs when attempting to use the old synchronous HttpResponse style that was removed in Actix Web V4.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nweb::to(|| HttpResponse::Ok().finish())\n^^^^^^^ the trait `Handler<_>` is not implemented for `[closure@...]`\n```\n\n----------------------------------------\n\nTITLE: Updating Route Definition for Spaces in Actix-web 0.7.15 (Rust)\nDESCRIPTION: Demonstrates how to update route definitions in actix-web 0.7.15 to handle spaces in URLs. The new version requires using '%20' instead of spaces in route paths.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-0.x.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n      let app = App::new().resource(\"/my%20index\", |r| {\n          r.method(http::Method::GET)\n                .with(index);\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Feature Flag: rust-tls to rustls in Actix-Web 2.0.0\nDESCRIPTION: Shows how to update the feature flag reference in Cargo.toml from 'rust-tls' to 'rustls'. This change is required when migrating to Actix-Web 2.0.0.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-2.0.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nactix-web = { version = \"2.0.0\", features = [\"rust-tls\"] }\n```\n\nLANGUAGE: rust\nCODE:\n```\nactix-web = { version = \"2.0.0\", features = [\"rustls\"] }\n```\n\n----------------------------------------\n\nTITLE: Displaying License Information\nDESCRIPTION: Badge showing the license type for the actix-web-codegen crate.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![License](https://img.shields.io/crates/l/actix-web-codegen.svg)\n```\n\n----------------------------------------\n\nTITLE: Joining Discord Community\nDESCRIPTION: Badge and link to join the Discord community for Actix Web discussions and support.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web-codegen/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[![Chat on Discord](https://img.shields.io/discord/771444961383153695?label=chat&logo=discord)](https://discord.gg/NWpN5mmg3x)\n```\n\n----------------------------------------\n\nTITLE: Finding Tokio Dependencies Using Cargo\nDESCRIPTION: Commands to identify all crates in your dependency tree that depend on Tokio and their versions.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-web/MIGRATION-4.0.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Find all crates in your dependency tree that depend on `tokio`\n# It also reports the different versions of `tokio` in your dependency tree.\ncargo tree -i tokio\n\n# if you depend on multiple versions of tokio, use this command to\n# list the dependencies relying on a specific version of tokio:\ncargo tree -i tokio:0.2.25\n```\n\n----------------------------------------\n\nTITLE: Rendering Dot Graphs to PNG using GraphViz in Shell\nDESCRIPTION: This shell command iterates through all .dot files in the docs/graphs directory and converts them to PNG format using the GraphViz 'dot' command. The output files are saved with the same name but with a .png extension.\nSOURCE: https://github.com/actix/actix-web/blob/master/docs/graphs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfor f in $(ls docs/graphs/*.dot | xargs); do dot $f -Tpng -o${f:r}.png; done\n```\n\n----------------------------------------\n\nTITLE: Actix-Web Changelog Entry - Version 0.7.0\nDESCRIPTION: Changelog entry documenting the increase of minimum supported Rust version to 1.72.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart-derive/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.0\n\n- Minimum supported Rust version (MSRV) is now 1.72.\n```\n\n----------------------------------------\n\nTITLE: Actix-Web Changelog Entry - Version 0.6.1\nDESCRIPTION: Changelog entry noting the syn dependency update and MSRV change to 1.68 due to time dependency.\nSOURCE: https://github.com/actix/actix-web/blob/master/actix-multipart-derive/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.1\n\n- Update `syn` dependency to `2`.\n- Minimum supported Rust version (MSRV) is now 1.68 due to transitive `time` dependency.\n```"
  }
]