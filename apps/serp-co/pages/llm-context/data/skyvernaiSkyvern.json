[
  {
    "owner": "skyvern-ai",
    "repo": "skyvern",
    "content": "TITLE: Configuring YAML Workflow for Invoice Download Automation\nDESCRIPTION: Comprehensive YAML configuration that defines a workflow for automated invoice downloading. Includes parameter definitions for credentials and SMTP settings, task blocks for login, order history retrieval, invoice downloading, and email distribution. Features error handling, data schemas, and navigation goals.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/creating-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Invoice Downloading Demo (Jun 13)\ndescription: >\n  Login to the website, download all the invoices after a date, email the\n  invoices\nworkflow_definition:\n  parameters:\n    - key: website_url\n      parameter_type: workflow\n      workflow_parameter_type: string\n    - key: credentials\n      parameter_type: bitwarden_login_credential\n      bitwarden_client_id_aws_secret_key: SECRET\n      bitwarden_client_secret_aws_secret_key: SECRET\n      bitwarden_master_password_aws_secret_key: SECRET\n      bitwarden_collection_id: SECRET\n      url_parameter_key: website_url\n    - key: invoice_retrieval_start_date\n      parameter_type: workflow\n      workflow_parameter_type: string\n    - key: smtp_host\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_HOST_AWS_SES\n    - key: smtp_port\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_PORT_AWS_SES\n    - key: smtp_username\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_USERNAME_SES\n    - key: smtp_password\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_PASSWORD_SES\n    - parameter_type: context\n      key: order_history_url\n      source_parameter_key: get_order_history_page_url_and_qualifying_order_ids_output\n    - parameter_type: context\n      key: order_ids\n      source_parameter_key: get_order_history_page_url_and_qualifying_order_ids_output\n    - parameter_type: context\n      key: order_id\n      source_parameter_key: order_ids\n  blocks:\n    - block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using the credentials given, and then navigate to the personal account page. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. Then, try to login and navigate to the personal account page. If you fail to login to find the login page or can't login after several trials, terminate. If you're on the personal account page, consider the goal is completed.\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n    - block_type: task\n      label: get_order_history_page_url_and_qualifying_order_ids\n      parameter_keys:\n        - invoice_retrieval_start_date\n      navigation_goal: Find the order history page. If there is no orders after given start date, terminate.\n      data_extraction_goal: >\n        You need to extract the order history page url by looking at the current\n        page you're on. You need to extract contact emails you see on the page. You also need to extract the order ids for orders that\n        happened on or after invoice_retrieval_start_date. Make sure to filter\n        only the orders that happened on or after invoice_retrieval_start_date. You need to compare each order's date with the invoice_download_start_date. You can only include an order in the output if the order's date is after or the same as the invoice_download_start_date.\n        While comparing dates, first compare year, then month, then day. invoice_retrieval_start_date\n        is in YYYY-MM-DD format. The dates on the websites may be in different formats, compare accordingly and compare year, date, and month.\n      error_code_mapping:\n        failed_to_find_order_history_page: return this error if you can't find the order history page on the website\n        no_orders_found_after_start_date: return this error if there are no orders after the specified invoice_download_start_date\n      data_schema:\n        type: object\n        properties:\n          order_history_url:\n            type: url\n            description: >\n              The exact URL of the order history page. Do not make any\n              assumptions. Return the URL that's passed along in this context.\n          contact_emails:\n            type: array\n            items:\n                type: string\n                description: Contact email for the ecommerce website you're on. If you can't find any return null\n          date_comparison_scratchpad:\n            type: string\n            description: >\n                You are supposed to filter the orders that happened on or after the invoice_download_start_date. Think through how you will approach this task step-by-step here. Consider these before starting the comparison:\n                - What format is the order date in? How can you parse it into a structured format?\n                - What is the correct way to compare two dates?\n                - How will you compare the order dates to the invoice_download_start_date? \n                \n                Write out your thought process before filling out the order_ids field below. Remember, the original date may be in any format, so parse it carefully! The invoice_download_start_date will be an exact date you can directly compare against in the format YYYY-MM-DD.\n          order_ids:\n            type: array\n            items:\n              type: object\n              properties:\n                order_date:\n                  type: iso-8601-date-string\n                order_id:\n                  type: string\n            description: >\n              Return a list of order id strings. Do not return order ids of\n              orders that happened before the specified\n              invoice_retrieval_start_date\n    - block_type: for_loop\n      label: iterate_over_order_ids\n      loop_over_parameter_key: order_ids\n      continue_on_failure: true\n      loop_blocks:\n        - block_type: task\n          label: download_invoice_for_order\n          complete_on_download: true\n          continue_on_failure: true\n          parameter_keys:\n            - order_id\n          url: order_history_url\n          navigation_goal: Download the invoice of the order with the given order ID. Make sure to download the invoice for the given order id. If the element tree doesn't have a matching order id, check the screenshots. Complete if you have successfully downloaded the invoice according to action history, if you were able to download it, you'll see download_triggered=True for the last step. If you don't see a way to download an invoice, navigate to the order page if possible. If there's no way to download an invoice terminate. If the text suggests printing, you can assume you can download it. Return click action with download=True if you want to trigger a download.\n          error_code_mapping:\n            not_possible_to_download_invoice: return this error if the website doesn't allow downloading/viewing invoices\n            cant_solve_captcha: return this error if captcha isn't solved after multiple retries\n    - block_type: upload_to_s3\n      label: upload_downloaded_files_to_s3\n      path: SKYVERN_DOWNLOAD_DIRECTORY\n    - block_type: send_email\n      label: send_email\n      smtp_host_secret_parameter_key: smtp_host\n      smtp_port_secret_parameter_key: smtp_port\n      smtp_username_secret_parameter_key: smtp_username\n      smtp_password_secret_parameter_key: smtp_password\n      sender: hello@skyvern.com\n      recipients:\n        - founders@skyvern.com\n      subject: Skyvern - Downloaded Invoices Demo\n      body: website_url\n      file_attachments:\n        - SKYVERN_DOWNLOAD_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Application Task with Skyvern API\nDESCRIPTION: This example demonstrates how to create a task in Skyvern to automate a job application process. The request includes the target URL, navigation goal, data extraction goal, proxy settings, and applicant information payload. This is a POST request to the Skyvern Tasks API endpoint.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/api-spec.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST https://api.skyvern.com/api/v1/tasks/ \n\n{\n    \"url\": \"https://jobs.lever.co/leverdemo-8/45d39614-464a-4b62-a5cd-8683ce4fb80a/apply\",\n    \"navigation_goal\": \"Apply for a job\",\n    \"data_extraction_goal\": \"Was the job application successful?\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"navigation_payload\": {\n        \"name\": \"Chris P. Bacon\",\n        \"email\": \"chris@pbacon.com\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TaskBlock for Website Navigation in Skyvern\nDESCRIPTION: The TaskBlock is used to navigate websites, perform actions, and extract information. It requires a URL as a starting point and a navigation goal to define the intended actions. Optional parameters include data extraction goals, schema specifications, and retry configurations.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using\n        the credentials given. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. If you fail to login to find the login page or can't login after several trials, terminate. If login is\n        completed, you're successful. \n      data_extraction_goal: >\n        Extract anything for the sake of this demo\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n```\n\n----------------------------------------\n\nTITLE: Initiating Task API Request Example\nDESCRIPTION: Example POST request to initiate a Skyvern task for finding a route between Chicago and Los Angeles using Google Maps\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/api-v2-spec.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST https://api.skyvern.com/api/v2/tasks/ \n\n{\n    \"user_prompt\": \"Find a route between Chicago to Los Angeles on google maps, then print the route details.\",\n    \"proxy_location\": \"RESIDENTIAL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Run Response Structure - JSON\nDESCRIPTION: Detailed JSON structure showing the complete response format for a workflow run, including status, timestamps, parameters, and task outputs.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/running-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workflow_id\": \"wpid_123456\",\n    \"workflow_run_id\": \"wr_123456\",\n    \"status\": \"completed\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": \"127.0.0.1:8000/api/v1/webhook\",\n    \"created_at\": \"2024-05-16T08:35:24.920793\",\n    \"modified_at\": \"2024-05-16T08:42:32.568908\",\n    \"parameters\": {\n        \"website_url\": \"YOUR_WEBSITE_URL\",\n        \"invoice_retrieval_start_date\": \"2024-04-15\"\n    },\n    \"screenshot_urls\": [\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\"\n    ],\n    \"recording_url\": \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n    \"outputs\": {\n        \"login_output\": {\n            \"task_id\": \"tsk_1234\",\n            \"status\": \"completed\",\n            \"extracted_information\": null,\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"get_order_history_page_url_and_qualifying_order_ids_output\": {\n            \"task_id\": \"tsk_258409009008559418\",\n            \"status\": \"completed\",\n            \"extracted_information\": {\n              \"...\": \"...\"\n            },\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"iterate_over_order_ids_output\": [\n            [\n                {\n                    \"...\": \"...\"\n                }\n            ]\n        ],\n        \"download_invoice_for_order_output\": {\n            \"task_id\": \"tsk_258409361195877732\",\n            \"status\": \"completed\",\n            \"extracted_information\": null,\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"upload_downloaded_files_to_s3_output\": [\n            \"s3://skyvern-uploads/...\"\n        ],\n        \"send_email_output\": {\n            \"success\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TaskBlock in Skyvern\nDESCRIPTION: Example configuration of a TaskBlock for handling website login automation. Includes navigation goals, data extraction, and error handling configurations.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using\n        the credentials given. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. If you fail to login to find the login page or can't login after several trials, terminate. If login is\n        completed, you're successful. \n      data_extraction_goal: >\n        Extract anything for the sake of this demo\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n```\n\n----------------------------------------\n\nTITLE: Implementing ForLoopBlock for Iterative Tasks in Skyvern\nDESCRIPTION: The ForLoopBlock allows iteration over data such as CSV entries or outputs from previous blocks. It requires a loop value parameter and nested blocks that will execute for each iteration. This example shows a loop that downloads invoices for multiple order IDs.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: for_loop\n      label: iterate_over_order_ids\n      loop_over_parameter_key: order_ids\n      continue_on_failure: true\n      loop_blocks:\n        - block_type: task\n          label: download_invoice_for_order\n          complete_on_download: true\n          continue_on_failure: true\n          parameter_keys:\n            - order_id\n          url: order_history_url\n          navigation_goal: >\n            Download the invoice of the order with the given order ID. \n            Make sure to download the invoice for the given order id. \n            If the element tree doesn't have a matching order id, check the screenshots. \n            Complete if you have successfully downloaded the invoice according to action history, if you were able to download it, you'll see download_triggered=True for the last step. \n            If you don't see a way to download an invoice, navigate to the order page if possible. \n            If there's no way to download an invoice terminate. \n            If the text suggests printing, you can assume you can download it. \n            Return click action with download=True if you want to trigger a download.\n          error_code_mapping:\n            not_possible_to_download_invoice: return this error if the website doesn't allow downloading/viewing invoices\n            cant_solve_captcha: return this error if captcha isn't solved after multiple retries\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern Webhook Signatures in Python\nDESCRIPTION: This code snippet demonstrates how to validate Skyvern webhook requests in Python using HMAC-SHA256 signature verification. It compares the signature from the request header against a computed signature using your Skyvern API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/webhooks-faq.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\nfrom fastapi import Request\n\ndef validate_skyvern_request_headers(request: Request) -> bool:\n    header_skyvern_signature = request.headers[\"x-skyvern-signature\"]\n    payload = request.body() # this is a bytes\n    hash_obj = hmac.new(SKYVERN_API_KEY.encode(\"utf-8\"), msg=payload, digestmod=hashlib.sha256)\n    client_generated_signature = hash_obj.hexdigest()\n    return header_skyvern_signature == client_generated_signature\n```\n\n----------------------------------------\n\nTITLE: Configuring Invoice Download Workflow in YAML\nDESCRIPTION: Defines a workflow for automatically logging into a website, downloading invoices after a specified date, and emailing them. Includes parameter definitions for credentials, dates, SMTP settings, and detailed task blocks for login, order history extraction, invoice downloading, and email sending.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/creating-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Invoice Downloading Demo (Jun 13)\ndescription: >\n  Login to the website, download all the invoices after a date, email the\n  invoices\nworkflow_definition:\n  parameters:\n    - key: website_url\n      parameter_type: workflow\n      workflow_parameter_type: string\n    - key: credentials\n      parameter_type: bitwarden_login_credential\n      bitwarden_client_id_aws_secret_key: SECRET\n      bitwarden_client_secret_aws_secret_key: SECRET\n      bitwarden_master_password_aws_secret_key: SECRET\n      bitwarden_collection_id: SECRET\n      url_parameter_key: website_url\n    - key: invoice_retrieval_start_date\n      parameter_type: workflow\n      workflow_parameter_type: string\n    - key: smtp_host\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_HOST_AWS_SES\n    - key: smtp_port\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_PORT_AWS_SES\n    - key: smtp_username\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_USERNAME_SES\n    - key: smtp_password\n      parameter_type: aws_secret\n      aws_key: SKYVERN_SMTP_PASSWORD_SES\n    - parameter_type: context\n      key: order_history_url\n      source_parameter_key: get_order_history_page_url_and_qualifying_order_ids_output\n    - parameter_type: context\n      key: order_ids\n      source_parameter_key: get_order_history_page_url_and_qualifying_order_ids_output\n    - parameter_type: context\n      key: order_id\n      source_parameter_key: order_ids\n  blocks:\n    - block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using the credentials given, and then navigate to the personal account page. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. Then, try to login and navigate to the personal account page. If you fail to login to find the login page or can't login after several trials, terminate. If you're on the personal account page, consider the goal is completed.\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n    - block_type: task\n      label: get_order_history_page_url_and_qualifying_order_ids\n      parameter_keys:\n        - invoice_retrieval_start_date\n      navigation_goal: Find the order history page. If there is no orders after given start date, terminate.\n      data_extraction_goal: >\n        You need to extract the order history page url by looking at the current\n        page you're on. You need to extract contact emails you see on the page. You also need to extract the order ids for orders that\n        happened on or after invoice_retrieval_start_date. Make sure to filter\n        only the orders that happened on or after invoice_retrieval_start_date. You need to compare each order's date with the invoice_download_start_date. You can only include an order in the output if the order's date is after or the same as the invoice_download_start_date.\n        While comparing dates, first compare year, then month, then day. invoice_retrieval_start_date\n        is in YYYY-MM-DD format. The dates on the websites may be in different formats, compare accordingly and compare year, date, and month.\n      error_code_mapping:\n        failed_to_find_order_history_page: return this error if you can't find the order history page on the website\n        no_orders_found_after_start_date: return this error if there are no orders after the specified invoice_download_start_date\n      data_schema:\n        type: object\n        properties:\n          order_history_url:\n            type: url\n            description: >\n              The exact URL of the order history page. Do not make any\n              assumptions. Return the URL that's passed along in this context.\n          contact_emails:\n            type: array\n            items:\n                type: string\n                description: Contact email for the ecommerce website you're on. If you can't find any return null\n          date_comparison_scratchpad:\n            type: string\n            description: >\n                You are supposed to filter the orders that happened on or after the invoice_download_start_date. Think through how you will approach this task step-by-step here. Consider these before starting the comparison:\n                - What format is the order date in? How can you parse it into a structured format?\n                - What is the correct way to compare two dates?\n                - How will you compare the order dates to the invoice_download_start_date? \n                \n                Write out your thought process before filling out the order_ids field below. Remember, the original date may be in any format, so parse it carefully! The invoice_download_start_date will be an exact date you can directly compare against in the format YYYY-MM-DD.\n          order_ids:\n            type: array\n            items:\n              type: object\n              properties:\n                order_date:\n                  type: iso-8601-date-string\n                order_id:\n                  type: string\n            description: >\n              Return a list of order id strings. Do not return order ids of\n              orders that happened before the specified\n              invoice_retrieval_start_date\n    - block_type: for_loop\n      label: iterate_over_order_ids\n      loop_over_parameter_key: order_ids\n      continue_on_failure: true\n      loop_blocks:\n        - block_type: task\n          label: download_invoice_for_order\n          complete_on_download: true\n          continue_on_failure: true\n          parameter_keys:\n            - order_id\n          url: order_history_url\n          navigation_goal: Download the invoice of the order with the given order ID. Make sure to download the invoice for the given order id. If the element tree doesn't have a matching order id, check the screenshots. Complete if you have successfully downloaded the invoice according to action history, if you were able to download it, you'll see download_triggered=True for the last step. If you don't see a way to download an invoice, navigate to the order page if possible. If there's no way to download an invoice terminate. If the text suggests printing, you can assume you can download it. Return click action with download=True if you want to trigger a download.\n          error_code_mapping:\n            not_possible_to_download_invoice: return this error if the website doesn't allow downloading/viewing invoices\n            cant_solve_captcha: return this error if captcha isn't solved after multiple retries\n    - block_type: upload_to_s3\n      label: upload_downloaded_files_to_s3\n      path: SKYVERN_DOWNLOAD_DIRECTORY\n    - block_type: send_email\n      label: send_email\n      smtp_host_secret_parameter_key: smtp_host\n      smtp_port_secret_parameter_key: smtp_port\n      smtp_username_secret_parameter_key: smtp_username\n      smtp_password_secret_parameter_key: smtp_password\n      sender: hello@skyvern.com\n      recipients:\n        - founders@skyvern.com\n      subject: Skyvern - Downloaded Invoices Demo\n      body: website_url\n      file_attachments:\n        - SKYVERN_DOWNLOAD_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: SendEmailBlock Configuration in Skyvern\nDESCRIPTION: YAML configuration for setting up email sending functionality with SMTP settings, recipient lists, and file attachment options.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: send_email\n  label: send_email\n  smtp_host_secret_parameter_key: smtp_host\n  smtp_port_secret_parameter_key: smtp_port\n  smtp_username_secret_parameter_key: smtp_username\n  smtp_password_secret_parameter_key: smtp_password\n  sender: hello@skyvern.com\n  recipients:\n    - founders@skyvern.com\n  subject: Skyvern - Downloaded Invoices Demo\n  body: website_url\n  file_attachments:\n    - SKYVERN_DOWNLOAD_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern Webhook Requests in Python\nDESCRIPTION: This Python function validates the authenticity of incoming Skyvern webhook requests using HMAC-SHA256. It compares the signature in the request header with a locally generated signature using the Skyvern API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/webhooks-faq.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\nfrom fastapi import Request\n\ndef validate_skyvern_request_headers(request: Request) -> bool:\n    header_skyvern_signature = request.headers[\"x-skyvern-signature\"]\n    payload = request.body() # this is a bytes\n    hash_obj = hmac.new(SKYVERN_API_KEY.encode(\"utf-8\"), msg=payload, digestmod=hashlib.sha256)\n    client_generated_signature = hash_obj.hexdigest()\n    return header_skyvern_signature == client_generated_signature\n```\n\n----------------------------------------\n\nTITLE: Configuring SendEmailBlock in Skyvern\nDESCRIPTION: YAML configuration for setting up email sending functionality with SMTP settings, recipients, subject, and file attachments.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: send_email\n  label: send_email\n  smtp_host_secret_parameter_key: smtp_host\n  smtp_port_secret_parameter_key: smtp_port\n  smtp_username_secret_parameter_key: smtp_username\n  smtp_password_secret_parameter_key: smtp_password\n  sender: hello@skyvern.com\n  recipients:\n    - founders@skyvern.com\n  subject: Skyvern - Downloaded Invoices Demo\n  body: website_url\n  file_attachments:\n    - SKYVERN_DOWNLOAD_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Executing Invoice Retrieval Workflow via Skyvern API (Bash)\nDESCRIPTION: This curl command demonstrates how to trigger the invoice retrieval workflow using the Skyvern API. It includes the necessary headers and JSON payload with required parameters.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/running-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.skyvern.com/api/v1/workflows/wpid_123456/run' \\\n--header 'x-api-key: <USE_YOUR_API_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"data\": {\n        \"website_url\": \"your_website\",\n        \"invoice_retrieval_start_date\": \"2024-04-15\"\n    },\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": \"<your-endpoint>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern Webhook Requests in JavaScript\nDESCRIPTION: This JavaScript function validates the authenticity of incoming Skyvern webhook requests using HMAC-SHA256. It compares the signature in the request header with a locally generated signature using the Skyvern API key stored in an environment variable.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/webhooks-faq.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\n\nfunction validateSkyvernRequestHeaders(req) {\n    const headerSkyvernSignature = req.headers['x-skyvern-signature'];\n    const payload = req.body; // assuming req.body is a Buffer or string\n    const hash = crypto.createHmac('sha256', process.env.SKYVERN_API_KEY)\n                        .update(payload)\n                        .digest('hex');\n    return headerSkyvernSignature === hash;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ForLoopBlock in Skyvern\nDESCRIPTION: Configuration example of a ForLoopBlock for iterating over order IDs and downloading invoices, with nested TaskBlock implementation and error handling.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: for_loop\n      label: iterate_over_order_ids\n      loop_over_parameter_key: order_ids\n      continue_on_failure: true\n      loop_blocks:\n        - block_type: task\n          label: download_invoice_for_order\n          complete_on_download: true\n          continue_on_failure: true\n          parameter_keys:\n            - order_id\n          url: order_history_url\n          navigation_goal: >\n            Download the invoice of the order with the given order ID. \n            Make sure to download the invoice for the given order id. \n            If the element tree doesn't have a matching order id, check the screenshots. \n            Complete if you have successfully downloaded the invoice according to action history, if you were able to download it, you'll see download_triggered=True for the last step. \n            If you don't see a way to download an invoice, navigate to the order page if possible. \n            If there's no way to download an invoice terminate. \n            If the text suggests printing, you can assume you can download it. \n            Return click action with download=True if you want to trigger a download.\n          error_code_mapping:\n            not_possible_to_download_invoice: return this error if the website doesn't allow downloading/viewing invoices\n            cant_solve_captcha: return this error if captcha isn't solved after multiple retries\n```\n\n----------------------------------------\n\nTITLE: Using TextPromptBlock for LLM Integration in Skyvern\nDESCRIPTION: The TextPromptBlock enables custom OpenAI queries within a workflow. This example generates an improved product title by combining titles from Alibaba and Amazon. The block requires a prompt and can optionally use a JSON schema to structure the output.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: text_prompt\n  label: generate_new_title\n  parameter_keys:\n    - alibaba_title\n    - amazon_title\n  llm_key: OPENAI_GPT4O\n  prompt: >\n    You're given two e-commerce product titles. Use both and generate a\n    better one.\n\n      Title 1: {{ alibaba_title }}\n      Title 2: {{ amazon_title }}\n  output_parameter_key: new_title\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern TOTP Request Signatures in Python\nDESCRIPTION: This Python function validates that a TOTP verification request comes from Skyvern by checking the request signature. It uses HMAC with SHA-256 to verify the x-skyvern-signature header against the request payload.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/advanced-features.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef validate_skyvern_request_headers(request: Request) -> bool:\n    header_skyvern_signature = request.headers[\"x-skyvern-signature\"]\n    payload = request.body() # this is a bytes\n    hash_obj = hmac.new(SKYVERN_API_KEY.encode(\"utf-8\"), msg=payload, digestmod=hashlib.sha256)\n    client_generated_signature = hash_obj.hexdigest()\n    return header_skyvern_signature == client_generated_signature\n```\n\n----------------------------------------\n\nTITLE: Dispatching Asynchronous Task via API and Monitoring Completion\nDESCRIPTION: Advanced usage example showing how to dispatch an asynchronous task via the Skyvern API and monitor it to completion. This approach uses both dispatch_task and get_task tools along with a sleep tool to poll at intervals.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.core.tools import FunctionTool\nfrom skyvern_llamaindex.client import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nasync def sleep(seconds: int) -> str:\n    await asyncio.sleep(seconds)\n    return f\"Slept for {seconds} seconds\"\n\nsleep_tool = FunctionTool.from_defaults(\n    async_fn=sleep,\n    description=\"Sleep for a given number of seconds\",\n    name=\"sleep\",\n)\n\nskyvern_tool = SkyvernTool(api_key=\"<your_organization_api_key>\")\n# or you can load the api_key from SKYVERN_API_KEY in .env\n```\n\n----------------------------------------\n\nTITLE: Configuring FileUploadBlock for S3 Integration in Skyvern\nDESCRIPTION: The FileUploadBlock is used to persist files in external storage systems. This example shows how to configure an AWS S3 upload with the required credentials, bucket name, and region. Currently, S3 is the only supported integration.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: file_upload\n  label: upload_downloaded_files_to_s3\n  storage_type: s3\n  aws_access_key_id: YOUR_AWS_ACCESS_KEY_ID\n  aws_secret_access_key: YOUR_AWS_SECRET_ACCESS_KEY\n  s3_bucket: YOUR_S3_BUCKET\n  region_name: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Overriding Maximum Steps for Skyvern Tasks with API Headers\nDESCRIPTION: This snippet demonstrates how to use the x-max-steps-override header to control how many steps a task will execute, overriding the default max_steps parameter set in the task.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/advanced-features.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST https://api.skyvern.com/api/v1/tasks \n\nHeaders:\n{\n    \"x-api-key\": \"YOUR_API_KEY\",\n    \"x-max-steps-override\": 10\n}\n\nBody:\n.. usual task body ..\n```\n\n----------------------------------------\n\nTITLE: Workflow Outputs Structure - JSON\nDESCRIPTION: Example showing the structure of workflow outputs including task statuses, extracted information, and operation results for each building block.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/running-workflows.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"login_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": null,\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"get_order_history_page_url_and_qualifying_order_ids_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": {\n            \"...\": \"...\"\n        },\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"iterate_over_order_ids_output\": [\n        \"...\"\n    ],\n    \"download_invoice_for_order_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": null,\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"upload_downloaded_files_to_s3_output\": [\n        \"s3://skyvern-uploads/...\",\n        \"s3://skyvern-uploads/...\"\n    ],\n    \"send_email_output\": {\n        \"success\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FileUploadBlock Configuration in Skyvern\nDESCRIPTION: Configuration example for FileUploadBlock to handle file uploads to AWS S3.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: file_upload\n  label: upload_downloaded_files_to_s3\n  storage_type: s3\n  aws_access_key_id: YOUR_AWS_ACCESS_KEY_ID\n  aws_secret_access_key: YOUR_AWS_SECRET_ACCESS_KEY\n  s3_bucket: YOUR_S3_BUCKET\n  region_name: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Step Artifacts via Skyvern API\nDESCRIPTION: HTTP GET request to retrieve artifacts for a specific step in a task. This endpoint allows access to artifacts like screenshots, HTML content, and other data collected during task execution.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/visualizing-results.mdx#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.skyvern.com/api/v1/tasks/{task_id}/steps/{step_id}/artifacts\n```\n\n----------------------------------------\n\nTITLE: Workflows API Response Schema\nDESCRIPTION: JSON schema showing the structure of the workflow response object, including workflow details and definition.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/getting-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"workflow_id\": \"string\",\n    \"organization_id\": \"string\",\n    \"title\": \"string\",\n    \"workflow_permanent_id\": \"string\",\n    \"version\": \"integer\",\n    \"is_saved_task\": \"boolean\",\n    \"description\": \"string\",\n    \"proxy_location\": \"string | null\",\n    \"webhook_callback_url\": \"string | null\",\n    \"totp_verification_url\": \"string | null\",\n    \"workflow_definition\": {\n      \"parameters\": [\n        {\n          \"parameter_type\": \"string\",\n          \"key\": \"string\",\n          \"description\": \"string | null\"\n        }\n      ],\n      \"blocks\": [\n        {\n          \"label\": \"string\",\n          \"block_type\": \"string\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Task via Skyvern API with LlamaIndex\nDESCRIPTION: Code showing how to run an asynchronous Skyvern task via API. This method doesn't require keeping the agent running as the task runs in the Skyvern cloud service. Requires a Skyvern organization API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.client import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nskyvern_tool = SkyvernTool(api_key=\"<your_organization_api_key>\")\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# skyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.dispatch_task()],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.'\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Example Workflow Response in JSON\nDESCRIPTION: This JSON example illustrates a typical response from the GET /api/v1/workflows endpoint. It shows a single workflow object with various fields populated, including parameters and blocks in the workflow definition.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/getting-workflows.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"workflow_id\": \"w_297763518988864302\",\n    \"organization_id\": \"o_197675547813248794\",\n    \"title\": \"Test Workday Application\",\n    \"workflow_permanent_id\": \"wpid_297751296240552836\",\n    \"version\": 4,\n    \"is_saved_task\": false,\n    \"description\": \"Login Workday and submit the application\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": null,\n    \"totp_verification_url\": null,\n    \"workflow_definition\": {\n      \"parameters\": [\n        {\n          \"parameter_type\": \"output\",\n          \"key\": \"login_output\",\n          \"description\": \"Output parameter for block login\"\n        },\n        {\n          \"parameter_type\": \"workflow\",\n          \"key\": \"website_url\",\n          \"description\": null\n        }\n      ],\n      \"blocks\": [\n        {\n          \"label\": \"login\",\n          \"block_type\": \"task\"\n        },\n        {\n          \"label\": \"submit\",\n          \"block_type\": \"task\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Step Artifacts via Skyvern API\nDESCRIPTION: An HTTP GET request to retrieve artifacts (screenshots, logs, etc.) for a specific step within a task.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/visualizing-results.mdx#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.skyvern.com/api/v1/tasks/{task_id}/steps/{step_id}/artifacts\n```\n\n----------------------------------------\n\nTITLE: Advanced CodeBlock with Browser Control in Skyvern\nDESCRIPTION: CodeBlock example demonstrating browser control capabilities using the skyvern_page object.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n- block_type: code\n  label: get_tab_details\n  code: |\n    print(\"Getting tab details\")\n    result = {\n        \"url\": skyvern_page.url,\n        \"title\": await skyvern_page.title()\n    }\n    print(\"Got details:\", result)\n    print(\"Now I want to see a cat\")\n    await skyvern_page.goto(\"https://cataas.com/cat\")\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Workflow Run Retrieval (JSON)\nDESCRIPTION: This JSON structure represents the response from the GET /workflows/runs/{workflow_run_id} endpoint. It includes details about the workflow run, including status, parameters, and outputs from various stages of the workflow.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/running-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"workflow_id\": \"wpid_123456\",\n    \"workflow_run_id\": \"wr_123456\",\n    \"status\": \"completed\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": \"127.0.0.1:8000/api/v1/webhook\",\n    \"created_at\": \"2024-05-16T08:35:24.920793\",\n    \"modified_at\": \"2024-05-16T08:42:32.568908\",\n    \"parameters\": {\n        \"website_url\": \"YOUR_WEBSITE_URL\",\n        \"invoice_retrieval_start_date\": \"2024-04-15\"\n    },\n    \"screenshot_urls\": [\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n        \"https://skyvern-artifacts.s3.amazonaws.com/...\"\n    ],\n    \"recording_url\": \"https://skyvern-artifacts.s3.amazonaws.com/...\",\n    \"outputs\": {\n        \"login_output\": {\n            \"task_id\": \"tsk_1234\",\n            \"status\": \"completed\",\n            \"extracted_information\": null,\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"get_order_history_page_url_and_qualifying_order_ids_output\": {\n            \"task_id\": \"tsk_258409009008559418\",\n            \"status\": \"completed\",\n            \"extracted_information\": {\n              \"...\": \"...\"\n            },\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"iterate_over_order_ids_output\": [\n            [\n                {\n                    \"...\": \"...\"\n                }\n            ]\n        ],\n        \"download_invoice_for_order_output\": {\n            \"task_id\": \"tsk_258409361195877732\",\n            \"status\": \"completed\",\n            \"extracted_information\": null,\n            \"failure_reason\": null,\n            \"errors\": []\n        },\n        \"upload_downloaded_files_to_s3_output\": [\n            \"s3://skyvern-uploads/...\"\n        ],\n        \"send_email_output\": {\n            \"success\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Body Example\nDESCRIPTION: Example of the webhook callback response body containing task execution results including route details between Chicago and Los Angeles\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/api-v2-spec.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"task_id\": \"oc_347318612592634222\",\n    \"status\": \"completed\",\n    \"organization_id\": \"o_123456\",\n    \"workflow_run_id\": \"wr_123456\",\n    \"workflow_id\": \"w_123456\",\n    \"workflow_permanent_id\": \"wpid_123456\",\n    \"prompt\": \"Find a route between Chicago to Los Angeles on google maps, then print the route details.\",\n    \"url\": \"https://www.google.com/maps/\",\n    \"summary\": \"The user has successfully found routes between Chicago and Los Angeles on Google Maps. The extracted details include travel modes, travel times, distances, route descriptions, and additional information for each route.\",\n    \"output\": {\n      \"routes\": [\n        {\n          \"travel_mode\": \"Driving\",\n          \"travel_time\": \"30 hr\",\n          \"distance\": \"2,015 miles\",\n          \"route_description\": \"via I-80 W\",\n          \"additional_info\": [\n            \"28 hr without traffic\",\n            \"This route has tolls.\",\n            \"Your destination is in a different time zone.\"\n          ]\n        },\n        {\n          \"travel_mode\": \"Driving\",\n          \"travel_time\": \"30 hr\",\n          \"distance\": \"2,028 miles\",\n          \"route_description\": \"via I-80 W and I-70 W\",\n          \"additional_info\": [\n            \"28 hr without traffic\"\n          ]\n        },\n        {\n          \"travel_mode\": \"Flights\",\n          \"travel_time\": \"4 hr 30 min\",\n          \"distance\": null,\n          \"route_description\": \"Chicago, IL—Los Angeles, CA\",\n          \"additional_info\": [\n            \"from $150\"\n          ]\n        }\n      ],\n      \"extraction_datetime\": \"2025-01-10T22:56:20.297774Z\"\n    },\n    \"totp_verification_url\": null,\n    \"totp_identifier\": null,\n    \"proxy_location\": null,\n    \"webhook_callback_url\": null,\n    \"created_at\": \"2025-01-10T22:53:36.297774Z\",\n    \"modified_at\": \"2025-01-10T22:56:29.582779Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: TextPromptBlock Configuration in Skyvern\nDESCRIPTION: Example of TextPromptBlock setup for generating custom product titles using OpenAI integration.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: text_prompt\n  label: generate_new_title\n  parameter_keys:\n    - alibaba_title\n    - amazon_title\n  llm_key: OPENAI_GPT4O\n  prompt: >\n    You're given two e-commerce product titles. Use both and generate a\n    better one.\n\n      Title 1: {{ alibaba_title }}\n      Title 2: {{ amazon_title }}\n  output_parameter_key: new_title\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with POST Request in Python\nDESCRIPTION: This example demonstrates how to initiate a job application task using the Skyvern API. The request includes parameters for the prompt, starting URL, task title, engine version, proxy location, and a schema for extracting data about application success.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/api-spec.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST https://api.skyvern.com/v1/run/tasks\n\n{\n    \"prompt\": \"Apply for a job on behalf of this person: name: Chris P Bacon. email: chris@pbacon.com\",\n    \"url\": \"https://jobs.lever.co/leverdemo-8/45d39614-464a-4b62-a5cd-8683ce4fb80a/apply\",\n    \"title\": \"Job Application Task\",\n    \"engine\": \"skyvern-2.0\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"data_extraction_schema\": {\n        \"application_success\": {\n            \"type\": \"boolean\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Task Information via Skyvern API\nDESCRIPTION: Example of fetching information about a specific task by its ID using the GetTask tool through the Skyvern API.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.client import GetTask\n\nget_task = GetTask(\n    api_key=\"<your_organization_api_key>\",\n)\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# get_task = GetTask()\n\nasync def main():\n    print(await get_task.ainvoke(\"<task_id>\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Getting Task Information via Skyvern API with LlamaIndex\nDESCRIPTION: Code demonstrating how to get information about a Skyvern task using the API. This approach doesn't require local Skyvern setup and uses a Skyvern organization API key to access task details.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.client import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nskyvern_tool = SkyvernTool(api_key=\"<your_organization_api_key>\")\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# skyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.get_task()],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Get the task information with Skyvern. The task id is '<task_id>'.\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initiating a Task with Skyvern API V2 in Python\nDESCRIPTION: This code snippet demonstrates how to initiate a task using the Skyvern API V2. It sends a POST request to the API endpoint with the required parameters to find a route between Chicago and Los Angeles on Google Maps.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/api-v2-spec.mdx#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST https://api.skyvern.com/api/v2/tasks/ \n\n{\n    \"user_prompt\": \"Find a route between Chicago to Los Angeles on google maps, then print the route details.\",\n    \"proxy_location\": \"RESIDENTIAL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Task Information Locally with Skyvern LlamaIndex\nDESCRIPTION: Code showing how to get information about a Skyvern task that was previously executed locally. Requires initial Skyvern setup with OpenAI API key and a valid task ID.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.agent import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nskyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.get_task()],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Get the task information with Skyvern. The task id is '<task_id>'.\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Workflow Outputs Structure Example (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of the 'outputs' field in a workflow run response. It shows the results of various tasks in the invoice retrieval workflow, including login, order history retrieval, invoice download, and email sending.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/running-workflows.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"outputs\": {\n    \"login_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": null,\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"get_order_history_page_url_and_qualifying_order_ids_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": {\n            \"...\": \"...\"\n        },\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"iterate_over_order_ids_output\": [\n        \"...\"\n    ],\n    \"download_invoice_for_order_output\": {\n        \"task_id\": \"tsk_1234\",\n        \"status\": \"completed\",\n        \"extracted_information\": null,\n        \"failure_reason\": null,\n        \"errors\": []\n    },\n    \"upload_downloaded_files_to_s3_output\": [\n        \"s3://skyvern-uploads/...\",\n        \"s3://skyvern-uploads/...\"\n    ],\n    \"send_email_output\": {\n        \"success\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Synchronous Task via Skyvern API\nDESCRIPTION: Example of running a synchronous task by calling the Skyvern API using the RunTask tool. This approach doesn't require running 'skyvern init' beforehand.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.client import RunTask\n\nrun_task = RunTask(\n    api_key=\"<your_organization_api_key>\",\n)\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# run_task = RunTask()\n\nasync def main():\n    print(await run_task.ainvoke(\"Navigate to the Hacker News homepage and get the top 3 posts.\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running Synchronous Task via Skyvern API with LlamaIndex\nDESCRIPTION: Code demonstrating how to run a synchronous Skyvern task by calling the Skyvern APIs rather than running locally. This requires a Skyvern organization API key and doesn't need local Skyvern setup.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.client import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nskyvern_tool = SkyvernTool(api_key=\"<your_organization_api_key>\")\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# skyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.run_task()],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.'\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Workflows API using cURL\nDESCRIPTION: Example cURL command to retrieve workflows with pagination and filtering options. Requires API key in headers.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/getting-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.skyvern.com/api/v1/workflows?page=1&only_workflows=true' \\\n  -H 'x-api-key: [your-api-key-here]' \\\n```\n\n----------------------------------------\n\nTITLE: Running Workflow API Request and Response Example - Bash\nDESCRIPTION: Sample curl command demonstrating how to trigger a workflow execution with the required headers and payload, including website URL and date parameters.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/running-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.skyvern.com/api/v1/workflows/wpid_123456/run' \\\n--header 'x-api-key: <USE_YOUR_API_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"data\": {\n        \"website_url\": \"your_website\",\n        \"invoice_retrieval_start_date\": \"2024-04-15\"\n    },\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": \"<your-endpoint>\"\n}'\n\n-- Sample Response\n{\n    \"workflow_id\": \"wpid_123456\",\n    \"workflow_run_id\": \"wr_123456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running an Asynchronous Task via Skyvern API\nDESCRIPTION: Example of running an asynchronous task by calling the Skyvern API using the DispatchTask tool. The task runs in the Skyvern cloud, so the local script doesn't need to remain running.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.client import DispatchTask\n\ndispatch_task = DispatchTask(\n    api_key=\"<your_organization_api_key>\",\n)\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# dispatch_task = DispatchTask()\n\nasync def main():\n    print(await dispatch_task.ainvoke(\"Navigate to the Hacker News homepage and get the top 3 posts.\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running an Asynchronous Task Locally with Skyvern\nDESCRIPTION: Example of running an asynchronous task locally using the DispatchTask tool. The task runs in the background, so the script must remain running until the task finishes.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.agent import DispatchTask\n\ndispatch_task = DispatchTask()\n\nasync def main():\n    # to run skyvern agent locally, must run `skyvern init` first\n    print(await dispatch_task.ainvoke(\"Navigate to the Hacker News homepage and get the top 3 posts.\"))\n\n    # keep the script running until the task is finished\n    await asyncio.sleep(600)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: FileParserBlock Configuration in Skyvern\nDESCRIPTION: YAML configuration for setting up CSV file parsing functionality with file URL specification.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: file_url_parser\n  label: csv_parser\n  file_type: csv\n  file_url: <csv_file_url>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Asynchronous Task Locally and Monitoring Completion\nDESCRIPTION: Advanced usage example that dispatches an asynchronous task locally and polls for its completion using the get_task tool. This implementation uses the sleep tool to set intervals between status checks until the task is complete.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.core.tools import FunctionTool\nfrom skyvern_llamaindex.agent import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nasync def sleep(seconds: int) -> str:\n    await asyncio.sleep(seconds)\n    return f\"Slept for {seconds} seconds\"\n\nsleep_tool = FunctionTool.from_defaults(\n    async_fn=sleep,\n    description=\"Sleep for a given number of seconds\",\n    name=\"sleep\",\n)\n\nskyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.dispatch_task(), skyvern_tool.get_task(), sleep_tool],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n    max_function_calls=10,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.' Then, get this task information until it's completed. The task information re-get interval should be 60s.\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Task Locally with Skyvern LlamaIndex\nDESCRIPTION: Code for running an asynchronous task with Skyvern locally. The task runs in the background, and a sleep tool keeps the agent running until the task completes. Requires initial Skyvern setup with OpenAI API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.agent import SkyvernTool\nfrom llama_index.core.tools import FunctionTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nasync def sleep(seconds: int) -> str:\n    await asyncio.sleep(seconds)\n    return f\"Slept for {seconds} seconds\"\n\n# define a sleep tool to keep the agent running until the task is finished\nsleep_tool = FunctionTool.from_defaults(\n    async_fn=sleep,\n    description=\"Sleep for a given number of seconds\",\n    name=\"sleep\",\n)\n\nskyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.dispatch_task(), sleep_tool],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.' Then, sleep for 10 minutes.\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Running Synchronous Task Locally with Skyvern LlamaIndex\nDESCRIPTION: Code demonstrating how to run a synchronous task with Skyvern locally. This requires setting up Skyvern first with the OpenAI API key. The task navigates to Hacker News and retrieves the top 3 posts.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom llama_index.agent.openai import OpenAIAgent\nfrom llama_index.llms.openai import OpenAI\nfrom skyvern_llamaindex.agent import SkyvernTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nskyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.run_task()],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.'\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Getting Task Information Locally with Skyvern\nDESCRIPTION: Example of fetching information about a specific task by its ID using the GetTask tool in a local environment.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.agent import GetTask\n\nget_task = GetTask()\n\nasync def main():\n    # to run skyvern agent locally, must run `skyvern init` first\n    print(await get_task.ainvoke(\"<task_id>\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running a Synchronous Task Locally with Skyvern\nDESCRIPTION: Example of running a synchronous task locally using the RunTask tool. This requires running 'skyvern init' beforehand to set up the local environment with an OpenAI API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom skyvern_langchain.agent import RunTask\n\nrun_task = RunTask()\n\nasync def main():\n    # to run skyvern agent locally, must run `skyvern init` first\n    print(await run_task.ainvoke(\"Navigate to the Hacker News homepage and get the top 3 posts.\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Starting Skyvern with Docker Compose\nDESCRIPTION: Command to launch Skyvern services using Docker Compose in detached mode.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Integrating Skyvern with Langchain Agent Locally\nDESCRIPTION: Advanced example showing how to build a Langchain agent that dispatches a task locally, then polls for its completion using the GetTask and SleepTool tools. Requires local Skyvern setup.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom skyvern_langchain.agent import DispatchTask, GetTask\n\nfrom langchain_community.tools.sleep.tool import SleepTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nllm = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n\ndispatch_task = DispatchTask()\nget_task = GetTask()\n\nagent = initialize_agent(\n    llm=llm,\n    tools=[\n        dispatch_task,\n        get_task,\n        SleepTool(),\n    ],\n    verbose=True,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n)\n\n\nasync def main():\n    # use sleep tool to set up the polling logic until the task is completed, if you only want to dispatch a task, you can remove the sleep tool\n    print(await agent.ainvoke(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.' Then, get this task information until it's completed. The task information re-get interval should be 60s.\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating New Alembic Revision with Autogenerate\nDESCRIPTION: This command creates a new Alembic revision file with automatically generated migration scripts. It requires a description message for the revision.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/alembic/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalembic revision --autogenerate -m \"enter description here\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Skyvern Configuration\nDESCRIPTION: Command to run the Skyvern setup wizard for generating configuration settings.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nskyvern init\n```\n\n----------------------------------------\n\nTITLE: Integrating Skyvern with Langchain Agent via API\nDESCRIPTION: Advanced example showing how to build a Langchain agent that dispatches a task through the Skyvern API, then polls for its completion using the GetTask and SleepTool tools. No local setup required.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom skyvern_langchain.client import DispatchTask, GetTask\n\nfrom langchain_community.tools.sleep.tool import SleepTool\n\n# load OpenAI API key from .env\nload_dotenv()\n\nllm = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n\ndispatch_task = DispatchTask(\n    api_key=\"<your_organization_api_key>\",\n)\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# dispatch_task = DispatchTask()\n\nget_task = GetTask(\n    api_key=\"<your_organization_api_key>\",\n)\n# or you can load the api_key from SKYVERN_API_KEY in .env\n# get_task = GetTask()\n\nagent = initialize_agent(\n    llm=llm,\n    tools=[\n        dispatch_task,\n        get_task,\n        SleepTool(),\n    ],\n    verbose=True,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n)\n\n\nasync def main():\n    # use sleep tool to set up the polling logic until the task is completed, if you only want to dispatch a task, you can remove the sleep tool\n    print(await agent.ainvoke(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.' Then, get this task information until it's completed. The task information re-get interval should be 60s.\"))\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Example Workflows API Response\nDESCRIPTION: Sample response showing a workflow for a Workday application process with login and submit tasks.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/getting-workflows.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"workflow_id\": \"w_297763518988864302\",\n    \"organization_id\": \"o_197675547813248794\",\n    \"title\": \"Test Workday Application\",\n    \"workflow_permanent_id\": \"wpid_297751296240552836\",\n    \"version\": 4,\n    \"is_saved_task\": false,\n    \"description\": \"Login Workday and submit the application\",\n    \"proxy_location\": \"RESIDENTIAL\",\n    \"webhook_callback_url\": null,\n    \"totp_verification_url\": null,\n    \"workflow_definition\": {\n      \"parameters\": [\n        {\n          \"parameter_type\": \"output\",\n          \"key\": \"login_output\",\n          \"description\": \"Output parameter for block login\"\n        },\n        {\n          \"parameter_type\": \"workflow\",\n          \"key\": \"website_url\",\n          \"description\": null\n        }\n      ],\n      \"blocks\": [\n        {\n          \"label\": \"login\",\n          \"block_type\": \"task\"\n        },\n        {\n          \"label\": \"submit\",\n          \"block_type\": \"task\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Alembic Migrations to Latest Version\nDESCRIPTION: This command upgrades the database to the latest migration version (head). It applies all pending migrations in sequence.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/alembic/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalembic upgrade head\n```\n\n----------------------------------------\n\nTITLE: Launching Skyvern Server\nDESCRIPTION: Command to start the Skyvern server for handling backend operations.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nskyvern run server\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Skyvern Task with OpenAI Agent in Python\nDESCRIPTION: This code snippet demonstrates setting up an OpenAI agent that uses Skyvern tools to automate web tasks. The agent is configured with dispatch_task, get_task, and sleep tools, using the GPT-4o model. It then executes a task to navigate to Hacker News and retrieve the top 3 posts, with periodic status checks every 60 seconds.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# skyvern_tool = SkyvernTool()\n\nagent = OpenAIAgent.from_tools(\n    tools=[skyvern_tool.dispatch_task(), skyvern_tool.get_task(), sleep_tool],\n    llm=OpenAI(model=\"gpt-4o\"),\n    verbose=True,\n    max_function_calls=10,\n)\n\nresponse = agent.chat(\"Run a task with Skyvern. The task is about 'Navigate to the Hacker News homepage and get the top 3 posts.' Then, get this task information until it's completed. The task information re-get interval should be 60s.\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern Request Signatures in Python\nDESCRIPTION: Python function to validate incoming Skyvern API requests using HMAC SHA-256 signature verification.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/advanced-features.mdx#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef validate_skyvern_request_headers(request: Request) -> bool:\n    header_skyvern_signature = request.headers[\"x-skyvern-signature\"]\n    payload = request.body() # this is a bytes\n    hash_obj = hmac.new(SKYVERN_API_KEY.encode(\"utf-8\"), msg=payload, digestmod=hashlib.sha256)\n    client_generated_signature = hash_obj.hexdigest()\n    return header_skyvern_signature == client_generated_signature\n```\n\n----------------------------------------\n\nTITLE: Setting Up Skyvern Environment for Contributors\nDESCRIPTION: Commands to set up the Skyvern environment for contributors, including running the setup script, starting the server, and launching the UI.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nskyvern/scripts/setup.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./run_skyvern.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./run_ui.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Task Block Configuration in YAML\nDESCRIPTION: Example configuration for a login task block showing parameter structure, navigation goals, and error handling\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/creating-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using\n        the credentials given. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. If you fail to login to find the login page or can't login after several trials, terminate. If login is\n        completed, you're successful. \n      data_extraction_goal: >\n        Extract anything for the sake of this demo\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Results via Skyvern API\nDESCRIPTION: HTTP GET request to retrieve task steps from the Skyvern API. This endpoint returns a list of steps with their associated actions and relevant information, using pagination parameters.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/visualizing-results.mdx#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.skyvern.com/api/v1/tasks/{task_id}/steps?page=1&page_size=15\n```\n\n----------------------------------------\n\nTITLE: Installing Skyvern with Python Package Manager\nDESCRIPTION: Command to install Skyvern using pip package manager. Requires Python 3.11 environment.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/mcp/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install skyvern\n```\n\n----------------------------------------\n\nTITLE: Example of Workflow Block with Session Persistence in YAML\nDESCRIPTION: This example shows a task block within a workflow that handles login functionality. It demonstrates parameter keys, URL specification, navigation goals, and error code mapping.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/creating-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: task\n      label: login\n      parameter_keys:\n        - credentials\n      url: website_url\n      navigation_goal: >\n        If you're not on the login page, navigate to login page and login using\n        the credentials given. First, take actions on promotional popups or cookie prompts that could prevent taking other action on the web page. If you fail to login to find the login page or can't login after several trials, terminate. If login is\n        completed, you're successful. \n      data_extraction_goal: >\n        Extract anything for the sake of this demo\n      error_code_mapping:\n        stuck_with_popups: terminate and return this error if you can't close popups after several tries and can't take the necessary actions on the website because there is a blocking popup on the page\n        failed_to_login: terminate and return this error if you fail logging in to the page\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Steps via Skyvern API\nDESCRIPTION: An HTTP GET request to retrieve a paginated list of steps for a specific task, including their actions and other relevant information.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/visualizing-results.mdx#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.skyvern.com/api/v1/tasks/{task_id}/steps?page=1&page_size=15\n```\n\n----------------------------------------\n\nTITLE: Launching Local Skyvern Server\nDESCRIPTION: Command to start the local Skyvern server. Only required when running in local mode.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/mcp/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nskyvern run server\n```\n\n----------------------------------------\n\nTITLE: Basic CodeBlock Example in Skyvern\nDESCRIPTION: Simple CodeBlock implementation for calculating percentage difference between two prices using Python code.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n- block_type: code\n  label: calculate_percentage_diff\n  parameter_keys:\n    - alibaba_price\n    - amazon_price\n  code: |\n    if amazon_price[\"unitPrice\"] and alibaba_price[\"unitPrice\"]:\n        result = 1.0 * (alibaba_price[\"unitPrice\"] - amazon_price[\"unitPrice\"]) / amazon_price[\"unitPrice\"]\n    else:\n        result = None\n  output_parameter_key: price_diff_percentage\n```\n\n----------------------------------------\n\nTITLE: Downgrading Alembic Migration by One Step\nDESCRIPTION: This command downgrades the database by one migration step. It reverts the most recent migration applied to the database.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/alembic/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nalembic downgrade -1\n```\n\n----------------------------------------\n\nTITLE: Organization API Authentication in Skyvern\nDESCRIPTION: Authentication header format for Skyvern's API, which requires a Bearer Token in the x-api-key header.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/integrations/api.mdx#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nx-api-key: <your_api_key_here>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CodeBlock for Data Transformation in Skyvern\nDESCRIPTION: This CodeBlock example calculates the percentage difference between two prices. It takes Amazon and Alibaba prices as parameters and outputs the percentage difference. CodeBlocks allow execution of custom Python code within the Skyvern environment.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n- block_type: code\n  label: calculate_percentage_diff\n  parameter_keys:\n    - alibaba_price\n    - amazon_price\n  code: |\n    if amazon_price[\"unitPrice\"] and alibaba_price[\"unitPrice\"]:\n        result = 1.0 * (alibaba_price[\"unitPrice\"] - amazon_price[\"unitPrice\"]) / amazon_price[\"unitPrice\"]\n    else:\n        result = None\n  output_parameter_key: price_diff_percentage\n```\n\n----------------------------------------\n\nTITLE: Installing Skyvern LlamaIndex Integration\nDESCRIPTION: A simple pip command to install the Skyvern LlamaIndex integration package.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/llama_index/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install skyvern-llamaindex\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organizations with Python Requests\nDESCRIPTION: A Python code example using the requests library to query the organizations endpoint, process the response, and handle potential errors.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/api.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://api.skyvern.com/api/v1/organizations\"\nheaders = {\n    \"x-api-key\": \"your_api_key\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    organizations = response.json()[\"organizations\"]\n    for org in organizations:\n        print(f\"Organization ID: {org['organization_id']}\")\n        print(f\"Organization Name: {org['organization_name']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)\n```\n\n----------------------------------------\n\nTITLE: Successful JSON Response from Organizations API\nDESCRIPTION: Example of a successful response from the Organizations API, returning an array of organization objects with their IDs and names.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/integrations/api.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organizations\": [\n    {\n      \"organization_id\": \"uuid-string\",\n      \"organization_name\": \"Organization Name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Policy for S3 Access\nDESCRIPTION: IAM policy configuration that grants limited GetObject and PutObject permissions for a specific S3 bucket used with Skyvern.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/workflow-blocks.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SkyvernS3Access\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::YOUR-BUCKET-NAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Skyvern UI\nDESCRIPTION: Command to start the Skyvern user interface for interacting with the automation system.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nskyvern run ui\n```\n\n----------------------------------------\n\nTITLE: Python Request Example for Organizations API\nDESCRIPTION: Example of how to make a request to the Organizations API using Python's requests library and process the response data.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/integrations/api.mdx#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://api.skyvern.com/api/v1/organizations\"\nheaders = {\n    \"x-api-key\": \"your_api_key\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    organizations = response.json()[\"organizations\"]\n    for org in organizations:\n        print(f\"Organization ID: {org['organization_id']}\")\n        print(f\"Organization Name: {org['organization_name']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)\n```\n\n----------------------------------------\n\nTITLE: Configuring FileParserBlock for CSV Processing\nDESCRIPTION: YAML configuration for setting up file parsing functionality, specifically for CSV files using a file URL.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- block_type: file_url_parser\n  label: csv_parser\n  file_type: csv\n  file_url: <csv_file_url>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Skyvern Frontend\nDESCRIPTION: Installs all the required npm packages defined in the package.json file for the Skyvern frontend application.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication in OpenAPI\nDESCRIPTION: This JSON snippet demonstrates how to specify Bearer token authentication in an OpenAPI specification file. It defines a security requirement that will be applied to API endpoints.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/api-reference/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"security\": [\n  {\n    \"bearerAuth\": []\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Skyvern Frontend Server\nDESCRIPTION: Builds the application and starts a server on port 8080 to serve the compiled frontend application.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Contributors\nDESCRIPTION: Command to install pre-commit hooks for ensuring code quality and consistency when contributing to Skyvern.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Implementing CodeBlock with Browser Control in Skyvern\nDESCRIPTION: This CodeBlock demonstrates how to interact with the browser page within Skyvern. It retrieves the current page's URL and title, then navigates to a specific website. The special skyvern_page object provides direct control over the browser.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n- block_type: code\n  label: get_tab_details\n  code: |\n    print(\"Getting tab details\")\n    result = {\n        \"url\": skyvern_page.url,\n        \"title\": await skyvern_page.title()\n    }\n    print(\"Got details:\", result)\n    print(\"Now I want to see a cat\")\n    await skyvern_page.goto(\"https://cataas.com/cat\")\n```\n\n----------------------------------------\n\nTITLE: Building Skyvern Frontend for Production\nDESCRIPTION: Creates an optimized production build of the application in the dist directory, ready for deployment to a production environment.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Policy for S3 Access\nDESCRIPTION: IAM policy configuration for allowing GetObject and PutObject permissions on a specific S3 bucket. This policy is required for FileUploadBlock functionality.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/workflows/workflow-blocks.mdx#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SkyvernS3Access\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::YOUR-BUCKET-NAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Workflows using cURL\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Skyvern API to retrieve a list of workflows. It includes the necessary headers and query parameters.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/getting-workflows.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.skyvern.com/api/v1/workflows?page=1&only_workflows=true' \\\n  -H 'x-api-key: [your-api-key-here]' \\\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description\nDESCRIPTION: The main header and description section defining Skyvern's primary purpose and functionality\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/introduction.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction\ndescription: '🐉 Automate Browser-based workflows using LLMs and Computer Vision 🐉'\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Max Steps Override in API Request\nDESCRIPTION: Example of how to override the default max_steps parameter in a Skyvern task API request using custom headers.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/running-tasks/advanced-features.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST https://api.skyvern.com/api/v1/tasks \n\nHeaders:\n{\n    \"x-api-key\": \"YOUR_API_KEY\",\n    \"x-max-steps-override\": 10\n}\n\nBody:\n.. usual task body ..\n```\n\n----------------------------------------\n\nTITLE: Checking Current Alembic Migration Status\nDESCRIPTION: This command displays information about the current Alembic setup, including the most recent migration applied to the database.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/alembic/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nalembic current\n```\n\n----------------------------------------\n\nTITLE: Workflow Response Structure in JSON\nDESCRIPTION: This JSON structure represents the format of the response returned by the GET /api/v1/workflows endpoint. It includes detailed information about each workflow, including its ID, organization, title, version, and definition.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/workflows/getting-workflows.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"workflow_id\": \"string\",\n    \"organization_id\": \"string\",\n    \"title\": \"string\",\n    \"workflow_permanent_id\": \"string\",\n    \"version\": \"integer\",\n    \"is_saved_task\": \"boolean\",\n    \"description\": \"string\",\n    \"proxy_location\": \"string | null\",\n    \"webhook_callback_url\": \"string | null\",\n    \"totp_verification_url\": \"string | null\",\n    \"workflow_definition\": {\n      \"parameters\": [\n        {\n          \"parameter_type\": \"string\",\n          \"key\": \"string\",\n          \"description\": \"string | null\"\n        }\n      ],\n      \"blocks\": [\n        {\n          \"label\": \"string\",\n          \"block_type\": \"string\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Command to install all project dependencies using Poetry, the Python dependency management tool specified in the prerequisites.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern/webeye/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI using npm\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This is required for local development and preview of documentation changes.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Skyvern API Authentication Header\nDESCRIPTION: The header format required for authenticating with the Skyvern API using an API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/api.mdx#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nx-api-key: <your_api_key_here>\n```\n\n----------------------------------------\n\nTITLE: Serving Skyvern Production Build with Serve Package\nDESCRIPTION: An alternative way to serve the production build locally using the 'serve' package, which doesn't require any prior installation.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx serve@latest dist\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify development server\nDESCRIPTION: Command to start the Mintlify development server for previewing documentation changes locally. This should be run at the root of the documentation where the mint.json file is located.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: GET Organizations API Endpoint\nDESCRIPTION: The base URL for retrieving organization information in the Skyvern API.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/api.mdx#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET https://api.skyvern.com/api/v1/organizations\n```\n\n----------------------------------------\n\nTITLE: Installing Skyvern with pip\nDESCRIPTION: Command to install Skyvern using pip package manager.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install skyvern\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Mintlify development server\nDESCRIPTION: Command to reinstall dependencies if the Mintlify development server is not running. This can resolve issues with missing or outdated dependencies.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organizations with cURL\nDESCRIPTION: A cURL command example that demonstrates how to make a GET request to the organizations endpoint with proper authentication headers.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/api.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://api.skyvern.com/api/v1/organizations\" \\\n     -H \"x-api-key: your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Task Cancellation\nDESCRIPTION: API endpoint for canceling a task that is in created, queued, or running state. The endpoint requires a task_id parameter in the URL path.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/api-spec.mdx#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.skyvern.com/api/v1/tasks/{task_id}/cancel\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI\nDESCRIPTION: Commands to install Mintlify globally using either npm or yarn package managers. Requires Node.js version 18.10.0 or higher.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/development.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add mintlify\n```\n\n----------------------------------------\n\nTITLE: cURL Request Example for Organizations API\nDESCRIPTION: Example of how to make a request to the Organizations API using cURL, including the required authentication header.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/integrations/api.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://api.skyvern.com/api/v1/organizations\" \\\n     -H \"x-api-key: your_api_key_here\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Reusable Variables from MDX Snippets\nDESCRIPTION: This snippet demonstrates how to export reusable variables from an MDX snippet file. It includes examples of exporting both a string variable and an object variable that can be imported elsewhere.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\nexport const myName = 'my name';\n\nexport const myObject = { fruit: 'strawberries' };\n```\n\n----------------------------------------\n\nTITLE: Starting Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server in the directory containing mint.json configuration file.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/development.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: MCP Application Configuration Template\nDESCRIPTION: JSON configuration template for setting up Skyvern with MCP-enabled applications. Includes environment variables and command arguments for both cloud and local deployments.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/mcp/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"Skyvern\": {\n      \"env\": {\n        \"SKYVERN_BASE_URL\": \"https://api.skyvern.com\",\n        \"SKYVERN_API_KEY\": \"YOUR_SKYVERN_API_KEY\"\n      },\n      \"command\": \"PATH_TO_PYTHON\",\n      \"args\": [\n        \"-m\",\n        \"skyvern\",\n        \"run\",\n        \"mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable React Components in MDX Snippets\nDESCRIPTION: This snippet shows how to create a reusable React component within an MDX snippet file. It demonstrates exporting a component as an arrow function that accepts props, with a warning about MDX syntax limitations in arrow functions.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MyComponent = ({ title }) => (\n  <div>\n    <h1>{title}</h1>\n    <p>... snippet content ...</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Port Conflict Error Example\nDESCRIPTION: Example error message when attempting to run Mintlify on a port that is already in use.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/development.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nError: listen EADDRINUSE: address already in use :::3000\n```\n\n----------------------------------------\n\nTITLE: Installing Skyvern Langchain and Dependencies\nDESCRIPTION: Instructions for installing the skyvern-langchain package and optional langchain dependencies required for running example scenarios.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/langchain/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install skyvern-langchain\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain-openai\npip install langchain-community\n```\n\n----------------------------------------\n\nTITLE: Successful Organizations API Response Format\nDESCRIPTION: The JSON response structure returned when successfully querying the organizations endpoint. Contains an array of organization objects with their IDs and names.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/api.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organizations\": [\n    {\n      \"organization_id\": \"uuid-string\",\n      \"organization_name\": \"Organization Name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mintlify CLI\nDESCRIPTION: Commands to update the Mintlify CLI to the latest version using npm or yarn.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/development.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global upgrade mintlify\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Configuration for Skyvern Frontend\nDESCRIPTION: Copies the example environment file to create a new .env file that needs to be configured with a Skyvern API key for authentication.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI URLs in Mintlify Projects\nDESCRIPTION: Examples of how to configure OpenAPI integration in Mintlify documentation using absolute URLs, relative paths, or multiple OpenAPI sources.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/settings.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"https://example.com/openapi.json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": \"/openapi.json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inline Code in Markdown\nDESCRIPTION: Shows how to denote words or phrases as code using backticks in Markdown.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/code.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo denote a `word` or `phrase` as code, enclose it in backticks (`).\n```\n\n----------------------------------------\n\nTITLE: Running Skyvern Frontend in Development Mode\nDESCRIPTION: Starts the development server with hot module replacement enabled for a more efficient development workflow with automatic updates.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running California EDD UI Script with Skyvern\nDESCRIPTION: This bash command runs a UI script for the California Employment Development Department (EDD) using Skyvern. It demonstrates how to initiate an automated interaction with a government website.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/getting-started/skyvern-in-action.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run_ui.sh california_edd\n```\n\n----------------------------------------\n\nTITLE: Creating a Java Hello World Program\nDESCRIPTION: Demonstrates a basic Java program that prints 'Hello, World!' to the console. This snippet also shows how to create a fenced code block with syntax highlighting in Markdown.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/code.mdx#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Skyvern Production Build Locally\nDESCRIPTION: Starts a local server to preview the production build without needing to deploy it to a production environment.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern-frontend/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Importing and Using MDX Snippets in Documentation\nDESCRIPTION: This snippet shows how to import a reusable snippet into a destination file and pass props to it. The example demonstrates importing 'MySnippet' and providing the value 'bananas' for the 'word' prop.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport MySnippet from '/snippets/path/to/my-snippet.mdx';\n\n## Header\n\nLorem impsum dolor sit amet.\n\n<MySnippet word=\"bananas\" />\n```\n\n----------------------------------------\n\nTITLE: Running California EDD Form Automation in Skyvern\nDESCRIPTION: Command to execute the Skyvern UI automation script for California EDD (Employment Development Department) services form filling.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/getting-started/skyvern-in-action.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run_ui.sh california_edd\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Markdown Syntax\nDESCRIPTION: Demonstrates how to add images using Markdown syntax. The image file size must be less than 5MB, or it's recommended to use external hosting services.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/images.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![title](/path/image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Running the WebHuman Project\nDESCRIPTION: Command to execute the main script with a URL parameter. This runs the WebHuman automation tool against the specified web page.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern/webeye/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npython web_eye.py <url>\n```\n\n----------------------------------------\n\nTITLE: Initializing Skyvern Configuration\nDESCRIPTION: Command to run the Skyvern setup wizard for configuring either cloud or local installation.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/integrations/mcp/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nskyvern init\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with HTML\nDESCRIPTION: Shows how to embed images using HTML for more customization options, such as specifying height.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/images.mdx#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img height=\"200\" src=\"/path/image.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Command template for defining required environment variables. Note that the specific variables to be set are not fully specified in the original documentation.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern/webeye/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iFrame\nDESCRIPTION: Demonstrates how to embed a YouTube video using an iFrame, including various attributes for customization and responsiveness.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/images.mdx#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"\n  title=\"YouTube video player\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n  style={{ width: '100%', borderRadius: '0.5rem' }}\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Navigation Structure in mint.json\nDESCRIPTION: This snippet shows how to create nested navigation groups in mint.json. It sets up a parent group called \"Getting Started\" that contains both a direct page link and a nested group with its own page.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/navigation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Getting Started\",\n        \"pages\": [\n            \"quickstart\",\n            {\n                \"group\": \"Nested Reference Pages\",\n                \"pages\": [\"nested-reference-page\"]\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Subsection Headers in Markdown\nDESCRIPTION: Demonstrates how to create subsection headers using triple hash syntax. Like main titles, these create anchors and appear in the table of contents.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Subtitles\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Navigation Structure in mint.json\nDESCRIPTION: This snippet demonstrates the basic structure for configuring navigation in mint.json. It creates a simple navigation group named \"Getting Started\" with a single page called \"quickstart\".\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/navigation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Getting Started\",\n        \"pages\": [\"quickstart\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Italic Text in Markdown\nDESCRIPTION: Shows how to format text as italic by surrounding it with underscores.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n_italic_\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation with Folder Structure in mint.json\nDESCRIPTION: This snippet demonstrates how to reference pages that are organized in folders. It shows the correct path format to use in the navigation configuration for pages located in subdirectories.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/navigation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"navigation\": [\n    {\n        \"group\": \"Group Name\",\n        \"pages\": [\"your-folder/your-page\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Subscript Text with HTML in Markdown\nDESCRIPTION: Shows how to create subscript text using HTML sub tags within markdown.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<sub>subscript</sub>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Variables from MDX Snippets\nDESCRIPTION: This snippet shows how to import variables exported from a snippet file and use them in another document. The example imports 'myName' and 'myObject' variables and uses them in text content.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { myName, myObject } from '/snippets/path/to/custom-variables.mdx';\n\nHello, my name is {myName} and I like {myObject.fruit}.\n```\n\n----------------------------------------\n\nTITLE: Referencing Mintlify Configuration File\nDESCRIPTION: Shows the reference to the mint.json file that is required for every Mintlify documentation site. This file contains core configuration settings that control the site's appearance and functionality.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/settings.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nmint.json\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Markdown\nDESCRIPTION: Demonstrates how to create a link to an external website using markdown link syntax.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[link to google](https://google.com)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Components from MDX Snippets\nDESCRIPTION: This snippet demonstrates how to import a React component from an MDX snippet and use it in a destination file. It shows how to pass props to the component when it's used in the document.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: My title\ndescription: My Description\n---\n\nimport { MyComponent } from '/snippets/custom-component.mdx';\n\nLorem ipsum dolor sit amet.\n\n<MyComponent title={'Custom title'} />\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links to Documentation Pages\nDESCRIPTION: Shows how to create links to other pages within the documentation using root-relative paths.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[link to text](/writing-content/text)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MDX Snippet with Variable Substitution\nDESCRIPTION: This snippet demonstrates how to create a simple reusable MDX snippet file that includes a variable placeholder for dynamic content insertion. The variable 'word' can be passed as a prop when using the snippet.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/reusable-snippets.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nHello world! This is my content I want to reuse across pages. My keyword of the day is {word}.\n```\n\n----------------------------------------\n\nTITLE: Requesting Organizations Endpoint for Skyvern API\nDESCRIPTION: The base endpoint URL for retrieving organization information from Skyvern's API.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/fern/integrations/api.mdx#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET https://api.skyvern.com/api/v1/organizations\n```\n\n----------------------------------------\n\nTITLE: Creating Single-line Blockquotes in Markdown\nDESCRIPTION: Demonstrates how to create a single-line blockquote by prefixing text with a greater-than symbol.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n> Dorothy followed her through many of the beautiful rooms in her castle.\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Mode Only Settings in JSON\nDESCRIPTION: JSON configuration to force light mode by setting the default mode to light and hiding the mode toggle.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/settings.mdx#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"modeToggle\": {\n  \"default\": \"light\",\n  \"isHidden\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Blocks in Markdown\nDESCRIPTION: Illustrates how to create a fenced code block in Markdown, including specifying the programming language and an optional filename for syntax highlighting.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/code.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```java HelloWorld.java\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic iFrame Embedding\nDESCRIPTION: Shows a simple example of embedding content using an iFrame, which is commonly used for embedding videos or other external content.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/images.mdx#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Only Settings in JSON\nDESCRIPTION: JSON configuration to force dark mode by setting the default mode to dark and hiding the mode toggle.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/settings.mdx#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"modeToggle\": {\n  \"default\": \"dark\",\n  \"isHidden\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration\nDESCRIPTION: Command to run Mintlify on a custom port (3333) instead of the default port 3000.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/development.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev --port 3333\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Media Links in Mintlify Footer\nDESCRIPTION: Example of how to set up social media links in the footer of a Mintlify documentation site, showing the JSON structure for multiple platforms.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/settings.mdx#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"twitter\": \"https://twitter.com/mintlify\",\n  \"website\": \"https://mintlify.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Skyvern Webhook Signatures in JavaScript\nDESCRIPTION: This code snippet shows how to validate Skyvern webhook requests in JavaScript/Node.js using HMAC-SHA256 signature verification. It verifies the signature in the request header against a computed signature based on your Skyvern API key.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/running-tasks/webhooks-faq.mdx#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\n\nfunction validateSkyvernRequestHeaders(req) {\n    const headerSkyvernSignature = req.headers['x-skyvern-signature'];\n    const payload = req.body; // assuming req.body is a Buffer or string\n    const hash = crypto.createHmac('sha256', process.env.SKYVERN_API_KEY)\n                        .update(payload)\n                        .digest('hex');\n    return headerSkyvernSignature === hash;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Section Headers in Markdown\nDESCRIPTION: Shows how to create section headers using double hash syntax. These titles create anchors and appear in the table of contents.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Titles\n```\n\n----------------------------------------\n\nTITLE: Displaying Under Construction Image with HTML\nDESCRIPTION: HTML code that displays an image of a pug dog with tools behind an 'under construction' sign from dreamstime.com.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/integrations/make.com.mdx#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"https://thumbs.dreamstime.com/b/pug-dog-holding-pliers-screwdriver-behind-old-wooden-sign-text-under-construction-white-background-constructor-92836854.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Bold Text in Markdown\nDESCRIPTION: Shows how to format text as bold by surrounding it with double asterisks.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**bold**\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that indicates which versions of the Skyvern project are currently supported with security updates.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/SECURITY.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.1.x   | :white_check_mark: |\n| < 0.1.0   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Cloning the WebHuman Repository\nDESCRIPTION: Command to clone the WebHuman repository and navigate to the project directory. This is the first step in setting up the project on your local machine.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/skyvern/webeye/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://your-repository-url.git\ncd webhuman\n```\n\n----------------------------------------\n\nTITLE: Combining Text Formatting Styles in Markdown\nDESCRIPTION: Demonstrates how to combine multiple formatting styles, such as bold and italic.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n**_bold and italic_**\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server Locally\nDESCRIPTION: Command to start the Mintlify development server at the root of your documentation where the mint.json file is located.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/quickstart.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Creating Strikethrough Text in Markdown\nDESCRIPTION: Shows how to format text with strikethrough by surrounding it with tildes.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n~strikethrough~\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation Preview\nDESCRIPTION: Command to install the Mintlify CLI globally via npm to preview documentation changes locally.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/quickstart.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Including LaTeX Equations with the Latex Component\nDESCRIPTION: Demonstrates how to include mathematical equations using the Latex component in markdown documentation.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>\n```\n\n----------------------------------------\n\nTITLE: Creating Superscript Text with HTML in Markdown\nDESCRIPTION: Shows how to create superscript text using HTML sup tags within markdown.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<sup>superscript</sup>\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Links to Documentation Pages\nDESCRIPTION: Shows an alternative way to link to other pages using relative paths, though this is not recommended for performance reasons.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[link to text](../text)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Blockquotes in Markdown\nDESCRIPTION: Shows how to create multi-paragraph blockquotes by using the greater-than symbol at the start of each paragraph with an empty blockquote line between them.\nSOURCE: https://github.com/skyvern-ai/skyvern/blob/main/docs/essentials/markdown.mdx#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n> Dorothy followed her through many of the beautiful rooms in her castle.\n>\n> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.\n```"
  }
]