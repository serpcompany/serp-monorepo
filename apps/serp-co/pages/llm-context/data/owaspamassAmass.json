[
  {
    "owner": "owasp-amass",
    "repo": "amass",
    "content": "TITLE: Using send_names Function in Lua for Amass Subdomain Discovery\nDESCRIPTION: The send_names function allows Amass data source scripts to submit content to be checked for subdomain names that are in scope of the current enumeration process.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    -- Discover content containing subdomain names\n\n    send_names(ctx, content)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Subdomain Enumeration with Amass in Bash\nDESCRIPTION: Shows the most basic usage of Amass for subdomain enumeration, targeting a specific domain name.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\namass enum -d example.com\n```\n\n----------------------------------------\n\nTITLE: Using associated Function in Lua for Amass Domain Association\nDESCRIPTION: The associated function allows Amass data source scripts to submit a discovered domain name that is associated with the domain name provided by the current enumeration process.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nfunction horizontal(ctx, domain)\n    -- Discover domain names associated with the provided domain parameter\n\n    associated(ctx, domain, assoc)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Amass in Normal Mode for Domain Enumeration\nDESCRIPTION: Normal mode runs enum subcommand to seed enumeration from data sources and leverages DNS to validate findings and investigate namespaces in provided domain names.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\namass enum -d example.com\n```\n\n----------------------------------------\n\nTITLE: Submitting Discovered Domains with new_name() Function in Lua\nDESCRIPTION: This function allows scripts to submit a discovered fully qualified domain name (FQDN). The submitted domain is automatically checked against the enumeration scope before being processed.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    -- Discover subdomain names\n\n    new_name(ctx, fqdn)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Amass in Active Mode for Enhanced Reconnaissance\nDESCRIPTION: Active mode performs Normal mode operations plus reaches out to discovered assets to obtain TLS certificates, perform DNS zone transfers, use NSEC walking, and perform web crawling.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\namass enum -active -d example.com -p 80,443,8080\n```\n\n----------------------------------------\n\nTITLE: Handling IP Addresses in Lua for Amass Script\nDESCRIPTION: Example of the 'address' callback function used to discover additional subdomain names and IP addresses within scope during Amass enumeration.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction address(ctx, addr)\n    -- Send back a related subdomain name\n    new_name(ctx, name)\n    -- Send back a related IP address\n    new_addr(ctx, ipaddr, domain)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Amass in Passive Mode for Data Source Collection\nDESCRIPTION: Passive mode only obtains information from data sources without performing additional validation, blindly accepting the collected information.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\namass enum --passive -d example.com\n```\n\n----------------------------------------\n\nTITLE: Horizontal Domain Correlation in Lua for Amass Script\nDESCRIPTION: Implementation of the 'horizontal' callback function for discovering and sending back associated domain names during horizontal domain correlation in Amass.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nfunction horizontal(ctx, domain)\n    -- Send back an associated domain name\n    associated(ctx, domain, assoc)\nend\n```\n\n----------------------------------------\n\nTITLE: Running Amass in Active Mode with Advanced Configuration\nDESCRIPTION: This command shows how to run Amass in active mode with multiple techniques enabled, including subdomain brute-forcing, custom wordlists, and IP resolution. Active mode provides more accurate results as it validates DNS information.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ amass enum -active -d owasp.org -brute -w /root/dns_lists/deepmagic.com-top50kprefixes.txt -ip -dir amass4owasp -config /root/amass/config.yaml -o amass_results_owasp.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit in Lua for Amass Script\nDESCRIPTION: Example of the 'start' callback function used to set the rate limit for an Amass data source script at the beginning of the enumeration process.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nfunction start()\n    set_rate_limit(1)\nend\n```\n\n----------------------------------------\n\nTITLE: Running Amass in Passive Mode for Subdomain Enumeration\nDESCRIPTION: This command demonstrates how to run Amass in passive mode to discover subdomains for a target domain (owasp.org). Passive mode is quicker but doesn't validate DNS information by resolving the discovered subdomains.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ amass enum -passive -d owasp.org\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limits with set_rate_limit() Function in Lua\nDESCRIPTION: This function sets the number of seconds to wait between each execution of a callback function. It helps control the rate of requests made by the script.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nfunction start()\n    set_rate_limit(2)\nend\n```\n\n----------------------------------------\n\nTITLE: Running Amass using Docker Container\nDESCRIPTION: Command to run OWASP Amass using Docker, with volume mapping to persist the database between executions and access output files on the host system.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v OUTPUT_DIR_PATH:/.config/amass/ caffix/amass enum -d example.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Discovered Subdomain Names from Amass Database\nDESCRIPTION: This command shows how to interact with the Amass graph database to list all the subdomain names discovered during previous enumerations against a specific domain.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ amass db -dir amass4owasp -names -d owasp.org\n```\n\n----------------------------------------\n\nTITLE: Advanced DNS Enumeration with Amass in Bash\nDESCRIPTION: Demonstrates typical parameters for DNS enumeration with brute force enabled and minimum recursive search depth set to 2.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ amass enum -brute -min-for-recursive 2 -d example.com\nexample.com (FQDN) --> node --> www.example.com (FQDN)\nwww.example.com (FQDN) --> a_record --> 123.456.789.01 (IPAddress)\n...\n```\n\n----------------------------------------\n\nTITLE: Discovering ASN Information by Organization Name\nDESCRIPTION: Example command showing how to use Amass intel to find ASN IDs assigned to a target organization by searching for the organization name.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ amass intel -org 'Example Ltd'\n111111, MAIN_PRODUCT -- Example Ltd\n222222, SECONDARY_PRODUCT - Example Ltd\n[...]\n```\n\n----------------------------------------\n\nTITLE: Running Amass via Docker Container\nDESCRIPTION: Demonstrates how to execute Amass using Docker with volume mapping for persistent storage, allowing the graph database to persist between executions.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v OUTPUT_DIR_PATH:/.config/amass/ caffix/amass:latest enum --list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains from an ASN with IP Resolution\nDESCRIPTION: A command demonstrating how to use Amass intel to retrieve registered domains within a specified ASN and return them along with their resolved IP addresses.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ amass intel -active -asn 222222 -ip\nsome-example-ltd-domain.com 127.0.0.1\n[...]\n```\n\n----------------------------------------\n\nTITLE: Installing Amass using Homebrew\nDESCRIPTION: Commands for installing OWASP Amass using the Homebrew package manager on macOS or Linux systems.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap owasp-amass/amass\nbrew install amass\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Settings with config() Function in Lua\nDESCRIPTION: This function obtains the configuration of the current enumeration process. It returns a table containing various configuration settings such as mode, event_id, DNS settings, scope parameters, brute forcing and alterations settings.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local cfg = config(ctx)\n\n    print(cfg.mode)\nend\n```\n\n----------------------------------------\n\nTITLE: Building OWASP Amass Docker Image\nDESCRIPTION: Command to build a Docker image for OWASP Amass directly from the GitHub repository. This creates a containerized version of the tool that can be run in isolation.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t amass https://github.com/owasp-amass/amass.git\n```\n\n----------------------------------------\n\nTITLE: Using Connection recv_all Method in Lua for Amass Network Data Reading\nDESCRIPTION: The recv_all method reads all available bytes from a connection until EOF. It returns the complete data as a string on success and an error string on failure.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local conn, err = socket.connect(ctx, \"owasp.org\", 80, \"tcp\")\n    if (err ~= nil and err ~= \"\") then\n        log(ctx, err)\n        return\n    end\n\n    local data\n\tdata, err = conn:recv_all()\n\tif (err ~= nil and err ~= \"\") then\n\t\tlog(ctx, err)\n        conn:close()\n        return\n    end\n\n    use_data(data)\n    conn:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Running OWASP Amass with Wordlist in Docker\nDESCRIPTION: Command to run OWASP Amass in Docker with brute forcing enabled, using a specific wordlist from the examples directory. Includes sharing results with the OWASP Amass project.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v OUTPUT_DIR_PATH:/.config/amass/ amass enum -brute -w /wordlists/all.txt -share -d example.com\n```\n\n----------------------------------------\n\nTITLE: Using Connection send Method in Lua for Amass Network Data Sending\nDESCRIPTION: The send method transmits the provided data to a network connection. It returns the number of bytes sent on success and an error string on failure, requiring proper error handling.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nfunction asn(ctx, addr, asn)\n    local conn, err = socket.connect(ctx, \"whois.owasp.org\", 43, \"tcp\")\n    if (err ~= nil and err ~= \"\") then\n        log(ctx, err)\n        return\n    end\n\n    local n\n\tn, err = conn:send(\"prefix \" .. tostring(asn) .. \"\\n\")\n\tif (err ~= nil and err ~= \"\") then\n\t\tlog(ctx, err)\n        conn:close()\n        return\n    end\n\n    read_netblocks(conn)\n    conn:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass with Homebrew\nDESCRIPTION: Commands to install OWASP Amass using Homebrew package manager. This first adds the official Amass tap and then installs the package.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap owasp-amass/amass\nbrew install amass\n```\n\n----------------------------------------\n\nTITLE: Writing to Log File with log() Function in Lua\nDESCRIPTION: This function allows a script to contribute to the enumeration log file by sending a message. It takes the context and a string message as parameters.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nfunction sendmsg(ctx, msg)\n    log(ctx, msg)\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete Enumeration Results with IP Addresses\nDESCRIPTION: This command demonstrates how to retrieve complete enumeration results including IP addresses from the Amass graph database for a specific domain.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ amass db -dir amass4owasp -d owasp.org -show -ip\n```\n\n----------------------------------------\n\nTITLE: Accessing Brute Force Wordlist with brute_wordlist() Function in Lua\nDESCRIPTION: This function retrieves the wordlist used for brute forcing by the current enumeration process. It returns an array of strings containing all words in the wordlist.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local wordlist = brute_wordlist(ctx)\n\n    for i, word in pairs(wordlist) do\n        print(word)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Performing WHOIS-based Domain Discovery with Amass Intel\nDESCRIPTION: A command that uses Amass intel with WHOIS to discover parent domains owned by an organization, using owasp.org as the input domain.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ amass intel -d owasp.org -whois\nappseceu.com\nowasp.com\nappsecasiapac.com\nappsecnorthamerica.com\nappsecus.com\n[...]\nowasp.org\nappsecapac.com\nappsecla.org\n[...]\n```\n\n----------------------------------------\n\nTITLE: Installing Amass from Source using Go\nDESCRIPTION: Command for downloading and installing OWASP Amass from source code using Go. This requires Go to be installed and configured on the system.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/owasp-amass/amass/v4/...@master\n```\n\n----------------------------------------\n\nTITLE: Using Hashcat-Style Masks for Targeted Subdomain Brute-Forcing\nDESCRIPTION: This command demonstrates how to use Amass with hashcat-style wordlist masks to brute-force specific subdomain patterns. The example targets subdomains with the pattern 'zzz-' followed by three lowercase letters.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ amass enum -d owasp.org -norecursive -wm \"zzz-?l?l?l\" -dir amass4owasp\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass from Source\nDESCRIPTION: Command to install OWASP Amass from source code using Go. Requires Go 1.18 or higher correctly configured in the environment. The binary will be installed to $GOPATH/bin.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/owasp-amass/amass/v4/...@master\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with request() Function in Lua\nDESCRIPTION: This function performs HTTP(S) client requests for Amass data source scripts. It accepts an options table with method, data, URL, headers, and authentication parameters, and returns the page content and an error value.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local url = \"https://\" .. domain\n    local resp, err = request(ctx, {\n        method=\"POST\",\n        data=body,\n        ['url']=url,\n        headers={['Content-Type']=\"application/json\"},\n        id=api[\"key\"],\n        pass=api[\"secret\"],\n    })\n    if (err ~= nil and err ~= \"\") then\n        return\n    end\n\n    -- Utilize the content provided in the response\nend\n```\n\n----------------------------------------\n\nTITLE: Running OWASP Amass Docker Image\nDESCRIPTION: Command to run the OWASP Amass Docker image with a mounted volume to persist the graph database and access output files. This example lists the available enumeration modules.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v OUTPUT_DIR_PATH:/.config/amass/ amass enum --list\n```\n\n----------------------------------------\n\nTITLE: Listing Amass Intel Usage Options\nDESCRIPTION: Example of running the amass intel command without arguments to display available options including active certificate grabs, IP address ranges, and ASN specifications.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ amass intel\n[...]\nUsage: amass intel [options] [-whois -d DOMAIN] [-addr ADDR -asn ASN -cidr CIDR]\n  -active\n        Attempt certificate name grabs\n  -addr value\n        IPs and ranges (192.168.1.1-254) separated by commas\n  -asn value\n        ASNs separated by commas (can be used multiple times)\n[...]\n```\n\n----------------------------------------\n\nTITLE: Displaying Amass Help Information in Bash\nDESCRIPTION: Shows how to display the help information for the Amass tool, providing access to available options and commands.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\namass -help\n```\n\n----------------------------------------\n\nTITLE: Scraping Subdomain Names with scrape() Function in Lua\nDESCRIPTION: This function performs HTTP(S) client requests and automatically checks the response body for subdomain names in scope. It returns a boolean indicating success and if any subdomains were found.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local url = \"https://\" .. domain\n    local ok = scrape(ctx, {\n        ['url']=url,\n        headers={['Accept']=\"text/*, text/html, text/html;level=1, */*\"},\n        id=api[\"username\"],\n        pass=api[\"password\"],\n    })\nend\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on Pentoo Linux\nDESCRIPTION: Command to install OWASP Amass on Pentoo Linux using the emerge package manager.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo emerge net-analyzer/amass\n```\n\n----------------------------------------\n\nTITLE: Web Crawling with crawl() Function in Lua\nDESCRIPTION: This function performs HTTP(S) web crawling/spidering and automatically checks response bodies for in-scope subdomain names. The crawler will follow up to 'max' links or unlimited links if max is set to 0.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local url = \"https://\" .. domain\n\n    crawl(ctx, url, 50)\nend\n```\n\n----------------------------------------\n\nTITLE: Browser User Agent String Collection\nDESCRIPTION: Collection of browser user agent strings representing different browser and OS combinations. Includes major browsers like Chrome, Firefox, Safari, Edge and Internet Explorer across Windows, macOS and Linux platforms. These strings can be used for web scraping configuration or browser fingerprinting tests.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/resources/user_agents.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0\n[...additional user agent strings...]\n```\n\n----------------------------------------\n\nTITLE: Using resolve Function in Lua for Amass DNS Queries\nDESCRIPTION: The resolve function allows Amass data source scripts to perform DNS queries for specific resource records. It returns a table of DNS records containing name, type, and data fields, which can be used to discover new domain names.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nfunction subdomain(ctx, name, domain, times)\n    if times ~= 1 then\n        return\n    end\n\n    local records, err = resolve(ctx, name, \"NS\", false)\n    if (err ~= nil and err ~= \"\") then\n        return\n    end\n\n    for _, record in pairs(records) do\n        new_name(ctx, record.rrname)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using socket.connect Function in Lua for Amass TCP Connections\nDESCRIPTION: The socket.connect function allows Amass data source scripts to establish TCP connections to specified hosts and ports. It returns a connection object that must be explicitly closed to release resources.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local conn, err = socket.connect(ctx, \"owasp.org\", 80, \"tcp\")\n    if (err ~= nil and err ~= \"\") then\n        log(ctx, err)\n        return\n    end\n\n    conn:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Amass Version in Bash\nDESCRIPTION: Demonstrates how to check the version of the installed Amass tool, useful for verifying the current installation.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\namass -version\n```\n\n----------------------------------------\n\nTITLE: Using new_addr Function in Lua for Amass IP Address Discovery\nDESCRIPTION: The new_addr function allows Amass data source scripts to submit a discovered IP address. The fqdn parameter is automatically checked against the enumeration scope.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    -- Discover subdomain names and associated IP addresses\n\n    new_addr(ctx, addr, fqdn)\nend\n```\n\n----------------------------------------\n\nTITLE: Using new_asn Function in Lua for Amass Autonomous System Information\nDESCRIPTION: The new_asn function allows Amass data source scripts to submit discovered autonomous system information related to the provided addr or asn parameters. It accepts a table with AS details including address, ASN number, prefix, country code, registry, description, and netblocks.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nfunction asn(ctx, addr, asn)\n    -- Send back the related AS information\n    new_asn(ctx, {\n        ['addr']=addr,\n        ['asn']=tonumber(asn),\n        ['prefix']=cidr,\n        ['cc']=\"US\",\n        ['registry']=\"ARIN\",\n        ['desc']=desc,\n        ['netblocks']={cidr},\n    })\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Pattern Matches with find() Function in Lua\nDESCRIPTION: This function performs regular expression pattern matching. It accepts content to search and a Go-compatible regex pattern, returning a table of all matches found in the provided string.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local url = \"https://\" .. domain\n    local page, err = request({['url']=url})\n    if (err ~= nil and err ~= \"\") then\n        return\n    end\n\n    local matches = find(page, subdomainre)\n    if (matches == nil or #matches == 0) then\n        return\n    end\n\n    for i, sub in pairs(matches) do\n        new_name(ctx, sub)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Extracting Submatches with submatch() Function in Lua\nDESCRIPTION: This function performs regex pattern matching with support for submatches. It returns a table of tables, each containing the leftmost match and its submatches in a 1-based array structure.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local url = \"https://\" .. domain\n    local page, err = request({['url']=url})\n    if (err ~= nil and err ~= \"\") then\n        return\n    end\n\n    -- Create the pattern that contains submatches\n\n    local matches = submatch(page, pattern)\n    if (matches == nil or #matches == 0) then\n        return\n    end\n\n    local first = matches[1]\n    -- Send the first submatch\n    if (first ~= nil and #first >=2 and first[2] ~= \"\") then\n        new_name(ctx, first[2])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Connection recv Method in Lua for Amass Network Data Reading\nDESCRIPTION: The recv method reads at least the specified number of bytes from a connection. It returns the read data as a string on success and an error string on failure, requiring proper error handling.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local conn, err = socket.connect(ctx, \"owasp.org\", 80, \"tcp\")\n    if (err ~= nil and err ~= \"\") then\n        log(ctx, err)\n        return\n    end\n\n    local data\n\tdata, err = conn:recv(32)\n\tif (err ~= nil and err ~= \"\") then\n\t\tlog(ctx, err)\n        conn:close()\n        return\n    end\n\n    use_data(data)\n    conn:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Subdomains in Lua for Amass Script\nDESCRIPTION: Implementation of the 'subdomain' callback function that handles proper subdomain names discovered during Amass enumeration, with conditional crawling based on discovery frequency.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction subdomain(ctx, name, domain, times)\n    if times == 1 then\n        crawl(ctx, \"https://\" .. name, 0)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Domain Scope with in_scope() Function in Lua\nDESCRIPTION: This function checks if a subdomain name is in scope of the current enumeration process. Returns true if the name is in scope and false otherwise.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nfunction get_names(ctx, sub)\n    if in_scope(ctx, sub) then\n        crawl(ctx, \"https://\" .. sub, 0)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Enforcing Rate Limits with check_rate_limit() Function in Lua\nDESCRIPTION: This function checks if the rate limit bucket has been exceeded, and if so, blocks for the appropriate amount of time. It helps maintain the rate limits set by set_rate_limit().\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    -- Obtain several subdomain names\n    for i, n in pairs(subs) do\n        check_rate_limit()\n        crawl(ctx, \"https://\" .. n, 0)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Vertical Domain Correlation in Lua for Amass Script\nDESCRIPTION: Implementation of the 'vertical' callback function for discovering and sending back subdomain names during vertical domain correlation in Amass.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    -- Send back discovered subdomain names\n    new_name(ctx, name)\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Resolved DNS Names in Lua for Amass Script\nDESCRIPTION: Example of the 'resolved' callback function that is executed after successfully resolving a DNS name during Amass enumeration, demonstrating how to initiate crawling.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nfunction resolved(ctx, name, domain, records)\n    crawl(ctx, \"https://\" .. name, 0)\nend\n```\n\n----------------------------------------\n\nTITLE: Processing ASN Information in Lua for Amass Script\nDESCRIPTION: Implementation of the 'asn' callback function for obtaining and sending back autonomous system (AS) information during Amass enumeration.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction asn(ctx, addr, asn)\n    -- Send back the related AS information\n    new_asn(ctx, {\n        ['addr']=addr,\n        ['asn']=tonumber(asn),\n        ['desc']=desc,\n        prefix=cidr,\n        cc=\"US\",\n        registry=\"ARIN\",\n        netblocks={cidr},\n    })\nend\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on Kali Linux\nDESCRIPTION: Commands to install or update OWASP Amass on Kali Linux using apt. Note that Amass comes pre-installed on Kali Linux.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\napt-get install amass\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on FreeBSD\nDESCRIPTION: Commands to install OWASP Amass on FreeBSD, showing both the ports collection method and the package manager method.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/ports/dns/amass/ && make install clean\npkg install amass\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on DragonFly BSD\nDESCRIPTION: Commands to install OWASP Amass on DragonFly BSD using the package manager. First updates the package database, then installs Amass.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npkg upgrade\npkg install amass\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on Nix or NixOS\nDESCRIPTION: Command to install OWASP Amass on Nix or NixOS systems using the Nix package manager.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -f '<nixpkgs>' -iA amass\n```\n\n----------------------------------------\n\nTITLE: Installing OWASP Amass on Parrot Linux\nDESCRIPTION: Commands to install OWASP Amass on Parrot Linux using apt package manager. First updates the package database, then installs Amass.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\napt-get update\napt-get install amass\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection in YAML\nDESCRIPTION: This YAML configuration snippet sets up the database connection string for OWASP Amass to use PostgreSQL. It specifies the database URL with credentials and additional parameters.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  database: \"postgres://username:password@localhost:5432/assetdb?testing=works\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database for OWASP Amass\nDESCRIPTION: These commands create a new database named 'assetdb' and set its timezone to UTC. They are executed using the psql tool to prepare the PostgreSQL environment for OWASP Amass.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/user_guide.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npsql postgres://username:password@localhost:5432/ -c \"CREATE DATABASE assetdb\"\npsql postgres://username:password@localhost:5432/ -c \"ALTER DATABASE assetdb SET TIMEZONE to 'UTC'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Amass Output Directory with output_dir() Function in Lua\nDESCRIPTION: This function requests the filepath to the Amass output directory. The returned path can be relative and is useful for accessing or creating files in the Amass output location.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nfunction get_bin(ctx)\n    local path = output_dir(ctx)\n\n    return path .. \"/bin\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Connection close Method in Lua for Amass Resource Cleanup\nDESCRIPTION: The close method releases resources and closes the network connection. It's essential to call this method when finished with a connection to prevent resource leaks.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nfunction asn(ctx, addr, asn)\n    local conn, err = socket.connect(ctx, \"whois.owasp.org\", 43, \"tcp\")\n    if (err ~= nil and err ~= \"\") then\n        log(ctx, err)\n        return\n    end\n\n    conn:close()\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Stop Callback in Lua for Amass Script\nDESCRIPTION: Example of the 'stop' callback function that can be used for cleanup code at the end of the Amass enumeration process.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction stop()\n    -- Cleanup code, etc.\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Alterations Wordlist with alt_wordlist() Function in Lua\nDESCRIPTION: This function retrieves the wordlist used for name alterations by the current enumeration process. It returns an array of strings containing all words used for domain name alterations.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction vertical(ctx, domain)\n    local wordlist = alt_wordlist(ctx)\n\n    for i, word in pairs(wordlist) do\n        print(word)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting File Modification Time with mtime() Function in Lua\nDESCRIPTION: This function requests the file modification time associated with the provided path. Returns zero if the file could not be accessed or does not exist.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/scripting.md#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nfunction file_unix_mtime(path)\n    return mtime(path)\nend\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Fork Setup\nDESCRIPTION: Commands for setting up a fork of the Amass repository and configuring remote repositories for contribution\nSOURCE: https://github.com/owasp-amass/amass/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote rename origin upstream\ngit remote add origin git@github.com:foo/amass.git\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Syncing Fork\nDESCRIPTION: Commands for pulling updates from the original Amass repository into your fork\nSOURCE: https://github.com/owasp-amass/amass/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Updating Packages on Pentoo Linux\nDESCRIPTION: Command to update all packages on Pentoo Linux, which would include updating OWASP Amass if installed.\nSOURCE: https://github.com/owasp-amass/amass/blob/master/doc/install.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo pentoo-updater\n```\n\n----------------------------------------\n\nTITLE: Go Format Command\nDESCRIPTION: Command to format Go code according to standard conventions using gofmt\nSOURCE: https://github.com/owasp-amass/amass/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo fmt ./...\n```"
  }
]