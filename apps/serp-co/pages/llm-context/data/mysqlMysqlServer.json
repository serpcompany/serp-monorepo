[
  {
    "owner": "mysql",
    "repo": "mysql-server",
    "content": "TITLE: Alternative Compiler Detection for RHEL and SUSE\nDESCRIPTION: Implements a sophisticated mechanism to detect and configure alternative compilers for different Linux distributions, with specific handling for RHEL and SUSE Linux versions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX_RHEL AND NOT LINUX_RHEL10)\n  FOREACH(OPT_PATH ${ALTERNATIVE_PATHS})\n    FIND_PROGRAM(ALTERNATIVE_GCC gcc\n      NO_DEFAULT_PATH\n      PATHS \"${OPT_PATH}/root/usr/bin\")\n    FIND_PROGRAM(ALTERNATIVE_GPP g++\n      NO_DEFAULT_PATH\n      PATHS \"${OPT_PATH}/root/usr/bin\")\n  ENDFOREACH()\n\n  IF(ALTERNATIVE_GCC AND ALTERNATIVE_GPP)\n    SET(CMAKE_C_COMPILER ${ALTERNATIVE_GCC})\n    SET(CMAKE_CXX_COMPILER ${ALTERNATIVE_GPP})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Authentication Plugins in CMake\nDESCRIPTION: This snippet adds multiple authentication plugins to MySQL Server using the MYSQL_ADD_PLUGIN macro. Each plugin is specified with its source file and configuration options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/auth/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(auth dialog.cc \n  MODULE_ONLY\n  TEST_ONLY\n  SERVER_AND_CLIENT\n  )\nMYSQL_ADD_PLUGIN(auth_test_plugin\n  test_plugin.cc \n  MODULE_ONLY\n  TEST_ONLY\n  SERVER_AND_CLIENT\n  )\nMYSQL_ADD_PLUGIN(qa_auth_interface\n  qa_auth_interface.cc \n  MODULE_ONLY\n  TEST_ONLY\n  SERVER_AND_CLIENT\n  )\nMYSQL_ADD_PLUGIN(qa_auth_server\n  qa_auth_server.cc \n  MODULE_ONLY\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(qa_auth_client\n  qa_auth_client.cc \n  MODULE_ONLY\n  TEST_ONLY\n  CLIENT_ONLY\n  )\nMYSQL_ADD_PLUGIN(mysql_no_login\n  mysql_no_login.cc \n  MODULE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Core Client Programs\nDESCRIPTION: CMake configuration for building core MySQL client programs including mysql CLI client, mysqltest, mysqlcheck, mysqldump, mysqlimport and mysqlshow. Each program is configured with required source files and linked against the mysqlclient library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql\n  ${CMAKE_SOURCE_DIR}/sql-common/net_ns.cc\n  completion_hash.cc\n  mysql.cc\n  pattern_matcher.cc\n  readline.cc\n  client_query_attributes.cc\n  multi_factor_passwordopt-vars.cc\n  multi_option.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/common/user_registration.cc\n  ${CMAKE_SOURCE_DIR}/sql-common/sql_string.cc\n  LINK_LIBRARIES mysqlclient ${EDITLINE_LIBRARY}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Unit Test Library Build\nDESCRIPTION: Builds a comprehensive unit test library for server components when both server and unit tests are enabled. This provides either a shared or static library depending on configuration settings, with special handling for visibility, linking, and compiler warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WITHOUT_SERVER AND WITH_UNIT_TESTS)\n\n  IF(WITH_SHARED_UNITTEST_LIBRARY)\n    MERGE_LIBRARIES_SHARED(server_unittest_library SKIP_INSTALL LINK_PUBLIC\n      sql_main\n      ${MYSQLD_STATIC_PLUGIN_LIBS}\n      minchassis\n      ext::icu\n      # Import some core symbols. Other symbols needed by the unit test\n      # executables are pulled in transitively by symbol dependencies.\n      #\n      # Since everything has visibility(\"default\") the library will\n      # export every symbol pulled in from the source libraries.\n      #\n      # If some symbols are still missing, they will be picked up from\n      # dependent libraries, since we LINK_PUBLIC.\n      # To see what symbols we need to import, remove LINK_PUBLIC above.\n      #\n      # The strings library uses visibility=hidden for all symbols,\n      # except those explicitly tagged with MYSQL_STRINGS_EXPORT.\n      # If we get ODR violations for executables using server_unittest_library,\n      # it means the symbol has been found in strings and\n      # server_unittest_library, which means the unit test is using\n      # some non-exported symbol from strings.\n      EXPORTS\n      builtin_perfschema_plugin            # Pulls in the whole server.\n      mysql_service_mysql_rwlock_v1        # Pulls in minchassis\n      )\n    IF(HAVE_LIBNUMA)\n      TARGET_LINK_LIBRARIES(server_unittest_library PUBLIC numa)\n    ENDIF()\n    IF(WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO)\n      # We may get errors in boost/geometry/srs/projections/proj/ob_tran.hpp\n      # and several other boost files.\n      MY_CHECK_CXX_COMPILER_WARNING(\"error=maybe-uninitialized\" HAS_WARN_FLAG)\n      IF(HAS_WARN_FLAG)\n        TARGET_LINK_OPTIONS(server_unittest_library PRIVATE ${HAS_WARN_FLAG})\n      ENDIF()\n      # The mold linker and RelWithDebInfo build complains about\n      # the new expression in Rpl_info_values::init()\n      # We get stringop warnings in functions generated by protobuf.\n      IF(MY_COMPILER_IS_GNU)\n        TARGET_LINK_OPTIONS(server_unittest_library PRIVATE\n          -Wno-alloc-size-larger-than\n          -Wno-stringop-overflow\n          )\n      ENDIF()\n    ENDIF()\n  ELSE()\n    SET(DUMMY_SOURCE_FILE ${CMAKE_BINARY_DIR}/server_unittest_library.c)\n    ADD_CUSTOM_COMMAND(\n      OUTPUT  ${DUMMY_SOURCE_FILE}\n      COMMAND ${CMAKE_COMMAND} -E touch ${DUMMY_SOURCE_FILE}\n      DEPENDS sql_main\n      )\n    SET(MYSQLD_EXTRA_SOURCES)\n    IF(WIN32)\n      LIST(APPEND MYSQLD_EXTRA_SOURCES ${CMAKE_SOURCE_DIR}/sql/nt_servc.cc)\n    ENDIF()\n    ADD_LIBRARY(server_unittest_library STATIC\n      ${DUMMY_SOURCE_FILE} ${MYSQLD_EXTRA_SOURCES})\n    TARGET_LINK_LIBRARIES(server_unittest_library perfschema)\n    TARGET_LINK_LIBRARIES(server_unittest_library sql_main)\n    TARGET_LINK_LIBRARIES(server_unittest_library minchassis)\n    TARGET_LINK_LIBRARIES(server_unittest_library ext::icu)\n    TARGET_LINK_LIBRARIES(server_unittest_library binlog)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating InnoDB Plugin Target\nDESCRIPTION: Defines the main InnoDB storage engine plugin target using MYSQL_ADD_PLUGIN, including required source files, dependencies, and linking configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_PLUGIN(innobase\n  ${INNOBASE_SOURCES} ${INNOBASE_ZIP_DECOMPRESS_SOURCES} STORAGE_ENGINE\n  MANDATORY\n  MODULE_OUTPUT_NAME ha_innodb\n  LINK_LIBRARIES sql_dd sql_gis ext::zlib ext::lz4 ${NUMA_LIBRARY}\n                 extra::rapidjson library_mysys)\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Configuration and Project Settings\nDESCRIPTION: Sets up project version, shared library options, and install dependencies. Includes checks for proper build directory setup and compiler detection.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(BUILD_SHARED_LIBS \"Build shared libraries by default\" OFF)\nIF(BUILD_SHARED_LIBS)\n  MESSAGE(WARNING \"Do not set BUILD_SHARED_LIBS to ON/TRUE\")\n  SET(BUILD_SHARED_LIBS OFF)\n  SET(BUILD_SHARED_LIBS OFF CACHE INTERNAL \"\" FORCE)\nENDIF()\n\nOPTION(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\n  \"Target 'install' does not depend on 'all'\" OFF)\nIF(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY)\n  MESSAGE(WARNING \"Do not set CMAKE_SKIP_INSTALL_ALL_DEPENDENCY to ON/TRUE\")\n  SET(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY OFF)\n  SET(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY OFF CACHE INTERNAL \"\" FORCE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Using Memory_resource for Performance Schema Instrumentation in MySQL\nDESCRIPTION: Example of using the Memory_resource class to allocate memory in a way that can be optionally instrumented with Performance Schema. Library authors should accept Memory_resource by value with a default constructor, while MySQL server users can obtain an instrumented resource via psi_memory_resource().\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/allocators/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nMemory_resource parameter // For library authors\n\npsi_memory_resource(Psi_memory_key) // For MySQL server users\n\nMemory_resource() // Default for external users\n```\n\n----------------------------------------\n\nTITLE: Defining CHARSET_INFO Structure in C\nDESCRIPTION: The CHARSET_INFO structure encapsulates data relevant to character set and collation pairs. It includes information such as unique identifiers, names, conversion tables, and parser maps, required for nuanced text handling within a MySQL database. Dependencies include knowledge of various character set specifics, collation details, and related handler routines.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct CHARSET_INFO\n{\n  unsigned  number;\n  unsigned  primary_number;\n  unsigned  binary_number;\n  unsigned  state;\n\n  const char *csname;\n  const char *m_coll_name;\n  const char *comment;\n\n  const uint8_t *ctype;\n  const uint8_t *to_lower;\n  const uint8_t *to_upper;\n  const uint8_t *sort_order;\n\n  const uint16_t   *tab_to_uni;\n  const MY_UNI_IDX *tab_from_uni;\n\n  uint8_t state_map[256];\n  uint8_t ident_map[256];\n\n  unsigned  strxfrm_multiply;\n  unsigned  mbminlen;\n  unsigned  mbmaxlen;\n  unsigned  mbmaxlenlen;\n  uint16_t  max_sort_char; /* For LIKE optimization */\n\n  MY_CHARSET_HANDLER *cset;\n  MY_COLLATION_HANDLER *coll;\n\n  Pad_attribute pad_attribute;\n\n};\n```\n\n----------------------------------------\n\nTITLE: Decoding Chunked Transfer Encoding in C\nDESCRIPTION: This snippet shows how to decode incoming data in chunked transfer encoding using the `phr_decode_chunked` function from PicoHTTPParser. It manages buffer expansion and handles potential errors during the decoding process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/picohttpparser/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct phr_chunked_decoder decoder = {}; /* zero-clear */\nchar *buf = malloc(4096);\nsize_t size = 0, capacity = 4096, rsize;\nssize_t rret, pret;\n\n/* set consume_trailer to 1 to discard the trailing header, or the application\n * should call phr_parse_headers to parse the trailing header */\ndecoder.consume_trailer = 1;\n\ndo {\n    /* expand the buffer if necessary */\n    if (size == capacity) {\n        capacity *= 2;\n        buf = realloc(buf, capacity);\n        assert(buf != NULL);\n    }\n    /* read */\n    while ((rret = read(sock, buf + size, capacity - size)) == -1 && errno == EINTR)\n        ;\n    if (rret <= 0)\n        return IOError;\n    /* decode */\n    rsize = rret;\n    pret = phr_decode_chunked(&decoder, buf + size, &rsize);\n    if (pret == -1)\n        return ParseError;\n    size += rsize;\n} while (pret == -2);\n\n/* successfully decoded the chunked data */\nassert(pret >= 0);\nprintf(\"decoded data is at %p (%zu bytes)\\n\", buf, size);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Data Directory (8.0.11+)\nDESCRIPTION: Command for initializing a new data directory for MySQL 8.0.11 and later versions with specific configuration parameters for cross-platform compatibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mysqld --initialize-insecure --datadir=/tmp/8_0_11 --console --lower_case_table_names=1 --innodb_log_file_size=4M\n```\n\n----------------------------------------\n\nTITLE: Merging MySQL Client Libraries in CMake\nDESCRIPTION: Merges multiple convenience libraries into one comprehensive mysqlclient library. This creates the final client library that applications can link against to connect to MySQL servers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nMERGE_CONVENIENCE_LIBRARIES(mysqlclient ${LIBS_TO_MERGE}\n  COMPONENT Development\n  LINK_LIBRARIES ${LIBS_TO_LINK}\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Build Type Configuration\nDESCRIPTION: Sets up the build type (debug or release) based on user preferences. If WITH_DEBUG is enabled, it forces CMAKE_BUILD_TYPE to Debug; otherwise, it defaults to RelWithDebInfo for optimized builds with debugging information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED CMAKE_BUILD_TYPE)\n  SET(HAVE_CMAKE_BUILD_TYPE TRUE)\nENDIF()\n\nOPTION(WITH_DEBUG \"Use dbug/safemutex\" OFF)\nOPTION(CHECK_ERRMSG_FORMAT \"Check printf format for English error messages\" OFF)\n\nOPTION(DISABLE_ALL_PSI \"DISABLE all calls to the PSI interface\" OFF)\nMARK_AS_ADVANCED(DISABLE_ALL_PSI)\n\n# Use a default manufacturer if no manufacturer was identified.\nSET(MANUFACTURER_DOCSTRING\n  \"Set the entity that appears as the manufacturer of packages that support a manufacturer field.\")\nIF(NOT DEFINED MANUFACTURER) \n  SET(MANUFACTURER \"Built from Source\" CACHE  STRING ${MANUFACTURER_DOCSTRING})\n  MARK_AS_ADVANCED(MANUFACTURER)\nENDIF()\n\n\n# MAX_INDEXES - Set the maximum number of indexes per table, default 64U\nIF (NOT MAX_INDEXES)\n  SET(MAX_INDEXES 64U)\nELSEIF(MAX_INDEXES MATCHES \"^[0-9]+[Uu]?$\")\n  # MAX_INDEXES should be unsigned, so add the U suffix if it's missing.\n  STRING(REGEX REPLACE \"^([0-9]+).*$\" \"\\\\1U\" MAX_INDEXES \"${MAX_INDEXES}\")\n  MESSAGE(STATUS \"Configuring with MAX_INDEXES = ${MAX_INDEXES}\")\nELSE()\n  MESSAGE(FATAL_ERROR \"MAX_INDEXES should be an unsigned integer.\")\nENDIF(NOT MAX_INDEXES)\n\nIF(MAX_INDEXES GREATER 255)\n  MESSAGE(FATAL_ERROR \"MAX_INDEXES values greater than 255 is not supported!\")\nELSEIF(MAX_INDEXES LESS 64)\n  # Per documentation, ignore values less than 64 and use the default instead.\n  MESSAGE(WARNING \"MAX_INDEXES option ignored because it is less than 64.\")\n  SET(MAX_INDEXES 64U)\nENDIF()\n\n# We choose to provide WITH_DEBUG as alias to standard CMAKE_BUILD_TYPE=Debug\n# which turns out to be not trivial, as this involves synchronization \n# between CMAKE_BUILD_TYPE and WITH_DEBUG. Besides, we have to deal with cases\n# where WITH_DEBUG is  reset from ON to OFF  and here we need to reset \n# CMAKE_BUILD_TYPE to either none or default RelWithDebInfo\n\nSET(BUILDTYPE_DOCSTRING\n \"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or\n CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel\")\n\nIF(WITH_DEBUG)\n  SET(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING ${BUILDTYPE_DOCSTRING} FORCE)\n  SET(OLD_WITH_DEBUG 1 CACHE INTERNAL \"\" FORCE)\nELSEIF(NOT HAVE_CMAKE_BUILD_TYPE OR OLD_WITH_DEBUG)\n  IF(CMAKE_BUILD_TYPE MATCHES \"Debug\" OR NOT HAVE_CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \n       ${BUILDTYPE_DOCSTRING} FORCE)\n  ENDIF()\n  SET(OLD_WITH_DEBUG 0 CACHE INTERNAL \"\" FORCE)\nENDIF()\n\nSTRING(TOUPPER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Using CMake on Windows\nDESCRIPTION: This snippet uses CMake's IF and ENDIF statements to conditionally add a custom executable file named 'echo' by calling MYSQL_ADD_EXECUTABLE with the source file echo.cc. It is conditioned to compile only on Windows systems, as indicated by the WIN32 macro variable. The snippet ensures that the executable is included only when compiling on Windows, which includes both 32-bit and 64-bit architectures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# \"WIN32\" also covers 64 bit. \"echo\" is used in some files below \"mysql-test/\".\nIF(WIN32)\n  MYSQL_ADD_EXECUTABLE(echo echo.cc)\nENDIF(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Creating gen_lex_token Executable for MySQL Server SQL in CMake\nDESCRIPTION: This snippet creates a custom executable 'gen_lex_token' used in the build process. It also handles compiler warnings related to missing profiles for specific source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(gen_lex_token\n  gen_lex_token.cc\n  DEPENDENCIES GenServerSource\n  SKIP_INSTALL\n  )\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  ADD_COMPILE_FLAGS(\n    binlog_reader.cc\n    gen_lex_token.cc\n    COMPILE_FLAGS ${HAS_MISSING_PROFILE})\nENDIF()\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/lex_token.h\n  COMMAND gen_lex_token > lex_token.h\n  DEPENDS gen_lex_token\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for Parser Generated Files\nDESCRIPTION: Sets up compiler-specific flags for Bison and Flex generated files to suppress various compiler warnings on different platforms and compilers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# 'yyexhtaustedlab': unreferenced label\nIF(WIN32 AND NOT WIN32_CLANG)\n  ADD_COMPILE_FLAGS(${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n                    ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n                    COMPILE_FLAGS \"/wd4102\")\nENDIF()\n\n# Common for all versions of GCC/Clang\n# Bison output uses undefined symbols in #if checks\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_FLAGS(${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n                    ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n                    COMPILE_FLAGS \"-Wno-undef -Wno-unused-label\")\n  IF(MY_COMPILER_IS_CLANG AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 14)\n    ADD_COMPILE_FLAGS(${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n                      ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n                      COMPILE_FLAGS \"-Wno-unused-but-set-variable\")\n  ENDIF()\n  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98753\n  IF(MY_COMPILER_IS_GNU AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 11)\n    ADD_COMPILE_FLAGS(\n      ${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n      ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n      COMPILE_FLAGS \"-Wno-free-nonheap-object\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linux Distribution Detection and Configuration\nDESCRIPTION: Performs comprehensive detection of Linux distributions including RHEL, Debian, Ubuntu, and SuSE, setting appropriate flags and version identifiers for build configuration\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_HOST_SYSTEM_NAME MATCHES \"Linux\")\n  # Detect RHEL versions\n  STRING(REGEX MATCH \"\\.el([6789])\\.\" MATCH_FSYS \"${MY_HOST_FILESYSTEM_NAME}\")\n  IF(CMAKE_MATCH_1)\n    SET(LINUX_RHEL 1)\n    SET(LINUX_RHEL${CMAKE_MATCH_1} 1)\n  ENDIF()\n\n  # Detect other Linux distributions\n  IF(EXISTS \"/etc/os-release\")\n    FILE(READ \"/etc/os-release\" MY_OS_RELEASE)\n    IF(MY_OS_RELEASE MATCHES \"Debian\")\n      SET(LINUX_DEBIAN 1)\n    ELSEIF(MY_OS_RELEASE MATCHES \"Ubuntu\")\n      SET(LINUX_UBUNTU 1)\n    ENDIF()\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Initiating Basic Operations in MySQL Server\nDESCRIPTION: This code snippet lists basic operations with maximum execution time and command arguments for MySQL testing. It requires MySQL environment setup and runs commands like 'testBasic' with several operation flags to test database functionalities including reads, updates, and inserts. Each entry checks specific scenarios by varying parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/basic.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 500\ncmd: testBasic\nargs: -n PkRead\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkUpdate\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkDelete\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkInsert\n\nmax-time: 600\ncmd: testBasic\nargs: -n UpdateAndRead\n```\n\n----------------------------------------\n\nTITLE: Generating CBOR Data with libcbor in C\nDESCRIPTION: This C code snippet illustrates how to use the libcbor library to create a CBOR data structure with a map. It covers preallocating map structures, adding key-value pairs, serializing the map, and handling memory efficiently. Key elements include creating string and boolean types, using serialization functions, and freeing allocated resources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/README.md#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <cbor.h>\n#include <stdio.h>\n\nint main(void) {\n  /* Preallocate the map structure */\n  cbor_item_t* root = cbor_new_definite_map(2);\n  /* Add the content */\n  bool success = cbor_map_add(\n      root, (struct cbor_pair){\n                .key = cbor_move(cbor_build_string(\"Is CBOR awesome?\")),\n                .value = cbor_move(cbor_build_bool(true))});\n  success &= cbor_map_add(\n      root, (struct cbor_pair){\n                .key = cbor_move(cbor_build_uint8(42)),\n                .value = cbor_move(cbor_build_string(\"Is the answer\"))});\n  if (!success) return 1;\n  /* Output: `length` bytes of data in the `buffer` */\n  unsigned char* buffer;\n  size_t buffer_size;\n  cbor_serialize_alloc(root, &buffer, &buffer_size);\n\n  fwrite(buffer, 1, buffer_size, stdout);\n  free(buffer);\n\n  fflush(stdout);\n  cbor_decref(&root);\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Systems CMake Version Check\nDESCRIPTION: Verifies appropriate CMake version on Unix systems, with special handling for RedHat systems to recommend using cmake3 instead of the default cmake when necessary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(UNIX)\n  # This is currently minimum version on all supported platforms.\n  IF(CMAKE_VERSION VERSION_LESS 3.14.6)\n    # Default cmake is 2.8.12.2 on RedHat\n    IF(EXISTS \"/etc/redhat-release\")\n      MESSAGE(WARNING \"Please use cmake3 rather than cmake on this platform\")\n      FIND_PROGRAM(MY_CMAKE3 cmake3 /bin /usr/bin /usr/local/bin)\n      IF(MY_CMAKE3)\n        MESSAGE(STATUS \"Found ${MY_CMAKE3}\")\n      ELSE()\n        MESSAGE(STATUS \"Please install cmake3 (yum install cmake3)\")\n      ENDIF()\n    ELSE()\n      # On SunOS /opt/csw/bin/cmake is (most likely) too old.\n      FIND_PROGRAM(MY_UNAME uname /bin /usr/bin /usr/local/bin /sbin)\n      IF(MY_UNAME)\n        EXECUTE_PROCESS(COMMAND uname -s OUTPUT_VARIABLE MY_HOST_SYSTEM_NAME)\n        IF(MY_HOST_SYSTEM_NAME MATCHES \"SunOS\")\n          FIND_PROGRAM(MY_CMAKE cmake /usr/bin\n            NO_CMAKE_ENVIRONMENT_PATH\n            NO_SYSTEM_ENVIRONMENT_PATH\n            )\n          IF(MY_CMAKE)\n            MESSAGE(STATUS \"Found ${MY_CMAKE}\")\n            EXECUTE_PROCESS(COMMAND ${MY_CMAKE} --version)\n          ELSE()\n            MESSAGE(STATUS \"Please install /usr/bin/cmake \")\n          ENDIF()\n        ENDIF()\n      ENDIF()\n    ENDIF()\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Tests with CMake\nDESCRIPTION: This snippet sets up test executables for a MySQL project. It iterates over a list of tests, creating an executable for each using the specified source files, and links them against necessary libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/containers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS\n  integrals_lockfree_queue)\n\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc ADD_TEST ${test})\n  TARGET_LINK_LIBRARIES(${test}-t mysys gunit_small)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Plugin\nDESCRIPTION: This snippet uses the `MYSQL_ADD_PLUGIN` macro to add the MySQL X plugin to the build process. It specifies the plugin name, source files, default status, dependencies, and libraries to link against.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_MYSQLX)\n  MYSQL_ADD_PLUGIN(${MYSQLX_PLUGIN_NAME}\n    ${XPLUGIN_SRC}\n    DEFAULT\n    DEPENDENCIES xprotocol_tags\n    LINK_LIBRARIES\n    harness_net_ts\n    ext::icu\n    ${MYSQLX_PROTOCOL_LIB}\n    extra::rapidjson\n    ext::lz4\n    ext::zstd\n    ext::zlib\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Prerequisites and Core Dependencies\nDESCRIPTION: Sets up basic build targets and dependencies for MySQL core components. This includes protobuf generation, error generation, and adding core directories needed for MySQL builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CUSTOM_TARGET(clang_tidy_prerequisites)\nADD_DEPENDENCIES(clang_tidy_prerequisites protobuf_generated_all)\nADD_DEPENDENCIES(clang_tidy_prerequisites GenError)\n\nADD_SUBDIRECTORY(include)\nADD_SUBDIRECTORY(strings)\nADD_SUBDIRECTORY(extra/unordered_dense)\nADD_SUBDIRECTORY(extra/xxhash)\nADD_SUBDIRECTORY(vio)\nADD_SUBDIRECTORY(mysys)\nADD_SUBDIRECTORY(libmysql)\n# Directory for MySQL Database libraries (Client/Server)\nADD_SUBDIRECTORY(libs/mysql)\nADD_SUBDIRECTORY(libchangestreams)\nADD_SUBDIRECTORY(sql-common/oci)\n```\n\n----------------------------------------\n\nTITLE: Setting up Runtime Path (RPATH) for mysqld\nDESCRIPTION: Configures runtime library search paths (RPATH) for mysqld, handling installation directory references and special cases for setuid executables on various platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nGET_TARGET_PROPERTY(mysqld_link_flags mysqld LINK_FLAGS)\nIF(NOT mysqld_link_flags)\n  SET(mysqld_link_flags)\nENDIF()\n\nIF(UNIX_INSTALL_RPATH_ORIGIN_PRIV_LIBDIR\n    OR LINUX_INSTALL_RPATH_ORIGIN\n    OR TARGET my_tcmalloc\n    )\n  # Because of INSTALL_DEBUG_TARGET which does INSTALL(FILES ...)\n  IF(UNIX AND NOT APPLE AND CMAKE_BUILD_TYPE_UPPER STREQUAL \"DEBUG\")\n    STRING_APPEND(mysqld_link_flags\n      \" -Wl,-rpath,'\\$ORIGIN/../${INSTALL_PRIV_LIBDIR}'\")\n    SET_TARGET_PROPERTIES(mysqld\n      PROPERTIES LINK_FLAGS \"${mysqld_link_flags}\")\n    MESSAGE(STATUS \"LINK_FLAGS for mysqld ${mysqld_link_flags}\")\n  ENDIF()\n\n  # Insert absolute INSTALL_RPATH before $ORIGIN values.\n  # This is done in order to support setuid executables, needed by:\n  # https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html\n\n  # Note: for Fedora RPM, this gives ERROR 0008: file '/usr/sbin/mysqld'\n  #       contains the $ORIGIN specifier at the wrong position.\n  IF(NOT LINUX_RHEL10)\n    IF(INSTALL_LAYOUT STREQUAL \"DEB\" OR INSTALL_LAYOUT STREQUAL \"RPM\")\n      GET_TARGET_PROPERTY(CURRENT_RPATH_mysqld mysqld INSTALL_RPATH)\n      LIST(INSERT CURRENT_RPATH_mysqld 0\n        \"${CMAKE_INSTALL_PREFIX}/${INSTALL_PRIV_LIBDIR}\")\n      SET_TARGET_PROPERTIES(mysqld\n        PROPERTIES INSTALL_RPATH \"${CURRENT_RPATH_mysqld}\")\n    ENDIF()\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Client API Functions in CMake\nDESCRIPTION: Defines a comprehensive list of documented MySQL client API functions that are exported by the client API. These functions represent the official public interface for client applications connecting to MySQL servers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLIENT_API_FUNCTIONS\n  mysql_affected_rows\n  mysql_autocommit\n  mysql_change_user\n  mysql_character_set_name\n  mysql_close\n  mysql_commit\n  mysql_data_seek\n  mysql_debug\n  mysql_dump_debug_info\n  mysql_eof\n  mysql_errno\n  mysql_error\n  mysql_escape_string\n  mysql_fetch_field\n  mysql_fetch_field_direct\n  mysql_fetch_fields\n  mysql_fetch_lengths\n  mysql_fetch_row\n  mysql_field_count\n  mysql_field_seek\n  mysql_field_tell\n  mysql_free_result\n  mysql_get_client_info\n  mysql_get_client_version\n  mysql_get_host_info\n  mysql_get_proto_info\n  mysql_get_server_info\n  mysql_get_ssl_cipher\n  mysql_hex_string\n  mysql_info\n  mysql_init\n  mysql_insert_id\n  mysql_kill\n  mysql_list_dbs\n  mysql_list_fields\n  mysql_list_processes\n  mysql_list_tables\n  mysql_more_results\n  mysql_next_result\n  mysql_num_fields\n  mysql_num_rows\n  mysql_options\n  mysql_ping\n  mysql_query\n  mysql_set_server_option\n  mysql_stmt_bind_param\n  mysql_stmt_bind_named_param\n  mysql_stmt_bind_result\n  mysql_stmt_execute\n  mysql_stmt_fetch\n  mysql_stmt_fetch_column\n  mysql_stmt_param_count\n  mysql_stmt_param_metadata\n  mysql_stmt_result_metadata\n  mysql_thread_end\n  mysql_thread_init\n  # We need to have document for this api\n  mysql_read_query_result\n  mysql_real_connect\n  mysql_real_escape_string\n  mysql_real_escape_string_quote\n  mysql_real_query\n  mysql_refresh\n  mysql_rollback\n  mysql_row_seek\n  mysql_row_tell\n  mysql_select_db\n  mysql_stmt_send_long_data\n  # We need to have document for this api\n  mysql_client_find_plugin\n  mysql_client_register_plugin\n  mysql_get_character_set_info\n  mysql_get_option\n  mysql_get_server_version\n  mysql_load_plugin\n  mysql_load_plugin_v\n  mysql_options4\n  mysql_plugin_options\n  mysql_reset_connection\n  mysql_reset_server_public_key\n  mysql_result_metadata\n  mysql_send_query\n  mysql_server_end\n  mysql_server_init\n  mysql_session_track_get_first\n  mysql_session_track_get_next\n  mysql_set_character_set\n  mysql_set_local_infile_default\n  mysql_set_local_infile_handler\n  mysql_shutdown\n  mysql_sqlstate\n  mysql_ssl_set\n  mysql_stat\n  mysql_stmt_affected_rows\n  mysql_stmt_attr_get\n  mysql_stmt_attr_set\n  mysql_stmt_close\n  mysql_stmt_data_seek\n  mysql_stmt_errno\n  mysql_stmt_error\n  mysql_stmt_field_count\n  mysql_stmt_free_result\n  mysql_stmt_init\n  mysql_stmt_insert_id\n  mysql_stmt_next_result\n  mysql_stmt_num_rows\n  mysql_stmt_prepare\n  mysql_stmt_reset\n  mysql_stmt_row_seek\n  mysql_stmt_row_tell\n  mysql_stmt_sqlstate\n  mysql_stmt_store_result\n  mysql_store_result\n  mysql_thread_id\n  mysql_thread_safe\n  mysql_use_result\n  mysql_warning_count\n  mysql_real_connect_dns_srv\n  mysql_bind_param\n  mysql_plugin_get_option\n  mysql_get_ssl_session_reused\n  mysql_get_ssl_session_data\n  mysql_free_ssl_session_data\n  mysql_binlog_close\n  mysql_binlog_fetch\n  mysql_binlog_open\n  CACHE INTERNAL \"Functions exported by client API\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Test Executable with CMake\nDESCRIPTION: This snippet creates an executable target for the MySQL test using CMake. It defines the source files, dependencies, and libraries needed for linking. The configuration is specifically tailored for a MySQL testing component, highlighting libraries like mysys, strings, and mysqlclient.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/tests/driver/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlxtest\n  ${XTEST_SRC}\n  COMPONENT Test\n  DEPENDENCIES GenError GenClientError\n  LINK_LIBRARIES\n  mysys\n  strings\n  mysqlclient\n  ${MYSQLX_CLIENT_FULL_LIB}\n  ${MYSQLX_PROTOCOL_FULL_LIB}\n  ext::libprotobuf\n  ext::lz4\n  extra::rapidjson\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Server Plugin Library Configuration in CMake\nDESCRIPTION: Checks if server is disabled and exits early if so, as the mysqlservices library is only needed for server plugins. Then configures compiler warnings, defines source files, and sets up the static library build and installation rules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libservices/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITHOUT_SERVER)\n  MESSAGE(STATUS \"The mysqlservices library is for server plugins only\")\n  RETURN()\nENDIF()\n\nADD_WSHADOW_WARNING()\n\nSET(MYSQLSERVICES_SOURCES\n  service_command.c\n  locking_service.c\n  srv_session_service.c\n  thd_alloc_service.c\n  thd_wait_service.c\n  my_plugin_log_service.c\n  my_thread_scheduler_service.c\n  mysql_string_service.c\n  mysql_malloc_service.c\n  mysql_password_policy_service.c\n  parser_service.c\n  srv_session_info_service.c\n  rpl_transaction_ctx_service.c\n  rpl_transaction_write_set_service.c\n  security_context_service.c\n  mysql_keyring_service.c\n  plugin_registry_service.c)\n\nADD_LIBRARY(mysqlservices STATIC ${MYSQLSERVICES_SOURCES})\nIF(INSTALL_STATIC_LIBRARIES)\n  INSTALL(TARGETS mysqlservices\n    DESTINATION ${INSTALL_LIBDIR} COMPONENT Development)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Static NDB Client Library Dependencies in CMake\nDESCRIPTION: Sets up the libraries to be merged into the static NDB client library and configures external dependencies like zlib. This snippet handles both bundled and external library options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LIBS_TO_MERGE\n  mysys\n  mytime\n  ndbapi\n  ndbgeneral\n  ndblogger\n  ndbmgmapi\n  ndbmgmcommon\n  ndbportlib\n  ndbsignaldata\n  ndbtrace\n  ndbtransport\n  strings\n  )\n\nSET(LIBS_TO_LINK)\n\nIF(WITH_ZLIB STREQUAL \"bundled\")\n  LIST(APPEND LIBS_TO_MERGE zlib)\nELSE()\n  LIST(APPEND LIBS_TO_LINK ext::zlib)\nENDIF()\n\nIF(WITH_EXT_BACKTRACE)\n  LIST(APPEND LIBS_TO_MERGE backtrace)\nENDIF()\n\nMESSAGE(STATUS \"LIBS_TO_MERGE ${LIBS_TO_MERGE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Protobuf and Plugin\nDESCRIPTION: This snippet adds subdirectories for Protobuf and plugin components, which are essential for extending the base functionality of MySQL Server. Dependencies on external libraries for data serialization and plugin architecture are managed here.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(protobuf)\nADD_SUBDIRECTORY(plugin)\n```\n\n----------------------------------------\n\nTITLE: Integrating Abseil in a Library Project with C++ Standard Enforcement\nDESCRIPTION: Example CMakeLists.txt for library projects that use Abseil. It enforces C++17 requirements while allowing the root application to control the overall C++ standard, ensuring proper ABI compatibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(my_lib_project)\n\n# Leave C++ standard up to the root application, so set it only if this is the\n# current top-level CMake project.\nif(CMAKE_SOURCE_DIR STREQUAL my_lib_project_SOURCE_DIR)\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\nadd_subdirectory(abseil-cpp)\n\nadd_library(my_lib source.cpp)\ntarget_link_libraries(my_lib absl::base absl::synchronization absl::strings)\n\n# Enforce that my_lib requires C++17. Important to document for clients that they\n# must set CMAKE_CXX_STANDARD to 17 or higher for proper Abseil ABI compatibility\n# (since otherwise, Abseil library targets could be compiled with a lower C++\n# standard than my_lib).\ntarget_compile_features(my_lib PUBLIC cxx_std_17)\nif(CMAKE_CXX_STANDARD LESS 17)\n  message(FATAL_ERROR\n      \"my_lib_project requires CMAKE_CXX_STANDARD >= 17 (got: ${CMAKE_CXX_STANDARD})\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking MySQL SQL Libraries with External Dependencies\nDESCRIPTION: Sets up library dependencies for the SQL components, linking with MySQL internal libraries, system libraries, and external components like OpenSSL, RapidJSON, Boost, and Protobuf.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(sql_main extra::unordered_dense)\n\nTARGET_LINK_LIBRARIES(sql_main ${MYSQLD_STATIC_PLUGIN_LIBS}\n  mysql_server_component_services mysys library_mysys strings vio\n  mysql_binlog_event ${LIBWRAP} ${LIBDL} OpenSSL::SSL OpenSSL::Crypto\n  extra::rapidjson extra::boost)\n\n# sql/immutable_string.h uses\n# google::protobuf::io::CodedOutputStream::WriteVarint64ToArray\n# which may or may not be inlined.\nTARGET_LINK_LIBRARIES(sql_main ext::libprotobuf-lite)\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Dependency Mapping\nDESCRIPTION: Defines directed graph edges (arcs) between different mutex locks and their dependencies in MySQL Server. Each line represents a lock dependency where one lock must be acquired before another, with OP specifying the operation type (R for read, W for write) where applicable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"R\"\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"W\"\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/LOCK_sys_init_connect\" OP \"R\"\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/LOCK_sys_init_replica\" OP \"R\"\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"R\"\nARC FROM \"mutex/sql/LOCK_plugin_delete\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"W\"\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories for MySQL Server\nDESCRIPTION: This snippet sets various installation directory paths for MySQL Server components, including binaries, libraries, and data directories. It uses CMake variables and installation prefixes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nSET(prefix \"${CMAKE_INSTALL_PREFIX}\")\nSET(sysconfdir ${prefix})\nSET(bindir ${prefix}/${INSTALL_BINDIR})\nSET(libexecdir ${prefix}/${INSTALL_SBINDIR})\nSET(datadir ${prefix}/${INSTALL_MYSQLSHAREDIR})\nSET(libsubdir  ${INSTALL_LIBDIR})\nSET(pkgincludedir ${prefix}/${INSTALL_INCLUDEDIR})\nSET(pkglibdir ${prefix}/${INSTALL_LIBDIR})\nSET(pkgplugindir ${prefix}/${INSTALL_PLUGINDIR})\nSET(localstatedir ${MYSQL_DATADIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication Client Plugin in CMake\nDESCRIPTION: This CMake script configures the build process for the OpenID Connect authentication client plugin. It checks if the plugin is enabled, adds the plugin to the build, links necessary libraries, and sets platform-specific linker options for Linux and Solaris.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_openid_connect_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  MESSAGE(STATUS \"Skipping the OpenID Connect authentication client plugin.\")\n  RETURN()\nENDIF()\n\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_PLUGIN(\n  authentication_openid_connect_client\n\n  # Authentication plugin main\n  authentication_openid_connect_client_plugin.cc\n\n  LINK_LIBRARIES mysys OpenSSL::SSL OpenSSL::Crypto\n\n  CLIENT_ONLY\n  MODULE_ONLY MODULE_OUTPUT_NAME \"authentication_openid_connect_client\"\n)\n\nIF(LINUX OR SOLARIS)\n  SET(PLUGIN_VERSION_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/authentication_openid_connect_client.ver)\n  IF(SOLARIS)\n    TARGET_LINK_OPTIONS(authentication_openid_connect_client PRIVATE\n      LINKER:-z,gnu-version-script-compat)\n  ENDIF()\n  # hide all symbols in mysys, to avoid ODR violations.\n  # There is *one* visible symbol: _mysql_client_plugin_declaration_\n  TARGET_LINK_OPTIONS(authentication_openid_connect_client PRIVATE\n    LINKER:--version-script=${PLUGIN_VERSION_FILE}\n    )\n  SET_TARGET_PROPERTIES(authentication_openid_connect_client\n    PROPERTIES LINK_DEPENDS ${PLUGIN_VERSION_FILE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd Support for Linux\nDESCRIPTION: Adds options for systemd support on Linux systems. It includes error handling for unsupported platforms and configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nIF (LINUX)\n  OPTION(WITH_SYSTEMD \"Enable installation of systemd support files\" OFF)\n  OPTION(WITH_SYSTEMD_DEBUG \"Build in systemd debug trace\" OFF)\n  IF (WITH_SYSTEMD)\n    INCLUDE(cmake/systemd.cmake)\n  ELSEIF (WITH_SYSTEMD_DEBUG)\n    MESSAGE(FATAL_ERROR \"systemd-debugging requires systemd, and systemd requires linux\")\n  ENDIF()\nELSE()\n  IF (WITH_SYSTEMD)\n    MESSAGE(FATAL_ERROR \"Installation of systemd support files not supported\")\n  ENDIF()\n  IF (WITH_SYSTEMD_DEBUG)\n    MESSAGE(FATAL_ERROR \"systemd-debugging requires systemd, and systemd requires linux\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Group Replication Source Files in CMake\nDESCRIPTION: Sets up a comprehensive list of source files for the Group Replication plugin, including implementations for various components like applier, certification, plugin handlers, and services\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(GROUP_REPLICATION_SOURCES\n  src/applier.cc\n  src/applier_channel_state_observer.cc\n  ...\n  src/udf/udf_write_concurrency.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Windows 64-bit Toolset Configuration\nDESCRIPTION: Sets the generator toolset to 64-bit when using Visual Studio to avoid address space issues with the default 32-bit linker during compilation of large projects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_GENERATOR MATCHES \"Visual Studio [1-9][0-9].*\" AND\n   CMAKE_GENERATOR_TOOLSET STREQUAL \"\")\n  # Switch to 64 bit toolset on Windows (32 bit is default).\n  # This is recommended as the 32 bit linker will run into address space issues\n  # and not exit for long time.\n  SET(CMAKE_GENERATOR_TOOLSET \"host=x64\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Data Dictionary Library\nDESCRIPTION: Creates and configures the sql_dd static library with its dependencies and properties. This library handles MySQL's data dictionary functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(sql_dd STATIC ${DD_SOURCES})\nADD_DEPENDENCIES(sql_dd GenFixPrivs)\nADD_DEPENDENCIES(sql_dd GenServerSource)\nADD_DEPENDENCIES(sql_dd GenDigestServerSource)\nADD_DEPENDENCIES(sql_dd GenBootstrapPriv)\nADD_DEPENDENCIES(sql_dd GenSysSchema)\nADD_DEPENDENCIES(sql_dd GenError)\nADD_DEPENDENCIES(sql_dd GenKeywordList)\nTARGET_LINK_LIBRARIES(sql_dd sql_gis sql_main)\nSET_TARGET_PROPERTIES(sql_dd PROPERTIES LINK_INTERFACE_MULTIPLICITY 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for MySQL Server SQL in CMake\nDESCRIPTION: This snippet configures compiler warnings for MySQL Server SQL compilation. It adds shadow warnings and handles specific warnings related to allocation size and array indexing on different platforms and compiler configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\n\nIF(FPROFILE_GENERATE OR FPROFILE_USE OR\n    CMAKE_COMPILER_FLAG_WITH_LTO OR WITH_LTO)\n  IF(MY_COMPILER_IS_GNU)\n    STRING_APPEND(CMAKE_EXE_LINKER_FLAGS \" -Wno-alloc-size-larger-than\")\n    STRING_APPEND(CMAKE_EXE_LINKER_FLAGS \" -Wno-stringop-overflow\")\n  ENDIF()\nENDIF()\n\nIF(SOLARIS AND MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_OPTIONS(\"-Wno-char-subscripts\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including Source Files for the XPlugin\nDESCRIPTION: This snippet includes source files defined in `src/source_files.cmake` and adds them to the `XPLUGIN_SRC` variable. These are the source files that will be compiled into the MySQL X plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE(src/source_files.cmake)\nFOREACH(FILE ${XPL_SRC})\n  LIST(APPEND XPLUGIN_SRC \\\"src/${FILE}\\\")\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Source Files for MySQL Server\nDESCRIPTION: Sets up the SQL_SOURCE variable with a comprehensive list of source files needed to build the SQL component, including generated sources, SQL common files, connection handlers, and various other components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nSET(SQL_SOURCE\n  ${GEN_SOURCES}\n  ${GEN_DIGEST_SOURCES}\n  ${GEN_KEYWORD_LIST_SOURCES}\n  ${CONF_SOURCES}\n  ${SQL_SHARED_SOURCES}\n  ${SQL_HEADERS}\n  ../libmysql/errmsg.cc\n  ../sql-common/client.cc\n  ../sql-common/client_plugin.cc\n  ../sql-common/client_authentication.cc\n  ../sql-common/compression.cc\n  ../sql-common/get_password.cc\n  ../sql-common/my_path_permissions.cc\n  ../sql-common/net_ns.cc\n  ../sql-common/net_serv.cc\n  ../sql-common/sql_string.cc\n  ../sql-common/bind_params.cc\n  ../sql-common/json_binary.cc\n  ../sql-common/my_decimal.cc\n  ../sql-common/json_diff.cc\n  ../sql-common/json_dom.cc\n  ../sql-common/json_error_handler.cc\n  ../sql-common/json_path.cc\n  ../sql-common/json_schema.cc\n  ../sql-common/json_syntax_check.cc\n  command_service.cc\n  conn_handler/channel_info.cc\n  conn_handler/connection_handler_per_thread.cc\n  conn_handler/connection_handler_one_thread.cc\n  conn_handler/socket_connection.cc\n  conn_handler/init_net_server_extension.cc\n  event_data_objects.cc\n  event_db_repository.cc\n  event_parse_data.cc\n  event_queue.cc\n  event_scheduler.cc\n  events.cc\n  mf_iocache.cc\n  protocol_callback.cc\n  signal_handler.cc\n  sql_audit.cc\n  sql_client.cc\n  srv_session.cc\n  srv_session_info_service.cc\n  srv_session_service.cc\n  aggregated_stats_buffer.cc\n  aggregated_stats.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Disable Missing Profile Warning Macro\nDESCRIPTION: CMake macro to disable warnings about missing profile information when using profile-guided optimization builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(DISABLE_MISSING_PROFILE_WARNING)\n  IF(FPROFILE_USE)\n    MY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_WARN_FLAG)\n    IF(HAS_WARN_FLAG)\n      STRING_APPEND(CMAKE_C_FLAGS   \" ${HAS_WARN_FLAG}\")\n      STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n    ENDIF()\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Plugin Build Settings in CMake\nDESCRIPTION: Defines build configuration for MySQL's CSV storage engine plugin. Sets the plugin name, mandatory status flag, source files, and links required dependencies including RapidJSON library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/csv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CSV_PLUGIN_STATIC  \"csv\")\nSET(CSV_PLUGIN_MANDATORY TRUE)\n\nSET(CSV_SOURCES  ha_tina.cc ha_tina.h transparent_file.cc transparent_file.h)\nMYSQL_ADD_PLUGIN(csv ${CSV_SOURCES}\n  STORAGE_ENGINE MANDATORY\n  LINK_LIBRARIES extra::rapidjson)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Compiler Options for MySQL\nDESCRIPTION: Sets up Windows-specific compiler options and warning suppressions for the replication replica library and specific source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  # Silence warnings about: needs to have dll-interface\n  TARGET_COMPILE_OPTIONS(rpl_replica PRIVATE \"/wd4251\")\n  ADD_COMPILE_FLAGS(mysqld.cc COMPILE_FLAGS \"/wd4251\")\n  IF(WIN32_CLANG)\n    ADD_COMPILE_FLAGS(mysqld.cc COMPILE_FLAGS \" -Wno-microsoft-cast\")\n    ADD_COMPILE_FLAGS(log_event.cc COMPILE_FLAGS \" -Wno-microsoft-template\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Server Executable Target\nDESCRIPTION: Adds the mysqld executable target with installation settings for the MySQL server binary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqld\n  ${MYSQLD_SOURCE} DESTINATION ${INSTALL_SBINDIR} COMPONENT Server\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Library: synchronization\nDESCRIPTION: This snippet defines the main `synchronization` library in Abseil. It includes a comprehensive list of headers and source files related to synchronization primitives like mutexes, barriers, and blocking counters. It depends on several internal Abseil libraries such as `graphcycles_internal` and `kernel_timeout_internal`, as well as external dependencies like `Threads::Threads`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    synchronization\n  HDRS\n    \\\"barrier.h\\\"\n    \\\"blocking_counter.h\\\"\n    \\\"internal/create_thread_identity.h\\\"\n    \\\"internal/futex.h\\\"\n    \\\"internal/futex_waiter.h\\\"\n    \\\"internal/per_thread_sem.h\\\"\n    \\\"internal/pthread_waiter.h\\\"\n    \\\"internal/sem_waiter.h\\\"\n    \\\"internal/stdcpp_waiter.h\\\"\n    \\\"internal/waiter.h\\\"\n    \\\"internal/waiter_base.h\\\"\n    \\\"internal/win32_waiter.h\\\"\n    \\\"mutex.h\\\"\n    \\\"notification.h\\\"\n  SRCS\n    \\\"barrier.cc\\\"\n    \\\"blocking_counter.cc\\\"\n    \\\"internal/create_thread_identity.cc\\\"\n    \\\"internal/futex_waiter.cc\\\"\n    \\\"internal/per_thread_sem.cc\\\"\n    \\\"internal/pthread_waiter.cc\\\"\n    \\\"internal/sem_waiter.cc\\\"\n    \\\"internal/stdcpp_waiter.cc\\\"\n    \\\"internal/waiter_base.cc\\\"\n    \\\"internal/win32_waiter.cc\\\"\n    \\\"notification.cc\\\"\n    \\\"mutex.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::graphcycles_internal\n    absl::kernel_timeout_internal\n    absl::atomic_hook\n    absl::base\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::malloc_internal\n    absl::raw_logging_internal\n    absl::stacktrace\n    absl::symbolize\n    absl::time\n    Threads::Threads\n  PUBLIC\n)\"\n```\n\n----------------------------------------\n\nTITLE: LDAP Authentication Consistency Checks\nDESCRIPTION: This snippet performs consistency checks when WITH_AUTHENTICATION_LDAP is enabled.  On Linux, it verifies that LDAP, SASL, and SSL are all either \"system\" or \"custom\". On Windows, it ensures the SASL library and either SCRAM or GSSAPI plugin are available. On other platforms it verifies that system LDAP, Kerberos, and SASL libraries are present.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_AUTHENTICATION_LDAP)\n  IF(LINUX AND KNOWN_CUSTOM_LIBRARIES)\n    # LDAP / SASL / KERBEROS / SSL must all be \\\"system\\\" or \\\"custom\\\", not a mix.\n    IF(WITH_LDAP STREQUAL \\\"system\\\" OR\n        WITH_SASL STREQUAL \\\"system\\\" OR\n#       WITH_KERBEROS STREQUAL \\\"system\\\" OR # enable this later\n        WITH_SSL STREQUAL \\\"system\\\")\n      MESSAGE(WARNING \\\"-DWITH_AUTHENTICATION_LDAP=ON\\\")\n      MESSAGE(FATAL_ERROR \\\"Inconsistent options for LDAP/SASL/KERBEROS/SSL\\\")\n    ENDIF()\n  ELSEIF(WIN32)\n    # system LDAP, but SASL needs to be explicitly added\n    # and support SCRAM or GSSAPI\n    IF(NOT SASL_LIBRARY_DLL OR NOT (SASL_SCRAM_PLUGIN OR SASL_GSSAPI_PLUGIN))\n      MESSAGE(WARNING \\\"-DWITH_AUTHENTICATION_LDAP=ON\\\")\n      MESSAGE(FATAL_ERROR\n        \\\"Missing SASL library or none supported SASL mechanism is available.\\\")\n    ENDIF()\n  ELSEIF(APPLE)\n    # system LDAP and SASL, but there is no scram plugin.\n  ELSEIF(SOLARIS)\n    # 11.3 has system LDAP and SASL, but there is no scram plugin.\n  ELSE()\n    # We must have \\\"system\\\" LDAP, KERBEROS and SASL (SSL is always required)\n    SET(LDAP_WARN_GIVEN)\n    SET(SASL_WARN_GIVEN)\n    SET(KERBEROS_WARN_GIVEN)\n    WARN_MISSING_SYSTEM_LDAP(LDAP_WARN_GIVEN)\n    WARN_MISSING_SYSTEM_SASL(SASL_WARN_GIVEN)\n    WARN_MISSING_SYSTEM_KERBEROS(KERBEROS_WARN_GIVEN)\n    IF(LDAP_WARN_GIVEN OR SASL_WARN_GIVEN OR KERBEROS_WARN_GIVEN)\n      # SUSE linux: may or may not have SCRAM, do not break the build.\n      IF(LINUX_SUSE)\n        MESSAGE(WARNING\n          \\\"-DWITH_AUTHENTICATION_LDAP=ON, but missing system libraries\\\")\n      ELSE()\n        MESSAGE(FATAL_ERROR\n          \\\"-DWITH_AUTHENTICATION_LDAP=ON, but missing system libraries\\\")\n      ENDIF()\n    ENDIF()\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Link-Time Optimization (LTO)\nDESCRIPTION: Sets up Link-Time Optimization (LTO) for the build if enabled. It handles platform-specific settings and compiler flags for LTO, including parallel linking configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_LTO)\n  IF(APPLE)\n    # Requires CMake 3.9+\n    INCLUDE(CheckIPOSupported)\n    # Will terminate cmake if the check fails.\n    CHECK_IPO_SUPPORTED()\n    # macOS has problems with enabling LTO for shared libs, so we only set it\n    # as target property for mysqld later.\n  ELSE()\n    MY_CHECK_CXX_COMPILER_FLAG(\"-flto\" CXX_LTO_RESULT)\n    IF(NOT CXX_LTO_RESULT)\n      MESSAGE(FATAL_ERROR \"Compiler does not support -flto\")\n    ENDIF()\n    STRING_APPEND(CMAKE_C_FLAGS   \" -flto\")\n    STRING_APPEND(CMAKE_CXX_FLAGS \" -flto\")\n\n    # Test for parallel linking.\n    SET(NUM_PROCESSING_UNITS 4)\n    MY_CHECK_CXX_COMPILER_FLAG(\n      \"-flto=${NUM_PROCESSING_UNITS}\" CXX_LTO_PARALLEL_RESULT)\n    IF(CXX_LTO_PARALLEL_RESULT)\n      FIND_PROGRAM(NPROC_EXECUTABLE nproc)\n      IF(NPROC_EXECUTABLE)\n        EXECUTE_PROCESS(COMMAND ${NPROC_EXECUTABLE}\n          OUTPUT_VARIABLE NPROC_NUM\n          RESULT_VARIABLE NPROC_RESULT\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\n        IF(NOT NPROC_RESULT)\n          SET(NUM_PROCESSING_UNITS ${NPROC_NUM})\n        ENDIF()\n      ENDIF()\n      STRING_APPEND(CMAKE_CXX_LINK_FLAGS      \" -flto=${NUM_PROCESSING_UNITS}\")\n      STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS \" -flto=${NUM_PROCESSING_UNITS}\")\n    ELSE()\n      STRING_APPEND(CMAKE_CXX_LINK_FLAGS      \" -flto\")\n      STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS \" -flto\")\n    ENDIF()\n  ENDIF()\n\n  # On some platforms (Fedora) we *must* use gcc-ar / gcc-ranlib\n  # to get the right plugins for supporting -flto output from gcc.\n  IF(MY_COMPILER_IS_GNU)\n    IF(ALTERNATIVE_ENABLE)\n      GET_FILENAME_COMPONENT(ALTERNATIVE_ENABLE_DIR ${ALTERNATIVE_ENABLE} PATH)\n      SET(DEVTOOLSET_ROOT \"${ALTERNATIVE_ENABLE_DIR}/root\")\n      FIND_PROGRAM(GCC_AR_EXECUTABLE gcc-ar\n        NO_DEFAULT_PATH\n        PATHS \"${DEVTOOLSET_ROOT}/usr/bin\")\n      FIND_PROGRAM(GCC_RANLIB_EXECUTABLE gcc-ranlib\n        NO_DEFAULT_PATH\n        PATHS \"${DEVTOOLSET_ROOT}/usr/bin\")\n    ELSEIF(ALTERNATIVE_GCC)\n      STRING(REGEX MATCH  \"^([0-9])\"\n        ALTERNATIVE_GCC_MAJ_VER ${CMAKE_C_COMPILER_VERSION})\n      GET_FILENAME_COMPONENT(ALTERNATIVE_GCC_DIR ${ALTERNATIVE_GCC} PATH)\n      FIND_PROGRAM(GCC_AR_EXECUTABLE gcc-ar-${ALTERNATIVE_GCC_MAJ_VER}\n        NO_DEFAULT_PATH\n        PATHS \"${ALTERNATIVE_GCC_DIR}\")\n      FIND_PROGRAM(GCC_RANLIB_EXECUTABLE gcc-ranlib-${ALTERNATIVE_GCC_MAJ_VER}\n        NO_DEFAULT_PATH\n        PATHS \"${ALTERNATIVE_GCC_DIR}\")\n    ELSE()\n      FIND_PROGRAM(GCC_AR_EXECUTABLE gcc-ar)\n      FIND_PROGRAM(GCC_RANLIB_EXECUTABLE gcc-ranlib)\n    ENDIF()\n    IF(GCC_AR_EXECUTABLE AND GCC_RANLIB_EXECUTABLE)\n      SET(CMAKE_AR ${GCC_AR_EXECUTABLE})\n      SET(CMAKE_RANLIB ${GCC_RANLIB_EXECUTABLE})\n    ENDIF()\n  ENDIF()\nENDIF(WITH_LTO)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Node Startup Protocol\nDESCRIPTION: Sequence diagram showing the message flow and operations between NDBCNTR, DIH and DICT nodes during cluster startup. Includes system file reading, schema synchronization, table loading and fragment initialization steps.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/SystemRestart.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNDBCNTR\t\t\t   DIH\t\t\t      DICT\n----------------------     ----------------------     ---------------\nDIH_RESTARTREQ -> DIH\n\t\t\t   Check for sysfile\n\t\t\t   <- DIH_RESTARTCONF\n\nNDB_STTORY -> DICT\t\t\t\t\t\nsp = 1\n\t\t\t\t\t\t      Read schema file\n\n---- Master\n\nNDB_STARTREQ -> DIH\n\t\t\t   Read sysfile\n\n\t\t\t   COPY_GCIREQ -> all DIHs\n\t\t\t\n\t\t\t   DICTSTARTREQ -> local DICT\n\t\t\t\t\t\t      local\n                                                      ======\n\t\t\t\t\t\t      SCHEMA_INFO -> all DICTs\n\t\t\t\t\t\t         Info = schema file\n\n\t\t\t\t\t\t      Participant\n\t\t\t\t\t\t      ===========\n\t\t\t\t\t\t      1) For each table\n\t\t\t\t\t\t\t   If TableStatus match\n                                                             ReadTableFile\n                                                           else\n\t\t\t\t\t\t\t     GET_TABINFOREQ\n\n                                                         <- SCHEMA_INFOCONF\n\n\t\t\t\t\t\t      local\n\t\t\t\t\t\t      ======\n                                                      For each table\n                                                        DIHSTARTTABREQ -> DIH\n\n                                                      <- DICTSTARTCONF\n\t\t\t\t\t\t  \n\t\t\t   For each table (STARTED)\n\t\t\t     Read table description\n                               from disk\n\n\t\t\t   For each fragment \n\t\t\t     IF Fragment dont have LCP\n\t\t\t       ADD_FRAGREQ -> local DICT\n                                                      1) LQHFRAGREQ -> LQH x\n\t\t\t\t\t\t      2) For each attribute\n\t\t\t\t\t\t         LQHADDATTREQ\n\t\t\t     IF Fragment is logged\n                               START_FRAGREQ -> LQH x\n\n                           START_RECREQ -> all LQH\n \t\t\t     Note does not wait for START_FRAGCONF\n\n\t\t\t   For each table\n\t\t\t     COPY_TABREQ -> all DIH (but self)\n\n\t\t\t   <- NDB_STARTCONF\n```\n\n----------------------------------------\n\nTITLE: Configuring Libraries for MySQL Client in CMake\nDESCRIPTION: Sets up the list of libraries to merge and link for creating the final MySQL client library. This handles conditional inclusion of bundled dependencies like zlib and zstd based on build configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LIBS_TO_MERGE\n  clientlib mytime strings vio mysys\n  )\nSET(LIBS_TO_LINK ${LIBDL})\n\nIF(WITH_ZLIB STREQUAL \"bundled\")\n  LIST(APPEND LIBS_TO_MERGE zlib)\nELSE()\n  LIST(APPEND LIBS_TO_LINK ext::zlib)\nENDIF()\n\nIF(WITH_ZSTD STREQUAL \"bundled\")\n  LIST(APPEND LIBS_TO_MERGE zstd)\nELSE()\n  LIST(APPEND LIBS_TO_LINK ext::zstd)\nENDIF()\n\nLIST(APPEND LIBS_TO_LINK OpenSSL::SSL OpenSSL::Crypto)\n\nIF(WITH_EXT_BACKTRACE)\n  LIST(APPEND LIBS_TO_MERGE backtrace)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Log Source Files and Building binlog Library\nDESCRIPTION: Specifies the source files for MySQL's binary log functionality and builds the binlog static library with its dependencies. This library handles binary logging for replication and crash recovery.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nSET(BINLOG_SOURCE\n  basic_istream.cc\n  basic_ostream.cc\n  binlog/global.cc\n  binlog/log_sanitizer.cc\n  binlog/recovery.cc\n  binlog/group_commit/bgc_ticket_manager.cc\n  binlog/group_commit/bgc_ticket.cc\n  binlog/group_commit/atomic_bgc_ticket.cc\n  binlog/group_commit/atomic_bgc_ticket_guard.cc\n  binlog/monitoring/context.cc\n  binlog/decompressing_event_object_istream.cc\n  binlog/services/iterator/file_storage.cc\n  binlog.cc\n  binlog_index.cc\n  binlog_istream.cc\n  binlog_ostream.cc\n  binlog_reader.cc\n  changestreams/index/locked_sidno_set.cc\n  changestreams/misc/replicated_columns_view.cc\n  changestreams/misc/replicated_columns_view_with_gipk_on_source.cc\n  changestreams/misc/column_filters/column_filter_inbound_func_indexes.cc\n  changestreams/misc/column_filters/column_filter_inbound_gipk.cc\n  changestreams/misc/column_filters/column_filter_outbound_func_indexes.cc\n  log_event.cc\n  rpl_commit_stage_manager.cc\n  rpl_filter.cc\n  rpl_gtid_execution.cc\n  rpl_gtid_misc.cc\n  rpl_gtid_mode.cc\n  rpl_gtid_mutex_cond_array.cc\n  rpl_gtid_owned.cc\n  rpl_gtid_persist.cc\n  rpl_gtid_set.cc\n  rpl_gtid_tsid_map.cc\n  rpl_gtid_specification.cc\n  rpl_gtid_state.cc\n  rpl_injector.cc\n  rpl_log_encryption.cc\n  rpl_record.cc\n  rpl_table_access.cc\n  rpl_trx_tracking.cc\n  rpl_utility.cc\n  sql_binlog.cc\n  )\nADD_LIBRARY(binlog STATIC ${BINLOG_SOURCE})\nTARGET_LINK_LIBRARIES(binlog mysql_binlog_event)\nTARGET_LINK_LIBRARIES(binlog rpl)\n```\n\n----------------------------------------\n\nTITLE: NdbEventOperation Creation Sequence\nDESCRIPTION: Details the sequence for creating an NdbEventOperation, including reading from system table and handling subscriptions through SUMA.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Event.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUSER                      DICT(Master)         (Slaves)           UTIL\n=======================================================================\nCREATE_EVENT_REQ::get\n-------------------------->\\n\\t\\t\\t  - read from system table\n                          UTIL_PREPARE::read\n                          ---------------------------------------->\n                          <----------------------------------------\n                          UTIL_EXECUTE        \n                          ---------------------------------------->\n                          <----------------------------------------\n\\t\\t\\t\\t\\t\\t  SUMA\n                          CREATE_EVENT_REQ::after_get            ======\n                          ---------------------->\n\\t\\t\\t\\t\\t\\tSUB_CREATE\n\\t\\t\\t\\t\\t\\t------------------>\\n\\t\\t\\t\\t\\t\\t<------------------\n\\t\\t\\t\\t\\t\\tSUB_SYNC\n\\t\\t\\t\\t\\t\\t------------------>\\n\\t\\t\\t\\t\\t\\t<------------------\n                          CREATE_EVENT_CONF\n                          <----------------------\nCREATE_EVENT_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: NdbEventOperation Creation Sequence\nDESCRIPTION: Details the sequence for creating an NdbEventOperation, showing interactions between USER, DICT(Master), Slaves, UTIL, and SUMA components including system table reading and subscription management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Dbdict.txt#2025-04-21_snippet_2\n\nLANGUAGE: ascii-diagram\nCODE:\n```\nUSER                      DICT(Master)         (Slaves)           UTIL\n=======================================================================\nCREATE_EVENT_REQ::get\n-------------------------->\n\t\t\t  - read from system table\n                          UTIL_PREPARE::read\n                          ---------------------------------------->\n                          <----------------------------------------\n                          UTIL_EXECUTE        \n                          ---------------------------------------->\n                          <----------------------------------------\n\t\t\t\t\t\t\t  SUMA\n                          CREATE_EVENT_REQ::after_get            ======\n                          ---------------------->\n\t\t\t\t\t\tSUB_CREATE\n\t\t\t\t\t\t------------------>\n\t\t\t\t\t\t<------------------\n\t\t\t\t\t\tSUB_SYNC\n\t\t\t\t\t\t------------------>\n\t\t\t\t\t\t<------------------\n                          CREATE_EVENT_CONF\n                          <----------------------\nCREATE_EVENT_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Request Using PicoHTTPParser in C\nDESCRIPTION: This code snippet demonstrates how to read an HTTP request from a socket, parse it using the `phr_parse_request` function from the PicoHTTPParser library, and print the details of the request including method, path, and headers. It handles incomplete requests and errors appropriately.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/picohttpparser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nchar buf[4096], *method, *path;\nint pret, minor_version;\nstruct phr_header headers[100];\nsize_t buflen = 0, prevbuflen = 0, method_len, path_len, num_headers;\nssize_t rret;\n\nwhile (1) {\n    /* read the request */\n    while ((rret = read(sock, buf + buflen, sizeof(buf) - buflen)) == -1 && errno == EINTR)\n        ;\n    if (rret <= 0)\n        return IOError;\n    prevbuflen = buflen;\nbuflen += rret;\n    /* parse the request */\n    num_headers = sizeof(headers) / sizeof(headers[0]);\n    pret = phr_parse_request(buf, buflen, &method, &method_len, &path, &path_len,\n                             &minor_version, headers, &num_headers, prevbuflen);\n    if (pret > 0)\n        break; /* successfully parsed the request */\n    else if (pret == -1)\n        return ParseError;\n    /* request is incomplete, continue the loop */\n    assert(pret == -2);\n    if (buflen == sizeof(buf))\n        return RequestIsTooLongError;\n}\n\nprintf(\"request is %d bytes long\\n\", pret);\nprintf(\"method is %.*s\\n\", (int)method_len, method);\nprintf(\"path is %.*s\\n\", (int)path_len, path);\nprintf(\"HTTP version is 1.%d\\n\", minor_version);\nprintf(\"headers:\\n\");\nfor (i = 0; i != num_headers; ++i) {\n    printf(\"%.*s: %.*s\\n\", (int)headers[i].name_len, headers[i].name,\n           (int)headers[i].value_len, headers[i].value);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Compiler Flags for Profiling\nDESCRIPTION: Modifies compiler flags to prevent conflicts when profiling is enabled with MSVC, specifically ensuring profiles work correctly without generating unwanted flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC AND (FPROFILE_GENERATE OR FPROFILE_USE))\n  STRING(REPLACE \"/GL\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  STRING(REPLACE \"/GENPROFILE\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/USEPROFILE\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/LTCG\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/GENPROFILE\" \"\" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/USEPROFILE\" \"\" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/LTCG\" \"\" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Check CXX Compiler Warning\nDESCRIPTION: Function to check if a specific C++ compiler warning option is supported. Returns the corresponding -Wno- option if supported. Handles warning suppression and error conversion based on configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nFUNCTION(MY_CHECK_CXX_COMPILER_WARNING WARNING_OPTION RETURN_VALUE)\n  STRING(REGEX REPLACE \"^-Wno-\" \"\" WARNING_OPTION ${WARNING_OPTION})\n  STRING(REGEX REPLACE \"^-W\" \"\" WARNING_OPTION ${WARNING_OPTION})\n  STRING(REGEX MATCH \"^error=\" ERROR_PREFIX ${WARNING_OPTION})\n  STRING(REPLACE \"-\" \"_\" VAR_NAME ${WARNING_OPTION})\n  STRING(REPLACE \"=\" \"_\" VAR_NAME ${VAR_NAME})\n  STRING(REPLACE \"c++\" \"cpp\" VAR_NAME ${VAR_NAME})\n  SET(VAR_NAME \"HAVE_CXX_W_${VAR_NAME}\")\n  IF(MY_COMPILER_IS_GNU_OR_CLANG)\n    IF(SHOW_SUPPRESSED_COMPILER_WARNINGS AND NOT ERROR_PREFIX)\n      MY_CHECK_CXX_COMPILER_FLAG(\"-Werror=${WARNING_OPTION}\" ${VAR_NAME})\n      IF(${VAR_NAME})\n        SET(WARNING_OPTION \"error=${WARNING_OPTION}\")\n      ENDIF()\n    ENDIF()\n    IF(NOT ${VAR_NAME})\n      MY_CHECK_CXX_COMPILER_FLAG(\"-W${WARNING_OPTION}\" ${VAR_NAME})\n    ENDIF()\n  ELSE()\n    SET(${VAR_NAME} 0 CACHE INTERNAL \"-W${WARNING_OPTION} not supported\")\n  ENDIF()\n  IF(${VAR_NAME})\n    SET(${RETURN_VALUE} \"-Wno-${WARNING_OPTION}\" PARENT_SCOPE)\n  ELSE()\n    SET(${RETURN_VALUE} 0 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n```\n\n----------------------------------------\n\nTITLE: Building Shared NDB Client Library with Platform-Specific Handling in CMake\nDESCRIPTION: Creates the shared NDB client library with platform-specific implementations for Windows and non-Windows systems. It handles export symbols and linking differently based on the platform.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  # We have no explicit list of symbols to EXPORT in a .def file.\n  # So instead we create a shared library from ndbclient_exports.cpp.\n  # It will pull in, and make visible, all the rest.\n  ADD_SHARED_LIBRARY(ndbclient_so ndbclient_exports.cpp\n    COMPONENT Development\n    DESTINATION \"${INSTALL_LIBDIR}\"\n    LINK_LIBRARIES ${NDBCLIENT_SO_LIBS} ${NDBJTIE_LIB} ${LIBS_TO_LINK}\n    OUTPUT_NAME ndbclient\n    SOVERSION ${NDB_SHARED_LIB_VERSION}\n    )\nELSE()\n  # Merge libraries, tag _ndbclient_exports as explicitly needed,\n  # and it will transitively pull in the rest.\n  MERGE_LIBRARIES_SHARED(ndbclient_so ndbclient_exports ${NDBCLIENT_SO_LIBS}\n    EXPORTS _ndbclient_exports\n    COMPONENT Development\n    DESTINATION \"${INSTALL_LIBDIR}\"\n    LINK_LIBRARIES ${NDBJTIE_LIB} ${LIBS_TO_LINK}\n    OUTPUT_NAME ndbclient\n    SOVERSION ${NDB_SHARED_LIB_VERSION}\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Auth Backend Library in CMake\nDESCRIPTION: Creates a shared library `http_auth_backend_lib` for managing HTTP authentication, specifying source files and linking with other required libraries, such as RapidJSON and the previously defined http_common library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(http_auth_backend_lib\n  http_auth_backend.cc\n  kdf_sha_crypt.cc\n  kdf_pbkdf2.cc\n  mcf_error.cc\n  http_auth_error.cc\n  http_auth_backend_component.cc\n\n  OUTPUT_NAME \"mysqlrouter_http_auth_backend\"\n\n  LINK_LIBRARIES\n  http_common extra::rapidjson)\n```\n\n----------------------------------------\n\nTITLE: GCOV Coverage Configuration\nDESCRIPTION: Configuration block for enabling GCOV code coverage tracking on Linux builds. Sets up compiler and linker flags for coverage information collection.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(ENABLE_GCOV \"Enable gcov (debug, Linux builds only)\" OFF)\nIF (ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)\n  STRING_APPEND(CMAKE_C_FLAGS\n  \" -fprofile-arcs -ftest-coverage -fprofile-update=prefer-atomic -DHAVE_GCOV\")\n  STRING_APPEND(CMAKE_CXX_FLAGS\n  \" -fprofile-arcs -ftest-coverage -fprofile-update=prefer-atomic -DHAVE_GCOV\")\n  STRING_APPEND(CMAKE_C_LINK_FLAGS \" -Wl,--dynamic-list-data\")\n  STRING_APPEND(CMAKE_CXX_LINK_FLAGS \" -Wl,--dynamic-list-data\")\n  STRING_APPEND(CMAKE_EXE_LINKER_FLAGS\n  \" -fprofile-arcs -ftest-coverage -fprofile-update=prefer-atomic -lgcov\")\n  STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS\n  \" -fprofile-arcs -ftest-coverage -fprofile-update=prefer-atomic -lgcov\")\n  STRING_APPEND(CMAKE_MODULE_LINKER_FLAGS\n  \" -fprofile-arcs -ftest-coverage -fprofile-update=prefer-atomic -lgcov\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Core MySQL Client and Utility Subdirectories\nDESCRIPTION: Includes core client libraries, utilities, shared resources, and services needed for both client and server builds. These components are always built regardless of whether the server is included.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(client)\nADD_SUBDIRECTORY(utilities)\nADD_SUBDIRECTORY(share)\nADD_SUBDIRECTORY(libservices)\n\nIF(NOT WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(testclients)\n  ADD_SUBDIRECTORY(sql)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific CMake Configurations for MySQL Server\nDESCRIPTION: This snippet sets platform-specific configurations for FreeBSD, MSVC, and Linux. It includes definitions for FreeBSD, shared library settings for MSVC and Linux, and adjustments for profile-guided optimization on MSVC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(FREEBSD)\n  # Missing posix_memalign()\n  ADD_DEFINITIONS(-D_LIBCPP_HAS_NO_LIBRARY_ALIGNED_ALLOCATION)\nENDIF()\n\nSET(ABSL_PROPAGATE_CXX_STD ON)\n\nIF(MSVC AND NOT WIN32_CLANG)\n  SET(absl_BUILD_SHARED_LIBS ON)\n  SET(absl_BUILD_SHARED_LIBS ON CACHE INTERNAL \"\" FORCE)\nENDIF()\nIF(LINUX)\n  SET(absl_BUILD_SHARED_LIBS ON)\nENDIF()\n\nIF(MSVC AND (FPROFILE_GENERATE OR FPROFILE_USE))\n  # The use of CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS is incompatible with\n  # the MSVC /GL compiler option which is added by fprofile.cmake,\n  # along with the linker flags /LTCG, /GENPROFILE and /USEPROFILE\n  STRING(REPLACE \"/GL\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  STRING(REPLACE \"/GENPROFILE\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/USEPROFILE\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  STRING(REPLACE \"/LTCG\" \"\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO\n         \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\nENDIF()\n\nIF(MSVC)\n  STRING(APPEND CMAKE_SHARED_LINKER_FLAGS \" /IGNORE:4197\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Files for MySQL Authentication Module in CMake\nDESCRIPTION: This snippet defines test files for the MySQL authentication module in a CMake configuration. It sets a list of test files and iterates through them to add test modules with the necessary dependencies. The extra source code is specified for the authentication implementation, and the include directory is set relative to the source.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEST_FILES\\n  test_authentication.cc\\n  )\\n\\nFOREACH(TEST_FILE ${TEST_FILES})\\n  ADD_TEST_FILE(\\n    ${TEST_FILE}\\n    MODULE mock_server\\n    INCLUDE_DIRS ../src/\\n    LIB_DEPENDS mysql_protocol\\n    EXTRA_SOURCES ../src/authentication.cc\\n    )\\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Unix-like Systems Configuration for MySQL Server Installation\nDESCRIPTION: Handles the configuration for Unix-like systems, including pkgconfig setup, script installation, and systemd service files if enabled. Configures scripts like mysql_config, mysqldumpslow, and mysqld_safe with different destinations based on their purpose.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n  SET(PKGCONFIG_FILE ${LIBMYSQL_OS_OUTPUT_NAME}.pc)\n  STRING(REGEX REPLACE \"/mysql$\" \"\" PKGCONFIG_DIR \"${INSTALL_LIBDIR}\")\n  SET(PKGCONFIG_DIR \"${PKGCONFIG_DIR}/pkgconfig\")\n  # Update the cache, to make it visible in cmake-gui.\n  SET(INSTALL_PKGCONFIGDIR ${INSTALL_PKGCONFIGDIR} CACHE PATH\n    \"Where to install ${PKGCONFIG_FILE}, defaults to ${PKGCONFIG_DIR}\")\n  IF(NOT INSTALL_PKGCONFIGDIR)\n    SET(INSTALL_PKGCONFIGDIR \"${PKGCONFIG_DIR}\")\n  ENDIF()\n\n  CONFIGURE_FILE(mysqlclient.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PKGCONFIG_FILE}\n    ESCAPE_QUOTES @ONLY)\n\n  IF(INSTALL_PKGCONFIGDIR)\n    MESSAGE(STATUS \"INSTALL ${PKGCONFIG_FILE} ${INSTALL_PKGCONFIGDIR}\")\n    INSTALL(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/${PKGCONFIG_FILE}\n      DESTINATION ${INSTALL_PKGCONFIGDIR}\n      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n      COMPONENT Development\n      )\n  ENDIF()\n\n  # mysqld_safe used in mtr even for systemd platforms\n  IF(WITH_SYSTEMD)\n    SET(BIN_SCRIPTS\n      mysql_config\n      mysqldumpslow\n      mysqld_safe\n      )\n  ELSE()\n    SET(BIN_SCRIPTS\n      mysql_config\n      mysqldumpslow\n      mysqld_multi\n      mysqld_safe\n      )\n  ENDIF()\n\n  FOREACH(file ${BIN_SCRIPTS})\n    IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file}.sh)\n      CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${file}.sh\n        ${CMAKE_CURRENT_BINARY_DIR}/${file} ESCAPE_QUOTES @ONLY\n        )\n    ELSEIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${file}.pl.in)\n      CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${file}.pl.in\n        ${CMAKE_CURRENT_BINARY_DIR}/${file} ESCAPE_QUOTES @ONLY\n        )\n    ELSE()\n      MESSAGE(FATAL_ERROR \"Can not find ${file}.sh or ${file}.pl.in in \"\n        \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        )\n    ENDIF()\n    EXECUTE_PROCESS(COMMAND chmod +x ${CMAKE_CURRENT_BINARY_DIR}/${file})\n\n    IF(${file} STREQUAL \"mysql_config\")\n      SET(file_COMPONENT Development)\n    ELSE()\n      SET(file_COMPONENT Server)\n    ENDIF()\n\n    INSTALL_SCRIPT(\n      ${CMAKE_CURRENT_BINARY_DIR}/${file}\n      DESTINATION ${INSTALL_BINDIR}\n      COMPONENT ${file_COMPONENT}\n     )\n  ENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Outlining MySQL Server Table Creation Steps\nDESCRIPTION: This snippet provides a high-level overview of the steps involved in creating a table in MySQL Server. It includes interactions between the client, DIH (Distributed Information Handler), DICT (Dictionary), LQH (Local Query Handler), and TC (Transaction Coordinator) components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/CreateTable.new.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1) Receive from client (sequence of DICTTABINFO)\n\n2) CREATE_FRAGMENTATION_REQ -> local DIH \n   Returns all fragments for table + some other stuff \n   NOTE without side effects in DIH\n\n3) Pack table description\n\n4) CREATE_TAB -> all DICTs (including table data) \n   1) Write schema file (ADD_STARTED)\n   2) Write table descriptor to file\n   3) CREATE_TAB (DIADDTABREQ) -> local DIH (including fragment info)\n   4) DIH \n        1) write table descriptor\n        2) For each local fragment \n           ADD_FRAG -> local DICT\n             LQHFRAGREQ -> local LQH\n             LQHADDATTREQ -> local LQH\n   5) TAB_COMMITREQ -> local LQH\n\n5) WAIT_GCP\n\n6) ALTER_TAB (activate) -> all DICTs\n   1) Write schema file (CREATED)\n   2) TAB_COMMITREQ -> local DIH\n   3) TC_SCHVERREQ -> local TC\n```\n\n----------------------------------------\n\nTITLE: Including Utility and Configuration Files\nDESCRIPTION: This snippet includes CMake files containing utility functions, variable definitions, and configuration settings. These files provide reusable code and configuration options for the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE(utils.cmake)\nINCLUDE(variables.cmake)\nINCLUDE(configure.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Server Library Subdirectories in CMake\nDESCRIPTION: This CMake snippet adds various subdirectories to the build process. Each subdirectory contains specific library components used by the MySQL server, such as allocators, binary logging functionality, container implementations, GTID utilities, math functions, serialization libraries, and other utility modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(abi_helpers)\nADD_SUBDIRECTORY(allocators)\nADD_SUBDIRECTORY(binlog)\nADD_SUBDIRECTORY(containers)\nADD_SUBDIRECTORY(gtid)\nADD_SUBDIRECTORY(math)\nADD_SUBDIRECTORY(serialization)\nADD_SUBDIRECTORY(utils)\n```\n\n----------------------------------------\n\nTITLE: Linking MySQL Server Libraries\nDESCRIPTION: Links the main SQL library with replication, replication source, replica, and binary log libraries, establishing interdependencies between components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\n# All these libraries depend on each other.\nTARGET_LINK_LIBRARIES(sql_main rpl rpl_source rpl_replica binlog)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Properties\nDESCRIPTION: This snippet sets the minimum required CMake version, project name, version, languages supported, and a homepage URL for documentation. It establishes core project metadata that CMake uses for configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\n\nproject(gperftools VERSION 2.15 LANGUAGES C CXX\n        DESCRIPTION \"Performance tools for C++\"\n        HOMEPAGE_URL https://github.com/gperftools/gperftools)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router Executable in CMake\nDESCRIPTION: Defines the main MySQL Router executable build configuration with platform-specific settings and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlrouter\n  main.cc\n  ${router_rc_files}\n  COMPONENT Router\n  LINK_LIBRARIES\n  harness-library\n  router_lib\n  router_frontend_lib\n  ${CMAKE_DL_LIBS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Library Build Properties for MySQL\nDESCRIPTION: Sets up build configuration for MySQL client libraries. Extracts link dependencies, gets version and output name properties, and configures private library dependencies, with special handling for OpenSSL on certain platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nEXTRACT_LINK_LIBRARIES(mysqlclient CLIENT_LIBS)\n\nIF(MSVC)\n  GET_TARGET_PROPERTY(LIBMYSQL_OS_SHLIB_VERSION mysqlclient VERSION)\n  GET_TARGET_PROPERTY(LIBMYSQL_OS_OUTPUT_NAME mysqlclient OUTPUT_NAME)\nELSE()\n  GET_TARGET_PROPERTY(LIBMYSQL_OS_SHLIB_VERSION libmysql VERSION)\n  GET_TARGET_PROPERTY(LIBMYSQL_OS_OUTPUT_NAME libmysql OUTPUT_NAME)\nENDIF()\n\nSET(CONFIG_CLIENT_LIBS \"${CLIENT_LIBS}\")\nSET(CONFIG_LIBS_PRIVATE \"${CLIENT_LIBS}\")\nSET(CONFIG_REQUIRES_PRIVATE \"\")\n\nIF (WITH_SSL STREQUAL \"system\")\n  # We have implemented \"system\" for other platforms as well, but those\n  # are non-native packages.\n  IF(LINUX OR SOLARIS OR FREEBSD)\n    SET(CONFIG_REQUIRES_PRIVATE \"openssl\")\n    STRING(REPLACE \"-lssl\" \"\" CONFIG_LIBS_PRIVATE \"${CONFIG_LIBS_PRIVATE}\")\n    STRING(REPLACE \"-lcrypto\" \"\" CONFIG_LIBS_PRIVATE \"${CONFIG_LIBS_PRIVATE}\")\n    STRING(REGEX REPLACE \"[ ]+\" \" \" CONFIG_LIBS_PRIVATE\n      \"${CONFIG_LIBS_PRIVATE}\")\n  ENDIF()\nENDIF()\n\nMESSAGE(STATUS \"CONFIG_CLIENT_LIBS ${CONFIG_CLIENT_LIBS}\")\nMESSAGE(STATUS \"CONFIG_LIBS_PRIVATE ${CONFIG_LIBS_PRIVATE}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Timeout Based on Build Type\nDESCRIPTION: Sets different timeout values for test execution depending on whether rapid testing mode is enabled. Provides flexibility for different testing scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_RAPID)\n  SET(TIMEOUT 600)\nELSE()\n  SET(TIMEOUT 300)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL Test Suites for Profiling\nDESCRIPTION: Defines a list of test suites to be used for profiling and creates a comma-separated string from them. Determines the number of processors available for parallel testing using the PROCESSORCOUNT function.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MTR_TESTS_FOR_PROFILING\n  auth_sec\n  binlog\n  connection_control\n  encryption\n  gcol\n  gis\n  innodb\n  json\n  main\n  sysschema\n  thread_pool\n  x\n  component_connection_control\n  )\nSTRING(REPLACE \";\" \",\" MTR_SUITE_STRING \"${MTR_TESTS_FOR_PROFILING}\")\n\nPROCESSORCOUNT(NPROC)\nIF(NPROC EQUAL 0)\n  SET(NPROC 8)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Data Dictionary Sources\nDESCRIPTION: Defines the list of source files that make up the MySQL Data Dictionary (DD) implementation, including core components, system views, tables, and types.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSET(DD_SOURCES\n  dd/collection.cc\n  dd/dd_event.cc\n  dd/dd_resource_group.cc\n  # ... shortened for brevity ...\n  dd/impl/upgrade/server.cc\n  dd/impl/upgrade/dd.cc\n  # ... shortened for brevity ...\n  dd/performance_schema/init.cc\n  dd/ndbinfo_schema/init.cc\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Harness Plugin Structure Definition\nDESCRIPTION: Demonstrates how to define a new plugin with version, dependencies, and lifecycle management function pointers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstatic const char* requires[] = {\n  \"magic (>>1.0)\",\n};\n\nPlugin example = {\n  PLUGIN_ABI_VERSION,\n  ARCHITECTURE_DESCRIPTOR,\n  \"An example plugin\",       // Brief description of plugin\n  VERSION_NUMBER(1,0,0),     // Version number of the plugin\n\n  // Array of required plugins\n  sizeof(requires)/sizeof(*requires),\n  requires,\n\n  // Array of plugins that conflict with this one\n  0,\n  NULL,\n\n  // pointers to API functions, can be NULL if not implemented\n  init,\n  deinit,\n  start,\n  stop,\n};\n```\n\n----------------------------------------\n\nTITLE: Subscription Start Sequence\nDESCRIPTION: Shows the sequence for starting a subscription between USER, DICT(Master), Slaves and SUMA components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Event.txt#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUSER                      DICT(Master)         (Slaves)           SUMA\n=======================================================================\nSUB_START_REQ\n-------------------------->\\n                          SUB_START_REQ\n                          ---------------------->\n\\t\\t\\t\\t\\t\\tSUB_START\n\\t\\t\\t\\t\\t\\t------------------>\\n\\t\\t\\t\\t\\t\\t<------------------\n                          SUB_START_CONF\n                          <----------------------\nSUB_START_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Add Executable with MySQL Macros in CMake\nDESCRIPTION: This snippet uses a custom macro `MYSQL_ADD_EXECUTABLE` to create executables for each test specified in the `TESTS` variable. The macro likely handles setting up the executable target, specifying source files, defining the runtime output directory, adding a test, enabling exports, and linking necessary libraries like `GTEST_LIBRARIES`, `mysys`, `minchassis`, and `unit_test_common`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t\n    ${test}-t.cc\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugin_output_directory\n    ADD_TEST ${test}\n    ENABLE_EXPORTS\n    LINK_LIBRARIES ${GTEST_LIBRARIES} mysys minchassis unit_test_common\n  )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Workaround for Linker Issue on Debian with GCC\nDESCRIPTION: This snippet provides a workaround for a linker issue that affects the MySQL X Protocol plugin build, specifically for GNU compilers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU)\n  TARGET_LINK_OPTIONS(xprotocol_plugin PRIVATE -Wl,--no-as-needed -lpthread)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Test Targets with CMake\nDESCRIPTION: This snippet shows the common pattern used throughout the file to define test targets for Abseil's logging library using CMake. Each target specifies the test name, source files, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    absl_check_test\n  SRCS\n    \"absl_check_test.cc\"\n    \"check_test_impl.inc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::absl_check\n    absl::config\n    absl::core_headers\n    absl::log_internal_test_helpers\n    absl::status\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Project with Version and Languages\nDESCRIPTION: This snippet defines the project name, version, and supported languages (C and C++). The project name is set to \"MySQLRouter\" and the version is obtained from the `PROJECT_VERSION_TEXT` variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"PROJECT(\\\"MySQLRouter\\\" VERSION ${PROJECT_VERSION_TEXT} LANGUAGES C CXX)\"\n```\n\n----------------------------------------\n\nTITLE: Systemd Configuration for MySQL Server and Router\nDESCRIPTION: Configures and installs systemd service files for MySQL server and router if systemd is enabled. Handles differences in systemd implementations, creates pre-systemd scripts, service files, and tmpfiles configuration with appropriate permissions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n  # Systemd files\n  IF(WITH_SYSTEMD)\n\n    IF(SYSTEMD_HAS_PLUS)\n      SET(SYSTEMD_EXE_PREFIX \"+\")\n      SET(SYSTEMD_START_ONLY \"# hence, + prefix is used\")\n    ELSE()\n      SET(SYSTEMD_EXE_PREFIX \"\")\n      SET(SYSTEMD_START_ONLY \"PermissionsStartOnly=true\")\n    ENDIF()\n\n    CONFIGURE_FILE(systemd/mysqld_pre_systemd.in\n      ${CMAKE_CURRENT_BINARY_DIR}/mysqld_pre_systemd ESCAPE_QUOTES @ONLY)\n\n    CONFIGURE_FILE(systemd/mysqld.service.in\n      ${CMAKE_CURRENT_BINARY_DIR}/${SYSTEMD_SERVICE_NAME}.service\n      ESCAPE_QUOTES @ONLY)\n\n    CONFIGURE_FILE(systemd/mysqld@.service.in\n      ${CMAKE_CURRENT_BINARY_DIR}/${SYSTEMD_SERVICE_NAME}@.service\n      ESCAPE_QUOTES @ONLY)\n\n    CONFIGURE_FILE(systemd/mysqld.tmpfiles.d.in\n      ${CMAKE_CURRENT_BINARY_DIR}/mysql.conf ESCAPE_QUOTES @ONLY)\n\n    INSTALL_SCRIPT(\n      ${CMAKE_CURRENT_BINARY_DIR}/mysqld_pre_systemd\n      DESTINATION ${INSTALL_BINDIR}\n      COMPONENT Server\n    )\n\n    IF(INSTALL_LAYOUT MATCHES \"STANDALONE\")\n      SET(SYSTEMD_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}/\")\n    ELSE()\n      SET(SYSTEMD_INSTALL_PREFIX \"\")\n    ENDIF()\n\n    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${SYSTEMD_SERVICE_NAME}.service\n      DESTINATION ${SYSTEMD_INSTALL_PREFIX}${SYSTEMD_SERVICES_DIR}\n      COMPONENT Server\n      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n    )\n    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${SYSTEMD_SERVICE_NAME}@.service\n      DESTINATION ${SYSTEMD_INSTALL_PREFIX}${SYSTEMD_SERVICES_DIR}\n      COMPONENT Server\n      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n    )\n    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mysql.conf\n      DESTINATION ${SYSTEMD_INSTALL_PREFIX}${SYSTEMD_TMPFILES_DIR}\n      COMPONENT Server\n      PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n    )\n\n    # MySQL Router\n    IF(WITH_ROUTER)\n      CONFIGURE_FILE(systemd/mysqlrouter.service.in\n        ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter.service\n        ESCAPE_QUOTES @ONLY)\n\n      INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter.service\n        DESTINATION ${SYSTEMD_INSTALL_PREFIX}${SYSTEMD_SERVICES_DIR}\n        COMPONENT Router\n        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n      )\n\n      CONFIGURE_FILE(systemd/mysqlrouter.tmpfiles.d.in\n        ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter.conf ESCAPE_QUOTES @ONLY)\n\n      INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter.conf\n        DESTINATION ${SYSTEMD_INSTALL_PREFIX}${SYSTEMD_TMPFILES_DIR}\n        COMPONENT Router\n        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n      )\n    ENDIF()\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Warnings and Configuration Options in CMake\nDESCRIPTION: This snippet sets the `CBOR_VERSION` and disables specific warnings and paths in the CMake build process for MySQL. It adjusts compiler flags for Windows (`/wd4715`) and handles various warning flags, toggling them based on their availability. It also configures various build settings like `CBOR_PRETTY_PRINTER` and `WITH_EXAMPLES` to `OFF`, and sets paths related to the libcbor library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CBOR_VERSION \\\"0.11.0\\\")\\n\\nDISABLE_MISSING_PROFILE_WARNING()\\n\\n# not all control paths return a value\\nIF(WIN32)\\n  STRING_APPEND(CMAKE_C_FLAGS \\\" /wd4715\\\")\\nENDIF()\\n\\nMY_CHECK_CXX_COMPILER_WARNING(\\\"-Wmaybe-uninitialized\\\" HAS_WARN_FLAG)\\nIF(HAS_WARN_FLAG)\\n  STRING_APPEND(CMAKE_C_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\\nENDIF()\\nMY_CHECK_CXX_COMPILER_WARNING(\\\"-Wdocumentation\\\" HAS_WARN_FLAG)\\nIF(HAS_WARN_FLAG)\\n  STRING_APPEND(CMAKE_C_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\\nENDIF()\\nMY_CHECK_CXX_COMPILER_WARNING(\\\"-Wstrict-prototypes\\\" HAS_WARN_FLAG)\\nIF(HAS_WARN_FLAG)\\n  STRING_APPEND(CMAKE_C_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\\nENDIF()\\nMY_CHECK_CXX_COMPILER_WARNING(\\\"-Wreturn-type\\\" HAS_WARN_FLAG)\\nIF(HAS_WARN_FLAG)\\n  STRING_APPEND(CMAKE_C_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\\nENDIF()\\n\\n# Disable some options which are default ON:\\n\\nSET(CBOR_PRETTY_PRINTER OFF)\\nSET(CBOR_PRETTY_PRINTER OFF CACHE INTERNAL \\\"\\\")\\n\\nSET(WITH_EXAMPLES OFF)\\nSET(WITH_EXAMPLES OFF CACHE INTERNAL \\\"\\\")\\n\\nSET(SANITIZE OFF)\\nSET(SANITIZE OFF CACHE INTERNAL \\\"\\\")\\n\\nMACRO(do_not_install)\\nENDMACRO()\\n\\nSET(CBOR_VERSION_DIR \\\"libcbor-0.11.0\\\")\\n\\nADD_SUBDIRECTORY(${CBOR_VERSION_DIR})\\n\\nADD_LIBRARY(cbor_interface INTERFACE)\\nTARGET_LINK_LIBRARIES(cbor_interface INTERFACE cbor)\\nTARGET_INCLUDE_DIRECTORIES(cbor_interface SYSTEM BEFORE INTERFACE\\n  ${CMAKE_CURRENT_BINARY_DIR}/${CBOR_VERSION_DIR}/\\n  ${CMAKE_CURRENT_SOURCE_DIR}/${CBOR_VERSION_DIR}/src\\n  )\\nADD_LIBRARY(ext::cbor ALIAS cbor_interface)\n```\n\n----------------------------------------\n\nTITLE: Configuring Heap Plugin for MySQL Server\nDESCRIPTION: Adds the Heap storage engine as a plugin to MySQL Server. It specifies that Heap is a mandatory storage engine and links it with the heap_library and the RapidJSON library for JSON support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(heap ha_heap.cc\n  STORAGE_ENGINE MANDATORY\n  LINK_LIBRARIES heap_library extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL X Plugin Build Option\nDESCRIPTION: This snippet defines a CMake option to control whether the MySQL X plugin is built. The option defaults to ON, meaning the plugin is built by default.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"OPTION(WITH_MYSQLX \\\"Build MySQL X plugin\\\" ON)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory for MySQL\nDESCRIPTION: Configures the temporary directory for MySQL, handling differences between Windows and other platforms. It uses the P_tmpdir macro or a user-specified path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32) # P_tmpdir is not defined on Windows as of VS2015.\n  SET(TMPDIR \"\" # So we use empty path as default. In practice TMP/TEMP is used\n    CACHE PATH\n    \"PATH to MySQL TMP dir\")\nELSE()\n  SET(TMPDIR \"P_tmpdir\"\n    CACHE PATH\n    \"PATH to MySQL TMP dir. Defaults to the P_tmpdir macro in <stdio.h>\")\nENDIF()\nIF(TMPDIR STREQUAL \"P_tmpdir\")\n  # Do not quote it, to refer to the P_tmpdir macro.\n  SET(DEFAULT_TMPDIR \"P_tmpdir\")\nELSE()\n  # Quote it, to make it a const char string.\n  SET(DEFAULT_TMPDIR \"\\\"${TMPDIR}\\\"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Static libcurl Library\nDESCRIPTION: This snippet configures the build for a static libcurl library. It sets compile definitions, links necessary libraries, and adjusts target properties such as prefix, suffix, and interface compile definitions. It also handles symbol hiding and LTO (Link Time Optimization) if enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_STATIC_LIBS)\n  list(APPEND libcurl_export ${LIB_STATIC})\n  add_library(${LIB_STATIC} STATIC ${LIB_SOURCE})\n  add_library(${PROJECT_NAME}::${LIB_STATIC} ALIAS ${LIB_STATIC})\n  if(WIN32)\n    set_property(TARGET ${LIB_STATIC} APPEND PROPERTY COMPILE_DEFINITIONS \"CURL_STATICLIB\")\n  endif()\n  target_link_libraries(${LIB_STATIC} PRIVATE ${CURL_LIBS})\n  # Remove the \"lib\" prefix since the library is already named \"libcurl\".\n  set_target_properties(${LIB_STATIC} PROPERTIES\n    PREFIX \"\" OUTPUT_NAME \"${LIBCURL_OUTPUT_NAME}\"\n    SUFFIX \"${STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n    INTERFACE_COMPILE_DEFINITIONS \"CURL_STATICLIB\")\n  if(CURL_HIDES_PRIVATE_SYMBOLS)\n    set_property(TARGET ${LIB_STATIC} APPEND PROPERTY COMPILE_FLAGS \"${CURL_CFLAG_SYMBOLS_HIDE}\")\n    set_property(TARGET ${LIB_STATIC} APPEND PROPERTY COMPILE_DEFINITIONS \"CURL_HIDDEN_SYMBOLS\")\n  endif()\n  if(CURL_HAS_LTO)\n    set_target_properties(${LIB_STATIC} PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)\n  endif()\n\n  target_include_directories(${LIB_STATIC} INTERFACE\n    \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n    \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Keyring File Component to MySQL Build\nDESCRIPTION: Adds the keyring_file component to the MySQL build system as a loadable module, linking against the specified source files and libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/keyring_file/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(keyring_file\n  ${KEYRING_FILE_SOURCE}\n  LINK_LIBRARIES ${KEYRING_FILE_LIBRARIES}\n  MODULE_ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Execute Phase Protocol Flow\nDESCRIPTION: Documents the signal flow in the EXECUTE phase between Client, Util and TC components. Shows request handling, key and attribute info transmission, and transaction confirmation steps.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbutil/DbUtil.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nClient --UTIL_EXECUTE_REQ--> Util\n                    ...\nClient --UTIL_EXECUTE_REQ--> Util\n\nUtil --TCKEYREQ-->  tc\n\nUtil --KEYINFO-->   tc\n             ...\nUtil --KEYINFO-->   tc\n\nUtil --ATTRINFO-->  tc\n             ...\nUtil --ATTRINFO-->  tc\n\nUtil <--TCKEYCONF-- tc\n\nUtil --TC_COMMIT_ACK-->tc\n\nUtil <--TRANSID_AI-- tc\n               ...\nUtil <--TRANSID_AI-- tc\n```\n\n----------------------------------------\n\nTITLE: MacOS CMake Configuration Settings\nDESCRIPTION: Sets up CMake requirements for macOS, requiring version 3.18 or higher for macOS 11+ to handle system libraries correctly, and version 3.19 for proper Xcode build system support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(APPLE)\n  IF(CMAKE_GENERATOR STREQUAL \"Xcode\")\n    SET(APPLE_XCODE 1)\n  ENDIF()\n  # For macOS version >= 11 we need cmake 3.18\n  # System libraries like\n  #    /usr/lib/libresolv.dylib\n  # are no longer present in the file system.\n  # cmake >= 3.18 will look for .tbd files in the SDK instead\n  # So we end up linking with:\n  #    /Applications/Xcode.app/.../usr/lib/libresolv.tbd\n  # cmake >= 3.19 will use the new build system by default for Xcode >= 12.x\n  CMAKE_MINIMUM_REQUIRED(VERSION 3.19)\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Cluster Plugin Sources\nDESCRIPTION: Lists all the source files that make up the NDB Cluster storage engine plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(NDBCLUSTER_SOURCES\n  plugin/ha_ndbcluster.cc\n  plugin/ha_ndbcluster_cond.cc\n  plugin/ha_ndbcluster_push.cc\n  plugin/ha_ndbcluster_connection.cc\n  plugin/ha_ndbcluster_binlog.cc\n  plugin/ha_ndb_index_stat.cc\n  plugin/ha_ndb_ddl_fk.cc\n  plugin/ha_ndbinfo.cc\n  plugin/ha_ndbinfo_sql.cc\n  plugin/ha_query_plan.cc\n  plugin/ndb_local_connection.cc\n  plugin/ndb_share.cc\n  plugin/ndb_thd.cc\n  plugin/ndb_thd_ndb.cc\n  plugin/ndb_global_schema_lock.cc\n  plugin/ndb_conflict_trans.cc\n  plugin/ndb_anyvalue.cc\n  plugin/ndb_ndbapi_util.cc\n  plugin/ndb_binlog_extra_row_info.cc\n  plugin/ndb_event_data.cc\n  plugin/ndb_schema_object.cc\n  plugin/ndb_schema_dist.cc\n  plugin/ndb_component.cc\n  plugin/ndb_repl_tab.cc\n  plugin/ndb_conflict.cc\n  plugin/ndb_tdc.cc\n  plugin/ndb_log.cc\n  plugin/ndb_binlog_thread.cc\n  plugin/ndb_name_util.cc\n  plugin/ndb_bitmap.cc\n  plugin/ndb_table_map.cc\n  plugin/ndb_dd.cc\n  plugin/ndb_modifiers.cc\n  plugin/ndb_dd_client.cc\n  plugin/ndb_dd_schema.cc\n  plugin/ndb_dd_table.cc\n  plugin/ndb_dd_sdi.cc\n  plugin/ndb_plugin_reference.cc\n  plugin/ndb_server_hooks.cc\n  plugin/ndb_binlog_client.cc\n  plugin/ndb_metadata.cc\n  plugin/ndb_dd_disk_data.cc\n  plugin/ndb_dd_upgrade_table.cc\n  plugin/ndb_binlog_hooks.cc\n  plugin/ndb_util_table.cc\n  plugin/ndb_schema_dist_table.cc\n  plugin/ndb_fk_util.cpp\n  plugin/ndb_schema_trans_guard.cc\n  plugin/ndb_create_helper.cc\n  plugin/ndb_apply_status_table.cc\n  plugin/ndb_metadata_change_monitor.cc\n  plugin/ndb_schema_result_table.cc\n  plugin/ndb_metadata_sync.cc\n  plugin/ndb_ddl_transaction_ctx.cc\n  plugin/ndb_record_layout.cc\n  plugin/ndb_sql_metadata_table.cc\n  plugin/ndb_stored_grants.cc\n  plugin/ndb_dd_fk.cc\n  plugin/ndb_pfs_init.cc\n  plugin/ndb_pfs_table.cc\n  plugin/ndb_sync_pending_objects_table.cc\n  plugin/ndb_sync_excluded_objects_table.cc\n  plugin/ndb_dd_sync.cc\n  plugin/ndb_upgrade_util.cc\n  plugin/ndb_mysql_services.cc\n  plugin/ndb_table_stats.cc\n  plugin/ndb_index_stat_head_table.cc\n  plugin/ndb_index_stat_sample_table.cc\n  plugin/ndb_applier.cc\n  plugin/ndb_replica.cc\n  plugin/ndb_binlog_index_rows.cc\n  plugin/ndb_rpl_filter.cc\n  plugin/ndb_replica_status_table.cc\n  plugin/ndb_binlog_purger.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Including Custom CMake Scripts\nDESCRIPTION: This snippet includes several custom CMake scripts that handle specific aspects of the build process, such as settings, RPATH configuration, testing, configuration, packaging, plugin management, fuzzing, and installation macros.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE(cmake/settings.cmake)\nINCLUDE(cmake/set_rpath.cmake)\n\n# Required tools, libraries, etc..\nINCLUDE(cmake/testing.cmake)  # does not enable testing\nINCLUDE(cmake/configure.cmake)\nINCLUDE(cmake/packaging.cmake)\nINCLUDE(cmake/Plugin.cmake)\nINCLUDE(cmake/fuzzer.cmake)\nINCLUDE(cmake/install_macros.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Installing NDB Cluster Public Headers in CMake\nDESCRIPTION: Defines three sets of header files: general NDB headers, NDBAPI-specific headers, and MGMAPI-specific headers. Then configures CMake to install these headers to appropriate directories when the 'Development' component is installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_NDB)\n  RETURN()\nENDIF()\n\n# Install public headers\nSET(NDB_GENERAL_HEADERS\n  ndb_constants.h\n  ndb_init.h\n  # The below files are generated and thus found in build dir\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb_types.h\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb_version.h\n  )\n\nSET(NDB_NDBAPI_HEADERS\n  ndbapi/ndbapi_limits.h\n  ndbapi/ndb_opt_defaults.h\n  ndbapi/Ndb.hpp\n  ndbapi/NdbApi.hpp\n  ndbapi/NdbTransaction.hpp\n  ndbapi/NdbDictionary.hpp\n  ndbapi/NdbError.hpp\n  ndbapi/NdbEventOperation.hpp\n  ndbapi/NdbIndexOperation.hpp\n  ndbapi/NdbOperation.hpp\n  ndbapi/ndb_cluster_connection.hpp\n  ndbapi/NdbBlob.hpp\n  ndbapi/NdbPool.hpp\n  ndbapi/NdbRecAttr.hpp\n  ndbapi/NdbReceiver.hpp\n  ndbapi/NdbScanFilter.hpp\n  ndbapi/NdbScanOperation.hpp\n  ndbapi/NdbIndexScanOperation.hpp\n  ndbapi/NdbIndexStat.hpp\n  ndbapi/ndberror.h\n  ndbapi/NdbInterpretedCode.hpp\n  )\n\nSET(NDB_MGMAPI_HEADERS\n  mgmapi/mgmapi.h\n  mgmapi/mgmapi_error.h\n  mgmapi/mgmapi_debug.h\n  mgmapi/mgmapi_config_parameters.h\n  mgmapi/mgmapi_config_parameters_debug.h\n  mgmapi/ndb_logevent.h\n  mgmapi/ndbd_exit_codes.h\n  )\n\nINSTALL(FILES ${NDB_GENERAL_HEADERS}\n  DESTINATION ${INSTALL_INCLUDEDIR}/storage/ndb\n  COMPONENT Development)\n\nINSTALL(FILES ${NDB_NDBAPI_HEADERS}\n  DESTINATION ${INSTALL_INCLUDEDIR}/storage/ndb/ndbapi\n  COMPONENT Development)\n\nINSTALL(FILES ${NDB_MGMAPI_HEADERS}\n  DESTINATION ${INSTALL_INCLUDEDIR}/storage/ndb/mgmapi\n  COMPONENT Development)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Directory Structure for Unix Builds\nDESCRIPTION: Creates necessary output directories for libraries, plugins, and runtime files on Unix systems. Also establishes symbolic links for bin and lib directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nIF(UNIX)\n  EXECUTE_PROCESS(\n    COMMAND ${CMAKE_COMMAND} -E make_directory library_output_directory\n    COMMAND ${CMAKE_COMMAND} -E make_directory plugin_output_directory\n    COMMAND ${CMAKE_COMMAND} -E make_directory runtime_output_directory\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    )\n  IF(SASL_CUSTOM_LIBRARY)\n    EXECUTE_PROCESS(\n      COMMAND ${CMAKE_COMMAND} -E make_directory library_output_directory/sasl2\n    )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MySQL Keyring Common Library\nDESCRIPTION: Specifies all source files needed for the MySQL keyring common library, organized by functional category including component helpers, config readers, data representation, file I/O, encryption, and JSON processing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(KEYRING_COMMON_SOURCES\n  # Component implementation helpers\n  component_helpers/src/keyring_log_builtins_definition.cc\n  # Config file reader\n  config/config_reader.cc\n  # Data representation\n  data/data.cc\n  data/meta.cc\n  # File reader/writer\n  data_file/reader.cc\n  data_file/writer.cc\n  # Encryption\n  encryption/aes.cc\n  # JSON reader/writer\n  json_data/json_reader.cc\n  json_data/json_writer.cc\n  # Utilities\n  utils/utils.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring GNU Compiler Flags for Profile-Guided Optimization in CMake\nDESCRIPTION: This snippet configures GNU compiler flags for profile-guided optimization builds, disabling specific warnings for certain files to address issues that arise during the optimization process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND FPROFILE_USE)\n  ADD_COMPILE_FLAGS(page/page0zip.cc COMPILE_FLAGS\n    \"-Wno-array-bounds\"\n    \"-Wno-restrict\"\n    \"-Wno-stringop-overflow\"\n    )\n  ADD_COMPILE_FLAGS(lock/lock0lock.cc COMPILE_FLAGS\n    \"-Wno-alloc-size-larger-than\"\n    )\n  # This is needed for innodb_zipdecompress\n  ADD_COMPILE_FLAGS(\n    rem/rem0wrec.cc\n    COMPILE_FLAGS \"-Wno-stringop-overflow\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Unit Tests for MySQL Server in CMake\nDESCRIPTION: This snippet defines a list of tests, then iterates over them to create executable targets. Each test is linked against the gunit_small library. This setup allows for easy addition and management of unit tests in the MySQL server project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/memory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Add tests\nSET(TESTS\n  unique_ptr\n  ref_ptr\n  aligned_atomic)\n\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc ADD_TEST ${test})\n  TARGET_LINK_LIBRARIES(${test}-t gunit_small)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Parsing MySQL Cluster Version and Configuring NDB Version Header in CMake\nDESCRIPTION: Parses the MYSQL_CLUSTER_VERSION variable to extract major, minor, build and status components, then uses these values to generate the ndb_version.h header file. Similar to ndb_types.h, it's also excluded from distribution packages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(ndb_require_variable)\n# Require the MySQL Cluster version variable to be set by\n# higher level script.\nNDB_REQUIRE_VARIABLE(MYSQL_CLUSTER_VERSION)\n\n# Split the cluster version and set NDB version components\nIF(${MYSQL_CLUSTER_VERSION} MATCHES \"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(.*)\") \n  SET(NDB_VERSION_MAJOR\n    \"${CMAKE_MATCH_1}\" CACHE INTERNAL \"NDB Major Version\" FORCE)\n  SET(NDB_VERSION_MINOR\n    \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"NDB Minor Version\" FORCE)\n  SET(NDB_VERSION_BUILD\n    \"${CMAKE_MATCH_3}\" CACHE INTERNAL \"NDB Build Version\" FORCE)\n  SET(NDB_VERSION_STATUS\n    \"${CMAKE_MATCH_4}\" CACHE INTERNAL \"NDB Status Version\" FORCE)\nELSE()\n  MESSAGE(FATAL_ERROR\n    \"Failed to split MYSQL_CLUSTER_VERSION: ${MYSQL_CLUSTER_VERSION}\")\nENDIF()\n\n# Create ndb_version.h\nCONFIGURE_FILE(ndb_version.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb_version.h\n  @ONLY)\n# Exclude ndb_version.h from \"make dist\"\nLIST(APPEND CPACK_SOURCE_IGNORE_FILES include/ndb_version\\\\\\.h$)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug and Experimental Options for MySQL Tests\nDESCRIPTION: Sets up variables for experimental test collections and configures debug server options based on build type. Handles different configurations for debug and non-debug builds, including Visual Studio config options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(EXP --experimental=collections/default.experimental)\n\nSET(DEBUG_SERVER \"\")\nSET(VS_CONFIG \"\")\n\nIF(DEBUG_EXTNAME)\n  SET(DEBUG_SERVER \"--debug-server\")\nENDIF()\n\nIF(CMAKE_BUILD_TYPE)\n  IF(CMAKE_BUILD_TYPE_UPPER STREQUAL \"DEBUG\")\n    SET(DEBUG_SERVER \"--debug-server\")\n  ELSE()\n    SET(DEBUG_SERVER \"\")\n    IF(NOT BUILD_IS_SINGLE_CONFIG)\n      SET(VS_CONFIG \"--vs-config=${CMAKE_CFG_INTDIR}\")\n    ENDIF()\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Group Replication Lock Graph Definition\nDESCRIPTION: Graph definition specifying allowed lock transitions between Group Replication rwlocks and other MySQL server locks. Defines permitted lock acquisition order to maintain lock hierarchy and prevent deadlocks. Uses DOT graph notation to specify lock dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_27\n\nLANGUAGE: dot\nCODE:\n```\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_running\" STATE \"W\" TO \"mutex/group_rpl/LOCK_plugin_modules_termination\"\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_running\" STATE \"W\" TO \"mutex/group_rpl/LOCK_plugin_online\"\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_running\" STATE \"W\" TO \"mutex/group_rpl/LOCK_primary_promotion_policy\"\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Setting Option to Use Full Protobuf Library\nDESCRIPTION: This snippet defines a CMake option to link the MySQL X plugin against the full version of the protobuf library for better debugging. If the option is not set and the protobuf-lite library is not found, the full protobuf library is used with a warning message.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"OPTION(WITH_MYSQLX_USE_PROTOBUF_FULL\n  \\\"Link mysqlx plugin with agains full version of \\\np அதேபோன்றுprotobuffer/mysqlxmessages/mysqlxclient for better debugging\\\"\n  OFF\n)\n\nIF(NOT WITH_MYSQLX_USE_PROTOBUF_FULL AND NOT TARGET ext::libprotobuf-lite)\n  SET(WITH_MYSQLX_USE_PROTOBUF_FULL ON)\n  MESSAGE(WARNING \\\"No protobuf-lite found, using full protobuf \\\nlibrary for mysqlx plugin.\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Storage Engine Plugin in CMake for MySQL\nDESCRIPTION: This CMake snippet configures the Example Storage Engine plugin for MySQL. It checks build options to determine if the plugin should be built as a default component or as a module-only plugin. The configuration includes linking against the zlib library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nADD_DEFINITIONS(-DMYSQL_SERVER)\n\nIF(WITH_EXAMPLE_STORAGE_ENGINE AND NOT WITHOUT_EXAMPLE_STORAGE_ENGINE)\n  MYSQL_ADD_PLUGIN(example ha_example.cc\n    STORAGE_ENGINE\n    DEFAULT\n    LINK_LIBRARIES ext::zlib\n    )\nELSEIF(NOT WITHOUT_EXAMPLE_STORAGE_ENGINE)\n  MYSQL_ADD_PLUGIN(example ha_example.cc\n    STORAGE_ENGINE\n    MODULE_ONLY\n    LINK_LIBRARIES ext::zlib\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting up Protobuf RPATH for Unix\nDESCRIPTION: Configures the RPATH for protobuf libraries used by MySQL plugins and replication when building on Unix systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\n# We depend on protobuf because of the mysqlx plugin and replication.\nIF(UNIX_INSTALL_RPATH_ORIGIN_PRIV_LIBDIR)\n  ADD_INSTALL_RPATH_FOR_PROTOBUF(mysqld)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Library Options for MySQL Server\nDESCRIPTION: Sets up the build configuration for unit testing the MySQL server. It handles platform-specific configurations, determining whether to build shared or static unit test libraries based on operating system and sanitizer settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WITHOUT_SERVER)\n  IF(WITH_UNIT_TESTS)\n    IF(WIN32)\n      # static thread_local objects are not allowed in a .dll\n      SET(WITH_SHARED_UNITTEST_LIBRARY_DEFAULT OFF)\n    ELSEIF(APPLE AND WITH_SOME_SANITIZER)\n      # several down_cast<Json_something> will assert()\n      SET(WITH_SHARED_UNITTEST_LIBRARY_DEFAULT OFF)\n    ELSE()\n      SET(WITH_SHARED_UNITTEST_LIBRARY_DEFAULT ON)\n    ENDIF()\n    OPTION(WITH_SHARED_UNITTEST_LIBRARY\n      \"Build a shared library for unit tests which depend on the entire server\"\n      ${WITH_SHARED_UNITTEST_LIBRARY_DEFAULT}\n      )\n  ENDIF()\n\n  # Add storage engines and plugins.\n  SET (MYSQLD_STATIC_PLUGIN_LIBS \"\" CACHE INTERNAL \"\")\n  CONFIGURE_PLUGINS()\nELSE()\n  IF(EXISTS \"${CMAKE_SOURCE_DIR}/storage/ndb\")\n    # We may still want Cluster client libraries, use -DWITH_NDB=1\n    ADD_SUBDIRECTORY(storage/ndb)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Plugin Conditional Inclusion with CMake\nDESCRIPTION: This snippet checks for configuration options related to the mock secondary storage engine and conditionally adds a plugin to the MySQL build process. It links necessary libraries if the plugin is included. The `MYSQL_ADD_PLUGIN` macro is utilized to define the plugin's characteristics and dependencies based on the enabling conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/secondary_engine_mock/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_MOCK_SECONDARY_STORAGE_ENGINE AND\\n    NOT WITHOUT_MOCK_SECONDARY_STORAGE_ENGINE)\\n  MYSQL_ADD_PLUGIN(mock ha_mock.cc\\n    STORAGE_ENGINE\\n    DEFAULT\\n    LINK_LIBRARIES extra::rapidjson ext::zlib\\n    )\\nELSEIF(NOT WITHOUT_MOCK_SECONDARY_STORAGE_ENGINE)\\n  MYSQL_ADD_PLUGIN(mock ha_mock.cc\\n    STORAGE_ENGINE\\n    MODULE_ONLY\\n    LINK_LIBRARIES extra::rapidjson ext::zlib\\n    )\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Server Startup Process\nDESCRIPTION: This snippet outlines the initial steps of the MySQL Server startup process, including checking for system files, electing a master, and reading the system file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/SystemRestart.new.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDIH\t\t\t\tDICT\t\t\t  CNTR\n----------------------\t\t----------------------\t  ---------------------\n\t\t\t\t\t\t\t  <- DIHRESTARTREQ \nCheck for sysfile\nDIH_RESTARTCONF ->\n\nNDB_STTORY -> DICT (sp=1)\n\t\t\t\tRead schema file\n\n******************************************************************************\n* Elect master\n******************************************************************************\n\n-- Master DIH --\n\nRead sysfile\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Replication Replica Library\nDESCRIPTION: Defines source files and creates the replication replica library that handles replication functionality for MySQL replica servers, including connection management and event application.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nSET (RPL_REPLICA_SRCS\n  dynamic_ids.cc\n  binlog/log_sanitizer.cc\n  changestreams/apply/commit_order_queue.cc\n  changestreams/apply/metrics/applier_metrics_stub.cc\n  changestreams/apply/metrics/time_based_metric_stub.cc\n  changestreams/apply/metrics/dummy_worker_metrics.cc\n  changestreams/apply/metrics/applier_metrics.cc\n  changestreams/apply/metrics/time_based_metric.cc\n  changestreams/apply/metrics/mta_worker_metrics.cc\n  changestreams/apply/replication_thread_status.cc\n  rpl_applier_reader.cc\n  rpl_async_conn_failover.cc\n  rpl_async_conn_failover_table_operations.cc\n  rpl_async_conn_failover_add_managed_udf.cc\n  rpl_async_conn_failover_add_source_udf.cc\n  rpl_async_conn_failover_delete_managed_udf.cc\n  rpl_async_conn_failover_delete_source_udf.cc\n  rpl_async_conn_failover_configuration_propagation.cc\n  rpl_async_conn_failover_reset_udf.cc\n  rpl_channel_service_interface.cc\n  rpl_channel_credentials.cc\n  rpl_info.cc\n  rpl_info_dummy.cc\n  rpl_info_factory.cc\n  rpl_info_handler.cc\n  rpl_info_table.cc\n  rpl_info_table_access.cc\n  rpl_info_values.cc\n  rpl_io_monitor.cc\n  rpl_mi.cc\n  rpl_msr.cc\n  rpl_mta_submode.cc\n  rpl_mysql_connect.cc\n  rpl_reporting.cc\n  rpl_rli.cc\n  rpl_rli_pdb.cc\n  rpl_relay_log_sanitizer.cc\n  rpl_replica.cc\n  rpl_replica_commit_order_manager.cc\n  rpl_replica_until_options.cc\n  rpl_sys_key_access.cc\n  rpl_sys_table_access.cc\n  rpl_trx_boundary_parser.cc\n  udf_service_impl.cc\n  udf_service_util.cc\n  )\nADD_STATIC_LIBRARY(rpl_replica ${RPL_REPLICA_SRCS}\n  DEPENDENCIES GenError\n  LINK_LIBRARIES binlog sql_main ${RPL_PROTOBUF_LITE_LIB}\n  )\n```\n\n----------------------------------------\n\nTITLE: Qmgr Phase 1 Startup Process\nDESCRIPTION: Documents the initial startup phase for the Query Manager (Qmgr) component. Outlines the node registration process, timer setup, and cluster formation sequence with specific timing constraints and failure conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n--- Start phase 1 - Qmgr -------------------------------------------\n\n1) Set timer 1 - TimeToWaitAlive\n\n2) Send CM_REGREQ to all connected(and connecting) nodes\n\n3) Wait until -\na) The precident answers CM_REGCONF\nb) All nodes has answered and I'm the candidate -> election won\nc) 30s has passed and I'm the candidate -> election won\nd) TimeToWaitAlive has passed -> Failure to start\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific File Operation Sources in CMake\nDESCRIPTION: Adds different source files for file operations based on the target platform, using Windows or POSIX implementations accordingly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET(EXTRA_SRC ${EXTRA_SRC} ndb_file_win32.cpp)\nELSE()\n  SET(EXTRA_SRC ${EXTRA_SRC} ndb_file_posix.cpp)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configure and Install MySQL Router Log Rotate Script (conditional)\nDESCRIPTION: This snippet conditionally configures and installs the MySQL Router log rotate script if the `WITH_ROUTER` option is enabled. It selects the appropriate template based on whether systemd is enabled and installs the configured script with specific permissions and renaming to ensure proper log rotation for the MySQL Router component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WITH_ROUTER)\n  IF(NOT WITH_SYSTEMD)\n    SET(LOGROTATE_SCRIPT mysqlrouter-log-rotate.in)\n  ELSE()\n    SET(LOGROTATE_SCRIPT mysqlrouter-log-rotate-systemd.in)\n  ENDIF()\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${LOGROTATE_SCRIPT}\n    ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter-log-rotate @ONLY)\n\n  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mysqlrouter-log-rotate\n    COMPONENT Router\n    DESTINATION ${ROUTER_INSTALL_LOGROTATEDIR}\n    RENAME ${ROUTER_INSTALL_LOGROTATEFILE}\n    PERMISSIONS\n    OWNER_READ OWNER_WRITE\n    GROUP_READ WORLD_READ\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Management Server Executable Build in CMake\nDESCRIPTION: Defines the ndb_mgmd executable build target, including source files, installation directory, component categorization, and library dependencies. This is the main build definition for the cluster management server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_mgmd\n  ${NDB_MGMD_EXTRA_SRC}\n  ConfigManager.cpp\n  MgmtSrvr.cpp\n  Services.cpp\n  main.cpp\n\n  DESTINATION ${INSTALL_SBINDIR}\n  COMPONENT ClusterManagementServer\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ${EDITLINE_LIBRARY}\n  ndbclient_static\n  ndbmgmcommon\n  ndbmgmclient\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Build Options\nDESCRIPTION: This snippet sets various options that control the inclusion of profiling components in the gperftools build, defaulting to enabling CPU and heap profilers while allowing options for minimal builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEFAULT_BUILD_CPU_PROFILER ON)\nset(DEFAULT_BUILD_HEAP_PROFILER ON)\nset(DEFAULT_BUILD_HEAP_CHECKER OFF)\nset(DEFAULT_BUILD_DEBUGALLOC ON)\nset(DEFAULT_BUILD_MINIMAL OFF)\n```\n\n----------------------------------------\n\nTITLE: Field Data Type Definitions\nDESCRIPTION: Defines the supported field data formats including integers, floating points, strings, containers, and messages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<field_data> ::= <fixlen_integer_format> | <varlen_integer_format> | <floating_point_integer_format> | <string_format> |  <container_format> | <fixed_container_format> | <map_format> | <message_format>\n<fp_number> ::= <sp_floating_point_integer_format> | <dp_floating_point_integer_format>\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Unsigned Integer Example\nDESCRIPTION: Example showing how the number 65535 is encoded in variable-length format using 3 bytes. The rightmost byte contains two trailing ones followed by 0 to indicate the number of bytes used.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: binary\nCODE:\n```\n00000111 11111111 11111011\n```\n\n----------------------------------------\n\nTITLE: Creating the MySQL System Library\nDESCRIPTION: Creates the mysys convenience library by combining all the source files and linking against required dependencies including SSL, compression libraries, and platform-specific libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(mysys ${MYSYS_SOURCES}\n  LINK_LIBRARIES\n  mytime\n  strings\n  ext::zlib\n  ext::zstd\n  ${LIBNSL}\n  ${LIBM}\n  ${LIBRT}\n  ${LIBEXECINFO}\n  ${LIBUNWIND_LDFLAGS}\n  OpenSSL::SSL OpenSSL::Crypto\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for fts0pars.cc in CMake\nDESCRIPTION: This snippet checks for and applies specific compiler warnings to the fts0pars.cc file. It uses MY_CHECK_CXX_COMPILER_WARNING to check for warning support and ADD_COMPILE_FLAGS to apply the flags if supported.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated code with logical-op warnings\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wlogical-op\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(fts/fts0pars.cc\n    COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wcast-function-type\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(fts/fts0pars.cc\n    COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wunused-but-set-variable\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(fts/fts0pars.cc\n    COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding validate_password Plugin to MySQL Server\nDESCRIPTION: The snippet registers the validate_password plugin with the MySQL server, specifying its source file and scope (MODULE_ONLY). It clarifies how to add custom functionality to MySQL by including additional plugins.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/password_validation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(validate_password\n  validate_password.cc\n  MODULE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Extracting Link Libraries in CMake for MySQL Server\nDESCRIPTION: A CMake macro that extracts link libraries from a target and formats them for the linker's command line. It handles different library formats including system libraries, OpenSSL, and paths with special handling for MSVC builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(EXTRACT_LINK_LIBRARIES target var)\n  GET_TARGET_PROPERTY(TARGET_LIB_DEPENDS ${target} LINK_LIBRARIES)\n  # Uncomment to debug:\n  # MESSAGE(STATUS \"xxx ${target} ${TARGET_LIB_DEPENDS}\")\n  # Depending on platform, and whether \"system\" or \"bundled\" has been used,\n  # this will typically be:\n  # ext::zlib  ext::zstd  <ssl>  <crypto>  /usr/lib64/libresolv.so  m\n  IF(TARGET_LIB_DEPENDS)\n    LIST(REMOVE_DUPLICATES TARGET_LIB_DEPENDS)\n    FOREACH(lib ${TARGET_LIB_DEPENDS})\n      IF (lib MATCHES \"^\\\\-l\")\n        SET(${var} \"${${var}} ${lib} \")\n      ELSEIF (lib MATCHES \"^ext::\")\n        STRING(REGEX MATCH \"ext::([a-z]+)\" MATCH_LIB \"${lib}\")\n        SET(SYSTEM_LIB ${CMAKE_MATCH_1})\n        SET(SYSTEM_LINK_FLAG ${${SYSTEM_LIB}_SYSTEM_LINK_FLAGS})\n        IF(NOT SYSTEM_LINK_FLAG)\n          MESSAGE(WARNING \"Missing link flag for ${lib}\")\n        ELSE()\n          SET(${var} \"${${var}} ${SYSTEM_LINK_FLAG} \")\n        ENDIF()\n      ELSEIF(lib MATCHES \"OpenSSL::SSL\")\n        SET(${var} \"${${var}} -lssl \")\n      ELSEIF(lib MATCHES \"OpenSSL::Crypto\")\n        SET(${var} \"${${var}} -lcrypto \")\n      ELSEIF (lib MATCHES \"^\\\\-L\")\n        # Search directory. Test on FreeBSD: -L/usr/local/lib -lunwind\n        SET(${var} \"${${var}} ${lib} \")\n      ELSEIF(lib MATCHES \"^/\")\n        # Full path, convert to just filename, strip \"lib\" prefix and extension\n        GET_FILENAME_COMPONENT(dir \"${lib}\" DIRECTORY)\n        GET_FILENAME_COMPONENT(lib \"${lib}\" NAME_WE)\n        STRING(REGEX REPLACE \"^lib\" \"\" lib \"${lib}\")\n        # Add -L/usr/local/opt/openssl/lib for ssl (and crypto).\n        IF(APPLE AND WITH_SSL STREQUAL \"system\" AND ${lib} STREQUAL \"ssl\")\n          SET(${var} \"${${var}}-L${dir} \" )\n        ENDIF()\n        # Add -L/usr/local/lib for zstd\n        IF(APPLE AND WITH_ZSTD STREQUAL \"system\" AND ${lib} STREQUAL \"zstd\")\n          SET(${var} \"${${var}}-L${dir} \" )\n        ENDIF()\n        SET(${var} \"${${var}}-l${lib} \" )\n      ELSE()\n        SET(${var} \"${${var}}-l${lib} \" )\n      ENDIF()\n    ENDFOREACH()\n  ENDIF()\n  IF(MSVC)\n    STRING(REPLACE \"-l\" \"\" ${var} \"${${var}}\")\n  ENDIF()\n  STRING(REGEX REPLACE \"^[ ]+\" \"\" ${var} \"${${var}}\")\n  STRING(REGEX REPLACE \"[ ]+$\" \"\" ${var} \"${${var}}\")\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Adding macOS-Specific Framework Dependencies\nDESCRIPTION: Adds macOS-specific CoreServices framework dependencies and compiler definitions for the mysqld target on Apple platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nIF(APPLE)\n  # Add CoreServices framework since some dloadable plugins may need it\n  FIND_LIBRARY(CORESERVICES NAMES CoreServices)\n  IF(CORESERVICES)\n    TARGET_LINK_LIBRARIES(mysqld ${CORESERVICES})\n  ENDIF()\n  IF(APPLE_XCODE)\n    MY_ADD_COMPILE_DEFINITIONS(mysqld.cc COMPILE_DEFINITIONS APPLE_XCODE)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication Plugins\nDESCRIPTION: This snippet disables Kerberos, LDAP, and client authentication plugins, and sets CURL to \"bundled\" if ALTERNATIVE_SYSTEM_SSL is enabled. This is done by setting the corresponding WITH_* variables to OFF or \"bundled\" and setting them as internal cache variables with FORCE.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(ALTERNATIVE_SYSTEM_SSL)\n  SET(WITH_AUTHENTICATION_KERBEROS OFF)\n  SET(WITH_AUTHENTICATION_KERBEROS OFF CACHE INTERNAL \\\"\\\" FORCE)\n  SET(WITH_AUTHENTICATION_LDAP OFF)\n  SET(WITH_AUTHENTICATION_LDAP OFF CACHE INTERNAL \\\"\\\" FORCE)\n  SET(WITH_AUTHENTICATION_CLIENT_PLUGINS OFF)\n  SET(WITH_AUTHENTICATION_CLIENT_PLUGINS OFF CACHE INTERNAL \\\"\\\" FORCE)\n  SET(WITH_CURL \\\"bundled\\\")\n  SET(WITH_CURL \\\"bundled\\\" CACHE INTERNAL \\\"\\\" FORCE)\n  MESSAGE(STATUS \\\"Disabling all authentication plugins.\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Information for RelWithDebInfo Builds in CMake\nDESCRIPTION: Sets up minimal debug information for RelWithDebInfo builds on Unix systems using GNU or Clang compilers. It adds the -g1 flag to reduce debug information size for certain build configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX AND MY_COMPILER_IS_GNU_OR_CLANG)\n  IF(SOLARIS)\n    SET(MINIMAL_RELWITHDEBINFO_DEFAULT ON)\n  ELSEIF((INSTALL_LAYOUT MATCHES \"STANDALONE\" OR\n          INSTALL_LAYOUT MATCHES \"TARGZ\"\n        )\n      AND NOT CMAKE_COMPILER_FLAG_WITH_SANITIZE AND NOT WITH_VALGRIND\n      AND NOT DEFINED ENV{PB2WORKDIR}\n      AND NOT APPLE)\n    SET(MINIMAL_RELWITHDEBINFO_DEFAULT ON)\n  ELSE()\n    SET(MINIMAL_RELWITHDEBINFO_DEFAULT OFF)\n  ENDIF()\n  OPTION(MINIMAL_RELWITHDEBINFO\n    \"Reduce debug information for gcc RelWithDebInfo builds\"\n    ${MINIMAL_RELWITHDEBINFO_DEFAULT})\n  IF(MINIMAL_RELWITHDEBINFO)\n    STRING_APPEND(CMAKE_C_FLAGS_RELWITHDEBINFO   \" -g1\")\n    STRING_APPEND(CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -g1\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Event Creation Sequence Diagram\nDESCRIPTION: Shows the sequence of interactions between USER, DICT(Master), UTIL, and SUMA components during event creation. Includes ID generation and system table insertion steps.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Dbdict.txt#2025-04-21_snippet_0\n\nLANGUAGE: ascii-diagram\nCODE:\n```\nUSER                      DICT(Master)            UTIL                   SUMA\n================================================================================\nCREATE_EVENT_REQ::create\n-------------------------->\n\t\t\t  - Get ID\n                          CREATE_SUBID\n                          --------------------------------------------->\n                          <-----------------------------------------------\n\t\t\t  - insert into system table\n                          UTIL_PREPARE::insert\n                          ------------------------>\n                          <------------------------\n                          UTIL_EXECUTE\n                          ------------------------>\n                          <------------------------\nCREATE_EVENT_CONF\n<--------------------------\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Tests and Router Build Configuration\nDESCRIPTION: Adds shared and test subdirectories only when unit tests and router are explicitly enabled. Provides flexible build configuration for development and testing environments.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS AND WITH_ROUTER)\n  ADD_SUBDIRECTORY(shared)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Nonblocking Client API Functions in CMake\nDESCRIPTION: Lists the nonblocking client API functions that allow for asynchronous operations with the MySQL server. These functions provide alternatives to their blocking counterparts for applications that need to avoid blocking I/O operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLIENT_API_NONBLOCKING_FUNCTIONS\n  mysql_fetch_row_nonblocking\n  mysql_free_result_nonblocking\n  mysql_next_result_nonblocking\n  mysql_real_connect_nonblocking\n  mysql_real_query_nonblocking\n  mysql_send_query_nonblocking\n  mysql_store_result_nonblocking\n  mysql_get_connect_nonblocking_stage\n  mysql_reset_connection_nonblocking\n\n  CACHE INTERNAL \"Nonblocking functions exported by client API\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Keepalive Plugin Harness with CMake\nDESCRIPTION: This CMake function, `add_harness_plugin`, defines the build settings for the `keepalive` plugin. It specifies the source file (`src/keepalive.cc`) and the destination directory for the installed plugin, which is determined by the `ROUTER_INSTALL_PLUGINDIR` variable.  The plugin will be built and installed into the MySQL plugin directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/keepalive/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_harness_plugin(keepalive\n  SOURCES src/keepalive.cc\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Semisync Source Plugin\nDESCRIPTION: This snippet adds the semisync_source plugin using CMake directives. It specifies source files, sets module visibility, links against the rapidjson library, and defines output specifics.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/semisync/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(semisync_source\n  semisync.cc\n  semisync_source.cc\n  semisync_source_ack_receiver.cc\n  semisync_source_plugin.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"semisync_source\\\"\n  VISIBILITY_HIDDEN\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Tests Compilation in CMake\nDESCRIPTION: Iterates through SERVER_TESTS, setting up compilation for each test. Special handling for 'table_cache' test to include additional source file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(test ${SERVER_TESTS})\n  SET(SRC_FILES ${test}-t.cc)\n  IF(test MATCHES \"table_cache\")\n    LIST(APPEND SRC_FILES ../../storage/example/ha_example.cc)\n  ENDIF()\n  MYSQL_ADD_EXECUTABLE(${test}-t ${SRC_FILES}\n    ENABLE_EXPORTS\n    EXCLUDE_FROM_ALL\n    LINK_LIBRARIES gunit_large server_unittest_library\n    SKIP_INSTALL\n    )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Conditional Protobuf Support Configuration in CMake\nDESCRIPTION: Sets up protobuf support when WITH_CS_PROTOBUF is enabled, configuring directories, generating C++ code from proto files, and linking with the protobuf-lite library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WITH_CS_PROTOBUF)\n  FILE(MAKE_DIRECTORY ${CS_LIB_PB_GENERATE_DIR})\n  INCLUDE_DIRECTORIES(${CS_LIB_PB_GENERATE_DIR})\n\n  MYSQL_PROTOBUF_GENERATE_CPP_LIBRARY(\n    changestreams_pb_static\n    ${CS_LIB_PB_SPEC_FILES}\n    OUTPUT_DIRECTORY ${CS_LIB_PB_GENERATE_DIR}\n    ADDITIONAL_COMMENT \"- lite version\")\n  TARGET_LINK_LIBRARIES(changestreams_pb_static PUBLIC ext::libprotobuf-lite)\n\n  SET_TARGET_PROPERTIES(changestreams_pb_static\n    PROPERTIES\n    ARCHIVE_OUTPUT_DIRECTORY ${CS_LIBS_ARCHIVE_OUTPUT_DIR})\n\n  LIST(APPEND CS_LIB_SOURCES\n    ${CS_BASE_SRC_DIR}/lib/mysql/cs/codec/pb/reader_state_codec_pb.cpp)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build Optimization in CMake for MySQL\nDESCRIPTION: Sets up optimization flags for Debug builds on Unix systems using GNU or Clang compilers. It adds -Og and -fno-inline flags to improve debugging experience while maintaining some optimization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX AND MY_COMPILER_IS_GNU_OR_CLANG\n    AND NOT CMAKE_COMPILER_FLAG_WITH_SANITIZE AND NOT WITH_VALGRIND)\n  IF((NOT DEFINED ENV{CFLAGS} AND NOT DEFINED ENV{CXXFLAGS}\n        AND DEFINED ENV{PB2WORKDIR})\n      OR\n      (DEFINED ENV{OPTIMIZE_DEBUG_BUILDS} AND \"$ENV{OPTIMIZE_DEBUG_BUILDS}\"\n        AND NOT DEFINED(OPTIMIZE_DEBUG_BUILDS)))\n    SET(OPTIMIZE_DEBUG_BUILDS_DEFAULT ON)\n  ELSE()\n    SET(OPTIMIZE_DEBUG_BUILDS_DEFAULT OFF)\n  ENDIF()\n  OPTION(OPTIMIZE_DEBUG_BUILDS\n    \"Add -Og -fno-inline to CMAKE_<lang>_FLAGS_DEBUG\"\n    ${OPTIMIZE_DEBUG_BUILDS_DEFAULT}\n    )\n  IF(OPTIMIZE_DEBUG_BUILDS)\n    STRING_PREPEND(CMAKE_C_FLAGS_DEBUG   \" -Og -fno-inline \")\n    STRING_PREPEND(CMAKE_CXX_FLAGS_DEBUG \" -Og -fno-inline \")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking Include Files and Functions\nDESCRIPTION: This snippet checks for the existence of various important system include files and functions, necessary for ensuring compatibility and functionality in different environments.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_function_exists(\"sbrk\" HAVE_SBRK) # for tcmalloc to get memory\ncheck_function_exists(\"fork\" HAVE_FORK) # for the pthread_atfork setup\ncheck_include_file(\"features.h\" HAVE_FEATURES_H) # for vdso_support.h\ncheck_include_file(\"malloc.h\" HAVE_MALLOC_H) # some systems define stuff there, others not\ncheck_include_file(\"execinfo.h\" HAVE_EXECINFO_H) # for stacktrace? and heapchecker_unittest\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL GTID Library Build in CMake\nDESCRIPTION: This CMake snippet configures the build for the MySQL GTID library. It sets up the target headers, source files, and creates the library using a custom MySQL function. The configuration includes files related to GTIDs, TSIDs, UUIDs, and tags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/gtid/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nSET(LINKED_LIBRARIES\n)\n\nSET(TARGET_HEADERS\n  global.h\n  gtid.h\n  gtidset.h\n  tag.h\n  tag_plain.h\n  tsid.h\n  tsid_plain.h\n  uuid.h\n)\n\nSET(TARGET_SRCS\n  gtid.cpp\n  gtidset.cpp\n  tag.cpp\n  tag_plain.cpp\n  tsid.cpp\n  tsid_plain.cpp\n  uuid.cpp\n)\n\nLIBS_MYSQL_CREATE_LIBRARY(mysql_gtid\n  TARGET_SRCS ${TARGET_SRCS}\n  TARGET_HEADERS ${TARGET_HEADERS}\n  LINK_LIBRARIES ${LINKED_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Server Library in CMake\nDESCRIPTION: Creates the `http_server_lib` shared library, defining its components and linking with other public libraries like `io_component` and `http_common`. Its primary focus is on HTTP server operations and routing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(http_server_lib\n  http/server/bind.cc\n  http/server/request.cc\n  http/server/server.cc\n  http/server/regex_matcher.cc\n  http/http_server_context.cc\n  http_auth.cc\n  http_server_component.cc\n  http_request_router.cc\n\n  OUTPUT_NAME \"mysqlrouter_http_server\"\n\n  COMPILE_DEFINITIONS\n  MYSQL_ROUTER_LOG_DOMAIN=\"http_server\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  io_component\n  http_common\n  http_auth_realm_lib\n  ext::icu\n  )\n\nTARGET_INCLUDE_DIRECTORIES(http_server_lib\n  PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}  # http/...\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex and Lock Dependencies in MySQL Server\nDESCRIPTION: This code snippet defines the relationships between various mutexes and locks in the MySQL server, particularly for group replication components. It uses a custom 'ARC FROM' syntax to indicate dependencies between different mutex and lock objects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/archive/Archive_share::mutex\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/csv/tina\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/federated/federated\" TO \"rwlock/sql/THR_LOCK_servers\" OP \"R\"\nARC FROM \"mutex/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_mutex\" TO \"mutex/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_parameters_mutex\"\nARC FROM \"mutex/group_rpl/GCS_Gcs_xcom_interface::m_wait_for_ssl_init_mutex\" TO \"mutex/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_mutex\"\nARC FROM \"mutex/group_rpl/key_GR_LOCK_group_action_coordinator_process\" TO \"cond/group_rpl/COND_group_action_coordinator_thread\"\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: MySQL Group Replication Plugin Declaration\nDESCRIPTION: Declares the Group Replication plugin with its source files, external library dependencies, and compilation settings using the MYSQL_ADD_PLUGIN macro\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(group_replication\n  ${GROUP_REPLICATION_SOURCES}\n  ${GMS_LISTENER_SERVICE_TEST_SOURCES}\n  LINK_LIBRARIES\n  ext::lz4\n  ext::zlib\n  ext::zstd\n  OpenSSL::SSL OpenSSL::Crypto\n  ${LINK_WHOLE_ARCHIVE} ext::libprotobuf-lite ${LINK_NO_WHOLE_ARCHIVE}\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"group_replication\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Randomization in CMake for MySQL on Linux\nDESCRIPTION: Sets up link randomization for Linux builds, which randomizes the order of symbols in the binary. This includes options for enabling randomization and setting a seed value.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX)\n  OPTION(LINK_RANDOMIZE \"Randomize the order of all symbols in the binary\" OFF)\n  SET(LINK_RANDOMIZE_SEED \"mysql\"\n    CACHE STRING \"Seed to use for link randomization\")\nELSE()\n  SET(LINK_RANDOMIZE OFF)\nENDIF()\n\nIF(LINK_RANDOMIZE)\n  STRING_APPEND(CMAKE_C_FLAGS   \" -ffunction-sections -fdata-sections\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -ffunction-sections -fdata-sections\")\n\n  SET(CMAKE_C_LINK_FLAGS \"${CMAKE_C_LINK_FLAGS} -Wl,--sort-section=name\")\n  SET(CMAKE_CXX_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS} -Wl,--sort-section=name\")\n\n  SET(CMAKE_CXX_ARCHIVE_CREATE \"sh -c '${CMAKE_SOURCE_DIR}/scripts/randomize-order.pl ${LINK_RANDOMIZE_SEED} <OBJECTS> && <CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS>'\")\n  SET(CMAKE_CXX_ARCHIVE_CREATE_APPEND \"sh -c '${CMAKE_SOURCE_DIR}/scripts/randomize-order.pl ${LINK_RANDOMIZE_SEED} <OBJECTS> && <CMAKE_AR> q <TARGET> <LINK_FLAGS> <OBJECTS>'\")\n  SET(CMAKE_C_ARCHIVE_CREATE ${CMAKE_CXX_ARCHIVE_CREATE})\n  SET(CMAKE_C_ARCHIVE_CREATE_APPEND ${CMAKE_CXX_ARCHIVE_CREATE_APPEND})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL Library Scripts Overview\nDESCRIPTION: Header section explaining the three main utility scripts (create, move, and check) used for MySQL library development. The scripts handle tasks like template creation, file movement, and coding guideline verification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/scripts/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMySQL Library Scripts\n=====================\n\nThis directory contains scripts that help developing and maintaining libraries.\nHere is a summary. For details, run the script with the --help flag.\n\n- create: Create a new library or C++ source code file from a template, fixing\n  cmake files, copyright headers, header guards, namespaces, Doxygen\n  references, etc.\n\n- move: Move a library, C++ source file, or subdirectory, maintaining\n  cmake files, header guards, namespaces, Doxygen references, etc.\n\n- check: Check that libraries satisfy coding guidelines related to include\n  files.\n```\n\n----------------------------------------\n\nTITLE: Building MySQL REST Service Implementation Library\nDESCRIPTION: Configures static library build for the main REST service implementation, including authentication, endpoints, HTTP handlers, and monitoring components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nADD_STATIC_LIBRARY(mysql_rest_service_impl\n  ${mysql_rest_service_impl_SRC}\n\n  INCLUDE_DIRECTORIES\n  PRIVATE\n  ${mysql_rest_service_includes}\n\n  LINK_LIBRARIES\n  ${mysql_rest_service_impl_libs}\n\n  COMPILE_DEFINITIONS\n  PRIVATE MYSQL_ROUTER_LOG_DOMAIN=\"mrs_endpoint\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Protobuf Java Lite Dependency with Maven\nDESCRIPTION: This XML snippet demonstrates how to include the Protobuf Java Lite runtime as a dependency in a Maven project. It specifies the groupId, artifactId, and version of the dependency to be added to the project's pom.xml file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/java/lite.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.protobuf</groupId>\n  <artifactId>protobuf-javalite</artifactId>\n  <version>3.24.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unit Tests for tcmalloc - CMake\nDESCRIPTION: This snippet configures the unit tests for the tcmalloc library, setting up various test sources and executable targets. It includes conditional setups based on build options, linking necessary libraries, and defining environmental test parameters for robust testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\n### Unittests\n  if(BUILD_TESTING)\n    set(TCMALLOC_UNITTEST_INCLUDES src/config_for_unittests.h\n            src/gperftools/malloc_extension.h)\n    set(tcmalloc_unittest_SOURCES src/tests/tcmalloc_unittest.cc\n            src/tcmalloc.h\n            src/tests/testutil.h src/tests/testutil.cc\n            ${TCMALLOC_UNITTEST_INCLUDES})\n    set(tcmalloc_unittest_LIBADD ${TCMALLOC_FLAGS} logging Threads::Threads)\n    add_executable(tcmalloc_unittest ${tcmalloc_unittest_SOURCES})\n    target_link_libraries(tcmalloc_unittest tcmalloc ${tcmalloc_unittest_LIBADD})\n    add_test(NAME tcmalloc_unittest\n            COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/tcmalloc_unittest.sh\")\n\n    # This makes sure it's safe to link in both tcmalloc and\n    # tcmalloc_minimal.  (One would never do this on purpose, but perhaps\n    # by accident...)  When we can compile libprofiler, we also link it in\n    # to make sure that works too.  NOTE: On OS X, it's *not* safe to\n    # link both in (we end up with two copies of every global var, and\n    # the code tends to pick one arbitrarily), so don't run the test there.\n    set(tcmalloc_both_unittest_srcs src/tests/tcmalloc_unittest.cc\n            src/tests/testutil.h src/tests/testutil.cc\n            ${TCMALLOC_UNITTEST_INCLUDES})\n    if(GPERFTOOLS_BUILD_CPU_PROFILER)\n      set(tcmalloc_both_unittest_ladd tcmalloc tcmalloc_minimal profiler logging Threads::Threads)\n    else()\n      set(tcmalloc_both_unittest_ladd tcmalloc tcmalloc_minimal logging Threads::Threads)\n    endif()\n    if(NOT APPLE)\n      add_executable(tcmalloc_both_unittest ${tcmalloc_both_unittest_srcs})\n      target_link_libraries(tcmalloc_both_unittest ${TCMALLOC_FLAGS} ${tcmalloc_both_unittest_ladd})\n      add_test(tcmalloc_both_unittest tcmalloc_both_unittest)\n    endif()\n\n    add_executable(tcmalloc_large_unittest src/tests/tcmalloc_large_unittest.cc)\n    target_link_libraries(tcmalloc_large_unittest tcmalloc Threads::Threads)\n    add_test(tcmalloc_large_unittest tcmalloc_large_unittest)\n\n    add_executable(tcmalloc_large_heap_fragmentation_unittest src/tests/large_heap_fragmentation_unittest.cc)\n    target_link_libraries(tcmalloc_large_heap_fragmentation_unittest tcmalloc Threads::Threads)\n    add_test(tcmalloc_large_heap_fragmentation_unittest tcmalloc_large_heap_fragmentation_unittest)\n\n    add_executable(raw_printer_test src/tests/raw_printer_test.cc)\n    target_link_libraries(raw_printer_test tcmalloc Threads::Threads)\n    add_test(raw_printer_test raw_printer_test)\n\n    # sampler_test and sampling_test both require sampling to be turned\n    # on, which it's not by default.  Use the \"standard\" value of 2^19.\n    list(APPEND TESTS_ENVIRONMENT TCMALLOC_SAMPLE_PARAMETER=524288)\n\n    set(sampler_test_SOURCES src/tests/sampler_test.cc\n            src/config_for_unittests.h)\n    set(sampler_test_LIBADD ${TCMALLOC_FLAGS} Threads::Threads m)\n    add_executable(sampler_test ${sampler_test_SOURCES})\n    target_link_libraries(sampler_test tcmalloc ${sampler_test_LIBADD})\n    add_test(sampler_test sampler_test)\n\n    # These unittests often need to run binaries.  They're in the current dir\n    list(APPEND TESTS_ENVIRONMENT BINDIR=. TMPDIR=/tmp/perftools)\n    set(SAMPLING_TEST_INCLUDES src/config_for_unittests.h\n            src/base/logging.h\n            src/gperftools/malloc_extension.h)\n    set(sampling_test_SOURCES src/tests/sampling_test.cc\n            ${SAMPLING_TEST_INCLUDES})\n    add_executable(sampling_test ${sampling_test_SOURCES})\n    target_link_libraries(sampling_test ${TCMALLOC_FLAGS} tcmalloc Threads::Threads)\n    add_test(NAME sampling_test.sh\n            COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/sampling_test.sh\" sampling_test)\n    if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n      set(HEAP_PROFILER_UNITTEST_INCLUDES src/config_for_unittests.h\n              src/gperftools/heap-profiler.h)\n      set(heap_profiler_unittest_SOURCES src/tests/heap-profiler_unittest.cc\n              ${HEAP_PROFILER_UNITTEST_INCLUDES})\n      add_executable(heap_profiler_unittest ${heap_profiler_unittest_SOURCES})\n      target_link_libraries(heap_profiler_unittest ${TCMALLOC_FLAGS} tcmalloc Threads::Threads)\n      add_test(NAME heap-profiler_unittest.sh\n              COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-profiler_unittest.sh\" heap-profiler_unittest)\n\n      # Tests the compatibility include-headers in google/.  Requires a function\n      # defined in the heap-profiler, which is why the test lives here.\n      add_executable(simple_compat_test src/tests/simple_compat_test.cc\n              ${googleinclude_HEADERS})\n      target_link_libraries(simple_compat_test ${TCMALLOC_FLAGS} tcmalloc)\n      add_test(simple_compat_test simple_compat_test)\n    endif()\n    if(GPERFTOOLS_BUILD_HEAP_CHECKER)\n      set(HEAP_CHECKER_UNITTEST_INCLUDES src/config_for_unittests.h\n              src/memory_region_map.h\n              src/base/commandlineflags.h\n              src/base/googleinit.h\n              src/gperftools/heap-checker.h\n              ${LOGGING_INCLUDES})\n      set(heap_checker_unittest_SOURCES src/tests/heap-checker_unittest.cc\n              ${HEAP_CHECKER_UNITTEST_INCLUDES})\n      add_executable(heap_checker_unittest ${heap_checker_unittest_SOURCES})\n      target_link_libraries(heap_checker_unittest ${TCMALLOC_FLAGS} tcmalloc logging Threads::Threads)\n      add_test(heap-checker_unittest heap_checker_unittest)\n      add_test(NAME heap-checker-death_unittest.sh\n              COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-checker-death_unittest.sh\")\nendif()\n  endif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Reproducible Build in CMake for MySQL on Linux\nDESCRIPTION: Sets up options for reproducible builds on Linux, including debug prefix mapping and disabling the recording of compiler switches in debug output. It also configures Bison to not include line directives.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX)\n  IF(DEFINED REPRODUCIBLE_BUILD)\n    SET(REPRODUCIBLE_BUILD_DEFAULT ${REPRODUCIBLE_BUILD})\n  ELSE()\n    SET(REPRODUCIBLE_BUILD_DEFAULT OFF)\n  ENDIF()\n  OPTION(REPRODUCIBLE_BUILD\n    \"Take extra pains to make build result independent of build location and time\"\n    ${REPRODUCIBLE_BUILD_DEFAULT})\nENDIF()\nIF(REPRODUCIBLE_BUILD)\n  SET(DEBUG_PREFIX_FLAGS\n    \"-fdebug-prefix-map=${CMAKE_SOURCE_DIR}/=./ -fdebug-prefix-map=${CMAKE_CURRENT_BINARY_DIR}=./obj\")\n\n  EXECUTE_PROCESS(COMMAND\n    ${CMAKE_C_COMPILER} -g3 -x c -S -fdebug-prefix-map=foo=bar -o - -\n    INPUT_FILE /dev/null OUTPUT_VARIABLE DEBUG_PREFIX_MAP_RESULT)\n  IF(DEBUG_PREFIX_MAP_RESULT MATCHES \"foo=bar\")\n    SET(DEBUG_PREFIX_FLAGS \"${DEBUG_PREFIX_FLAGS} -gno-record-gcc-switches\")\n  ENDIF()\n\n  STRING_APPEND(CMAKE_C_FLAGS   \" ${DEBUG_PREFIX_FLAGS}\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${DEBUG_PREFIX_FLAGS}\")\n\n  SET(BISON_NO_LINE_OPT \"--no-lines\")\n\n  SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE\n    \"${CMAKE_SOURCE_DIR}/scripts/invoke-with-relative-paths.pl\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building MinChassis Static Library with CMake\nDESCRIPTION: Configures the build process for the MinChassis static library. This includes creating the library from the source files, adding a dependency on the GenError target, and linking with the platform-specific dynamic loading libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/libminchassis/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(minchassis STATIC ${LIBMINCHASSIS_SOURCES})\nADD_DEPENDENCIES(minchassis GenError)\nTARGET_LINK_LIBRARIES(minchassis ${CMAKE_DL_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Building ATRT Executable with Source Files and Dependencies in CMake\nDESCRIPTION: Defines the ATRT executable target with its source files, installation destination, and library dependencies including NDB test library, NDB client, and MySQL client.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(atrt\n  main.cpp\n  setup.cpp\n  files.cpp\n  db.cpp\n  command.cpp\n  process_management.cpp\n  test_execution_resources.cpp\n  DESTINATION mysql-test/ndb\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ndbNDBT ndbclient_static mysqlclient\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Mutex Lock Dependencies in DOT Format\nDESCRIPTION: Directed graph edges representing mutex lock dependencies in MySQL Server. Each ARC represents a dependency from one mutex lock to another, with some edges having additional operations (OP) like Read (R), Write (W), Shared (S), or eXclusive (X) access.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_20\n\nLANGUAGE: dot\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"mutex/innodb/innobase_share_mutex\"\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Components with CMake\nDESCRIPTION: CMake configuration that adds multiple test components to the MySQL server build. Components include UDF registration tests, system variable tests, status variable tests, and various service tests. Each component is marked as MODULE_ONLY and TEST_ONLY.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nMSVC_CPPCHECK_DISABLE()\n\nMYSQL_ADD_COMPONENT(test_udf_registration\n  test_udf_registration.cc\n  MODULE_ONLY\n  TEST_ONLY\n)\nMYSQL_ADD_COMPONENT(udf_reg_3_func\n  udf_reg_3_func.cc\n  MODULE_ONLY\n  TEST_ONLY\n)\n# ... additional components ...\nMYSQL_ADD_COMPONENT(test_session_var_service\n  test_session_var_service.cc\n  MODULE_ONLY\n  TEST_ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Tests for MySQL Router SQL Parser\nDESCRIPTION: Conditionally adds fuzzing test executables for the routing parser and SQL lexer when LibFuzzer flags are available, with appropriate dependencies and initial corpus directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LIBFUZZER_COMPILE_FLAGS)\n  MYSQL_ADD_EXECUTABLE(routertest_fuzz_routing_parser_show_warnings\n    fuzz_show_warnings.cc\n    ../src/show_warnings_parser.cc\n    ../src/sql_lexer.cc\n    ../src/sql_lexer_thd.cc\n    ${CMAKE_SOURCE_DIR}/sql/sql_lex_hash.cc\n    COMPONENT Router\n    DEPENDENCIES GenServerSource\n    LINK_LIBRARIES harness_stdx;mysys\n    SKIP_INSTALL\n    )\n  LIBFUZZER_ADD_TEST(routertest_fuzz_routing_parser_show_warnings\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus/show_warnings)\n\n  MYSQL_ADD_EXECUTABLE(routertest_fuzz_routing_sql_lexer\n    fuzz_sql_lexer.cc\n    ../src/sql_lexer.cc\n    ../src/sql_lexer_thd.cc\n    ${CMAKE_SOURCE_DIR}/sql/sql_lex_hash.cc\n    COMPONENT Router\n    DEPENDENCIES GenServerSource\n    LINK_LIBRARIES harness_stdx;mysys\n    SKIP_INSTALL\n    )\n  LIBFUZZER_ADD_TEST(routertest_fuzz_routing_sql_lexer\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus/sql_lexer)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Meta-Target for All ICU Libraries\nDESCRIPTION: Defines a utility target named 'icu_all' that depends on all three ICU libraries (icuuc, icui18n, icustubdata) to allow building them together with a single command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Utility target to build all ICU libraries\nADD_CUSTOM_TARGET(icu_all)\nADD_DEPENDENCIES(icu_all icuuc icui18n icustubdata)\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for MySQL Server Components\nDESCRIPTION: This snippet defines lock dependencies (ARCs) between various components of MySQL Server. It shows how different locks and mutexes interact, particularly focusing on the Trans_delegate::lock and its relationships with other locks in the system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"rwlock/sql/Trans_delegate::lock\" STATE \"R\" TO \"mutex/sql/LOCK_thd_list\"\nARC FROM \"rwlock/sql/Trans_delegate::lock\" STATE \"R\" TO \"mutex/sql/LOCK_thd_remove\"\nARC FROM \"rwlock/sql/Trans_delegate::lock\" STATE \"R\" TO \"mutex/sql/LOCK_thread_ids\"\nARC FROM \"rwlock/sql/Trans_delegate::lock\" STATE \"R\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"rwlock/sql/Trans_delegate::lock\" STATE \"R\" TO \"mutex/sql/LOG::LOCK_log\"\n// ... (more similar lines omitted for brevity)\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"S\" TO \"mutex/innodb/trx_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library with CMake\nDESCRIPTION: Defines a static library named 'ndbNDBT' composed of multiple source files using CMake's ADD_LIBRARY command. This library includes NDB components and utilities required for the MySQL NDB Cluster.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbNDBT STATIC\n  AtrtClient.cpp\n  CpcClient.cpp\n  SqlClient.cpp\n  HugoAsynchTransactions.cpp\n  HugoCalculator.cpp\n  HugoOperations.cpp\n  HugoQueries.cpp\n  HugoQueryBuilder.cpp\n  HugoTransactions.cpp\n  NDBT_Error.cpp\n  NDBT_Find.cpp\n  NDBT_Output.cpp\n  NDBT_ResultRow.cpp\n  NDBT_ReturnCodes.cpp\n  NDBT_Table.cpp\n  NDBT_Tables.cpp\n  NDBT_Test.cpp\n  NDBT_Thread.cpp\n  NdbBackup.cpp\n  NdbConfig.cpp\n  NdbHistory.cpp\n  NdbMixRestarter.cpp\n  NdbRestarter.cpp\n  NdbRestarts.cpp\n  NdbSchemaCon.cpp\n  NdbSchemaOp.cpp\n  SocketInputStream2.cpp\n  UtilTransactions.cpp\n  getarg.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring pprof and tcmalloc_minimal in CMake\nDESCRIPTION: Sets up pprof installation and testing if WITH_STACK_TRACE is enabled. Also configures the tcmalloc_minimal library, defining includes and sources for the thread-caching malloc implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_STACK_TRACE)\n  install(FILES src/pprof DESTINATION ${CMAKE_INSTALL_BINDIR} RENAME pprof-symbolize)\n\n  if(BUILD_TESTING)\n    add_test(NAME pprof_unittest\n            COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/pprof\" -test\n            VERBATIM)\n    list(APPEND TESTS_ENVIRONMENT \"PPROF_PATH=${CMAKE_CURRENT_SOURCE_DIR}/src/pprof\")\n  endif()\n  if(INSTALL_PPROF)\n      install(FILES src/pprof DESTINATION ${CMAKE_INSTALL_BINDIR})\n  endif()\nendif()\n\nset(S_TCMALLOC_MINIMAL_INCLUDES src/common.h\n        src/internal_logging.h\n        src/system-alloc.h\n        src/packed-cache-inl.h\n        ${SPINLOCK_INCLUDES}\n        src/tcmalloc_guard.h\n        src/base/commandlineflags.h\n        src/base/basictypes.h\n        src/safe_strerror.h\n        src/pagemap.h\n        src/sampler.h\n        src/central_freelist.h\n        src/linked_list.h\n        src/libc_override.h\n        src/libc_override_gcc_and_weak.h\n        src/libc_override_glibc.h\n        src/libc_override_osx.h\n        src/libc_override_redefine.h\n        src/page_heap.h\n        src/page_heap_allocator.h\n        src/span.h\n        src/static_vars.h\n        src/symbolize.h\n        src/thread_cache.h\n        src/stack_trace_table.h\n        src/base/thread_annotations.h\n        src/malloc_hook-inl.h)\nset(SG_TCMALLOC_MINIMAL_INCLUDES src/gperftools/malloc_hook.h\n        src/gperftools/malloc_hook_c.h\n        src/gperftools/malloc_extension.h\n        src/gperftools/malloc_extension_c.h\n        src/gperftools/nallocx.h)\nset(TCMALLOC_MINIMAL_INCLUDES ${S_TCMALLOC_MINIMAL_INCLUDES} ${SG_TCMALLOC_MINIMAL_INCLUDES} ${SG_STACKTRACE_INCLUDES})\nlist(APPEND perftoolsinclude_HEADERS ${SG_TCMALLOC_MINIMAL_INCLUDES})\n\nset(libtcmalloc_minimal_internal_la_SOURCES src/common.cc\n        src/internal_logging.cc\n        ${SYSTEM_ALLOC_CC}\n        src/memfs_malloc.cc\n        src/safe_strerror.cc\n        src/central_freelist.cc\n        src/page_heap.cc\n        src/sampler.cc\n        src/span.cc\n        src/stack_trace_table.cc\n        src/static_vars.cc\n        src/symbolize.cc\n        src/thread_cache.cc\n        src/malloc_hook.cc\n        src/malloc_extension.cc\n        ${TCMALLOC_MINIMAL_INCLUDES})\nadd_library(tcmalloc_minimal_internal_object OBJECT ${libtcmalloc_minimal_internal_la_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Plugin Using CMake\nDESCRIPTION: Defines and adds the 'replication_observers_example_plugin' to the MySQL build system as a module. Specifies source files, output name, and links necessary libraries such as rapidjson and mysql_gtid to build the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/replication_observers_example/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(replication_observers_example\n  gr_message_service_example.cc\n  replication_observers_example.cc\n  src/binlog/service/iterator/tests/pfs.cc\n  src/binlog/service/iterator/tests/status_vars.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"replication_observers_example_plugin\\\"\n  TEST_ONLY\n  LINK_LIBRARIES extra::rapidjson mysql_gtid\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring System Libraries for MySQL Server\nDESCRIPTION: Sets up options for using system libraries instead of bundled ones. It handles platform-specific library configurations and exclusions for certain libraries on specific platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nSET(SYSTEM_LIBRARIES\n  CURL      # Xcode\n  EDITLINE  # Xcode\n  ICU       # Homebrew  icu4c\n  LZ4       # Homebrew  lz4\n  PROTOBUF  # Homebrew  protobuf\n  SSL       # Homebrew  openssl@1.1 or openssl@3\n  ZSTD      # Homebrew  zstd\n  FIDO      # Homebrew  libfido2\n  ZLIB      # Xcode\n  )\n\nIF(APPLE)\n  # Homebrew default location is\n  IF(APPLE_ARM)\n    SET(HOMEBREW_HOME \"/opt/homebrew/opt\")\n  ELSE()\n    SET(HOMEBREW_HOME \"/usr/local/opt\")\n  ENDIF()\n  # The Xcode version is 1.2.12 which is too old\n  LIST(REMOVE_ITEM SYSTEM_LIBRARIES ZLIB)\n  # Link with the correct version of libc++.dylib\n  # Also use ar/ranlib from the compiler bundle.\n  IF(CMAKE_CXX_COMPILER MATCHES \"/opt/homebrew/Cellar\" OR\n      CMAKE_CXX_COMPILER MATCHES ${HOMEBREW_HOME}\n      )\n    SET(CMAKE_AR ${CMAKE_CXX_COMPILER_AR})\n    SET(CMAKE_RANLIB ${CMAKE_CXX_COMPILER_RANLIB})\n    GET_FILENAME_COMPONENT(CXX_DIR ${CMAKE_CXX_COMPILER} DIRECTORY)\n    GET_FILENAME_COMPONENT(LLVM_DIR ${CXX_DIR} DIRECTORY)\n    SET(LLVMBUNDLE_LINKER_FLAGS \" -L${LLVM_DIR}/lib/c++\")\n    IF(EXISTS ${LLVM_DIR}/lib/unwind/libunwind.dylib)\n      STRING_APPEND(LLVMBUNDLE_LINKER_FLAGS \" -L${LLVM_DIR}/lib/unwind -lunwind\")\n    ELSEIF(EXISTS \"${LLVM_DIR}/lib/libunwind.dylib\")\n      STRING_APPEND(LLVMBUNDLE_LINKER_FLAGS \" -L${LLVM_DIR}/lib -lunwind\")\n    ENDIF()\n    STRING_APPEND(CMAKE_EXE_LINKER_FLAGS \"${LLVMBUNDLE_LINKER_FLAGS}\")\n    STRING_APPEND(CMAKE_MODULE_LINKER_FLAGS \"${LLVMBUNDLE_LINKER_FLAGS}\")\n    STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS \"${LLVMBUNDLE_LINKER_FLAGS}\")\n  ENDIF()\nENDIF()\n\nSET(WITH_SYSTEM_LIBS_DEFAULT OFF)\nOPTION(WITH_SYSTEM_LIBS\n  \"Use -DWITH_XXX=system for ${SYSTEM_LIBRARIES}\" ${WITH_SYSTEM_LIBS_DEFAULT})\n\n# undefined symbol: _Z15fido_assert_newv which is fido_assert_new()\n# /usr/include/fido.h is missing 'extern \"C\"'\n# but even if we fix that, tests will fail.\nIF(LINUX_UBUNTU)\n  IF(LINUX_UBUNTU_VERSION_ID VERSION_LESS \"21.04\")\n    LIST(REMOVE_ITEM SYSTEM_LIBRARIES FIDO)\n  ENDIF()\n  # Ubuntu 22.04 has 1.2.11 which is too old.\n  IF(LINUX_UBUNTU_VERSION_ID VERSION_LESS \"23.04\")\n    LIST(REMOVE_ITEM SYSTEM_LIBRARIES ZLIB)\n  ENDIF()\n  # Ubuntu 22.04 has too old grpc\n  IF(WITH_INTERNAL AND LINUX_UBUNTU_VERSION_ID VERSION_LESS \"24.04\")\n    LIST(REMOVE_ITEM SYSTEM_LIBRARIES PROTOBUF)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for MySQL Router Plugin Info - CMake\nDESCRIPTION: Defines the build configuration for the \"mysqlrouter_plugin_info\" executable using CMake. It includes source files such as \"library_file.cc\", \"main.cc\", and additional libraries like \"harness-library\" and \"extra::rapidjson\". This snippet requires CMake and the specified libraries to be available for linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/plugin_info/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlrouter_plugin_info\n  library_file.cc\n  main.cc\n  plugin_info_app.cc\n  plugin.cc\n  COMPONENT Router\n  LINK_LIBRARIES\n  harness-library\n  extra::rapidjson\n  ${CMAKE_DL_LIBS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Common Library in CMake\nDESCRIPTION: Configures the building of the `http_common` library, linking it with necessary public and private libraries, including OpenSSL. It defines compilation settings and specifies source files related to HTTP functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(http_common\n  base64.cc\n  http_auth_method_basic.cc\n  http/cno/callback_init.cc\n  http/cno/cno_instantiation.cc\n  http/cno/error_code.cc\n  http/base/base_instantiation.cc\n  http/base/headers.cc\n  http/base/method.cc\n  http/base/status_code.cc\n  http/base/uri.cc\n  http/base/http_time.cc\n\n  OUTPUT_NAME \"mysqlrouter_http\"\n\n  COMPILE_DEFINITIONS\n  MYSQL_ROUTER_LOG_DOMAIN=\"http_common\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_tls\n  router_utils\n  harness-library\n  ext::cno\n  router_tls\n  PRIVATE\n  OpenSSL::SSL OpenSSL::Crypto\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL GIS Sources\nDESCRIPTION: Defines source files for MySQL's Geographic Information System (GIS) functionality, including spatial operations, geometry functions, and SRS support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSET(SQL_GIS_SOURCES\n  gis/area.cc\n  gis/buffer.cc\n  # ... shortened for brevity ...\n  item_geofunc_relchecks.cc\n  options_parser.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Setting CMake Properties for MySQL Router\nDESCRIPTION: This snippet retrieves various TARGET_PROPERTY values for shared libraries related to MySQL Router, such as include directories and source files. It configures properties and dependencies necessary for compiling shared libraries. Key parameters include `mysqlxmessages_shared` and options for managing protobuf generation flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysqlxmessages/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGET_TARGET_PROPERTY(XMSG_INC_DIRS mysqlxmessages_shared INCLUDE_DIRECTORIES)\nGET_TARGET_PROPERTY(XMSG_SYS_INC_DIRS mysqlxmessages_shared INTERFACE_SYSTEM_INCLUDE_DIRECTORIES)\nGET_TARGET_PROPERTY(XMSG_SOURCES mysqlxmessages SOURCES)\nGET_TARGET_PROPERTY(XMSG_COMPILE_DEFS mysqlxmessages_shared INTERFACE_COMPILE_DEFINITIONS)\nGET_TARGET_PROPERTY(XMSG_COMPILE_OPTS mysqlxmessages_shared INTERFACE_COMPILE_OPTIONS)\n```\n\n----------------------------------------\n\nTITLE: Configure and Install MySQL Server Script (conditional)\nDESCRIPTION: This snippet conditionally configures and installs the `mysql.server` script if systemd is not enabled. It configures the script from a template, installs it as a server script, and places it in the appropriate installation directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(NOT WITH_SYSTEMD)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/mysql.server.sh\n    ${CMAKE_CURRENT_BINARY_DIR}/mysql.server @ONLY\n  )\n\n  INSTALL_SCRIPT(${CMAKE_CURRENT_BINARY_DIR}/mysql.server\n    COMPONENT Server_Scripts\n    DESTINATION ${INSTALL_SUPPORTFILESDIR}\n  )\n\n  INSTALL_SCRIPT(${CMAKE_CURRENT_SOURCE_DIR}/mysqld_multi.server\n    COMPONENT Server_Scripts\n    DESTINATION ${INSTALL_SUPPORTFILESDIR}\n  )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Definitions with CMake\nDESCRIPTION: This snippet sets the include directories and defines preprocessor definitions for compiling test components of the MySQL server. It includes system directories from GMOCK and local directories. Additionally, it defines a macro 'SSL_TEST_DATA_DIR' pointing to test data directory. It requires CMake to be available for processing the configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\nINCLUDE_DIRECTORIES(../src ${PROJECT_SOURCE_DIR}/tests/ ./)\n\nADD_DEFINITIONS(-DSSL_TEST_DATA_DIR=\"${CMAKE_SOURCE_DIR}/mysql-test/std_data/\")\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Replication Source Library\nDESCRIPTION: Creates the replication source library which handles outgoing replication traffic and binary log sending from a source server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\n# library for the replication source\nSET (RPL_SOURCE_SRCS rpl_source.cc rpl_binlog_sender.cc binlog_reader.cc)\nADD_DEPENDENCIES(rpl GenError)\nADD_LIBRARY(rpl_source STATIC ${RPL_SOURCE_SRCS})\nADD_DEPENDENCIES(rpl_source GenError)\nTARGET_LINK_LIBRARIES(rpl_source binlog sql_main)\n```\n\n----------------------------------------\n\nTITLE: Add Cluster Tools Executables\nDESCRIPTION: Defines multiple executables related to NDB Cluster Tools such as 'ndb_waiter', 'ndb_drop_table', and others, specifying the source files, linking libraries and exporting components for cluster management tools.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/tools/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_EXECUTABLE(ndb_waiter\n  waiter.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_drop_table\n  drop_tab.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_delete_all\n  delete_all.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_desc\n  desc.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_drop_index\n  drop_index.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_show_tables\n  listTables.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_select_all\n  select_all.cpp\n  NDBTEST ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_select_count\n  select_count.cpp\n  NDBTEST ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_perror\n  ndb_perror.cpp\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi/mgmapi_error.cpp\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi/ndbd_exit_codes.cpp\n  COMPONENT ClusterTools\n  ${LINK_NDBCLIENT}\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_restore\n  restore/restore_main.cpp\n  restore/consumer_restore.cpp\n  restore/consumer_printer.cpp\n  restore/Restore.cpp\n  ndb_lib_move_data.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ndbgeneral ndbportlib\n  )\nNDB_ADD_EXECUTABLE(ndb_import\n  ndb_import.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ndbtools ndbgeneral\n  )\n\nNDB_ADD_EXECUTABLE(ndb_config\n  ndb_config.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\n\nNDB_ADD_EXECUTABLE(ndb_index_stat\n  ndb_index_stat.cpp\n  NDBTEST ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndbinfo_select_all\n  ndbinfo_select_all.cpp\n  ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\nNDB_ADD_EXECUTABLE(ndb_blob_tool\n  ndb_blob_tool.cpp\n  NDBTEST ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\n\nNDB_ADD_EXECUTABLE(ndb_move_data\n  ndb_move_data.cpp\n  ndb_lib_move_data.cpp\n  NDBTEST ${LINK_NDBCLIENT}\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  )\n\nNDB_ADD_EXECUTABLE(ndbxfrm\n        ndbxfrm.cpp\n        COMPONENT ClusterTools\n        ENABLE_EXPORTS\n        LINK_LIBRARIES ndbmgmapi ndbgeneral ndbportlib\n        )\n\nNDB_ADD_EXECUTABLE(ndb_secretsfile_reader\n        ndb_secretsfile_reader.cpp\n        COMPONENT ClusterTools\n        ENABLE_EXPORTS\n        LINK_LIBRARIES ndbmgmapi ndbgeneral ndbportlib\n        )\n\nNDB_ADD_EXECUTABLE(ndb_sign_keys\n  sign_keys.cpp\n  COMPONENT ClusterTools\n  LINK_LIBRARIES ndbmgmapi ndbgeneral ndbportlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating Consolidated System Schema SQL File in CMake\nDESCRIPTION: Custom command that combines all individual System Schema SQL files into a single ALL_SYS_SCHEMA.sql file. It runs a CMake script (run_gensysschema.cmake) with the source file list to generate the combined output.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/sys_schema/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ALL_SYS_SCHEMA.sql\n  COMMAND ${CMAKE_COMMAND}\n  -D \"OUTPUT_DIR=${CMAKE_CURRENT_BINARY_DIR}\"\n  -D \"SYS_SCHEMA_SOURCES=${SYS_SCHEMA_SOURCES}\"\n  -P ${CMAKE_CURRENT_SOURCE_DIR}/run_gensysschema.cmake\n  DEPENDS ${SYS_SCHEMA_SOURCES}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  COMMENT \"Generating Sys Schema SQL code\"\n  VERBATIM\n)\n\nMY_ADD_CUSTOM_TARGET(all_sys_schema\n  DEPENDS ALL_SYS_SCHEMA.sql)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Script Concatenation in CMake Build\nDESCRIPTION: Sets up commands to find the 'cat' executable on Unix-like systems or use Windows commands to concatenate SQL files. This creates mysql_fix_privilege_tables.sql by combining mysql_system_tables.sql and mysql_system_tables_fix.sql.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Build mysql_fix_privilege_tables.sql (concatenate 2 sql scripts)\nIF(NOT WIN32 OR CMAKE_CROSSCOMPILING)\n  FIND_PROGRAM(CAT_EXECUTABLE cat DOC \"path to the executable\")\n  MARK_AS_ADVANCED(CAT_EXECUTABLE)\nENDIF()\n\nIF(CAT_EXECUTABLE)\n  SET(CAT_COMMAND COMMAND\n    ${CMAKE_COMMAND} -E chdir  ${CMAKE_CURRENT_SOURCE_DIR}\n    ${CAT_EXECUTABLE} mysql_system_tables.sql mysql_system_tables_fix.sql >\n    ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables.sql\n  )\nELSEIF(WIN32)\n  FILE(TO_NATIVE_PATH ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables.sql\n    native_outfile )\n  SET(CAT_COMMAND\n    COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR}\n    cmd /c copy /b mysql_system_tables.sql + mysql_system_tables_fix.sql\n    ${native_outfile} )\nELSE()\n  MESSAGE(FATAL_ERROR \"Cannot concatenate files\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: CMake Plugin Configuration with add_harness_plugin\nDESCRIPTION: Demonstrates how to add a new plugin using the add_harness_plugin CMake function with optional installation and dependency specifications.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_harness_plugin(<name> [ NO_INSTALL ]\n                       INTERFACE <directory>\n                       SOURCES <source> ...\n                       DESTINATION <directory>\n                       REQUIRES <plugin> ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Router Library in CMake\nDESCRIPTION: Defines the main router library build configuration with platform-specific settings and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(router_lib\n  auto_cleaner.cc\n  certificate_generator.cc\n  certificate_handler.cc\n  config_files.cc\n  sys_user_operations.cc\n\n  NO_EXPORT_HEADER  # custom names\n  OUTPUT_NAME \"${router_lib_output_name}\"\n\n  LINK_LIBRARIES\n  ${CMAKE_DL_LIBS}\n  harness-library\n  harness_stdx\n  harness_tls\n  router_utils\n  router_cluster\n  OpenSSL::SSL OpenSSL::Crypto\n  io_component\n  routing_guidelines\n  extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Protocol Tracing in MySQL Client Library\nDESCRIPTION: Sets up protocol tracing infrastructure for the MySQL client library if enabled in build options. This allows for detailed tracing of the client-server protocol communication for debugging or analysis purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WITH_CLIENT_PROTOCOL_TRACING)\n\n  LIST(APPEND CLIENT_SOURCES mysql_trace.cc)\n  ADD_DEFINITIONS(-D CLIENT_PROTOCOL_TRACING)\n\n  IF (WITH_TEST_TRACE_PLUGIN)\n    MESSAGE(STATUS \"Client library contains the test trace plugin\")\n    LIST(APPEND CLIENT_SOURCES test_trace_plugin.cc)\n    ADD_DEFINITIONS(-D TEST_TRACE_PLUGIN)\n  ENDIF (WITH_TEST_TRACE_PLUGIN)\n\nENDIF (WITH_CLIENT_PROTOCOL_TRACING)\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC-Specific Build Properties for MySQL Server\nDESCRIPTION: Configures MSVC-specific build settings including module definition files and dependencies for the MySQL Server build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MSVC)\n  ADD_DEPENDENCIES(sql_main GenError)\n  IF(MYSQLD_DEF_FILE)\n    SET_TARGET_PROPERTIES(mysqld\n      PROPERTIES LINK_FLAGS\n        \"${mysqld_link_flags} /DEF:${MYSQLD_DEF_FILE}\")\n  ELSE()\n    SET_TARGET_PROPERTIES(mysqld\n      PROPERTIES LINK_FLAGS\n    \"${mysqld_link_flags} /DEF:${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mysqld.def\")\n  ENDIF()\n  SET(_PLATFORM  x64)\n\n  MYSQL_ADD_EXECUTABLE(create_def create_def.cc SKIP_INSTALL)\n\n  ADD_CUSTOM_COMMAND(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mysqld.def\n    COMMAND create_def\n    \"$<TARGET_FILE:binlog>\"\n    \"$<TARGET_FILE:mysql_binlog_event>\"\n    \"$<TARGET_FILE:mysys>\"\n    \"$<TARGET_FILE:mytime>\"\n    \"$<TARGET_FILE:rpl>\"\n    \"$<TARGET_FILE:rpl_replica>\"\n    \"$<TARGET_FILE:sql_main>\"\n    \"$<TARGET_FILE:strings>\"\n    \"$<TARGET_FILE:vio>\"\n    > mysqld.def\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}\"\n    DEPENDS create_def binlog mysql_binlog_event mysys mytime rpl rpl_replica sql_main strings vio\n  )\n  MY_ADD_CUSTOM_TARGET(GenMysqldDef ALL\n    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mysqld.def)\n\n  ADD_DEPENDENCIES(sql_main GenError)\n  ADD_DEPENDENCIES(mysqld GenMysqldDef)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including ExternalProject Module\nDESCRIPTION: This snippet includes the ExternalProject CMake module, which allows for building external projects as part of the main build process. This is essential for integrating TCMalloc into the MySQL build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE(ExternalProject)\"\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Auth Realm Plugin in CMake\nDESCRIPTION: Adds the `http_auth_realm` plugin, specifying essential source files and dependency libraries. It is intended for installation in the designated plugin directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(http_auth_realm\n  SOURCES\n  http_auth_realm_plugin.cc\n  REQUIRES\n  http_auth_realm_lib\n  router_utils\n  http_auth_backend_lib\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\nGENERATE_EXPORT_HEADER(http_auth_realm\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/http_auth_realm_export.h\n  )\nTARGET_INCLUDE_DIRECTORIES(http_auth_realm PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/)\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Dependencies Graph Definition\nDESCRIPTION: Graph definition showing lock dependencies between channel_lock and gtid_commit_rollback with various other locks in MySQL server. Uses DOT graph notation to define directed edges (ARC) between different lock types with their states and operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_30\n\nLANGUAGE: dot\nCODE:\n```\nARC FROM \"rwlock/sql/channel_lock\" STATE \"W\" TO \"mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex\"\nARC FROM \"rwlock/sql/channel_lock\" STATE \"W\" TO \"mutex/sql/key_mta_gaq_LOCK\"\nARC FROM \"rwlock/sql/channel_lock\" STATE \"W\" TO \"mutex/sql/key_mta_temp_table_LOCK\"\n[...additional arcs...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Components Based on Build Type\nDESCRIPTION: Determines which components to include in the build based on whether the server is being built or not. For server builds, it configures the components system, while for client-only builds it adds the minimal chassis library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(components/libminchassis)\nELSE()\n  CONFIGURE_COMPONENTS()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting MySQLX Protocol and Client Libraries\nDESCRIPTION: This snippet sets the `MYSQLX_PROTOCOL_LIB` and `MYSQLX_CLIENT_LIB` variables based on whether the full or lite version of the protobuf library is being used.  These variables determine which libraries are linked against the MySQL X plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_MYSQLX_USE_PROTOBUF_FULL)\n  SET(MYSQLX_PROTOCOL_LIB ${MYSQLX_PROTOCOL_FULL_LIB})\n  SET(MYSQLX_CLIENT_LIB ${MYSQLX_CLIENT_FULL_LIB})\nELSE()\n  SET(MYSQLX_PROTOCOL_LIB ${MYSQLX_PROTOCOL_LITE_LIB})\n  SET(MYSQLX_CLIENT_LIB ${MYSQLX_CLIENT_LITE_LIB})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Files for MySQL Server in CMake\nDESCRIPTION: This snippet generates configuration files for MySQL server by configuring template files. It processes my.cnf, mysql.logrotate, and mysqlrouter.conf files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-common/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(cfile\n    my.cnf\n    mysql.logrotate\n    mysqlrouter.conf\n    )\n  CONFIGURE_FILE(${cfile}.in ${CMAKE_CURRENT_BINARY_DIR}/${cfile} @ONLY)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Build Settings\nDESCRIPTION: Includes platform-specific configuration files and sets up preprocessor definitions based on the target system architecture and compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(_base\n    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}\n    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}\n    ${CMAKE_SYSTEM_NAME})\n  SET(_file ${CMAKE_SOURCE_DIR}/cmake/os/${_base}.cmake)\n  IF(EXISTS ${_file})\n    INCLUDE(${_file})\n    BREAK()\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Script, Test, and Support Components\nDESCRIPTION: Adds script directories and test infrastructure when the server is being built. This includes MySQL test suite, safe process utilities, support files, and internal components when enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\n# scripts/mysql_config depends on client and server targets loaded above.\n# It is referenced by some of the directories below, so we insert it here.\nADD_SUBDIRECTORY(scripts)\n\nIF(NOT WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(mysql-test)\n  ADD_SUBDIRECTORY(mysql-test/lib/My/SafeProcess)\n  ADD_SUBDIRECTORY(support-files)\n  IF(WITH_INTERNAL)\n    ADD_SUBDIRECTORY(internal)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Mapping Lock Dependencies in MySQL Server Threading Architecture\nDESCRIPTION: This graph representation describes the lock dependencies between different synchronization primitives in MySQL Server. Each ARC line represents a dependency where one lock can be held while acquiring another, helping to prevent deadlocks and document the locking hierarchy.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_26\n\nLANGUAGE: graphviz\nCODE:\n```\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/hash_filo::lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_default_password_lifetime\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_open\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_prepared_stmt_count\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_sql_rand\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_status\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_table_cache\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/LOG::LOCK_log\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/THD::LOCK_thd_protocol\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"W\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"rwlock/session/LOCK_srv_session_collection\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"rwlock/sha2_auth/key_m_cache_lock\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"rwlock/sha2_auth/key_m_cache_lock\" OP \"W\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"rwlock/sql/LOGGER::LOCK_logger\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"cond/sql/Gtid_state\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/mysqlx/client_session_exit\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/mysqlx/scheduler_dynamic_worker_pending\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/Gtid_state\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"rwlock/mysqlx/client_list_clients\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"rwlock/session/LOCK_srv_session_collection\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"W\"\nARC FROM \"mutex/sql/THD::LOCK_thd_sysvar\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"R\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/autoinc_persisted_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/dict_sys_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/dict_table_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/innobase_share_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/log_files_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/myisam/MYISAM_SHARE::intern_lock\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/mysys/KEY_CACHE::cache_lock\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/mysys/THR_LOCK_myisam\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/LOCK_open\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/LOCK_table_cache\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/TABLE_SHARE::LOCK_ha_data\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"W\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/sql/tz_LOCK\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/sql/Worker_info::jobs_lock\" TO \"mutex/sql/Relay_log_info::exit_count_lock\"\nARC FROM \"mutex/sql/Worker_info::jobs_lock\" TO \"mutex/sql/Relay_log_info::info_thd_lock\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"mutex/sql/LOCK_open\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"mutex/sql/LOCK_table_cache\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"prlock/sql/MDL_context::LOCK_waiting_for\" OP \"R\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"prlock/sql/MDL_context::LOCK_waiting_for\" RECURSIVE OP \"R\"\nARC FROM \"prlock/sql/MDL_context::LOCK_waiting_for\" STATE \"R\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"R\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"mutex/sql/LOCK_open\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"mutex/sql/LOCK_table_cache\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"prlock/sql/MDL_context::LOCK_waiting_for\" OP \"R\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"R\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"R\" TO \"prlock/sql/MDL_lock::rwlock\" RECURSIVE OP \"R\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"W\" TO \"mutex/mysys/THR_LOCK::mutex\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"W\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"prlock/sql/MDL_lock::rwlock\" STATE \"W\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"rwlock/group_rpl/RWLOCK_certifier_stable_gtid_set\" STATE \"W\" TO \"mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_applier_module_suspend\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_primary_election_running_flag\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_recovery\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/sql/Relay_log_info::info_thd_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/sql/Relay_log_info::run_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/sql/Source_info::info_thd_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_channel_observation_list\" STATE \"R\" TO \"mutex/sql/Worker_info::jobs_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"R\" TO \"mutex/group_rpl/GCS_Gcs_xcom_view_change_control::m_current_view_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"R\" TO \"mutex/group_rpl/GCS_Gcs_xcom_view_change_control::m_joining_leaving_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"cond/group_rpl/COND_view_modification_wait\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"cond/group_rpl/GCS_Gcs_xcom_interface::m_wait_for_ssl_init_cond\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_async_buffer::m_free_buffer_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_parameters_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_group_management::m_nodes_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_interface::m_wait_for_ssl_init_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_view_change_control::m_joining_leaving_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/LOCK_connection_map\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"rwlock/group_rpl/RWLOCK_gcs_operations\" STATE \"W\" TO \"mutex/group_rpl/LOCK_view_modification_wait\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of MySQL Unit Tests with CMake\nDESCRIPTION: This CMake code block conditionally includes the `tests` subdirectory into the build process. It checks if the `WITH_UNIT_TESTS` option is enabled. If it is, the `ADD_SUBDIRECTORY` command adds the `tests` directory, making unit tests available for building and execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/keepalive/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Semisync Slave Plugin\nDESCRIPTION: This snippet configures the semisync_slave plugin. It specifies the necessary source files and plugins' build properties, ensuring linkage to the rapidjson library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/semisync/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(semisync_slave\n  semisync.cc\n  semisync_replica.cc\n  semisync_replica_plugin_old.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"semisync_slave\\\"\n  VISIBILITY_HIDDEN\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Streams Static Library Build in CMake\nDESCRIPTION: This CMake snippet configures the build process for the Change Streams static library. It adds compiler warnings, creates the library, conditionally links with Protobuf, and sets output properties. The build is currently disabled due to an ongoing bug.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# TODO: Bug #34113532 Static library changestreams_static is unused \n# Just disable building it for now.\nRETURN()\n\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n\nADD_LIBRARY(changestreams_static STATIC ${CS_LIB_SOURCES})\nIF(WITH_CS_PROTOBUF)\n  TARGET_LINK_LIBRARIES(changestreams_static changestreams_pb_static)\nENDIF()\n\nSET_TARGET_PROPERTIES(changestreams_static\n  PROPERTIES\n  ARCHIVE_OUTPUT_DIRECTORY ${CS_LIBS_ARCHIVE_OUTPUT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router Shared Library 'router_mysqlxmessages'\nDESCRIPTION: Defines a shared library `router_mysqlxmessages` using CMake, specifying include directories and dependencies such as protobuf. The key purpose is to create a shared library build configuration for MySQL Router messages. It sets compiler definitions and options for building the router interface.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysqlxmessages/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET_SOURCE_FILES_PROPERTIES(${XMSG_SOURCES} PROPERTIES GENERATED TRUE)\n\nROUTER_ADD_SHARED_LIBRARY(router_mysqlxmessages\n  ${XMSG_SOURCES}\n\n  NO_EXPORT_HEADER\n  OUTPUT_NAME \"mysqlrouter_mysqlxmessages\"\n  DEPENDENCIES mysqlxmessages\n\n  LINK_LIBRARIES\n  PUBLIC\n  ext::libprotobuf\n  )\n\nTARGET_INCLUDE_DIRECTORIES(router_mysqlxmessages\n  PUBLIC ${XMSG_INC_DIRS}\n  )\nTARGET_INCLUDE_DIRECTORIES(router_mysqlxmessages\n  SYSTEM PUBLIC ${XMSG_SYS_INC_DIRS}\n  )\nTARGET_COMPILE_DEFINITIONS(router_mysqlxmessages\n  PUBLIC ${XMSG_COMPILE_DEFS}\n  PRIVATE mysqlxmessages_shared_EXPORTS=1\n  )\nTARGET_COMPILE_OPTIONS(router_mysqlxmessages\n  PUBLIC ${XMSG_COMPILE_OPTS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring tcmalloc Header Files and Sources - CMake\nDESCRIPTION: This snippet configures the necessary header files and sources for building the tcmalloc library with optional heap profiling and checking. It uses conditional logic based on defined build options to include or exclude certain sources. The `S_TCMALLOC_INCLUDES` variable sets the includes necessary for the library. The setup also handles scenarios where emergency malloc might be enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)\n  ### The header files we use.  We divide into categories based on directory\n  set(S_TCMALLOC_INCLUDES ${S_TCMALLOC_MINIMAL_INCLUDES}\n          ${LOGGING_INCLUDES}\n          src/addressmap-inl.h\n          src/raw_printer.h\n          src/base/googleinit.h\n          src/base/linuxthreads.h\n          src/base/stl_allocator.h\n          src/base/sysinfo.h\n          src/heap-profile-table.h\n          src/heap-profile-stats.h\n          src/maybe_emergency_malloc.h\n          src/mmap_hook.h\n          src/emergency_malloc.h)\n\n  set(SG_TCMALLOC_INCLUDES src/gperftools/heap-profiler.h\n          src/gperftools/heap-checker.h)\n  set(TCMALLOC_INCLUDES ${S_TCMALLOC_INCLUDES} ${SG_TCMALLOC_MINIMAL_INCLUDES}\n          ${SG_TCMALLOC_INCLUDES} ${SG_STACKTRACE_INCLUDES})\n  list(APPEND perftoolsinclude_HEADERS ${SG_TCMALLOC_INCLUDES})\n\n  if(gperftools_emergency_malloc)\n    set(EMERGENCY_MALLOC_CC\n            src/emergency_malloc.cc\n            src/emergency_malloc_for_stacktrace.cc)\n    set(EMERGENCY_MALLOC_DEFINE ENABLE_EMERGENCY_MALLOC)\n  else()\n    set(EMERGENCY_MALLOC_CC src/fake_stacktrace_scope.cc)\n  endif()\n\n```\n\n----------------------------------------\n\nTITLE: Async HTTP 2 Server Handling in Python\nDESCRIPTION: Demonstrates the implementation of an async HTTP 2 server using the libcno Python API. The server handles incoming requests and sends responses using asyncio. Requires Python 3.5+ and asyncio.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def handle(request: cno.Request):\n    request.method   # :: str\n    request.path     # :: str\n    request.headers  # :: [(str, str)]\n    request.conn     # :: cno.Server -- `protocol` (below)\n    request.payload  # :: asyncio.StreamReader\n\n    # Pushed resources inherit :authority and :scheme from the request unless overriden.\n    request.push('GET', '/index.css', [('x-extra-header', 'value')])\n\n    if all_data_is_available:\n        await request.respond(200, [('content-length', '4')], b'!!!\\n')\n    else:\n        # `Channel` is a subclass of `asyncio.Queue`.\n        channel = cno.Channel(max_buffered_chunks, loop=request.conn.loop)\n        await channel.put(b'!!!')  # this should preferably be done in a separate\n        await channel.put(b'\\n')   # coroutine, naturally.\n        channel.close()\n        # Or you can use any async iterable instead.\n        await request.respond(200, [], channel)\n\nmake_protocol = lambda: cno.Server(event_loop, handle)\n# When using TLS, don't forget to tell clients you support HTTP 2:\n# ssl_context.set_alpn_protocols(['h2', 'http/1.1'])\n# ssl_context.set_npn_protocols(['h2', 'http/1.1'])\n# server = await event_loop.create_server(make_protocol, '', 8000, ssl=ssl_context)\n```\n\n----------------------------------------\n\nTITLE: Including Generate Export Header and Adding Protobuf Plugin\nDESCRIPTION: This snippet includes the generation of export headers and defines a build target for the Protobuf plugin for MySQL Router. It specifies the source files needed, required dependencies (libprotobuf), and the installation directory for the plugin. The plugin's public include directory is also defined. The export header generation ensures that the plugin's symbols are correctly exported.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/protobuf/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nADD_HARNESS_PLUGIN(router_protobuf SOURCES\n  protobuf_plugin.cc\n  REQUIRES ext::libprotobuf\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\nTARGET_INCLUDE_DIRECTORIES(router_protobuf\n  PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/../include/)\n\nGENERATE_EXPORT_HEADER(router_protobuf\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/router_protobuf_export.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Static MySQL Client Library with CMake\nDESCRIPTION: This snippet adds and configures a static version of the mysqlxclient library using CMake. Dependencies like GenError need to be resolved, and libraries such as ext::lz4 and ext::zstd are linked. The configuration also handles inclusion paths and required compile definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(mysqlxclient STATIC ${CLIENT_SRC})\n\nADD_DEPENDENCIES(mysqlxclient GenError)\n\nTARGET_LINK_LIBRARIES(mysqlxclient PUBLIC ext::lz4 ext::zstd ext::zlib)\nTARGET_LINK_LIBRARIES(mysqlxclient PUBLIC ${MYSQLX_PROTOCOL_FULL_LIB})\nTARGET_LINK_LIBRARIES(mysqlxclient PRIVATE mysys)\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient SYSTEM PUBLIC\n  ${MYSQLX_PROJECT_DIR}/client/\n  ${CMAKE_CURRENT_BINARY_DIR})\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient PRIVATE\n  ${MYSQLX_GENERATE_DIR})\nTARGET_COMPILE_DEFINITIONS(mysqlxclient PUBLIC\n  USE_MYSQLX_FULL_PROTO\n  MYSQLXCLIENT_STATIC_DEFINE\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Dependencies Declaration\nDESCRIPTION: Defines relationships between Source_info::data_lock and Source_info::run_lock with other system locks including mutex, rwlock, and sxlock types. Shows lock acquisition order and access patterns including read (R), write (W), shared (S), and exclusive (X) operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/sql/Source_info::data_lock\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/sql/Source_info::data_lock\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"mutex/sql/Source_info::data_lock\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_log\"\n[...additional lock dependency definitions...]\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Components\nDESCRIPTION: This snippet adds subdirectories to the build process for the protocol and client components of the MySQL X plugin. These subdirectories contain the source code and CMake configuration for each component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_SUBDIRECTORY(protocol)\nADD_SUBDIRECTORY(client)\"\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for English Greeting Service\nDESCRIPTION: This snippet defines a MySQL component named 'example_component1' consisting of multiple source files for an English greeting service implementation and associated math functions. It is marked as a module and a test component, indicating its use in testing contexts without affecting core functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(example_component1\n  english_greeting_service_imp.cc\n  example_component1.cc\n  simple_example_math_imp.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Building MyISAM Utilities in CMake\nDESCRIPTION: This snippet defines the build instructions for MyISAM utilities like myisam_ftdump, myisamchk, myisamlog, and myisampack. It specifies their source files and library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(myisam_ftdump myisam_ftdump.cc\n  LINK_LIBRARIES myisam_library)\n\nMYSQL_ADD_EXECUTABLE(myisamchk myisamchk.cc\n  LINK_LIBRARIES myisam_library)\n\nMYSQL_ADD_EXECUTABLE(myisamlog myisamlog.cc\n  LINK_LIBRARIES myisam_library ${LIBSOCKET})\n\nMYSQL_ADD_EXECUTABLE(myisampack myisampack.cc\n  LINK_LIBRARIES myisam_library)\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf-Lite Versions of Proto Files in CMake\nDESCRIPTION: This snippet creates custom commands to generate lite versions of Protocol Buffer files. It iterates through the list of proto files and sets up commands to transform them into lite versions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/protobuf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(GENERATED_LITE_PROTO_FILES)\n# Generate protobuf-lite versions of proto files.\nFOREACH(PROTOBUF_FILE ${MYSQLX_PROTOBUF_PROTO_FILES})\n  GET_FILENAME_COMPONENT(NAME_WD ${PROTOBUF_FILE} NAME)\n  LIST(APPEND GENERATED_LITE_PROTO_FILES\n    ${PROTOBUF_LITE_GENERATE_DIR}/${NAME_WD})\n  ADD_CUSTOM_COMMAND(\n    OUTPUT \"${PROTOBUF_LITE_GENERATE_DIR}/${NAME_WD}\"\n    COMMAND ${CMAKE_COMMAND}\n            -D TARGET_DIR=\"${PROTOBUF_LITE_GENERATE_DIR}\"\n            -D PROTO_FILE=\"${PROTOBUF_FILE}\"\n            -D PROTO_FILE_FLAGS=\"PROTOBUF_LITE\"\n            -P ${CMAKE_SOURCE_DIR}/cmake/protobuf_proto_transform_to_lite.cmake\n    COMMENT \"transform_to_lite ${PROTOBUF_FILE}\"\n    DEPENDS ${PROTOBUF_FILE})\n  SET_SOURCE_FILES_PROPERTIES(\n    \"${PROTOBUF_LITE_GENERATE_DIR}/${NAME_WD}\"\n    PROPERTIES GENERATED TRUE)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Target with Custom Parameters\nDESCRIPTION: Creates a custom target 'test-mtr' that runs the MySQL test suite with specific parameters. Configures the test to run in parallel with force option, using the debug server and experimental settings as configured earlier.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# On windows do: 'cmake --build . --config debug --target test-mtr'\n# On unix do: 'make test-mtr'\nADD_CUSTOM_TARGET(test-mtr\n  COMMAND perl ./mysql-test-run.pl --force --parallel=4 --suite=main\n          ${VS_CONFIG} ${DEBUG_SERVER} ${EXP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router IO Component in CMake\nDESCRIPTION: The snippet sets up a shared library target named `io_component` and associates source files and link libraries for MySQL Router. It includes necessary dependencies such as `harness_net_ts` and `harness-library` and outputs the library with a specific name. The primary input consists of C++ source files specified for compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nROUTER_ADD_SHARED_LIBRARY(io_component\n  io_backend.cc\n  io_component.cc\n  io_thread.cc\n  thread_affinity.cc\n\n  OUTPUT_NAME \"mysqlrouter_io_component\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_net_ts\n  harness-library\n  )\n```\n\n----------------------------------------\n\nTITLE: Error Testing Conditions in MySQL Backup System\nDESCRIPTION: Conditional checks for specific error cases in the backup system using ERROR_INSERTED macro.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/backup/Backup.txt#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nif (ERROR_INSERTED(10023)) {\nif (ERROR_INSERTED(10023)) {\nif (ERROR_INSERTED(10024)) {\nif (ERROR_INSERTED(10025)) {\nif (ERROR_INSERTED(10026)) {\nif (ERROR_INSERTED(10028)) {\nif (ERROR_INSERTED(10027)) {\n(ERROR_INSERTED(10022))) {\nif (ERROR_INSERTED(10029)) {\nif(trigPtr.p->operation->noOfBytes > 123 && ERROR_INSERTED(10030)) {\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Order Debugging with Bison and Flex in MySQL\nDESCRIPTION: Sets up Bison and Flex to generate parser and scanner for lock order debugging when WITH_LOCK_ORDER is enabled. Includes finding the required packages, configuring output files, and setting compiler flags to suppress warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_LOCK_ORDER)\n\n  FIND_PACKAGE(BISON REQUIRED)\n  FIND_PACKAGE(FLEX REQUIRED)\n\n  BISON_TARGET(debug_lo_parser\n    ${CMAKE_CURRENT_SOURCE_DIR}/debug_lo_parser.yy\n    ${CMAKE_CURRENT_BINARY_DIR}/debug_lo_parser.cc\n    COMPILE_FLAGS \"--name-prefix=LOCK_ORDER_ ${BISON_NO_LINE_OPT}\"\n    DEFINES_FILE ${CMAKE_BINARY_DIR}/sql/debug_lo_parser.h\n    )\n  FLEX_TARGET(debug_lo_scanner\n    ${CMAKE_CURRENT_SOURCE_DIR}/debug_lo_scanner.ll\n    ${CMAKE_CURRENT_BINARY_DIR}/debug_lo_scanner.cc\n    COMPILE_FLAGS \"--prefix=LOCK_ORDER_\"\n    DEFINES_FILE ${CMAKE_BINARY_DIR}/sql/debug_lo_scanner.h\n    )\n  MESSAGE(STATUS \"BISON outputs ${BISON_debug_lo_parser_OUTPUTS}\")\n  MESSAGE(STATUS \"FLEX outputs ${FLEX_debug_lo_scanner_OUTPUTS}\")\n\n  # Some targets, for easier debugging.\n  # The new Xcode build system does not support multiple targets that\n  # DEPEND on the same outputs.\n  IF(NOT APPLE_XCODE)\n    ADD_CUSTOM_TARGET(GenBison_lo DEPENDS ${BISON_debug_lo_parser_OUTPUTS})\n    ADD_CUSTOM_TARGET(GenFlex_lo DEPENDS ${FLEX_debug_lo_scanner_OUTPUTS})\n  ENDIF()\n\n  LIST(APPEND SQL_SHARED_SOURCES\n    ${BISON_debug_lo_parser_OUTPUTS}\n    ${FLEX_debug_lo_scanner_OUTPUTS}\n    debug_lock_order.cc\n    )\n\n  # Bison output uses undefined symbols for clang >= v15\n  IF(MY_COMPILER_IS_CLANG AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 14)\n    ADD_COMPILE_FLAGS(${CMAKE_BINARY_DIR}/sql/debug_lo_parser.cc\n                      COMPILE_FLAGS \"-Wno-unused-but-set-variable\")\n  ENDIF()\n\n  IF(MY_COMPILER_IS_GNU_OR_CLANG)\n    ADD_COMPILE_FLAGS(${FLEX_debug_lo_scanner_OUTPUTS}\n      COMPILE_FLAGS\n      \"-Wno-sign-compare\"\n      \"-Wno-unused-parameter\"\n      )\n    ADD_COMPILE_FLAGS(${CMAKE_BINARY_DIR}/sql/debug_lo_parser.cc\n      COMPILE_FLAGS\n      \"-Wno-undef\"\n      )\n  ENDIF()\n\n  # flex annotates some variables as 'register' and that keyword\n  # will go away with C++17\n  IF(APPLE)\n    ADD_COMPILE_FLAGS(${FLEX_debug_lo_scanner_OUTPUTS}\n      COMPILE_FLAGS\n      \"-Wno-deprecated-register\"\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Out-of-Source Testing for MySQL\nDESCRIPTION: Configures the test environment to support running tests from a build directory that is separate from the source directory. Finds the Perl executable and creates the mysql-test-run.pl script.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  # Enable running mtr from build directory\n  FIND_PROGRAM(PERL_EXECUTABLE perl\n    /usr/bin /usr/local/bin\n    NO_CMAKE_ENVIRONMENT_PATH\n    NO_SYSTEM_ENVIRONMENT_PATH)\n  # If not found in hard-coded list above, look in PATH as well.\n  FIND_PROGRAM(PERL_EXECUTABLE perl)\n\n  CONFIGURE_FILE(\n    ${CMAKE_CURRENT_SOURCE_DIR}/mtr.out-of-source \n    ${CMAKE_CURRENT_BINARY_DIR}/mysql-test-run.pl\n    @ONLY\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: This snippet adds the specified directories to the include path.  These directories contain header files required to compile the MySQL X plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(\n  ${MYSQLX_GENERATE_DIR}\n  ${MYSQLX_PROTOCOL_INCLUDE_DIR}\n  ${MYSQLX_CLIENT_INCLUDE_DIR}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Building SQL Main Library with Dependencies in MySQL\nDESCRIPTION: Creates the main SQL static library, sets up its dependencies on generated sources, and links it with required external libraries including ICU and xxhash.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nADD_STATIC_LIBRARY(sql_main ${SQL_SOURCE} LINK_LIBRARIES ext::icu ext::xxhash)\nADD_DEPENDENCIES(sql_main GenServerSource)\nADD_DEPENDENCIES(sql_main GenDigestServerSource)\nADD_DEPENDENCIES(sql_main GenBootstrapPriv)\nADD_DEPENDENCIES(sql_main GenSysSchema)\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB CPCD Executable Build\nDESCRIPTION: Defines the ndb_cpcd executable target with its source files, enables exports, links required libraries, and sets up installation configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/cw/cpcd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(ndb_cpcd\n  APIService.cpp\n  CPCD.cpp\n  Monitor.cpp\n  Process.cpp\n  common.cpp\n  main.cpp\n  )\nSET_TARGET_PROPERTIES(ndb_cpcd PROPERTIES ENABLE_EXPORTS TRUE)\n\nTARGET_LINK_LIBRARIES(ndb_cpcd ndbclient_static)\n\nINSTALL(TARGETS ndb_cpcd DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking Protobuf Support in Changestreams Library in CMake\nDESCRIPTION: Conditionally links the changestreams_pb_static library when Protobuf support is enabled via the WITH_CS_PROTOBUF option, allowing the changestreams library to support Protocol Buffers serialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/libstandalone/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_CS_PROTOBUF)\n  TARGET_LINK_LIBRARIES(changestreams_standalone_static\n    changestreams_pb_static)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for LOCK_plugin in MySQL Server\nDESCRIPTION: This snippet defines the lock dependencies for the LOCK_plugin mutex in MySQL server. It shows relationships with various InnoDB mutexes, system mutexes, and shared-exclusive locks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_plugin\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/LOCK_plugin\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/sql/LOCK_plugin\" TO \"mutex/innodb/autoinc_persisted_mutex\"\n// ... (truncated for brevity)\nARC FROM \"mutex/sql/LOCK_plugin\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\n```\n\n----------------------------------------\n\nTITLE: Defining XPlugin Unit Tests Executable in CMake\nDESCRIPTION: Creates the xplugin_unit_tests executable, specifies its source files, dependencies, and test properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(xplugin_unit_tests\n  ../test_main.cc\n  ${XPL_TEST_SRC}\n  LINK_LIBRARIES harness_net_ts ext::zlib ext::lz4 ext::zstd extra::rapidjson ext::icu\n  DEPENDENCIES mysqlx\n  ADD_TEST xplugin\n)\nSET_TESTS_PROPERTIES(xplugin PROPERTIES TIMEOUT 300)\nDOWNGRADE_STRINGOP_WARNINGS(xplugin_unit_tests)\n```\n\n----------------------------------------\n\nTITLE: Building Main Routing Shared Library with Extensive Components\nDESCRIPTION: Creates the main routing shared library with numerous source files for MySQL routing functionality including connection handling, authentication methods, and command forwarding. It links with multiple libraries and sets platform-specific configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(routing\n  mysql_routing.cc\n  destination.cc\n  destination_error.cc\n  destinations_option_parser.cc\n  dest_metadata_cache.cc\n  dest_static.cc\n  context.cc\n  mysql_routing_common.cc\n  connection_container.cc\n  routing_component.cc\n  destination_ssl_context.cc\n  classic_connection_base.cc\n  classic_connection.cc\n  x_connection.cc\n  connection.cc\n  blocked_endpoints.cc\n  routing_guidelines_adapter.cc\n\n  await_client_or_server.cc\n  forwarding_processor.cc\n  processor.cc\n\n  classic_auth.cc\n  classic_auth_cleartext.cc\n  classic_auth_caching_sha2.cc\n  classic_auth_native.cc\n  classic_auth_sha256_password.cc\n  classic_command.cc\n  classic_connect.cc\n  classic_flow.cc\n  classic_forwarder.cc\n  classic_frame.cc\n  classic_lazy_connect.cc\n\n  classic_auth_cleartext_forwarder.cc\n  classic_auth_caching_sha2_forwarder.cc\n  classic_auth_forwarder.cc\n  classic_auth_native_forwarder.cc\n  classic_auth_openid_connect_forwarder.cc\n  classic_auth_sha256_password_forwarder.cc\n  classic_binlog_dump_forwarder.cc\n  classic_change_user_forwarder.cc\n  classic_clone_forwarder.cc\n  classic_debug_forwarder.cc\n  classic_greeting_forwarder.cc\n  classic_init_schema_forwarder.cc\n  classic_kill_forwarder.cc\n  classic_list_fields_forwarder.cc\n  classic_ping_forwarder.cc\n  classic_query_forwarder.cc\n  classic_quit_forwarder.cc\n  classic_register_replica_forwarder.cc\n  classic_reload_forwarder.cc\n  classic_reset_connection_forwarder.cc\n  classic_set_option_forwarder.cc\n  classic_statistics_forwarder.cc\n  classic_stmt_close_forwarder.cc\n  classic_stmt_execute_forwarder.cc\n  classic_stmt_fetch_forwarder.cc\n  classic_stmt_param_append_data_forwarder.cc\n  classic_stmt_prepare_forwarder.cc\n  classic_stmt_reset_forwarder.cc\n\n  classic_auth_cleartext_sender.cc\n  classic_auth_caching_sha2_sender.cc\n  classic_auth_native_sender.cc\n  classic_auth_openid_connect_sender.cc\n  classic_auth_sha256_password_sender.cc\n  classic_change_user_sender.cc\n  # classic_greeting_sender.cc\n  classic_init_schema_sender.cc\n  classic_query_sender.cc\n  classic_quit_sender.cc\n  classic_reset_connection_sender.cc\n  classic_set_option_sender.cc\n\n  classic_greeting_receiver.cc\n\n  classic_query_param.cc\n  classic_session_tracker.cc\n\n  show_warnings_parser.cc\n  sql_splitting_allowed.cc\n  sql_value.cc\n  start_transaction_parser.cc\n  implicit_commit_parser.cc\n  router_require.cc\n\n  openssl_msg.cc\n\n  OUTPUT_NAME \"mysqlrouter_routing\"\n\n  DEPENDENCIES GenLiteProtos\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness_tls\n  mysql_protocol\n  router_utils\n  routing_connections\n  router_mysqlxmessages\n  routing_frontend_lib\n  ext::libprotobuf\n  metadata_cache\n  connection_pool\n  destination_status\n  sql_lexer\n  routing_guidelines\n  )\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring SQL GIS Library in MySQL\nDESCRIPTION: Creates the SQL GIS static library, sets up its dependencies on generated sources, and links it with the main SQL libraries. Sets the link interface multiplicity to handle multiple references in the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(sql_gis STATIC ${SQL_GIS_SOURCES})\nADD_DEPENDENCIES(sql_gis GenServerSource)\nADD_DEPENDENCIES(sql_gis GenDigestServerSource)\nADD_DEPENDENCIES(sql_gis GenBootstrapPriv)\nADD_DEPENDENCIES(sql_gis GenSysSchema)\nADD_DEPENDENCIES(sql_gis GenError)\nTARGET_LINK_LIBRARIES(sql_gis sql_dd sql_main)\nTARGET_LINK_LIBRARIES(sql_gis extra::boost)\nSET_TARGET_PROPERTIES(sql_gis PROPERTIES LINK_INTERFACE_MULTIPLICITY 3)\n```\n\n----------------------------------------\n\nTITLE: Installing License and README Files\nDESCRIPTION: This snippet installs the license and README files to a specified destination.  It conditionally executes the installation based on the installation layout. The files are installed to the DOC_DESTINATION with the Router component, and it is OPTIONAL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(DOC_DESTINATION \\\".\\\")\nIF(NOT INSTALL_LAYOUT MATCHES \\\"RPM\\\")\n  INSTALL(FILES\n      ${ROUTER_LICENSE_FILE}\n      ${ROUTER_README_FILE}\n      DESTINATION ${DOC_DESTINATION} COMPONENT Router OPTIONAL)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Change Streams Test Environment in CMake\nDESCRIPTION: Sets up the environment for Change Streams tests, including compiler warnings, conditional compilation based on unit test availability, and defining the standalone binlog mode. This establishes the foundation for the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n\n# This is not a unit test per se, but uses the Google Test framework\n# We are thus treating it as a unit test.\nIF(NOT WITH_UNIT_TESTS)\n  RETURN()\nENDIF()\n\nADD_DEFINITIONS(-DSTANDALONE_BINLOG)\n```\n\n----------------------------------------\n\nTITLE: Add Reference Cache Executable in CMake\nDESCRIPTION: This snippet adds an executable named `reference_cache-t` using the `MYSQL_ADD_EXECUTABLE` macro. It specifies the source file, output directory, test definition, export enablement, linked libraries (including component dependencies). It also links `mysql_server_component_services` conditionally based on `WITH_SHARED_UNITTEST_LIBRARY`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(reference_cache-t\n  reference_cache-t.cc\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugin_output_directory\n  ADD_TEST reference_cache-t\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ${GTEST_LIBRARIES} server_unittest_library unit_test_common\n  DEPENDENCIES component_reference_cache component_test_reference_cache\n)\n\nIF(NOT WITH_SHARED_UNITTEST_LIBRARY)\n  TARGET_LINK_LIBRARIES(reference_cache-t mysql_server_component_services)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Build with CMake for Static Analysis\nDESCRIPTION: CMake configuration command to enable clang-tidy analysis by generating compile_commands.json file with necessary build parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/static_analysis.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCC=clang CXX=clang++ cmake <path_to_src> -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DWITH_SYSTEM_LIBS=1 -DWITH_ZLIB=bundled -DWITH_FIDO=bundled -DWITH_PROTOBUF=bundled -DWITH_ZSTD=bundled -DWITH_EDITLINE=bundled -DWITH_LZ4=bundled\n```\n\n----------------------------------------\n\nTITLE: Adding Federated Storage Engine Plugin in MySQL\nDESCRIPTION: CMake configuration to build the Federated storage engine as a MySQL plugin. It specifies the source file, sets it as a storage engine, marks it as a default legacy engine, and links against the RapidJSON library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/federated/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_PLUGIN(federated ha_federated.cc\n  STORAGE_ENGINE DEFAULT_LEGACY_ENGINE\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: ASAN Compatibility Workaround for RPC/XDR Libraries in CMake\nDESCRIPTION: Implements a workaround for compatibility issues between Address Sanitizer (ASAN) and RPC/XDR libraries. Creates a test program to extract ASAN library information and properly set up dependencies for the mysqltest_safe_process executable when both ASAN and RPC are used.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lib/My/SafeProcess/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_ASAN AND TARGET ext::rpc AND NOT TARGET tirpc_ext)\n  TARGET_INCLUDE_DIRECTORIES(mysqltest_safe_process\n    PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n\n  SET(CONTENTS \"\")\n  STRING_APPEND(CONTENTS \"#include <rpc/xdr.h>\\n\")\n  STRING_APPEND(CONTENTS \"int main() {\\n\")\n  STRING_APPEND(CONTENTS \"  xdr_void();\\n\")\n  STRING_APPEND(CONTENTS \"  return 0;\\n\")\n  STRING_APPEND(CONTENTS \"}\\n\")\n  CONFIGURE_FILE_CONTENT(\"${CONTENTS}\" asan_test.c)\n\n  ADD_EXECUTABLE(asan_test asan_test.c)\n  TARGET_LINK_LIBRARIES(asan_test ext::rpc)\n  ADD_CUSTOM_COMMAND(\n    OUTPUT ldd_asan_test_result\n    DEPENDS asan_test\n    COMMAND ldd asan_test > ldd_asan_test_result)\n\n  ADD_CUSTOM_TARGET(extract_asan_library_name\n    DEPENDS ldd_asan_test_result\n    COMMAND ${CMAKE_COMMAND}\n    -DINFILE=${CMAKE_CURRENT_BINARY_DIR}/ldd_asan_test_result\n    -DOUTFILE=${CMAKE_CURRENT_BINARY_DIR}/asan_library_name.h\n    -P ${CMAKE_CURRENT_SOURCE_DIR}/read_ldd_output.cmake\n    )\n\n  ADD_DEPENDENCIES(mysqltest_safe_process extract_asan_library_name)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring AArch64-specific Compiler Flags in CMake for MySQL\nDESCRIPTION: Adds the -moutline-atomics flag for AArch64 architecture to enable run-time detection of LSE support, improving compatibility across different AArch64 sub-architectures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n  MY_CHECK_CXX_COMPILER_FLAG( \"-moutline-atomics\" HAVE_OUTLINE_ATOMICS)\n  IF(HAVE_OUTLINE_ATOMICS)\n    STRING_APPEND(CMAKE_C_FLAGS   \" -moutline-atomics\")\n    STRING_APPEND(CMAKE_CXX_FLAGS \" -moutline-atomics\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Cluster Directory Path in CMake\nDESCRIPTION: Sets up the default location for NDB management server configuration files based on the installation prefix and operating system. This defines the MYSQLCLUSTERDIR macro which is used at runtime.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT DEFINED DEFAULT_MYSQL_HOME)\n  # MySQL does not define DEFAULT_MYSQL_HOME in pre 5.5 version, fall\n  # back to our old defaults and be backwards compatible\n  IF(WIN32)\n    SET(DEFAULT_MYSQL_HOME \"C:/mysql\" )\n  ELSE()\n    SET(DEFAULT_MYSQL_HOME ${CMAKE_INSTALL_PREFIX})\n  ENDIF()\nENDIF()\nSET(clusterdir ${DEFAULT_MYSQL_HOME}/mysql-cluster)\nADD_DEFINITIONS(-DMYSQLCLUSTERDIR=\\\"${clusterdir}\\\")\nMESSAGE(STATUS \"Using MYSQLCLUSTERDIR: '${clusterdir}'\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Mock Executable in CMake\nDESCRIPTION: This snippet defines the main executable for the MySQL server mock, detailing its source files, libraries to be linked, and compilation definitions necessary for the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql_server_mock\n  main.cc\n  COMPONENT Router\n  LINK_LIBRARIES\n  ${common_libraries}\n  harness-library\n  harness_stdx\n  harness_net_ts\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Flag for Shadow Variables in CMake\nDESCRIPTION: Adds warning flags for shadow variables to the build configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared MySQL Client Library with CMake\nDESCRIPTION: This snippet sets up a shared version of the mysqlxclient library using CMake. It's configured to exclude the build from all by default. Dependencies like `GenError` must be managed, with the necessary external link libraries specified. Includes and compiler definitions are tailored for shared library generation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(mysqlxclient_shared SHARED\n  EXCLUDE_FROM_ALL\n  ${CLIENT_SRC})\nGENERATE_EXPORT_HEADER(mysqlxclient_shared\n  BASE_NAME mysqlxclient)\n\nADD_DEPENDENCIES(mysqlxclient_shared GenError)\n\nTARGET_LINK_LIBRARIES(mysqlxclient_shared PUBLIC ext::lz4 ext::zstd ext::zlib)\nTARGET_LINK_LIBRARIES(mysqlxclient_shared PUBLIC ${MYSQLX_PROTOCOL_FULL_LIB})\nTARGET_LINK_LIBRARIES(mysqlxclient_shared PRIVATE mysys vio)\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient_shared SYSTEM PUBLIC\n  ${MYSQLX_PROJECT_DIR}/client/\n  ${CMAKE_CURRENT_BINARY_DIR}/  # for the mysqlxclient_export.h\n  )\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient_shared PRIVATE\n  ${MYSQLX_GENERATE_DIR})\nTARGET_COMPILE_DEFINITIONS(mysqlxclient_shared PUBLIC\n  USE_MYSQLX_FULL_PROTO)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL REST Service Plugin\nDESCRIPTION: Configures the main REST service plugin build, including source files, dependencies, and installation settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_PLUGIN(mysql_rest_service\n  SOURCES\n  mysql_rest_service_plugin_config.cc\n  mysql_rest_service_plugin.cc\n  REQUIRES \"${mysql_rest_service_reqs}\"\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n)\n\nTARGET_INCLUDE_DIRECTORIES(mysql_rest_service\n  PRIVATE\n    ${mysql_rest_service_includes}\n)\n\nGENERATE_EXPORT_HEADER(mysql_rest_service\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/mysql_rest_service_export.h)\n```\n\n----------------------------------------\n\nTITLE: Managing Installation of Google Test with CMake\nDESCRIPTION: Defines the installation rules for Google Test libraries, including path settings for generated CMake files and export targets. It ensures that the package can be correctly located and used in other projects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (INSTALL_GTEST)\n  include(CMakePackageConfigHelpers)\n  set(targets_export_name ${cmake_package_name}Targets CACHE INTERNAL \"\")\n  set(generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\" CACHE INTERNAL \"\")\n  set(cmake_files_install_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/${cmake_package_name}\")\n  set(version_file \"${generated_dir}/${cmake_package_name}ConfigVersion.cmake\")\n  write_basic_package_version_file(${version_file} VERSION ${GOOGLETEST_VERSION} COMPATIBILITY AnyNewerVersion)\n  install(EXPORT ${targets_export_name}\n    COMPONENT \"${PROJECT_NAME}\"\n    NAMESPACE ${cmake_package_name}::\n    DESTINATION ${cmake_files_install_dir})\n  set(config_file \"${generated_dir}/${cmake_package_name}Config.cmake\")\n  configure_package_config_file(\"${gtest_SOURCE_DIR}/cmake/Config.cmake.in\"\n    \"${config_file}\" INSTALL_DESTINATION ${cmake_files_install_dir})\n  install(FILES ${version_file} ${config_file}\n    COMPONENT \"${PROJECT_NAME}\"\n    DESTINATION ${cmake_files_install_dir})\nendif()\n```\n\n----------------------------------------\n\nTITLE: MySQL Copy Thread ROWID Operations Matrix\nDESCRIPTION: Defines behavior matrix for copy thread operations based on different ROWID combinations between Primary and Starting nodes. Covers scenarios from simple updates to complex delete-insert combinations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/OptNR.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRI  Primary     Starting    Result\n1   A           A           Update A\n2   B           B*          Delete B* + Insert B\n3   C           C*          Delete C* + Delete C + Insert C\n                C\n4   Deleted     D           Delete D\n5   E           Deleted     Insert E\n6   F           Deleted     Delete F + Insert F\n                F\n7   Deleted     Deleted     Update GCP\n```\n\n----------------------------------------\n\nTITLE: NdbCntr Initial Start and System Restart Process\nDESCRIPTION: Outlines the initialization and system restart procedures for the NDB Cluster Controller on the president node, including partition handling and node coordination.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nInitial start/System restart NdbCntr (on qmgr president node)\n\n1) Wait until -\na) Receiving CNTR_START_REQ with GCI > than own GCI\n   send CNTR_START_REF to all waiting nodes\nb) Receiving all CNTR_START_REQ (for all defined nodes)\nc) TimeToWait has passed and partition win\nd) TimeToWait has passed and partitioning \n   and configuration \"start with partition\" = true\n\n2) Send CNTR_START_CONF to all nodes \"with filesystem\"\n\n3) Wait until -\n   Receiving CNTR_START_REP for all starting nodes\n\n4) Start waiting nodes (if any)\n```\n\n----------------------------------------\n\nTITLE: Configuring Backtrace Library in CMake\nDESCRIPTION: This snippet configures the Backtrace library settings for a MySQL server instance using CMake. It establishes the version, source files, and compile-time definitions needed, as well as handles platform-specific configurations such as FreeBSD flags. Dependencies include standard headers, compile options, and particular compiler flags to prevent optimization altering the stack frames.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libbacktrace/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(libutils)\n\nDISABLE_MISSING_PROFILE_WARNING()\n\nSET(BACKTRACE_VERSION sha9ae4f4a)\nSET(BACKTRACE_SOURCES\n  ${BACKTRACE_VERSION}/backtrace.c\n  ${BACKTRACE_VERSION}/dwarf.c\n  ${BACKTRACE_VERSION}/elf.c\n  ${BACKTRACE_VERSION}/fileline.c\n  ${BACKTRACE_VERSION}/mmap.c\n  ${BACKTRACE_VERSION}/mmapio.c\n  ${BACKTRACE_VERSION}/posix.c\n  ${BACKTRACE_VERSION}/print.c\n  ${BACKTRACE_VERSION}/simple.c\n  ${BACKTRACE_VERSION}/sort.c\n  ${BACKTRACE_VERSION}/state.c\n)\nSET(BACKTRACE_DEFINITIONS\n  BACKTRACE_ELF_SIZE=64\n  BACKTRACE_XCOFF_SIZE=unused\n  HAVE_ATOMIC_FUNCTIONS=1\n  HAVE_CLOCK_GETTIME=1\n  HAVE_DECL_GETPAGESIZE=1\n  HAVE_DECL_STRNLEN=1\n  HAVE_DECL__PGMPTR=0\n  HAVE_DLFCN_H=1\n  HAVE_DL_ITERATE_PHDR=1\n  HAVE_FCNTL=1\n  HAVE_GETIPINFO=1\n  HAVE_INTTYPES_H=1\n  HAVE_LINK_H=1\n  HAVE_LSTAT=1\n  HAVE_MEMORY_H=1\n  HAVE_READLINK=1\n  HAVE_STDINT_H=1\n  HAVE_STDLIB_H=1\n  HAVE_STRINGS_H=1\n  HAVE_STRING_H=1\n  HAVE_SYNC_FUNCTIONS=1\n  HAVE_SYS_MMAN_H=1\n  HAVE_SYS_STAT_H=1\n  HAVE_SYS_TYPES_H=1\n  HAVE_UNISTD_H=1\n)\nIF(FREEBSD)\n  LIST(APPEND BACKTRACE_DEFINITIONS\n    HAVE_KERN_PROC=1\n    HAVE_KERN_PROC_ARGS=1\n    )\nENDIF()\n\n# Ensure no tail-call optimization to stabilize the number of reported frames\nADD_COMPILE_FLAGS(src/stacktrace.cc COMPILE_FLAGS -fno-optimize-sibling-calls)\n\nADD_CONVENIENCE_LIBRARY(backtrace ${BACKTRACE_SOURCES} src/stacktrace.cc\n  INCLUDE_DIRECTORIES PRIVATE include/\n  COMPILE_OPTIONS PRIVATE -funwind-tables\n  COMPILE_DEFINITIONS PRIVATE ${BACKTRACE_DEFINITIONS}\n)\nTARGET_COMPILE_DEFINITIONS(backtrace INTERFACE HAVE_EXT_BACKTRACE)\nTARGET_COMPILE_DEFINITIONS(backtrace_objlib INTERFACE HAVE_EXT_BACKTRACE)\n\nTARGET_INCLUDE_DIRECTORIES(backtrace INTERFACE include/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Plugin in CMake\nDESCRIPTION: This snippet defines the connection pool plugin target using ADD_HARNESS_PLUGIN. It specifies the output name, source files, required dependencies, and installation destination for the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(connection_pool_plugin\n  OUTPUT_NAME \"connection_pool\"\n  SOURCES\n  connection_pool_plugin.cc\n  REQUIRES\n  harness_stdx\n  connection_pool\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Semisync Replica Plugin\nDESCRIPTION: This snippet configures the semisync_replica plugin build using source files and sets module parameters such as name and visibility. It links to the rapidjson library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/semisync/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(semisync_replica\n  semisync.cc\n  semisync_replica.cc\n  semisync_replica_plugin.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"semisync_replica\\\"\n  VISIBILITY_HIDDEN\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating ZSTD Convenience Library with CMake\nDESCRIPTION: Creates a convenience library target for ZSTD with the defined source files and includes the common directory for header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(zstd\n  ${ZSTD_SRCS}\n  INCLUDE_DIRECTORIES ${ZSTD_VERSION_DIR}/lib/common\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Ordinary Operations Matrix\nDESCRIPTION: Defines behavior for standard database operations (Insert, Delete, Update) under different starting conditions. Includes handling of busy states and various record states.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/OptNR.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOp           Starting        Result\nInsert A@1   A@1             Update A\nInsert A@1   A@2             Delete A@2, Insert A@1\nInsert A@1   1 busy, A@2     Delete 1, Delete A@2, Insert A@1\nInsert A@1   1 busy          Delete 1, Insert A@1\n\nDelete A@1   A@1             Delete A@1\nDelete A@1   else            noop\n\nUpdate A@1   A@1             Update A\nUpdate A@1   else            noop\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Router Plugin Build in CMake\nDESCRIPTION: Defines the build configuration for the REST router plugin including source files, required dependencies, and installation destination. Sets up header exports and include directories for the plugin build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_router/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nADD_HARNESS_PLUGIN(rest_router\n  SOURCES\n  rest_router_plugin.cc\n  rest_router_status.cc\n  REQUIRES\n  http_server_lib\n  rest_api_lib\n  rest_api\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\")\n\nGENERATE_EXPORT_HEADER(rest_router\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/rest_router_export.h)\n\nTARGET_INCLUDE_DIRECTORIES(rest_router\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Management Client Executable Build\nDESCRIPTION: Specifies how to build the ndb_mgm executable including its source files, component classification, and required library dependencies. This creates the NDB management client application with all necessary linkage to MySQL and NDB libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmclient/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_mgm\n  main.cpp\n  COMPONENT ClusterManagementClient\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ${EDITLINE_LIBRARY}\n  mysys\n  ndbgeneral\n  ndblogger\n  ndbmgmapi\n  ndbmgmclient\n  ndbmgmcommon\n  ndbportlib\n  ndbtrace\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Abseil Build Options\nDESCRIPTION: Configures various build options for Abseil, including installation rules, C++ standard propagation, and system includes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  option(ABSL_ENABLE_INSTALL \"Enable install rule\" OFF)\nelse()\n  option(ABSL_ENABLE_INSTALL \"Enable install rule\" ON)\nendif()\n\noption(ABSL_PROPAGATE_CXX_STD\n  \"Use CMake C++ standard meta features (e.g. cxx_std_14) that propagate to targets that link to Abseil\"\n  OFF)\n\noption(ABSL_USE_SYSTEM_INCLUDES\n  \"Silence warnings in Abseil headers by marking them as SYSTEM includes\"\n  OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL X Plugin Variables\nDESCRIPTION: This snippet defines CMake variables that specify the source directory, binary directory, and plugin name for the MySQL X plugin. These variables are used throughout the CMake configuration to locate and name the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(MYSQLX_PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nSET(MYSQLX_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nSET(MYSQLX_PLUGIN_NAME \\\"mysqlx\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Group Replication Plugin Compilation\nDESCRIPTION: Implements conditional compilation logic for the Group Replication plugin, handling flags like WITHOUT_GROUP_REPLICATION and WITH_GROUP_REPLICATION to control plugin build process\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF ((NOT (DEFINED WITHOUT_GROUP_REPLICATION AND WITHOUT_GROUP_REPLICATION)) AND\n    (NOT (DEFINED WITH_GROUP_REPLICATION AND NOT WITH_GROUP_REPLICATION)))\n  # Plugin compilation logic\n  ADD_SUBDIRECTORY(libmysqlgcs)\n  ADD_SUBDIRECTORY(protobuf)\n  # Additional configuration\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding temptable plugin with MySQL_ADD_PLUGIN\nDESCRIPTION: This CMake macro adds the temptable plugin using the specified source files, type, and linking libraries.  It defines temptable as a STORAGE_ENGINE plugin, marks it as MANDATORY and links it against the extra::rapidjson library.  The sources are defined in the TEMPTABLE_SOURCES variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/temptable/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(temptable\n  ${TEMPTABLE_SOURCES}\n  STORAGE_ENGINE\n  MANDATORY\n  LINK_LIBRARIES extra::rapidjson\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CURL Build Options in CMake\nDESCRIPTION: Sets various CURL build options to optimize the library for MySQL Server usage. Disables unnecessary features like LDAP, SSH2, manual pages, and examples while enabling static library builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(BUILD_CURL_EXE OFF)\nSET(BUILD_CURL_EXE OFF CACHE INTERNAL \"\" FORCE)\n\nSET(PICKY_COMPILER OFF)\nSET(PICKY_COMPILER OFF CACHE INTERNAL \"\" FORCE)\n\nSET(BUILD_STATIC_LIBS ON)\nSET(BUILD_STATIC_LIBS ON CACHE INTERNAL \"\" FORCE)\n\nSET(SHARE_LIB_OBJECT OFF)\nSET(SHARE_LIB_OBJECT OFF CACHE INTERNAL \"\" FORCE)\n\nSET(BUILD_TESTING OFF)\nSET(BUILD_TESTING OFF CACHE INTERNAL \"\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Linking Configuration for MySQL OCI Authentication Plugin\nDESCRIPTION: Configures platform-specific linking options for Linux and Solaris platforms to control symbol visibility in the OCI authentication client plugin. Uses version script files to hide symbols and prevent ODR violations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_oci_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX OR SOLARIS)\n  SET(PLUGIN_VERSION_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/authentication_oci_client.ver)\n  IF(SOLARIS)\n    TARGET_LINK_OPTIONS(authentication_oci_client PRIVATE\n      LINKER:-z,gnu-version-script-compat)\n  ENDIF()\n  # hide all symbols in mysys, to avoid ODR violations.\n  # There is *one* visible symbol: _mysql_client_plugin_declaration_\n  TARGET_LINK_OPTIONS(authentication_oci_client PRIVATE\n    LINKER:--version-script=${PLUGIN_VERSION_FILE}\n    )\n  SET_TARGET_PROPERTIES(authentication_oci_client\n    PROPERTIES LINK_DEPENDS ${PLUGIN_VERSION_FILE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for Heap Storage Engine\nDESCRIPTION: Creates a static library from the Heap source files and sets up dependencies. This library contains the core functionality of the Heap storage engine.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(heap_library STATIC ${HEAP_SOURCES})\nADD_DEPENDENCIES(heap_library GenError)\nTARGET_LINK_LIBRARIES(heap_library mysys)\n```\n\n----------------------------------------\n\nTITLE: Primary Election Process Lock Interactions\nDESCRIPTION: Detailed lock and mutex interactions during primary election processes, covering both primary and secondary process runs with complex synchronization mechanisms\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/group_rpl/LOCK_primary_election_primary_process_run\" TO \"mutex/group_rpl/LOCK_pipeline_continuation\"\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific System Implementation Sources in CMake\nDESCRIPTION: Conditionally appends platform-specific system API implementation files to the source list based on the target operating system. Handles Linux, Apple, FreeBSD, Solaris, and Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX)\n  LIST(APPEND MY_SYSTEM_SOURCES\n    my_system_api/my_system_api_linux.cc)\nELSEIF(APPLE)\n  LIST(APPEND MY_SYSTEM_SOURCES\n    my_system_api/my_system_api_apple.cc)\nELSEIF(FREEBSD)\n  LIST(APPEND MY_SYSTEM_SOURCES\n    my_system_api/my_system_api_freebsd.cc)\nELSEIF(SOLARIS)\n  LIST(APPEND MY_SYSTEM_SOURCES\n    my_system_api/my_system_api_solaris.cc)\nELSEIF(WIN32)\n  LIST(APPEND MY_SYSTEM_SOURCES\n    my_system_api/my_system_api_win.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Merging Libraries into Shared libmysql in CMake\nDESCRIPTION: Merges several convenience libraries into a single large mysqlclient library and links them together into a shared library. It also sets export functions and component information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nMERGE_LIBRARIES_SHARED(libmysql ${LIBS_TO_MERGE}\n  EXPORTS\n  ${CLIENT_API_FUNCTIONS}\n  ${CLIENT_API_FUNCTIONS_UNDOCUMENTED}\n  ${CLIENT_API_NONBLOCKING_FUNCTIONS}\n  COMPONENT SharedLibraries\n  LINK_LIBRARIES ${LIBS_TO_LINK}\n  ${UNIX_OUTPUT_NAME}\n  ${UNIX_SOVERSION}\n  ${UNIX_VERSION}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH Options for MySQL Server\nDESCRIPTION: This snippet sets RPATH options for Solaris and Linux installations. For Linux, it includes additional paths for private libraries and uses origin-based RPATH.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nIF(SOLARIS)\n  SET(RPATH_OPTION \" -R$pkglibdir\")\nENDIF()\n\nIF(LINUX_INSTALL_RPATH_ORIGIN)\n  SET(RPATH_OPTION \" -Wl,-R,$pkglibdir\")    # for mysql_config\n  SET(RPATH_OPTION_PC \" -Wl,-R,\\${libdir}\") # for pkg_config\n  # Do not use STRING_APPEND, it may eval the $.\n  SET(RPATH_OPTION \"${RPATH_OPTION} -L$pkglibdir/private\")\n  SET(RPATH_OPTION_PC \"${RPATH_OPTION_PC} -L\\${libdir}/private\")\n  SET(RPATH_OPTION \"${RPATH_OPTION} -Wl,-R,$pkglibdir/private\")\n  SET(RPATH_OPTION_PC \"${RPATH_OPTION_PC} -Wl,-R,\\${libdir}/private\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: CURL Library Check\nDESCRIPTION: This snippet checks for the system CURL library and issues a fatal error if it's missing when -DWITH_CURL=system is specified. It suggests either disabling CURL with -DWITH_CURL=0 or ensuring the system library is installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Try and set CURL_LIBRARY\nMYSQL_CHECK_CURL()\n\nSET(CURL_WARN_GIVEN)\nWARN_MISSING_SYSTEM_CURL(CURL_WARN_GIVEN)\nIF(CURL_WARN_GIVEN)\n  MESSAGE(FATAL_ERROR\n    \\\"-DWITH_CURL=system, but missing system libraries.\\\\n\\\"\n    \\\"You can disable CURL with -DWITH_CURL=0\\\"\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding auth_socket Plugin in CMake\nDESCRIPTION: This snippet adds the auth_socket plugin to MySQL Server if peer credentials support is available (HAVE_PEERCRED is true). The plugin is added using the MYSQL_ADD_PLUGIN macro with the MODULE_ONLY option.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/auth/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_PEERCRED)\n  MYSQL_ADD_PLUGIN(auth_socket\n    auth_socket.cc\n    MODULE_ONLY\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Add Minimal Chassis Executable in CMake\nDESCRIPTION: This snippet adds an executable named `minimal_chassis-t` using `MYSQL_ADD_EXECUTABLE`. It includes the source file, output directory, test definition, export enabling, linked libraries (including component_example_component1 as a dependency).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(minimal_chassis-t\n  minimal_chassis-t.cc\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugin_output_directory\n  ADD_TEST minimal_chassis-t\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ${GTEST_LIBRARIES} mysys minchassis unit_test_common\n  DEPENDENCIES component_example_component1\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Connection Attribute Test - CMake\nDESCRIPTION: Defines an executable for the `pfs_connect_attr` test that includes connection attribute checks, specifying dependencies and linking libraries relevant to the test execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(pfs_connect_attr-t\\n  pfs_connect_attr-t.cc\\n  ADD_TEST pfs_connect_attr\\n  DEPENDENCIES GenServerSource\\n  LINK_LIBRARIES\\n  mytap\\n  server_unittest_library\\n  ${MYSQLD_EXTRA_LIBRARIES}\\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Linker Options for MyISAM Utilities in CMake\nDESCRIPTION: This snippet adds Windows-specific linker options for myisamchk and myisampack executables, specifically including setargv.obj.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WIN32)\n  TARGET_LINK_OPTIONS(myisamchk PRIVATE setargv.obj)\n  TARGET_LINK_OPTIONS(myisampack PRIVATE setargv.obj)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Specifying Keyring File Component Source Files\nDESCRIPTION: Defines the list of source files for the keyring_file component, organized by their functional areas such as encryption, key generation, loading, metadata handling, and I/O operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/keyring_file/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(KEYRING_FILE_SOURCE\n  # Encryption handling\n  service_implementation/keyring_encryption_service_definition.cc\n\n  # Generator handling\n  service_implementation/keyring_generator_service_definition.cc\n\n  # Keyring load handling\n  service_implementation/keyring_load_service_definition.cc\n\n  # Keys metadata iterator handling\n  service_implementation/keyring_keys_metadata_iterator_service_definition.cc\n\n  # Metadata query handling\n  service_implementation/keyring_metadata_query_service_definition.cc\n\n  # Reader handling\n  service_implementation/keyring_reader_service_definition.cc\n\n  # Writer handling\n  service_implementation/keyring_writer_service_definition.cc\n\n  # Backend handling\n  backend/backend.cc\n\n  # Config handling\n  config/config.cc\n\n  # Keyring file component handling\n  keyring_file.cc\n\n  # Component callbacks\n  component_callbacks.cc\n\n  option_usage.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TCMalloc Test Executables\nDESCRIPTION: Sets up various test executables for TCMalloc functionality including unit tests for core features, memory allocation, thread handling, and platform-specific tests. Each test target is configured with appropriate dependencies and compiler flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  set(tcmalloc_minimal_unittest_SOURCES\n          src/tests/tcmalloc_unittest.cc\n          src/tests/testutil.h src/tests/testutil.cc\n          ${TCMALLOC_UNITTEST_INCLUDES})\n  set(tcmalloc_minimal_unittest_LDADD\n          ${TCMALLOC_FLAGS} Threads::Threads logging)\n  add_executable(tcmalloc_minimal_unittest ${tcmalloc_minimal_unittest_SOURCES})\n  target_link_libraries(tcmalloc_minimal_unittest tcmalloc_minimal ${tcmalloc_minimal_unittest_LDADD})\n  add_test(tcmalloc_minimal_unittest tcmalloc_minimal_unittest)\n\n  # Additional test executables follow...\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Abseil Dependencies\nDESCRIPTION: Sets up a simple CMake project that creates an executable linked against the Abseil library. The configuration requires CMake 3.10 or higher, creates a C++ executable named 'simple' from simple.cc, and links it with Abseil's strings and config modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/install_test_project/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(absl_cmake_testing CXX)\n\nadd_executable(simple simple.cc)\n\nfind_package(absl REQUIRED)\n\ntarget_link_libraries(simple absl::strings absl::config)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Services Plugin in MySQL Makefile\nDESCRIPTION: This snippet adds the 'test_services' plugin for building. It leverages 'test_services.cc' and produces a shared module called 'libtest_services'. The plugin serves testing purposes only and follows conventions for module output naming. This setup helps integrate test services within MySQL for validation routines.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_services\n  test_services.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"libtest_services\\\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Dependencies and Debug Symbol Packages\nDESCRIPTION: Sets up SSL development dependencies for building MySQL and configures debug symbol package generation for Debian packages. This includes configurations for generating separate debug symbol packages for each MySQL component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Build with default ssl. May be overridden if we don't support default ssl version\nSET (DEB_CONTROL_BDEPS_SSL \",libssl-dev\")\n# Generate debug symbol packages (this is done automatically in Debian9+)\nSET (DEB_RULES_STRIP_DEFAULT\n\"\noverride_dh_strip:\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-server-core --dbg-package=mysql-${DEB_PRODUCTNAME}-server-core-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-client-core --dbg-package=mysql-${DEB_PRODUCTNAME}-client-core-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-server --dbg-package=mysql-${DEB_PRODUCTNAME}-server-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-server-debug --dbg-package=mysql-${DEB_PRODUCTNAME}-server-debug-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-client --dbg-package=mysql-${DEB_PRODUCTNAME}-client-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-test --dbg-package=mysql-${DEB_PRODUCTNAME}-test-dbgsym\n\tdh_strip -pmysql-${DEB_PRODUCTNAME}-test-debug --dbg-package=mysql-${DEB_PRODUCTNAME}-test-debug-dbgsym\n\tdh_strip -pmysql-server\n\tdh_strip -pmysql-client\n\tdh_strip -pmysql-testsuite\n\tdh_strip -plibmysqlclient24 --dbg-package=libmysqlclient24-dbgsym\n\tdh_strip -plibmysqlclient-dev\n\")\nSET (DEB_CONTROL_DBGSYM_DEFAULT\n\"\nPackage: libmysqlclient24-dbgsym\nArchitecture: any\nSection: debug\nDepends: libmysqlclient24 (=\\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for client library\n\nPackage: mysql-${DEB_PRODUCTNAME}-test-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-test (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for test suite\n\nPackage: mysql-${DEB_PRODUCTNAME}-test-debug-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-test-debug (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for test suite debug binaries\n\nPackage: mysql-${DEB_PRODUCTNAME}-client-core-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-client-core (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for client core\n\nPackage: mysql-${DEB_PRODUCTNAME}-server-core-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-server-core (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for server core\n\nPackage: mysql-${DEB_PRODUCTNAME}-server-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-server (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for server\n\nPackage: mysql-${DEB_PRODUCTNAME}-server-debug-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-server-debug (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for server debug binaries\n\nPackage: mysql-${DEB_PRODUCTNAME}-client-dbgsym\nArchitecture: any\nSection: debug\nDepends: mysql-${DEB_PRODUCTNAME}-client (= \\${binary:Version}), \\${misc:Depends}\nDescription: Debugging symbols for client\n\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Protocol Buffers\nDESCRIPTION: This snippet adds a custom command to generate header files for the MySQL X Protocol plugin using the Protocol Buffers compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT \"${MYSQLX_GENERATE_DIR}/xprotocol_tags.h\"\n         \"${MYSQLX_GENERATE_DIR}/encoding_descriptors.h\"\n  COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}\n  ARGS --plugin=protoc-gen-yplg=$<TARGET_FILE:xprotocol_plugin>\n       --yplg_out \"${MYSQLX_GENERATE_DIR}\"\n       -I \"${PROTOBUF_INCLUDE_DIR}\"\n       -I \"${MYSQLX_PROTOBUF_PROTO_DIR}\"\n       ${MYSQLX_PROTOBUF_PROTO_FILES}\n  DEPENDS\n  xprotocol_plugin\n  COMMENT \"Running protocol buffer plugin on all 'proto' files\"\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Lock Dependencies\nDESCRIPTION: This file defines lock dependency arcs between various mutex, rwlock, and sxlock components in MySQL Server. Each line represents a directed relationship from one lock to another, occasionally specifying an operation type (X for exclusive, S for shared).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/sql/Source_info::run_lock\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/sql/Source_info::run_lock\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\nARC FROM \"mutex/sql/Source_info::run_lock\" TO \"sxlock/innodb/rsegs_lock\" OP \"S\"\nARC FROM \"mutex/sql/Source_info::run_lock\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/sql/Source_info::run_lock\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/Source_IO_monitor::run_lock\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/innodb/dict_sys_mutex\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/innodb/dict_table_mutex\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/myisam/MYISAM_SHARE::intern_lock\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/mysys/KEY_CACHE::cache_lock\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/mysys/THR_LOCK_myisam\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"rwlock/mysys/SAFE_HASH::lock\" OP \"R\"\nARC FROM \"mutex/sql/TABLE_SHARE::LOCK_ha_data\" TO \"sxlock/innodb/dict_table_stats\" OP \"X\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/mysys/THR_LOCK::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/Gtid_state\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/key_mta_gaq_LOCK\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/LOCK_event_queue\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/LOCK_group_replication_connection_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/LOCK_item_func_sleep\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_binlog_end_pos\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/MYSQL_RELAY_LOG::LOCK_log_end_pos\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/Relay_log_info::log_space_lock\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/Relay_log_info::sleep_lock\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/Source_info::sleep_lock\"\nARC FROM \"mutex/sql/THD::LOCK_current_cond\" TO \"mutex/sql/Worker_info::jobs_lock\"\nARC FROM \"mutex/sql/THD::LOCK_query_plan\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_query_plan\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/group_rpl/LOCK_certifier_broadcast_dispatcher_run\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/srv_innodb_monitor_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/trx_sys_serialisation_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/innodb/trx_sys_shard_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/mysqlx/client_session_exit\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/mysqlx/server_client_exit\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/mysys/THR_LOCK::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/semisync/LOCK_binlog_\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/Gtid_state\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/key_mta_gaq_LOCK\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_admin_tls_ctx_options\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_authentication_policy\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_default_password_lifetime\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_event_queue\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_global_conn_mem_limit\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_group_replication_connection_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_item_func_sleep\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_keyring_operations\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_mandatory_roles\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_password_history\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_password_reuse_interval\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_prepared_stmt_count\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_replica_net_timeout\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_replica_trans_dep_tracker\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_sql_replica_skip_counter\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/LOCK_tls_ctx_options\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_binlog_end_pos\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/MYSQL_RELAY_LOG::LOCK_log_end_pos\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/Relay_log_info::log_space_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/Relay_log_info::sleep_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/Source_info::sleep_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/THD::LOCK_thd_sysvar\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"mutex/sql/Worker_info::jobs_lock\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/mysqlx/client_list_clients\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/session/LOCK_srv_session_collection\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/sql/gtid_commit_rollback\" OP \"W\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/sql/LOCK_sys_init_connect\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/sql/LOCK_sys_init_replica\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"sxlock/innodb/rsegs_lock\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_data\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_protocol\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_protocol\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_protocol\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/sql/THD::LOCK_thd_protocol\" TO \"rwlock/session/LOCK_srv_session_collection\" OP \"R\"\nARC FROM \"mutex/sql/THD::LOCK_thd_protocol\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/csv/TINA_SHARE::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/autoinc_persisted_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/dict_sys_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/dict_table_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/innobase_share_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/log_files_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/mysys/THR_LOCK::mutex\"\nARC FROM \"mutex/sql/THD::LOCK_thd_security_ctx\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Metadata Cache Plugin Build\nDESCRIPTION: Defines the build configuration for the REST metadata cache plugin, including source files, required dependencies, and installation destination. Sets up include directories for the plugin compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_metadata_cache/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_PLUGIN(rest_metadata_cache\n  SOURCES\n  rest_metadata_cache_config.cc\n  rest_metadata_cache_list.cc\n  rest_metadata_cache_plugin.cc\n  rest_metadata_cache_status.cc\n  rest_clusters_list.cc\n  rest_clusters_nodes.cc\n  REQUIRES\n  metadata_cache\n  http_server_lib\n  rest_api\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\")\n```\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(rest_metadata_cache\n  PUBLIC\n    ${PROJECT_SOURCE_DIR}/src/harness/include/\n    ${PROJECT_SOURCE_DIR}/src/router/include/\n    ${PROJECT_SOURCE_DIR}/src/metadata_cache/include/\n    ${PROJECT_SOURCE_DIR}/src/http/include/\n    ${CMAKE_CURRENT_BINARY_DIR}\n    )\n```\n\n----------------------------------------\n\nTITLE: MySQL Binary Log Lock Dependency Configuration\nDESCRIPTION: Defines directed graph edges (ARC) showing dependencies between different mutex locks and their operations in MySQL's binary logging system. Shows relationships between LOCK_index, LOCK_log, and LOCK_sync with other system mutexes and locks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_22\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"mutex/sql/MYSQL_BIN_LOG::LOCK_index\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/MYSQL_BIN_LOG::LOCK_index\" TO \"mutex/innodb/trx_mutex\"\n[...additional ARCs...]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routing Test Files with Google Test in CMake\nDESCRIPTION: Configures multiple routing test files with Google Test framework and their required library dependencies for integration testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/integration/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(test_file\n    test_routing_direct.cc\n    test_routing_router_require.cc\n    test_routing_sharing.cc\n    test_routing_sharing_constrained_pools.cc\n    test_routing_sharing_restart.cc\n    test_routing_splitting.cc\n    test_routing_tracing.cc\n    )\n  ADD_GOOGLETEST_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${test_file}\n    MODULE \"integration\"\n    LIB_DEPENDS\n    routertest_helpers\n    router_mysqlxclient\n    router_mysqlxmessages\n    mysql_protocol\n    )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library with CMake\nDESCRIPTION: Defines a static library named rest_api_lib for use in the MySQL project. It includes definitions to add source files, specify include directories, and link necessary libraries. This setup is essential for building and linking REST API utilities with other components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_api/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nADD_LIBRARY(rest_api_lib STATIC\n  rest_api_utils.cc\n)\nTARGET_INCLUDE_DIRECTORIES(rest_api_lib\n  PUBLIC\n    ${PROJECT_SOURCE_DIR}/src/harness/include/\n    ${CMAKE_CURRENT_SOURCE_DIR}/../include\n    )\nTARGET_LINK_LIBRARIES(rest_api_lib\n  PUBLIC\n  extra::rapidjson\n  http_server_lib  # http/server/request.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Language Directories in CMake\nDESCRIPTION: Iterates through the defined language directories and installs each one to the MySQL share directory. Uses CMAKE_BINARY_DIR as source and includes these as part of the Server component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/share/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH (dir ${dirs})\n  INSTALL(DIRECTORY ${CMAKE_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/${dir}\n    DESTINATION ${INSTALL_MYSQLSHAREDIR}\n    COMPONENT Server\n    )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Signal Flow for Metadata Copy in Node Startup (sp4)\nDESCRIPTION: This snippet shows the signal flow for copying metadata during the sp4 phase of node startup. It includes START_MEREQ, COPY_TABREQ, DICTSTARTREQ, GET_SCHEMA_INFOREQ, INCL_NODEREQ, and related signals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/DictLock.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDIH/s\n    START_MEREQ\n        DIH/m\n            COPY_TABREQ\n                DIH/s\n            COPY_TABCONF\n        DIH/m\n            DICTSTARTREQ\n                DICT/s\n                    GET_SCHEMA_INFOREQ\n                        DICT/m\n                    SCHEMA_INFO\n                DICT/s\n            DICTSTARTCONF\n        DIH/m\n            INCL_NODEREQ\n                DIH/a\n                    INCL_NODEREQ\n                        ANY/l\n                    INCL_NODECONF\n                DIH/a\n            INCL_NODECONF\n        DIH/m\n    START_MECONF\nDIH/s\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router Client Executable Build\nDESCRIPTION: Defines the build configuration for mysqlrouter_mrs_client executable including source files, component type, and required library dependencies. Links against various MySQL libraries and includes SSL support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/mrs_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlrouter_mrs_client\n  main.cc\n  client/http_client_request.cc\n  client/session.cc\n  client/authentication.cc\n  COMPONENT Test\n  LINK_LIBRARIES\n  PUBLIC http_client\n  PUBLIC harness-library\n  PUBLIC harness_tls\n  PUBLIC router_tls\n  PUBLIC mysql_rest_service_if\n  PUBLIC mysql_rest_service_helper\n  PUBLIC router_mysqlclient\n  ${SSL_LIBRARIES}\n  DEPENDENCIES\n  mysql_rest_service_if\n  )\n```\n\n----------------------------------------\n\nTITLE: Check C Compiler Flag\nDESCRIPTION: Macro to check if a specific C compiler flag is supported, with custom failure regex patterns to detect unsupported or invalid options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO (MY_CHECK_C_COMPILER_FLAG FLAG RESULT)\n  CMAKE_PUSH_CHECK_STATE()\n  STRING_APPEND(CMAKE_REQUIRED_FLAGS \" ${FLAG}\")\n  CHECK_C_SOURCE_COMPILES(\"int main(void) { return 0; }\" ${RESULT}\n    FAIL_REGEX \"unknown argument ignored\"\n    FAIL_REGEX \"argument unused during compilation\"\n    FAIL_REGEX \"unsupported .*option\"\n    FAIL_REGEX \"unknown .*option\"\n    FAIL_REGEX \"unrecognized .*option\"\n    FAIL_REGEX \"ignoring unknown option\"\n    FAIL_REGEX \"[Ww]arning: [Oo]ption\"\n    FAIL_REGEX \"error: visibility\"\n    FAIL_REGEX \"warning: visibility\"\n    )\n  CMAKE_POP_CHECK_STATE()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Container Tests\nDESCRIPTION: Defines test targets for container components including unordered maps/sets and hash tables. Each test target specifies source files, compiler options and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    raw_hash_set_test\n  SRCS\n    \"internal/raw_hash_set_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::container_memory\n    absl::core_headers\n    absl::flat_hash_map\n    absl::flat_hash_set\n    absl::hash_function_defaults\n    absl::hash_policy_testing\n    absl::hashtable_debug\n    absl::log\n    absl::prefetch\n    absl::raw_hash_set\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Flags for ICU\nDESCRIPTION: This CMake snippet configures compilation flags and settings specifically for building ICU within the MySQL server project. It handles warnings for deprecated enum conversions, additional definitions for Windows, special character encoding requirements for MSVC without BOM, and conditionally includes or excludes specific compiler flags based on the environment and platform. This is crucial for ensuring compatibility and performance across different build configurations and platforms, such as Windows with MSVC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# warning: arithmetic between different enumeration types is deprecated\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wdeprecated-enum-enum-conversion\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  LIST(APPEND ICU_LINUX_COMPILE_OPTIONS \"${HAS_WARN_FLAG}\")\nENDIF()\n\nIF(WIN32)\n  ADD_DEFINITIONS(\n    -DU_STATIC_IMPLEMENTATION=1\n    -DU_IMPORT=\n    -DU_EXPORT=\n  )\nENDIF()\n\nIF(MSVC AND NOT WIN32_CLANG)\n  # MSVC needs /utf-8 compiler switch if source file has no BOM\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /utf-8\")\nENDIF()\n\n#TODO(Bug#33986227): fix the deprecation for ICU\nIF(MSVC)\n  STRING_APPEND(CMAKE_C_FLAGS \" /wd4996\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4996\")\nENDIF()\n\nIF(WIN32_CLANG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-unused-function\")\nENDIF()\n\nIF(WITH_ICU STREQUAL \"bundled\")\n  REMOVE_CMAKE_COMPILER_FLAGS(CMAKE_C_FLAGS \"${MY_COMPILER_FLAG_FLTO}\")\n  REMOVE_CMAKE_COMPILER_FLAGS(CMAKE_CXX_FLAGS \"${MY_COMPILER_FLAG_FLTO}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Protobuf Tests for MySQL Change Streams\nDESCRIPTION: Checks if the project is built with protobuf extension support. If enabled, adds the protobuf-specific tests to the test list and includes additional required libraries for protobuf functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# If we are using the protobuf extensions\nIF (WITH_CS_PROTOBUF)\n  SET (TESTS\n    ${TESTS}\n    cs-test-mysql-proto-reader-mtr)\n\n  LIST(APPEND TEST_LINK_LIBRARIES\n    changestreams_pb_static ext::libprotobuf-lite)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library using CMake\nDESCRIPTION: This CMake command creates a static library named 'lz4_lib'. It uses source files located at the paths defined by `${BUNDLED_LZ4_PATH}`. These files include implementations of LZ4 compression, LZ4 frame handling, high compression LZ4, and the xxHash algorithm.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/lz4/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_STATIC_LIBRARY(lz4_lib\n  ${BUNDLED_LZ4_PATH}/lz4.c\n  ${BUNDLED_LZ4_PATH}/lz4frame.c\n  ${BUNDLED_LZ4_PATH}/lz4hc.c\n  ${BUNDLED_LZ4_PATH}/xxhash.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Flags for Solaris (CMake)\nDESCRIPTION: This snippet conditionally adds compiler flags for Solaris systems when using GNU or Clang compilers. Specifically, it disables the `-Wno-switch` warning for the source files listed in `XCOM_RPCGEN_SOURCES`. This is done to avoid false positives or compatibility issues with the generated RPC code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(SOLARIS AND (MY_COMPILER_IS_GNU_OR_CLANG))\n  ADD_COMPILE_FLAGS(${XCOM_RPCGEN_SOURCES} COMPILE_FLAGS \"-Wno-switch\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Generating Unit Test Executables\nDESCRIPTION: Creates executable targets for small and large unit tests, linking with necessary libraries and applying specific compile definitions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(merge_small_tests-t ${ALL_SMALL_TESTS}\n  ADD_TEST merge_small_tests\n  COMPILE_DEFINITIONS ${DISABLE_PSI_DEFINITIONS}\n  ENABLE_EXPORTS\n  LINK_LIBRARIES sqlgunitlib gunit_small extra::rapidjson extra::boost\n  )\n\nMYSQL_ADD_EXECUTABLE(merge_large_tests-t ${ALL_LARGE_TESTS}\n  ADD_TEST merge_large_tests\n  ENABLE_EXPORTS\n  LINK_LIBRARIES gunit_large server_unittest_library\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding testCopy Executable Target in CMake\nDESCRIPTION: Creates an executable target for testCopy using the NDB_ADD_EXECUTABLE custom command. This target is linked against the NDBCLIENT library and is not installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_EXECUTABLE(testCopy testCopy.cpp NDBCLIENT SKIP_INSTALL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven for Protocol Buffers\nDESCRIPTION: This snippet shows how to add a Maven dependency for the Protocol Buffers Java runtime. Required for using Protocol Buffers in a Maven-managed Java project. Ensure the protoc version matches or is newer than 3.24.4. Adds JSON support with the protobuf-java-util package.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/java/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.protobuf</groupId>\n  <artifactId>protobuf-java</artifactId>\n  <version>3.24.4</version>\n</dependency>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.protobuf</groupId>\n  <artifactId>protobuf-java-util</artifactId>\n  <version>3.24.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining NDB API Example Executables in CMake\nDESCRIPTION: Defines multiple executable targets for NDB API example programs. Each ADD_EXECUTABLE command creates a build target for a specific example, specifying the target name and source file path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# NdbApi examples\nADD_EXECUTABLE(ndb_ndbapi_array_simple\n  ndbapi_array_simple/ndbapi_array_simple.cpp)\nADD_EXECUTABLE(ndb_ndbapi_array_using_adapter\n  ndbapi_array_using_adapter/ndbapi_array_using_adapter.cpp)\nADD_EXECUTABLE(ndb_ndbapi_async ndbapi_async/ndbapi_async.cpp)\nADD_EXECUTABLE(ndb_ndbapi_async1 ndbapi_async1/ndbapi_async1.cpp)\nADD_EXECUTABLE(ndb_ndbapi_basic_connect ndbapi_basic/ndbapi_basic_connect.cpp)\nADD_EXECUTABLE(ndb_ndbapi_basic_delete ndbapi_basic/ndbapi_basic_delete.cpp)\nADD_EXECUTABLE(ndb_ndbapi_basic_insert ndbapi_basic/ndbapi_basic_insert.cpp)\nADD_EXECUTABLE(ndb_ndbapi_basic_read ndbapi_basic/ndbapi_basic_read.cpp)\nADD_EXECUTABLE(ndb_ndbapi_blob ndbapi_blob/ndbapi_blob.cpp)\nADD_EXECUTABLE(ndb_ndbapi_blob_ndbrecord ndbapi_blob_ndbrecord/main.cpp)\nADD_EXECUTABLE(ndb_ndbapi_event ndbapi_event/ndbapi_event.cpp)\nADD_EXECUTABLE(ndb_ndbapi_recattr_vs_record ndbapi_recattr_vs_record/main.cpp)\nADD_EXECUTABLE(ndb_ndbapi_retries ndbapi_retries/ndbapi_retries.cpp)\nADD_EXECUTABLE(ndb_ndbapi_s_i_ndbrecord ndbapi_s_i_ndbrecord/main.cpp)\nADD_EXECUTABLE(ndb_ndbapi_scan ndbapi_scan/ndbapi_scan.cpp)\nADD_EXECUTABLE(ndb_ndbapi_simple ndbapi_simple/ndbapi_simple.cpp)\nADD_EXECUTABLE(ndb_ndbapi_simple_dual ndbapi_simple_dual/main.cpp)\nADD_EXECUTABLE(ndb_ndbapi_simple_index ndbapi_simple_index/main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit API Message Emit Component in MySQL Server with CMake\nDESCRIPTION: This CMake snippet disables missing profile warnings and adds a new component called audit_api_message_emit to the MySQL build system. The component is built from a single source file (audit_api_message_emit.cc) and is marked as MODULE_ONLY, indicating it will be built as a standalone module.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/audit_api_message_emit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(audit_api_message_emit\n  audit_api_message_emit.cc\n  MODULE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Plugin Definition via CMake\nDESCRIPTION: This CMake code block uses the `MYSQL_ADD_PLUGIN` macro to define the rewriter plugin, specifying its source files, module-only status, output name, and Windows definition file. This ensures the plugin is built as a loadable module for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_PLUGIN(rewriter\n  rewriter.cc\n  rewriter_plugin.cc\n  rewriter_udf.cc\n  rule.cc\n  services.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"rewriter\"\n  WIN_DEF_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/rewriter_udf.def\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting TCMalloc CMake Arguments\nDESCRIPTION: This snippet sets the CMake arguments that will be passed to the TCMalloc's CMake configuration. It defines compiler settings, build options (like disabling static builds and testing), and the installation prefix.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TCMALLOC_CMAKE_ARGS\n  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n  -DGPERFTOOLS_BUILD_STATIC=OFF\n  -Dgperftools_build_benchmark=OFF\n  -Dgperftools_enable_libunwind=OFF\n  -DBUILD_TESTING=OFF\n  -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/tcmalloc\n  -DCMAKE_INSTALL_LIBDIR=${CMAKE_BINARY_DIR}/library_output_directory\n)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Zlib Support for Protobuf\nDESCRIPTION: Enables Zlib support for the Protobuf library by linking to the Zlib libraries available in the external directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET(protobuf_WITH_ZLIB ON CACHE INTERNAL \"\")\nSET(ZLIB_LIBRARIES ext::zlib)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags and Include Directories for XPlugin Tests in CMake\nDESCRIPTION: Adds compile flags to XPlugin test sources and includes Abseil headers for bundled Protobuf builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_COMPILE_FLAGS(${XPL_TEST_SRC}\n  COMPILE_FLAGS \"${MYSQLX_PROTOCOL_FLAGS}\"\n)\nIF(WITH_PROTOBUF STREQUAL \"bundled\")\n  TARGET_INCLUDE_DIRECTORIES(xplugin_unit_tests SYSTEM BEFORE PUBLIC\n    \"${BUNDLED_ABSEIL_SRCDIR}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Preventing installation of directory\nDESCRIPTION: This snippet prevents the installation of the `cbor` directory and its header files. It uses the `do_not_install` macro along with `FILES_MATCHING` to specify the pattern `*.h` to exclude all header files within the `cbor` directory from being installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ndo_not_install(DIRECTORY cbor DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n                FILES_MATCHING PATTERN \"*.h\")\n```\n\n----------------------------------------\n\nTITLE: Building Routing Connections Shared Library\nDESCRIPTION: Creates a shared library for routing connections used by both routing and connection_pool components. It specifies the output name and link libraries including harness_stdx, harness_tls, and mysql_protocol.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n## routing_connections is used by \"routing\" and \"connection_pool\"\nROUTER_ADD_SHARED_LIBRARY(routing_connections\n  channel.cc\n\n  OUTPUT_NAME \"mysqlrouter_routing_connections\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness_tls\n  mysql_protocol\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Random Distributions Library - C++\nDESCRIPTION: Defines a library encompassing various random distribution methods with relevant headers and necessary dependencies. It is essential for generating random numbers according to specified distributions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_distributions\n  SRCS\n    \"discrete_distribution.cc\"\n    \"gaussian_distribution.cc\"\n  HDRS\n    \"bernoulli_distribution.h\"\n    \"beta_distribution.h\"\n    \"discrete_distribution.h\"\n    \"distributions.h\"\n    \"exponential_distribution.h\"\n    \"gaussian_distribution.h\"\n    \"log_uniform_int_distribution.h\"\n    \"poisson_distribution.h\"\n    \"uniform_int_distribution.h\"\n    \"uniform_real_distribution.h\"\n    \"zipf_distribution.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::random_internal_generate_real\n    absl::random_internal_distribution_caller\n    absl::random_internal_fast_uniform_bits\n    absl::random_internal_fastmath\n    absl::random_internal_iostream_state_saver\n    absl::random_internal_traits\n    absl::random_internal_uniform_helper\n    absl::random_internal_wide_multiply\n    absl::strings\n    absl::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the mysqlgcs Static Library (CMake)\nDESCRIPTION: This snippet creates a static library named `mysqlgcs` using the source files defined in `XCOM_SOURCES` and `GCS_SOURCES`. It also links the library with `ext::xxhash` and `ext::lz4` libraries. `TARGET_LINK_LIBRARIES` is used to specify the dependencies of the `mysqlgcs` library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_LIBRARY(mysqlgcs STATIC ${XCOM_SOURCES} ${GCS_SOURCES})\nTARGET_LINK_LIBRARIES(mysqlgcs PRIVATE ext::xxhash ext::lz4)\n# Dependency on mysys from gcs_logging_system.cc\n# but pick up symbols from the server:\n# TARGET_LINK_LIBRARIES(mysqlgcs mysys)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Buffer Lite Library Generation for MySQL Server\nDESCRIPTION: Sets up variables and generates C++ code from Protocol Buffer definitions for MySQL Server's group replication features. It creates a lite version of the Protocol Buffer library and links it with the external libprotobuf-lite library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(${CMAKE_SOURCE_DIR}/cmake/protobuf.cmake)\n\nSET(PROTOBUF_LITE_LIB_NAME gr_protobuf_lite)\n\nSET(PROTOBUF_LITE_GENERATE_DIR ${GR_GENERATE_DIR}/protobuf_lite)\nFILE(MAKE_DIRECTORY ${PROTOBUF_LITE_GENERATE_DIR})\n\nSET(MY_PROTOBUF_PROTO_FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/replication_group_member_actions.proto\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/replication_group_recovery_metadata.proto\"\n)\n\nMYSQL_PROTOBUF_GENERATE_CPP_LIBRARY(\n  ${PROTOBUF_LITE_LIB_NAME}\n  ${MY_PROTOBUF_PROTO_FILES}\n  OUTPUT_DIRECTORY ${PROTOBUF_LITE_GENERATE_DIR}\n  ADDITIONAL_COMMENT \"- lite version\")\n\nTARGET_LINK_LIBRARIES(${PROTOBUF_LITE_LIB_NAME} PUBLIC ext::libprotobuf-lite)\n\nSET(GR_PROTOBUF_LITE_LIB ${PROTOBUF_LITE_LIB_NAME} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: DIH Node Response Process for LCP in MySQL Server\nDESCRIPTION: Process flow for DIH nodes when receiving LCP fragment reports and completion messages. This covers how DIH nodes handle fragment completion reporting, table descriptor saving, and communication back to the master DIH.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdih/LCP.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAll DIHs\n==========\n1) When receiving LCP_FRAG_REP\n   If all fragments & replicas done in table\n     1) Save Table descriptor\n     2) If all tables done + LCP_COMPLETE_REP(from lqh) has arrived\n        LCP_COMPLETE_REP -> master DIH \n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Data and Keyring Directories\nDESCRIPTION: Sets up the MySQL data and keyring directories, handling both absolute and relative paths. It uses cache variables to allow overriding during configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nIF(IS_ABSOLUTE ${INSTALL_MYSQLDATADIR})\n  SET(MYSQL_DATADIR ${INSTALL_MYSQLDATADIR} CACHE PATH\n    \"default MySQL data directory\")\nELSE()\n  SET(MYSQL_DATADIR \"${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLDATADIR}\" CACHE PATH\n    \"default MySQL data directory\")\nENDIF()\n\nIF(IS_ABSOLUTE ${INSTALL_MYSQLKEYRINGDIR})\n  SET(MYSQL_KEYRINGDIR ${INSTALL_MYSQLKEYRINGDIR} CACHE PATH\n    \"default MySQL keyring directory\")\nELSE()\n  SET(MYSQL_KEYRINGDIR \"${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLKEYRINGDIR}\"\n    CACHE PATH \"default MySQL keyring directory\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Libraries for MySQL Client on Visual Studio\nDESCRIPTION: Sets up debug targets for Visual Studio users. This ensures that debug versions of the libraries are installed for developers using Visual Studio to build applications that connect to MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC)\n  INSTALL_DEBUG_TARGET(mysqlclient DESTINATION ${INSTALL_LIBDIR}/debug)\n\n  INSTALL_DEBUG_TARGET(auth_win_client DESTINATION ${INSTALL_LIBDIR}/debug)\n  INSTALL_DEBUG_TARGET(clientlib DESTINATION ${INSTALL_LIBDIR}/debug)\n  INSTALL_DEBUG_TARGET(mysys DESTINATION ${INSTALL_LIBDIR}/debug)\n  INSTALL_DEBUG_TARGET(strings DESTINATION ${INSTALL_LIBDIR}/debug)\n  INSTALL_DEBUG_TARGET(vio DESTINATION ${INSTALL_LIBDIR}/debug)\n  IF(WITH_ZLIB STREQUAL \"bundled\")\n    INSTALL_DEBUG_TARGET(zlib DESTINATION ${INSTALL_LIBDIR}/debug)\n  ENDIF()\n  IF(WITH_ZSTD STREQUAL \"bundled\")\n    INSTALL_DEBUG_TARGET(zstd DESTINATION ${INSTALL_LIBDIR}/debug)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Script for Building and Running Abseil Tests with CMake\nDESCRIPTION: Shell commands demonstrating how to build and run Abseil tests using CMake with automatic Google Test integration. The script creates a build directory, configures CMake with testing enabled, and runs the tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/abseil-cpp\nmkdir build\ncd build\ncmake -DABSL_BUILD_TESTING=ON -DABSL_USE_GOOGLETEST_HEAD=ON ..\nmake -j\nctest\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Target Properties and Dependencies\nDESCRIPTION: Sets up target properties and links required libraries for the MySQL Server executable, including conditional LDAP linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nSET_TARGET_PROPERTIES(mysqld PROPERTIES ENABLE_EXPORTS TRUE)\nTARGET_LINK_LIBRARIES(mysqld\n  sql_main sql_gis binlog rpl rpl_source rpl_replica sql_dd mysys\n  minchassis mysql_binlog_event ext::icu)\n\nIF(WITH_VALGRIND)\n  SET(LINK_MYSQLD_LDAP_LIBRARY 1)\nENDIF()\nIF(WITH_SSL STREQUAL \"system\" AND\n    \"${OPENSSL_VERSION_MAJOR}.${OPENSSL_VERSION_MINOR}\" VERSION_LESS \"1.1\")\n  SET(LINK_MYSQLD_LDAP_LIBRARY 1)\nENDIF()\nIF(WITH_AUTHENTICATION_LDAP AND LINK_MYSQLD_LDAP_LIBRARY)\n  TARGET_LINK_LIBRARIES(mysqld ${LDAP_LIBRARY})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building MySQL REST Service JSON Library\nDESCRIPTION: Configures static library build for JSON-related functionality including response templates and nesting operations. Sets include directories and compilation definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nADD_STATIC_LIBRARY(mysql_rest_service_json\n  mrs/json/response_json_template.cc\n  mrs/json/json_template_factory.cc\n  mrs/json/json_template_unnest.cc\n  mrs/json/json_template_nest.cc\n  mrs/json/json_template_nest_without_outparams.cc\n\n  LINK_LIBRARIES\n  mysql_rest_service_if\n  harness-library\n  router_lib\n  http_common\n\n  INCLUDE_DIRECTORIES\n  PRIVATE\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n\n  COMPILE_DEFINITIONS\n  PRIVATE MYSQL_ROUTER_LOG_DOMAIN=\"mrs_json\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Testing System Restart - CMake\nDESCRIPTION: Defines an executable named 'testSystemRestart' for testing system restart functionality. It compiles from 'testSystemRestart.cpp', linking against NDBTEST, NDBCLIENT, and MYSQLCLIENT libraries to ensure comprehensive testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_EXECUTABLE(testSystemRestart testSystemRestart.cpp NDBTEST NDBCLIENT MYSQLCLIENT)\n```\n\n----------------------------------------\n\nTITLE: Configuring xxHash Library Interface in CMake for MySQL Server\nDESCRIPTION: Sets up an interface library for xxHash and creates an alias for external usage. It defines the version and path of the bundled xxHash library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/xxhash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(xxhash_interface INTERFACE)\nTARGET_LINK_LIBRARIES(xxhash_interface INTERFACE xxhash_lib)\nADD_LIBRARY(ext::xxhash ALIAS xxhash_interface)\n\nSET(XXHASH_VERSION_DIR \"xxHash-0.8.3\")\nSET(BUNDLED_XXHASH_PATH\n  \"${CMAKE_SOURCE_DIR}/extra/xxhash/${XXHASH_VERSION_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Server Plugin in CMake\nDESCRIPTION: Defines the `http_server` plugin, including source files and requiring various libraries such as `http_server_lib` and `http_auth_realm_lib`. Specifies installation paths for necessary components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(http_server\n  SOURCES\n  http_server_plugin.cc\n  static_files.cc\n  REQUIRES\n    router_utils\n    http_common\n    http_auth_realm_lib\n    http_server_lib\n    ${LIBRT}\n    harness_stdx\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n\nTARGET_INCLUDE_DIRECTORIES(http_server\n  PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Configurations\nDESCRIPTION: Sets up lists of small and large unit tests for MySQL server, with conditional handling for specific platforms and compiler versions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS\n  alignment\n  bitmap\n  bounds_checked_array\n  byteorder\n  # ... multiple test entries\n)\n\nSET(SERVER_TESTS\n  authentication_policy\n  bgc_ticket_manager\n  character_set_deprecation\n  # ... multiple server test entries\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executables for InnoDB Tests\nDESCRIPTION: Defines an executable target for the InnoDB tests by referencing the previously defined source files, linking against necessary libraries for unit testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(merge_innodb_tests-t ${ALL_INNODB_TESTS}\n  ENABLE_EXPORTS\n  ADD_TEST merge_innodb_tests-t\n  LINK_LIBRARIES gunit_large server_unittest_library\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component in C\nDESCRIPTION: This snippet utilizes the MYSQL_ADD_COMPONENT macro to register the example performance schema components within the MySQL server. The components include source files for population, continent, and country, designated for use only in module and test scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/pfs_component/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nMYSQL_ADD_COMPONENT(pfs_example_component_population\n  pfs_example_component_population.cc\n  pfs_example_continent.cc\n  pfs_example_country.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Building ICU I18N Library (icui18n)\nDESCRIPTION: Creates the icui18n static library from ICU_I18N_SOURCES and sets necessary compile definitions and include directories. This library contains internationalization functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(icui18n STATIC ${ICU_I18N_SOURCES})\nTARGET_COMPILE_DEFINITIONS(icui18n PRIVATE -DU_I18N_IMPLEMENTATION)\nTARGET_INCLUDE_DIRECTORIES(icui18n PRIVATE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${ICU_VERSION_DIR}/source/common\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${ICU_VERSION_DIR}/source/i18n\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Unit Test Target\nDESCRIPTION: Defines a custom CMake target for running unit tests with parallel execution, progress tracking, and configurable timeout settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(\n  test-unit\n  COMMAND ${CTEST_EXECUTABLE}\n  --output-on-failure\n  --parallel ${CORES}\n  --progress\n  --timeout ${TIMEOUT}\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  USES_TERMINAL\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL System Source Files\nDESCRIPTION: Defines the comprehensive list of source files to be included in the mysys library, which provides various system-level functionalities for MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MYSYS_SOURCES\n  base64_encode.cc\n  charset.cc\n  dbug.cc\n  decimal.cc\n  errors.cc\n  escape_string.cc\n  lf_alloc-pin.cc\n  lf_dynarray.cc\n  lf_hash.cc\n  list.cc\n  mf_arr_appstr.cc\n  mf_cache.cc\n  mf_dirname.cc\n  mf_fn_ext.cc\n  mf_format.cc\n  mf_iocache2.cc\n  mf_iocache.cc\n  mf_keycache.cc\n  mf_keycaches.cc\n  mf_loadpath.cc\n  mf_pack.cc\n  mf_path.cc\n  mf_same.cc\n  mf_tempdir.cc\n  mf_tempfile.cc\n  mf_unixpath.cc\n  mf_wcomp.cc\n  mulalloc.cc\n  my_access.cc\n  my_aligned_malloc.cc\n  my_alloc.cc\n  my_bitmap.cc\n  my_chmod.cc\n  my_chsize.cc\n  my_compare.cc\n  my_compress.cc\n  my_copy.cc\n  my_create.cc\n  my_delete.cc\n  my_error.cc\n  my_fallocator.cc\n  my_file.cc\n  my_fopen.cc\n  my_fstream.cc\n  my_gethwaddr.cc\n  my_getwd.cc\n  my_init.cc\n  my_lib.cc\n  my_malloc.cc\n  my_mess.cc\n  my_mkdir.cc\n  my_mmap.cc\n  my_murmur3.cc\n  my_once.cc\n  my_open.cc\n  my_pread.cc\n  my_rdtsc.cc\n  my_read.cc\n  my_rename.cc\n  my_rm_dir_w_symlink.cc\n  my_seek.cc\n  my_static.cc\n  my_string.cc\n  my_symlink2.cc\n  my_symlink.cc\n  my_sync.cc\n  my_syslog.cc\n  my_thread.cc\n  my_thr_init.cc\n  my_user.cc\n  my_version.cc\n  my_write.cc\n  pack.cc\n  print_version.cc\n  psi_noop.cc\n  ptr_cmp.cc\n  stacktrace.cc\n  str2int.cc\n  strcont.cc\n  strmake.cc\n  strxmov.cc\n  strxnmov.cc\n  thr_cond.cc\n  thr_lock.cc\n  thr_mutex.cc\n  thr_rwlock.cc\n  tree.cc\n  typelib.cc\n  unhex.cc\n  keyring_operations_helper.cc\n  stream_cipher.cc\n  # From deleted mysys_ssl library\n  crypt_genhash_impl.cc\n  my_default.cc\n  my_getopt.cc\n  my_kdf.cc\n  my_aes.cc\n  my_sha1.cc\n  my_sha2.cc\n  my_md5.cc\n  my_rnd.cc\n  my_openssl_fips.cc\n  my_ssl_algo_cache.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Generating JA_HANS Table\nDESCRIPTION: This snippet adds a custom command to generate the Japanese UCA9 table. It uses the `uca9dump` executable to convert the source file (`JA_HANS_SRC_FILE`) into a C++ source file (`JA_HANS_DST_FILE`). The `DEPENDS` keyword ensures that the command is executed only when the source file or the `uca9dump` executable is updated.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${JA_HANS_DST_FILE}\n  COMMAND uca9dump ja\n  --in_file=${JA_HANS_SRC_FILE}\n  --out_file=${JA_HANS_DST_FILE}\n  DEPENDS uca9dump ${JA_HANS_SRC_FILE}\n  )\nADD_CUSTOM_TARGET(strings_ja_hans DEPENDS ${JA_HANS_DST_FILE})\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix-specific Settings for MySQL Server\nDESCRIPTION: This large snippet configures various Unix-specific settings for MySQL Server, including shell path, process finding commands, and user settings. It handles different Unix variants like Linux and Solaris.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  # SHELL_PATH, FIND_PROC, CHECK_PID are used by mysqld_safe\n  IF(SOLARIS)\n    SET (SHELL_PATH \"/bin/bash\")\n  ELSE()\n    SET (SHELL_PATH \"/bin/sh\")\n  ENDIF()\n\n  IF(LINUX)\n    SET (FIND_PROC\n      \"ps wwwp $PID | grep -v mysqld_safe | grep -- $MYSQLD > /dev/null\")\n  ENDIF()\n  IF(SOLARIS)\n    SET (FIND_PROC\n      \"ps -p $PID | grep -v mysqld_safe | grep -- $MYSQLD > /dev/null\")\n  ENDIF()\n\n  IF(NOT FIND_PROC)\n    # BSD style\n    EXECUTE_PROCESS(COMMAND ps -uaxww\n      OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE result)\n    IF(result MATCHES 0)\n      SET( FIND_PROC\n        \"ps -uaxww | grep -v mysqld_safe | grep -- $MYSQLD | grep $PID > /dev/null\")\n    ENDIF()\n  ENDIF()\n\n  IF(NOT FIND_PROC)\n    # SysV style\n    EXECUTE_PROCESS(COMMAND ps -ef\n      OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE result)\n    IF(result MATCHES 0)\n      SET( FIND_PROC \"ps -ef | grep -v mysqld_safe | grep -- $MYSQLD | grep $PID > /dev/null\")\n    ENDIF()\n  ENDIF()\n\n  EXECUTE_PROCESS(COMMAND sh -c \"kill -0 $$\"\n    OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE result)\n  IF(result MATCHES 0)\n    SET(CHECK_PID \"kill -0 $PID > /dev/null 2> /dev/null\")\n  ELSE()\n    SET(CHECK_PID \"kill -s SIGCONT $PID  > /dev/null 2> /dev/null\")\n  ENDIF()\n\n  SET(MYSQLD_USER \"mysql\")\n  SET(MYSQLROUTER_USER \"mysqlrouter\")\n\nENDIF(UNIX)\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthn Client Plugin in MySQL CMake Build System\nDESCRIPTION: Adds the WebAuthn client authentication plugin to the MySQL build system with MYSQL_ADD_PLUGIN. Specifies source files, required libraries, and module properties. The plugin requires FIDO and OpenSSL Crypto libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/authentication_webauthn/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(authentication_webauthn_client\n  webauthn_registration.cc\n  webauthn_assertion.cc\n  webauthn_client_plugin.cc\n  LINK_LIBRARIES\n  fido_client_common\n  ext::fido\n  OpenSSL::Crypto  # Needs RAND_bytes from libcrypto.\n  CLIENT_ONLY\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"authentication_webauthn_client\")\n```\n\n----------------------------------------\n\nTITLE: Linking MySQL Libraries to Example Programs\nDESCRIPTION: Sets up a list of all example programs and then iterates through them to apply common configuration. Each program has exports enabled and is linked against both the MySQL client library and NDB client shared library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Link each example program with both ndbclient and mysql libraries\nSET(EXAMPLES\n  ndb_ndbapi_array_simple\n  ndb_ndbapi_array_using_adapter\n  ndb_ndbapi_async\n  ndb_ndbapi_async1\n  ndb_ndbapi_basic_connect\n  ndb_ndbapi_basic_delete\n  ndb_ndbapi_basic_insert\n  ndb_ndbapi_basic_read\n  ndb_ndbapi_blob\n  ndb_ndbapi_blob_ndbrecord\n  ndb_ndbapi_event\n  ndb_ndbapi_recattr_vs_record\n  ndb_ndbapi_retries\n  ndb_ndbapi_s_i_ndbrecord\n  ndb_ndbapi_scan\n  ndb_ndbapi_simple\n  ndb_ndbapi_simple_dual\n  ndb_ndbapi_simple_index\n\n  ndb_mgmapi_logevent\n  ndb_mgmapi_logevent2\n)\nFOREACH(EXAMPLE ${EXAMPLES})\n  SET_TARGET_PROPERTIES(${EXAMPLE} PROPERTIES ENABLE_EXPORTS TRUE)\n  TARGET_LINK_LIBRARIES(${EXAMPLE} libmysql)\n  TARGET_LINK_LIBRARIES(${EXAMPLE} ndbclient_so)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of Native Password Plugin\nDESCRIPTION: If the `ROUTER_INSTALL_LAYOUT` is set to `STANDALONE` and the `mysql_native_password` target exists, this snippet adds a preprocessor definition and installs the `mysql_native_password` plugin to the Router's plugin directory.  It skips creating a symlink.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(ROUTER_INSTALL_LAYOUT STREQUAL \\\"STANDALONE\\\")\n  IF(TARGET mysql_native_password)\n    ADD_DEFINITIONS(-DROUTER_CLIENT_PLUGINS_ARE_BUNDLED)\n    # install libmysqlclient's mysql_native_password client plugin\n    # into the Router's plugin-dir.\n\n    INSTALL(TARGETS mysql_native_password\n      RUNTIME DESTINATION ${ROUTER_INSTALL_PLUGINDIR}\n      LIBRARY DESTINATION ${ROUTER_INSTALL_PLUGINDIR}\n      COMPONENT Router\n      NAMELINK_SKIP\n      )\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Various Protocol Libraries and Directories\nDESCRIPTION: This code snippet sets variables for protocol libraries and include directories related to MySQLX, allowing these values to be accessible in parent scopes. This is crucial for organizing header files and linking libraries during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MYSQLX_PROTOCOL_FULL_LIB ${MYSQLX_PROTOCOL_FULL_LIB} PARENT_SCOPE)\nSET(MYSQLX_PROTOCOL_INCLUDE_DIR ${MYSQLX_PROTOCOL_INCLUDE_DIR} PARENT_SCOPE)\nSET(MYSQLX_PROTOCOL_LITE_LIB ${MYSQLX_PROTOCOL_LITE_LIB} PARENT_SCOPE)\nSET(MYSQLX_PROTOBUF_PROTO_DIR ${MYSQLX_PROTOBUF_PROTO_DIR} PARENT_SCOPE)\nSET(MYSQLX_PROTOBUF_PROTO_FILES ${MYSQLX_PROTOBUF_PROTO_FILES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Transaction Flow in Pseudocode\nDESCRIPTION: This pseudocode outlines the transaction flow in MySQL, including parsing, preparing, committing, and aborting operations. It details the process for handling errors and rolling back to savepoints.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/wl3600.txt#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n1) BEGIN REQ\n\n### Parse phase\n\n2) OP (e.g create table) from API, Savepoint X\n3) OP::parse *on master*\n   if error\n   then\n      OP::abortParse\n      reply ref\n      goto 2\n    if\n4) OP::parse on *slaves*\n5) if error\n   then\n     goto 7\n   fi\n\n6) OP::subops (will create new OP i.e goto 2)\n\n### Rollback SP\n\n7) call OP::abortParse on all parsed operations *backwards* until SP\n   reply ref\n   goto 2\n\n### Prepare\n\n8) call OP::prepare() on each operation *forwards*\n   if error\n   then\n     goto 9\n   else\n     goto 12\n   fi\n\n### Abort\n\n9) call OP::abortPrepare on each *prepared* operation *backwards*\n10 call OP::abortParse on each operation *backwards*\n11) reply ref\n\n#### Commit\n\n12) call OP::commit on each operation *forwards*\n\n13) reply conf\n```\n\n----------------------------------------\n\nTITLE: Case Conversion Functions for MySQL Strings\nDESCRIPTION: Core string case conversion functions that handle both null-terminated and length-specified strings. Includes functions for converting strings to uppercase and lowercase with different parameter variations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ncaseup_str  // converts 0-terminated string to uppercase\ncasedn_str  // converts 0-terminated string to lowercase\ncaseup      // converts string to lowercase using length\ncasedn      // converts string to lowercase using length\n```\n\n----------------------------------------\n\nTITLE: Building MyISAM Library and Plugin in CMake\nDESCRIPTION: This snippet defines the MyISAM library as a static library, sets its dependencies, and creates the MyISAM plugin. It links the library with mysys and rapidjson.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(myisam_library STATIC ${MYISAM_SOURCES})\nADD_DEPENDENCIES(myisam_library GenError)\nTARGET_LINK_LIBRARIES(myisam_library mysys extra::rapidjson)\n\nMYSQL_ADD_PLUGIN(myisam ha_myisam.cc\n  STORAGE_ENGINE\n  MANDATORY\n  LINK_LIBRARIES myisam_library\n)\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Cluster Plugin to MySQL\nDESCRIPTION: Configures the NDB Cluster plugin as a static storage engine for MySQL, linking it with the necessary libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(ndbcluster ${NDBCLUSTER_SOURCES} STORAGE_ENGINE\n  DEFAULT STATIC_ONLY\n  LINK_LIBRARIES\n  ndbclient_static\n  extra::rapidjson\n  extra::unordered_dense\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackhole Storage Engine Plugin in CMake\nDESCRIPTION: Adds the Blackhole storage engine as a plugin to the MySQL server build. The configuration specifies that it's a default legacy engine and links against the RapidJSON and Zlib libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/blackhole/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(blackhole ha_blackhole.cc\n  DEFAULT_LEGACY_ENGINE STORAGE_ENGINE\n  LINK_LIBRARIES extra::rapidjson ext::zlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining XXHash Symbol Namespace for ZSTD\nDESCRIPTION: Adds a definition to hide XXHash symbols by setting the XXHash namespace to ZSTD_, which prevents symbol collisions when linking with other libraries that might also use XXHash.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Always hide XXHash symbols\nADD_DEFINITIONS(-DXXH_NAMESPACE=ZSTD_)\n```\n\n----------------------------------------\n\nTITLE: Building Routing Frontend Static Library\nDESCRIPTION: Creates a static library for routing frontend functionalities with necessary include directories and dependencies. It links with the harness_stdx library and sets up both private and public include paths.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(routing_frontend_lib STATIC\n  routing.cc\n)\n\nTARGET_LINK_LIBRARIES(routing_frontend_lib\n  PUBLIC\n  harness_stdx)\n\nTARGET_INCLUDE_DIRECTORIES(\n  routing_frontend_lib\nPRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\nPUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../router/include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../../router/include/\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Algorithm Library in CMake\nDESCRIPTION: Configures the main Abseil algorithm library target. It specifies the library name, header files, compilation options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/algorithm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    algorithm\n  HDRS\n    \"algorithm.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MyISAM Source Files in CMake\nDESCRIPTION: This snippet lists all the source files that make up the MyISAM storage engine implementation. It includes files for core functionality, full-text search, and various MyISAM operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MYISAM_SOURCES\n  # Originally part of mysys.\n  array.cc\n  my_lock.cc\n  my_redel.cc\n  queues.cc\n  # Implementation of myisam storage engine.\n  ft_boolean_search.cc\n  ft_nlq_search.cc\n  ft_parser.cc\n  ft_static.cc\n  ft_stopwords.cc\n  ft_update.cc\n  mi_cache.cc\n  mi_changed.cc\n  mi_check.cc\n  mi_checksum.cc\n  mi_close.cc\n  mi_create.cc\n  mi_dbug.cc\n  mi_delete.cc\n  mi_delete_all.cc\n  mi_delete_table.cc\n  mi_dynrec.cc\n  mi_extra.cc\n  mi_info.cc\n  mi_key.cc\n  mi_keycache.cc\n  mi_locking.cc\n  mi_log.cc\n  mi_open.cc\n  mi_packrec.cc\n  mi_page.cc\n  mi_panic.cc\n  mi_preload.cc\n  mi_range.cc\n  mi_rename.cc\n  mi_rfirst.cc\n  mi_rkey.cc\n  mi_rlast.cc\n  mi_rnext.cc\n  mi_rnext_same.cc\n  mi_rprev.cc\n  mi_rrnd.cc\n  mi_rsame.cc\n  mi_rsamepos.cc\n  mi_scan.cc\n  mi_search.cc\n  mi_static.cc\n  mi_statrec.cc\n  mi_unique.cc\n  mi_update.cc\n  mi_write.cc\n  rt_index.cc\n  rt_key.cc\n  rt_mbr.cc\n  rt_split.cc\n  sort.cc\n  sp_key.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL RPM Spec File for Linux in CMake\nDESCRIPTION: This CMake script checks if the build is for Linux, sets the spec filename, and configures the spec file template. It only processes on Linux systems and generates the spec file in the current binary directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-fedora/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  RETURN()\nENDIF()\n\nSET(SPECFILENAME \"mysql.spec\")\n\n# Left in current directory, to be taken during build\nCONFIGURE_FILE(mysql.spec.in ${CMAKE_CURRENT_BINARY_DIR}/${SPECFILENAME} @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Running ZSTD CLI for Compression\nDESCRIPTION: Shows the basic command format for using the ZSTD command line interface to compress files. The CLI takes an input file and compresses it to an output file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/zstd-1.5.5/lib/dll/example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nUsage: zstd [arg] [input] [output]\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB API Library Build in CMake\nDESCRIPTION: Defines the build configuration for the ndbapi convenience library including source files and dependencies. Sets include directories and links against the zlib external library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi)\n\nADD_CONVENIENCE_LIBRARY(ndbapi\n  AssembleFragments.cpp\n  ClusterMgr.cpp\n  DictCache.cpp\n  Ndb.cpp\n  NdbApiSignal.cpp\n  NdbBlob.cpp\n  NdbDictionary.cpp\n  NdbDictionaryImpl.cpp\n  NdbErrorOut.cpp\n  NdbEventOperation.cpp\n  NdbEventOperationImpl.cpp\n  NdbIndexOperation.cpp\n  NdbIndexStat.cpp\n  NdbIndexStatImpl.cpp\n  NdbInfo.cpp\n  NdbInfoScanNodes.cpp\n  NdbInfoScanVirtual.cpp\n  NdbInterpretedCode.cpp\n  NdbOperation.cpp\n  NdbOperationDefine.cpp\n  NdbOperationExec.cpp\n  NdbOperationInt.cpp\n  NdbOperationSearch.cpp\n  NdbPool.cpp\n  NdbPoolImpl.cpp\n  NdbQueryBuilder.cpp\n  NdbQueryOperation.cpp\n  NdbRecAttr.cpp\n  NdbReceiver.cpp\n  NdbScanFilter.cpp\n  NdbScanOperation.cpp\n  NdbTransaction.cpp\n  NdbTransactionScan.cpp\n  NdbUtil.cpp\n  NdbWaitGroup.cpp\n  Ndberr.cpp\n  Ndbif.cpp\n  Ndbinit.cpp\n  Ndblist.cpp\n  ObjectMap.cpp\n  SignalSender.cpp\n  SectionIterators.cpp\n  TransporterFacade.cpp\n  WakeupHandler.cpp\n  ndb_cluster_connection.cpp\n  ndb_internal.cpp\n  ndberror.cpp\n  trp_buffer.cpp\n  trp_client.cpp\n  trp_node.cpp\n  LINK_LIBRARIES ext::zlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing an Alternative Blocking Start Function with wait_for_stop() in C++\nDESCRIPTION: This C++ code snippet shows an alternative to using `is_running()`. The `wait_for_stop()` function will block until the Harness initiates shutdown. This approach is functionally equivalent to checking `is_running()` in a loop with potential sleeps or timeouts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nwhile (is_running())\n    {\n      // sleep a little or break on timeout\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Authentication for MySQL\nDESCRIPTION: Adds Windows Native Authentication support when building on Windows platforms, including necessary definitions and library linkage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  ADD_DEFINITIONS(-DAUTHENTICATION_WIN)\n  TARGET_LINK_LIBRARIES(sql_main auth_win_client)\n  IF(OPENSSL_APPLINK_C)\n    MY_ADD_COMPILE_DEFINITIONS(\n      ../sql-common/client_authentication.cc\n      COMPILE_DEFINITIONS HAVE_OPENSSL_APPLINK_C)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NDBD Executable Configuration\nDESCRIPTION: Defines build configuration for the ndbd (NDB Data Node) executable, including source files, dependencies, and installation settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndbd\n  ${NDBD_EXTRA_SRC}\n  SimBlockList.cpp\n  angel.cpp\n  main.cpp\n  ndbd.cpp\n\n  DESTINATION ${INSTALL_SBINDIR}\n  COMPONENT ClusterDataNode\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ${NDBD_LIBS} ndbsched ${LIBDL}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Home Directory in CMake\nDESCRIPTION: Sets the default MySQL home directory based on the operating system. For Windows, it uses a Program Files path, while for other systems it uses the CMAKE_INSTALL_PREFIX.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET(DEFAULT_MYSQL_HOME \"C:/Program Files/MySQL/MySQL Server ${MYSQL_BASE_VERSION}\" )\n  SET(SHAREDIR share)\nELSE()\n  SET(DEFAULT_MYSQL_HOME ${CMAKE_INSTALL_PREFIX})\n  SET(SHAREDIR ${DEFAULT_MYSQL_HOME}/${INSTALL_MYSQLSHAREDIR})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Compiling libcbor from Source\nDESCRIPTION: This snippet demonstrates how to compile the libcbor library from the source using cmake and make. It is designed to assist in setting up the libcbor environment for development purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/PJK/libcbor\ncmake -DCMAKE_BUILD_TYPE=Release libcbor\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Commands and Parameters for MySQL Server Testing\nDESCRIPTION: This script defines multiple test commands with specific parameters, timeouts, and arguments. It covers a variety of test cases including deferred errors, mixed loads, backup operations, basic functionality tests, index operations, and scan tests. Each test has a maximum execution time and specific test arguments.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 1800\ncmd: testIndex\nargs: -n DeferredError\n\nmax-time: 900\ncmd: testIndex\nargs: -n DeferredMixedLoad T1 T6 T13\n\nmax-time: 2000\ncmd: testIndex\nargs: -n DeferredMixedLoadError --skip-ndb-optimized-node-selection T1 T6 T13\n\nmax-time: 900\ncmd: testIndex\nargs: -n NF_DeferredMixed T1 T6 T13\n\nmax-time: 1800\ncmd: testIndex\nargs: -n NF_Mixed T1 T6 T13\n\nmax-time: 900\ncmd: testBasic\nargs: -r 5000 -n 899 T15 D1 D2\n\nmax-time: 600\ncmd: testBackup\nargs: -n NFMaster T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n NFMasterAsSlave T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n NFSlave T1 \n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n FailMaster T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n FailMasterAsSlave T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n FailSlave T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n BackupOne T1 T6 I3 D2\n\nmax-time: 600\ncmd: testBackup\nargs: -n BackupDDL T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n Bug57650 T1\n\n# Bug18379657 added on 17.04.2014\n#max-time: 1000\n#cmd: testBackup\n#args: -n BackupBank T6\n#\n# BASIC FUNCTIONALITY\nmax-time: 500\ncmd: testBasic\nargs: -n PkRead\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkSimpleRead\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkDirtyRead\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkUpdate \n\nmax-time: 500\ncmd: testBasic\nargs: -n PkDelete \n\nmax-time: 500\ncmd: testBasic\nargs: -n PkInsert \n\nmax-time: 660\ncmd: testBasic\nargs: -n UpdateAndRead \n\nmax-time: 500\ncmd: testBasic\nargs: -n DeleteRead\n\nmax-time: 500\ncmd: testSpj\nargs: -n LookupJoin\n\nmax-time: 500\ncmd: testSpj\nargs: -n ScanJoin\n\nmax-time: 500\ncmd: testSpj\nargs: -n MixedJoin\n\nmax-time: 500\ncmd: testSpj\nargs: -n FeatureDisabled T1\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkReadAndLocker T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkReadAndLocker2 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkReadUpdateAndLocker T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n ReadWithLocksAndInserts T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n PkInsertTwice T1 T6 D1 D2\n\nmax-time: 1500\ncmd: testBasic\nargs: -n Fill T13 \n\n# Bug18408665 added on 17.04.2014\n#max-time: 1500\n#cmd: testBasic\n#args: -n Fill T6 \n#\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommitSleep T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommitAndClose T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n Commit626 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n CommitTry626 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n CommitAsMuch626 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommit626 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommitRollback626 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n Commit630 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n CommitTry630 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n CommitAsMuch630 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommit630 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommitRollback630 T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n NoCommitAndClose T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n RollbackUpdate T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n RollbackDeleteMultiple T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n ImplicitRollbackDelete T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n CommitDelete T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasic\nargs: -n RollbackNothing T1 T6 D1 D2 \n\nmax-time: 500\ncmd: testBasicAsynch\nargs: -n PkInsertAsynch \n\nmax-time: 500\ncmd: testBasicAsynch\nargs: -n PkReadAsynch \n\nmax-time: 500\ncmd: testBasicAsynch\nargs: -n PkUpdateAsynch \n\nmax-time: 500\ncmd: testBasicAsynch\nargs: -n PkDeleteAsynch \n\nmax-time: 1000\ncmd: testBasic\nargs: -n MassiveRollback T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n MassiveRollback2 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n MassiveRollback3 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n MassiveRollback4 T1 T6 D1 D2\n\nmax-time: 500\ncmd: testBasic\nargs: -n TupError\n\nmax-time: 500\ncmd: testBasic\nargs: -n InsertError T1\n\nmax-time: 500\ncmd: testBasic\nargs: -n InsertError2 T1\n\n# Bug18401439 added on 17.04.2014\n#max-time: 600\n#cmd: testTimeout\n#args: T1\n#\nmax-time: 500\ncmd: testBasic\nargs: -n Bug25090 T1\n\nmax-time: 1000\ncmd: testBasic\nargs: -n Bug27756\n\nmax-time: 500\ncmd: testBasic\nargs: -n Bug28073\n\nmax-time: 500\ncmd: testBasic\nargs: -n Bug20535\n\nmax-time: 500\ncmd: testBasic\nargs: -n Bug54944 T1\n\nmax-time: 500\ncmd: testBasic\nargs: -n Bug54944DATABUFFER T1\n\nmax-time: 600\ncmd: testBasic\nargs: -r 10 -n Bug59496_case1 T2\n\nmax-time: 600\ncmd: testBasic\nargs: -r 10 -n Bug59496_case2 T2\n\n#\n# INDEX\n#\nmax-time: 1500\ncmd: testIndex\nargs: -n CreateAll T1 T13 T14\n\nmax-time: 3600\ncmd: testIndex\nargs: -n InsertDelete T1 \n\nmax-time: 3600\ncmd: testIndex\nargs: -n CreateLoadDrop T1 \n\nmax-time: 500\ncmd: testIndex\nargs: -n MixedTransaction T1 \n\nmax-time: 2500\ncmd: testIndex\nargs: -n BuildDuring T6 \n\nmax-time: 2500\ncmd: testIndex\nargs: -n BuildDuring_O T6 \n\nmax-time: 600\ncmd: testIndex\nargs: -n Bug46069 T1\n\nmax-time: 600\ncmd: testIndex\nargs: -n Bug50118 T1\n\nmax-time: 300\ncmd: testIndex\nargs: -n FireTrigOverload T1\n\nmax-time: 500\ncmd: testIndex\nargs: -n Bug25059 -r 3000 T1\n\nmax-time: 2500\ncmd: testIndex\nargs: -l 2 -n SR1 T6 T13 \n\nmax-time: 2500\ncmd: testIndex\nargs: -l 2 -n SR1_O T6 T13 \n\n#\n# SCAN TESTS\n#\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead16 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead240 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadCommitted240 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanUpdate \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanUpdate2 T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanDelete \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanDelete2 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanUpdateAndScanRead T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadAndLocker T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadAndPkRead T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead488 -l 10 T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead488O -l 10 T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n Bug42559 T6 D1 D2 \n\nmax-time: 1000\ncmd: testScan\nargs: -n ScanRead488T -l 10 T6 D1 D2 \n\n# Bug18408736 added on 17.04.2014\n#max-time: 1000\n#cmd: testScan\n#args: -n ScanRead488_Mixed -l 10 T6 D1 D2\n#\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead488Timeout -l 10 T6 D1 D2\n\nmax-time: 1200\ncmd: testScan\nargs: -n ScanRead40 -l 100 T6 D1 D2 \n\n# Bug18408709 added on 17.04.2014\n#max-time: 1800\n#cmd: testScan\n#args: -n ScanRead100 -l 100 T1 D1 D2 \n#\n# Bug18408713 added on 17.04.2014\n#max-time: 1800\n#cmd: testScan\n#args: -n TupScanRead100 -l 100 T1 D1 D2 \n#\n# Bug18408731 added on 17.04.2014\n#max-time: 600\n#cmd: testScan\n#args: -n ScanRead40 -l 100 T1 D1 D2 \n#\n# Bug18408737 added on 17.04.2014\n#max-time: 1800\n#cmd: testScan\n#args: -n ScanRead40RandomTable -l 100 T1 \n#\nmax-time: 500\ncmd: testScan\nargs: -n ScanWithLocksAndInserts T6 D1 D2\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadAbort T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadAbort15 T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadAbort240 T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n ScanUpdateAbort16 T6 D1 D2 \n\nmax-time: 3600\ncmd: testScan\nargs: -n ScanReadRestart T1 T6 T13\n\nmax-time: 3600\ncmd: testScan\nargs: -n ScanReadRestart D1 D2\n\nmax-time: 1200\ncmd: testScan\nargs: -n ScanUpdateRestart T6\n\n# Bug18408730 added on 17.04.2014\n#max-time: 1200\n#cmd: testScan\n#args: -n ScanUpdateRestart D1 D2 \n#\nmax-time: 500\ncmd: testScan\nargs: -n CheckGetValue T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n CloseWithoutStop T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n NextScanWhenNoMore T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n ExecuteScanWithoutOpenScan T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n OnlyOpenScanOnce T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n OnlyOneOpInScanTrans T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n OnlyOneOpBeforeOpenScan T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n OnlyOneScanPerTrans T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n NoCloseTransaction T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n CloseRefresh T1\n\nmax-time: 500\ncmd: testScan\nargs: -n CheckInactivityTimeOut T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n CheckInactivityBeforeClose T6 D1 D2 \n\nmax-time: 500\ncmd: testScan\nargs: -n CheckAfterTerror T6 D1 D2 \n\n# Bug18408747 added on 17.04.2014\n#max-time: 500\n#cmd: testScan\n#args: -n ScanReadError5021 T1 D1 D2 \n```\n\n----------------------------------------\n\nTITLE: Setting Common Compiler Definitions and Include Directories\nDESCRIPTION: Adds common compiler definitions and include directories for the MySQL Server build. It includes options for experimental system variables and colored compiler output.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-D__STDC_LIMIT_MACROS)     # Enable C99 limit macros\nADD_DEFINITIONS(-D__STDC_FORMAT_MACROS)    # Enable C99 printf format macros\nADD_DEFINITIONS(-D_USE_MATH_DEFINES)       # Get access to M_PI, M_E, etc. in math.h\nADD_DEFINITIONS(-DLZ4_DISABLE_DEPRECATE_WARNINGS) # C++14 deprecation warnings in LZ4.\n\nOPTION(ENABLE_EXPERIMENT_SYSVARS \"Expose ussually hidden system variables to allow experiments\" OFF)\nIF(ENABLE_EXPERIMENT_SYSVARS)\n  ADD_DEFINITIONS(-DENABLE_EXPERIMENT_SYSVARS)\nENDIF()\n\nOPTION(FORCE_COLORED_OUTPUT \"Colorize compiler output\" OFF)\nIF(FORCE_COLORED_OUTPUT)\n  IF(MY_COMPILER_IS_GNU)\n    ADD_COMPILE_OPTIONS(-fdiagnostics-color=always)\n  ELSEIF(MY_COMPILER_IS_CLANG)\n    ADD_COMPILE_OPTIONS(-fcolor-diagnostics)\n  ENDIF()\nENDIF()\n\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n  ${CMAKE_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/include\n  ${CMAKE_SOURCE_DIR}/libs\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Binary Log Event Library in CMake\nDESCRIPTION: Defines the mysql_binlog_event library target using the LIBS_MYSQL_CREATE_LIBRARY macro. It specifies the source files, headers, link libraries, and compilation definitions for the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/event/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nLIBS_MYSQL_CREATE_LIBRARY(mysql_binlog_event\n  TARGET_SRCS ${TARGET_SRCS}\n  TARGET_HEADERS ${TARGET_HEADERS}\n  LINK_LIBRARIES ${LINK_LIBRARIES} mysys\n  COMPILE_DEFINITIONS BINLOG_EVENT_COMPRESSION_USE_ZSTD_${WITH_ZSTD}\n  DEPENDENCIES GenError\n)\n```\n\n----------------------------------------\n\nTITLE: Event Creation Sequence Diagram\nDESCRIPTION: Shows the sequence of interactions between USER, DICT(Master), UTIL and SUMA components during event creation. Includes getting ID, creating sub-ID and inserting into system table.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Event.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUSER                      DICT(Master)            UTIL                   SUMA\n================================================================================\nCREATE_EVENT_REQ::create\n-------------------------->\\n\\t\\t\\t  - Get ID\n                          CREATE_SUBID\n                          ----------------------------------------------->\\n                          <-----------------------------------------------\n\\t\\t\\t  - insert into system table\n                          UTIL_PREPARE::insert\n                          ------------------------>\n                          <------------------------\n                          UTIL_EXECUTE\n                          ------------------------>\n                          <------------------------\nCREATE_EVENT_CONF\n<--------------------------\n```\n\n----------------------------------------\n\nTITLE: Container Format Structure\nDESCRIPTION: Specifies the format for vector-type containers with number of elements and field data.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<container_format> ::= <number_elements> { <field_data> }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Schema Instrumentation Options in CMake\nDESCRIPTION: Defines CMake options for controlling Performance Schema instrumentation components. Each OPTION directive creates a boolean toggle that can disable specific instrumentation types like threads, mutex, rwlock, etc. All options default to the value of DISABLE_ALL_PSI and are marked as advanced CMake options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(unittest)\nENDIF()\n\n# The top level CMakeLists.txt has an option DISABLE_ALL_PSI, default OFF.\n# If it is ON, then disable everything below.\n\n# Only disable threads when building without *any* instrumentation,\n# as other instrumentations have a dependency on threads.\nOPTION(DISABLE_PSI_THREAD \"Exclude the performance schema thread instrumentation\" ${DISABLE_ALL_PSI})\n\nOPTION(DISABLE_PSI_MUTEX \"Exclude the performance schema mutex instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_RWLOCK \"Exclude the performance schema rwlock instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_COND \"Exclude the performance schema condition instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_FILE \"Exclude the performance schema file instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_TABLE \"Exclude the performance schema table instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_SOCKET \"Exclude the performance schema socket instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_STAGE \"Exclude the performance schema stage instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_STATEMENT \"Exclude the performance schema statement instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_SP \"Exclude the performance schema stored procedure instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_PS \"Exclude the performance schema prepared statements instances instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_IDLE \"Exclude the performance schema idle instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_STATEMENT_DIGEST \"Exclude the performance schema statement digest instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_METADATA \"Exclude the performance schema metadata instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_MEMORY \"Exclude the performance schema memory instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_TRANSACTION \"Exclude the performance schema transaction instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_ERROR \"Exclude the performance schema server error instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_DATA_LOCK \"Exclude the performance schema data lock instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_TLS_CHANNEL \"Exclude the performance schema tls channel instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_SERVER_TELEMETRY_TRACES \"Exclude the performance schema server telemetry traces instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_SERVER_TELEMETRY_LOGS \"Exclude the performance schema server telemetry logs instrumentation\" ${DISABLE_ALL_PSI})\nOPTION(DISABLE_PSI_METRICS \"Exclude the performance schema server telemetry metrics instrumentation\" ${DISABLE_ALL_PSI})\n\nMARK_AS_ADVANCED(DISABLE_PSI_THREAD)\n\nMARK_AS_ADVANCED(DISABLE_PSI_MUTEX)\nMARK_AS_ADVANCED(DISABLE_PSI_RWLOCK)\nMARK_AS_ADVANCED(DISABLE_PSI_COND)\nMARK_AS_ADVANCED(DISABLE_PSI_FILE)\nMARK_AS_ADVANCED(DISABLE_PSI_TABLE)\nMARK_AS_ADVANCED(DISABLE_PSI_SOCKET)\nMARK_AS_ADVANCED(DISABLE_PSI_STAGE)\nMARK_AS_ADVANCED(DISABLE_PSI_STATEMENT)\nMARK_AS_ADVANCED(DISABLE_PSI_SP)\nMARK_AS_ADVANCED(DISABLE_PSI_PS)\nMARK_AS_ADVANCED(DISABLE_PSI_IDLE)\nMARK_AS_ADVANCED(DISABLE_PSI_STATEMENT_DIGEST)\nMARK_AS_ADVANCED(DISABLE_PSI_METADATA)\nMARK_AS_ADVANCED(DISABLE_PSI_MEMORY)\nMARK_AS_ADVANCED(DISABLE_PSI_TRANSACTION)\nMARK_AS_ADVANCED(DISABLE_PSI_ERROR)\nMARK_AS_ADVANCED(DISABLE_PSI_DATA_LOCK)\nMARK_AS_ADVANCED(DISABLE_PSI_TLS_CHANNEL)\nMARK_AS_ADVANCED(DISABLE_PSI_SERVER_TELEMETRY_TRACES)\nMARK_AS_ADVANCED(DISABLE_PSI_SERVER_TELEMETRY_LOGS)\nMARK_AS_ADVANCED(DISABLE_PSI_METRICS)\n```\n\n----------------------------------------\n\nTITLE: Configuring Processor Core Detection\nDESCRIPTION: Detects the number of processor cores and sets a default of 1 if no cores are detected. Used to parallelize test execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(ProcessorCount)\nProcessorCount(CORES)\nIF (CORES EQUAL 0)\n  SET(CORES 1)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Performance Schema Source File Configuration\nDESCRIPTION: CMake configuration for compiling Performance Schema plugin with required source files and dependencies\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(PERFSCHEMA_SOURCES\n  cursor_by_account.cc\n  cursor_by_account.h\n  ...\n)\nMYSQL_ADD_PLUGIN(perfschema ${PERFSCHEMA_SOURCES}\n  STORAGE_ENGINE MANDATORY STATIC_ONLY\n  LINK_LIBRARIES extra::rapidjson ext::zlib mysql_gtid extra::unordered_dense\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hypergraph Optimizer in MySQL\nDESCRIPTION: Sets up conditional compilation for the Hypergraph Optimizer feature based on configuration options, enabling it by default in Debug builds if not explicitly configured.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nIF(DEFINED WITH_HYPERGRAPH_OPTIMIZER)\n  IF(WITH_HYPERGRAPH_OPTIMIZER)\n    TARGET_COMPILE_DEFINITIONS(sql_main PRIVATE\n      WITH_HYPERGRAPH_OPTIMIZER=1)\n  ENDIF()\nELSEIF(WITH_HYPERGRAPH_OPTIMIZER_DEFAULT STREQUAL \"default\")\n  TARGET_COMPILE_DEFINITIONS(sql_main PRIVATE\n    $<$<CONFIG:Debug>:WITH_HYPERGRAPH_OPTIMIZER=1>)\nENDIF()\nIF(ENABLE_HYPERGRAPH_OPTIMIZER)\n  TARGET_COMPILE_DEFINITIONS(sql_main PRIVATE\n    ENABLE_HYPERGRAPH_OPTIMIZER=1)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Implementing File Compression and Decompression in Visual Basic using zlib\nDESCRIPTION: This snippet provides implementations for compressing and decompressing files using zlib in Visual Basic. It includes functions for compressing a file with optional compression level and decompressing a file, as well as a property to get the compression percentage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/old/visual-basic.txt#2025-04-21_snippet_1\n\nLANGUAGE: Visual Basic\nCODE:\n```\nOption Explicit\nPrivate lngpvtPcnSml As Long 'Stores value for 'lngPercentSmaller'\nPrivate Const SUCCESS As Long = 0\nPrivate Const strFilExt As String = \".cpr\"\nPrivate Declare Function lngfncCpr Lib \"zlib.dll\" Alias \"compress2\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long,\nByVal level As Integer) As Long\nPrivate Declare Function lngfncUcp Lib \"zlib.dll\" Alias \"uncompress\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long)\nAs Long\n\nPublic Sub subCompressFile(ByVal strargOriFilPth As String, Optional ByVal\nstrargCprFilPth As String, Optional ByVal intLvl As Integer = 9)\n    Dim strCprPth As String\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim bytaryOri() As Byte\n    Dim bytaryCpr() As Byte\n    lngOriSiz = FileLen(strargOriFilPth)\n    ReDim bytaryOri(lngOriSiz - 1)\n    Open strargOriFilPth For Binary Access Read As #1\n        Get #1, , bytaryOri()\n    Close #1\n    strCprPth = IIf(strargCprFilPth = \"\", strargOriFilPth, strargCprFilPth)\n'Select file path and name\n    strCprPth = strCprPth & IIf(Right(strCprPth, Len(strFilExt)) =\nstrFilExt, \"\", strFilExt) 'Add file extension if not exists\n    lngCprSiz = (lngOriSiz * 1.01) + 12 'Compression needs temporary a bit\nmore space then original file size\n    ReDim bytaryCpr(lngCprSiz - 1)\n    If lngfncCpr(bytaryCpr(0), lngCprSiz, bytaryOri(0), lngOriSiz, intLvl) =\nSUCCESS Then\n        lngpvtPcnSml = (1# - (lngCprSiz / lngOriSiz)) * 100\n        ReDim Preserve bytaryCpr(lngCprSiz - 1)\n        Open strCprPth For Binary Access Write As #1\n            Put #1, , bytaryCpr()\n            Put #1, , lngOriSiz 'Add the original size value to the end\n(last 4 bytes)\n        Close #1\n    Else\n        MsgBox \"Compression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n\nPublic Sub subUncompressFile(ByVal strargFilPth As String)\n    Dim bytaryCpr() As Byte\n    Dim bytaryOri() As Byte\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim strOriPth As String\n    lngCprSiz = FileLen(strargFilPth)\n    ReDim bytaryCpr(lngCprSiz - 1)\n    Open strargFilPth For Binary Access Read As #1\n        Get #1, , bytaryCpr()\n    Close #1\n    'Read the original file size value:\n    lngOriSiz = bytaryCpr(lngCprSiz - 1) * (2 ^ 24) _\n              + bytaryCpr(lngCprSiz - 2) * (2 ^ 16) _\n              + bytaryCpr(lngCprSiz - 3) * (2 ^ 8) _\n              + bytaryCpr(lngCprSiz - 4)\n    ReDim Preserve bytaryCpr(lngCprSiz - 5) 'Cut of the original size value\n    ReDim bytaryOri(lngOriSiz - 1)\n    If lngfncUcp(bytaryOri(0), lngOriSiz, bytaryCpr(0), lngCprSiz) = SUCCESS\nThen\n        strOriPth = Left(strargFilPth, Len(strargFilPth) - Len(strFilExt))\n        Open strOriPth For Binary Access Write As #1\n            Put #1, , bytaryOri()\n        Close #1\n    Else\n        MsgBox \"Uncompression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\nPublic Property Get lngPercentSmaller() As Long\n    lngPercentSmaller = lngpvtPcnSml\nEnd Property\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Protocol Library Using CMake\nDESCRIPTION: This snippet defines an INTERFACE library named 'mysql_protocol' and sets its source files, include directories, and linked libraries. The purpose is to configure the MySQL protocol code for use in CMake-based projects, including headers and dependencies that are necessary for building MySQL functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nSET(include_dirs\n  include\n  )\n\nADD_LIBRARY(mysql_protocol INTERFACE)\n\nTARGET_SOURCES(mysql_protocol\n  INTERFACE\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/mysqlrouter/classic_protocol.h\n  )\nTARGET_LINK_LIBRARIES(mysql_protocol\n  INTERFACE\n  harness_stdx\n  )\nTARGET_INCLUDE_DIRECTORIES(mysql_protocol INTERFACE ${include_dirs})\n# GENERATE_EXPORT_HEADER(mysql_protocol\n#   EXPORT_FILE_NAME\n#   ${CMAKE_CURRENT_BINARY_DIR}/include/mysqlrouter/mysql_protocol_export.h\n#   )\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library for Strings\nDESCRIPTION: This snippet adds a shared library named `strings_shared`. It's conditionally built based on the operating system (Apple, Windows, or other). It includes source files, sets options like `NO_UNDEFINED` and `SKIP_INSTALL`, and specifies dependencies on the `strings_ja_hans` and `strings_zh_hans` targets. Different build flags apply based on the operating system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(APPLE)\n  # We do not build object libraries on Mac, so compile everything twice.\n  ADD_SHARED_LIBRARY(strings_shared\n    ${STRINGS_SOURCES}\n    NO_UNDEFINED\n    SKIP_INSTALL\n    DEPENDENCIES strings_ja_hans strings_zh_hans\n    )\nELSEIF(WIN32)\n  # We need to export the desired symbols, and generate the import library.\n  # Note the PUBLIC definition of MYSQL_LIBSTRINGS_DLL,\n  # and the PRIVATE definition of MYSQL_LIBSTRINGS_EXPORT.\n  ADD_SHARED_LIBRARY(strings_shared\n    ${STRINGS_SOURCES}\n    SKIP_INSTALL\n    DEPENDENCIES strings_ja_hans strings_zh_hans\n    )\n  TARGET_COMPILE_DEFINITIONS(strings_shared\n    PUBLIC MYSQL_LIBSTRINGS_DLL\n    PRIVATE MYSQL_LIBSTRINGS_EXPORT\n    )\n  IF(WIN32_VS)\n    # m_normalized ... needs to have dll-interface to be used by client ...\n    TARGET_COMPILE_OPTIONS(strings_shared PUBLIC /wd4251)\n  ENDIF()\nELSE()\n  ADD_SHARED_LIBRARY(strings_shared\n    $<TARGET_OBJECTS:strings_objlib>\n    NO_UNDEFINED\n    SKIP_INSTALL\n    DEPENDENCIES strings_ja_hans strings_zh_hans\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Search Path for NDB\nDESCRIPTION: Sets the default search path for TLS keys and certificates, with different paths for Windows and non-Windows systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET(DEFAULT_TLS_SEARCH_PATH \"$HOMEPATH/ndb-tls\")\nELSE()\n  SET(DEFAULT_TLS_SEARCH_PATH \"$HOME/ndb-tls\")\nENDIF()\nSET(WITH_NDB_TLS_SEARCH_PATH ${DEFAULT_TLS_SEARCH_PATH}\n    CACHE STRING \"Search path for TLS keys and certificates\")\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Log Component Tag\nDESCRIPTION: This CMake command adds a preprocessor definition.  Specifically, it defines `LOG_COMPONENT_TAG` to be \"mecab\".  This will likely affect logging behavior within the mecab plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\\\"mecab\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keyring Tests\nDESCRIPTION: This snippet iterates through the list of keyring related test files and adds each as a harness test file. It specifies include directories and library dependencies including OpenSSL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  test_keyring.cc\n  test_keyring_manager.cc\n  test_secure_string.cc\n)\n\nFOREACH(TEST ${TESTS})\n  ADD_HARNESS_TEST_FILE(${TEST} MODULE ${TEST_MODULE}\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/shared/include/\n    LIB_DEPENDS test-helpers;OpenSSL::SSL OpenSSL::Crypto)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redo and Scan Tests\nDESCRIPTION: Test configurations for redo log handling and scan operations in NDB Cluster. The tests include full redo operations, scan error handling, and interpreter error simulation scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_15\n\nLANGUAGE: plain\nCODE:\n```\n# Bug18408726 added on 17.04.2014\n#max-time: 300\n#cmd: testScan\n#args:  -n extraNextResultBug11748194 T1\n#\nmax-time: 1200\ncmd: testRedo\nargs: -nRedoFull T1\n\n# Bug18379486 added on 17.04.2014\n#max-time: 600\n#cmd: testRedo\n#args: -n RestartFD -l 2 T1\n#\n# Bug18409942 added on 17.04.2014\n#max-time : 300\n#cmd: testScan\n#args: -n ScanKeyInfoExhaust T1\n#\nmax-time : 300\ncmd: testDict\nargs: -n Bug14645319 T1\n\nmax-time : 1200\ncmd: testLimits\nargs: -n SlowDihFileWrites T1\n\nmax-time : 300\ncmd: testScan\nargs: -n TupCheckSumError T1\n\nmax-time : 300\ncmd: testScan\nargs: -n InterpretNok6000 T1\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Plugin for REST API\nDESCRIPTION: Defines and configures a harness plugin for the rest_api component in the MySQL project. It specifies the source files required, dependencies on other libraries, and installation paths. This configuration is crucial for integrating and building the REST API as a plugin within the MySQL server framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_api/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(rest_api\n  SOURCES\n  rest_api_component.cc\n  rest_api_plugin.cc\n  rest_api_handler.cc\n  rest_api.cc\n  REQUIRES\n  router_lib\n  http_server_lib\n  rest_api_lib\n  http_auth_backend_lib\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Various Tablespace Configurations\nDESCRIPTION: SQL statements to create a test database with different tablespace configurations, including general tablespaces, partitioned tables with data directories, and tables with indexes. These configurations will be tested for cross-platform portability.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/README_tablespace_portable_linux.txt#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE test;\nuse test;\nCREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' Engine=InnoDB;\nCREATE TABLE tab1(c1 int, c2 varchar(10)) TABLESPACE=ts1;\nINSERT INTO tab1 VALUES(1, 'VISH');\nCREATE TABLE tab2(c1 int , c2 varchar(10)) Engine=InnoDB;\nINSERT INTO tab2 VALUES(2, 'VISH');\nCREATE INDEX ix1 ON tab1(c2) USING BTREE;\nCREATE INDEX ix2 ON tab2(c2) ;\n\ncreate table tab3 (\nempno int,\nename varchar(30),\nsal   numeric(3))\nengine=InnoDB row_format=compressed\npartition by hash(empno) (\npartition P0  DATA DIRECTORY = '/xxx/xxx/datadir1',\npartition P1 DATA DIRECTORY = '/xxx/xxx/datadir1');\n\nCREATE INDEX ix1 ON tab3(ename) USING BTREE;\nINSERT INTO tab3 VALUES (100,'VISWANATH',100);\nINSERT INTO tab3 VALUES (300,'VISWANATH',100);\n\nCREATE TABLE purchase (\n  `id` int(11) DEFAULT NULL,\n  `purchased` date DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\nPARTITION BY RANGE ( YEAR(purchased))\nSUBPARTITION BY HASH ( TO_DAYS(purchased))\n(PARTITION p0 VALUES LESS THAN (1990)\n (SUBPARTITION s0 DATA DIRECTORY = '/xxx/xxx/part0' ENGINE = InnoDB,\n  SUBPARTITION s1 DATA DIRECTORY = '/xxx/xxx/part1' ENGINE = InnoDB),\n PARTITION p1 VALUES LESS THAN (2000)\n (SUBPARTITION s2 DATA DIRECTORY = '/xxx/xxx/part2' ENGINE = InnoDB,\n  SUBPARTITION s3 DATA DIRECTORY = '/xxx/xxx/part3' ENGINE = InnoDB));\n\nINSERT INTO purchase VALUES(1,'1980-05-31');\nINSERT INTO purchase VALUES(2,'1999-05-31');\nINSERT INTO purchase VALUES(3,'1998-05-31');\nINSERT INTO purchase VALUES(4,'1979-05-31');\nINSERT INTO purchase VALUES(5,'1978-05-31');\nINSERT INTO purchase VALUES(6,'1997-05-31');\n\nCREATE TABLESPACE ts2 ADD DATAFILE '/xxx/xxx/undo_files/ts2.ibd' Engine=InnoDB;\nCREATE TABLE tab4(c1 int, c2 varchar(10)) TABLESPACE=ts2;\nINSERT INTO tab4 VALUES(1, 'VISH');\n```\n\n----------------------------------------\n\nTITLE: Downgrading -Werror for Specific Files with GCC in MySQL\nDESCRIPTION: Checks for and applies a compiler flag to downgrade -Werror to warning for the geometry_rtree.cc file when using GCC compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# Downgrade -Werror to warning for gcc\nIF(MY_COMPILER_IS_GNU)\n  MY_CHECK_CXX_COMPILER_WARNING(\"error=maybe-uninitialized\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    ADD_COMPILE_FLAGS(\n      geometry_rtree.cc\n      COMPILE_FLAGS ${HAS_WARN_FLAG}\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Defining Test Files for MySQL\nDESCRIPTION: This snippet sets the include directories for Google Mock and specifies the test files for the MySQL Router project in CMake. It utilizes the FOREACH command to iterate through a list of test files, adding them as test modules while specifying necessary include directories and library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/keepalive/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${GMOCK_INCLUDE_DIRS})\n\nSET(TESTS\n  test_plugin_keepalive.cc\n)\n\nFOREACH(TEST ${TESTS})\n  ADD_TEST_FILE(${TEST} MODULE harness\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/shared/include/\n    LIB_DEPENDS test-helpers)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Mutex Dependencies with GraphViz\nDESCRIPTION: A directed graph showing mutex dependencies in InnoDB using ARC statements. Each line defines a relationship between two mutexes, with optional operation types (S, X, SX) for some relationships. The graph covers major InnoDB subsystems including buffer pool management, cloning, and transaction handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_5\n\nLANGUAGE: graphviz\nCODE:\n```\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/innodb/autoinc_mutex\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Metadata and Data Store Mocks\nDESCRIPTION: This snippet provides commands to start the metadata store and data store mocks for the MySQL Router. It utilizes JSON configuration files to simulate the expected MySQL server responses for the corresponding ports.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/mysql_server_mock.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mysql_server_mock --mysqld-port=5500 --stmt-file=./metadata-store.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mysql_server_mock --mysqld-port=5100 --stmt-file=./group-replication.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Binlog Library Build\nDESCRIPTION: Configuration for building the standalone json_binlog library which handles JSON data deserialization. Includes version setting, source files, dependencies and installation rules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SHARED_LIBRARY(json_binlog\n  ${CMAKE_SOURCE_DIR}/sql-common/json_binary.cc\n  ${CMAKE_SOURCE_DIR}/sql-common/json_dom.cc\n  ${CMAKE_SOURCE_DIR}/sql-common/json_path.cc\n  ${CMAKE_SOURCE_DIR}/sql-common/json_syntax_check.cc\n  ${CMAKE_SOURCE_DIR}/sql-common/sql_string.cc\n\n  COMPILE_DEFINITIONS DISABLE_PSI_MUTEX EXPORT_JSON_FUNCTIONS\n  DEPENDENCIES GenError\n  ${INSTALL_JSON_BINLOG_LIBRARY}\n  LINK_LIBRARIES mysys extra::rapidjson ext::zlib decimal\n  LINUX_VERSION_SCRIPT \"${CMAKE_CURRENT_SOURCE_DIR}/json_binlog.ver\"\n  VERSION \"${json_binlog_VERSION}\"\n  NO_UNDEFINED\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Library in CMake for Abseil\nDESCRIPTION: Defines the main 'base' library target with its headers, source files, dependencies, linking options, and compilation options. This is a public target that other components can depend on.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    base\n  HDRS\n    \"call_once.h\"\n    \"casts.h\"\n    \"internal/cycleclock.h\"\n    \"internal/cycleclock_config.h\"\n    \"internal/low_level_scheduling.h\"\n    \"internal/per_thread_tls.h\"\n    \"internal/spinlock.h\"\n    \"internal/sysinfo.h\"\n    \"internal/thread_identity.h\"\n    \"internal/tsan_mutex_interface.h\"\n    \"internal/unscaledcycleclock.h\"\n    \"internal/unscaledcycleclock_config.h\"\n  SRCS\n    \"internal/cycleclock.cc\"\n    \"internal/spinlock.cc\"\n    \"internal/sysinfo.cc\"\n    \"internal/thread_identity.cc\"\n    \"internal/unscaledcycleclock.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n    $<$<BOOL:${ABSL_LIBRT}>:-lrt>\n    $<$<BOOL:${MINGW}>:-ladvapi32>\n  DEPS\n    absl::atomic_hook\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::log_severity\n    absl::raw_logging_internal\n    absl::spinlock_wait\n    absl::type_traits\n    Threads::Threads\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Changestreams Static Library in CMake\nDESCRIPTION: Configures the static library build for changestreams with its source files and links it with the external zlib dependency. Uses the CS_LIB_SOURCES variable which should contain all required source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/libstandalone/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_STATIC_LIBRARY(changestreams_standalone_static\n  ${CS_LIB_SOURCES}\n  LINK_LIBRARIES ext::zlib\n  )\n```\n\n----------------------------------------\n\nTITLE: ByteBuffer Mappings in NdbOperation Java Interface\nDESCRIPTION: Issues related to ByteBuffer mappings for parameter passing and return values in the NdbOperation Java class. These methods involve mapping between Java ByteBuffer and C++ void* or const void* pointers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: ByteBuffer/*_void *_*/ appStorage();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native ByteBuffer/*_void *_*/ appStorage();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native void appStorage(ByteBuffer/*_void *_*/ p0);\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: ByteBuffer/*_const void *_*/ value();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native ByteBuffer/*_const void *_*/ value();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native void value(ByteBuffer/*_const void *_*/ p0);\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native ByteBuffer/*_void *_*/ customData();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native public final native void customData(ByteBuffer/*_void *_*/ p0);\n```\n\n----------------------------------------\n\nTITLE: Adding Ngram MySQL Plugin\nDESCRIPTION: This CMake macro adds a MySQL plugin named `ngram_parser`. It specifies the source file (`ngram_parser/plugin_ngram.cc`), sets it as the default and sets the module output name to `libpluginngram`. `DEFAULT` likely means it is enabled by default.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_PLUGIN(ngram_parser\n  ngram_parser/plugin_ngram.cc\n  DEFAULT\n  MODULE_OUTPUT_NAME \\\"libpluginngram\\\"\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Setting Gperftools Compile Options in CMake\nDESCRIPTION: This snippet manages various compilation flags based on previously evaluated conditions, which influence the overall behavior of the gperftools library during compilation. It adjusts flags for warnings and optimizations specific to the compiler being used.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(have_w_no_unused_result)\n  add_compile_options(-Wno-unused-result)\nendif()\n\nif(have_sized_deallocation)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsized-deallocation\")\nendif()\n\nif(have_f_aligned_new)\n  add_compile_options(-faligned-new)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Common Sources for Apple Platforms\nDESCRIPTION: Removes specific source files from ICU common component build when compiling for Apple platforms. This conditional removal handles platform-specific compatibility issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(APPLE)\n  LIST(REMOVE_ITEM ICU_COMMON_SOURCES\n    ${ICU_VERSION_DIR}/source/common/cwchar.cpp\n    ${ICU_VERSION_DIR}/source/common/icuplug.cpp\n    ${ICU_VERSION_DIR}/source/common/restrace.cpp\n    ${ICU_VERSION_DIR}/source/common/wintz.cpp\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Component Build for UDF Service Testing\nDESCRIPTION: CMake command that configures the build for the test_udf_services component. It includes several source files related to UDF extension testing and services, and marks the component as MODULE_ONLY and TEST_ONLY.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/udf_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_udf_services\n  test_udf_extension.cc\n  test_udf_extension.h\n  test_udf_services.cc\n  udf_extension_test_functions.cc\n  udf_extension_test_functions.h\n  MODULE_ONLY\n  TEST_ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining a Harness Plugin for Mock Server in CMake\nDESCRIPTION: This snippet adds a harness plugin for the mock server, specifying its source files and required components, allowing for modular integration into the build system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_harness_plugin(mock_server\n  NO_INSTALL\n  SOURCES duktape_statement_reader.cc\n  x_protocol_decoder.cc\n  x_protocol_encoder.cc\n  mysql_server_mock.cc\n  classic_mock_session.cc\n  x_mock_session.cc\n  mysql_server_mock_schema.cc\n  duk_module_shim.cc\n  duk_node_fs.c\n  mock_server_plugin.cc\n  mock_server_component.cc\n  authentication.cc\n  protocol_base.cc\n  REQUIRES\n    mysql_protocol\n    duktape\n    router_mysqlxmessages\n    harness_stdx\n    harness-library\n    router_utils\n    io_component\n    harness_tls\n  )\n```\n\n----------------------------------------\n\nTITLE: NdbCntr Startup Process\nDESCRIPTION: Details the NDB Cluster Controller startup sequence including system file checking, node coordination, and phase transitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n--- Start phase 2 - NdbCntr ----------------------------------------\n\n- Use same TimeToWaitAliveTimer\n\n1) Check sysfile (DIH_RESTART_REQ)\n2) Read nodes (from Qmgr) P = qmgr president\n\n3) Send CNTR_START_REQ to cntr(P)\n   including info in DIH_RESTART_REF/CONF\n\n4) Wait until -\nb) Receiving CNTR_START_CONF -> continue\nb) Receiving CNTR_START_REF -> P = node specified in REF, goto 3\nc) TimeToWaitAlive has passed -> Failure to start\n\n4) Run ndb-startphase 1\n```\n\n----------------------------------------\n\nTITLE: Running API Test and Generating Output in CMake\nDESCRIPTION: Sets up a custom command to run the libmysql_api_test executable and generate an output file. It also creates a custom target to ensure the test is run as part of the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/libmysql_api_test.out\n  DEPENDS libmysql_api_test\n  COMMAND libmysql_api_test\n  > ${CMAKE_CURRENT_BINARY_DIR}/libmysql_api_test.out\n  )\nMY_ADD_CUSTOM_TARGET(run_libmysql_api_test ALL\n  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/libmysql_api_test.out\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool Library in CMake\nDESCRIPTION: This snippet defines the connection pool library target, specifying source files, output name, and linked libraries. It uses the ROUTER_ADD_SHARED_LIBRARY command to create a shared library named 'mysqlrouter_connection_pool'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(connection_pool\n  connection_pool.cc\n  connection_pool_component.cc\n\n  OUTPUT_NAME \"mysqlrouter_connection_pool\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness_net_ts\n  mysql_protocol\n  routing_connections\n\n  PRIVATE\n  OpenSSL::SSL OpenSSL::Crypto\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test-Only Log Sink Component in MySQL Server CMake Configuration\nDESCRIPTION: This snippet adds a test-only log sink component to the MySQL server build, specifying the source file and indicating it's both a module-only and test-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/logging/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(log_sink_test\n  log_sink_test.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Cloning GoogleTest repository\nDESCRIPTION: Clones the GoogleTest repository from GitHub using Git and navigates into the created directories. This is the initial step in building GoogleTest as a standalone project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/google/googletest.git -b v1.13.0\ncd googletest        # Main directory of the cloned repository.\nmkdir build          # Create a directory to hold the build output.\ncd build\ncmake ..             # Generate native build scripts for GoogleTest.\n```\n\n----------------------------------------\n\nTITLE: Creating Static and Shared Library Test Executables in CMake\nDESCRIPTION: These snippets generate separate test executables for a static and a shared library version of strings, skipping installation as they are meant for testing only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/examples/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(libstrings_static-t\n  libstrings-t.cc\n  LINK_LIBRARIES strings\n  ADD_TEST libstrings_static\n  SKIP_INSTALL\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(libstrings_shared-t\n  libstrings-t.cc\n  LINK_LIBRARIES strings_shared\n  ADD_TEST libstrings_shared\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Server Telemetry Logs Component Build\nDESCRIPTION: CMake configuration to build the test_server_telemetry_logs_client component. The component is marked as module-only and test-only, comprising two source files: server_logs_component.cc and server_logs_helpers.cc.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test_server_telemetry_logs_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_server_telemetry_logs_client\n  server_logs_component.cc\n  server_logs_helpers.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional MySQL Native Password Plugin Build Configuration\nDESCRIPTION: CMake configuration that conditionally builds the mysql_native_password client authentication plugin. Checks if authentication plugins are enabled and sets up the build parameters including source files and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_native_password/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  MESSAGE(STATUS \"Skipping the NATIVE_PASSWORD client authentication plugin.\")\n  RETURN()\nENDIF()\n\nDISABLE_MISSING_PROFILE_WARNING()\n\nMESSAGE(STATUS \"building mysql_native_password client shared plugin\")\n\nMYSQL_ADD_PLUGIN(mysql_native_password\n  mysql_native_password.cc\n  LINK_LIBRARIES mysys\n  MODULE_ONLY\n  CLIENT_ONLY\n  MODULE_OUTPUT_NAME \"mysql_native_password\"\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Operation Types Definition\nDESCRIPTION: Core database operation types that modify tuples or versions in MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbtup/Notes.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT    insert new original tuple, or insert after delete\nUPDATE    update\nDELETE    delete\n```\n\n----------------------------------------\n\nTITLE: Enabling pthread support in GoogleTest\nDESCRIPTION: Shows how to enable or disable pthread support in GoogleTest using compiler flags. This is useful when GoogleTest doesn't correctly detect the availability of pthread in the environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n-DGTEST_HAS_PTHREAD=1\n```\n\nLANGUAGE: C++\nCODE:\n```\n-DGTEST_HAS_PTHREAD=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Lite MySQL Client Library with CMake\nDESCRIPTION: This snippet configures a lite version of the static mysqlxclient library using CMake. It includes dependencies on libraries like ext::lz4, ext::zstd, and ext::protobuf-lite. Importantly, configuration avoids linking conflicts with libmysqlxmessages_lite.a to prevent ODR violations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(mysqlxclient_lite STATIC ${CLIENT_SRC})\nADD_DEPENDENCIES(mysqlxclient_lite GenError)\nADD_DEPENDENCIES(mysqlxclient_lite ${MYSQLX_PROTOCOL_LITE_LIB})\nTARGET_LINK_LIBRARIES(mysqlxclient_lite PUBLIC ext::lz4 ext::zstd ext::zlib)\n# Do not link in libmysqlxmessages_lite.a here, we may get ODR violations\n# in targets linking with both these static libraries.\n# TARGET_LINK_LIBRARIES(mysqlxclient_lite PUBLIC ${MYSQLX_PROTOCOL_LITE_LIB})\nTARGET_LINK_LIBRARIES(mysqlxclient_lite PUBLIC ext::libprotobuf-lite)\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient_lite SYSTEM PUBLIC\n  ${MYSQLX_PROJECT_DIR}/client/\n  ${CMAKE_CURRENT_BINARY_DIR}/  # for the mysqlxclient_export.h\n  )\nTARGET_INCLUDE_DIRECTORIES(mysqlxclient_lite PRIVATE\n  ${MYSQLX_GENERATE_DIR})\nTARGET_COMPILE_DEFINITIONS(mysqlxclient_lite PUBLIC\n  MYSQLXCLIENT_STATIC_DEFINE\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Cluster Shared Library in CMake\nDESCRIPTION: Defines the router_cluster shared library build configuration for cluster-aware components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(router_cluster\n  cluster_aware_session.cc  \n  cluster_metadata.cc\n  cluster_metadata_instance_attributes.cc\n  cluster_metadata_dynamic_state.cc\n\n  OUTPUT_NAME \"mysqlrouter_cluster\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness-library\n  router_utils\n  router_mysql\n  routing_guidelines\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executables for Individual Keyring Common Tests with CMake\nDESCRIPTION: This snippet iterates through the list of keyring component common tests, creating an executable target for each individual test file. It specifies compile options, libraries to link, and disables installation and inclusion in 'all' builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"FOREACH(test ${KEYRING_COMPONENT_COMMON_TESTS})\n  MYSQL_ADD_EXECUTABLE(keyring_common_${test}-t ${test}-t.cc\n    ${COMPILE_OPTIONS_ARG}\n    ENABLE_EXPORTS\n    SKIP_INSTALL\n    EXCLUDE_FROM_ALL\n    LINK_LIBRARIES\n    ${KEYRING_COMPONENT_LIBS} ${GTEST_LIBRARIES} gtest_main\n    )\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Registry Test Plugin in MySQL Makefile\nDESCRIPTION: This snippet defines the addition of 'test_services_plugin_registry', relying on 'test_services_plugin_registry.cc' for module creation. This is crucial for testing the registration of services in the MySQL server, supporting the validation of service-oriented components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_services_plugin_registry\n  test_services_plugin_registry.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_29\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSystemRestart\nargs: -n SR_UNDO T1\nmax-time: 2880\"\n```\n\n----------------------------------------\n\nTITLE: Defining testFK Command in Bash\nDESCRIPTION: This snippet defines a MySQL testing command 'testFK' intended for testing foreign key integrity or related scenarios, with its specific arguments and required maximum time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testFK\nargs: -n Basic55 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring VIO Library Sources in CMake\nDESCRIPTION: Defines the core source files for the VIO library and adds platform-specific sources for Windows builds. Links against OpenSSL libraries and socket dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/vio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_WSHADOW_WARNING()\n\nSET(VIO_SOURCES\n  vio.cc\n  viosocket.cc\n  viossl.cc\n  viosslfactories.cc\n)\n\nIF(WIN32)\n  LIST(APPEND VIO_SOURCES\n    viopipe.cc\n    vioshm.cc\n  )\nENDIF()\n\nADD_CONVENIENCE_LIBRARY(vio ${VIO_SOURCES}\n  LINK_LIBRARIES ${LIBSOCKET}\n  OpenSSL::SSL OpenSSL::Crypto\n  )\n```\n\n----------------------------------------\n\nTITLE: Connect Sequence Implementation in MySQL Transporter\nDESCRIPTION: Documents the 6-step sequence for establishing a CONNECTED state in the kernel, involving interaction between CMVMI, TransporterRegistry, and TransporterCallback components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/transporter/trp.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  1. CMVMI calls TransporterRegistry::start_connecting() when it decides to\\n     initiate a connection.\\n  2. start_connecting() sets the performStates[node] entry to CONNECTING as\\n     a flag for start_clients_thread.\\n  3. The thread running in start_clients_thread() notices the change of\\n     state, and does the actual socket connect and initial connection\\n     setup. It then sets Transporter::m_connected to true as a flag for\\n     update_connections().\\n  4. update_connections() notices the flag m_connected set to true, and\\n     this causes it to call TransporterRegistry::report_connect().\\n  5. TransporterRegistry::report_connect() sets performStates[node] to\\n     CONNECTED, and invokes TransporterCallback::reportConnect().\\n  6. TransporterCallback::reportConnect() sends the signal CONNECT_REP to\\n     the CMVMI block, completing the connection process.\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSSL AES Implementation to MySQL Source Files\nDESCRIPTION: Adds the OpenSSL implementation of AES encryption to the list of source files for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nLIST(APPEND MYSYS_SOURCES my_aes_openssl.cc)\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library with Properties and Linking\nDESCRIPTION: Conditionally adds a shared library named 'fido2_shared' using the source files in FIDO_SOURCES and COMPAT_SOURCES if BUILD_SHARED_LIBS is enabled. It sets the output name to 'fido2', version, and soname and links the library against the libraries in TARGET_LIBRARIES. Finally, it installs the shared library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(BUILD_SHARED_LIBS)\n\tadd_library(fido2_shared SHARED ${FIDO_SOURCES} ${COMPAT_SOURCES})\n\tset_target_properties(fido2_shared PROPERTIES OUTPUT_NAME fido2\n\t\tVERSION ${FIDO_VERSION} SOVERSION ${FIDO_MAJOR})\n\ttarget_link_libraries(fido2_shared ${TARGET_LIBRARIES})\n\tinstall(TARGETS fido2_shared\n\t\tARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\t\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\t\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Charset String Service Testing\nDESCRIPTION: This snippet defines 'test_string_service_charset', a component for testing string functionalities that involve character sets. It adheres to the module and testing-only designation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_string_service_charset\n  test_string_service_charset.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Session Plugins - CMake\nDESCRIPTION: This section adds several plugins related to MySQL test sessions. Each plugin is defined using the 'MYSQL_ADD_PLUGIN' macro which specifies the source file, output name, and attributes for module-only and test-only compilation. Each plugin serves a unique purpose in testing session management within MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_service_sql_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nMSVC_CPPCHECK_DISABLE()\n\nMYSQL_ADD_PLUGIN(test_session_in_thd\n  test_session_in_thd.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_session_in_thd\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_x_sessions_init\n  test_x_sessions_init.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_x_sessions_init\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_x_sessions_deinit\n  test_x_sessions_deinit.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_x_sessions_deinit\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_session_detach\n  test_session_detach.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_session_detach\"\n  TEST_ONLY\n  )\n\nMYSQL_ADD_PLUGIN(test_session_info\n  test_session_info.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_session_info\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_session_attach\n  test_session_attach.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_session_attach\"\n  TEST_ONLY\n  WIN_DEF_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/test_session_attach.def\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring GoogleTest for Abseil\nDESCRIPTION: Sets up options and configurations for integrating GoogleTest with Abseil, including external usage and download options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(ABSL_BUILD_TESTING\n  \"If ON, Abseil will build all of Abseil's own tests.\" OFF)\n\noption(ABSL_BUILD_TEST_HELPERS\n  \"If ON, Abseil will build libraries that you can use to write tests against Abseil code. This option requires that Abseil is configured to use GoogleTest.\"\n  OFF)\n\noption(ABSL_USE_EXTERNAL_GOOGLETEST\n  \"If ON, Abseil will assume that the targets for GoogleTest are already provided by the including project. This makes sense when Abseil is used with add_subdirectory.\" OFF)\n\ncmake_dependent_option(ABSL_FIND_GOOGLETEST\n  \"If ON, Abseil will use find_package(GTest) rather than assuming that GoogleTest is already provided by the including project.\"\n  ON\n  \"ABSL_USE_EXTERNAL_GOOGLETEST\"\n  OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and Linker for Google Test\nDESCRIPTION: Interacts with internal utility scripts to configure the compiler and linker settings for building the Google Test libraries. This setup ensures that the build environment is properly aligned with the library requirements.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define helper functions and macros used by Google Test.\ninclude(cmake/internal_utils.cmake)\n\nconfig_compiler_and_linker()  # Defined in internal_utils.cmake.\n```\n\n----------------------------------------\n\nTITLE: Adding Command Services Test Plugin in MySQL Makefile\nDESCRIPTION: This snippet configures the 'test_services_command_services' plugin. It uses 'test_services_command_services.cc' as its base and is critical for the validation of command services provided within MySQL. This plugin setup aids in verifying command service operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_services_command_services\n  test_services_command_services.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Randen Engine in CMake\nDESCRIPTION: Defines a CMake test target for testing the internal randen engine component of Abseil's random library. This target compiles and links the randen_engine_test.cc file with necessary dependencies like absl::log, absl::strings, and testing frameworks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_randen_engine_test\n  SRCS\n    \"internal/randen_engine_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_internal_explicit_seed_seq\n    absl::random_internal_randen_engine\n    absl::strings\n    absl::time\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Generating PHP code using protoc\nDESCRIPTION: Command to generate PHP code from .proto files using the Protocol Buffers compiler. Requires 'protoc' installed with PHP support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --php_out=out_dir test.proto\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for MySQL Server Components\nDESCRIPTION: Defines directed edges (ARCs) between different types of locks in MySQL server, showing their dependencies and access patterns. Includes mutex locks, read-write locks, and shared-exclusive locks across Group Replication, InnoDB, and SQL components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_4\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"mutex/group_rpl/LOCK_primary_election_validation_notification\" TO \"mutex/sql/Relay_log_info::run_lock\"\nARC FROM \"mutex/group_rpl/LOCK_primary_election_validation_notification\" TO \"mutex/sql/Source_info::run_lock\"\nARC FROM \"mutex/group_rpl/LOCK_primary_election_validation_notification\" TO \"rwlock/group_rpl/RWLOCK_gcs_operations\" OP \"R\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Utils Shared Library in CMake\nDESCRIPTION: Defines the router_utils shared library build configuration with source files and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(router_utils\n  default_paths.cc\n  keyring_info.cc\n  utils.cc\n  uri.cc\n  routing_guidelines_version.cc\n  router_config_utils.cc\n\n  OUTPUT_NAME \"mysqlrouter_utils\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness-library\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in C\nDESCRIPTION: This snippet calls the function DISABLE_MISSING_PROFILE_WARNING() to suppress warnings related to missing profiles. It ensures that the MySQL server does not output unnecessary warnings during execution, improving user experience.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/pfs_component/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Binary Log Reader\nDESCRIPTION: CMake configuration for building the mysqlbinlog utility that reads binary log files. Includes source files, compiler flags and linking requirements.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlbinlog\n  ${MYSQLBINLOG_SOURCES}\n  DEPENDENCIES GenError\n  LINK_LIBRARIES ${MYSQLBINLOG_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration for OCI Authentication Client Plugin in CMake\nDESCRIPTION: Checks if authentication client plugins are enabled and adds the OCI authentication client plugin to the build with appropriate libraries and configuration. Includes special handling for symbol visibility on Linux and Solaris platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_oci_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Skip it if disabled.\nIF(NOT WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  MESSAGE(STATUS \"Skipping the OCI authentication client plugin.\")\n  RETURN()\nENDIF()\n\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_PLUGIN(\n  authentication_oci_client\n\n  # Authentication plugin main\n  authentication_oci_client_plugin.cc\n\n  LINK_LIBRARIES oci_common mysys OpenSSL::SSL OpenSSL::Crypto\n\n  CLIENT_ONLY\n  MODULE_ONLY MODULE_OUTPUT_NAME \"authentication_oci_client\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Serialization Library Headers and Sources in CMake\nDESCRIPTION: This snippet defines two lists: TARGET_HEADERS for header files and TARGET_SRCS for source files. These lists contain all the necessary files for the MySQL serialization library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TARGET_HEADERS\n  archive_binary_field_max_size_calculator.h\n  archive_binary.h\n  archive_binary_impl.hpp\n  archive.h\n  archive_text.h\n  archive_text_impl.hpp\n  byte_order_helpers.h\n  field_definition.h\n  field_definition_helpers.h\n  field_functor.h\n  field_wrapper.h\n  primitive_type_codec.h\n  read_archive_binary.h\n  read_archive_binary_impl.hpp\n  serializable.h\n  serializable_impl.hpp\n  serializable_size_calculator.h\n  serializable_type_tags.h\n  serializable_type_traits.h\n  serialization_error.h\n  serialization_error_type.h\n  serialization_format_version.h\n  serialization_types.h\n  serializer_default.h\n  serializer_default_impl.hpp\n  serializer.h\n  serializer_impl.hpp\n  unknown_field_policy.h\n  variable_length_integers.h\n  write_archive_binary.h\n  write_archive_binary_impl.hpp\n)\n\nSET(TARGET_SRCS\n  archive_binary.cpp\n  archive_text.cpp\n  primitive_type_codec.cpp\n  serialization_error.cpp\n  write_archive_binary.cpp\n  read_archive_binary.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Trace File Structure\nDESCRIPTION: This snippet showcases the structure of a JSON trace file used by the MySQL Server Mock. It defines the expected statements and corresponding responses that simulate server behavior.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/mysql_server_mock.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"stmts\": [\n  {\n    \"stmt\": \"select @@version_comment limit 1\",\n    \"result\": {\n      \"columns\": [{\n        \"type\": \"STRING\",\n        \"name\": \"@@version_comment\"\n      }],\n      \"rows\": [\n        [\"ImAMock\"]\n      ]}\n  },\n  {\n    \"stmt\": \"select USER()\",\n    \"result\": {\n      \"columns\": [{\n        \"type\": \"STRING\",\n        \"name\": \"USER()\"\n      }],\n      \"rows\": [\n        [\"mock\"]\n      ]\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining System Schema Source Files in CMake\nDESCRIPTION: Defines the SYS_SCHEMA_SOURCES variable containing all SQL source files that make up the MySQL System Schema. The files are organized by type including tables, triggers, functions, views, and procedures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/sys_schema/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(SYS_SCHEMA_SOURCES\n  before_setup.sql\n\n  init_priv.sql\n\n  views/version.sql\n\n  tables/sys_config.sql\n  tables/sys_config_alter.sql\n  tables/sys_config_data.sql\n\n  triggers/sys_config_insert_set_user.sql\n  triggers/sys_config_update_set_user.sql\n\n  functions/extract_schema_from_file_name.sql\n  functions/extract_table_from_file_name.sql\n  functions/format_bytes.sql\n  functions/format_path.sql\n  functions/format_statement.sql\n  functions/format_time.sql\n  functions/list_add.sql\n  functions/list_drop.sql\n  functions/ps_is_account_enabled.sql\n  functions/ps_is_consumer_enabled.sql\n  functions/ps_is_instrument_default_enabled.sql\n  functions/ps_is_instrument_default_timed.sql\n  functions/ps_is_thread_instrumented.sql\n  functions/ps_thread_id.sql\n  functions/ps_thread_account.sql\n  functions/ps_thread_stack.sql\n  functions/ps_thread_trx_info.sql\n  functions/quote_identifier.sql\n  functions/sys_get_config.sql\n  functions/version_major.sql\n  functions/version_minor.sql\n  functions/version_patch.sql\n  \n  views/i_s/innodb_buffer_stats_by_schema.sql\n  views/i_s/x_innodb_buffer_stats_by_schema.sql\n  views/i_s/innodb_buffer_stats_by_table.sql\n  views/i_s/x_innodb_buffer_stats_by_table.sql\n  views/i_s/schema_object_overview.sql\n  views/i_s/schema_auto_increment_columns.sql\n  views/i_s/x_schema_flattened_keys.sql\n  views/i_s/schema_redundant_indexes.sql\n  views/p_s/ps_check_lost_instrumentation.sql\n  views/p_s/latest_file_io.sql\n  views/p_s/x_latest_file_io.sql\n  views/p_s/io_by_thread_by_latency.sql\n  views/p_s/x_io_by_thread_by_latency.sql\n  views/p_s/io_global_by_file_by_bytes.sql\n  views/p_s/x_io_global_by_file_by_bytes.sql\n  views/p_s/io_global_by_file_by_latency.sql\n  views/p_s/x_io_global_by_file_by_latency.sql\n  views/p_s/io_global_by_wait_by_bytes.sql\n  views/p_s/x_io_global_by_wait_by_bytes.sql\n  views/p_s/io_global_by_wait_by_latency.sql\n  views/p_s/x_io_global_by_wait_by_latency.sql\n  views/p_s/innodb_lock_waits.sql\n  views/p_s/x_innodb_lock_waits.sql\n  views/p_s/memory_by_user_by_current_bytes.sql\n  views/p_s/x_memory_by_user_by_current_bytes.sql\n  views/p_s/memory_by_host_by_current_bytes.sql\n  views/p_s/x_memory_by_host_by_current_bytes.sql\n  views/p_s/memory_by_thread_by_current_bytes.sql\n  views/p_s/x_memory_by_thread_by_current_bytes.sql\n  views/p_s/memory_global_by_current_bytes.sql\n  views/p_s/x_memory_global_by_current_bytes.sql\n  views/p_s/memory_global_total.sql\n  views/p_s/x_memory_global_total.sql\n  views/p_s/schema_index_statistics.sql\n  views/p_s/x_schema_index_statistics.sql\n  views/p_s/x_ps_schema_table_statistics_io.sql\n  views/p_s/schema_table_statistics.sql\n  views/p_s/x_schema_table_statistics.sql\n  views/p_s/schema_table_statistics_with_buffer.sql\n  views/p_s/x_schema_table_statistics_with_buffer.sql\n  views/p_s/schema_tables_with_full_table_scans.sql\n  views/p_s/x_schema_tables_with_full_table_scans.sql\n  views/p_s/schema_unused_indexes.sql\n  views/p_s/schema_table_lock_waits.sql\n  views/p_s/x_schema_table_lock_waits.sql\n  views/p_s/statement_analysis.sql\n  views/p_s/x_statement_analysis.sql\n  views/p_s/statements_with_errors_or_warnings.sql\n  views/p_s/x_statements_with_errors_or_warnings.sql\n  views/p_s/statements_with_full_table_scans.sql\n  views/p_s/x_statements_with_full_table_scans.sql\n  views/p_s/x_ps_digest_avg_latency_distribution.sql\n  views/p_s/x_ps_digest_95th_percentile_by_avg_us.sql\n  views/p_s/statements_with_runtimes_in_95th_percentile.sql\n  views/p_s/x_statements_with_runtimes_in_95th_percentile.sql\n  views/p_s/statements_with_sorting.sql\n  views/p_s/x_statements_with_sorting.sql\n  views/p_s/statements_with_temp_tables.sql\n  views/p_s/x_statements_with_temp_tables.sql\n  views/p_s/user_summary_by_file_io_type.sql\n  views/p_s/x_user_summary_by_file_io_type.sql\n  views/p_s/user_summary_by_file_io.sql\n  views/p_s/x_user_summary_by_file_io.sql\n  views/p_s/user_summary_by_statement_type.sql\n  views/p_s/x_user_summary_by_statement_type.sql\n  views/p_s/user_summary_by_statement_latency.sql\n  views/p_s/x_user_summary_by_statement_latency.sql\n  views/p_s/user_summary_by_stages.sql\n  views/p_s/x_user_summary_by_stages.sql\n  views/p_s/user_summary.sql\n  views/p_s/x_user_summary.sql\n  views/p_s/host_summary_by_file_io_type.sql\n  views/p_s/x_host_summary_by_file_io_type.sql\n  views/p_s/host_summary_by_file_io.sql\n  views/p_s/x_host_summary_by_file_io.sql\n  views/p_s/host_summary_by_statement_type.sql\n  views/p_s/x_host_summary_by_statement_type.sql\n  views/p_s/host_summary_by_statement_latency.sql\n  views/p_s/x_host_summary_by_statement_latency.sql\n  views/p_s/host_summary_by_stages.sql\n  views/p_s/x_host_summary_by_stages.sql\n  views/p_s/host_summary.sql\n  views/p_s/x_host_summary.sql\n  views/p_s/wait_classes_global_by_avg_latency.sql\n  views/p_s/x_wait_classes_global_by_avg_latency.sql\n  views/p_s/wait_classes_global_by_latency.sql\n  views/p_s/x_wait_classes_global_by_latency.sql\n  views/p_s/waits_by_user_by_latency.sql\n  views/p_s/x_waits_by_user_by_latency.sql\n  views/p_s/waits_by_host_by_latency.sql\n  views/p_s/x_waits_by_host_by_latency.sql\n  views/p_s/waits_global_by_latency.sql\n  views/p_s/x_waits_global_by_latency.sql\n  views/p_s/metrics.sql\n  views/p_s/processlist.sql\n  views/p_s/x_processlist.sql\n  views/p_s/sessions.sql\n  views/p_s/x_sessions.sql\n  views/p_s/session_ssl_status.sql\n\n  procedures/create_synonym_db.sql\n  procedures/execute_prepared_stmt.sql\n  procedures/diagnostics.sql\n  procedures/ps_statement_avg_latency_histogram.sql\n  procedures/ps_trace_statement_digest.sql\n  procedures/ps_trace_thread.sql\n  procedures/ps_setup_disable_background_threads.sql\n  procedures/ps_setup_disable_consumer.sql\n  procedures/ps_setup_disable_instrument.sql\n  procedures/ps_setup_disable_thread.sql\n  procedures/ps_setup_enable_background_threads.sql\n  procedures/ps_setup_enable_consumer.sql\n  procedures/ps_setup_enable_instrument.sql\n  procedures/ps_setup_enable_thread.sql\n  procedures/ps_setup_reload_saved.sql\n  procedures/ps_setup_reset_to_default.sql\n  procedures/ps_setup_save.sql\n  procedures/ps_setup_show_disabled.sql\n  procedures/ps_setup_show_disabled_consumers.sql\n  procedures/ps_setup_show_disabled_instruments.sql\n  procedures/ps_setup_show_enabled.sql\n  procedures/ps_setup_show_enabled_consumers.sql\n  procedures/ps_setup_show_enabled_instruments.sql\n  procedures/ps_truncate_all_tables.sql\n  procedures/statement_performance_analyzer.sql\n  procedures/table_exists.sql\n\n  after_setup.sql\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Component Sources in CMake\nDESCRIPTION: Defines a list of source files containing various MySQL server component implementations including audit, logging, security, and other core services. These files form the foundation of the MySQL server component architecture.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/server_component/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MYSQL_SERVER_COMPONENT_SOURCES\n  audit_api_message_service_imp.cc\n  backup_lock_service.cc\n  bulk_data_service.cc\n  clone_protocol_service.cc\n  component_status_var_service.cc\n  component_sys_var_service.cc\n  debug_keyword_service_imp.cc\n  debug_sync_service_imp.cc\n  dynamic_loader_path_filter.cc\n  host_application_signal_imp.cc\n  keyring_iterator_service_imp.cc\n  log_builtins.cc\n  log_builtins_filter.cc\n  log_sink_buffer.cc\n  log_sink_perfschema.cc\n  log_sink_trad.cc\n  log_source_backtrace.cc\n  mysql_cond_service.cc\n  mysql_connection_attributes_iterator_imp.cc\n  mysql_current_thread_reader_imp.cc\n  mysql_global_variable_attributes_service_imp.cc\n  mysql_mutex_service.cc\n  mysql_psi_system_service.cc\n  mysql_runtime_error.cc\n  mysql_rwlock_service.cc\n  mysql_server_runnable_imp.cc\n  mysql_string_service.cc\n  ongoing_transaction_query_service.cc\n  page_track_service.cc\n  persistent_dynamic_loader.cc\n  plugin_registry_service.cc\n  security_context_imp.cc\n  server_component.cc\n  system_variable_source_imp.cc\n  table_access_service.cc\n  thread_cleanup_register_imp.cc\n  udf_metadata_imp.cc\n  audit_api_connection_service_imp.cc\n  mysql_query_attributes_imp.cc\n  mysql_server_keyring_lockable_imp.cc\n  mysql_system_variable_update_imp.cc\n  mysql_system_variable_reader_imp.cc\n  mysql_thd_attributes_imp.cc\n  transaction_delegate_control_imp.cc\n  mysql_audit_print_service_longlong_data_source_imp.cc\n  mysql_audit_print_service_double_data_source_imp.cc\n  mysql_command_services_imp.cc\n  mysql_command_consumer_imp.cc\n  mysql_command_delegates.cc\n  mysql_command_backend.cc\n  mysql_status_variable_reader_imp.cc\n  storing_auto_thd.cc\n  mysql_thd_store_imp.cc\n  set_variables_helper.cc\n  mysql_thd_store_imp.cc\n  mysql_server_event_tracking_bridge_imp.cc\n  dynamic_loader_service_notification_imp.cc\n  event_tracking_information.cc\n  mysql_stored_program_imp.cc\n  mysql_simple_error_log_imp.cc\n  mysql_statement_service_imp.cc\n  mysql_signal_handler_imp.cc\n  applier_metrics_service_imp.cc\n  mysql_library_imp.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating System Data Header Files in MySQL Build\nDESCRIPTION: Defines custom commands to generate C++ header files from SQL scripts for system data, tables, and user information. These headers are compiled into the server to initialize MySQL system tables during bootstrap.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_data.h\n  COMMAND comp_sql\n  mysql_system_data\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data.sql\n  sql_commands_system_data.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables_data_fix.h\n  COMMAND comp_sql\n  mysql_system_tables_data_fix\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data_fix.sql\n  sql_commands_system_tables_data_fix.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_data_fix.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables.h\n  COMMAND comp_sql\n  mysql_system_tables\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables.sql\n  sql_commands_system_tables.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_users.h\n  COMMAND comp_sql\n  mysql_system_users\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_users.sql\n  sql_commands_system_users.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_users.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_help_data.h\n  COMMAND comp_sql\n  fill_help_tables\n  ${CMAKE_CURRENT_SOURCE_DIR}/fill_help_tables.sql\n  sql_commands_help_data.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/fill_help_tables.sql\n)\n```\n\n----------------------------------------\n\nTITLE: Protocol Participant Definition\nDESCRIPTION: Defines the protocol participants and their roles in the index management system, including Users (U), Coordinators (C), and Participants (P).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/CreateIndex.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nU - user, initiator of protocol\\nC - coordinator\\nP - participants, including coordinator node\\n\\nRT_ - request type, current state\\n\\nP always replies to C with current RT_ (initially RT_DICT_PREPARE)\\nC replies to U at the end\n```\n\n----------------------------------------\n\nTITLE: Disconnect Sequence Implementation in MySQL Transporter\nDESCRIPTION: Details the 6-step disconnection sequence involving CMVMI, TransporterRegistry, and socket handling, including error condition handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/transporter/trp.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  1. CMVMI calls TransporterRegistry::start_disconnecting() when it decides to\\n     initiate disconnection. The TCP transporter may also call\\n     start_disconnecting() if an I/O error occurs on the socket.\\n  2. start_disconnecting() sets the performStates[node] entry to DISCONNECTING\\n     as a flag for start_clients_thread.\\n  3. The thread running in start_clients_thread() notices the change of\\n     state, closes the socket, and sets Transporter::m_connected to false\\n     as a flag for update_connections().\\n  4. update_connections() notices the flag m_connect set to false, and\\n     this causes it to call TransporterRegistry::report_disconnect().\\n  5. TransporterRegistry::report_disconnect() sets performStates[node] to\\n     DISCONNECTED, and invokes TransporterCallback::reportDisconnect().\\n  6. TransporterCallback::reportDisconnect() sends the signal DISCONNECT_REP\\n     to the CMVMI block, completing the disconnection.\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors with set_error() in C++\nDESCRIPTION: This C++ code snippet illustrates the use of `set_error()` to report errors from plugin functions to the Harness.  The function takes a `PluginFuncEnv` pointer, an `ErrorType`, and a format string with arguments for error message formatting. It is crucial for indicating failure to the Harness.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nset_error(PluginFuncEnv* env, ErrorType error, const char* format, ...);\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Strings Library\nDESCRIPTION: This snippet sets the source files used to build the strings library.  It includes various `.cc` files related to collations, character types, string conversion, and XML handling.  These files are essential for the functionality of the strings library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(STRINGS_SOURCES\n  collations.cc\n  collations_internal.cc\n  ctype-big5.cc\n  ctype-bin.cc\n  ctype-cp932.cc\n  ctype-czech.cc\n  ctype-euc_kr.cc\n  ctype-eucjpms.cc\n  ctype-extra.cc\n  ctype-gb18030.cc\n  ctype-gb2312.cc\n  ctype-gbk.cc\n  ctype-latin1.cc\n  ctype-mb.cc\n  ctype-simple.cc\n  ctype-sjis.cc\n  ctype-tis620.cc\n  ctype-uca.cc\n  ctype-ucs2.cc\n  ctype-ujis.cc\n  ctype-utf8.cc\n  ctype-win1250ch.cc\n  ctype.cc\n  dtoa.cc\n  int2str.cc\n  my_strchr.cc\n  my_strtoll10.cc\n  my_uctype.cc\n  sql_chars.cc\n  str_alloc.cc\n  xml.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling ZSTD with gcc/MinGW\nDESCRIPTION: Demonstrates how to compile a project that uses the ZSTD dynamic library with gcc/MinGW. The command links a test file with the ZSTD DLL and includes the necessary header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/zstd-1.5.5/lib/dll/example/README.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ngcc $(CFLAGS) -Iinclude\\ test-dll.c -o test-dll dll\\libzstd.dll\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_conditions Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_conditions target, which handles condition checking in the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_conditions\n  SRCS\n    \"internal/conditions.cc\"\n  HDRS\n    \"internal/conditions.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::log_internal_voidify\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Routing Plugin for MySQL Router in CMake\nDESCRIPTION: Defines a MySQL Router plugin named 'rest_routing' with its source files and dependencies. The plugin requires routing, HTTP server library, and REST API components, and will be installed in the Router's plugin directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_routing/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_PLUGIN(rest_routing\n  SOURCES\n  rest_routing_blocked_hosts.cc\n  rest_routing_config.cc\n  rest_routing_connections.cc\n  rest_routing_destinations.cc\n  rest_routing_health.cc\n  rest_routing_list.cc\n  rest_routing_plugin.cc\n  rest_routing_routes_status.cc\n  rest_routing_status.cc\n  rest_routing_guidelines.cc\n  rest_routing_guidelines_schema.cc\n  REQUIRES\n  routing\n  http_server_lib\n  rest_api\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies for Abseil Project\nDESCRIPTION: Sets various CMake policies to ensure compatibility and enable specific features for the Abseil project build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (POLICY CMP0025)\n  cmake_policy(SET CMP0025 NEW)\nendif (POLICY CMP0025)\n\nif (POLICY CMP0057)\n  cmake_policy(SET CMP0057 NEW)\nendif (POLICY CMP0057)\n\nif (POLICY CMP0048)\n  cmake_policy(SET CMP0048 NEW)\nendif (POLICY CMP0048)\n\nif (POLICY CMP0077)\n  cmake_policy(SET CMP0077 NEW)\nendif (POLICY CMP0077)\n\nif (POLICY CMP0067)\n  cmake_policy(SET CMP0067 NEW)\nendif (POLICY CMP0067)\n\nif (POLICY CMP0141)\n  cmake_policy(SET CMP0141 NEW)\nendif (POLICY CMP0141)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for CNO Library\nDESCRIPTION: Establishes dependencies for the 'cno' library on the custom target used to generate Huffman codes. This ensures proper build order.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEPENDENCIES(cno\n  do_cno_huffman_generator\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration for Different Compiler Flags\nDESCRIPTION: Creates libraries with non-standard compiler flags, handling exceptions and RTTI based on compiler version\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MSVC OR MSVC_VERSION GREATER 1310)\n  cxx_library(gtest_no_exception \"${cxx_no_exception}\"\n    src/gtest-all.cc)\nendif()\ncxx_library(gtest_main_no_rtti \"${cxx_no_rtti}\"\n  src/gtest-all.cc src/gtest_main.cc)\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Server Kernel Static Library in CMake\nDESCRIPTION: Defines the ndbkernel static library using CMake's ADD_LIBRARY command. This library includes various core components of the MySQL Server kernel implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbkernel STATIC\n  ArenaPool.cpp\n  Configuration.cpp\n  DynArr256.cpp\n  Emulator.cpp\n  GlobalData.cpp\n  LockQueue.cpp\n  Mutex.cpp\n  Ndbinfo.cpp\n  Pool.cpp\n  Rope.cpp\n  SafeCounter.cpp\n  SafeMutex.cpp\n  SectionReader.cpp\n  SegmentList.cpp\n  StaticSlotPool.cpp\n  TransientPagePool.cpp\n  TransientSlotPool.cpp\n  VMSignal.cpp\n  WatchDog.cpp\n  mt_thr_config.cpp\n  ndbd_malloc.cpp\n  ndbd_malloc_impl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Router Routing Plugin\nDESCRIPTION: Creates a Harness plugin for routing with required source files and dependencies. Configures output name, installation destination, and links RapidJSON library for JSON processing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# The Plugin\nadd_harness_plugin(routing_plugin\n OUTPUT_NAME \"routing\"\n SOURCES\n routing_plugin.cc\n plugin_config.cc\n REQUIRES routing\n DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n )\nTARGET_LINK_LIBRARIES(routing_plugin PRIVATE extra::rapidjson)\n```\n\n----------------------------------------\n\nTITLE: NdbCntr Master Request Handling\nDESCRIPTION: Describes the process for handling master requests in the NDB Cluster Controller, including coordination of parallel node restarts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nRunning NdbCntr\n\nWhen receiving CNTR_MASTER_REQ\n1) If I'm not master send CNTR_MASTER_REF (including master node id)\n2) If I'm master\n   Coordinate parallell node restarts\n   send CNTR_MASTER_CONF (node restart)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for MySQL REST Service Database\nDESCRIPTION: Defines a static library for various database functionalities of the MySQL REST service. This includes numerous sources related to database operations and query handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nADD_STATIC_LIBRARY(mysql_rest_service_db\n  mrs/database/filter_object_generator.cc\n  mrs/database/monitor/schema_monitor.cc\n  mrs/database/monitor/slow_query_monitor.cc\n  mrs/database/monitor/schema_monitor_factory.cc\n  mrs/database/query_entries_auth_privileges.cc\n  mrs/database/query_changes_auth_user.cc\n  mrs/database/query_changes_content_file.cc\n  mrs/database/query_changes_content_set.cc\n  mrs/database/query_changes_db_object.cc\n  mrs/database/query_changes_db_schema.cc\n  mrs/database/query_changes_db_service.cc\n  mrs/database/query_changes_url_host.cc\n  mrs/database/query_entries_audit_log.cc\n  mrs/database/query_entries_auth_app.cc\n  mrs/database/query_entries_auth_role.cc\n  mrs/database/query_entries_content_file.cc\n  mrs/database/query_entries_content_set.cc\n  mrs/database/query_entries_db_object.cc\n  mrs/database/query_entries_db_schema.cc\n  mrs/database/query_entries_db_service.cc\n  mrs/database/query_entries_object.cc\n  mrs/database/query_entries_url_host.cc\n  mrs/database/query_entry_auth_user.cc\n  mrs/database/query_entry_content_file.cc\n  mrs/database/query_entry_fields.cc\n  mrs/database/query_factory.cc\n  mrs/database/query_entry_group_row_security.cc\n  mrs/database/query_uuid.cc\n  mrs/database/query_rest_table.cc\n  mrs/database/query_rest_table_single_row.cc\n  mrs/database/query_rest_sp.cc\n  mrs/database/query_rest_function.cc\n  mrs/database/query_rest_sp_media.cc\n  mrs/database/query_rest_task.cc\n  mrs/database/query_rest_task_status.cc\n  mrs/database/query_rest_table_updater.cc\n  mrs/database/query_router_info.cc\n  mrs/database/query_state.cc\n  mrs/database/query_statistics.cc\n  mrs/database/query_version.cc\n  mrs/database/query_warnings.cc\n  mrs/database/mysql_task_monitor.cc\n  mrs/database/helper/query.cc\n  mrs/database/helper/bind.cc\n  mrs/database/helper/query_table_columns.cc\n  mrs/database/helper/query_audit_log_maxid.cc\n  mrs/database/helper/query_retry_on_ro.cc\n  mrs/database/helper/query_gtid_executed.cc\n  mrs/database/helper/object_checksum.cc\n  mrs/database/helper/sp_function_query.cc\n  mrs/database/entry/object.cc\n  mrs/database/json_mapper/json_input.cc\n  mrs/database/json_mapper/common.cc\n  mrs/database/json_mapper/change.cc\n  mrs/database/json_mapper/delete.cc\n  mrs/database/json_mapper/insert.cc\n  mrs/database/json_mapper/update.cc\n  mrs/database/json_mapper/select.cc\n  mrs/database/json_mapper/check.cc\n\n  COMPILE_DEFINITIONS\n  PRIVATE MYSQL_ROUTER_LOG_DOMAIN=\"mrs_db\"\n\n  LINK_LIBRARIES\n  mysql_rest_service_if\n  harness-library\n  router_lib\n\n  INCLUDE_DIRECTORIES\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}\n  PRIVATE\n  ${mysql_rest_service_db_includes}\n)\n```\n\n----------------------------------------\n\nTITLE: InnoDB Transaction System Mutex Dependencies\nDESCRIPTION: Defines complex mutex and lock interactions within the InnoDB transaction system, tracking dependencies between various mutexes and synchronization primitives\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/innodb/trx_sys_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Setting Option for Logging Protobuf Messages\nDESCRIPTION: This snippet defines a CMake option to enable logging of protobuf messages for the MySQL X plugin. This can be useful for debugging communication between the plugin and other services.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(XPLUGIN_LOG_PROTOBUF 1 CACHE STRING \\\"Enable logging of protobuf messages\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Determining Active Protobuf Backend - Python\nDESCRIPTION: This Python snippet determines the currently active implementation backend for Protobuf by using the api_implementation module. Useful for diagnostic purposes to check configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from google.protobuf.internal import api_implementation\n>>> print(api_implementation.Type())\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Profiling Test Suite Target\nDESCRIPTION: Adds a custom target for running the profile test suite with specific configuration options. Sets up parallel execution based on processor count, configures memory options, and specifies behaviors for test failures and retries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(run-profile-suite\n  COMMAND perl ./mysql-test-run.pl\n  --accept-test-fail\n  --clean-vardir\n  --force\n  --max-test-fail=10\n  --mem\n  --mysqld=--binlog-format=row\n  --parallel=${NPROC}\n  --retry=0\n  --skip-rpl\n  --suite=${MTR_SUITE_STRING}\n\n  USES_TERMINAL # So that Ninja will show progress, rather than buffer output.\n  VERBATIM\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Shared Library for Metadata Cache\nDESCRIPTION: This code snippet defines a shared library 'metadata_cache' in the MySQL Router using CMake. It specifies source files, linking libraries, compile definitions, and sets the output name. Dependencies include standard MySQL Router components and extra libraries like rapidjson. The library is configured to assist in handling metadata.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(metadata_cache\n  metadata_factory.cc\n  cluster_metadata.cc\n  cluster_metadata_ar.cc\n  cluster_metadata_gr.cc\n  metadata_cache.cc\n  metadata_cache_ar.cc\n  metadata_cache_gr.cc\n  cache_api.cc\n  group_replication_metadata.cc\n  gr_notifications_listener.cc\n  log_suppressor.cc\n  router_options.cc\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  router_cluster\n  router_mysqlxclient\n  router_mysqlxmessages\n  router_utils\n  routing_guidelines\n  PRIVATE\n  extra::rapidjson\n\n  OUTPUT_NAME \"mysqlrouter_metadata_cache\"\n\n  COMPILE_DEFINITIONS\n  MYSQL_ROUTER_LOG_DOMAIN=\"metadata_cache\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Keyring UDF Plugin Build in CMake\nDESCRIPTION: This CMake snippet configures the build process for the MySQL Keyring UDF plugin. It disables missing profile warnings, adds the plugin to the build, specifies the output name, and adds a server-specific definition.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/keyring_udf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_PLUGIN(keyring_udf\n  keyring_udf.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"keyring_udf\"\n  )\n\nADD_DEFINITIONS(-DMYSQL_SERVER)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library with Properties and Linking\nDESCRIPTION: Conditionally adds a static library named 'fido2' using the source files in FIDO_SOURCES and COMPAT_SOURCES if BUILD_STATIC_LIBS is enabled. It sets the output name to 'fido2_static' on Windows (excluding MinGW) and links the library against the libraries in TARGET_LIBRARIES. Finally, it installs the static library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(BUILD_STATIC_LIBS)\n\tadd_library(fido2 STATIC ${FIDO_SOURCES} ${COMPAT_SOURCES})\n\tif(WIN32 AND NOT MINGW)\n\t\tset_target_properties(fido2 PROPERTIES OUTPUT_NAME fido2_static)\n\tendif()\n\ttarget_link_libraries(fido2 ${TARGET_LIBRARIES})\n\tinstall(TARGETS fido2 ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\t\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Error Number Ranges\nDESCRIPTION: This snippet sets the language for error messages and defines starting error numbers for different categories in MySQL. It specifies English and Latin1 as supported languages and sets two different starting error numbers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_start_decreasing.txt#2025-04-21_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nlanguages english=eng latin1;\n\nstart-error-number 4000\nstart-error-number 3000\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasic\nargs: -n Bug16834333 T1\nmax-time: 900\"\n```\n\n----------------------------------------\n\nTITLE: Adding Classifier Test File with Extra Sources\nDESCRIPTION: Configures the classifier test file for the routing guidelines module, including additional source files and library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST_FILE(test_classifier.cc\n  MODULE routing_guidelines\n  EXTRA_SOURCES ../src/routing_simulator.cc\n  LIB_DEPENDS routing_guidelines-static;\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating export header\nDESCRIPTION: This snippet generates an export header file for the `cbor` library. The header file is named `cbor_export.h` and is placed in the binary directory.  It is then set as a public include directory. It uses `GenerateExportHeader` which is assumed to be a defined CMake macro.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GenerateExportHeader)\ngenerate_export_header(cbor EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/cbor/cbor_export.h)\ntarget_include_directories(cbor PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\ndo_not_install(FILES ${CMAKE_CURRENT_BINARY_DIR}/cbor/cbor_export.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/cbor)\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterJ Dependencies\nDESCRIPTION: Defines the required JAR file dependencies for ClusterJ component\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(DEP\n  clusterj-api.jar\n  clusterj-core.jar\n  clusterj-tie.jar\n  jtie.jar\n  ndbjtie.jar\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CURL Feature Flags in CMake\nDESCRIPTION: Configures specific CURL features and protocols, enabling HTTP-only mode while disabling LDAP, SSH2, and other optional components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CURL_DISABLE_LDAP ON)\nSET(CURL_DISABLE_LDAP ON CACHE INTERNAL \"\" FORCE)\n\nSET(CURL_ENABLE_EXPORT_TARGET OFF)\nSET(CURL_ENABLE_EXPORT_TARGET OFF CACHE INTERNAL \"\" FORCE)\n\nSET(CURL_USE_LIBSSH2 OFF)\nSET(CURL_USE_LIBSSH2 OFF CACHE INTERNAL \"\" FORCE)\n\nSET(HTTP_ONLY ON)\nSET(HTTP_ONLY ON CACHE INTERNAL \"\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Binary Log Event Standalone Library in CMake\nDESCRIPTION: Defines the mysql_binlog_event_standalone library target using the LIBS_MYSQL_CREATE_LIBRARY macro. This version is built as a standalone library with different compilation definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/event/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nLIBS_MYSQL_CREATE_LIBRARY(mysql_binlog_event_standalone\n  TARGET_SRCS ${TARGET_SRCS}\n  TARGET_HEADERS ${TARGET_HEADERS}\n  LINK_LIBRARIES ${LINK_LIBRARIES}\n  COMPILE_DEFINITIONS STANDALONE_BINLOG BINLOG_EVENT_COMPRESSION_USE_ZSTD_${WITH_ZSTD}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Assembly Optimizations for ZSTD\nDESCRIPTION: Conditionally enables assembly language optimizations for x86_64 platforms (Linux and Apple) by adding an optimized Huffman decompress implementation for AMD64 architecture.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF((LINUX AND NOT LINUX_ARM) OR\n    (APPLE AND NOT APPLE_ARM))\n  ENABLE_LANGUAGE(ASM)\n  LIST(APPEND ZSTD_SRCS\n    ${ZSTD_VERSION_DIR}/lib/decompress/huf_decompress_amd64.S\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL Collation Handler Functions\nDESCRIPTION: Collection of functions for string comparison and manipulation according to specific collation rules. Includes functionality for sorting, pattern matching, and substring operations with collation awareness.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstrnncoll()   // compares two strings by collation\nstrnncollsp() // compares strings ignoring trailing spaces\nstrnxfrm()    // creates sort key for memcmp()\nlike_range()  // creates LIKE range for optimizer\nwildcmp()     // wildcard comparison for LIKE\nstrcasecmp()  // 0-terminated string comparison\ninstr()       // finds first substring appearance\nhash_sort()   // calculates collation-aware hash value\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL SQL Shared Sources\nDESCRIPTION: Defines core SQL server shared source files including authentication, security, query optimization, and iterator implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSET(SQL_SHARED_SOURCES\n  auth/authentication_policy.cc\n  auth/auth_acls.cc\n  # ... shortened for brevity ...\n  lock.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Installing libcurl Targets\nDESCRIPTION: This section handles the installation of the built libcurl targets (both static and shared). It specifies the destination directories for archives, libraries, and runtime components.  It also exports the targets for use by other CMake projects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/lib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CURL_ENABLE_EXPORT_TARGET)\n  if(BUILD_STATIC_LIBS)\n    install(TARGETS ${LIB_STATIC}\n      EXPORT ${TARGETS_EXPORT_NAME}\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n  endif()\n  if(BUILD_SHARED_LIBS)\n    install(TARGETS ${LIB_SHARED}\n      EXPORT ${TARGETS_EXPORT_NAME}\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\n  endif()\n\n  export(TARGETS ${libcurl_export}\n    FILE \"${PROJECT_BINARY_DIR}/libcurl-target.cmake\"\n    NAMESPACE ${PROJECT_NAME}::\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Node Restart Testing in Shell\nDESCRIPTION: This code snippet involves testing node restart functionalities under various conditions. It uses the `testNodeRestart` command and is applied to cluster operation scenarios. The script sets execution limits and specifies databases as parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 2500\ncmd: testNodeRestart\nargs: -l 1 -n MixedPkReadPkUpdate\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: test_event\nargs: -n BackwardCompatiblePollInconsistency T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Fuzz Testing for HTTP Auth Backend\nDESCRIPTION: This snippet sets up fuzz testing for the HTTP authentication backend, linking necessary libraries, sharing execution directories and specifying the initialization of tests with a corpus directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(routertest_fuzz_http_auth_backend\n    fuzz_auth_backend.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/http_auth_backend.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/http_auth_error.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/kdf_sha_crypt.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/kdf_pbkdf2.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/mcf_error.cc\n    COMPONENT Router\n    LINK_LIBRARIES\n      OpenSSL::SSL\n      OpenSSL::Crypto\n      extra::rapidjson\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    SKIP_INSTALL\n    )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nLIBFUZZER_ADD_TEST(routertest_fuzz_http_auth_backend\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus_auth_backend)\n```\n\n----------------------------------------\n\nTITLE: Slave Transaction Recovery Protocol\nDESCRIPTION: Implements the slave node's response to DICT_TAKEOVER_REQ requests, including operation state analysis and recovery point determination.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/MasterTakeover.txt#2025-04-21_snippet_4\n\nLANGUAGE: pseudocode\nCODE:\n```\nop_count = 0;\nrollforward_op_state = OS_COMPLETED;\nrollback_op_state = OS_INITIAL;\nfor each operation\n  op_count++;\n  if (weight(op->m_state) < weight(rollforward_op_state))\n    rollforward_op = op->op_key;\n    rollforward_op_state = op->m_state;\n  if (weight(op->m_state) >= weight(rollback_op_state))\n    rollback_op = op->op_key;\n    rollback_op_state = op->m_state;\n  return DICT_TAKEOVERCONF with\n    pending_trans, trans_state, op_count,\n    rollforward_op, rollforward_op_state,\n    rollback_op, rollback_op_state\n```\n\n----------------------------------------\n\nTITLE: Building NDB Client Static Link Test Program in CMake\nDESCRIPTION: Creates a test executable to verify linking against the static NDB client library. This ensures the library is correctly built and can be linked against.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_NDB)\n  RETURN()\nENDIF()\n\n# Build test program to check linking against ndclient_static\nADD_EXECUTABLE(ndbclient_static_link_test ndbclient_link_test.cpp)\nSET_TARGET_PROPERTIES(ndbclient_static_link_test PROPERTIES ENABLE_EXPORTS TRUE)\nTARGET_LINK_LIBRARIES(ndbclient_static_link_test ndbclient_static)\n```\n\n----------------------------------------\n\nTITLE: Async HTTP 2 Client Handling in Python\nDESCRIPTION: Illustrates the setup of an async HTTP 2 client using libcno. It connects to an HTTP 2 server, sends requests, and handles responses asynchronously. Requires Python 3.5+ and asyncio.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = await cno.connect(event_loop, 'https://example.com/')\nclient.loop       # :: asyncio.BaseEventLoop -- `event_loop`\nclient.transport  # :: asyncio.Transport\nclient.is_http2   # :: bool\nclient.scheme     # :: str  -- https\nclient.authority  # :: str  -- example.com\n\nresponse = await client.request('GET', '/', [('user-agent', 'libcno/0.1')])  # cno.Response\nresponse.code     # :: int\nresponse.headers  # :: [(str, str)]\nresponse.payload  # :: asyncio.StreamReader\nasync for push in response.pushed:\n    push.method   # :: str\n    push.path     # :: str\n    push.headers  # :: [(str, str)]\n    await push.response  # :: cno.Response\n    # or push.cancel()\n\nresponse = await client.request('POST', '/whatever', [], b'payload')\n# `request`, like `respond`, also accepts `cno.Channel`s as payload.\n\nclient.close()\n\n# `cno.connect` automatically sets up a default SSL context and creates\n# a TCP connection. To simply create an `asyncio.Protocol`:\nclient = cno.Client(event_loop, authority='example.com', scheme='https')\n\n# A shorthand for `cno.connect` followed by `client.request`:\nresponse = await cno.request(event_loop, 'GET', 'https://example.com/path', ...)\nresponse.conn.close()\n```\n\n----------------------------------------\n\nTITLE: Adding Microbenchmark Test Files in CMake\nDESCRIPTION: This snippet iterates through a list containing the `test_microbench.cc` file, adding it as a Google Test using the `ADD_GOOGLETEST_FILE` macro. It specifies the extra source file (`benchmark.cc`), module name, include directories, and library dependencies for the test file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"FOREACH(test_file\n    test_microbench.cc\n  )\n  ADD_GOOGLETEST_FILE(${test_file}\n    EXTRA_SOURCES ${CMAKE_SOURCE_DIR}/unittest/gunit/benchmark.cc\n    MODULE ${TEST_MODULE}\n    SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n    INCLUDE_DIRS ../include/\n    LIB_DEPENDS harness_stdx)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Google Test File in CMake\nDESCRIPTION: This CMake script snippet configures the addition of a Google Test file for the MySQL Router plugin. It defines the source file and includes additional source files as well as library dependencies needed for the test. Key parameters include 'MODULE' for naming, 'EXTRA_SOURCES' for additional files, and 'LIB_DEPENDS' for required libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/plugin_info/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_googletest_file(${CMAKE_CURRENT_SOURCE_DIR}/test_plugin_info_app.cc\n  MODULE \"mysqlrouter_plugin_info\"\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/plugin.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/library_file.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/plugin_info_app.cc\n  LIB_DEPENDS\n    harness-library\n    extra::rapidjson\n    routertest_helpers\n  INCLUDE_DIRS \n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/\n)\n```\n\n----------------------------------------\n\nTITLE: SSE pshufb Instruction Implementation Details\nDESCRIPTION: Technical explanation of SSE pshufb instruction behavior for UTF-8 validation, including table size limitations and bit handling rules. The implementation uses two lookup tables and a five-step operation process for byte validation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/README.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating MySQL Keyring Encryption Test Executable in CMake\nDESCRIPTION: Adds the mysql_keyring_encryption_test executable to the build system. Specifies source files, linked libraries, and marks it as a test component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/keyring_encryption_test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql_keyring_encryption_test\n  ${KEYRING_ENCRYPTION_TEST_SOURCE} ${EXTRA_SOURCES}\n  LINK_LIBRARIES ${KEYRING_ENCRYPTION_TEST_LIBRARIES}\n  COMPONENT Test\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data Records\nDESCRIPTION: Tab-delimited test data records containing string patterns, dates and numeric values. Shows systematic variations in string lengths and sequential date and numeric values.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/t4.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\na`\ta`\t1000-01-1\t-5000\ta`\t-5000\naaa\taaa\t1000-01-2\t-4999\taaa\t-4999\nabaa\tabaa\t1000-01-3\t-4998\tabaa\t-4998\nacaaa\tacaaa\t1000-01-4\t-4997\tacaaa\t-4997\nadaaaa\tadaaaa\t1000-01-5\t-4996\tadaaaa\t-4996\naeaaaaa\taeaaaaa\t1000-01-6\t-4995\taeaaaaa\t-4995\nafaaaaaa\tafaaaaaa\t1000-01-7\t-4994\tafaaaaaa\t-4994\nagaaaaaaa\tagaaaaaaa\t1000-01-8\t-4993\tagaaaaaaa\t-4993\na^aaaaaaaa\ta^aaaaaaaa\t1000-01-9\t-4992\ta^aaaaaaaa\t-4992\na_aaaaaaaaa\ta_aaaaaaaaa\t1000-01-10\t-4991\ta_aaaaaaaaa\t-4991\n```\n\n----------------------------------------\n\nTITLE: MSVC Compiler Flag Configuration\nDESCRIPTION: Adds the /bigobj compiler flag for MSVC to fix section limit exceeded error when compiling mock.cc.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xcl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MSVC)\n  ADD_COMPILE_FLAGS(\n    mock/mock.cc\n    COMPILE_FLAGS \"/bigobj\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Updating Abseil in Bazel WORKSPACE\nDESCRIPTION: Demonstrates how to update the Abseil dependency to the latest commit in a Bazel WORKSPACE file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_5\n\nLANGUAGE: bazel\nCODE:\n```\nhttp_archive(\n  name = \"com_google_absl\",\n  urls = [\"https://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip\"],  # 2020-02-11T18:50:53Z\n  strip_prefix = \"abseil-cpp-98eb410c93ad059f9bba1bf43f5bb916fc92a5ea\",\n  sha256 = \"aabf6c57e3834f8dc3873a927f37eaf69975d4b28117fc7427dfb1c661542a87\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GoogleTest Files for Unit Testing\nDESCRIPTION: This group of snippets demonstrates how to add various test files for unit testing, specifying module dependencies and library dependencies for each test file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_time.cc\n  MODULE http\n  LIB_DEPENDS http_common\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_uri.cc\n  MODULE http\n  LIB_DEPENDS http_common\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_base64.cc\n  MODULE http\n  LIB_DEPENDS http_common\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_auth_backend.cc\n  MODULE http\n  LIB_DEPENDS http_auth_backend_lib\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_kdf_sha_crypt.cc\n  MODULE http\n  LIB_DEPENDS http_auth_backend_lib\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_kdf_pbkdf2.cc\n  MODULE http\n  LIB_DEPENDS http_auth_backend_lib\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_passwd.cc\n  MODULE http\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/passwd.cc\n  LIB_DEPENDS\n    http_auth_backend_lib\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_auth.cc\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/http_auth.cc\n  MODULE http\n  LIB_DEPENDS\n    http_auth_realm_lib\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_auth_method.cc\n  MODULE http\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/http_auth_method_basic.cc\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_content_type.cc\n  MODULE http\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_matcher.cc\n  MODULE http\n  )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_googletest_file(test_http_request_router.cc\n  MODULE http\n  EXTRA_SOURCES\n    ${CMAKE_SOURCE_DIR}/unittest/gunit/benchmark.cc\n  LIB_DEPENDS\n    router_utils        # uri\n    http_server_lib     # request-router\n    test-helpers        # init_test_logger\n    ext::icu\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Flags in CMake\nDESCRIPTION: This snippet checks for various compiler flags and attributes supported by the C compiler. It verifies flags like '-Wno-unused-result' and those related to frame pointers and ensures appropriate options are set based on the checks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# See if the compiler supports -Wno-unused-result.\ncheck_c_compiler_flag(\"-Wno-unused-result\" have_w_no_unused_result)\n\ncheck_c_compiler_flag(\"-fno-omit-frame-pointer -momit-leaf-frame-pointer\" have_omit_leaf_fp)\ncheck_c_source_compiles(\"\\n  #if !(__i386__ || __x86_64__ || __riscv || __aarch64__)\n  #error unsupported arch\n  #endif\n  int main() { return 0; }\n  \"\n  use_omit_leaf_fp)\n\nif (use_omit_leaf_fp)\n  add_compile_options(-fno-omit-frame-pointer -momit-leaf-frame-pointer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring NdbApi Examples in CMake\nDESCRIPTION: This snippet sets up an option for building NdbApi example programs and adds the corresponding subdirectory if enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(WITH_NDBAPI_EXAMPLES\n  \"Build the NdbApi example programs\" ${WITH_NDBAPI_EXAMPLES_DEFAULT})\nIF(WITH_NDBAPI_EXAMPLES)\n  MESSAGE(STATUS \"Building the NdbApi example programs\")\n  ADD_SUBDIRECTORY(ndbapi-examples)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating CNO Library Target\nDESCRIPTION: Defines a static library target 'cno' that includes the necessary source files from the LIBCNO version directory. This library is integral to the MySQL project’s functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(cno STATIC\n  ${LIBCNO_VERSION_DIR}/cno/common.c\n  ${LIBCNO_VERSION_DIR}/cno/core.c\n  ${LIBCNO_VERSION_DIR}/cno/hpack.c\n  ${LIBCNO_VERSION_DIR}/picohttpparser/picohttpparser.c\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing with CMake\nDESCRIPTION: Enables testing when gtest_build_tests flag is set, which allows running tests using 'make test' or ctest command\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_build_tests)\n  enable_testing()\n```\n\n----------------------------------------\n\nTITLE: Qmgr President and Cluster Participant Processes\nDESCRIPTION: Describes the president node's role in accepting new nodes and the cluster participant's response sequence during node addition.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nPresident - When accepting a CM_REGREQ\n1) Send CM_REGCONF to starting node\n2) Send CM_ADD(Prepare) to all started nodes + starting node\n3) Send CM_ADD(AddCommit) to all started nodes\n4) Send CM_ADD(CommitNew) to starting node\n\nCluster participant -\n1) Wait for both CM_NODEINFOREQ from starting and CM_ADD(Prepare) from pres.\n2) Send CM_ACKADD(Prepare)\n3) Wait for CM_ADD(AddCommit) from president\n4) Send CM_ACKADD(AddCommit)\n```\n\n----------------------------------------\n\nTITLE: Creating fido2-assert Executable in CMake\nDESCRIPTION: This snippet defines the `fido2-assert` executable, specifying its source files, including `fido2-assert.c`, `assert_get.c`, `assert_verify.c`, `base64.c`, `util.c`, and the compatibility sources defined in `COMPAT_SOURCES`.  It creates the executable using these files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(fido2-assert\n\tfido2-assert.c\n\tassert_get.c\n\tassert_verify.c\n\tbase64.c\n\tutil.c\n\t${COMPAT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Section Compression in MySQL Build\nDESCRIPTION: Configures compiler options to enable compressed debug sections when the COMPRESS_DEBUG_SECTIONS flag is set, which can save disk space.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nIF(COMPRESS_DEBUG_SECTIONS)\n  MY_CHECK_CXX_COMPILER_FLAG(\"-gz\" HAVE_COMPRESS_GZ_OPTION)\n  IF(HAVE_COMPRESS_GZ_OPTION)\n    TARGET_COMPILE_OPTIONS(sql_gis PRIVATE -gz)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting GCS Source Files (CMake)\nDESCRIPTION: This section defines the source files for the GCS library. It includes the GCS interface sources defined previously, along with additional sources related to XCom bindings, internal message handling, networking, state exchange, and other GCS-specific features.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(GCS_SOURCES\n  ${GCS_INTERFACE_SOURCES}\n  src/gcs_interface_factory.cc\n  src/bindings/xcom/gcs_xcom_communication_interface.cc\n  src/bindings/xcom/gcs_xcom_control_interface.cc\n  src/bindings/xcom/gcs_xcom_group_management.cc\n  src/bindings/xcom/gcs_internal_message_headers.cc\n  src/bindings/xcom/gcs_internal_message.cc\n  src/bindings/xcom/gcs_xcom_networking.cc\n  src/bindings/xcom/gcs_xcom_utils.cc\n  src/bindings/xcom/gcs_xcom_state_exchange.cc\n  src/bindings/xcom/gcs_xcom_group_member_information.cc\n  src/bindings/xcom/gcs_message_stages.cc\n  src/bindings/xcom/gcs_xcom_view_identifier.cc\n  src/bindings/xcom/gcs_xcom_interface.cc\n  src/bindings/xcom/gcs_xcom_notification.cc\n  src/bindings/xcom/gcs_message_stage_lz4.cc\n  src/bindings/xcom/gcs_xcom_statistics_interface.cc\n  src/bindings/xcom/gcs_xcom_proxy.cc\n  src/bindings/xcom/gcs_xcom_communication_protocol_changer.cc\n  src/bindings/xcom/gcs_message_stage_split.cc\n  src/bindings/xcom/gcs_xcom_synode.cc\n  src/bindings/xcom/gcs_xcom_expels_in_progress.cc\n  src/bindings/xcom/gcs_xcom_statistics_manager.cc\n  src/bindings/xcom/gcs_xcom_statistics_storage_impl.cc)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up NDB Client Subdirectories in CMake\nDESCRIPTION: Adds the necessary subdirectories for building NDB client components, including common libraries, management API, and NDB API layers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(common)\nADD_SUBDIRECTORY(mgmapi)\nADD_SUBDIRECTORY(ndbapi)\n```\n\n----------------------------------------\n\nTITLE: Configuring package config file\nDESCRIPTION: This snippet uses `configure_package_config_file` from `CMakePackageConfigHelpers` to generate a CMake package configuration file (`libcborConfig.cmake`) from a template (`libcborConfig.cmake.in`).  This file is used by other CMake projects to find and use the `cbor` library. It also sets the `INSTALL_DESTINATION` and `PATH_VARS`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n\tlibcborConfig.cmake.in\n\t${CMAKE_CURRENT_BINARY_DIR}/libcborConfig.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libcbor\n\tPATH_VARS CMAKE_INSTALL_INCLUDEDIR\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories for MySQL Router - CMake\nDESCRIPTION: Specifies the include directories for the \"mysqlrouter_plugin_info\" target, using a private include path configured at \"${CMAKE_BINARY_DIR}/include\". This relies on CMake to properly set up build paths during the compilation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/plugin_info/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n  mysqlrouter_plugin_info\n  PRIVATE\n  ${CMAKE_BINARY_DIR}/include\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking for getrlimit Function in CMake\nDESCRIPTION: This snippet checks if the getrlimit function exists in the system and sets the HAVE_GETRLIMIT variable accordingly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nCHECK_FUNCTION_EXISTS (getrlimit HAVE_GETRLIMIT)\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_test_helpers Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_test_helpers target, which provides test helper functions for the Abseil logging system. It specifies source files, headers, compiler options, dependencies, and is marked as testonly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_test_helpers\n  SRCS\n    \"internal/test_helpers.cc\"\n  HDRS\n    \"internal/test_helpers.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_globals\n    absl::log_initialize\n    absl::log_internal_globals\n    absl::log_severity\n    GTest::gtest\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Language Standard Compatibility Tests for NDB Headers in CMake\nDESCRIPTION: Creates test executables to verify that NDB headers compile correctly with different language standards. It sets up separate tests for C++ and C, ensuring compatibility with C++11, C99, and recent C standards. The tests create source files that include all relevant headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Test that public headers can be compiled with different language standards.\n\nSET(NDBAPI_CXX_STANDARD 11)\nSET(NDBAPI_C_STANDARD 99)\n\n# Different versions of cmake recognize different language versions.\nIF(CMAKE_VERSION VERSION_LESS 3.21)\n  SET(RECENT_C_STANDARD 11)\nELSE()\n  SET(RECENT_C_STANDARD 23)\nENDIF()\n\nSET(INCLUDE_DIRECTORIES\n  ${CMAKE_SOURCE_DIR}/include\n  ${CMAKE_BINARY_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  )\n\n# Check all C and C++ header files compiles with C++11 (NDBAPI_CXX_STANDARD)\n# They will also implicitly be checked to build with the current C++ version\n# used to compile the whole MySQL.\n\nSTRING(REGEX REPLACE\n  \"(${CMAKE_CURRENT_BINARY_DIR}/)?([^;}]+);*\" \"#include \\\"\\\\2\\\"\\n\"\n  CXX_HEADERS_CONTENT\n  \"${NDB_GENERAL_HEADERS};${NDB_MGMAPI_HEADERS};${NDB_NDBAPI_HEADERS}\")\nSTRING_APPEND(CXX_HEADERS_CONTENT \"\\nint main(){}\\n\")\n\nCONFIGURE_FILE_CONTENT(\"${CXX_HEADERS_CONTENT}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb-api-cxx.cpp\n  )\n\nMYSQL_ADD_EXECUTABLE(ndb_installed_cxx\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb-api-cxx.cpp\n  DEPENDENCIES GenError\n  SKIP_INSTALL\n  )\nSET_PROPERTY(TARGET ndb_installed_cxx\n  PROPERTY CXX_STANDARD ${NDBAPI_CXX_STANDARD})\nSET_PROPERTY(TARGET ndb_installed_cxx PROPERTY CXX_EXTENSIONS OFF)\nSET_PROPERTY(TARGET ndb_installed_cxx PROPERTY CXX_STANDARD_REQUIRED ON)\n\n# Check all C header files compiles with C99 (NDBAPI_C_STANDARD) and recent C\n# standard.\n\nSTRING(REGEX REPLACE\n  \"(${CMAKE_CURRENT_BINARY_DIR}/)?([^;}]+);*\" \"#include \\\"\\\\2\\\"\\n\"\n  C_HEADERS_CONTENT \"${NDB_GENERAL_HEADERS};${NDB_MGMAPI_HEADERS}\")\nSTRING_APPEND(C_HEADERS_CONTENT \"\\nint main(){}\\n\")\n\nCONFIGURE_FILE_CONTENT(\"${C_HEADERS_CONTENT}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb-api-c.c\n  )\n\nFOREACH(VER ${NDBAPI_C_STANDARD} ${RECENT_C_STANDARD})\n  MYSQL_ADD_EXECUTABLE(ndb_installed_c${VER}\n    ${CMAKE_CURRENT_BINARY_DIR}/ndb-api-c.c\n    DEPENDENCIES GenError\n    SKIP_INSTALL\n    )\n  SET_PROPERTY(TARGET ndb_installed_c${VER} PROPERTY C_STANDARD ${VER})\n  SET_PROPERTY(TARGET ndb_installed_c${VER} PROPERTY C_EXTENSIONS OFF)\nENDFOREACH()\n\nSET_PROPERTY(TARGET ndb_installed_c${NDBAPI_C_STANDARD}\n  PROPERTY C_STANDARD_REQUIRED ON)\n# All platforms may not have support for recent C standard allow fallback to\n# older standard.\nSET_PROPERTY(TARGET ndb_installed_c${RECENT_C_STANDARD}\n  PROPERTY C_STANDARD_REQUIRED OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for MySQL Binary Log Event Libraries in CMake\nDESCRIPTION: Sets up the link libraries required for the MySQL binary log event libraries. These include external libraries like zstd and zlib, as well as internal MySQL libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/event/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LINK_LIBRARIES\n  ext::zstd\n  ext::zlib\n  mysql_containers\n  mysql_gtid\n  mysql_serialization\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Command: Event Tests\nDESCRIPTION: Test configuration for event-related tests with specific test cases and arguments\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--13-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmd: test_event\nargs: -n bug37672 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path for MySQL and NDB\nDESCRIPTION: Adds MySQL and NDB CMake repositories to the module search path and includes necessary NDB-specific CMake modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\n    ${CMAKE_SOURCE_DIR}/cmake\n    ${CMAKE_SOURCE_DIR}/storage/ndb/cmake)\nINCLUDE(ndb_add_target_property)\nINCLUDE(ndb_add_test)\nINCLUDE(ndb_add_executable)\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Function with is_running() in C++\nDESCRIPTION: This C++ code snippet demonstrates a typical implementation of the `start()` function for a MySQL plugin. It uses a `while` loop with `is_running()` to perform a forever-loop, and it includes comments to represent the run-once code and clean-up code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid start()\n    {\n      // run-once code\n\n      while (is_running())\n      {\n        // forever-loop code\n      }\n\n      // clean-up code\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring GoogleTest for TLS Test\nDESCRIPTION: Sets up a GoogleTest file for OpenSSL TLS testing with specific library dependencies and module configuration\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_GOOGLETEST_FILE(test_tls.cc\n  MODULE openssl\n  LIB_DEPENDS\n    routertest_helpers\n    harness_net_ts\n    harness_tls\n    harness-library\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling LTO Warning Flags for mysqld\nDESCRIPTION: Configures warning flags for Link-Time Optimization to handle specific warnings in Boost libraries and uninitialized variables during linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO)\n  # We may get errors in boost/geometry/srs/projections/proj/ob_tran.hpp\n  # and several other boost files.\n  MY_CHECK_CXX_COMPILER_WARNING(\"error=maybe-uninitialized\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    TARGET_LINK_OPTIONS(mysqld PRIVATE ${HAS_WARN_FLAG})\n  ENDIF()\n  # The linker claims that unmasked_server_id is uninitialized.\n  MY_CHECK_CXX_COMPILER_WARNING(\"error=uninitialized\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    TARGET_LINK_OPTIONS(mysqld PRIVATE ${HAS_WARN_FLAG})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Dropping All Tables - CMake\nDESCRIPTION: Defines an executable named 'drop_all_tabs' for testing purposes. It compiles from the 'drop_all_tabs.cpp' source file and links against the NDBTEST and NDBCLIENT libraries to facilitate integration tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_EXECUTABLE(drop_all_tabs drop_all_tabs.cpp NDBTEST NDBCLIENT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Source Files in MySQL\nDESCRIPTION: Conditionally adds platform-specific source files based on the target operating system. Removes net_ns.cc if HAVE_SETNS is not defined, adds daemon file for non-Windows, and adds Windows-specific connection handlers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT HAVE_SETNS)\n  LIST(REMOVE_ITEM SQL_SOURCE ../sql-common/net_ns.cc)\nENDIF()\n\nIF(NOT WIN32)\n  LIST(APPEND SQL_SOURCE mysqld_daemon.cc)\nENDIF()\n\nIF(WIN32)\n  LIST(APPEND SQL_SOURCE\n              conn_handler/named_pipe_connection.cc\n              conn_handler/shared_memory_connection.cc\n              named_pipe.cc\n              restart_monitor_win.cc\n      )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Keyring File Component Dependencies\nDESCRIPTION: Specifies the libraries that the keyring_file component depends on, including the keyring_common library, OpenSSL libraries for cryptographic operations, and the MySQL system library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/keyring_file/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(KEYRING_FILE_LIBRARIES\n  keyring_common\n  OpenSSL::SSL OpenSSL::Crypto\n  library_mysys\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterJ Tie JAR File in CMake\nDESCRIPTION: Invokes the CREATE_JAR function to build the clusterj-tie JAR file using the specified Java sources, classpath, and dependencies. Also includes additional resource files from the src/main/resources directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-tie/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(clusterj-tie ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  DEPENDENCIES ${JAR_DEPENDENCIES}\n  EXTRA_FILES src/main/resources/META-INF src/main/resources/com\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking Windows Version Compatibility in CMake\nDESCRIPTION: This snippet checks if the Windows version is compatible with MySQL Server requirements. It uses 'wmic' to retrieve the OS version and ensures it's at least Windows Server 2016 or Windows 10.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  # Load policies. This is needed in order to parse the wmic version check.\n  CMAKE_MINIMUM_REQUIRED(VERSION 3.5.1)\n  EXECUTE_PROCESS(COMMAND wmic os get version\n    OUTPUT_VARIABLE NT_RELEASE_VERSION\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    RESULT_VARIABLE WMIC_RESULT\n    )\n  IF(WMIC_RESULT EQUAL 0)\n    STRING(REPLACE \"\\r\" \"\" NT_RELEASE_VERSION \"${NT_RELEASE_VERSION}\")\n    STRING(REPLACE \"\\n\" \"\" NT_RELEASE_VERSION \"${NT_RELEASE_VERSION}\")\n    STRING(REGEX MATCH \"Version[ ]+([0-9\\.]+)\" V_NUM \"${NT_RELEASE_VERSION}\")\n    MESSAGE(STATUS \"NT_RELEASE_VERSION is ${NT_RELEASE_VERSION}\")\n    IF(CMAKE_MATCH_1)\n      IF(CMAKE_MATCH_1 VERSION_LESS \"10\")\n        MESSAGE(FATAL_ERROR\n          \"Need at least Windows Server 2016, or Windows 10, to build\")\n      ENDIF()\n    ENDIF()\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Script Configuration for MySQL Server\nDESCRIPTION: Configures and installs Windows-specific script files for MySQL server. These include utility scripts like mysqld_multi and mysqldumpslow, which are processed from templates and installed as server scripts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n\n  SET(BIN_SCRIPTS\n    mysqld_multi\n    mysqldumpslow\n    )\n\n  FOREACH(file ${BIN_SCRIPTS})\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${file}.pl.in\n      ${CMAKE_CURRENT_BINARY_DIR}/${file}.pl ESCAPE_QUOTES @ONLY\n      )\n    INSTALL_SCRIPT(${CMAKE_CURRENT_BINARY_DIR}/${file}.pl\n      COMPONENT Server_Scripts\n      )\n  ENDFOREACH()\n\nELSE()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MinChassis Library in CMake\nDESCRIPTION: Defines the list of source files that make up the MinChassis library. This includes core component framework files such as dynamic loaders, registry implementations, and service implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/libminchassis/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LIBMINCHASSIS_SOURCES\n  component_common.cc\n  dynamic_loader.cc\n  dynamic_loader_scheme_file.cc\n  mc_psi_system_service.cc\n  mc_rwlock_service.cc\n  minimal_chassis.cc\n  minimal_chassis_runtime_error_imp.cc\n  my_metadata.cc\n  my_ref_counted.cc\n  mysql_component.cc\n  mysql_service_implementation.cc\n  registry.cc\n  registry_no_lock.cc\n  rwlock_scoped_lock.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding JIT Executor Plugin to MySQL Router\nDESCRIPTION: Configures the JIT executor plugin as a Harness plugin with specific requirements, destinations, and dependencies\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(jit_executor_plugin\n  OUTPUT_NAME \"jit_executor\"\n  SOURCES ${jit_executor_plugin_SOURCE}\n  REQUIRES harness_stdx router_mysql \"${EXT_JIT_LIBRARY}\"\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS SRV Support for MySQL Client in CMake\nDESCRIPTION: Sets up platform-specific DNS SRV API support for the MySQL client library. This enables MySQL clients to use DNS SRV records for service discovery, with different implementations for Windows, FreeBSD, and other Unix platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nUNSET(HAVE_WIN32_DNS_SRV)\nUNSET(HAVE_UNIX_DNS_SRV)\nSET(HAVE_DNS_SRV 0)\nIF(WIN32)\n  LIST(APPEND LIBS_TO_LINK dnsapi)\n  SET(HAVE_WIN32_DNS_SRV 1 PARENT_SCOPE)\n  SET(HAVE_DNS_SRV 1)\n  MESSAGE(STATUS \"Found Win32 DNS SRV APIs\")\nELSEIF(FREEBSD)\n  SET(HAVE_DNS_SRV 1)\n  SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)\n  MESSAGE(STATUS \"BSD built in DNS SRV APIs\")\nELSE()\n  FIND_LIBRARY(RESOLV_LIBRARY NAMES resolv)\n  IF (RESOLV_LIBRARY)\n    LIST(APPEND LIBS_TO_LINK ${RESOLV_LIBRARY})\n    SET(HAVE_UNIX_DNS_SRV 1 PARENT_SCOPE)\n    SET(HAVE_DNS_SRV 1)\n    MESSAGE(STATUS \"Found Unix DNS SRV APIs\")\n  ENDIF()\nENDIF()\n\nIF(HAVE_DNS_SRV EQUAL 0)\n  MESSAGE(FATAL_ERROR \"Can't find neither Win32 nor Unix DNS SRV APIs\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Compiler Options for InnoDB\nDESCRIPTION: Configures MSVC-specific compiler options for InnoDB, including treating warnings as errors, adjusting warning levels, and disabling specific warning codes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MSVC AND NOT WIN32_CLANG)\n  ADD_COMPILE_OPTIONS(\"/WX\")\n  STRING(REPLACE \"/W3\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  STRING(REPLACE \"/W3\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  ADD_COMPILE_OPTIONS(\"/W4\")\n  ADD_COMPILE_OPTIONS(\"/wd4324\")\n  ADD_COMPILE_OPTIONS(\"/wd4589\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router Bootstrap Executable in CMake\nDESCRIPTION: Defines the MySQL Router Bootstrap executable, specifying source files, linked libraries, and include directories. It also sets up installation rules for the executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/bootstrap/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysqlrouter_bootstrap\n  bootstrap_configurator.cc\n  bootstrap_mysql_account.cc\n  main.cc\n  COMPONENT Router\n  LINK_LIBRARIES\n  harness-library\n  router_lib\n  router_frontend_lib\n  mysql_rest_service_if\n  mysql_rest_service_db\n  ${CMAKE_DL_LIBS}\n  )\nTARGET_INCLUDE_DIRECTORIES(mysqlrouter_bootstrap\n  PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../router/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../http/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../metadata_cache/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../router/src\n  )\n\nADD_INSTALL_RPATH(mysqlrouter_bootstrap \"${ROUTER_INSTALL_RPATH}\")\n\nIF(SOLARIS)\n  TARGET_LINK_LIBRARIES(mysqlrouter_bootstrap -lnsl -lsocket)\nENDIF()\n\n\nINSTALL(TARGETS mysqlrouter_bootstrap\n  RUNTIME DESTINATION ${ROUTER_INSTALL_BINDIR} COMPONENT Router\n  ARCHIVE DESTINATION ${ROUTER_INSTALL_LIBDIR} COMPONENT Router\n  LIBRARY DESTINATION ${ROUTER_INSTALL_LIBDIR} COMPONENT Router\n  NAMELINK_SKIP\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking for Standard Alignment Support in CMake\nDESCRIPTION: This snippet checks for the availability of the new standard aligned new delete operator within the C++ environment. This is crucial for controlling memory alignment during object creation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_cxx_source_compiles(\"\n  #include <new>\n  int main() { (::operator delete)((::operator new)(256, std::align_val_t(16)), std::align_val_t(16)); return 0; }\n  \"\n  HAVE_STD_ALIGN_VAL_T)\nif(HAVE_STD_ALIGN_VAL_T)\n  set(HAVE_STD_ALIGN_VAL_T 1)\n  set(ENABLE_ALIGNED_NEW_DELETE 1)\nelse()\n  set(HAVE_STD_ALIGN_VAL_T 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking and Appending C Compiler Warning Flags\nDESCRIPTION: Checks if the C++ compiler supports the '-Wdeprecated-declarations' warning flag using a custom CMake function MY_CHECK_CXX_COMPILER_WARNING. If supported, the flag is appended to the CMAKE_C_FLAGS variable to enable the warning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n\"MY_CHECK_CXX_COMPILER_WARNING(\\\"-Wdeprecated-declarations\\\" HAS_WARN_FLAG)\nIF (HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_C_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Router Runtime Directories for Standalone Installation\nDESCRIPTION: Creates empty directories for logs, runtime files, configuration, and data when using the STANDALONE installation layout. Sets appropriate directory permissions for each folder.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Install logging, runtime, config and data folders\nIF(INSTALL_LAYOUT STREQUAL \"STANDALONE\")\n  FOREACH(_dirvar LOGDIR RUNTIMEDIR CONFIGDIR DATADIR)\n    SET(_dir ${ROUTER_INSTALL_${_dirvar}})\n    IF(NOT _dir)\n      MESSAGE(FATAL_ERROR \"ROUTER_INSTALL_${_dirvar} is empty.\")\n    ENDIF()\n\n    # create a empty directory in the install folder\n    INSTALL(DIRECTORY DESTINATION \"${_dir}\"\n      DIRECTORY_PERMISSIONS\n      OWNER_WRITE OWNER_READ OWNER_EXECUTE\n      GROUP_WRITE GROUP_READ GROUP_EXECUTE\n      WORLD_READ WORLD_EXECUTE\n      COMPONENT Router\n      )\n  ENDFOREACH()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Inhibiting Warning Messages for MSVC\nDESCRIPTION: This snippet defines several MSVC specific compiler flags to suppress various warning messages during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC AND NOT WIN32_CLANG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4661\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4141\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4805\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4018\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4091\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4275\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" /wd4251\")\nELSE()\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-sign-compare\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-unused-function\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Integrating Abseil in a CMake Project with Basic Configuration\nDESCRIPTION: Example CMakeLists.txt showing how to integrate Abseil into an application project. It sets the C++ standard to 14, adds the Abseil subdirectory, and links specific Abseil libraries to the executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(my_app_project)\n\n# Pick the C++ standard to compile with.\n# Abseil currently supports C++14, C++17, and C++20.\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nadd_subdirectory(abseil-cpp)\n\nadd_executable(my_exe source.cpp)\ntarget_link_libraries(my_exe absl::base absl::synchronization absl::strings)\n```\n\n----------------------------------------\n\nTITLE: Lock Dependency Definitions - MySQL Server\nDESCRIPTION: Defines directed graph edges (arcs) between different types of locks in MySQL Server. Each arc specifies the source lock, its state (R for read/W for write), target lock, and operation type (S for shared/X for exclusive where applicable).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"rwlock/sql/gtid_commit_rollback\" STATE \"W\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"rwlock/sql/gtid_commit_rollback\" STATE \"W\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\nARC FROM \"rwlock/sql/gtid_retrieved\" STATE \"R\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"rwlock/sql/gtid_retrieved\" STATE \"R\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"rwlock/sql/gtid_retrieved\" STATE \"R\" TO \"mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Adding Install RPATH Conditionally\nDESCRIPTION: Conditionally adds an install RPATH to the 'fido2' target if CRYPTO_CUSTOM_LIBRARY is enabled.  This ensures that the library can find its dependencies at runtime, using $ORIGIN to refer to the directory where the library is installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(CRYPTO_CUSTOM_LIBRARY)\n  ADD_INSTALL_RPATH(fido2 \\\"\\$ORIGIN\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Multi Event Test\nDESCRIPTION: This command sets up a test event focused on multi-event scenarios, enabling an examination of concurrency issues or race conditions within the MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncmd: test_event\nargs: -n Multi\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Subscription Start Sequence\nDESCRIPTION: Shows the sequence for starting a subscription, depicting the flow between USER, DICT(Master), Slaves, and SUMA components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Dbdict.txt#2025-04-21_snippet_3\n\nLANGUAGE: ascii-diagram\nCODE:\n```\nUSER                      DICT(Master)         (Slaves)           SUMA\n=======================================================================\nSUB_START_REQ\n-------------------------->\n                          SUB_START_REQ\n                          ---------------------->\n\t\t\t\t\t\tSUB_START_REQ\n\t\t\t\t\t\t------------------>\n\t\t\t\t\t\t<------------------\n                          SUB_START_CONF\n                          <----------------------\nSUB_START_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Source Files\nDESCRIPTION: Defines two sets of source files for InnoDB: INNOBASE_ZIP_DECOMPRESS_SOURCES for compression functionality and INNOBASE_SOURCES for the main storage engine functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(INNOBASE_ZIP_DECOMPRESS_SOURCES\n  buf/buf.cc\n  buf/checksum.cc\n  dict/dict.cc\n  dict/mem.cc\n  mem/memory.cc\n  os/file.cc\n  os/os0thread.cc\n  page/zipdecompress.cc\n  rem/rec.cc\n  rem/rem0wrec.cc\n  ut/crc32.cc\n  ut/ut.cc\n  ut/ut0new.cc)\n```\n\n----------------------------------------\n\nTITLE: Add Harness Plugin for Metadata Cache\nDESCRIPTION: This snippet adds a harness plugin called 'metadata_cache_plugin', designed to be used within the MySQL Router environment. It links necessary source files, sets output configurations, and integrates with metadata cache dependencies. This plugin is essential for plugin-based modularity.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_harness_plugin(metadata_cache_plugin\n  OUTPUT_NAME \"metadata_cache\"\n  SOURCES\n  metadata_cache_plugin.cc\n  plugin_config.cc\n  REQUIRES\n  metadata_cache\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\nTARGET_LINK_LIBRARIES(metadata_cache_plugin PRIVATE extra::rapidjson)\nGENERATE_EXPORT_HEADER(metadata_cache_plugin\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/metadata_cache_plugin_export.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router CLI Executables in CMake\nDESCRIPTION: Defines CLI executables like `rest_cli` and `mysqlrouter_passwd`, specifying components, source files, and libraries linked for execution. It highlights the command-line utilities' role in interacting with the HTTP client and password management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(rest_cli\n  rest_cli.cc\n  COMPONENT Router\n  LINK_LIBRARIES\n  harness-library\n  http_client\n  SKIP_INSTALL\n  )\nMYSQL_ADD_EXECUTABLE(mysqlrouter_passwd\n  passwd_cli.cc\n  passwd.cc\n  COMPONENT Router\n  LINK_LIBRARIES\n  harness-library\n  router_utils\n  http_auth_backend_lib\n  )\nADD_INSTALL_RPATH(mysqlrouter_passwd \"${ROUTER_INSTALL_RPATH}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSTD Library Source Files in CMake\nDESCRIPTION: Defines the source files needed to build the ZSTD compression library. Lists all source files categorized by their functionality (common, compress, decompress, and dictBuilder components).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nPROJECT(zstd)\n# CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9)\n\nSET(ZSTD_SRCS\n  ${ZSTD_VERSION_DIR}/lib/common/debug.c\n  ${ZSTD_VERSION_DIR}/lib/common/entropy_common.c\n  ${ZSTD_VERSION_DIR}/lib/common/error_private.c\n  ${ZSTD_VERSION_DIR}/lib/common/fse_decompress.c\n  ${ZSTD_VERSION_DIR}/lib/common/pool.c\n  ${ZSTD_VERSION_DIR}/lib/common/threading.c\n  ${ZSTD_VERSION_DIR}/lib/common/xxhash.c\n  ${ZSTD_VERSION_DIR}/lib/common/zstd_common.c\n\n  ${ZSTD_VERSION_DIR}/lib/compress/fse_compress.c\n  ${ZSTD_VERSION_DIR}/lib/compress/hist.c\n  ${ZSTD_VERSION_DIR}/lib/compress/huf_compress.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_compress.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_compress_literals.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_compress_sequences.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_compress_superblock.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_double_fast.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_fast.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_lazy.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_ldm.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstdmt_compress.c\n  ${ZSTD_VERSION_DIR}/lib/compress/zstd_opt.c\n\n  ${ZSTD_VERSION_DIR}/lib/decompress/huf_decompress.c\n  ${ZSTD_VERSION_DIR}/lib/decompress/zstd_ddict.c\n  ${ZSTD_VERSION_DIR}/lib/decompress/zstd_decompress_block.c\n  ${ZSTD_VERSION_DIR}/lib/decompress/zstd_decompress.c\n\n  ${ZSTD_VERSION_DIR}/lib/dictBuilder/cover.c\n  ${ZSTD_VERSION_DIR}/lib/dictBuilder/divsufsort.c\n  ${ZSTD_VERSION_DIR}/lib/dictBuilder/fastcover.c\n  ${ZSTD_VERSION_DIR}/lib/dictBuilder/zdict.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: MassiveRollback4\nDESCRIPTION: This snippet outlines a test scenario labeled 'MassiveRollback4', which evaluates the rollback capabilities of the database under heavier transactional loads and its implications on performance.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBasic\nargs: -n MassiveRollback4 T1 T6 D1 D2\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Conditional Return based on Group Replication Definition\nDESCRIPTION: This CMake snippet checks if `WITHOUT_GROUP_REPLICATION` is defined. If it is, the function returns, effectively skipping the subsequent configuration steps for group replication.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/group_replication/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (DEFINED WITHOUT_GROUP_REPLICATION AND WITHOUT_GROUP_REPLICATION)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Build Targets for System Schema in CMake\nDESCRIPTION: Defines the primary build targets for the System Schema components. The GenSysSchemaC target generates C code, while the conditional GenSysSchema target is created only when building with server support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/sys_schema/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMY_ADD_CUSTOM_TARGET(GenSysSchemaC\n  ALL\n  DEPENDS comp_sql sql_commands\n  COMMENT \"Generating Sys Schema C code\"\n)\n\nIF(NOT WITHOUT_SERVER)\n  MY_ADD_CUSTOM_TARGET(GenSysSchema\n    ALL\n    DEPENDS sql_commands\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding test_utility_string Google Test\nDESCRIPTION: This snippet adds the `test_utility_string.cc` file as a Google Test. It specifies include directories and extra source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_GOOGLETEST_FILE(test_utility_string.cc\n  MODULE harness\n  INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/include/\n  INCLUDE_DIRS ${MySQLRouter_BINARY_DIR}/src/harness/include/\n  EXTRA_SOURCES\n    ${CMAKE_SOURCE_DIR}/unittest/gunit/benchmark.cc\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Setting Unix-Specific Compilation Options for Symbol Visibility\nDESCRIPTION: Applies the hidden visibility flag to the library_mysys target specifically on Unix platforms. This controls the visibility of symbols in the compiled library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  TARGET_COMPILE_OPTIONS(library_mysys PRIVATE \"-fvisibility=hidden\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Protobuf Build Options\nDESCRIPTION: Configures build options for Protobuf, including disabling building tests and examples, and settings for shared libraries depending on the platform.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET(protobuf_BUILD_TESTS OFF CACHE INTERNAL \"\")\nSET(protobuf_BUILD_EXAMPLES OFF CACHE INTERNAL \"\")\nIF(SOLARIS OR WIN32_CLANG)\n  SET(protobuf_BUILD_SHARED_LIBS OFF CACHE INTERNAL \"\")\nELSE()\n  IF(CMAKE_CXX_FLAGS MATCHES \"-static-libgcc\")\n    SET(protobuf_BUILD_SHARED_LIBS OFF CACHE INTERNAL \"\")\n  ELSEIF(NOT DEFINED protobuf_BUILD_SHARED_LIBS)\n    SET(protobuf_BUILD_SHARED_LIBS ON CACHE INTERNAL \"\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific SafeProcess Executables in CMake\nDESCRIPTION: Defines platform-specific executable configurations for mysqltest_safe_process and mysqltest_safe_kill. On Windows, it uses safe_process_win.cc and safe_kill_win.cc, while on other platforms it uses safe_process.cc and applies RPC-related compile definitions if necessary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lib/My/SafeProcess/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WIN32)\n  MYSQL_ADD_EXECUTABLE(mysqltest_safe_process safe_process_win.cc\n    COMPONENT Test)\n  MYSQL_ADD_EXECUTABLE(mysqltest_safe_kill safe_kill_win.cc\n    COMPONENT Test)\nELSE()\n  MYSQL_ADD_EXECUTABLE(mysqltest_safe_process safe_process.cc\n    COMPONENT Test)\n  IF(TARGET ext::rpc)\n    TARGET_COMPILE_DEFINITIONS(mysqltest_safe_process PRIVATE\n      $<TARGET_PROPERTY:ext::rpc,INTERFACE_COMPILE_DEFINITIONS>\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Component Directories\nDESCRIPTION: CMake directives to add subdirectories for building various MySQL server components including core infrastructure modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(portlib)\nADD_SUBDIRECTORY(debugger)\nADD_SUBDIRECTORY(util)\nADD_SUBDIRECTORY(logger)\nADD_SUBDIRECTORY(transporter)\nADD_SUBDIRECTORY(mgmcommon)\n```\n\n----------------------------------------\n\nTITLE: Setting Unix-specific MySQL Client Library Properties\nDESCRIPTION: Configures Unix-specific properties for the MySQL client library, including output name, version, and soversion. This ensures proper library naming and versioning on Unix platforms according to their conventions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  SET(OS_SHARED_LIB_VERSION \"${SHARED_LIB_MAJOR_VERSION}\")\n  IF(NOT FREEBSD AND NOT APPLE)\n    STRING_APPEND(OS_SHARED_LIB_VERSION\n      \".${SHARED_LIB_MINOR_VERSION}.${SHARED_LIB_PATCH_VERSION}\")\n  ENDIF()\n  # Name of shared library is libmysqlclient on Unix\n  SET(UNIX_OUTPUT_NAME OUTPUT_NAME mysqlclient)\n  SET(UNIX_VERSION     VERSION     \"${OS_SHARED_LIB_VERSION}\")\n  SET(UNIX_SOVERSION   SOVERSION   \"${SHARED_LIB_MAJOR_VERSION}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining scan test command for updates and restarts\nDESCRIPTION: Defines a 'testScan' command aimed at testing the 'ScanUpdateRestart' scenario involving tables 'D1' and 'D2' with a significant maximum execution time of 1800 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanUpdateRestart D1 D2\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Client Test Executable in CMake\nDESCRIPTION: Configures the mysql_client_test executable with mysqlclient and rapidjson dependencies. Links required libraries for testing purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/testclients/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql_client_test mysql_client_test.cc COMPONENT Test)\nTARGET_LINK_LIBRARIES(mysql_client_test mysqlclient extra::rapidjson)\n```\n\n----------------------------------------\n\nTITLE: Adding Log Filter Component in MySQL Server CMake Configuration\nDESCRIPTION: This snippet adds the dragnet log filter component to the MySQL server build, specifying the source file and indicating it's a module-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/logging/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(log_filter_dragnet\n  log_filter_dragnet.cc\n  MODULE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Deadlock Detector Support in CMake\nDESCRIPTION: Conditionally adds the deadlock detector implementation source file when the NDB_MUTEX_DEADLOCK_DETECTOR flag is set in the compiler flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(CMAKE_CXX_FLAGS MATCHES \" -DNDB_MUTEX_DEADLOCK_DETECTOR\")\n  SET(EXTRA_SRC ${EXTRA_SRC} NdbMutex_DeadlockDetector.cpp)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Keyring Component Libraries with CMake\nDESCRIPTION: This snippet defines the libraries required by the keyring component, including keyring_common, OpenSSL, and libdl. These libraries will be linked with the keyring component during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(KEYRING_COMPONENT_LIBS\n  keyring_common\n  OpenSSL::SSL OpenSSL::Crypto\n  ${LIBDL}\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Files Loop for MySQL Router Testing\nDESCRIPTION: Iterates through the list of test files and adds each as a test with the required dependencies and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(test_file ${test_files})\n  ADD_TEST_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${test_file}\n    MODULE ${TEST_MODULE}\n    LIB_DEPENDS\n      routing_export_all\n      test-helpers\n    INCLUDE_DIRS\n      ${CMAKE_CURRENT_SOURCE_DIR}/../include\n      ${CMAKE_CURRENT_SOURCE_DIR}/../src\n      ${CMAKE_CURRENT_SOURCE_DIR}/../../harness/tests  # mock_io_service.h\n  )\nENDFOREACH()\nDOWNGRADE_STRINGOP_WARNINGS(routertest_routing_setup_tcp_service)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Hash Test Target in CMake\nDESCRIPTION: Configures a test target 'hash_test' for testing the hash library functionality. It includes test source files and depends on various components needed for comprehensive testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    hash_test\n  SRCS\n    \"hash_test.cc\"\n    \"internal/hash_test.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::cord_test_helpers\n    absl::hash\n    absl::hash_testing\n    absl::core_headers\n    absl::btree\n    absl::flat_hash_map\n    absl::flat_hash_set\n    absl::node_hash_map\n    absl::node_hash_set\n    absl::spy_hash_state\n    absl::meta\n    absl::int128\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Test Names to Create Tests - CMake\nDESCRIPTION: Iterates over a predefined list of test names and uses the `PFS_ADD_TEST` macro to create test executables for each, ensuring that warnings are appropriately handled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(tests\\n pfs_instr_class\\n pfs_instr_class-oom\\n pfs_instr\\n pfs_instr-oom\\n pfs_account-oom\\n pfs_host-oom\\n pfs_user-oom\\n pfs_noop\\n pfs\\n pfs_misc\\n pfs_mem\\n)\\nFOREACH(testname ${tests})\\n  PFS_ADD_TEST(${testname})\\n  DOWNGRADE_STRINGOP_WARNINGS(${testname}-t)\\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for MySQL REST Service Helper\nDESCRIPTION: Defines a static library for the MySQL REST service helper functions, including various components related to media detection and JSON handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nADD_STATIC_LIBRARY(mysql_rest_service_helper\n  helper/media_detector.cc\n  helper/media_type.cc\n  helper/json/to_string.cc\n  helper/json/to_sqlstring.cc\n  helper/json/jvalue.cc\n  helper/json/merge.cc\n  helper/token/jwt.cc\n  helper/mysql_column_types.cc\n  helper/mysql_numeric_value.cc\n  helper/digester/sha256_digest.cc\n\n  COMPILE_DEFINITIONS\n  PRIVATE MYSQL_ROUTER_LOG_DOMAIN=\"mrs_helper\"\n\n  LINK_LIBRARIES\n  mysql_rest_service_if\n  harness-library\n  router_lib\n  http_common\n\n  INCLUDE_DIRECTORIES\n  PRIVATE ${PROJECT_SOURCE_DIR}/src/router/include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Managing Compiler Flags for MySQL Build\nDESCRIPTION: Implements a whitelisting approach for compiler flags that should be preserved in MySQL binary distributions. This allows controlling which compiler directives and flags are propagated to the final build configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSET(COMPILE_DEFINITIONS_WHITELIST\n)\n\n# In practice: only in use on Solaris\nSET(CMAKE_C_FLAGS_WHITELIST\n  \"-m64\"\n)\n\nSET(CFLAGS \"\")\nSET(CXXFLAGS \"\")\n\nGET_PROPERTY(cwd_definitions DIRECTORY PROPERTY COMPILE_DEFINITIONS)\nFOREACH(white_flag ${COMPILE_DEFINITIONS_WHITELIST})\n  FOREACH(flag ${cwd_definitions})\n    IF (${flag} MATCHES ${white_flag})\n      SET(CFLAGS \"-D${white_flag} ${CFLAGS}\")\n      SET(CXXFLAGS \"-D${white_flag} ${CXXFLAGS}\")\n    ENDIF()\n  ENDFOREACH()\nENDFOREACH()\n\nIF(CMAKE_BUILD_TYPE AND BUILD_IS_SINGLE_CONFIG)\n  SET(CMAKEBT_FLAGS\n    \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${CMAKE_C_FLAGS}\")\n  SEPARATE_ARGUMENTS(CMAKEBT_FLAGS)\nENDIF()\n\nFOREACH(white_flag ${CMAKE_C_FLAGS_WHITELIST})\n  FOREACH(flag ${CMAKEBT_FLAGS})\n    IF (${flag} STREQUAL ${white_flag})\n      SET(CFLAGS \"${white_flag} ${CFLAGS}\")\n      SET(CXXFLAGS \"${white_flag} ${CXXFLAGS}\")\n    ENDIF()\n  ENDFOREACH()\nENDFOREACH()\n\n# Do not remove -std=c++14 for Oracle Studio as it is required to get\n```\n\n----------------------------------------\n\nTITLE: Adding NDB General Library in CMake\nDESCRIPTION: Defines and adds the NDB general convenience library, listing all source files to be compiled. It also specifies link libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DNO_DUMMY_DECL)\nADD_CONVENIENCE_LIBRARY(ndbgeneral\n  BaseString.cpp\n  Bitmask.cpp\n  CharsetMap.cpp\n  CharsetMapImpl.cpp\n  Checksum.cpp\n  ConfigValues.cpp\n  File.cpp\n  InputStream.cpp\n  LogBuffer.cpp\n  NdbOut.cpp\n  NdbPack.cpp\n  NdbSocket.cpp\n  NdbSqlUtil.cpp\n  NodeCertificate.cpp\n  ndb_az31.cpp\n  ndb_ndbxfrm1.cpp\n  ndb_openssl3_compat.cpp\n  ndb_openssl_evp.cpp\n  ndb_zlib.cpp\n  ndbxfrm_file.cpp\n  OutputStream.cpp\n  OwnProcessInfo.cpp\n  Parser.cpp\n  ProcessInfo.cpp\n  Properties.cpp\n  SimpleProperties.cpp\n  SocketAuthenticator.cpp\n  SocketClient.cpp\n  SocketServer.cpp\n  TlsKeyManager.cpp\n  Vector.cpp\n  basename.cpp\n  cstrbuf.cpp\n  decimal_utils.cpp\n  md5_hash.cpp\n  ndb_init.cpp\n  ndb_opts.cpp\n  ndb_rand.cpp\n  parse_mask.cpp\n  random.cpp\n  require.cpp\n  socket_io.cpp\n  version.cpp\n  LINK_LIBRARIES ndbtrace ndbportlib ext::zlib mysys\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TCMalloc Minimal Static Library\nDESCRIPTION: Conditionally builds static library version of TCMalloc minimal when GPERFTOOLS_BUILD_STATIC is enabled. Sets up compilation definitions and links required dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(GPERFTOOLS_BUILD_STATIC)\n    add_library(tcmalloc_minimal_static STATIC ${libtcmalloc_minimal_internal_la_SOURCES})\n    target_compile_definitions(tcmalloc_minimal_static PRIVATE NO_TCMALLOC_SAMPLES NDEBUG)\n    target_link_libraries(tcmalloc_minimal_static PRIVATE tcmalloc_minimal_internal Threads::Threads)\n    if(MINGW)\n      target_link_libraries(tcmalloc_minimal_static PRIVATE stacktrace)\n    endif()\n    if(NOT MSVC)\n      set_target_properties(tcmalloc_minimal_static PROPERTIES\n              OUTPUT_NAME tcmalloc_minimal)\n    endif()\n    install(TARGETS tcmalloc_minimal_static)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including GMock Directory in MySQL Server Build\nDESCRIPTION: Adds Google Mock (GMock) include directories to the system include path for test compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/locks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM\n  ${GMOCK_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Plugin 'conflicting_variables' using CMake\nDESCRIPTION: This CMake command adds a plugin named 'conflicting_variables' to the MySQL server. It specifies the source file, sets it as a module-only plugin, defines the output name, and marks it as a test-only plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_plugins/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(conflicting_variables\n  conflicting_variables.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"conflicting_variables\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Imported TCMalloc Library\nDESCRIPTION: This snippet adds an imported shared library target for TCMalloc. It specifies the language (C) and the location of the library file. This allows CMake to properly link against TCMalloc.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_LIBRARY(my_tcmalloc SHARED IMPORTED GLOBAL)\nSET_TARGET_PROPERTIES(my_tcmalloc PROPERTIES\n  IMPORTED_LINK_INTERFACE_LANGUAGES \\\"C\\\"\n  IMPORTED_LOCATION \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc.so\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting MAX_INDEXES Include File for MySQL Tests\nDESCRIPTION: Creates or updates the max_indexes.inc file based on the current MAX_INDEXES value. This file helps MTR decide which tests to skip based on the configured index size limitation. The default value is 64U.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# With different MAX_INDEXES values, server might behave differently in\n# certain cases. 'max_indexes.inc' file should be updated accordingly to\n# reflect the current MAX_INDEXES value. This file helps MTR to decide on\n# which tests should be skipped.\n# NOTE: While committing a patch please make sure that the file is unmodified\n# and should show the default MAX_INDEXES (i.e. 64U).\nIF (MAX_INDEXES)\n  IF(NOT (${MAX_INDEXES} EQUAL 64U))\n    FILE(WRITE include/max_indexes.inc\n         \"# Warning: This is an auto-generated file. Please do not modify it.\\n--let $max_indexes = ${MAX_INDEXES}\\n\")\n    MESSAGE(STATUS \"mysql-test/include/max_indexes.inc adjusted\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing libcbor on Ubuntu 18.04 and Above\nDESCRIPTION: This bash snippet adds the universe repository and installs the libcbor-dev package on Ubuntu, allowing for efficient CBOR processing in C applications.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository universe\nsudo apt-get install libcbor-dev\n```\n\n----------------------------------------\n\nTITLE: Installing libcbor on Fedora and RPM-based Systems\nDESCRIPTION: This command installs the libcbor-devel package on Fedora and other RPM-based distributions, facilitating CBOR operations in C programming.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyum install libcbor-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring TCMalloc Minimal Debug Library in CMake\nDESCRIPTION: Sets up the build configuration for the TCMalloc minimal debug library, including source files, compilation definitions, and linking libraries. It also configures installation and version properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(GPERFTOOLS_BUILD_DEBUGALLOC)\n  set(libtcmalloc_minimal_debug_la_SOURCES src/debugallocation.cc\n          ${TCMALLOC_MINIMAL_INCLUDES})\n  add_library(tcmalloc_minimal_debug SHARED ${libtcmalloc_minimal_debug_la_SOURCES})\n  target_compile_definitions(tcmalloc_minimal_debug PRIVATE ${libtcmalloc_minimal_la_DEFINES}\n          TCMALLOC_FOR_DEBUGALLOCATION)\n  target_link_libraries(tcmalloc_minimal_debug PRIVATE ${libtcmalloc_minimal_la_LIBADD})\n  target_link_libraries(tcmalloc_minimal_debug PRIVATE Threads::Threads)\n  install(TARGETS tcmalloc_minimal_debug)\n  set_target_properties(tcmalloc_minimal_debug PROPERTIES\n          VERSION ${TCMALLOC_SO_VERSION}\n          SOVERSION ${TCMALLOC_SO_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for Non-MSVC Compilers\nDESCRIPTION: Sets compile flags for source files when not using the MSVC compiler. It appends the EXTRA_CFLAGS variable to the COMPILE_FLAGS property of each file in the FIDO_SOURCES list, enabling the use of extra compiler flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(NOT MSVC)\n\tset_source_files_properties(${FIDO_SOURCES}\n\t    PROPERTIES COMPILE_FLAGS \\\"${EXTRA_CFLAGS}\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Server Certificate Generation\nDESCRIPTION: Generates server key and certificate signing request, and creates server certificate chain\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out server/server.key 4096\nopenssl req -new '-sha256' -key server/server.key -out server/server.csr -subj \"/CN=localhost\"\n\ncat server/server.crt ca/intermediate_ca1.crt > server/server.cachain\ncat server/server.crt ca/intermediate_ca1.crt ca/root.crt > server/server_to_root.cachain\n```\n\n----------------------------------------\n\nTITLE: Manual Clang-Tidy Execution Commands\nDESCRIPTION: Alternative commands to run clang-tidy directly without the wrapper script for both full tree and single commit analysis.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/static_analysis.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/opt/llvm-17.0.1/bin/run-clang-tidy -clang-tidy=/opt/llvm-17.0.1/bin/clang-tidy -j $(nproc) -quiet -p .  > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit diff HEAD~ -U0  -- '*.cc' '*.cpp' '*.c++' '*.cxx' '*.c' '*.cl' '*.h' '*.hpp' ':!extra' | python3 clang-tidy-diff.py -timeout 600  -path .  -j=4 -p1 -extra-arg='-ferror-limit=0'\n```\n\n----------------------------------------\n\nTITLE: Defining test command for foreign key\nDESCRIPTION: This defines the 'testFK' command which is intended to test foreign key operations on the 'Basic5' case with table 'T1', allowing a maximum execution time of 180 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testFK\nargs: -n Basic5 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Logger Test Plugin\nDESCRIPTION: Adds a harness plugin for testing logging functionality. Creates a non-installable plugin targeting the harness destination.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_PLUGIN(routertestplugin_logger NO_INSTALL\n  DESTINATION harness\n  SOURCES logger_testplugin.cc)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil If Constexpr Test in C++\nDESCRIPTION: This snippet defines a test case for the 'if_constexpr' library intended to validate its functionality and ensure correctness in compile-time conditions. It specifies the source file for the test, compiler options, and dependencies on the Google Test framework. Running these tests helps confirm that the library behaves as expected.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/utility/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    if_constexpr_test\n  SRCS\n    \"internal/if_constexpr_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::if_constexpr\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for JIT Executor Plugin\nDESCRIPTION: Configures a comprehensive list of source files for the JIT executor plugin, including database, language, native wrapper, object, utility, and core implementation files\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(jit_executor_plugin_SOURCE\n  database/column.cc\n  database/query_attributes.cc\n  database/result.cc\n  ...\n  jit_executor_context_pool.cc\n  jit_executor_value.cc\n  jit_executor_db_interface.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL RPM Specification for Linux in CMake\nDESCRIPTION: This snippet checks if the build is for Linux, and if so, sets up and configures the MySQL RPM specification file. It uses CMake commands to conditionally execute the configuration process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-sles/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  RETURN()\nENDIF()\n\nSET(spec \"mysql.spec\")\nCONFIGURE_FILE(${spec}.in ${CMAKE_CURRENT_BINARY_DIR}/${spec} @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining log_initialize Library\nDESCRIPTION: This snippet defines the `log_initialize` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on `absl::config`, `absl::log_globals`, `absl::log_internal_globals`, and `absl::time`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_initialize\n  SRCS\n    \"initialize.cc\"\n  HDRS\n    \"initialize.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_globals\n    absl::log_internal_globals\n    absl::time\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Buffer Generation for MySQL Server\nDESCRIPTION: Sets up Protocol Buffer code generation configuration for MySQL server replication. Defines the output directory, source proto files, and generates a lite version of the Protocol Buffer library with specific linking requirements.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(${CMAKE_SOURCE_DIR}/cmake/protobuf.cmake)\n\nSET(PROTOBUF_LITE_GENERATE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated/protobuf_lite\")\nFILE(MAKE_DIRECTORY ${PROTOBUF_LITE_GENERATE_DIR})\n\nSET(MY_PROTOBUF_PROTO_FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/replication_asynchronous_connection_failover.proto\"\n)\n\nMYSQL_PROTOBUF_GENERATE_CPP_LIBRARY(\n  rpl_protobuf_lite\n  ${MY_PROTOBUF_PROTO_FILES}\n  OUTPUT_DIRECTORY ${PROTOBUF_LITE_GENERATE_DIR}\n  ADDITIONAL_COMMENT \"- lite version\")\n\nTARGET_LINK_LIBRARIES(rpl_protobuf_lite PUBLIC ext::libprotobuf-lite)\n\nSET(RPL_PROTOBUF_LITE_LIB rpl_protobuf_lite PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Check CXX Compiler Flag\nDESCRIPTION: Macro to check if a specific C++ compiler flag is supported, with custom failure regex patterns to detect unsupported or invalid options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO (MY_CHECK_CXX_COMPILER_FLAG FLAG RESULT)\n  CMAKE_PUSH_CHECK_STATE()\n  STRING_APPEND(CMAKE_REQUIRED_FLAGS \" ${FLAG}\")\n  CHECK_CXX_SOURCE_COMPILES(\"int main(void) { return 0; }\" ${RESULT}\n    FAIL_REGEX \"unknown argument ignored\"\n    FAIL_REGEX \"argument unused during compilation\"\n    FAIL_REGEX \"unsupported .*option\"\n    FAIL_REGEX \"unknown .*option\"\n    FAIL_REGEX \"unrecognized .*option\"\n    FAIL_REGEX \"ignoring unknown option\"\n    FAIL_REGEX \"[Ww]arning: [Oo]ption\"\n    FAIL_REGEX \"error: visibility\"\n    FAIL_REGEX \"warning: visibility\"\n    )\n  CMAKE_POP_CHECK_STATE()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for MySQL Group Replication Plugin\nDESCRIPTION: This snippet defines the relationships between the Group Replication plugin's RWLOCK_plugin_stop and various other locks and conditions in MySQL Server. It shows both read (R) and write (W) dependencies, as well as different lock types such as mutexes, rwlocks, and sxlocks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_28\n\nLANGUAGE: Text\nCODE:\n```\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"R\" TO \"mutex/innodb/clone_sys_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"R\" TO \"mutex/innodb/dict_persist_dirty_tables_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"R\" TO \"mutex/innodb/dict_sys_mutex\"\n// ... (more similar lines)\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL REST Service Implementation Dependencies\nDESCRIPTION: Defines library dependencies and include directories for the REST service implementation, with conditional inclusion of JIT executor components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSET(mysql_rest_service_impl_libs\n  http_client\n  rest_api\n  mysql_rest_service_db\n)\n\nSET(mysql_rest_service_includes\n  ${PROJECT_SOURCE_DIR}/src/harness/include/\n  ${PROJECT_SOURCE_DIR}/src/metadata_cache/include/\n  ${PROJECT_SOURCE_DIR}/src/routing/include/\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nIF(MRS_JIT_EXECUTOR_LIB)\n  list(APPEND mysql_rest_service_impl_libs jit_executor_plugin)\n  list(APPEND mysql_rest_service_includes ${PROJECT_SOURCE_DIR}/src/jit_executor/include/)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Java Components in CMake\nDESCRIPTION: This snippet sets up the WITH_NDB_JAVA option based on various conditions, including ASAN builds and environment variables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_ASAN)\n  MESSAGE(STATUS \"Skip building ClusterJ by default for ASAN builds\")\n  SET(WITH_NDB_JAVA_DEFAULT OFF)\nELSE()\n  # Check if the default for WITH_NDB_JAVA should be\n  # magically overriden\n  SET(magic_value $ENV{PRODUCT_ID})\n  IF (magic_value STREQUAL \"bootstrap-cmake-tar-gz\" OR\n      magic_value STREQUAL \"source-dist-tar-gz\")\n    SET(WITH_NDB_JAVA_DEFAULT OFF)\n    MESSAGE(STATUS \"Default value for WITH_NDB_JAVA set to 0 since \"\n                   \"bootstrapping was detected\")\n  ELSE()\n  SET(WITH_NDB_JAVA_DEFAULT ${WITH_NDB})\n  ENDIF()\nENDIF()\nOPTION(WITH_NDB_JAVA\n  \"Include NDB Cluster Java components\" ${WITH_NDB_JAVA_DEFAULT})\n\nIF(WITH_NDB_JAVA)\n  INCLUDE(ndb_find_java)\nELSE(WITH_NDB_JAVA)\n  MESSAGE(STATUS \"Excluding Cluster Java components\")\nENDIF(WITH_NDB_JAVA)\n```\n\n----------------------------------------\n\nTITLE: Set PIDOF Command based on OS\nDESCRIPTION: This snippet sets the `PIDOF` variable based on the operating system. On Linux, it uses the standard `pidof` command. On other systems, it uses `pgrep` with specific options to achieve similar functionality, ensuring compatibility across different UNIX-like systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(LINUX)\n  SET (PIDOF \\\"pidof\\\")\nELSE()\n  SET (PIDOF \\\"pgrep -d' ' -f\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Generating Asynchronous Database Operations\nDESCRIPTION: This set of commands utilizes the 'DbAsyncGenerator' command to perform asynchronous database operations with varying parallelism (p) settings for benchmarking. Each command has a maximum time set to 180 seconds and specifies the number of parallel operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-perf-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 1\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 25\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 100\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 200\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 1 -proc 25\ntype: bench\n\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Cache Component in MySQL Server Build System\nDESCRIPTION: This CMake directive adds a component named 'reference_cache' to the MySQL server build. It includes three source files (component.cc, channel.cc, and cache.cc), specifies it as module-only, and links against the mysys library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/reference_cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(reference_cache\n  component.cc\n  channel.cc\n  cache.cc\n  MODULE_ONLY\n  LINK_LIBRARIES library_mysys)\n```\n\n----------------------------------------\n\nTITLE: Adding STDx Tests\nDESCRIPTION: This snippet defines a list of stdx library test files, iterates through them and adds them to the build process as Google Tests with a dependency on the harness_stdx library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  test_stdx_bit.cc\n  test_stdx_expected.cc\n  test_stdx_flags.cc\n  test_stdx_io_file_handle.cc\n  test_stdx_monitor.cc\n  test_stdx_ranges.cc\n)\n\nFOREACH(TEST ${TESTS})\n  ADD_GOOGLETEST_FILE(${TEST} MODULE ${TEST_MODULE}\n    LIB_DEPENDS harness_stdx)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Setting JAR File Paths\nDESCRIPTION: Configures the paths for required JAR files in the build directory\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JARS\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/ndbjtie.jar\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/jtie.jar\n  ${CMAKE_CURRENT_BINARY_DIR}/clusterj-api/clusterj-api.jar\n  ${CMAKE_CURRENT_BINARY_DIR}/clusterj-core/clusterj-core.jar\n  ${CMAKE_CURRENT_BINARY_DIR}/clusterj-tie/clusterj-tie.jar\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Restart and Dictionary Tests\nDESCRIPTION: Test configurations for node restart scenarios and dictionary operations in NDB Cluster. These tests verify proper behavior during master failures, fragment exhaustion, and various dictionary operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_14\n\nLANGUAGE: plain\nCODE:\n```\nmax-time: 300\ncmd: testNodeRestart\nargs: -n MasterFailSlowLCP T1\n\nmax-time:300\ncmd: testScan\nargs: -nScanFragRecExhaust T1\n\nmax-time: 300\ncmd: testDict\nargs: -n Bug13416603 I2\n\nmax-time: 300\ncmd: testDict\nargs: -n IndexStatCreate T1\n\nmax-time: 300\ncmd: testDict\nargs: -n DropWithTakeover T1\n\nmax-time: 300\ncmd: testDict\nargs: -n GetTabInfoRef T1\n\nmax-time: 300\ncmd: testBasic\nargs: -n LeakApiConnectObjects T1\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MySQL Binary Log Event Libraries in CMake\nDESCRIPTION: Lists all the source files that are part of the MySQL binary log event libraries. This includes various codec, compression, and event-related implementation files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/event/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TARGET_SRCS\n  codecs/binary.cpp\n  codecs/factory.cpp\n  binary_log_funcs.cpp\n  binlog_event.cpp\n  control_events.cpp\n  event_reader.cpp\n  load_data_events.cpp\n  rows_event.cpp\n  statement_events.cpp\n  trx_boundary_parser.cpp\n  compression/base.cpp\n  compression/compressor.cpp\n  compression/decompress_status.cpp\n  compression/decompressor.cpp\n  compression/factory.cpp\n  compression/none_comp.cpp\n  compression/none_dec.cpp\n  compression/payload_event_buffer_istream.cpp\n  compression/zstd_comp.cpp\n  compression/zstd_dec.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Cluster Build Options in CMake\nDESCRIPTION: Handles legacy and current NDB cluster build configuration options, with backward compatibility for WITH_NDBCLUSTER option and setting default values for WITH_NDB.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED WITH_NDBCLUSTER)\n  SET(HAVE_WITH_NDBCLUSTER 1)\n  IF(DEFINED WITH_NDB)\n    IF(NOT (NOT WITH_NDB) EQUAL (NOT WITH_NDBCLUSTER))\n      MESSAGE(FATAL_ERROR\n        \"WITH_NDB=${WITH_NDB} do not match WITH_NDBCLUSTER=${WITH_NDBCLUSTER}\")\n    ENDIF()\n    SET(WITH_NDB_DEFAULT OFF)\n  ELSEIF(WITH_NDBCLUSTER)\n    MESSAGE(WARNING \"WITH_NDBCLUSTER option is deprecated, please use \"\n      \"WITH_NDB instead. For backward compatibility WITH_NDBCLUSTER=ON sets \"\n      \"WITH_NDB=ON\")\n    SET(WITH_NDB_DEFAULT ON)\n  ELSE()\n    SET(WITH_NDB_DEFAULT OFF)\n  ENDIF()\n  UNSET(WITH_NDBCLUSTER CACHE)\nELSE()\n  SET(WITH_NDB_DEFAULT OFF)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: String to Number Conversion Functions\nDESCRIPTION: Character set aware versions of standard string-to-number conversion functions. These handle length-specified strings instead of null-terminated strings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstrntol()\nstrntoul()\nstrntoll()\nstrntoull()\nstrntod()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Framework Plugin in MySQL Makefile\nDESCRIPTION: This snippet adds the 'test_framework' plugin to the MySQL build process. It specifies that the plugin should be compiled from 'test_framework.cc', and the output will be a module named 'libtest_framework'. The snippet is part of configuring the MySQL server to include test-only plugins, and is utilized during the build process of the server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_framework\n  test_framework.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"libtest_framework\\\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Audit Null Plugin in MySQL Server CMake Configuration\nDESCRIPTION: This snippet adds the 'audit_null' plugin to the MySQL server build. It specifies the source file, sets it as a module-only plugin, and defines the output module name.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/audit_null/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(audit_null\n  audit_null.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"adt_null\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Keyring File Component Build Configuration\nDESCRIPTION: Defines the build configuration for the keyring_file component, including compiler definitions, include directories, source files, and required libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/keyring_file/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"component_keyring_file\")\n\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Auth Realm Library in CMake\nDESCRIPTION: Establishes the `http_auth_realm_lib` shared library, crucial for authentication realm functionalities. It links with `http_auth_backend_lib` and specifies source files necessary for its build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(http_auth_realm_lib\n  http_auth_realm.cc\n  http_auth_realm_component.cc\n\n  OUTPUT_NAME \"mysqlrouter_http_auth_realm\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  http_auth_backend_lib)\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Directories and Libraries for MySQL Change Streams\nDESCRIPTION: Defines the test directory path and initializes the test list. Configures the required libraries for linking including changestreams, MySQL binlog event handling, MySQL client, and Google Test libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS_DIR ${CS_BASE_SRC_DIR}/tests)\n\nSET(TESTS \"\")\n\nSET(TEST_LINK_LIBRARIES\n  changestreams_standalone_static\n  mysql_binlog_event_standalone\n  mysqlclient\n  ${GTEST_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring GCC Snapshot for Debian Unstable\nDESCRIPTION: Optional configuration for using a snapshot (development) version of GCC when building on unstable/testing Debian distributions. Sets the appropriate compiler paths and enables ccache for faster builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Used for testing unreleased gcc versions on e.g. Debian unstable\nIF (DEFINED DEB_GCC_SNAPSHOT)\n  SET (DEB_CMAKE_EXTRAS \"${DEB_CMAKE_EXTRAS} -DCMAKE_C_COMPILER=/usr/lib/gcc-snapshot/bin/gcc -DCMAKE_CXX_COMPILER=/usr/lib/gcc-snapshot/bin/g++ -DMYSQL_MAINTAINER_MODE=0 -DCMAKE_CXX_COMPILER_LAUNCHER=ccache\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Group Replication Tests\nDESCRIPTION: This snippet defines a list of group replication unit tests in the `TESTS` variable. Each element in the list corresponds to a test executable that will be built and added to the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/group_replication/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  group_replication_member_info\n  group_replication_compatibility_module\n  group_replication_member_version\n  group_replication_mysql_version_gcs_protocol_map\n  group_replication_gcs_mysql_network_provider\n  group_replication_certifier_auto\n  )\n```\n\n----------------------------------------\n\nTITLE: Directory Management in CMake\nDESCRIPTION: This CMake script adds the 'src' directory by default and includes the 'tests' directory if unit tests are enabled. It requires a CMake setup with a WITH_UNIT_TESTS variable to conditionally add test directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Services Threaded Plugin in MySQL Makefile\nDESCRIPTION: This snippet configures the 'test_services_thread' plugin, specifying 'test_services_threaded.cc' as its source and 'libtest_services_threaded' as the module output. It contributes to the threaded test functionalities in MySQL, ensuring multithreading scenarios are effectively tested.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_services_thread\n  test_services_threaded.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"libtest_services_threaded\\\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Executing testNdbApi Command in MySQL\nDESCRIPTION: This snippet defines the 'testNdbApi' command showcasing different test cases related to the NDB API with specific arguments. Each command includes constraints such as maximum execution time. The expected inputs are specific test situations, while the outputs indicate the testing results for those scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNdbApi\nargs: -n MissingOperation T6\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n TestFragmentedSend T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n DeleteNdb T1 T6\nmax-time: 1260\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL event tracking test executable\nDESCRIPTION: Defines the main test executable (mysql_test_event_tracking) that links against required libraries and includes the core event tracking test files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/event_tracking_test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql_test_event_tracking\n  event_tracking_registry.cc\n  event_tracking_test.cc\n  COMPONENT Test\n  LINK_LIBRARIES ${CMAKE_DL_LIBS} minchassis mysys\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Static TCMalloc Minimal Debug Library in CMake\nDESCRIPTION: Sets up the build configuration for the static version of TCMalloc minimal debug library, including source files, compilation definitions, and output name properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(GPERFTOOLS_BUILD_STATIC)\n    add_library(tcmalloc_minimal_debug_static STATIC ${libtcmalloc_minimal_debug_la_SOURCES})\n    target_compile_definitions(tcmalloc_minimal_debug_static PRIVATE ${libtcmalloc_minimal_la_DEFINES}\n            TCMALLOC_FOR_DEBUGALLOCATION)\n    if(NOT MSVC)\n      set_target_properties(tcmalloc_minimal_debug_static PROPERTIES\n              OUTPUT_NAME tcmalloc_minimal_debug)\n    endif()\n    target_link_libraries(tcmalloc_minimal_debug_static PRIVATE ${libtcmalloc_minimal_la_LIBADD})\n    install(TARGETS tcmalloc_minimal_debug_static)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Directory Handling in CMake\nDESCRIPTION: This snippet includes a conditional statement to add a subdirectory for unit tests if the 'WITH_UNIT_TESTS' option is enabled. It sets up the project structure to facilitate unit testing of the MySQL protocol library, ensuring that tests are compiled when the relevant build flag is set.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests/)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Tuple and Index Statistics Tests\nDESCRIPTION: Test configurations for refresh tuple operations with different scenarios including ordered indexes and locking mechanisms. Also includes tests for index statistics and blob handling with specific bug parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\n# Bug18408654 added on 17.04.2014\n#max-time: 600\n#cmd: testNodeRestart\n#args: -n ClusterSplitLatency T1\n#\n# Refresh tuple\n# Bug18408692 added on 17.04.2014\nmax-time: 300\ncmd: testBasic\nargs: -n RefreshTuple T6 D1\n\nmax-time: 300\ncmd: testIndex\nargs: -n RefreshWithOrderedIndex T2 D2\n\nmax-time: 300\ncmd: testBasic\nargs: -n RefreshLocking D1\n\nmax-time: 300\ncmd: testIndexStat\nargs:\n\nmax-time: 300\ncmd: testBlobs\nargs: -bug 62321 -skip p\n```\n\n----------------------------------------\n\nTITLE: Range Table Algorithm Implementation Overview\nDESCRIPTION: Code snippet demonstrating the range index calculation for UTF-8 validation. It shows how to set range indices for different byte positions based on the UTF-8 encoding specification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nRange_index = First_Byte | Second_Byte | Third_Byte | Fourth_Byte\n```\n\n----------------------------------------\n\nTITLE: Defining Macro to Add Test Executables - CMake\nDESCRIPTION: Defines a macro `PFS_ADD_TEST` that simplifies the process of creating test executables in the MySQL server build process by linking necessary libraries. Each test executable created with this macro is linked with libraries including `mytap`, `perfschema`, and others.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO (PFS_ADD_TEST name)\\n  MYSQL_ADD_EXECUTABLE(${name}-t ${name}-t.cc ADD_TEST ${name})\\n  TARGET_LINK_LIBRARIES(${name}-t\\n    mytap perfschema mysys pfs_server_stubs strings ext::icu)\\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Commands for Mock Schema Generation in CMake\nDESCRIPTION: This snippet adds a custom command to generate the MySQL server mock schema source and header files from a JavaScript file. It specifies dependencies on the JS schema source file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(OUTPUT mysql_server_mock_schema.cc mysql_server_mock_schema.h\n                   COMMAND json_schema_embedder\n                     ${CMAKE_CURRENT_SOURCE_DIR}/mysql_server_mock_schema.js\n                     mysql_server_mock_schema.cc\n                     mysql_server_mock_schema.h\n                     \"SqlQueryJsonSchema\"\n                   DEPENDS mysql_server_mock_schema.js)\n```\n\n----------------------------------------\n\nTITLE: NDBMTD Multi-Threaded Executable Configuration\nDESCRIPTION: Conditional build configuration for the ndbmtd (Multi-Threaded NDB Data Node) executable when WITH_NDBMTD is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_NDBMTD)\n  MYSQL_ADD_EXECUTABLE(ndbmtd\n    ${NDBD_EXTRA_SRC}\n    SimBlockList.cpp\n    angel.cpp\n    main.cpp\n    ndbd.cpp\n\n    DESTINATION ${INSTALL_SBINDIR}\n    COMPONENT ClusterDataNode\n    ENABLE_EXPORTS\n    LINK_LIBRARIES ${NDBD_LIBS} ndbsched_mt ${LIBDL}\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Test Case File Structure\nDESCRIPTION: Format and structure needed for creating test case files for the ATRT, detailing how to specify execution parameters for each test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_SETUP_README.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmax-time\n    This value is in seconds. Test ATRT how long to allow the test to run before marking the test a failure and moving on to the next test. If the test finishes before max-time, it will move on to the next test.\ncmd\n    Tells ATRT which test or script to run from the bin directory\nargs\n    These are the command-line arguments to be passed to the test or script that is being executed.\ntype\n    Currently only bench. See ATRT Command-line parameters for details.\nrun-all\n    will start the same command for each defined api/mysql (normally it only started in 1 instance)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Link-Time Optimization\nDESCRIPTION: Adds specific compiler flags when Link-Time Optimization (LTO) is enabled, particularly for the GNU compiler, modifying linker flags to suppress warnings regarding allocation sizes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO)\n  IF(MY_COMPILER_IS_GNU)\n    # -Walloc-size-larger-than=PTRDIFF_MAX is enabled by default.\n    STRING_APPEND(CMAKE_EXE_LINKER_FLAGS \" -Wno-alloc-size-larger-than\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding compatibility_binlogevents-t Executable\nDESCRIPTION: This command creates an executable named `compatibility_binlogevents-t` from the source file `compatibility_binlogevents-t.cc`, adds a test named `compatibility_binlogevents`, links necessary libraries, defines compiler definitions, and applies the compatibility test options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(compatibility_binlogevents-t compatibility_binlogevents-t.cc\n  ADD_TEST compatibility_binlogevents\n  LINK_LIBRARIES mysql_gtid mysql_binlog_event_standalone gunit_small\n  COMPILE_DEFINITIONS \\\"${DISABLE_PSI_DEFINITIONS}\\\"\n  COMPILE_OPTIONS ${COMPATIBILITY_TEST_OPT})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Uniform Helper in CMake\nDESCRIPTION: Defines a CMake test target for testing the internal uniform helper component. This target compiles and links uniform_helper_test.cc with dependencies on absl::random_internal_uniform_helper and GTest.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_uniform_helper_test\n  SRCS\n    \"internal/uniform_helper_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_internal_uniform_helper\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Including Directories with CMake\nDESCRIPTION: The snippet specifies directories to be included in the build process using CMake's INCLUDE_DIRECTORIES command. These directories contain headers needed for NDB components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/test/include\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/mgmcommon\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/mgmcommon\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/kernel\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/debugger\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shared NDB Client Library Configuration in CMake\nDESCRIPTION: Configures parameters for building the shared NDB client library, including version information and symbol versioning script generation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET(NDBCLIENT_SO_LIBS ${LIBS_TO_MERGE} ${NDBJTIE_LIB})\nSET(NDB_SHARED_LIB_VERSION \"6.1.0\")\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/libndbclient.ver.in\n  ${CMAKE_CURRENT_BINARY_DIR}/libndbclient.ver)\n\n# This is needed for java-based unit tests.\nIF(MY_COMPILER_IS_CLANG AND WITH_UBSAN)\n  LIST(APPEND LIBS_TO_LINK -lubsan)\nENDIF()\n\n# This contains a dummy function _ndbclient_exports() which calls\n# enough symbols to pull in everything we need.\n# libndbclient.ver will export everything, except mysys functions\n# handle_options my_init my_load_defaults\nADD_CONVENIENCE_LIBRARY(ndbclient_exports ndbclient_exports.cpp)\n```\n\n----------------------------------------\n\nTITLE: Unix System Detection for Build Configuration\nDESCRIPTION: Detects Unix system properties using 'uname' and 'rpm' commands to determine the host system name, version, architecture, and filesystem for platform-specific build configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# On Linux el7/el8/el9 the default gcc is too old,\n# see if devtoolset/gcc-toolset is installed.\n# Same with SUSE linux 15, look for gcc 12 there.\n# We need to look for gcc before calling PROJECT below.\nOPTION(FORCE_UNSUPPORTED_COMPILER \"Disable compiler version checks\" OFF)\nMARK_AS_ADVANCED(WITHOUT_SERVER FORCE_UNSUPPORTED_COMPILER)\n\n# Use 'uname -r' and 'rpm -qf /' to figure out host system.\n# For Docker images we cannot trust uname, so use rpm instead.\nIF(UNIX)\n  FIND_PROGRAM(MY_UNAME uname /bin /usr/bin /usr/local/bin /sbin)\n  IF(MY_UNAME)\n    EXECUTE_PROCESS(COMMAND ${MY_UNAME} -s\n      OUTPUT_VARIABLE MY_HOST_SYSTEM_NAME\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n      RESULT_VARIABLE MY_UNAME_RESULT\n      )\n    EXECUTE_PROCESS(COMMAND ${MY_UNAME} -m\n      OUTPUT_VARIABLE MY_HOST_MACHINE_NAME\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n      RESULT_VARIABLE MY_UNAME_MACHINE_RESULT\n      )\n    EXECUTE_PROCESS(COMMAND ${MY_UNAME} -r\n      OUTPUT_VARIABLE MY_HOST_SYSTEM_VERSION)\n  ENDIF()\n  FIND_PROGRAM(MY_DPKG_BUILDFLAGS dpkg-buildflags /bin /usr/bin)\n  FIND_PROGRAM(MY_RPM rpm /bin /usr/bin)\n  IF(MY_RPM)\n    EXECUTE_PROCESS(COMMAND ${MY_RPM} -qf /\n      OUTPUT_VARIABLE MY_HOST_FILESYSTEM_NAME\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n      RESULT_VARIABLE MY_RPM_RESULT\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding libcbor Dependency in BUILD file\nDESCRIPTION: This snippet shows how to add libcbor as a dependency to a `cc_library` rule in a Bazel `BUILD` file. This allows the target to link against the libcbor library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/Bazel.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\ncc_library(\n    name = \"...\",\n    srcs = [ ... ],\n    hdrs = [ ... ],\n    deps = [\n        ...\n        \"@libcbor//:cbor\",\n    ],\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug18703871\nDESCRIPTION: This snippet sets up a test event aimed at reproducing the conditions surrounding 'Bug18703871'. It defines the command and arguments necessary to run the test within an allowed execution time frame.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncmd: test_event\nargs: -n Bug18703871 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: MySQL Harness Plugin Application Information Structure\nDESCRIPTION: Defines the application information structure containing essential metadata and configuration details for MySQL Harness plugins.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct AppInfo {\n  const char *program;                 /* Name of the application */\n  const char *plugin_folder;           /* Location of plugins */\n  const char *logging_folder;          /* Log file directory */\n  const char *config_folder;           /* Config file directory */\n  const char *runtime_folder;          /* Run file directory */\n  const Config* config;                /* Configuration information */\n};\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Plugin for Rewrite Example - C\nDESCRIPTION: This snippet defines a MySQL plugin named 'rewrite_example' using the MYSQL_ADD_PLUGIN macro. The snippet specifies the implementation file 'rewrite_example.cc' and sets the output name for the module as 'rewrite_example'. This plugin allows users to extend MySQL with rewriting capabilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewrite_example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nMYSQL_ADD_PLUGIN(rewrite_example\n  rewrite_example.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"rewrite_example\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Executables with CMake\nDESCRIPTION: This code defines a process for iterating over a list of executable targets, adding each executable using CMake. The executables include 'testBank', 'bankSumAccounts', and others, which are built from corresponding .cpp files and linked with specific libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/bank/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(BINS\n  testBank\n  bankSumAccounts\n  bankValidateAllGLs\n  bankMakeGL\n  bankTransactionMaker\n  bankCreator\n  bankTimer\n  )\n\nFOREACH(B ${BINS})\n  NDB_ADD_EXECUTABLE(${B} ${B}.cpp)\n  TARGET_LINK_LIBRARIES(${B} ndbbank ndbNDBT ndbclient_so)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating JAR and Installation Configuration\nDESCRIPTION: Creates the ClusterJ API JAR file with specified manifest and configures its installation location.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-api/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_MANIFEST(manifest.mf \"${CLUSTERJ_API_EXPORTS}\" clusterj-api)\\n\\nCREATE_JAR(clusterj-api ${JAVA_SOURCES}\\n  CLASSPATH target/classes\\n  MANIFEST ${CMAKE_CURRENT_BINARY_DIR}/manifest.mf)\\n\\nINSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/clusterj-api-${JAVA_NDB_VERSION}.jar\\n  DESTINATION ${INSTALL_MYSQLSHAREDIR}/java COMPONENT ClusterJ)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for MySQL Router Modules with CMake\nDESCRIPTION: This snippet uses the `ADD_SUBDIRECTORY` CMake command to include various modules and components of the MySQL Router project in the build process. Each `ADD_SUBDIRECTORY` call specifies a directory containing a CMakeLists.txt file that defines how to build that particular module.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_SUBDIRECTORY(bootstrap)\nADD_SUBDIRECTORY(connection_pool)\nADD_SUBDIRECTORY(destination_status)\nADD_SUBDIRECTORY(harness)\nADD_SUBDIRECTORY(http)\nADD_SUBDIRECTORY(io)\nADD_SUBDIRECTORY(json_schema_embedder)\nADD_SUBDIRECTORY(keepalive)\nADD_SUBDIRECTORY(metadata_cache)\nADD_SUBDIRECTORY(mock_server)\nADD_SUBDIRECTORY(mysql_protocol)\nADD_SUBDIRECTORY(mysqlxmessages)\nADD_SUBDIRECTORY(openssl)\nADD_SUBDIRECTORY(plugin_info)\nADD_SUBDIRECTORY(protobuf)\nADD_SUBDIRECTORY(rest_api)\nADD_SUBDIRECTORY(rest_connection_pool)\nADD_SUBDIRECTORY(rest_metadata_cache)\nIF(MRS_JIT_EXECUTOR_LIB)\n  ADD_SUBDIRECTORY(jit_executor)\n  ADD_DEFINITIONS(-DHAVE_JIT_EXECUTOR_PLUGIN)\nENDIF()\nADD_SUBDIRECTORY(mysql_rest_service)\nADD_SUBDIRECTORY(rest_router)\nADD_SUBDIRECTORY(rest_routing)\nADD_SUBDIRECTORY(router)\nADD_SUBDIRECTORY(routing)\nADD_SUBDIRECTORY(routing_guidelines)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test File for Plugin Configuration - CMake\nDESCRIPTION: This snippet adds another test file aimed at the plugin configuration, detailing the extra source files and library dependencies necessary for its functionality within the testing framework. It helps to ensure that the configuration testing is comprehensive and integrated.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST_FILE(test_plugin_config.cc\n  EXTRA_SOURCES\n    ../src/plugin_config.cc\n    ../src/router_options.cc\n    ../src/log_suppressor.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers    # init_test_logger\n    router_cluster  # ClusterMetadataDynamicState\n  )\n```\n\n----------------------------------------\n\nTITLE: Map Format Structure\nDESCRIPTION: Defines the format for key-value pair containers with number of elements and field data pairs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<map_format> ::= <number_elements> { <field_data> <field_data> }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Ndb.cpp\nDESCRIPTION: Adds specific compiler flags for Ndb.cpp when using GNU compiler in RelWithDebInfo build type to disable uninitialized variable warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND CMAKE_BUILD_TYPE_UPPER STREQUAL \"RELWITHDEBINFO\")\n  ADD_COMPILE_FLAGS(Ndb.cpp\n    COMPILE_FLAGS\n    \" -Wno-error=maybe-uninitialized\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Message and Dictionary Files in CMake\nDESCRIPTION: Installs various message and dictionary text files to the MySQL share directory as part of the Server component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/share/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(FILES messages_to_error_log.txt messages_to_clients.txt dictionary.txt\n  DESTINATION ${INSTALL_MYSQLSHAREDIR}\n  COMPONENT Server\n)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Configuring MySQL Router Client Library\nDESCRIPTION: Sets up CMake properties to build `router_mysqlxclient`, handling include directories, dependencies like zlib, and compile definitions for full protocol support. The snippet includes logic to compute absolute source paths.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysqlxmessages/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nGET_TARGET_PROPERTY(XCLI_INC_DIRS mysqlxclient_shared INCLUDE_DIRECTORIES)\nGET_TARGET_PROPERTY(XCLI_SYS_INC_DIRS mysqlxclient_shared INTERFACE_SYSTEM_INCLUDE_DIRECTORIES)\nGET_TARGET_PROPERTY(XCLI_SOURCES mysqlxclient_shared SOURCES)\nGET_TARGET_PROPERTY(XCLI_SOURCE_DIR mysqlxclient_shared SOURCE_DIR)\n\nSET(XCLI_SOURCE_ABSOLUTE)\nFOREACH(F ${XCLI_SOURCES})\n  IF(IS_ABSOLUTE ${F})\n    LIST(APPEND XCLI_SOURCES_ABSOLUTE ${F})\n  ELSE()\n    LIST(APPEND XCLI_SOURCES_ABSOLUTE ${XCLI_SOURCE_DIR}/${F})\n  ENDIF()\nENDFOREACH()\n\nROUTER_ADD_SHARED_LIBRARY(router_mysqlxclient\n  ${XCLI_SOURCES_ABSOLUTE}\n\n  NO_EXPORT_HEADER\n  OUTPUT_NAME \"mysqlrouter_mysqlxclient\"\n  DEPENDENCIES GenError\n\n  LINK_LIBRARIES\n  PUBLIC\n  router_mysqlxmessages\n  ext::lz4\n  ext::zstd\n  ext::zlib\n  OpenSSL::SSL\n  OpenSSL::Crypto\n  router_mysqlclient\n  )\n\nTARGET_INCLUDE_DIRECTORIES(router_mysqlxclient\n  PUBLIC ${XCLI_INC_DIRS}\n  )\nTARGET_INCLUDE_DIRECTORIES(router_mysqlxclient\n  SYSTEM PUBLIC ${XCLI_SYS_INC_DIRS}\n  )\nTARGET_COMPILE_DEFINITIONS(router_mysqlxclient\n  PUBLIC USE_MYSQLX_FULL_PROTO=1\n  PRIVATE mysqlxclient_shared_EXPORTS=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling In/Out Parameters with JTie in Blob Implementation\nDESCRIPTION: Shows the implementation of blob data reading with JTie's in/out parameter pattern. It uses an int array of length 1 to receive the actual bytes read from the native layer, with special handling to detect memory movement issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/HOWTO.txt#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void readData(byte[] array, int length) {\n    // int[1] is an artifact of ndbjtie to pass an in/out parameter\n    // this depends on java allocating the int[1] on the stack so it can't move while reading blob data\n    // we add one to length to trap the case where the int[1] moved so the proper length was not set\n    int[] lengthRead = new int[] {length + 1}; // length will be filled by readData\n    int returnCode = ndbBlob.readData(buffer, lengthRead); // calls native code\n```\n\n----------------------------------------\n\nTITLE: Windows Visual Studio 2019 CMake Version Check\nDESCRIPTION: This code checks if Visual Studio 2019 is being used as the generator and ensures an appropriate CMake version is used to avoid known bugs in the build system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n  IF(CMAKE_GENERATOR MATCHES \"Visual Studio\" AND CMAKE_GENERATOR MATCHES \"2019\")\n    IF(CMAKE_VERSION MATCHES \"MSVC\")\n      # It is the bundled version, ignore version check,\n      # (although this seems to be buggy too).\n    ELSE()\n      # Bug in msbuild, install the latest in the 3.15 series as a workaround.\n      # https://gitlab.kitware.com/cmake/cmake/issues/19303\n      # custom commands are re-built every time\n      CMAKE_MINIMUM_REQUIRED(VERSION 3.15.3)\n    ENDIF()\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building ICU Common Library (icuuc)\nDESCRIPTION: Creates the icuuc static library from ICU_COMMON_SOURCES, sets compile definitions, includes directories, and links with dynamic loading libraries. This library contains common Unicode functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(icuuc STATIC ${ICU_COMMON_SOURCES})\nTARGET_COMPILE_DEFINITIONS(icuuc PRIVATE -DU_COMMON_IMPLEMENTATION)\nTARGET_INCLUDE_DIRECTORIES(icuuc PRIVATE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${ICU_VERSION_DIR}/source/common\"\n  )\nTARGET_LINK_LIBRARIES(icuuc PRIVATE ${CMAKE_DL_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Defining crc_cord_state Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines a C++ library named `crc_cord_state` using `absl_cc_library`. It specifies the header and source files, compiler options, and dependencies, including `crc32c`, configuration settings, and string utilities. It is intended to be used for managing CRC calculations on Abseil Cords (rope-like strings).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    crc_cord_state\n  HDRS\n    \\\"internal/crc_cord_state.h\\\"\n  SRCS\n    \\\"internal/crc_cord_state.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc32c\n    absl::config\n    absl::strings\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Subdirectories\nDESCRIPTION: CMake configuration for adding test-related subdirectories when NDB testing is enabled. Controls the inclusion of tools, API tests, run-test, and crund test directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\nIF(WITH_NDB_TEST)\n  ADD_SUBDIRECTORY(tools)\n  ADD_SUBDIRECTORY(ndbapi)\n  ADD_SUBDIRECTORY(run-test)\n  ADD_SUBDIRECTORY(crund)\nENDIF(WITH_NDB_TEST)\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS XCom Test Paths\nDESCRIPTION: Defines an extensive list of XCom-specific test files covering various aspects of the XCom communication layer including logging, parameters, notifications, and network management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GCS_XCOM_TESTS\n  xcom/gcs_logging\n  xcom/gcs_logging_system\n  xcom/gcs_parameters\n  xcom/gcs_xcom_notification\n  xcom/gcs_xcom_utils\n  xcom/gcs_msg_stages\n  xcom/gcs_allowlist\n  xcom/gcs_xcom_group_management\n  xcom/gcs_xcom_state_exchange\n  xcom/gcs_packet\n  xcom/gcs_xcom_communication_interface\n  xcom/gcs_xcom_interface_unit\n  xcom/gcs_xcom_statistics_interface\n  xcom/gcs_xcom_group_member_information\n  xcom/gcs_mpsc_queue\n  xcom/gcs_xcom_input_queue\n  xcom/gcs_xcom_networking\n  xcom/gcs_xcom_xcom_base\n  xcom/gcs_xcom_xcom_transport\n  xcom/gcs_xcom_communication_protocol_changer\n  xcom/gcs_xcom_xcom_cache\n  xcom/gcs_xcom_control_interface\n  xcom/gcs_xcom_view_identifier\n  xcom/gcs_message_stage_fragmentation\n  xcom/gcs_xcom_site_def\n  xcom/gcs_xcom_expels_in_progress\n  xcom/gcs_xcom_network_provider\n  xcom/gcs_xcom_network_provider_manager\n  xcom/gcs_xcom_xcom_single_writer\n  xcom/gcs_xcom_statistics_manager\n  xcom/gcs_xcom_statistics_storage_impl\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing C Test Files\nDESCRIPTION: This snippet uses the `file(GLOB)` command to find all C source files ending with `_test.c` in the current directory. The resulting list of files is stored in the `TESTS` variable, which is later used to create individual test executables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB TESTS \"*_test.c\")\n```\n\n----------------------------------------\n\nTITLE: Defining Random Mocking Bit Generator Test - C++\nDESCRIPTION: Defines a test for the random mocking bit generator, indicating its source files and the dependencies it relies on to execute properly in the test environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_mocking_bit_gen_test\n  SRCS\n    \"mocking_bit_gen_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_bit_gen_ref\n    absl::random_mocking_bit_gen\n    absl::random_random\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Generating INFO Files and Build Information\nDESCRIPTION: Sets up targets to generate build information files (INFO_SRC and INFO_BIN) and optionally show build ID information. These files capture details about the source code and build environment for debugging and identification purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nGET_PROPERTY(CWD_DEFINITIONS DIRECTORY PROPERTY COMPILE_DEFINITIONS)\nCONFIGURE_FILE(\n    ${CMAKE_SOURCE_DIR}/cmake/info_macros.cmake.in\n    ${CMAKE_BINARY_DIR}/info_macros.cmake @ONLY)\n\nSET(KNOWN_CONVENIENCE_LIBRARIES \"\" CACHE INTERNAL \"\")\n# Add to the 'make clean' target.\n# With this you need to do 'cmake .' before doing 'make' again.\nSET_PROPERTY(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES\n  \"${CMAKE_BINARY_DIR}/archive_output_directory\"\n  \"${CMAKE_BINARY_DIR}/library_output_directory\"\n  )\n\n# Handle the \"INFO_*\" files.\nINCLUDE(${CMAKE_BINARY_DIR}/info_macros.cmake)\n# Source: This can be done during the cmake phase, all information is\n# available, but should be repeated on each \"make\" just in case someone\n# does \"cmake ; make ; git pull ; make\".\nCREATE_INFO_SRC(${CMAKE_BINARY_DIR}/Docs)\nMY_ADD_CUSTOM_TARGET(INFO_SRC ALL\n  COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/info_src.cmake\n  BYPRODUCTS ${CMAKE_BINARY_DIR}/Docs/INFO_SRC\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  COMMENT \"Generating Docs/INFO_SRC\"\n)\n\nIF(HAVE_BUILD_ID_SUPPORT AND NOT WITHOUT_SERVER)\n  # Show it by default in pushuild, but not for developers.\n  IF(DEFINED ENV{PB2WORKDIR})\n    OPTION(SHOW_BUILD_ID \"Show mysqld build id as final target\" ON)\n  ELSE()\n    OPTION(SHOW_BUILD_ID \"Show mysqld build id as final target\" OFF)\n  ENDIF()\n\n  IF(SHOW_BUILD_ID)\n    # Show build id in the build log, after everything else has bee built.\n    ADD_CUSTOM_TARGET(show_build_id ALL\n      COMMAND $<TARGET_FILE:mysqld> --no-defaults --help | grep BuildID\n      COMMENT \"Showing mysqld build id\"\n      VERBATIM\n      )\n    ADD_DEPENDENCIES(show_build_id mysqld)\n    # Build all kinds of binaries first.\n    ADD_DEPENDENCIES(show_build_id\n      component_all\n      executable_all\n      plugin_all\n      unittest_all\n      )\n    IF(WITH_ROUTER)\n      ADD_DEPENDENCIES(show_build_id mysqlrouter_all)\n    ENDIF()\n    # Other \"ALL\" targets.\n    ADD_DEPENDENCIES(show_build_id\n      GenSysSchemaC\n      # INFO_BIN see below\n      run_libmysql_api_test\n      )\n  ENDIF()\nENDIF()\n\nUNSET(MYSQLD_EXECUTABLE_FOR_INFO_BIN)\nIF(HAVE_BUILD_ID_SUPPORT AND NOT WITHOUT_SERVER)\n  SET(MYSQLD_EXECUTABLE_FOR_INFO_BIN\n    \"-DMYSQLD_EXECUTABLE=$<TARGET_FILE:mysqld>\")\nENDIF()\n\n# Build flags: This must be postponed to the make phase.\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_BINARY_DIR}/Docs/INFO_BIN\n  COMMAND ${CMAKE_COMMAND}\n  ${MYSQLD_EXECUTABLE_FOR_INFO_BIN}\n  -DCMAKE_BUILD_TYPE=$<CONFIG>\n  -P ${CMAKE_SOURCE_DIR}/cmake/info_bin.cmake\n  COMMENT \"Generating Docs/INFO_BIN\"\n  DEPENDS ${CMAKE_BINARY_DIR}/CMakeCache.txt\n  )\nMY_ADD_CUSTOM_TARGET(INFO_BIN ALL\n  DEPENDS ${CMAKE_BINARY_DIR}/Docs/INFO_BIN\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n)\n# Adding $<TARGET_FILE:mysqld> seems to a dependency on 'mysqld'.\n```\n\n----------------------------------------\n\nTITLE: MySQL Operation Flow States\nDESCRIPTION: Valid operation sequences for tuple modifications showing possible state transitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbtup/Notes.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTuple + op     Can be followed by\n--------------  ------------------\ndoes not exist  first/INSERT\ntuple exists    UPDATE DELETE\nINSERT          UPDATE DELETE\nUPDATE          UPDATE DELETE\nDELETE          delete/INSERT\n```\n\n----------------------------------------\n\nTITLE: Checking for Library Unwind Support in CMake\nDESCRIPTION: This snippet checks if the 'libunwind' library is available on the system. It verifies the inclusion of the necessary header file and checks if the library can be used, allowing the feature to be enabled based on its presence.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(gperftools_enable_libunwind)\n  check_include_file(\"libunwind.h\" HAVE_LIBUNWIND_H)\n  if(HAVE_LIBUNWIND_H)\n    find_library(libunwind_location NAMES unwind)\n    if(libunwind_location)\n      check_library_exists(\n        unwind backtrace ${libunwind_location} have_libunwind)\n    endif()\n    if(have_libunwind)\n      set(unwind_libs ${libunwind_location})\n      set(will_use_libunwind ON)\n      set(USE_LIBUNWIND 1)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing test_event Command in MySQL\nDESCRIPTION: This snippet covers the 'test_event' command used to validate event handling in MySQL. It comprises various test cases, all accompanied by specific execution time limits. The inputs consist of event identifiers and the expected outputs indicate whether the events are processed correctly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: test_event\nargs: -n BackwardCompatiblePollNoWait T1\nmax-time: 180\n\ncmd: test_event\nargs: -n Bug37279 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Conditional Windows DLL Copying in CMake\nDESCRIPTION: This snippet defines a function `COPY_DLL_FOR_UNITTEST` to copy DLL files from the runtime directory to the plugin directory after the target `minimal_chassis_test_driver-t` is built. It handles copying of protobuf, crypto, and openssl libraries and conditionally copies abseil and protobuf libraries only when not using CLANG. It also extracts the library name from the full path using `GET_FILENAME_COMPONENT`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  ADD_DEPENDENCIES(minimal_chassis_test_driver-t ext::libprotobuf-lite)\n  # Copy dlls for libprotobuf-lite and libcrypto/libssl to plugin dir.\n  FUNCTION(COPY_DLL_FOR_UNITTEST DLL_FILE_NAME)\n    SET(run_dir  \"${CMAKE_BINARY_DIR}/runtime_output_directory/\")\n    SET(plg_dir  \"${CMAKE_BINARY_DIR}/plugin_output_directory/\")\n    ADD_CUSTOM_COMMAND(TARGET minimal_chassis_test_driver-t POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different\n      \"${run_dir}/${CMAKE_CFG_INTDIR}/${DLL_FILE_NAME}\"\n      \"${plg_dir}/${CMAKE_CFG_INTDIR}/${DLL_FILE_NAME}\"\n      COMMENT \"Copying ${DLL_FILE_NAME}\"\n      )\n  ENDFUNCTION()\n  GET_FILENAME_COMPONENT(CRYPTO_NAME \"${HAVE_CRYPTO_DLL}\" NAME)\n  GET_FILENAME_COMPONENT(OPENSSL_NAME \"${HAVE_OPENSSL_DLL}\" NAME)\n\n  IF(NOT WIN32_CLANG)\n    COPY_DLL_FOR_UNITTEST(\"$<TARGET_FILE_NAME:abseil_dll>\")\n    COPY_DLL_FOR_UNITTEST(\"$<TARGET_FILE_NAME:libprotobuf-lite>\")\n  ENDIF()\n  COPY_DLL_FOR_UNITTEST(\"${CRYPTO_NAME}\")\n  COPY_DLL_FOR_UNITTEST(\"${OPENSSL_NAME}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: ChangeMGMDChangeHalfRestartChangeHalf\nDESCRIPTION: This command examines the impact of modifications to the MGMD during partial restarts, identified as 'ChangeMGMDChangeHalfRestartChangeHalf', to ensure stable upgrades.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n ChangeMGMDChangeHalfRestartChangeHalf T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Crypto Library Dependency\nDESCRIPTION: Links the mysys library with the Windows crypt32 library to resolve OpenSSL dependencies on Windows.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# Needed to resolve OpenSSL dependency on Windows\nIF(WIN32)\n  TARGET_LINK_LIBRARIES(mysys crypt32)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring exponential_biased Library in CMake\nDESCRIPTION: Defines the absl_cc_library target for the exponential_biased component with its source files, headers, and dependencies. This library implements exponentially biased sampling algorithms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    exponential_biased\n  SRCS\n    \"internal/exponential_biased.cc\"\n  HDRS\n    \"internal/exponential_biased.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbolize Test in Abseil\nDESCRIPTION: Defines the test target for the symbolize library with special compiler flags for debugging symbols, particularly for MSVC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    symbolize_test\n  SRCS\n    \"symbolize_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n    $<$<BOOL:${MSVC}>:-Z7>\n  LINKOPTS\n    $<$<BOOL:${MSVC}>:-DEBUG>\n  DEPS\n    absl::base\n    absl::check\n    absl::config\n    absl::core_headers\n    absl::log\n    absl::memory\n    absl::stack_consumption\n    absl::strings\n    absl::symbolize\n    GTest::gmock\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compatibility Test Options\nDESCRIPTION: This snippet conditionally sets a compiler option for compatibility tests. It sets `/wd4996` for MSVC (Microsoft Visual C++ compiler) to suppress a specific warning, and `-Wno-deprecated-declarations` for other compilers (like GCC) to suppress warnings about deprecated declarations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(MSVC)\n  SET(COMPATIBILITY_TEST_OPT \\\"/wd4996\\\")\nELSE()\n  SET(COMPATIBILITY_TEST_OPT \\\"-Wno-deprecated-declarations\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Including Libcurl Header File\nDESCRIPTION: Demonstrates the correct way to include the main libcurl header file in external projects. The header must be included using the curl subdirectory in the include path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/include/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <curl/curl.h>\n```\n\n----------------------------------------\n\nTITLE: Linking math library\nDESCRIPTION: This snippet checks if the `ldexp` function exists and links the `m` (math) library to the `cbor` library if it's not available. This ensures that the necessary math functions are available during linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly link math.h if necessary\ncheck_function_exists(ldexp LDEXP_AVAILABLE)\nif (NOT LDEXP_AVAILABLE)\n\ttarget_link_libraries(cbor m)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Compiler Warnings and Link Time Optimization (LTO)\nDESCRIPTION: This code addresses compiler warnings and LTO settings, enabling specific flags to manage shadow warnings and overflow warnings in GNU compilers. It places conditions on usage based on the environment to tailor the compilation flags appropriately.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysqlxmessages/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU_OR_CLANG AND NOT WIN32_CLANG)\n  MY_CHECK_CXX_COMPILER_WARNING(\"-Wshadow-field\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    TARGET_COMPILE_OPTIONS(router_mysqlxmessages PRIVATE ${HAS_WARN_FLAG})\n  ENDIF()\nENDIF()\n\nIF((WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO) AND MY_COMPILER_IS_GNU)\n  TARGET_LINK_OPTIONS(router_mysqlxmessages PRIVATE\n    -Wno-error=stringop-overflow)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Installation for Protobuf\nDESCRIPTION: Recommended method for adding Protocol Buffers support to a C# project through NuGet package management. Includes runtime and tools packages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/csharp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGoogle.Protobuf\nGoogle.Protobuf.Tools\n```\n\n----------------------------------------\n\nTITLE: Mapping Event Data Fields in ndb_logevent.cpp\nDESCRIPTION: Maps the event data structure fields to their respective positions in the event data array, using the ROW macro for the EventBufferUsage event.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nROW( EventBufferUsage, \"usage\", 1, usage),\nROW( EventBufferUsage, \"avail\", 2, avail),\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Directory Installation for MySQL Server\nDESCRIPTION: Defines the installation parameters for the MySQL test directory, specifying which files and directories to include or exclude. Also handles the installation of license and readme files for certain installation layouts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(INSTALL_MYSQLTESTDIR)\n  INSTALL(\n    DIRECTORY .\n    DESTINATION ${INSTALL_MYSQLTESTDIR}\n    USE_SOURCE_PERMISSIONS\n    COMPONENT Test\n    PATTERN \"var\" EXCLUDE\n    PATTERN \"var/\" EXCLUDE\n    PATTERN \"lib/My/SafeProcess\" EXCLUDE\n    PATTERN \"CPack\" EXCLUDE\n    PATTERN \"CMake*\" EXCLUDE\n    PATTERN \"Makefile\" EXCLUDE\n    PATTERN \"mtr.out*\" EXCLUDE\n    PATTERN \"*.cmake\" EXCLUDE\n    PATTERN \"*.in\" EXCLUDE\n    )\n  IF(NOT INSTALL_LAYOUT MATCHES \"RPM\" AND\n      NOT INSTALL_LAYOUT MATCHES \"DEB\")\n    INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE\n      DESTINATION ${INSTALL_DOCREADMEDIR}\n      COMPONENT TestReadme\n      RENAME LICENSE-test\n      )\n    INSTALL(FILES ${CMAKE_SOURCE_DIR}/README\n      DESTINATION ${INSTALL_DOCREADMEDIR}\n      COMPONENT TestReadme\n      RENAME README-test\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating Full and Lite MySQL X Protocol Message Libraries in CMake\nDESCRIPTION: This snippet uses the MYSQL_PROTOBUF_GENERATE_CPP_LIBRARY macro to generate both full and lite versions of the MySQL X Protocol message libraries. It sets up the necessary compile definitions, include directories, and linkage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/protobuf/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_PROTOBUF_GENERATE_CPP_LIBRARY(\n  ${PROTOBUF_FULL_LIB_NAME}\n  ${MYSQLX_PROTOBUF_PROTO_FILES}\n  OUTPUT_DIRECTORY ${PROTOBUF_FULL_GENERATE_DIR}\n  DLLEXPORT_DECL MYSQLXMESSAGES_EXPORT  # EXPORT_HEADER_NAME of GenerateExportHeader\n  )\nTARGET_LINK_LIBRARIES(${PROTOBUF_FULL_LIB_NAME} PUBLIC ext::libprotobuf)\n\nTARGET_COMPILE_DEFINITIONS(${PROTOBUF_FULL_LIB_NAME}\n  PUBLIC MYSQLXMESSAGES_STATIC_DEFINE\n  )\n\n# ... (code for include directories and compile options) ...\n\nMYSQL_PROTOBUF_GENERATE_CPP_LIBRARY(\n  ${PROTOBUF_LITE_LIB_NAME}\n  ${GENERATED_LITE_PROTO_FILES}\n  OUTPUT_DIRECTORY ${PROTOBUF_LITE_GENERATE_DIR}\n  DEPENDENCIES GenLiteProtos\n  ADDITIONAL_COMMENT \"- lite version\")\nTARGET_LINK_LIBRARIES(${PROTOBUF_LITE_LIB_NAME} PUBLIC ext::libprotobuf-lite)\n\n# ... (code for include directories and compile definitions) ...\n```\n\n----------------------------------------\n\nTITLE: Testing System Restart with SR_FULLDB\nDESCRIPTION: This snippet conducts a system restart test using the command \"testSystemRestart\" with arguments \"-n SR_FULLDB T6\". The test is limited to a maximum duration of 54180 seconds, which indicates a comprehensive assessment possibly involving a full database scenario. These tests are designed for MySQL server environments as part of restart strategy verification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--07-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_FULLDB T6\nmax-time: 54180\n```\n\n----------------------------------------\n\nTITLE: Defining Heap Storage Engine Source Files in CMake\nDESCRIPTION: Creates a list of source files that make up the core functionality of the Heap storage engine. These files implement various operations like creating, reading, updating, and deleting records in memory tables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(HEAP_SOURCES\n  # _check.cc only for debug, see below.\n  _rectest.cc\n  hp_block.cc\n  hp_clear.cc\n  hp_close.cc\n  hp_create.cc\n  hp_delete.cc\n  hp_extra.cc\n  hp_hash.cc\n  hp_info.cc\n  hp_open.cc\n  hp_panic.cc\n  hp_rename.cc\n  hp_rfirst.cc\n  hp_rkey.cc\n  hp_rlast.cc\n  hp_rnext.cc\n  hp_rprev.cc\n  hp_rrnd.cc\n  hp_scan.cc\n  hp_static.cc\n  hp_update.cc\n  hp_write.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Source Files for MySQL Router Tests\nDESCRIPTION: Creates a list of helper source files used for testing MySQL Router components, including filesystem utilities, mock server tools, process management, and testing utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(helper_sources\n  helpers/filesystem_utils.cc\n  helpers/gtest_testname.cc\n  helpers/mock_server_testutils.cc\n  helpers/core_dumper.cc\n  helpers/core_finder.cc\n  helpers/process_manager.cc\n  helpers/process_wrapper.cc\n  helpers/router_component_clusterset.cc\n  helpers/router_component_test.cc\n  helpers/router_component_testutils.cc\n  helpers/router_component_system_layout.cc\n  helpers/router_component_metadata.cc\n  helpers/router_test_helpers.cc\n  helpers/script_generator.cc\n  helpers/shared_server.cc\n  helpers/tcp_port_pool.cc\n  helpers/rest_api_testutils.cc\n  helpers/rest_metadata_client.cc\n  helpers/routing_guidelines_builder.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Server Telemetry Logs Export Component in CMake\nDESCRIPTION: This CMake snippet disables missing profile warnings and adds a new component named 'test_server_telemetry_logs_export' to the MySQL project. The component includes two source files and is marked as a module-only and test-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test_server_telemetry_logs_export/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_server_telemetry_logs_export\n  server_logs_component.cc\n  server_logs_helpers.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Authentication Plugin Subdirectories in CMake\nDESCRIPTION: Adds various authentication plugin subdirectories to the build. These plugins provide different authentication methods for connecting to MySQL servers, such as LDAP, Kerberos, and native password authentication.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# LDAP authentication SASL client plug-in\nADD_SUBDIRECTORY(authentication_ldap)\n\n# authentication kerberos client plug-in\nADD_SUBDIRECTORY(authentication_kerberos)\n\n# authentication IAM client plug-in\nADD_SUBDIRECTORY(authentication_oci_client)\n\n# Fido and Webauthn clients\nADD_SUBDIRECTORY(fido_client)\n\n# authentication mysql_native_password client plug-in\nADD_SUBDIRECTORY(authentication_native_password)\n\n# authentication openid connect client plug-in\nADD_SUBDIRECTORY(authentication_openid_connect_client)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Cast Function Type Mismatch (CMake)\nDESCRIPTION: This snippet checks for the `-Wcast-function-type-mismatch` compiler warning and adds it as a public compile option for the `mysqlgcs` target if supported. This is done because the code makes use of C-style casts in the interface to XDR functions, which can trigger this warning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Lots of C-style casting in the interface to XDR functions.\n#   xcom_xdr_free((xdrproc_t)proc ...)\n#   xdr_free((xdrproc_t)xdr_app_data_ptr\n# Add -Wno-cast-function-type-mismatch as a PUBLIC property,\n# since we have header files calling xdr_free().\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wcast-function-type-mismatch\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  TARGET_COMPILE_OPTIONS(mysqlgcs PUBLIC ${HAS_WARN_FLAG})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Flags for MySQL X Protocol\nDESCRIPTION: This snippet adds specific compile flags to the MySQL X Protocol plugin build target, utilizing predefined flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_COMPILE_FLAGS(${PROTOC_PLUGIN_SRC} COMPILE_FLAGS \"${MYSQLX_PROTOCOL_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL Router Plugin\nDESCRIPTION: Adds a harness plugin for OpenSSL with specific source files and required dependencies. Sets installation destination and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(router_openssl SOURCES\n  openssl_plugin.cc\n  REQUIRES\n  OpenSSL::SSL\n  OpenSSL::Crypto\n  harness_tls\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining log_sink_registry Library\nDESCRIPTION: This snippet defines the `log_sink_registry` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependencies on `absl::config`, `absl::log_sink`, and `absl::log_internal_log_sink_set`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_sink_registry\n  SRCS\n  HDRS\n    \"log_sink_registry.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_sink\n    absl::log_internal_log_sink_set\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Convenience Library for MySQL Keyring Common Functionality\nDESCRIPTION: Creates a convenience library for the keyring common functionality, setting up sources, dependencies, include directories, and linking necessary libraries including rapidjson.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(\n  keyring_common\n  ${KEYRING_COMMON_SOURCES}\n  ${COMPILE_OPTIONS_ARG}\n  DEPENDENCIES ${KEYRING_COMMON_DEPENDENCIES}\n  SYSTEM_INCLUDE_DIRECTORIES\n    $<TARGET_PROPERTY:extra::rapidjson,INTERFACE_INCLUDE_DIRECTORIES>\n  COMPILE_DEFINITIONS\n    $<TARGET_PROPERTY:extra::rapidjson,INTERFACE_COMPILE_DEFINITIONS>\n  LINK_LIBRARIES library_mysys extra::rapidjson\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Library Naming for MySQL Client on Unix\nDESCRIPTION: Creates a macro for generating versioned library names on Unix platforms. This ensures that the MySQL client library follows platform-specific conventions for shared library naming and versioning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  MACRO(GET_VERSIONED_LIBNAME LIBNAME EXTENSION VERSION OUTNAME)\n    SET(DOT_VERSION \".${VERSION}\")\n    IF(DOT_VERSION STREQUAL \".\")\n      SET(DOT_VERSION \"\")\n    ENDIF()\n    IF(APPLE)\n      SET(${OUTNAME} ${LIBNAME}${DOT_VERSION}${EXTENSION})\n    ELSE()\n      SET(${OUTNAME} ${LIBNAME}${EXTENSION}${DOT_VERSION})\n    ENDIF()\n  ENDMACRO()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Semisync Master Plugin\nDESCRIPTION: This snippet details the setup of the semisync_master plugin using CMake commands. It includes required source files and sets plugin properties like visibility and output name.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/semisync/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(semisync_master\n  semisync.cc\n  semisync_source.cc\n  semisync_source_ack_receiver.cc\n  semisync_source_plugin_old.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"semisync_master\\\"\n  VISIBILITY_HIDDEN\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating the MySQL System Static Library with Dependencies\nDESCRIPTION: Defines the static library target for MySQL's system library, including memory management, hex tools, base64 encoding, and option tracking components along with the system sources. Adds a dependency on the GenError target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(library_mysys STATIC\n  my_memory.cc\n  my_hex_tools.cc\n  my_base64_encode.cc\n  option_tracker_usage.cc\n  ${MY_SYSTEM_SOURCES}\n)\nADD_DEPENDENCIES(library_mysys GenError)\n```\n\n----------------------------------------\n\nTITLE: Adding Abseil Library to MySQL Server Project in CMake\nDESCRIPTION: This snippet adds the Abseil library as a subdirectory to the MySQL server project. It's the final step in the CMake configuration, incorporating the Abseil library into the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(abseil-cpp-20230802.1)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MySQL REST Service Interface\nDESCRIPTION: Specifies the include directories for the MySQL REST service interface, making the necessary header files available during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(mysql_rest_service_if\n  INTERFACE\n    ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Unit Test Targets in CMake\nDESCRIPTION: Creates multiple test targets using a FOREACH loop and the NDB_ADD_TEST custom command. Each test is linked against the previously defined unit test libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(testprog\n    CountingPool\n    DynArr256\n    IntrusiveList\n    LHLevel\n    Rope\n    SegmentList\n    TransientPagePool\n    TransientSlotPool\n    testDataBuffer\n    testSimplePropertiesSection\n    )\n  NDB_ADD_TEST(\"${testprog}-t\" \"${testprog}.cpp\"\n    LIBS ${ALL_UNIT_TEST_LIBS} ${ALL_UNIT_TEST_LIBS})\nENDFOREACH(testprog)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Meta Component in CMake\nDESCRIPTION: Configures the Abseil meta component library target. This target depends on the type_traits library and uses default compilation options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/meta/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    meta\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Executable Name Option\nDESCRIPTION: Adds an option to build the MySQL server as 'mysqld-debug' in debug builds and sets the appropriate output name property.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(DEBUG_EXTNAME \"Build server as mysqld-debug (debug builds only)\" OFF)\nMARK_AS_ADVANCED(DEBUG_EXTNAME)\n\nIF(DEBUG_EXTNAME)\n  SET_TARGET_PROPERTIES(mysqld PROPERTIES DEBUG_OUTPUT_NAME \"mysqld-debug\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Definition to Disable MySQL Thread Header\nDESCRIPTION: This snippet adds a preprocessor definition to disable the inclusion of the `mysql_thread.h` header file. This is done to avoid dependencies on per-schema data defined in `mysys`, ensuring that the strings library is independent.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DDISABLE_MYSQL_THREAD_H)\n```\n\n----------------------------------------\n\nTITLE: Conditional RPM Spec File Generation for MySQL Server on Linux\nDESCRIPTION: This CMake script checks if the system is Linux, generates a MySQL RPM spec file, and copies related files. It uses conditional logic to ensure the operations are only performed on Linux systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-oel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  RETURN()\nENDIF()\n\nSET(SPECFILENAME \"mysql.spec\")\n\n# Left in current directory, to be taken during build\nCONFIGURE_FILE(mysql.spec.in ${CMAKE_CURRENT_BINARY_DIR}/${SPECFILENAME} @ONLY)\n\nFOREACH(fedfile)\n  CONFIGURE_FILE(${fedfile} ${CMAKE_CURRENT_BINARY_DIR}/${fedfile} COPYONLY)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Internal Container Components\nDESCRIPTION: Defines internal container library components including hash tables, maps and sets. Each component is configured with headers, sources, compiler options and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    raw_hash_set\n  HDRS\n    \"internal/raw_hash_set.h\"\n  SRCS\n    \"internal/raw_hash_set.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bits\n    absl::compressed_tuple\n    absl::config\n    absl::container_common\n    absl::container_memory\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::endian\n    absl::hash\n    absl::hash_policy_traits\n    absl::hashtable_debug_hooks\n    absl::hashtablez_sampler\n    absl::memory\n    absl::meta\n    absl::optional\n    absl::prefetch\n    absl::raw_logging_internal\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building Multi-Threaded Scheduler Library in CMake\nDESCRIPTION: Defines the ndbsched_mt static library if WITH_NDBMTD is enabled. This library includes multi-threaded versions of scheduler components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_NDBMTD)\n  ADD_LIBRARY(ndbsched_mt STATIC\n    LongSignal_mt.cpp\n    SimplePropertiesSection_mt.cpp\n    SimulatedBlock_mt.cpp\n    TransporterCallback_mt.cpp\n    dummy_mt.cpp\n    mt.cpp\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking for Nanosleep Functionality in CMake\nDESCRIPTION: This snippet checks for the availability of the 'nanosleep' function and manages library dependencies to ensure this functionality is available on all required systems, resolving issues based on architecture-specific constraints.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(NEED_NANOSLEEP)\n  check_c_source_compiles(\n    \"#include <time.h>\n     int main()\n     { static struct timespec ts; nanosleep(&ts, NULL); return 0; }\"\n    nanosleep_ok)\n  if(NOT nanosleep_ok)\n    set(CMAKE_REQUIRED_LIBRARIES rt)\n    check_c_source_compiles(\n      \"#include <time.h>\n       int main()\n       { static struct timespec ts; nanosleep(&ts, NULL); return 0; }\"\n      nanosleep_ok)\n    if(nanosleep_ok)\n      set(nanosleep_libs rt)\n    else()\n      message(FATAL_ERROR \"cannot find the nanosleep function\")\n    endif()\n    set(CMAKE_REQUIRED_LIBRARIES)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Compiler Warnings in CMake for MySQL Server\nDESCRIPTION: This snippet checks for and enables various compiler warnings using MY_CHECK_CXX_COMPILER_WARNING. It appends the warning flags to CMAKE_CXX_FLAGS if supported.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Warray-bounds\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wchar-subscripts\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wstringop-overflow\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_MISSING_PROFILE}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wchar-subscripts\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wunused-lambda-capture\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wzero-as-null-pointer-constant\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wignored-attributes\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding event tracking producer components\nDESCRIPTION: Creates two producer test components for event tracking. Both are marked as module-only and test-only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/event_tracking_test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_event_tracking_producer_a\n  event_tracking_producer_a.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n\nMYSQL_ADD_COMPONENT(test_event_tracking_producer_b\n  event_tracking_producer_b.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Documentation Generation\nDESCRIPTION: Sets up Doxygen documentation generation target with custom output configuration and error logging. Includes options for redirecting stdout and handling documentation files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nSET(DOXYGEN_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/doxygen\")\nFIND_PACKAGE(Doxygen)\nIF(DOXYGEN_FOUND)\n  IF(DEFINED ENV{PB2WORKDIR})\n    SET(REDIRECT_DOXYGEN_STDOUT_DEFAULT FALSE)\n  ELSE()\n    SET(REDIRECT_DOXYGEN_STDOUT_DEFAULT TRUE)\n  ENDIF()\n  OPTION(REDIRECT_DOXYGEN_STDOUT \"Redirect doxygen output to a file\"\n    ${REDIRECT_DOXYGEN_STDOUT_DEFAULT})\n\n  CONFIGURE_FILE(Doxyfile.in Doxyfile @ONLY)\n  ADD_CUSTOM_TARGET(\n    doxygen\n    COMMAND ${CMAKE_COMMAND}\n    -DDOXYGEN_EXECUTABLE=${DOXYGEN_EXECUTABLE}\n    -DDOXYGEN_DOT_EXECUTABLE=${DOXYGEN_DOT_EXECUTABLE}\n    -DDOXYFILE=${CMAKE_BINARY_DIR}/Doxyfile\n    -DERROR_FILE=${CMAKE_BINARY_DIR}/doxyerror.log\n    -DOUTPUT_FILE=${CMAKE_BINARY_DIR}/doxyoutput.log\n    -DREDIRECT_DOXYGEN_STDOUT=${REDIRECT_DOXYGEN_STDOUT}\n    -DSOURCE_DIR=${CMAKE_SOURCE_DIR}\n    -DTOFIX_FILE=${CMAKE_BINARY_DIR}/tofix-all.log\n    -DREGRESSION_FILE=${CMAKE_BINARY_DIR}/tofix-regressions.log\n    -DIGNORE_FILE=${CMAKE_SOURCE_DIR}/Doxyfile-ignored\n    -P ${CMAKE_SOURCE_DIR}/run_doxygen.cmake\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    COMMENT \"Generating Doxygen documentation\" VERBATIM\n    )\nENDIF(DOXYGEN_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Setting up Protocol Buffer Generation for MySQL X Protocol Messages in CMake\nDESCRIPTION: This snippet sets up the environment for generating Protocol Buffer code for MySQL X Protocol messages. It defines paths, includes necessary CMake files, and sets up variables for full and lite library names.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(${CMAKE_SOURCE_DIR}/cmake/protobuf.cmake)\nINCLUDE(GenerateExportHeader)\n\nSET(PROTOBUF_FULL_LIB_NAME mysqlxmessages)\nSET(PROTOBUF_LITE_LIB_NAME mysqlxmessages_lite)\n\nSET(PROTOBUF_FULL_GENERATE_DIR ${MYSQLX_GENERATE_DIR}/protobuf)\nSET(PROTOBUF_LITE_GENERATE_DIR ${MYSQLX_GENERATE_DIR}/protobuf_lite)\nFILE(MAKE_DIRECTORY ${PROTOBUF_FULL_GENERATE_DIR} ${PROTOBUF_LITE_GENERATE_DIR})\nSET(MYSQLX_PROTOBUF_PROTO_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding cbor library\nDESCRIPTION: This snippet adds the `cbor` library as a static library. It uses the `SOURCES` variable defined earlier to specify the source files.  It also defines the public include directories for the library, making the header files available to other projects that link against it.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(cbor STATIC ${SOURCES})\ntarget_include_directories(cbor PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Building MyTAP Library for MySQL Server Testing\nDESCRIPTION: These CMake commands create a library named 'mytap' from the source file 'tap.cc' and link it with the 'mysys' library. MyTAP is likely a testing framework used in MySQL Server's test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/mytap/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(mytap tap.cc)\nTARGET_LINK_LIBRARIES(mytap mysys)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasic\nargs: -n MassiveRollback3 T1 T6 D1 D2\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending HIDAPI Source Files\nDESCRIPTION: Conditionally appends HIDAPI-related source files to the FIDO_SOURCES variable if USE_HIDAPI is defined. It differentiates between Windows/Apple and other Unix-like systems for platform-specific implementations. If neither USE_HIDAPI, WIN32, nor APPLE is defined, a fatal error occurs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(USE_HIDAPI)\n\tlist(APPEND FIDO_SOURCES hid_hidapi.c)\n\tif(NOT WIN32 AND NOT APPLE)\n\t\tlist(APPEND FIDO_SOURCES hid_unix.c)\n\tendif()\nelseif(WIN32)\n\tlist(APPEND FIDO_SOURCES hid_win.c)\n\tif(USE_WINHELLO)\n\t\tlist(APPEND FIDO_SOURCES winhello.c)\n\tendif()\nelseif(APPLE)\n\tlist(APPEND FIDO_SOURCES hid_osx.c)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \\\"Linux\\\")\n\tlist(APPEND FIDO_SOURCES hid_linux.c hid_unix.c)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \\\"NetBSD\\\")\n\tlist(APPEND FIDO_SOURCES hid_netbsd.c hid_unix.c)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \\\"OpenBSD\\\")\n\tlist(APPEND FIDO_SOURCES hid_openbsd.c hid_unix.c)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \\\"FreeBSD\\\" OR\n    CMAKE_SYSTEM_NAME STREQUAL \\\"MidnightBSD\\\")\n\tlist(APPEND FIDO_SOURCES hid_freebsd.c hid_unix.c)\nelse()\n\tmessage(FATAL_ERROR \\\"please define a hid backend for your platform\\\")\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Setting GCS Interface Source Files (CMake)\nDESCRIPTION: This section defines the source files for the GCS interface. These sources contain the code for logging, cross-platform threading, and various GCS-related functionalities like view management, message handling, and member/group identifiers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(GCS_INTERFACE_SOURCES\n  src/interface/gcs_logging.cc\n  src/interface/gcs_logging_system.cc\n  src/interface/xplatform/my_xp_cond.cc\n  src/interface/xplatform/my_xp_thread.cc\n  src/interface/xplatform/my_xp_mutex.cc\n  src/interface/xplatform/my_xp_util.cc\n  src/interface/gcs_view.cc\n  src/interface/gcs_types.cc\n  src/interface/gcs_message.cc\n  src/interface/gcs_member_identifier.cc\n  src/interface/gcs_group_identifier.cc\n  src/interface/gcs_psi.cc\n  src/interface/gcs_tagged_lock.cc)\"\n```\n\n----------------------------------------\n\nTITLE: Defining non_temporal_arm_intrinsics Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines a C++ library named `non_temporal_arm_intrinsics` using `absl_cc_library`. It specifies the header file, compiler options, and configuration dependencies, likely providing ARM-specific intrinsics for non-temporal memory operations. This library is intended for internal use only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    non_temporal_arm_intrinsics\n  HDRS\n    \\\"internal/non_temporal_arm_intrinsics.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining log_entry Library\nDESCRIPTION: This snippet defines the `log_entry` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on various Abseil libraries, including `absl::config`, `absl::core_headers`, `absl::log_internal_config`, etc. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_entry\n  SRCS\n    \"log_entry.cc\"\n  HDRS\n    \"log_entry.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_internal_config\n    absl::log_severity\n    absl::span\n    absl::strings\n    absl::time\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Libraries in CMake\nDESCRIPTION: Sets up a list of libraries required for unit testing. These libraries are used in subsequent test target definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ALL_UNIT_TEST_LIBS\n  ndberror\n  ndbgeneral\n  ndbkernel\n  ndbmgmapi\n  ndbmgmcommon\n  ndbportlib\n  ndbsched\n  ndbtest\n  ndbtransport\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding WebAuthn Authentication Plugin to MySQL CMake Build\nDESCRIPTION: Adds the FIDO WebAuthn authentication client plugin subdirectory to the build process. This plugin provides WebAuthn-based authentication capabilities for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(authentication_webauthn)\n```\n\n----------------------------------------\n\nTITLE: Conditional Authentication Plugin Test Configuration in CMake\nDESCRIPTION: Adds a conditional definition to skip authentication client plugin tests when the feature is not enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/integration/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  ADD_DEFINITIONS(-DSKIP_AUTHENTICATION_CLIENT_PLUGINS_TESTS)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Client Convenience Library in CMake\nDESCRIPTION: Creates a convenience library from the client source files. This is an intermediate library that will later be merged with other libraries to form the complete mysqlclient library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(clientlib ${CLIENT_SOURCES}\n  DEPENDENCIES GenError\n  LINK_LIBRARIES ext::zlib\n  OpenSSL::SSL OpenSSL::Crypto\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Clone Plugin in CMake\nDESCRIPTION: This snippet sets up the build configuration for the MySQL Clone plugin. It disables warnings, adds definitions for server and logging, and specifies the source files to be compiled into the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/clone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nMSVC_CPPCHECK_DISABLE()\n\nADD_DEFINITIONS(-DMYSQL_SERVER)\nADD_DEFINITIONS(-DLOG_SUBSYSTEM_TAG=\"Clone\")\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"Clone\")\n\nMYSQL_ADD_PLUGIN(clone\n  src/clone_plugin.cc\n  src/clone_client.cc\n  src/clone_server.cc\n  src/clone_status.cc\n  src/clone_local.cc\n  src/clone_os.cc\n  src/clone_hton.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"mysql_clone\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings and Log Domain for Routing\nDESCRIPTION: Configures compiler warnings for the routing library and sets the MySQL Router log domain for the routing component for proper identification in logs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nDOWNGRADE_STRINGOP_WARNINGS(routing)\n\nTARGET_COMPILE_DEFINITIONS(routing PRIVATE\n  MYSQL_ROUTER_LOG_DOMAIN=\"routing\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending NFC Source Files (Linux)\nDESCRIPTION: Conditionally appends NFC-related source files to the FIDO_SOURCES variable when building for Linux and the NFC_LINUX flag is set. This includes files related to netlink communication and NFC functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(NFC_LINUX)\n\tlist(APPEND FIDO_SOURCES netlink.c nfc.c nfc_linux.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Section Iterators Test\nDESCRIPTION: Configures a test build for the Section Iterators functionality using SectionIterators.cpp and NdbApiSignal.cpp source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_TEST(SectionIterators-t SectionIterators.cpp NdbApiSignal.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring zlib Header Files in CMake\nDESCRIPTION: Sets up the configuration for zlib header files, including generating zconf.h from a template.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein\n  ${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY\n  )\nINCLUDE_DIRECTORIES(\n  BEFORE SYSTEM ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Source Files\nDESCRIPTION: Defines a list of all test cases to be compiled, appending a suffix to each test name for output file naming.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ALL_INNODB_TESTS)\nFOREACH(test ${TESTS})\n  LIST(APPEND ALL_INNODB_TESTS ${test}-t.cc)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Connection Control Component with CMake\nDESCRIPTION: Defines the build configuration for the MySQL connection_control component. It specifies the source files to compile, marks it as MODULE_ONLY, and links against the library_mysys dependency. The component handles connection control functionality for MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/connection_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(connection_control\n  connection_control_coordinator.cc\n  connection_control.cc\n  security_context_wrapper.cc\n  connection_delay.cc\n  option_usage.cc\n  connection_control_pfs_table.cc\n  MODULE_ONLY\n  LINK_LIBRARIES\n    library_mysys\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags for MSVC (CMake)\nDESCRIPTION: This code block conditionally adds compiler flags when using the MSVC compiler.  It first checks if the compiler is MSVC and then proceeds to disable specific warnings related to signed/unsigned mismatches (C4018) and unreferenced local variables (C4101). It handles both standard MSVC and Clang-cl environments, providing different sets of warning suppressions for each.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(MSVC)\n\n  # This disables signed/unsigned mismatch warnings\n  # Compiler warning C4018.\n  IF(WIN32_CLANG)\n    ADD_COMPILE_FLAGS(${XCOM_SUNRPC_SOURCES} ${XCOM_RPCGEN_SOURCES}\n      COMPILE_FLAGS\n      \"-Wno-int-to-void-pointer-cast\"\n      \"-Wno-pointer-to-int-cast\"\n      \"-Wno-sign-compare\"\n      \"-Wno-unused-parameter\"\n      \"-Wno-unused-variable\"\n      )\n    ADD_COMPILE_FLAGS(\n      src/bindings/xcom/xcom/xcom_base.cc\n      src/bindings/xcom/xcom/sock_probe.cc\n      COMPILE_FLAGS\n      \"-Wno-unused-function\"\n      )\n    # clang has this, but clang++ does not.\n    MY_CHECK_C_COMPILER_FLAG(\"-Wdeprecated-non-prototype\"\n      HAS_DEPRECATED_NON_PROTOTYPE)\n    IF(HAS_DEPRECATED_NON_PROTOTYPE)\n      ADD_COMPILE_FLAGS(${XCOM_SUNRPC_SOURCES} ${XCOM_RPCGEN_SOURCES}\n        COMPILE_FLAGS \"-Wno-deprecated-non-prototype\")\n    ENDIF()\n  ELSE()\n    ADD_COMPILE_FLAGS(${XCOM_SUNRPC_SOURCES} ${XCOM_RPCGEN_SOURCES}\n      COMPILE_FLAGS \"/wd4018\")\n    # Also disable 'identifier' : unreferenced local variable warnings\n    # Compiler warning C4101\n    ADD_COMPILE_FLAGS(${XCOM_RPCGEN_SOURCES} COMPILE_FLAGS \"/wd4101\")\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Server Test Library in CMake\nDESCRIPTION: Defines the ndbtest static library using CMake's ADD_LIBRARY command. This library includes components used for testing the MySQL Server implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbtest STATIC\n  test_context.cpp\n  ../blocks/dbtup/tuppage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding RefConvert Test Target in CMake\nDESCRIPTION: Creates a test target for RefConvert using the NDB_ADD_TEST custom command. This test links against the ndbgeneral and ndbportlib libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(RefConvert-t RefConvert.cpp LIBS ndbgeneral ndbportlib)\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined tcmalloc_and_profiler Unit Tests with CMake\nDESCRIPTION: Sets up the unit tests for the combined tcmalloc_and_profiler library. Builds and configures the test target when BUILD_TESTING is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_executable(tcmalloc_and_profiler_unittest ${tcmalloc_both_unittest_srcs})\n  target_link_libraries(tcmalloc_and_profiler_unittest tcmalloc_and_profiler Threads::Threads)\n  add_test(tcmalloc_and_profiler_unittest tcmalloc_and_profiler_unittest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding POSIX Timers Support\nDESCRIPTION: Includes POSIX timers implementation if the platform supports it.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_POSIX_TIMERS)\n  LIST(APPEND MYSYS_SOURCES posix_timers.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including GoogleTest in CMake\nDESCRIPTION: Demonstrates how to incorporate GoogleTest into an existing CMake project using `FetchContent`. This CMake code snippet downloads the GoogleTest source code as part of the build's configure step and makes it available for linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\n# Now simply link against gtest or gtest_main as needed. Eg\nadd_executable(example example.cpp)\ntarget_link_libraries(example gtest_main)\nadd_test(NAME example_test COMMAND example)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Export Headers in CMake\nDESCRIPTION: This snippet configures the include directories and generates an export header for the `io` target in the CMake build process. It ensures that both current source and binary directories are included for proper header file resolution. The export header is generated at a specified location.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(io\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\nGENERATE_EXPORT_HEADER(io\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/io_export.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring function_ref Test in CMake\nDESCRIPTION: Sets up the test target for the function_ref library. It specifies the test source file, compilation options, and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    function_ref_test\n  SRCS\n    \"function_ref_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::function_ref\n    absl::memory\n    absl::test_instance_tracker\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Classpath for ClusterJ Tie Compilation in CMake\nDESCRIPTION: Sets up the Java classpath needed for compiling the ClusterJ Tie module. Includes directories for current build targets as well as dependencies from other components of the MySQL NDB Cluster codebase.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-tie/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-api/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-core/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/target/classes\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Random Internal Uniform Helper Library in CMake\nDESCRIPTION: Configures a CMake library target for the internal uniform helper component of Abseil's random library. This library exports the uniform_helper.h header and depends on absl::config, absl::random_internal_traits, and absl::type_traits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_uniform_helper\n  HDRS\n    \"internal/uniform_helper.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::random_internal_traits\n    absl::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Bootstrap Privilege Target for Server Build\nDESCRIPTION: Defines a custom build target that depends on all generated header files for system tables and firewall procedures. This target is only created when building with server components enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Add target for the above to be built\nIF(NOT WITHOUT_SERVER)\n  MY_ADD_CUSTOM_TARGET(GenBootstrapPriv\n    ALL\n    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_data.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_users.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_help_data.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_tables_data_fix.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_mode.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_rules.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode_and_user.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_group_rules.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_enlist.h\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_delist.h\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Install MySQL M4 Macro\nDESCRIPTION: This snippet installs the mysql.m4 macro file to the system's aclocal directory. The DESTINATION variable specifies the installation path, and the COMPONENT variable categorizes the file as part of the Development component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"INSTALL(FILES mysql.m4\n  DESTINATION ${INSTALL_SHAREDIR}/aclocal COMPONENT Development)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Logging Internal Libraries with CMake\nDESCRIPTION: This CMake configuration defines multiple internal target libraries for the Abseil logging system using the absl_cc_library macro. Each target specifies its source files, headers, compiler options, linker options, and dependencies on other Abseil components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Internal targets\nabsl_cc_library(\n  NAME\n    log_internal_check_impl\n  SRCS\n  HDRS\n    \"internal/check_impl.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log_internal_check_op\n    absl::log_internal_conditions\n    absl::log_internal_message\n    absl::log_internal_strip\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Error Message Files and Headers\nDESCRIPTION: Creates custom build targets for generating error message headers and localized error message files using comp_err utility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/utilities/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CUSTOM_COMMAND(OUTPUT ${PROJECT_BINARY_DIR}/include/mysqld_error.h\n  ${PROJECT_BINARY_DIR}/include/mysqld_ername.h\n  ${PROJECT_BINARY_DIR}/include/mysqld_errmsg.h\n  ${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/english/errmsg.sys\n  COMMAND comp_err\n  --out-dir=${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/\n  --header_file=${PROJECT_BINARY_DIR}/include/mysqld_error.h\n  --name_file=${PROJECT_BINARY_DIR}/include/mysqld_ername.h\n  --errmsg_file=${PROJECT_BINARY_DIR}/include/mysqld_errmsg.h\n  --in_file_errlog=${PROJECT_SOURCE_DIR}/share/messages_to_error_log.txt\n  --in_file_toclient=${PROJECT_SOURCE_DIR}/share/messages_to_clients.txt\n  DEPENDS\n  ${PROJECT_SOURCE_DIR}/share/messages_to_error_log.txt\n  ${PROJECT_SOURCE_DIR}/share/messages_to_clients.txt\n  ${CMAKE_CURRENT_SOURCE_DIR}/comp_err.cc)\n```\n\n----------------------------------------\n\nTITLE: Create NDB JTie JAR Target\nDESCRIPTION: Configures the creation of the ndbjtie JAR file, including classpath settings and JAR dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_JAR(ndbjtie ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  MERGE_JARS ${JARS}\n  DEPENDENCIES jtie.jar)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules for Build Checks\nDESCRIPTION: This snippet includes CMake modules for various compiler and feature checks needed during the configuration, ensuring that all required features are validated before the build proceeds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckLibraryExists)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\ninclude(CheckVariableExists)\ninclude(CMakeDependentOption)\ninclude(CTest)\ninclude(CPack)\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Running FlexAsynch Benchmark Tests\nDESCRIPTION: These commands run various benchmark tests using 'flexAsynch' with parameters for the configuration of temporary settings, connections, threads, records, and additional options such as load and drop operations. Each command is designed to run with a maximum time of 600 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-perf-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# baseline\nmax-time: 600\ncmd: flexAsynch\nargs: -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# minimal record\nmax-time: 600\ncmd: flexAsynch\nargs: -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord -a 2\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 4k record\nmax-time: 600\ncmd: flexAsynch\nargs: -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord -a 25 -s 40\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# baseline DD\nmax-time: 600\ncmd: flexAsynch\nargs: -dd -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# minimal record DD\nmax-time: 600\ncmd: flexAsynch\nargs: -dd -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord -a 2\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 4k record DD\nmax-time: 600\ncmd: flexAsynch\nargs: -dd -temp -con 2 -t 8 -r 2 -p 64 -ndbrecord -a 25 -s 40\ntype: bench\n\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Client Library Source Files in CMake\nDESCRIPTION: Lists the source files that comprise the MySQL client library. These files implement the client API functions and handle the client-side logic for connecting to and communicating with MySQL servers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLIENT_SOURCES\n  libmysql.cc\n  errmsg.cc\n  dns_srv.cc\n  ../sql-common/client.cc\n  ../sql-common/client_plugin.cc\n  ../sql-common/client_authentication.cc\n  ../sql-common/compression.cc\n  ../sql-common/get_password.cc\n  ../sql-common/net_serv.cc\n  ../sql-common/bind_params.cc\n  ../sql/auth/password.cc\n  ../sql/auth/sha2_password_common.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Plugin Build for pfs_example_plugin_employee\nDESCRIPTION: This CMake snippet configures the build for the pfs_example_plugin_employee MySQL plugin. It disables missing profile warnings, adds a server-specific definition, and specifies the source files to be compiled for the plugin. The plugin is set to be built as a test-only, module-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/pfs_table_plugin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\nADD_DEFINITIONS(-DMYSQL_SERVER)\n\nMYSQL_ADD_PLUGIN(pfs_example_plugin_employee\n  pfs_example_employee_name.cc\n  pfs_example_employee_salary.cc\n  pfs_example_machine.cc\n  pfs_example_machines_by_emp_by_mtype.cc\n  pfs_example_plugin_employee.cc\n  TEST_ONLY\n  MODULE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Compiler Flags for Release Builds in CMake\nDESCRIPTION: This snippet configures MSVC compiler flags for release builds, specifically disabling the C4100 warning (unreferenced formal parameter) for certain build configurations and the innodb_zipdecompress target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/innobase/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC AND NOT WIN32_CLANG)\n  # Disable C4100: unreferenced formal parameter\n  # for release builds and other non-innobase targets, as many parameters are\n  # server-only and debug-only.\n  FOREACH(flag\n     CMAKE_CXX_FLAGS_MINSIZEREL\n     CMAKE_CXX_FLAGS_RELEASE  CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n   SET(\"${flag}\" \"${${flag}} /wd4100\")\n  ENDFOREACH()\n  TARGET_COMPILE_OPTIONS(innodb_zipdecompress PRIVATE \"/wd4100\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Log Internal Stderr Sink Test in CMake\nDESCRIPTION: This snippet configures the test target for Abseil's internal stderr log sink. It includes the source file and dependencies needed to test the built-in log sink that outputs messages to stderr.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_48\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_internal_stderr_log_sink_test\n  SRCS\n    \"internal/stderr_log_sink_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_globals\n    absl::log_internal_test_helpers\n    absl::log_severity\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Definitions\nDESCRIPTION: This CMake code block conditionally adds the `-DDEBUG` definition if `WITH_DEBUG` is enabled. This allows conditional compilation of debug code within the source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_DEBUG)\n  ADD_DEFINITIONS(-DDEBUG)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Keyring Component Common Tests with CMake\nDESCRIPTION: This CMake snippet defines a list of test files related to the keyring component. These test files will be used to create executable test programs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(KEYRING_COMPONENT_COMMON_TESTS\n  cache\n  config_reader\n  data\n  data_file\n  iterator\n  json_data_file_operations\n  json_data_reader\n  json_data_writer\n  operations\n  parser\n  aes_encryption\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Compiler Flags for GNU with Profile Use\nDESCRIPTION: Conditionally adds specific compiler flags to suppress warnings when using GNU compiler with profile-guided optimization. Targets specific source files that may trigger warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND FPROFILE_USE)\n  ADD_COMPILE_FLAGS(\n    component_helpers/src/keyring_log_builtins_definition.cc\n    json_data/json_reader.cc\n    COMPILE_FLAGS\n    \"-Wno-array-bounds\"\n    \"-Wno-restrict\"\n    \"-Wno-stringop-overflow\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Random Bernoulli Distribution Test - C++\nDESCRIPTION: Defines a test for the Bernoulli distribution within the random distributions library, including its source files and necessary dependencies for frameworks and utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_bernoulli_distribution_test\n  SRCS\n    \"bernoulli_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_distributions\n    absl::random_random\n    absl::random_internal_sequence_urbg\n    absl::random_internal_pcg_engine\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Building Combined tcmalloc_and_profiler Library with CMake\nDESCRIPTION: Creates a combined library that includes both tcmalloc and profiler functionality. This allows applications to link against a single library instead of having to link against both libraries separately.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif(GPERFTOOLS_BUILD_HEAP_PROFILER OR GPERFTOOLS_BUILD_HEAP_CHECKER)\n    if(GPERFTOOLS_BUILD_CPU_PROFILER)\n      add_library(tcmalloc_and_profiler SHARED ${libtcmalloc_la_SOURCES} ${libprofiler_la_SOURCES})\n      target_compile_definitions(tcmalloc_and_profiler PRIVATE ${libtcmalloc_la_DEFINE})\n      set_target_properties(tcmalloc_and_profiler PROPERTIES\n              VERSION ${TCMALLOC_AND_PROFILER_SO_VERSION}\n              SOVERSION ${TCMALLOC_AND_PROFILER_SO_VERSION})\n      # We don't include libprofiler_la_LIBADD here because all it adds is\n      # libstacktrace.la, which we already get via libtcmalloc.  Trying to\n      # specify it twice causes link-time duplicate-definition errors. :-(\n      target_link_libraries(tcmalloc_and_profiler PRIVATE ${libtcmalloc_la_LIBADD})\n      install(TARGETS tcmalloc_and_profiler)\n      if(GPERFTOOLS_BUILD_STATIC)\n        add_library(tcmalloc_and_profiler_static STATIC ${libtcmalloc_la_SOURCES} ${libprofiler_la_SOURCES})\n        target_compile_definitions(tcmalloc_and_profiler_static PRIVATE ${libtcmalloc_la_DEFINE})\n        target_link_libraries(tcmalloc_and_profiler_static PRIVATE ${libtcmalloc_la_LIBADD})\n        if(NOT MSVC)\n          set_target_properties(tcmalloc_and_profiler_static PROPERTIES\n                  OUTPUT_NAME tcmalloc_and_profiler)\n        endif()\n        install(TARGETS tcmalloc_and_profiler_static)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes for Local Checkpoint Handling in MySQL\nDESCRIPTION: This section defines error codes (7009-7236) for testing local checkpoint handling in MySQL server. It covers scenarios like inserting system errors at various stages of the local checkpoint process, stopping and restarting checkpoints, and testing specific node behaviors during checkpoints.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n7009:\nInsert system error in master when local checkpoint is idle.\n\n7010:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = CALCULATE_KEEP_GCI.\n\n7011:\nStop local checkpoint in the state CALCULATE_KEEP_GCI.\n\n7012:\nRestart local checkpoint after stopping in CALCULATE_KEEP_GCI.\n\nMethod:\n1) Error 7011 in master, wait until report of stopped.\n2) Error xxxx in participant to crash it.\n3) Error 7012 in master to start again.\n\n7013:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = COPY_GCI before sending COPY_GCIREQ.\n\n7014:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = TC_CLOPSIZE before sending TC_CLOPSIZEREQ.\n\n7015:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = START_LCP_ROUND before sending START_LCP_ROUND.\n\n7016:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = START_LCP_ROUND after receiving LCP_REPORT.\n\n7017:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = TAB_COMPLETED.\n\n7018:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = TAB_SAVED before sending DIH_LCPCOMPLETE.\n\n7019:\nInsert system error in master when local checkpoint is in the\nstate clcpStatus = IDLE before sending CONTINUEB(ZCHECK_TC_COUNTER).\n\n7020:\nInsert system error in local checkpoint participant at reception of\nCOPY_GCIREQ.\n\n7075: Master\nDon't send any LCP_FRAG_ORD(last=true)\nAnd crash when all have \"not\" been sent\n\n8000: Crash particpant when receiving TCGETOPSIZEREQ\n8001: Crash particpant when receiving TC_CLOPSIZEREQ\n5010: Crash any when receiving LCP_FRAGORD\n\n7021: Crash in  master when receiving START_LCP_REQ\n7022: Crash in !master when receiving START_LCP_REQ\n\n7023: Crash in  master when sending START_LCP_CONF\n7024: Crash in !master when sending START_LCP_CONF\n\n7025: Crash in  master when receiving LCP_FRAG_REP\n7016: Crash in !master when receiving LCP_FRAG_REP\n\n7026: Crash in  master when changing state to LCP_TAB_COMPLETED \n7017: Crash in !master when changing state to LCP_TAB_COMPLETED \n\n7027: Crash in  master when changing state to LCP_TAB_SAVED\n7018: Crash in  master when changing state to LCP_TAB_SAVED\n\n7191: Crash when receiving LCP_COMPLETE_REP\n7192: Crash in setLcpActiveStatusStart - when dead node missed to LCP's\n\n7213: in GCP_COMMIT Kill specified node and self, stop processing\n7214: in GCP_TCFINISHED kill specified node\n\n7215: set c_fragments_per_node = 1 (needs to be done at startup)\n\n7236: while doing LCP init, delay the last CONTINUEB with ZINIT_LCP so\n      that all the tables are TLS_ACTIVE but the global c_lcpStatus.lcpState \n      is not yet changed from LCP_INIT_TABLES to LCP_STATUS_ACTIVE.\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_format Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_format target, which handles log message formatting in the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_format\n  SRCS\n    \"internal/log_format.cc\"\n  HDRS\n    \"internal/log_format.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_internal_append_truncated\n    absl::log_internal_config\n    absl::log_internal_globals\n    absl::log_severity\n    absl::strings\n    absl::str_format\n    absl::time\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Pthread Support for Address Sanitizer\nDESCRIPTION: Explicitly links with pthread library when using address sanitizer with GCC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Need explicit pthread for gcc -fsanitize=address\nIF(CMAKE_USE_PTHREADS_INIT AND CMAKE_C_FLAGS MATCHES \"-fsanitize=\")\n  TARGET_LINK_LIBRARIES(mysys pthread)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating fido2-cred Executable in CMake\nDESCRIPTION: This snippet defines the `fido2-cred` executable, specifying its source files, including `fido2-cred.c`, `cred_make.c`, `cred_verify.c`, `base64.c`, `util.c`, and the compatibility sources defined in `COMPAT_SOURCES`.  It creates the executable using these files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(fido2-cred\n\tfido2-cred.c\n\tcred_make.c\n\tcred_verify.c\n\tbase64.c\n\tutil.c\n\t${COMPAT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Management API Library in CMake\nDESCRIPTION: Creates a convenience library named 'ndbmgmapi' with various source files. It also specifies link libraries required for the compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmapi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbmgmapi\n  mgmapi.cpp\n  mgmapi_error.cpp\n  ndb_logevent.cpp\n  mgmapi_configuration.cpp\n  LocalConfig.cpp\n  ndbd_exit_codes.cpp\n  LINK_LIBRARIES ndbmgmcommon ndbportlib ndbgeneral\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: CreateDrop Foreign Key\nDESCRIPTION: This command outlines the test for scenarios involving the creation and subsequent dropping of foreign keys, adhering to standards for data integrity and relational structure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\ncmd: testFK\nargs: -n CreateDrop T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Binlog Mode for Changestreams Library in CMake\nDESCRIPTION: Adds a compiler definition to build the changestreams library in standalone binlog mode, allowing it to operate independently of the full MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/libstandalone/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(-DSTANDALONE_BINLOG)\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_log_sink_set Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_log_sink_set target, which manages sets of log sinks in the Abseil logging system. It specifies source files, headers, compiler options, and dependencies, with special handling for Android platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_log_sink_set\n  SRCS\n    \"internal/log_sink_set.cc\"\n  HDRS\n    \"internal/log_sink_set.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n    $<$<BOOL:${ANDROID}>:-llog>\n  DEPS\n    absl::base\n    absl::cleanup\n    absl::config\n    absl::core_headers\n    absl::log_internal_config\n    absl::log_internal_globals\n    absl::log_globals\n    absl::log_entry\n    absl::log_severity\n    absl::log_sink\n    absl::raw_logging_internal\n    absl::synchronization\n    absl::span\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Adding 'ndberror' Static Library in CMake for MySQL NDB\nDESCRIPTION: Defines the 'ndberror' static library for the MySQL NDB component. It includes two source files: TimeModule.cpp and ErrorReporter.cpp.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/error/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndberror STATIC\n  TimeModule.cpp\n  ErrorReporter.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Authentication in MySQL Client Library\nDESCRIPTION: Sets up Windows Native Authentication for the MySQL client library on Windows platforms. This allows Windows users to authenticate to MySQL servers using their Windows credentials.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  ADD_DEFINITIONS(-DAUTHENTICATION_WIN)\n  ADD_SUBDIRECTORY(authentication_win)\n  LIST(APPEND LIBS_TO_MERGE auth_win_client)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building C++ Tester Using CMake\nDESCRIPTION: This snippet shows how to build the C++ conformance test runner using CMake. It demonstrates how to compile the code to produce a binary that can be used for testing protocols. This step is a prerequisite for running the conformance tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cmake . -Dprotobuf_BUILD_CONFORMANCE=ON \\u0026\\u0026 cmake --build .\n```\n\n----------------------------------------\n\nTITLE: Building Privilege Tables Header File in CMake\nDESCRIPTION: Creates a custom command to generate mysql_fix_privilege_tables_sql.h header file from SQL scripts. This uses the comp_sql utility to convert SQL scripts into C++ header files for inclusion in the MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Build mysql_fix_privilege_tables.h\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables_sql.h\n  ${CAT_COMMAND}\n  COMMAND comp_sql\n  mysql_fix_privilege_tables\n  mysql_fix_privilege_tables.sql\n  mysql_fix_privilege_tables_sql.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables.sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_system_tables_fix.sql\n)\n\n# Add target for the above to be built\nMY_ADD_CUSTOM_TARGET(GenFixPrivs\n  ALL\n  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables_sql.h\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Plugin Installation Lock Dependencies\nDESCRIPTION: Defines lock dependencies for the plugin installation process, showing relationships between the plugin installation lock and various subsystem locks including Group Replication, InnoDB, and core server components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"cond/group_rpl/COND_applier_module_run\"\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/sql/LOCK_plugin_delete\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Test Commands with Arguments and Time Limits\nDESCRIPTION: A structured definition of MySQL Server test commands that specifies the command name, test arguments, and maximum execution time in seconds for each test. These tests cover various functional areas of MySQL Server including backup, foreign keys, dictionary operations, API functionality, timeouts, events, node restarts, indexing, and system restarts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--05-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testBackup\nargs: -n OutOfScanRecordsInLDM T1\nmax-time: 180\n\ncmd: testFK\nargs: -n TransError T1\nmax-time: 240\n\ncmd: testFK\nargs: -n CreateDropDuring T1\nmax-time: 180\n\ncmd: testDict\nargs: -n DictTakeOver_1 T1\nmax-time: 1080\n\ncmd: testDict\nargs: -n Bug53944 T1\nmax-time: 360\n\ncmd: testNdbApi\nargs: -n MaxOperations T1 T6 T13\nmax-time: 540\n\ncmd: testDict\nargs: -n DropTableConcurrentLCP2 T1\nmax-time: 1260\n\ncmd: testTimeout\nargs: T1\nmax-time: 600\n\ncmd: test_event\nargs: -n Multi_NR T1\nmax-time: 1260\n\ncmd: test_event\nargs: -n EventOperationApplier_NS T1\nmax-time: 2880\n\ncmd: testNodeRestart\nargs: -n pnr_lcp T1\nmax-time: 1260\n\ncmd: testIndex\nargs: -n NFNR3 T6 T13\nmax-time: 1260\n\ncmd: testIndex\nargs: -n NFNR1_O T6 T13\nmax-time: 1800\n\ncmd: testSystemRestart\nargs: -n SR_DD_2b_LCP D1\nmax-time: 1980\n\ncmd: testNodeRestart\nargs: -n NodeFailGCPOpen T1\nmax-time: 2340\n\ncmd: testNodeRestart\nargs: -n Terror T6 T13\nmax-time: 2340\n\ncmd: testNodeRestart\nargs: -n Bug34702 T1\nmax-time: 4500\n```\n\n----------------------------------------\n\nTITLE: Adding Executables for ut0plist in CMake\nDESCRIPTION: This snippet adds an executable target for unit testing the ut0plist component using the MYSQL_ADD_EXECUTABLE command. It specifies required source files while omitting installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ut0plist-t\\n  lot0buf.cc\\n  mtr0log.cc\\n  ut0dbg.cc\\n  ut0plist.cc\\n  SKIP_INSTALL\\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding a Library for Mock Server REST Client in CMake\nDESCRIPTION: This snippet defines the implementation files for the mock server REST client and sets up its dependencies and include directories, allowing it to be used within the larger project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MOCK_SERVER_HTTP_CLIENT_SRCS\n    mock_server_rest_client.cc)\n\nADD_LIBRARY(mock_server_rest_client ${MOCK_SERVER_HTTP_CLIENT_SRCS})\nTARGET_INCLUDE_DIRECTORIES(mock_server_rest_client PUBLIC\n  ${PROJECT_SOURCE_DIR}/src/mock_server/include/\n  ${PROJECT_SOURCE_DIR}/src/http/include/\n  )\nTARGET_LINK_LIBRARIES(mock_server_rest_client http_client extra::rapidjson)\nADD_DEPENDENCIES(mysqlrouter_all mock_server_rest_client)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Tree Visualization in MySQL\nDESCRIPTION: Sets up conditional compilation for the parse tree visualization feature based on configuration options, enabling it by default in Debug builds if not explicitly configured.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nIF(DEFINED WITH_SHOW_PARSE_TREE)\n  IF(WITH_SHOW_PARSE_TREE)\n    TARGET_COMPILE_DEFINITIONS(sql_main PRIVATE\n      WITH_SHOW_PARSE_TREE=1)\n  ENDIF()\nELSEIF(WITH_SHOW_PARSE_TREE_DEFAULT STREQUAL \"default\")\n  TARGET_COMPILE_DEFINITIONS(sql_main PRIVATE\n    $<$<CONFIG:Debug>:WITH_SHOW_PARSE_TREE=1>)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for MyISAM in CMake\nDESCRIPTION: This snippet sets compiler flags for MyISAM sources, specifically disabling warnings for class-memaccess and cast-function-type. It's conditional based on the compiler being used (GNU or MSVC).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU)\n  ADD_COMPILE_FLAGS(\n    ${MYISAM_SOURCES}\n    myisam_ftdump.cc\n    myisamchk.cc\n    myisamlog.cc\n    myisampack.cc\n    COMPILE_FLAGS \"-Wno-class-memaccess\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wcast-function-type\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(\n    mi_write.cc\n    myisamlog.cc\n    COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Hash Library Target in CMake\nDESCRIPTION: Defines the main 'hash' target for the Abseil library. This target includes the core hash implementation files and depends on various Abseil components like bits, city hash, config, and others.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash\n  HDRS\n    \"hash.h\"\n  SRCS\n    \"internal/hash.cc\"\n    \"internal/hash.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bits\n    absl::city\n    absl::config\n    absl::core_headers\n    absl::endian\n    absl::fixed_array\n    absl::function_ref\n    absl::meta\n    absl::int128\n    absl::strings\n    absl::optional\n    absl::variant\n    absl::utility\n    absl::low_level_hash\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Firewall Headers from SQL Scripts\nDESCRIPTION: Creates custom commands to generate C++ header files for MySQL Firewall stored procedures. These headers contain SQL definitions for procedures that manage firewall functionality, including individual and group-based security rules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_mode.h\n  COMMAND comp_sql\n  firewall_sp_set_firewall_mode\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_mode.sql\n  sql_firewall_sp_set_firewall_mode.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_mode.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_rules.h\n  COMMAND comp_sql\n  firewall_sp_reload_firewall_rules\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_rules.sql\n  sql_firewall_sp_reload_firewall_rules.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_rules.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode.h\n  COMMAND comp_sql\n  firewall_sp_set_firewall_group_mode\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode.sql\n  sql_firewall_sp_set_firewall_group_mode.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_set_firewall_group_mode_and_user.h\n  COMMAND comp_sql\n  firewall_sp_set_firewall_group_mode_and_user\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode_and_user.sql\n  sql_firewall_sp_set_firewall_group_mode_and_user.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_set_firewall_group_mode_and_user.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_reload_firewall_group_rules.h\n  COMMAND comp_sql\n  firewall_sp_reload_firewall_group_rules\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_group_rules.sql\n  sql_firewall_sp_reload_firewall_group_rules.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_reload_firewall_group_rules.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_enlist.h\n  COMMAND comp_sql\n  firewall_sp_firewall_group_enlist\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_enlist.sql\n  sql_firewall_sp_firewall_group_enlist.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_enlist.sql\n)\n\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_firewall_sp_firewall_group_delist.h\n  COMMAND comp_sql\n  firewall_sp_firewall_group_delist\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_delist.sql\n  sql_firewall_sp_firewall_group_delist.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql\n  ${CMAKE_CURRENT_SOURCE_DIR}/firewall/firewall_sp_firewall_group_delist.sql\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring any_invocable Test in CMake\nDESCRIPTION: Sets up the test target for the any_invocable library. It specifies the test source files, compilation options, and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    any_invocable_test\n  SRCS\n    \"any_invocable_test.cc\"\n    \"internal/any_invocable.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::any_invocable\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::type_traits\n    absl::utility\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Creating JAR file with Java Sources in CMake\nDESCRIPTION: The snippet utilizes the CMake command `CREATE_JAR` to compile Java source files and bundle them into a JAR file named `clusterj-test`. It incorporates certain class path entries, a manifest file, and dependencies, adding extra files for resource management. This is done to consolidate various Java files into a reusable library module.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(clusterj-test ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  MANIFEST ${CMAKE_CURRENT_BINARY_DIR}/manifest.mf\n  DEPENDENCIES clusterj.jar\n  EXTRA_FILES src/main/resources/META-INF\n              src/main/resources/schema.sql\n  BROKEN_JAVAC ${BROKEN_JAVAC})\n```\n\n----------------------------------------\n\nTITLE: Setting Library Version based on Platform\nDESCRIPTION: Sets the FIDO_LIBRARY_VERSION variable based on the target operating system. On Windows, it uses only major and minor version numbers; otherwise, it includes the patch version.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32)\n  SET(FIDO_LIBRARY_VERSION ${FIDO_MAJOR}.${FIDO_MINOR})\nELSE()\n  SET(FIDO_LIBRARY_VERSION ${FIDO_MAJOR}.${FIDO_MINOR}.${FIDO_PATCH})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Operation Methods in Pseudocode\nDESCRIPTION: This pseudocode defines the methods for MySQL operations, including parse, prepare, commit, abortPrepare, and abortParse. It specifies that each operation should work locally only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/wl3600.txt#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\n### Description of Operation\n\nEach operation shall work *locally* only\n\nOP::parse - Parse request, \"do dict only\" prepare\n            Shall modify schema-file if applicable\n\nOP::prepare - Prepare operation at node\n\nOP::commit - Commit operation at node\n\nOP::abortPrepare - undo OP::prepare\n    NOTE will be called even if OP::prepare returns REF\n\nOP::abortParse . undo OP::parse\n    NOTE will be called even if OP::parse returns REF (except err==SeizeFailed)\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in CMake for MySQL Server\nDESCRIPTION: This CMake function call disables warnings related to missing profiles, which is likely a configuration-specific setting for the MySQL Server build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/mytap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Building SQL Lexer Static Library for MySQL\nDESCRIPTION: Creates a static library for SQL lexical analysis with source files and dependencies. It includes sql_lexer files and generates necessary headers through dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(sql_lexer STATIC\n  sql_lexer.cc\n  sql_lexer_thd.cc\n  ${CMAKE_SOURCE_DIR}/sql/sql_lex_hash.cc\n  )\nTARGET_INCLUDE_DIRECTORIES(sql_lexer\n  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n# generate sql_yacc.h\nADD_DEPENDENCIES(sql_lexer GenServerSource)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL UDF Services Test Plugin\nDESCRIPTION: CMake macro for adding a test plugin with multiple source files, configured as test-only and module-only\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/udf_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_udf_services\n\n# Plugin service files\ntest_udf_services.cc\n\n# Files that test UDF extesnions\nudf_extension_test_functions.cc\nudf_extension_test_functions.h\n\n# UDF extension handler source files\ntest_udf_extension.cc\ntest_udf_extension.h\n\n# Service handlers source files\nservices_required.cc\nservices_required.h\n\nTEST_ONLY MODULE_ONLY)\n```\n\n----------------------------------------\n\nTITLE: Finding Make Executable\nDESCRIPTION: This snippet finds the 'make' executable on the system. This is needed because TCMalloc's build process uses Makefiles.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"FIND_PROGRAM(MAKE_EXECUTABLE make)\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Debian/Ubuntu System Details\nDESCRIPTION: A series of execute_process commands to detect the Linux distribution codename, ID, and release version using lsb_release. These variables are cached for reuse across CMake runs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# bionic, buster, etc\nIF (NOT DEFINED DEB_CODENAME)\n  execute_process(\n    COMMAND lsb_release -cs\n    OUTPUT_VARIABLE DEB_CODENAME\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  SET (DEB_CODENAME ${DEB_CODENAME} CACHE STRING \"\")\nENDIF()\n\n# debian, ubuntu\nIF (NOT DEFINED DEB_ID)\n  execute_process(\n    COMMAND lsb_release -is\n    OUTPUT_VARIABLE DEB_ID\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  SET (DEB_ID ${DEB_ID} CACHE STRING \"\")\nENDIF()\n\n# 18.04, 9.x, etc\nIF (NOT DEFINED DEB_RELEASE)\n  execute_process(\n    COMMAND lsb_release -rs\n    OUTPUT_VARIABLE DEB_RELEASE\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  SET (DEB_RELEASE ${DEB_RELEASE} CACHE STRING \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Randen Slow in CMake\nDESCRIPTION: Defines a CMake test target for testing the slow implementation of internal randen component. This target compiles and links randen_slow_test.cc with dependencies on absl::endian, absl::random_internal_randen_slow, and GTest.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_randen_slow_test\n  SRCS\n    \"internal/randen_slow_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::endian\n    absl::random_internal_randen_slow\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Test Components with CMake\nDESCRIPTION: CMake configuration for building two test-only MySQL server components - one for regular statement execution and another for prepared statement execution. Both components include utils.cc and are built as module-only components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/statement_services/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_execute_regular_statement\n    test_execute_regular_statement.cc\n    utils.cc\n    MODULE_ONLY\n    TEST_ONLY\n)\n\nMYSQL_ADD_COMPONENT(test_execute_prepared_statement\n    test_execute_prepared_statement.cc\n    utils.cc\n    MODULE_ONLY\n    TEST_ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Base Build Options\nDESCRIPTION: Sets up initial build options including warning configurations and debug settings for the MySQL build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/utilities/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\nMSVC_CPPCHECK_DISABLE()\n\nIF(NOT WITH_DEBUG)\n  DISABLE_DOCUMENTATION_WARNINGS()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for XPlugin Unit Tests in CMake\nDESCRIPTION: Specifies the libraries to be linked with the xplugin_unit_tests executable, including GCOV flags, MySQL client libraries, and testing frameworks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(xplugin_unit_tests\n  ${GCOV_LDFLAGS}\n  ${MYSQLX_CLIENT_LIB}\n  mysqlx\n  mysqlclient\n  gtest\n  gmock\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the NDB Portability Library in CMake\nDESCRIPTION: Defines the ndbportlib convenience library with all source files for platform-independent functionality including thread management, mutex operations, networking, and system utilities. Links against mysys and socket libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbportlib\n  NdbCondition.cpp\n  NdbMutex.cpp\n  NdbEnv.cpp\n  NdbThread.cpp\n  NdbHost.cpp\n  NdbHW.cpp\n  NdbTCP.cpp\n  NdbMem.cpp\n  NdbConfig.cpp\n  NdbTick.cpp\n  NdbDir.cpp\n  ndb_daemon.cpp\n  ndb_file_common.cpp\n  ndb_password.cpp\n  ndb_sockaddr.cpp\n  ndb_socket_poller.cpp\n  ndb_socketpair.cpp\n  ndb_stacktrace.cpp\n  ${EXTRA_SRC}\n  NdbNuma.cpp\n  NdbGetRUsage.cpp\n  NdbLockCpuUtil.cpp\n  NdbSpin.cpp\n  LINK_LIBRARIES mysys ${LIBSOCKET}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Unordered Dense Library in CMake for MySQL Server\nDESCRIPTION: This CMake script sets up the Unordered Dense library as an interface library. It specifies the library version, adds it as an interface library, sets up include directories, and creates an alias for the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/unordered_dense/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(UNORDERED_DENSE_DIR unordered_dense-4.4.0)\n\nADD_LIBRARY(unordered_dense INTERFACE)\n\nTARGET_INCLUDE_DIRECTORIES(unordered_dense SYSTEM INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${UNORDERED_DENSE_DIR}/include>)\n\nADD_LIBRARY(extra::unordered_dense ALIAS unordered_dense)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Huffman Generator\nDESCRIPTION: Defines the executable target 'cno_huffman_generator' which compiles the source file 'cno_huffman_generator.cc'. This executable is crucial for generating Huffman codes needed by LIBCNO.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(\n  cno_huffman_generator\n  cno_huffman_generator.cc\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Windows-Specific Warnings in MySQL\nDESCRIPTION: Applies Windows-specific compiler flags to suppress warnings in SQL hint parser and range optimizer code, addressing issues like default in switch statements without cases and conversion warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  # switch statement contains 'default' but no 'case'\n  ADD_COMPILE_FLAGS(${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n    COMPILE_FLAGS \"/wd4065\")\n  # conversion from 'uint' to 'Item *' of greater size\n  ADD_COMPILE_FLAGS(range_optimizer/range_analysis.cc\n    COMPILE_FLAGS \"/wd4312\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Log Basic Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's basic logging functionality. It includes source files, compiler and linker options, and all required dependencies for testing the core logging mechanisms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    absl_log_basic_test\n  SRCS\n    \"log_basic_test.cc\"\n    \"log_basic_test_impl.inc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::absl_log\n    absl::log_entry\n    absl::log_globals\n    absl::log_severity\n    absl::log_internal_test_actions\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::scoped_mock_log\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Client Certificate Generation\nDESCRIPTION: Generates client key and certificate signing request, and creates client certificate chain\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out clients/client.key 2048\nopenssl req -new '-sha256' -key clients/client.key -out clients/client.csr -subj \"/CN=client\"\n\ncat clients/client.crt ca/intermediate_ca2.crt > clients/client.cachain\ncat clients/client.crt ca/intermediate_ca2.crt ca/root.crt > clients/client_to_root.cachain\n```\n\n----------------------------------------\n\nTITLE: Finding Programs with CMake: MANDOC and GZIP\nDESCRIPTION: This snippet utilizes CMake's `find_program` command to locate the executables for `mandoc` and `gzip`. These tools are likely used for generating and compressing manual pages respectively. The located paths are stored in the `MANDOC_PATH` and `GZIP_PATH` variables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"find_program(MANDOC_PATH mandoc)\nfind_program(GZIP_PATH gzip)\n\nmessage(STATUS \\\"MANDOC_PATH: ${MANDOC_PATH}\\\")\nmessage(STATUS \\\"GZIP_PATH: ${GZIP_PATH}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in MySQL Server CMake Configuration\nDESCRIPTION: This command disables warnings related to missing profiling information, as profiling is not of interest for the tests in this context.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/logging/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Process Sources for GraalVM Patch Updates\nDESCRIPTION: The command prepares the environment for updating the GraalVM Polyglot Library by copying sources, applying patches, and creating temporary commits and tags. Prerequisites include Maven, GraalVM JDK Source Code, and the GRAALJDK_ROOT environment variable set.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/polyglot-nativeapi/DEV_BUILD.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn -Ddev process-sources\n```\n\n----------------------------------------\n\nTITLE: Adding Example MySQL Plugin\nDESCRIPTION: This CMake macro adds a MySQL plugin named `ftexample`. It specifies the source file (`example/plugin_example.cc`), indicates that it's a module only, and sets the output name to `mypluglib`.  `MODULE_ONLY` means it's a plugin, not linked into the server directly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_PLUGIN(ftexample\n  example/plugin_example.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \\\"mypluglib\\\"\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Traffic_FS\nDESCRIPTION: This command executes an upgrade test under file system conditions coupled with traffic, referred to as 'Upgrade_Traffic_FS', aiming to understand the effects on system performance.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Traffic_FS T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Tests with Arguments and Time Limits\nDESCRIPTION: This configuration file defines multiple test commands with their specific arguments and maximum execution times. Each test entry consists of a command name, arguments with test identifiers, and a maximum time limit in seconds. The file includes a commented-out test case that was suspended due to stability issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--14-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testIndex\nargs: -n MixedTransaction T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n DoubleUnlock T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n UpdateWithoutValues T6 D1 D2\nmax-time: 180\n\ncmd: testIndex\nargs: -n FireTrigOverload T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n NdbRecordRowLength\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n MgmdSendbufferExhaust T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n CloseBeforeExecute T1\nmax-time: 60\n\ncmd: testBasic\nargs: -r 10 -n Bug59496_case1 T2\nmax-time: 180\n\ncmd: test_event_merge\nargs: --no-implicit-nulls --no-multiops --blob-version 1\nmax-time: 180\n\ncmd: testBasic\nargs: -n PkSimpleRead\nmax-time: 360\n\ncmd: testBasic\nargs: -n Bug25090 T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n MassiveRollback T1 T6 D1 D2\nmax-time: 1080\n\ncmd: testIndex\nargs: --forceshortreqs -n InsertDelete T2\nmax-time: 720\n\ncmd: testBackup\nargs: -n NFMaster T1\nmax-time: 1080\n\ncmd: testSystemRestart\nargs: -n to T1\nmax-time: 1800\n\n# OJA: Test case has never been stable.\n#      Had several failed attempts of fixing it.\n#      Giving up for now and suspend it.\n#cmd: testSpj\n#args: -n bug#23048816\n#max-time: 180\n#\ncmd: testSpj\nargs: -n ScanJoinError\nmax-time: 1200\n\ncmd: testSpj\nargs: -n LookupJoinError T6 I1 I3\nmax-time: 600\n\ncmd: testDict\nargs: -n DropWithTakeover T1 T2\nmax-time: 1800\n\ncmd: testScan\nargs: -n ScanUsingMultipleNdbObjects T1\nmax-time: 60\n\ncmd: testBackup\nargs: -n ConsistencyUnderLoadSnapshotStart T1\nmax-time: 900\n\ncmd: testBackup\nargs: -n ConsistencyUnderLoadSnapshotStartStallGCP T1\nmax-time: 900\n```\n\n----------------------------------------\n\nTITLE: Handling Backslashes - Regex\nDESCRIPTION: Details the actions required when processing backslashes in regex, leading to various operations like character classes, backslash escapes, and named characters. Ensures valid sequences and reports errors for invalid ones.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\nbackslash:\n   'A'                   n  term                                    doBackslashA\n   'B'                   n  term                                    doBackslashB\n   'b'                   n  term                                    doBackslashb\n   'd'                   n  expr-quant                              doBackslashd\n   'D'                   n  expr-quant                              doBackslashD\n   'G'                   n  term                                    doBackslashG\n   'h'                   n  expr-quant                              doBackslashh\n   'H'                   n  expr-quant                              doBackslashH\n   'k'                   n  named-backref\n   'N'                      expr-quant                              doNamedChar      #   \\N{NAME}  named char\n   'p'                      expr-quant                              doProperty       #   \\p{Lu}  style property\n   'P'                      expr-quant                              doProperty\n   'R'                   n  expr-quant                              doBackslashR\n   'Q'                   n  term                                    doEnterQuoteMode\n   'S'                   n  expr-quant                              doBackslashS\n   's'                   n  expr-quant                              doBackslashs\n   'v'                   n  expr-quant                              doBackslashv\n   'V'                   n  expr-quant                              doBackslashV\n   'W'                   n  expr-quant                              doBackslashW\n   'w'                   n  expr-quant                              doBackslashw\n   'X'                   n  expr-quant                              doBackslashX\n   'Z'                   n  term                                    doBackslashZ\n   'z'                   n  term                                    doBackslashz\n   digit_char            n  expr-quant                              doBackRef         #  Will scan multiple digits\n   eof                      errorDeath                              doEscapeError\n   default               n  expr-quant                              doEscapedLiteralChar\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to test_event_merge Executable - CMake\nDESCRIPTION: Links the 'mysys' library to the 'test_event_merge' executable which is defined to use handle_options. This allows the executable to utilize functionality provided by the linked library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(test_event_merge mysys) # uses handle_options\n```\n\n----------------------------------------\n\nTITLE: Creating rpl_commit_order_queue Library and Test in CMake\nDESCRIPTION: Sets up a static library for rpl_commit_order_queue and creates an executable test linked against it and other required libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(rpl_commit_order_queue_lib STATIC\n  ${CMAKE_SOURCE_DIR}/sql/changestreams/apply/commit_order_queue.cc\n)\n\nMYSQL_ADD_EXECUTABLE(rpl_commit_order_queue-t rpl_commit_order_queue-t.cc\n  ENABLE_EXPORTS\n  ADD_TEST rpl_commit_order_queue\n  LINK_LIBRARIES rpl_commit_order_queue_lib gunit_small sqlgunitlib\n)\n```\n\n----------------------------------------\n\nTITLE: Creating NdbJTie Test JAR in CMake\nDESCRIPTION: Uses the CREATE_JAR command to create a JAR file for NdbJTie tests, specifying source files, classpath, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(ndbjtie-test ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  DEPENDENCIES ndbjtie.jar jtie.jar jtie-test-myjapi.jar)\n```\n\n----------------------------------------\n\nTITLE: Defining Tests\nDESCRIPTION: This CMake code defines the list of tests to be built. The TESTS variable contains a list of test names, which are used in subsequent steps to create the test executables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  cstreams_reader_state)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Platform-Specific Source Files\nDESCRIPTION: Conditionally adds shared memory transporter source files for non-Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/transporter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WIN32)\n  SET(EXTRA_SRC SHM_Transporter.unix.cpp SHM_Transporter.cpp)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL NDB Transport\nDESCRIPTION: Sets up include paths for MySQL NDB transport-related header files including management API, debugger, kernel, and transporter components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/transporter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/debugger\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/kernel\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/transporter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Suppressions for NDB Client Build in CMake\nDESCRIPTION: Sets up compiler warning flags for the NDB client build environment. This snippet includes necessary files and provides a mechanism to disable specific warnings if the compiler supports the flag.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(libutils)\n\nINCLUDE(ndb_downgrade_warnings)\n\n# Disable specific types of warnings for current directory\n# if the compiler supports the flag\nFOREACH(warning\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n    STRING_APPEND(CMAKE_C_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Installing C Extension: Ubuntu Prerequisites\nDESCRIPTION: This bash command installs necessary tools for building the C extension for Protocol Buffers on Ubuntu. It requires PHP Pear, PHP Dev, libtool, make, and GCC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y php-pear php-dev libtool make gcc\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Streams Protobuf Option in CMake\nDESCRIPTION: Defines a CMake option to include protobuf-based functionality in the Change Streams library. This option is set to OFF by default.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nOPTION(WITH_CS_PROTOBUF\n  \"Compile change streams library with protobuf based functionality\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting Source and Destination Files for UCA9 Tables\nDESCRIPTION: This snippet sets the source and destination files for generating UCA9 tables for Japanese and Chinese languages.  The source files are text files containing language-specific data. The destination files are C++ source files that will contain the generated tables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ZH_HANS_SRC_FILE ${CMAKE_SOURCE_DIR}/strings/lang_data/zh_hans.txt)\nSET(ZH_HANS_DST_FILE ${CMAKE_BINARY_DIR}/strings/uca900_zh_tbls.cc)\nSET(JA_HANS_SRC_FILE ${CMAKE_SOURCE_DIR}/strings/lang_data/ja_hans.txt)\nSET(JA_HANS_DST_FILE ${CMAKE_BINARY_DIR}/strings/uca900_ja_tbls.cc)\n```\n\n----------------------------------------\n\nTITLE: Adding LibFuzzer Support for Testing\nDESCRIPTION: Conditionally creates a special build target with LibFuzzer compilation flags for fuzz testing the library if the LibFuzzer flags are defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LIBFUZZER_COMPILE_FLAGS)\n  ADD_LIBRARY(routing_guidelines-fuzzed OBJECT ${guidelines_SRC})\n  # Build it only if needed by other targets.\n  SET_PROPERTY(TARGET routing_guidelines-fuzzed PROPERTY EXCLUDE_FROM_ALL TRUE)\n  TARGET_LINK_LIBRARIES(routing_guidelines-fuzzed\n    $<TARGET_PROPERTY:routing_guidelines-objects,LINK_LIBRARIES>)\n  TARGET_INCLUDE_DIRECTORIES(routing_guidelines-fuzzed PUBLIC\n    $<TARGET_PROPERTY:routing_guidelines-objects,INCLUDE_DIRECTORIES>)\n  TARGET_COMPILE_OPTIONS(routing_guidelines-fuzzed\n    PUBLIC \"${LIBFUZZER_COMPILE_FLAGS}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Executables\nDESCRIPTION: Specifies dependencies for the `merge_innodb_tests-t` executable to ensure it is built after the `GenError` target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEPENDENCIES(merge_innodb_tests-t GenError)\n```\n\n----------------------------------------\n\nTITLE: Gzip MAN Sources CMake\nDESCRIPTION: This snippet defines a custom command to gzip man page source files. It iterates through the MAN_SOURCES list, creating a custom command for each file to generate a gzipped file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# man_gzip\nforeach(f ${MAN_SOURCES})\n\tadd_custom_command(OUTPUT ${f}.gz\n\t\tCOMMAND gzip -cn ${f} > ${f}.gz\n\t\tDEPENDS ${f})\n\tlist(APPEND GZ_FILES ${f}.gz)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding a Static Library in CMake\nDESCRIPTION: This snippet defines the creation of a static library named 'ndbbank' by compiling source files 'Bank.cpp' and 'BankLoad.cpp'. This aids in modularizing the code and reusing common functionalities across multiple executables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/bank/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbbank STATIC Bank.cpp BankLoad.cpp)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for Connection Pool Plugin in CMake\nDESCRIPTION: This snippet uses GENERATE_EXPORT_HEADER to create an export header file for the connection pool plugin. The export file is generated in the specified binary directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nGENERATE_EXPORT_HEADER(connection_pool_plugin\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/connection_pool_plugin_export.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executables for ut0frags in CMake\nDESCRIPTION: This snippet sets up an executable for the ut0frags component, linking it with the ext::zlib library. It defines multiple source files necessary for compiling the executable within the CMake environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ut0frags-t\\n  fil0fil.cc\\n  fut0lst.cc\\n  lot0buf.cc\\n  mtr0log.cc\\n  ut0dbg.cc\\n  ut0frags.cc\\n  zlob0int.cc\\n  SKIP_INSTALL\\n  LINK_LIBRARIES ext::zlib\\n  )\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests for Abseil C++\nDESCRIPTION: This command demonstrates how to run unit tests for the Abseil C++ library using Bazel, excluding benchmark tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel test --test_tag_filters=\"-benchmark\" ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL NDB ATRT in CMake\nDESCRIPTION: Sets up include directories for various NDB components required to build the ATRT tool, including NDB API, management API, and test utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n ${CMAKE_SOURCE_DIR}/storage/ndb/include\n ${CMAKE_SOURCE_DIR}/storage/ndb/include/portlib\n ${CMAKE_SOURCE_DIR}/storage/ndb/include/logger\n ${CMAKE_SOURCE_DIR}/storage/ndb/include/util\n ${CMAKE_SOURCE_DIR}/storage/ndb/test/include\n ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbapi\n ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmsrv\n ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/mgmcommon\n ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmclient\n ${CMAKE_SOURCE_DIR}/storage/ndb/include/mgmcommon\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_generator_testing Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'hash_generator_testing' library target for testing purposes. It defines the header and source files, compiler options, and dependencies for hash generator testing utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash_generator_testing\n  HDRS\n    \"internal/hash_generator_testing.h\"\n  SRCS\n    \"internal/hash_generator_testing.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash_policy_testing\n    absl::memory\n    absl::meta\n    absl::strings\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Long String Service Testing\nDESCRIPTION: This entry defines a component 'test_string_service_long', which is intended for testing long string functionalities, similarly structured for modular and testing use.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_string_service_long\n  test_string_service_long.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Executable and Compiler Information in CMake\nDESCRIPTION: Sets up compilation of the comp_sql utility and defines compiler identification variables. The comp_sql tool is used to convert SQL scripts into C/C++ header files for inclusion in the MySQL server build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nADD_SUBDIRECTORY(sys_schema)\n\nMYSQL_ADD_EXECUTABLE(comp_sql comp_sql.cc SKIP_INSTALL)\n\n# Add compiler information, for easier debugging of output from mysql_config.\nSET(COMPILER_ID_AND_VERSION\n  \"${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Status Test in CMake\nDESCRIPTION: This snippet defines the test configuration for the 'status' library. It specifies the test source file, compiler options, and dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/status/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    status_test\n  SRCS\n   \"status_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::status\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Any Type Library Target\nDESCRIPTION: CMake configuration for the any type library including header files and dependencies. Provides type-erased container functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    any\n  HDRS\n    \"any.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bad_any_cast\n    absl::config\n    absl::core_headers\n    absl::fast_type_id\n    absl::type_traits\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Definition for Logging\nDESCRIPTION: This snippet adds a preprocessor definition to set the log component tag for the MySQL X plugin. This allows logs generated by the plugin to be easily identified.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\\\"mysqlx\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RPM Packaging for MySQL Server on Linux\nDESCRIPTION: This CMake script configures the necessary files and variables for building MySQL Server RPM packages on Linux systems. It sets default paths for PID and log files, and prepares the spec file and configuration files for the RPM build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-docker/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  RETURN()\nENDIF()\n\nSET(SPECFILENAME \"mysql.spec\")\n\nIF (\"${PIDFILE_RPM}\" STREQUAL \"\")\n  SET(PIDFILE_RPM  \"/var/run/mysqld/mysqld.pid\")\nENDIF()\n\nIF (\"${LOGFILE_RPM}\" STREQUAL \"\")\n  SET(LOGFILE_RPM \"/var/log/mysqld.log\")\nENDIF()\n\n# Left in current directory, to be taken during build\nCONFIGURE_FILE(mysql.spec.in ${CMAKE_CURRENT_BINARY_DIR}/${SPECFILENAME} @ONLY)\n\nFOREACH(fedfile my.cnf)\n  CONFIGURE_FILE(${fedfile}.in ${CMAKE_CURRENT_BINARY_DIR}/${fedfile} @ONLY)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Targets for Dynamic States and Configuration Schemas\nDESCRIPTION: This snippet uses the previously defined function to create custom targets for generating schemas related to dynamic state and configuration updates, which will automatically trigger during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SCHEMA_COMMAND(dynamic_state_schema StateFileJsonSchema)\n\nADD_SCHEMA_COMMAND(\n  configuration_update_schema\n  ConfigurationUpdateJsonSchema\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies for MySQL Keyring Migration Tool\nDESCRIPTION: Sets the MIGRATE_KEYRING_LIBRARIES variable with a list of libraries required for building the mysql_migrate_keyring executable. Includes dynamic loading libraries, MySQL system libraries, MySQL client library, and OpenSSL libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/migrate_keyring/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MIGRATE_KEYRING_LIBRARIES\n  ${CMAKE_DL_LIBS}\n  minchassis\n  mysys\n  mysqlclient\n  OpenSSL::SSL OpenSSL::Crypto\n)\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Test for JTIE MyAPI in CMake\nDESCRIPTION: Configures a test named 'test_jtie_myapi-t' which is compiled from 'myapi_test.cpp'. The test is linked against the previously defined 'libmyapi' library. This is likely a unit test for the MyAPI functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myapi/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(test_jtie_myapi-t myapi_test.cpp LIBS libmyapi)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Commands and Arguments\nDESCRIPTION: This configuration defines various test commands with their arguments and maximum execution times. Each command is structured with a 'cmd' parameter specifying the test executable, 'args' parameter defining test-specific arguments, and 'max-time' parameter setting the maximum allowed execution time in seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--15-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNdbApi\nargs: -n UpdateWithoutKeys D1 D2\nmax-time: 180\n\ncmd: testSystemRestart\nargs: -n SR_DD_2_LCP D2\nmax-time: 900\n\ncmd: testBasic\nargs: -n RollbackUpdate D1 D2\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n UpdateWithoutValues D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n MassiveRollback D1 D2\nmax-time: 1080\n\ncmd: testDict\nargs: -n CreateAndDropDuring D1 D2\nmax-time: 360\n\ncmd: testSystemRestart\nargs: -n SR2 D1\nmax-time: 3240\n\ncmd: testSystemRestart\nargs: -n SR1 D1\nmax-time: 4140\n\ncmd: testSystemRestart\nargs: -n PLCP_1 T17\nmax-time: 900\n\ncmd: testSystemRestart\nargs: -n PLCP_2 T17\nmax-time: 900\n\ncmd: testSystemRestart\nargs: -n PLCP_3 T17\nmax-time: 1200\n\ncmd: testSystemRestart\nargs: -n PLCP_4 T17\nmax-time: 1200\n\ncmd: testSystemRestart\nargs: -n PLCP_5 T17\nmax-time: 900\n\ncmd: testBackup\nargs: -n RestoreEpochRetry T1\nmax-time: 900\n\ncmd: testNodeRestart\nargs: -n MultiSocketRestart T1\nmax-time: 3600\n\ncmd: testNodeRestart\nargs: -n SumaHandover3rpl T1\nmax-time: 180\n\ncmd: testBlobs\nargs: -bug 28590428 -skip p -loop 10\nmax-time: 900\n\ncmd: testNdbApi\nargs: -n DatabaseAndSchemaName T1\nmax-time: 180\n\ncmd: test_event\nargs: -n SubscribeNR T1\nmax-time: 2400\n\ncmd: test_event\nargs: -n getEventBufferHighUsage T1\nmax-time: 1200\n\ncmd: testInterpreter\nargs: T1\nmax-time: 180\n\ncmd: testInterpreter\nargs: -n InterpretedWriteOldApi T6 T13\nmax-time: 180\n\ncmd: testInterpreter\nargs: -n InterpretedWrite T6 T13\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring btree_test in CMake for Abseil\nDESCRIPTION: Defines the 'btree_test' target for running B-tree implementation tests. It specifies the test source file, compiler options, linker options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    btree_test\n  SRCS\n    \"btree_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::algorithm_container\n    absl::btree\n    absl::btree_test_common\n    absl::compare\n    absl::core_headers\n    absl::counting_allocator\n    absl::flags\n    absl::hash_testing\n    absl::optional\n    absl::random_random\n    absl::raw_logging_internal\n    absl::strings\n    absl::test_instance_tracker\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Component for Performance Schema Resource Group in CMake\nDESCRIPTION: This snippet adds a test component for performance schema resource group to the MySQL server build. It specifies the source file and sets it as a module-only and test-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/perfschema/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_pfs_resource_group\n  test_pfs_resource_group.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Restart Command in YAML\nDESCRIPTION: This snippet defines a command for testing the restart of a MySQL node, specifying the node, retry count, and maximum execution time. The parameters facilitate controlled testing environments with particular configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--14-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncmd: testNodeRestart\nargs: -n LCP_with_many_parts_drop_table -r 1000 T17\nmax-time: 6000\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Backup Lock Service Testing\nDESCRIPTION: This snippet establishes the component 'test_backup_lock_service', specifically for testing the backup lock functionality in MySQL. It is also marked for module use only and testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_backup_lock_service\n  test_backup_lock_service.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Test Event Configuration\nDESCRIPTION: This snippet configures a test event within the MySQL environment. It specifies the command to be executed (`test_event`), arguments to be passed to the command (`-n EventOperationApplier_NR -l 2`), and a maximum execution time (`19620`).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--11-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: test_event\\nargs: -n EventOperationApplier_NR -l 2\\nmax-time: 19620\"\n```\n\n----------------------------------------\n\nTITLE: Adding Executable with CMake\nDESCRIPTION: This CMake command adds an executable named `json_schema_embedder`. It specifies that the source file `json_schema_embedder.cc` should be used to build the executable. CMake will compile and link this source file to create the executable binary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/json_schema_embedder/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(json_schema_embedder json_schema_embedder.cc)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for MySQL Server Library Component in CMake\nDESCRIPTION: Sets a list of header files for inclusion in a MySQL Server library component. The headers include utilities for deprecation, enumeration, error handling, type traits, and return status functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TARGET_HEADERS\n  deprecate_header.h\n  enumeration_utils.h\n  error.h\n  is_specialization.h\n  return_status.h\n  type_traits.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting ClusterJ Core Source Directory in CMake\nDESCRIPTION: Defines the base directory for ClusterJ Core Java source files. This variable is used throughout the file to reference source file locations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLUSTERJ_CORE_PREFIX\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core)\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Buffers Extension Values for Unit Testing\nDESCRIPTION: This file defines a comprehensive set of Protocol Buffers extension values for testing purposes. It includes optional, repeated, default, and oneof extensions with various data types such as integers, floats, booleans, strings, messages, and enums. The values follow a pattern where each type is assigned specific numeric values to verify proper handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/text_format_unittest_extensions_data.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n[protobuf_unittest.optional_int32_extension]: 101\n[protobuf_unittest.optional_int64_extension]: 102\n[protobuf_unittest.optional_uint32_extension]: 103\n[protobuf_unittest.optional_uint64_extension]: 104\n[protobuf_unittest.optional_sint32_extension]: 105\n[protobuf_unittest.optional_sint64_extension]: 106\n[protobuf_unittest.optional_fixed32_extension]: 107\n[protobuf_unittest.optional_fixed64_extension]: 108\n[protobuf_unittest.optional_sfixed32_extension]: 109\n[protobuf_unittest.optional_sfixed64_extension]: 110\n[protobuf_unittest.optional_float_extension]: 111\n[protobuf_unittest.optional_double_extension]: 112\n[protobuf_unittest.optional_bool_extension]: true\n[protobuf_unittest.optional_string_extension]: \"115\"\n[protobuf_unittest.optional_bytes_extension]: \"116\"\n[protobuf_unittest.optionalgroup_extension] {\n  a: 117\n}\n[protobuf_unittest.optional_nested_message_extension] {\n  bb: 118\n}\n[protobuf_unittest.optional_foreign_message_extension] {\n  c: 119\n}\n[protobuf_unittest.optional_import_message_extension] {\n  d: 120\n}\n[protobuf_unittest.optional_nested_enum_extension]: BAZ\n[protobuf_unittest.optional_foreign_enum_extension]: FOREIGN_BAZ\n[protobuf_unittest.optional_import_enum_extension]: IMPORT_BAZ\n[protobuf_unittest.optional_string_piece_extension]: \"124\"\n[protobuf_unittest.optional_cord_extension]: \"125\"\n[protobuf_unittest.optional_public_import_message_extension] {\n  e: 126\n}\n[protobuf_unittest.optional_lazy_message_extension] {\n  bb: 127\n}\n[protobuf_unittest.optional_unverified_lazy_message_extension] {\n  bb: 128\n}\n[protobuf_unittest.repeated_int32_extension]: 201\n[protobuf_unittest.repeated_int32_extension]: 301\n[protobuf_unittest.repeated_int64_extension]: 202\n[protobuf_unittest.repeated_int64_extension]: 302\n[protobuf_unittest.repeated_uint32_extension]: 203\n[protobuf_unittest.repeated_uint32_extension]: 303\n[protobuf_unittest.repeated_uint64_extension]: 204\n[protobuf_unittest.repeated_uint64_extension]: 304\n[protobuf_unittest.repeated_sint32_extension]: 205\n[protobuf_unittest.repeated_sint32_extension]: 305\n[protobuf_unittest.repeated_sint64_extension]: 206\n[protobuf_unittest.repeated_sint64_extension]: 306\n[protobuf_unittest.repeated_fixed32_extension]: 207\n[protobuf_unittest.repeated_fixed32_extension]: 307\n[protobuf_unittest.repeated_fixed64_extension]: 208\n[protobuf_unittest.repeated_fixed64_extension]: 308\n[protobuf_unittest.repeated_sfixed32_extension]: 209\n[protobuf_unittest.repeated_sfixed32_extension]: 309\n[protobuf_unittest.repeated_sfixed64_extension]: 210\n[protobuf_unittest.repeated_sfixed64_extension]: 310\n[protobuf_unittest.repeated_float_extension]: 211\n[protobuf_unittest.repeated_float_extension]: 311\n[protobuf_unittest.repeated_double_extension]: 212\n[protobuf_unittest.repeated_double_extension]: 312\n[protobuf_unittest.repeated_bool_extension]: true\n[protobuf_unittest.repeated_bool_extension]: false\n[protobuf_unittest.repeated_string_extension]: \"215\"\n[protobuf_unittest.repeated_string_extension]: \"315\"\n[protobuf_unittest.repeated_bytes_extension]: \"216\"\n[protobuf_unittest.repeated_bytes_extension]: \"316\"\n[protobuf_unittest.repeatedgroup_extension] {\n  a: 217\n}\n[protobuf_unittest.repeatedgroup_extension] {\n  a: 317\n}\n[protobuf_unittest.repeated_nested_message_extension] {\n  bb: 218\n}\n[protobuf_unittest.repeated_nested_message_extension] {\n  bb: 318\n}\n[protobuf_unittest.repeated_foreign_message_extension] {\n  c: 219\n}\n[protobuf_unittest.repeated_foreign_message_extension] {\n  c: 319\n}\n[protobuf_unittest.repeated_import_message_extension] {\n  d: 220\n}\n[protobuf_unittest.repeated_import_message_extension] {\n  d: 320\n}\n[protobuf_unittest.repeated_nested_enum_extension]: BAR\n[protobuf_unittest.repeated_nested_enum_extension]: BAZ\n[protobuf_unittest.repeated_foreign_enum_extension]: FOREIGN_BAR\n[protobuf_unittest.repeated_foreign_enum_extension]: FOREIGN_BAZ\n[protobuf_unittest.repeated_import_enum_extension]: IMPORT_BAR\n[protobuf_unittest.repeated_import_enum_extension]: IMPORT_BAZ\n[protobuf_unittest.repeated_string_piece_extension]: \"224\"\n[protobuf_unittest.repeated_string_piece_extension]: \"324\"\n[protobuf_unittest.repeated_cord_extension]: \"225\"\n[protobuf_unittest.repeated_cord_extension]: \"325\"\n[protobuf_unittest.repeated_lazy_message_extension] {\n  bb: 227\n}\n[protobuf_unittest.repeated_lazy_message_extension] {\n  bb: 327\n}\n[protobuf_unittest.default_int32_extension]: 401\n[protobuf_unittest.default_int64_extension]: 402\n[protobuf_unittest.default_uint32_extension]: 403\n[protobuf_unittest.default_uint64_extension]: 404\n[protobuf_unittest.default_sint32_extension]: 405\n[protobuf_unittest.default_sint64_extension]: 406\n[protobuf_unittest.default_fixed32_extension]: 407\n[protobuf_unittest.default_fixed64_extension]: 408\n[protobuf_unittest.default_sfixed32_extension]: 409\n[protobuf_unittest.default_sfixed64_extension]: 410\n[protobuf_unittest.default_float_extension]: 411\n[protobuf_unittest.default_double_extension]: 412\n[protobuf_unittest.default_bool_extension]: false\n[protobuf_unittest.default_string_extension]: \"415\"\n[protobuf_unittest.default_bytes_extension]: \"416\"\n[protobuf_unittest.default_nested_enum_extension]: FOO\n[protobuf_unittest.default_foreign_enum_extension]: FOREIGN_FOO\n[protobuf_unittest.default_import_enum_extension]: IMPORT_FOO\n[protobuf_unittest.default_string_piece_extension]: \"424\"\n[protobuf_unittest.default_cord_extension]: \"425\"\n[protobuf_unittest.oneof_uint32_extension]: 601\n[protobuf_unittest.oneof_nested_message_extension] {\n  bb: 602\n}\n[protobuf_unittest.oneof_string_extension]: \"603\"\n[protobuf_unittest.oneof_bytes_extension]: \"604\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Options for Google Test\nDESCRIPTION: This snippet sets multiple options for the Google Test CMake build configuration, such as using shared runtime libraries, building tests and samples, and hiding internal symbols. These options can be toggled ON or OFF to customize the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(\n  gtest_force_shared_crt\n  \"Use shared (DLL) run-time lib even when Google Test is built as static lib.\"\n  OFF)\n\noption(gtest_build_tests \"Build all of gtest's own tests.\" OFF)\n\noption(gtest_build_samples \"Build gtest's sample programs.\" OFF)\n\noption(gtest_disable_pthreads \"Disable uses of pthreads in gtest.\" OFF)\n\noption(\n  gtest_hide_internal_symbols\n  \"Build gtest with internal symbols hidden in shared libraries.\"\n  OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Trace Library in CMake\nDESCRIPTION: Sets up the stack trace library if WITH_STACK_TRACE is enabled. It defines includes, sources, and creates libraries for stack trace functionality. Also sets up unit tests for stack trace if BUILD_TESTING is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_STACK_TRACE)\n\n  set(S_STACKTRACE_INCLUDES src/stacktrace_impl_setup-inl.h\n          src/stacktrace_generic-inl.h\n          src/stacktrace_libgcc-inl.h\n          src/stacktrace_libunwind-inl.h\n          src/stacktrace_arm-inl.h\n          src/stacktrace_powerpc-inl.h\n          src/stacktrace_powerpc-darwin-inl.h\n          src/stacktrace_powerpc-linux-inl.h\n          src/stacktrace_win32-inl.h\n          src/stacktrace_instrument-inl.h\n          src/base/elf_mem_image.h\n          src/base/vdso_support.h)\n\n  set(SG_STACKTRACE_INCLUDES src/gperftools/stacktrace.h)\n  set(STACKTRACE_INCLUDES ${S_STACKTRACE_INCLUDES} ${SG_STACKTRACE_INCLUDES})\n  list(APPEND perftoolsinclude_HEADERS ${SG_STACKTRACE_INCLUDES})\n\n  set(libstacktrace_la_SOURCES src/stacktrace.cc\n          src/base/elf_mem_image.cc\n          src/base/vdso_support.cc\n          ${STACKTRACE_INCLUDES})\n  add_library(stacktrace INTERFACE)\n  add_library(stacktrace_object OBJECT ${libstacktrace_la_SOURCES})\n  target_link_libraries(stacktrace INTERFACE ${unwind_libs} ${LIBSPINLOCK})\n  target_sources(stacktrace INTERFACE $<TARGET_OBJECTS:stacktrace_object>)\n\n  set(libfake_stacktrace_scope_la_SOURCES src/fake_stacktrace_scope.cc)\n  add_library(fake_stacktrace_scope ${libfake_stacktrace_scope_la_SOURCES})\n\n  if(BUILD_TESTING)\n    set(STACKTRACE_UNITTEST_INCLUDES src/config_for_unittests.h\n            src/base/commandlineflags.h\n            ${STACKTRACE_INCLUDES}\n            ${LOGGING_INCLUDES})\n\n    add_executable(stacktrace_unittest src/tests/stacktrace_unittest.cc ${libstacktrace_la_SOURCES})\n    target_link_libraries(stacktrace_unittest logging fake_stacktrace_scope ${LIBSPINLOCK} ${unwind_libs})\n    target_compile_definitions(stacktrace_unittest PRIVATE STACKTRACE_IS_TESTED)\n    add_test(stacktrace_unittest stacktrace_unittest)\n\n    add_executable(check_address_unittest src/tests/check_address_test.cc)\n    target_link_libraries(check_address_unittest spinlock sysinfo logging)\n    add_test(check_address_unittest check_address_unittest)\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router IO Plugin in CMake\nDESCRIPTION: This snippet defines how to add the `io` plugin to the MySQL Router using CMake. It specifies source files, required dependencies, and details the destination for the plugin installation. The plugin requires the `io_component` and `harness-library` as dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(io\n  SOURCES\n  io_plugin.cc\n  REQUIRES\n  io_component\n  harness-library\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Global Reset - CMake\nDESCRIPTION: This snippet defines a MySQL component for performing global status resets, specifying the related source files required for its functionality. Dependencies include the MySQL server framework where this component will be built.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/tests/components/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(\"${MYSQLX_PLUGIN_NAME}_global_reset\"\n  global_status_reset.cc\n  test_emit_gr_notifications.cc\n  MODULE_ONLY\n  TEST_ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GCC Warning Flags for MySQL REST Service\nDESCRIPTION: Sets compiler warning flags for GCC specifically for handling maybe-uninitialized warnings in query_entries_object.cc\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU)\n  MY_CHECK_CXX_COMPILER_WARNING(\"error=maybe-uninitialized\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    ADD_COMPILE_FLAGS(\n      mrs/database/query_entries_object.cc\n      COMPILE_FLAGS ${HAS_WARN_FLAG}\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Source Files\nDESCRIPTION: This snippet includes a CMake source file containing additional configurations necessary for building the MySQL X Protocol.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(source_files.cmake)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Mecab System Libraries\nDESCRIPTION: This CMake code block checks if Mecab is enabled with the `system` option and if the system libraries are missing. If both conditions are true, a fatal error message is displayed, stopping the CMake configuration process. `MECAB_WARN_GIVEN` is a flag set by `MYSQL_CHECK_MECAB()`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(MECAB_WARN_GIVEN)\nWARN_MISSING_SYSTEM_MECAB(MECAB_WARN_GIVEN)\nIF(MECAB_WARN_GIVEN)\n  MESSAGE(FATAL_ERROR \\\"-DWITH_MECAB=system, but missing system libraries\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Server Telemetry Traces Component in CMake\nDESCRIPTION: This CMake snippet adds a test component for server telemetry traces to the MySQL server project. It specifies the source files, marks it as a module-only and test-only component, and disables missing profile warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test_server_telemetry_traces/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_server_telemetry_traces\n  server_telemetry_component.cc\n  server_telemetry_data.cc\n  server_telemetry_helpers.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Google Test Libraries with CMake\nDESCRIPTION: Builds the gtest and gtest_main libraries with strict warning settings. It includes optional Abseil dependency support with specific compile definitions and linking configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_library(gtest \"${cxx_strict}\" src/gtest-all.cc)\nset_target_properties(gtest PROPERTIES VERSION ${GOOGLETEST_VERSION})\nif(GTEST_HAS_ABSL)\n  target_compile_definitions(gtest PUBLIC GTEST_HAS_ABSL=1)\n  target_link_libraries(gtest PUBLIC\n    absl::failure_signal_handler\n    absl::stacktrace\n    absl::symbolize\n    absl::flags_parse\n    absl::flags_reflection\n    absl::flags_usage\n    absl::strings\n    absl::any\n    absl::optional\n    absl::variant\n    re2::re2\n  )\nendif()\ncxx_library(gtest_main \"${cxx_strict}\" src/gtest_main.cc)\nset_target_properties(gtest_main PROPERTIES VERSION ${GOOGLETEST_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Parsing Interval Quantifiers - Regex\nDESCRIPTION: Handles parsing of interval quantifiers like '{min,max}', checking character types to determine correct transitions and error states. Applies constraints such as correct interval syntax.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\ninterval-open:\n    digit_char              interval-lower\n    default                 errorDeath                              doIntervalError\n\ninterval-lower:\n    digit_char           n  interval-lower                          doIntevalLowerDigit\n    ','                  n  interval-upper\n    '}'                  n  interval-type                           doIntervalSame             # {n}\n    default                 errorDeath                              doIntervalError\n\ninterval-upper:\n    digit_char           n  interval-upper                          doIntervalUpperDigit\n    '}'                  n  interval-type\n    default                 errorDeath                              doIntervalError\n\ninterval-type:\n    '?'                  n  expr-cont                               doNGInterval                # {n,m}?\n    '+'                  n  expr-cont                               doPossessiveInterval        # {n,m}+\n    default                 expr-cont                               doInterval                  # {m,n}\n```\n\n----------------------------------------\n\nTITLE: Building Shared Library for MySQL Server Java API JNI Implementation in CMake\nDESCRIPTION: Creates a shared library 'libmyjapi' for the Java API's JNI implementation. It sets various properties and links against required libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(libmyjapi SHARED myjapi_lib.cpp)\nSET_TARGET_PROPERTIES(libmyjapi\n  PROPERTIES LINK_FLAGS \"${CMAKE_SHARED_LIBRARY_C_FLAGS}\")\nSET_TARGET_PROPERTIES(libmyjapi PROPERTIES OUTPUT_NAME \"myjapi\")\nTARGET_LINK_LIBRARIES(libmyjapi libmyapi)\n\nIF(MY_COMPILER_IS_CLANG AND WITH_UBSAN)\n  TARGET_LINK_LIBRARIES(libmyjapi -lubsan)\nENDIF()\n\nIF(APPLE)\n  SET_TARGET_PROPERTIES(libmyjapi PROPERTIES\n    MACOSX_RPATH ON\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Temptable Test Suite in CMake\nDESCRIPTION: Defines and configures a set of test executables for MySQL Server's temptable component. Sets up test targets with required library dependencies and build settings. Includes optional TBB (Threading Building Blocks) integration configuration that is commented out by default.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/temptable/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  allocator\n  cell_calculator\n  cell\n  temptable-handler\n  result\n)\n\nSET(ALL_TEMPTABLE_TESTS)\nFOREACH(test ${TESTS})\n  LIST(APPEND ALL_TEMPTABLE_TESTS ${test}-t.cc)\nENDFOREACH()\n\nMYSQL_ADD_EXECUTABLE(merge_temptable_tests-t ${ALL_TEMPTABLE_TESTS}\n  ENABLE_EXPORTS\n  ADD_TEST merge_temptable_tests-t)\n\nTARGET_LINK_LIBRARIES(merge_temptable_tests-t\n  gunit_large\n  server_unittest_library\n  )\n\n# Download TBB from https://www.threadingbuildingblocks.org\n#SET(TBB_INCDIR /path/to/tbb43_20150611oss/include)\n#SET(TBB_LIBDIR /path/to/tbb43_20150611oss/build/linux_intel64_gcc_cc4.9.1_libc2.12_kernel2.6.39_release)\n#TARGET_LINK_LIBRARIES(merge_temptable_tests-t tbb -L${TBB_LIBDIR} -Wl,-rpath=${TBB_LIBDIR})\n#INCLUDE_DIRECTORIES(${TBB_INCDIR})\n\nTARGET_LINK_LIBRARIES(merge_temptable_tests-t perfschema)\n\nADD_DEPENDENCIES(merge_temptable_tests-t GenError)\n\nFOREACH(test ${TESTS})\n  SET(SRC_FILES ${test}-t.cc)\n\n  MYSQL_ADD_EXECUTABLE(${test}-t ${SRC_FILES}\n    ENABLE_EXPORTS SKIP_INSTALL EXCLUDE_FROM_ALL)\n\n  TARGET_LINK_LIBRARIES(${test}-t\n    gunit_large\n    server_unittest_library\n    )\n\n  ADD_DEPENDENCIES(${test}-t GenError)\n\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating Unix Symlinks for MySQL Test Runner\nDESCRIPTION: Creates symbolic links for the MySQL test runner script on Unix systems. Sets up 'mtr' and 'mysql-test-run' as aliases for the mysql-test-run.pl script and sets execution permissions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  EXECUTE_PROCESS(\n    COMMAND chmod +x  mysql-test-run.pl\n    COMMAND ${CMAKE_COMMAND} -E create_symlink \n     ./mysql-test-run.pl mtr\n    COMMAND ${CMAKE_COMMAND} -E create_symlink \n     ./mysql-test-run.pl mysql-test-run\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  ) \n  IF(INSTALL_MYSQLTESTDIR)\n    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mtr \n      ${CMAKE_CURRENT_BINARY_DIR}/mysql-test-run \n      DESTINATION ${INSTALL_MYSQLTESTDIR}\n      COMPONENT Test)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring compressed_tuple Library in CMake for Abseil\nDESCRIPTION: Sets up the 'compressed_tuple' library target, which is an internal-only component. It defines the header file and dependencies for the compressed tuple implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    compressed_tuple\n  HDRS\n    \"internal/compressed_tuple.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Linker Flags for GCOV\nDESCRIPTION: If code coverage is enabled (ENABLE_GCOV), this snippet removes specific linker flags (`-fuse-ld=lld` and `-Wl,--gdb-index`) from the C and C++ linker flags. These flags might cause issues with the linker.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(ENABLE_GCOV)\n  STRING(REPLACE \\\"-fuse-ld=lld\\\" \\\"\\\"\n    CMAKE_C_LINK_FLAGS \\\"${CMAKE_C_LINK_FLAGS}\\\")\n  STRING(REPLACE \\\"-fuse-ld=lld\\\" \\\"\\\"\n    CMAKE_CXX_LINK_FLAGS \\\"${CMAKE_CXX_LINK_FLAGS}\\\")\n  STRING(REPLACE \\\"-Wl,--gdb-index\\\" \\\"\\\"\n    CMAKE_C_LINK_FLAGS \\\"${CMAKE_C_LINK_FLAGS}\\\")\n  STRING(REPLACE \\\"-Wl,--gdb-index\\\" \\\"\\\"\n    CMAKE_CXX_LINK_FLAGS \\\"${CMAKE_CXX_LINK_FLAGS}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific OpenSSL Source in CMake\nDESCRIPTION: Adds the OpenSSL applink source file for Windows builds if available. This ensures proper linking with OpenSSL on Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/keyring_encryption_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  IF(OPENSSL_APPLINK_C)\n    SET(EXTRA_SOURCES \"${OPENSSL_APPLINK_C}\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Configuration Parameter Setup\nDESCRIPTION: Sets up configuration parameters specifically for Visual Studio builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_GENERATOR MATCHES \"Visual Studio\")\n SET(CONFIG_PARAM \"-DCMAKE_INSTALL_CONFIG_NAME=${CMAKE_CFG_INTDIR}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting target properties\nDESCRIPTION: This snippet sets various properties for the `cbor` library target. These properties include the version number, the MACOSX compatibility version, and the SOVERSION (shared object version). These properties are important for managing library compatibility and versioning, especially for shared libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(cbor PROPERTIES\n\t\tVERSION ${CBOR_VERSION}\n\t\tMACHO_COMPATIBILITY_VERSION ${CBOR_VERSION_MAJOR}.${CBOR_VERSION_MINOR}.0\n\t\tSOVERSION ${CBOR_VERSION_MAJOR}.${CBOR_VERSION_MINOR})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Basic Testing - CMake\nDESCRIPTION: Defines an executable named 'testBasic' for conducting basic tests. It is compiled from the 'testBasic.cpp' source file and links against the NDBTEST and NDBCLIENT libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_EXECUTABLE(testBasic testBasic.cpp NDBTEST NDBCLIENT)\n```\n\n----------------------------------------\n\nTITLE: Configuring inlined_vector Library in CMake for Abseil\nDESCRIPTION: Defines the 'inlined_vector' library target, which provides an inlined vector implementation. It specifies the header file, compiler options, and dependencies for the inlined vector component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    inlined_vector\n  HDRS\n   \"inlined_vector.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::algorithm\n    absl::core_headers\n    absl::inlined_vector_internal\n    absl::throw_delegate\n    absl::memory\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Target for Metadata Cache Test - CMake\nDESCRIPTION: This snippet retrieves the target setup for the metadata cache test file, specifying include directories and compile definitions required for successful compilation. It ensures that the test target is correctly configured with required properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nROUTERTEST_GET_TARGET(T \"test_cache_plugin.cc\" \"${TEST_MODULE}\")\nTARGET_INCLUDE_DIRECTORIES(${T}\n  PRIVATE\n    $<TARGET_PROPERTY:metadata_cache,INCLUDE_DIRECTORIES>\n  )\nTARGET_COMPILE_DEFINITIONS(${T}\n  PRIVATE\n  METADATA_CACHE_PLUGIN_STATIC_DEFINE=1\n  METADATA_CACHE_STATIC_DEFINE=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Master Key Test Writer Executable\nDESCRIPTION: Defines a MySQL executable for testing master key writing functionality, targeting the Router component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(master_key_test_writer\n  ../helpers/master_key_test_writer.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting System Library Options\nDESCRIPTION: This snippet iterates through SYSTEM_LIBRARIES and sets the WITH_${SYSTEM_LIB} option to \"system\" if it's not already defined on the command line. This forces the use of system libraries instead of bundled ones.  It then displays a status message indicating the setting.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_SYSTEM_LIBS)\n  FOREACH(SYSTEM_LIB ${SYSTEM_LIBRARIES})\n    LIST(FIND COMMAND_LINE_VARS WITH_${SYSTEM_LIB} FOUNDIT)\n    IF(FOUNDIT LESS 0)\n      SET(WITH_${SYSTEM_LIB} \\\"system\\\")\n      SET(WITH_${SYSTEM_LIB} \\\"system\\\" CACHE STRING\n        \\\"Use system rather than bundled\\\" FORCE)\n      MESSAGE(STATUS \\\"Adding -DWITH_${SYSTEM_LIB}=${WITH_${SYSTEM_LIB}}\\\")\n    ELSE()\n      MESSAGE(STATUS\n        \\\"Found WITH_${SYSTEM_LIB}=${WITH_${SYSTEM_LIB}} on command line\\\")\n    ENDIF()\n  ENDFOREACH()\n  # Don't redo the system analysis on subsequent runs of cmake\n  UNSET(WITH_SYSTEM_LIBS)\n  UNSET(WITH_SYSTEM_LIBS CACHE)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Unlock Tests for MySQL NDB Cluster\nDESCRIPTION: A set of test configurations for testing row unlocking functionality in NDB Cluster. The tests cover basic unlocking, repeated unlocking, multi-unlocking, scan unlocking, batch unlocking, and related operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: plain\nCODE:\n```\n# Unlock row tests as of 22/01/10\nmax-time: 300\ncmd: testNdbApi\nargs: -n UnlockBasic T1\n\nmax-time: 300\ncmd: testNdbApi\nargs: -n UnlockRepeat T2\n\nmax-time: 300\ncmd: testNdbApi\nargs: -n UnlockMulti T3\n\nmax-time: 300\ncmd: testNdbApi\nargs: -n UnlockScan T1\n\nmax-time: 300\ncmd: testBasic\nargs: -n UnlockBatch T6\n\nmax-time: 300\ncmd: testBasic\nargs: -n DoubleUnlock T1\n\nmax-time: 300\ncmd: testBasic\nargs: -n UnlockUpdateBatch T3\n\nmax-time: 600\ncmd: testNodeRestart\nargs: -n MixReadUnlockRestart T1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Additional NDB Components and Subdirectories in CMake\nDESCRIPTION: Conditionally adds additional NDB-related subdirectories based on build configuration and sets up Java-related parameters for NDB Java interface if enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(kernel)\nENDIF()\nADD_SUBDIRECTORY(mgmclient)\nADD_SUBDIRECTORY(mgmsrv)\n\nIF(BUILD_IS_SINGLE_CONFIG)\n  SET(JAVA_SUBDIR)\nELSE()\n  SET(JAVA_SUBDIR $<CONFIG>)\nENDIF()\n\nIF(WIN32)\n  SET(JAVA_SEPARATOR \";\")\nELSE()\n  set(JAVA_SEPARATOR :)\nENDIF()\n\nSET(NDBJTIE_LIB)\nIF(WITH_NDB_JAVA)\n  ADD_SUBDIRECTORY(ndbjtie)\n  SET(NDBJTIE_LIB ndbjtie)\n  ADD_DEFINITIONS(-DNDB_WITH_NDBJTIE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Failure Signal Handler Library in Abseil\nDESCRIPTION: Creates a library for installing signal handlers that print stack traces on program failures like segmentation faults.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    failure_signal_handler\n  HDRS\n    \"failure_signal_handler.h\"\n  SRCS\n    \"failure_signal_handler.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::examine_stack\n    absl::stacktrace\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::raw_logging_internal\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: R8 ProGuard Rule for Protobuf Java Lite\nDESCRIPTION: This ProGuard rule addresses issues caused by R8 obfuscation when using the Protobuf Java Lite runtime. It prevents R8 from obfuscating field names in classes that extend `com.google.protobuf.GeneratedMessageLite`, resolving reflection errors during runtime.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/java/lite.md#2025-04-21_snippet_1\n\nLANGUAGE: Proguard\nCODE:\n```\n-keep class * extends com.google.protobuf.GeneratedMessageLite { *; }\n```\n\n----------------------------------------\n\nTITLE: Defining crc_memcpy Test with absl_cc_test in Bazel\nDESCRIPTION: This snippet defines a C++ test named `crc_memcpy_test` using `absl_cc_test`. It specifies the source file for the test, compiler options, and dependencies, which include `crc32c`, memory management utilities, random number generation, string manipulation, and the Google Test framework. It likely tests the functionality of CRC calculation combined with memory copy operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    crc_memcpy_test\n  SRCS\n    \\\"internal/crc_memcpy_test.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc32c\n    absl::memory\n    absl::random_random\n    absl::random_distributions\n    absl::strings\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Flags for MSVC in CMake\nDESCRIPTION: Adds the '/bigobj' compile flag to the mock.cc file when using MSVC to fix the 'number of sections exceeded' error.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC)\n  ADD_COMPILE_FLAGS(\n    mock/mock.cc\n    COMPILE_FLAGS \"/bigobj\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring DDL Rewriter Plugin in CMake for MySQL Server\nDESCRIPTION: This snippet disables a missing profile warning and adds the DDL Rewriter plugin to the MySQL server build. It specifies the source files, sets the plugin as module-only, and defines the output name.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/ddl_rewriter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_PLUGIN(ddl_rewriter\n  ddl_rewriter_plugin.cc\n  ddl_rewriter.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"ddl_rewriter\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing GPerfTools Headers with CMake\nDESCRIPTION: Installs the necessary header files for GPerfTools into the specified include directory, ensuring that client applications can include the required headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n${CMAKE_CURRENT_BINARY_DIR}/gperftools/tcmalloc.h\n        ${perftoolsinclude_HEADERS}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/gperftools)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecated Function Warnings for MD5\nDESCRIPTION: Suppresses warnings about deprecated MD5 functions when compiling on Solaris with GCC or Clang.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# MD5_Init() and others are deprecated.\nIF(SOLARIS AND MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_FLAGS(my_md5.cc COMPILE_FLAGS \"-Wno-deprecated-declarations\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing FIDO2 Executables in CMake\nDESCRIPTION: This snippet installs the `fido2-cred`, `fido2-assert`, and `fido2-token` executables to the location specified by `${CMAKE_INSTALL_BINDIR}`. This ensures that the executables are placed in the correct directory after the build process completes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS fido2-cred fido2-assert fido2-token\n\tDESTINATION ${CMAKE_INSTALL_BINDIR})\n```\n\n----------------------------------------\n\nTITLE: Compiler Compatibility Symbol for Older Compilers\nDESCRIPTION: Configuration symbol to ensure compatibility with older C# compilers when generating Protobuf classes. Prevents potential issues with ref struct implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/csharp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nGOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE\n```\n\n----------------------------------------\n\nTITLE: Setting Test Module in CMake for MySQL Router\nDESCRIPTION: Defines the test module name for the router component which will be used throughout the file for organizing test targets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TEST_MODULE router)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Hash Instantiated Test Target in CMake\nDESCRIPTION: Configures an additional test target 'hash_instantiated_test' using the same source files as the main hash test but with a different set of dependencies, likely for testing specific instantiations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    hash_instantiated_test\n  SRCS\n    \"hash_test.cc\"\n    \"internal/hash_test.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash\n    absl::hash_testing\n    absl::config\n    absl::btree\n    absl::flat_hash_map\n    absl::flat_hash_set\n    absl::node_hash_map\n    absl::node_hash_set\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Type Sizes and Configuring NDB Types Header in CMake\nDESCRIPTION: Uses CMake's CHECK_TYPE_SIZE to determine the size of various data types and generates the ndb_types.h header file based on this information. It also configures CPack to exclude the generated file from distribution packages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(CheckTypeSize)\nCHECK_TYPE_SIZE(char NDB_SIZEOF_CHAR)\nCHECK_TYPE_SIZE(short NDB_SIZEOF_SHORT)\nCHECK_TYPE_SIZE(int NDB_SIZEOF_INT)\nCHECK_TYPE_SIZE(long NDB_SIZEOF_LONG)\nCHECK_TYPE_SIZE(\"char*\" NDB_SIZEOF_CHARP)\nCHECK_TYPE_SIZE(\"long long\" NDB_SIZEOF_LONG_LONG)\nCONFIGURE_FILE(ndb_types.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/ndb_types.h\n  @ONLY)\n\n# Exclude ndb_types.h from \"make dist\"\nLIST(APPEND CPACK_SOURCE_IGNORE_FILES include/ndb_types\\\\\\.h$)\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Symlinks for MySQL Router Installation with CMake\nDESCRIPTION: This code snippet uses CMake to create symbolic links for OpenSSL libraries in the MySQL Router's plugin output directory. This ensures that the router can find the required SSL libraries after installation, particularly on Apple systems with custom SSL configurations. It also adds dependencies to ensure the symlinks are created before the router is built.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n \"IF (APPLE_WITH_CUSTOM_SSL)\n  FILE(MAKE_DIRECTORY \\\"${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter\\\")\n\n  ADD_CUSTOM_TARGET(link_openssl_dlls_for_install_mysqlrouter ALL\n    COMMAND ${CMAKE_COMMAND} -E create_symlink\n      \\\"../../lib/${CRYPTO_VERSION}\\\" \\\"${CRYPTO_VERSION}\\\"\n    COMMAND ${CMAKE_COMMAND} -E create_symlink\n      \\\"../../lib/${OPENSSL_VERSION}\\\" \\\"${OPENSSL_VERSION}\\\"\n    WORKING_DIRECTORY \\\"${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter\\\"\n\n    BYPRODUCTS\n    \\\"${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter/${CRYPTO_VERSION}\\\"\n    \\\"${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter/${OPENSSL_VERSION}\\\"\n  )\n\n  ADD_DEPENDENCIES(mysqlrouter_all\n    link_openssl_dlls_for_install_mysqlrouter)\n  ADD_DEPENDENCIES(mysqlrouter_all\n    link_openssl_dlls)\n\n  INSTALL(FILES\n    ${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter/${CRYPTO_VERSION}\n    ${CMAKE_BINARY_DIR}/plugin_output_directory/mysqlrouter/${OPENSSL_VERSION}\n    DESTINATION ${ROUTER_INSTALL_PLUGINDIR} COMPONENT Router\n  )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for MySQL Server Tests in CMake\nDESCRIPTION: This snippet checks for and applies a specific compiler warning flag to suppress unused local typedef warnings. It then appends the flag to the CMAKE_CXX_FLAGS if supported.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/utils/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Define Compilation Flags for NDB Import\nDESCRIPTION: Sets up Bison tool with specific compile flags for generating NDB import parsers. Required dependencies include BISON and its specific flags for managing parsing definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/tools/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nBISON_TARGET(ndb_import\n  ${CMAKE_CURRENT_SOURCE_DIR}/NdbImportCsvGram.ypp\n  ${CMAKE_CURRENT_BINARY_DIR}/NdbImportCsvGram.cpp\n  COMPILE_FLAGS\n  \"--name-prefix=NdbImportCsv_yy --yacc ${BISON_FLAGS_WARNINGS} ${BISON_NO_LINE_OPT}\"\n  DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/NdbImportCsvGram.hpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library for Server Stubs - CMake\nDESCRIPTION: Defines a static library `pfs_server_stubs` that includes `pfs_server_stubs.cc` and links it with required dependencies like `rapidjson` and `zlib`. The purpose is to provide performance schema support in MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(pfs_server_stubs STATIC pfs_server_stubs.cc)\\nTARGET_LINK_LIBRARIES(pfs_server_stubs extra::rapidjson ext::zlib)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Type in ndb_logevent.h\nDESCRIPTION: Defines the new EventBufferUsage event type in the public header file with event ID 58 in the NDB_MGM_EVENT_CATEGORY_INFO category.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/** NDB_MGM_EVENT_CATEGORY_INFO */\nNDB_LE_EventBufferUsage = 58\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for temptable plugin\nDESCRIPTION: This CMake command adds the specified directory to the include path used during compilation. This allows the compiler to find header files required by the source files of the temptable plugin. It uses the CMAKE_CURRENT_SOURCE_DIR variable to locate the include directory within the current source directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/temptable/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Creating All Tables - CMake\nDESCRIPTION: Defines an executable named 'create_all_tabs' for testing purposes. It compiles from the 'create_all_tabs.cpp' source file and links against the NDBTEST and NDBCLIENT libraries to facilitate integration tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_EXECUTABLE(create_all_tabs create_all_tabs.cpp NDBTEST NDBCLIENT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Router MySQL Shared Library in CMake\nDESCRIPTION: Defines the router_mysql shared library build configuration including MySQL-specific components and compiler flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(router_mysql\n  common/log_filter.cc\n  common/mysql_session.cc\n  common/server_compatibility.cc\n  common/utils_sqlstring.cc\n\n  OUTPUT_NAME \"mysqlrouter_mysql\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness_stdx\n  harness-library\n  router_mysqlclient\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining crc32c Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines the `crc32c` C++ library using `absl_cc_library`. It specifies header files, source files, compiler options, and dependencies.  The library provides CRC32C (Castagnoli) calculation functions, including optimized implementations and memory copy routines, leveraging other internal libraries and Abseil dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    crc32c\n  HDRS\n    \\\"crc32c.h\\\"\n    \\\"internal/crc32c.h\\\"\n    \\\"internal/crc_memcpy.h\\\"\n  SRCS\n    \\\"crc32c.cc\\\"\n    \\\"internal/crc32c_inline.h\\\"\n    \\\"internal/crc_memcpy_fallback.cc\\\"\n    \\\"internal/crc_memcpy_x86_64.cc\\\"\n    \\\"internal/crc_non_temporal_memcpy.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc_cpu_detect\n    absl::crc_internal\n    absl::non_temporal_memcpy\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::endian\n    absl::prefetch\n    absl::str_format\n    absl::strings\n)\"\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: Includes necessary directories for the MySQL Router project to ensure smooth compilation and linking. It highlights paths to source and binary directories that contain required headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src/harness/include/)\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src/router/include/)\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/src/metadata_cache/include/)\nINCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/src/http/include/)\n```\n\n----------------------------------------\n\nTITLE: Adding Test File for IO Component with CMake\nDESCRIPTION: This snippet configures a test file for the IO component module, specifying a dependency on the IO component library. It helps ensure correct linkage and configuration during the build process for testing purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_file(test_io_component.cc\n  MODULE io\n  LIB_DEPENDS io_component\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library from Object Library\nDESCRIPTION: Uses a custom router command to create a shared library from the object files, specifying the output name and required public dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(routing_guidelines\n  $<TARGET_OBJECTS:routing_guidelines-objects>\n\n  OUTPUT_NAME \"mysqlrouter_routing_guidelines\"\n\n  LINK_LIBRARIES\n  PUBLIC\n  harness-library\n  router_utils\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Test Commands\nDESCRIPTION: A comprehensive list of test commands for the MySQL server test suite. Each entry defines a test command with specific test case arguments and maximum execution time limits. The tests target different aspects of MySQL functionality including database operations, error handling, and system recovery scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--04-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n InterpretNok6000 T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n ReadWithoutGetValue D1 D2\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n SimpleReadAbortOnError T1 T6 T15\nmax-time: 180\n\ncmd: testBasic\nargs: -n Commit626 T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n AccCommitOrder T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n Commit630 T1 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanReadAbort15 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n CheckAfterTerror T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanReadError8081 T1 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n Bug28073\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n Bug51775 T1\nmax-time: 180\n\ncmd: testBasicAsynch\nargs: -n PkInsertAsynch\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug36247 T1\nmax-time: 540\n\ncmd: testBasic\nargs: -n PkReadUpdateAndLocker T6 D1 D2\nmax-time: 180\n\ncmd: testDict\nargs: -n Bug24631 T1\nmax-time: 180\n\ncmd: testBasicAsynch\nargs: -n PkUpdateAsynch\nmax-time: 360\n\ncmd: test_event\nargs: -n Bug12598496 T1\nmax-time: 360\n\ncmd: testIndexStat\nargs:\nmax-time: 360\n\ncmd: testBackup\nargs: -n FailSlave T1\nmax-time: 180\n\ncmd: testLimits\nargs: -n DropSignalFragments T1\nmax-time: 900\n\ncmd: testDict\nargs: -n CreateAndDropDuring T6 D1 D2\nmax-time: 360\n\ncmd: test_event\nargs: -n Apiv2EventBufferOverflow T1\nmax-time: 360\n\ncmd: testNodeRestart\nargs: -n TwoMasterNodeFailure T6 T13\nmax-time: 2520\n\ncmd: testNodeRestart\nargs: -n CommittedRead T1\nmax-time: 720\n\ncmd: testSystemRestart\nargs: -n Bug22696 T1\nmax-time: 900\n\ncmd: testNodeRestart\nargs: -n Bug16944817 T1\nmax-time: 1080\n\ncmd: testSystemRestart\nargs: -n SR_DD_1 D2\nmax-time: 1980\n\ncmd: testSystemRestart\nargs: -n SR_DD_3b_LCP D1\nmax-time: 1260\n\ncmd: testIndex\nargs: -n NF_Mixed T1 T6 T13\nmax-time: 1980\n\ncmd: testSystemRestart\nargs: -n SR2 T1\nmax-time: 3240\n\ncmd: testPartitioning\nargs: --forceshortreqs\nmax-time: 4320\n```\n\n----------------------------------------\n\nTITLE: Setting Mecab Parser Configuration\nDESCRIPTION: These CMake commands handle the Mecab parser configuration. First, it appends the current source directory to the CMake module path. Then, it includes the `mecab` module, and runs `MYSQL_CHECK_MECAB()` (likely a custom function) to check for the Mecab library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"LIST(APPEND CMAKE_MODULE_PATH \\\"${CMAKE_CURRENT_SOURCE_DIR}\\\")\nINCLUDE(mecab)\nMYSQL_CHECK_MECAB()\"\n```\n\n----------------------------------------\n\nTITLE: Installing TCMalloc Libraries\nDESCRIPTION: This snippet installs the TCMalloc shared libraries to the specified installation directory. It sets the destination, component, and permissions for the installed files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Cannot use INSTALL_PRIVATE_LIBRARY because these are not targets.\nINSTALL(FILES\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc.so\\\"\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc.so.9.16.5\\\"\n  DESTINATION \\\"${INSTALL_PRIV_LIBDIR}\\\" COMPONENT SharedLibraries\n  PERMISSIONS\n  OWNER_READ OWNER_WRITE OWNER_EXECUTE\n  GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE\n)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Build ID Support\nDESCRIPTION: Adds the build ID source file if the system supports build ID functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_BUILD_ID_SUPPORT)\n  LIST(APPEND MYSYS_SOURCES build_id.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Session Test in CMake\nDESCRIPTION: Configures a test file for MySQL session handling with dependencies on MySQL libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_mysql_session.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_mysql\n  INCLUDE_DIRS\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: waiter_test\nDESCRIPTION: This snippet defines an Abseil C++ test for internal waiter functionality, named `waiter_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::config`, `absl::kernel_timeout_internal`, `absl::random_random`, `absl::synchronization`, `absl::thread_pool`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    waiter_test\n  SRCS\n    \\\"internal/waiter_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::config\n    absl::kernel_timeout_internal\n    absl::random_random\n    absl::synchronization\n    absl::thread_pool\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Warning in CMake\nDESCRIPTION: This snippet disables a specific warning related to missing profiles within the CMake build system, ensuring that it does not interfere with the plugin build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/replication_observers_example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Tools for TCMalloc in CMake\nDESCRIPTION: Sets up various benchmark tools for TCMalloc, including malloc_bench, malloc_bench_shared, malloc_bench_shared_full, binary_trees, and binary_trees_shared. These tools are configured with appropriate libraries and compilation flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MINGW AND NOT MSVC)\n  if(gperftools_build_benchmark)\n    add_library(run_benchmark benchmark/run_benchmark.cc)\n\n    add_executable(malloc_bench benchmark/malloc_bench.cc)\n    target_link_libraries(malloc_bench run_benchmark ${TCMALLOC_FLAGS})\n    if(GPERFTOOLS_BUILD_STATIC)\n      target_link_libraries(malloc_bench tcmalloc_minimal_static)\n    else()\n      target_link_libraries(malloc_bench tcmalloc_minimal)\n    endif()\n    add_executable(malloc_bench_shared benchmark/malloc_bench.cc)\n    target_link_libraries(malloc_bench_shared run_benchmark tcmalloc_minimal ${TCMALLOC_FLAGS} Threads::Threads)\n\n    if(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)\n      add_executable(malloc_bench_shared_full benchmark/malloc_bench.cc)\n      target_link_libraries(malloc_bench_shared_full run_benchmark tcmalloc ${TCMALLOC_FLAGS} Threads::Threads)\n    endif()\n\n    add_executable(binary_trees benchmark/binary_trees.cc)\n    target_link_libraries(binary_trees Threads::Threads ${TCMALLOC_FLAGS})\n    if(GPERFTOOLS_BUILD_STATIC)\n      target_link_libraries(binary_trees tcmalloc_minimal_static)\n    else()\n      target_link_libraries(binary_trees tcmalloc_minimal)\n    endif()\n    add_executable(binary_trees_shared benchmark/binary_trees.cc)\n    target_link_libraries(binary_trees_shared tcmalloc_minimal Threads::Threads ${TCMALLOC_FLAGS})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Log Macro Hygiene Test in CMake\nDESCRIPTION: This snippet defines the test target for validating the hygiene of Abseil's logging macros. It specifies the source file and dependencies needed to ensure that log macros don't have unintended side effects or symbol conflicts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_macro_hygiene_test\n  SRCS\n    \"log_macro_hygiene_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_severity\n    absl::scoped_mock_log\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake Build Path\nDESCRIPTION: This snippet adds directories to the CMake build path to include necessary header files from the NDB test include directory. It ensures that the subsequent build steps have access to the required headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/bank/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/test/include\n)\n```\n\n----------------------------------------\n\nTITLE: Defining log_sink Library\nDESCRIPTION: This snippet defines the `log_sink` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on `absl::config` and `absl::log_entry`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_sink\n  SRCS\n    \"log_sink.cc\"\n  HDRS\n    \"log_sink.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_entry\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Additional NDB Tests in CMake\nDESCRIPTION: Adds a series of additional NDB tests, each linked against ndbmgmapi, ndbgeneral, and ndbportlib libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(tests\n    NdbPack\n    mysql_utils_test\n    ndb_openssl_evp\n    ndbxfrm_file\n    NdbSqlUtil\n    md5_hash\n    LogBuffer\n    testSimpleProperties\n    testProp\n    testSecureSocket\n    testConfigValues\n    testTlsKeyManager\n    testNdbProcess\n    )\n  NDB_ADD_TEST(\"${tests}-t\" \"${tests}.cpp\" LIBS ndbmgmapi ndbgeneral ndbportlib)\nENDFOREACH(tests)\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Time Library\nDESCRIPTION: CMake configuration for the main Abseil time library with multiple source files and dependencies\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/time/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    time\n  HDRS\n    \"civil_time.h\"\n    \"clock.h\"\n    \"time.h\"\n  SRCS\n    \"civil_time.cc\"\n    \"clock.cc\"\n    \"duration.cc\"\n    \"format.cc\"\n    \"internal/get_current_time_chrono.inc\"\n    \"internal/get_current_time_posix.inc\"\n    \"time.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::civil_time\n    absl::core_headers\n    absl::int128\n    absl::raw_logging_internal\n    absl::strings\n    absl::time_zone\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Setting zlib Configuration Based on Ubuntu Version\nDESCRIPTION: Configures MySQL to use bundled zlib on Ubuntu 20.04 (focal) and 22.04 (jammy) due to outdated system zlib versions. Other distributions use the system zlib.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Ubuntu 20.04 and 22.04 has too old zlib\nIF(DEB_CODENAME STREQUAL \"focal\" OR DEB_CODENAME STREQUAL \"jammy\")\n  SET (DEB_ZLIB_OPTION \"bundled\")\nELSE()\n  SET (DEB_ZLIB_OPTION \"system\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: lifetime_test\nDESCRIPTION: This snippet defines an Abseil C++ test related to object lifetimes, named `lifetime_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::synchronization`, `absl::core_headers`, and `absl::check`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    lifetime_test\n  SRCS\n    \\\"lifetime_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::core_headers\n    absl::check\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Time-Related Source Files for MySQL\nDESCRIPTION: Sets up the source files related to time functionality and creates a convenience library called 'mytime'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MY_TIME_SOURCES my_time.cc my_systime.cc)\n\nADD_CONVENIENCE_LIBRARY(mytime ${MY_TIME_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for UCA9 Dump Utility\nDESCRIPTION: This snippet adds an executable named `uca9dump` which is built from `uca9-dump.cc`.  This utility is used for processing Unicode Collation Algorithm (UCA) data.  The `SKIP_INSTALL` option prevents it from being installed during the installation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(uca9dump uca9-dump.cc SKIP_INSTALL)\n```\n\n----------------------------------------\n\nTITLE: Appending Libraries to TARGET_LIBRARIES List\nDESCRIPTION: Appends various library variables to the TARGET_LIBRARIES list, including CBOR_LIBRARIES, CRYPTO_LIBRARIES, UDEV_LIBRARIES, BASE_LIBRARIES, HIDAPI_LIBRARIES, ZLIB_LIBRARIES, and PCSC_LIBRARIES.  This list consolidates all library dependencies for linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n\"list(APPEND TARGET_LIBRARIES\n\t${CBOR_LIBRARIES}\n\t${CRYPTO_LIBRARIES}\n\t${UDEV_LIBRARIES}\n\t${BASE_LIBRARIES}\n\t${HIDAPI_LIBRARIES}\n\t${ZLIB_LIBRARIES}\n\t${PCSC_LIBRARIES}\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for LOCK_replica_net_timeout in MySQL Server\nDESCRIPTION: This snippet defines the lock dependencies for the LOCK_replica_net_timeout mutex in MySQL server. It shows relationships with debug synchronization condition and mutex.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_replica_net_timeout\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/LOCK_replica_net_timeout\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Performance Testing\nDESCRIPTION: An SQL select statement using a random key to fetch data from a 1 million row table T1, measuring performance at 1000 rows per second.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n100' * (select 1 from T1 (1M rows) where key = rand());\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for Routing Plugin\nDESCRIPTION: Generates an export header file for the routing plugin to properly handle symbol visibility. The generated header is placed in the include directory for use by other components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nGENERATE_EXPORT_HEADER(routing_plugin\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/routing_plugin_export.h)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Linkage Test\nDESCRIPTION: This snippet creates an executable named `cpp_linkage_test` from the `cpp_linkage_test.cpp` source file and links it against the cbor library. This test is presumably used to verify proper C++ linkage with the cbor library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(cpp_linkage_test cpp_linkage_test.cpp)\ntarget_link_libraries(cpp_linkage_test cbor)\n```\n\n----------------------------------------\n\nTITLE: Configuring any_invocable Library in CMake\nDESCRIPTION: Defines the any_invocable library target with its source files, headers, compilation options, and dependencies. This library is part of the Abseil C++ project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    any_invocable\n  SRCS\n    \"internal/any_invocable.h\"\n  HDRS\n    \"any_invocable.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::type_traits\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Creating libcurl Alias\nDESCRIPTION: This snippet creates an alias for the libcurl library. The alias points to the selected library (either static or shared). This allows for consistent usage of libcurl regardless of the build type.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/lib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Here we do: add_library(libcurl ALIAS libcurl_static})\nadd_library(${LIB_NAME} ALIAS ${LIB_SELECTED})\n# Here we do: add_library(CURL::libcurl ALIAS libcurl_static)\n# Disable it, we want all projects to use ext::curl (alias curl_interface)\n# add_library(${PROJECT_NAME}::${LIB_NAME} ALIAS ${LIB_SELECTED})\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Storage Engine Build in MySQL\nDESCRIPTION: Conditional CMake configuration that builds the example storage engine library if WITH_EXAMPLE_STORAGE_ENGINE is enabled. Creates a library named 'example' from ha_example.cc source file and adds a dependency on GenError target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_EXAMPLE_STORAGE_ENGINE)\n  ADD_LIBRARY(example ha_example.cc)\n  ADD_DEPENDENCIES(example GenError)\nENDIF(WITH_EXAMPLE_STORAGE_ENGINE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runtime Libraries Installation\nDESCRIPTION: Handles the installation of MSVC runtime libraries on Windows systems when BUNDLE_RUNTIME_LIBRARIES is enabled. Copies specific DLL files from System32 to the installation directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(BUNDLE_RUNTIME_LIBRARIES \"INSTALL runtime libraries\" OFF)\nIF(BUNDLE_RUNTIME_LIBRARIES)\n  SET(RUNTIME_LIBRARIES\n    msvcp140\n    ucrtbase\n    vcruntime140\n    )\n  FOREACH(LIB ${RUNTIME_LIBRARIES})\n    SET(LIB_PATH \"C:/Windows/System32/${LIB}.dll\")\n    SET(LIB_D_PATH \"C:/Windows/System32/${LIB}d.dll\")\n    FOREACH(LIBRARY_PATH ${LIB_PATH} ${LIB_D_PATH})\n      IF(EXISTS \"${LIBRARY_PATH}\")\n        MESSAGE(STATUS \"INSTALL ${LIBRARY_PATH} to ${INSTALL_BINDIR}\")\n        INSTALL(FILES\n          \"${LIBRARY_PATH}\" DESTINATION \"${INSTALL_BINDIR}\"\n          COMPONENT SharedLibraries)\n      ELSE()\n        MESSAGE(STATUS \"Could not find ${LIBRARY_PATH}\")\n      ENDIF()\n    ENDFOREACH()\n  ENDFOREACH()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for OpenSSL Plugin\nDESCRIPTION: Uses CMake's GENERATE_EXPORT_HEADER to create an export header file for the router_openssl library, enabling proper symbol visibility and export management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nGENERATE_EXPORT_HEADER(router_openssl\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/router_openssl_export.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Performance Test (CMake)\nDESCRIPTION: This block conditionally includes the `spj_performance_test` executable based on whether the target platform is Windows (WIN32). If it is not Windows, the executable is created with dependencies NDBTEST, NDBCLIENT, and MYSQLCLIENT. Additionally, if the compiler is Clang, a compiler flag is added to suppress a specific warning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(NOT WIN32)\n  NDB_ADD_EXECUTABLE(spj_performance_test spj_performance_test.cpp\n    NDBTEST NDBCLIENT MYSQLCLIENT)\n  IF(MY_COMPILER_IS_CLANG)\n    ADD_COMPILE_FLAGS(spj_performance_test.cpp COMPILE_FLAGS\n      \\\" -Wno-error=undefined-reinterpret-cast\\\")\n  ENDIF()\n\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Service Test in CMake\nDESCRIPTION: Configures a test for Windows service functionality with multiple source files for Windows-specific implementation and sets compile definitions for static linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_windows_service.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n  EXTRA_SOURCES\n    ../src/windows/main-windows.cc\n    ../src/windows/nt_servc.cc\n    ../src/windows/service_operations.cc\n    ../src/utils.cc  # g_windows_service\n    ../src/default_paths.cc\n    ../../../tests/helpers/filesystem_utils.cc\n  INCLUDE_DIRS\n    $<TARGET_PROPERTY:router_utils,INCLUDE_DIRECTORIES>\n    ../src/\n    ../../../tests/helpers/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\nSET_TARGET_PROPERTIES(\n  routertest_${TEST_MODULE}_windows_service\n  PROPERTIES\n  COMPILE_DEFINITIONS ROUTER_UTILS_STATIC_DEFINE=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bison Parser Generation for MySQL Router\nDESCRIPTION: Uses the BISON_TARGET command to generate C++ parser code from the Bison grammar file. This sets up the match_parser target with compiler flags and output locations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nBISON_TARGET(match_parser\n  parser.yy\n  ${CMAKE_CURRENT_BINARY_DIR}/parser.cc\n  COMPILE_FLAGS \"-t --no-lines ${BISON_FLAGS_WARNINGS}\"\n  DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser.h\n  VERBOSE\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Shared libcurl Library\nDESCRIPTION: This section configures the build for a shared libcurl library. It adds source files for Windows and Cygwin, links necessary libraries, and sets target properties such as prefix, suffix, import prefix/suffix, and position-independent code. It also includes handling for symbol hiding, LTO, and manages include directories. Platform-specific configurations (Windows, Cygwin) are also included.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  list(APPEND libcurl_export ${LIB_SHARED})\n  add_library(${LIB_SHARED} SHARED ${LIB_SOURCE})\n  add_library(${PROJECT_NAME}::${LIB_SHARED} ALIAS ${LIB_SHARED})\n  if(WIN32 OR CYGWIN)\n    if(CYGWIN)\n      # For Cygwin always compile dllmain.c as a separate unit since it\n      # includes windows.h, which should not be included in other units.\n      set_source_files_properties(\"dllmain.c\" PROPERTIES SKIP_UNITY_BUILD_INCLUSION ON)\n    endif()\n    set_property(TARGET ${LIB_SHARED} APPEND PROPERTY SOURCES \"dllmain.c\")\n  endif()\n  if(WIN32)\n    set_property(TARGET ${LIB_SHARED} APPEND PROPERTY SOURCES \"libcurl.rc\")\n    if(CURL_HIDES_PRIVATE_SYMBOLS)\n      set_property(TARGET ${LIB_SHARED} APPEND PROPERTY SOURCES \"${PROJECT_SOURCE_DIR}/lib/libcurl.def\")\n    endif()\n  endif()\n  target_link_libraries(${LIB_SHARED} PRIVATE ${CURL_LIBS})\n  # Remove the \"lib\" prefix since the library is already named \"libcurl\".\n  set_target_properties(${LIB_SHARED} PROPERTIES\n    PREFIX \"\" OUTPUT_NAME \"${LIBCURL_OUTPUT_NAME}\"\n    IMPORT_PREFIX \"\" IMPORT_SUFFIX \"${IMPORT_LIB_SUFFIX}${CMAKE_IMPORT_LIBRARY_SUFFIX}\"\n    POSITION_INDEPENDENT_CODE ON)\n  if(CURL_HIDES_PRIVATE_SYMBOLS)\n    set_property(TARGET ${LIB_SHARED} APPEND PROPERTY COMPILE_FLAGS \"${CURL_CFLAG_SYMBOLS_HIDE}\")\n    set_property(TARGET ${LIB_SHARED} APPEND PROPERTY COMPILE_DEFINITIONS \"CURL_HIDDEN_SYMBOLS\")\n  endif()\n  if(CURL_HAS_LTO)\n    set_target_properties(${LIB_SHARED} PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)\n  endif()\n\n  target_include_directories(${LIB_SHARED} INTERFACE\n    \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n    \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\")\n\n  if(CMAKE_DLL_NAME_WITH_SOVERSION OR\n    CYGWIN OR\n    APPLE OR\n    CMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n    CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR\n    CMAKE_SYSTEM_NAME STREQUAL \"SunOS\" OR\n    CMAKE_SYSTEM_NAME STREQUAL \"Haiku\" OR\n    CMAKE_SYSTEM_NAME STREQUAL \"GNU/kFreeBSD\" OR\n    # FreeBSD comes with the a.out and ELF flavours but a.out was supported\n    # up to v3.x and ELF from v3.x. I cannot imagine someone running CMake\n    # on those ancient systems.\n    CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n    set(_soversion_default TRUE)\n  else()\n    set(_soversion_default FALSE)\n  endif()\n\n  option(CURL_LIBCURL_SOVERSION \"Enable libcurl SOVERSION\" ${_soversion_default})\n  option(CURL_LIBCURL_VERSIONED_SYMBOLS \"Enable libcurl versioned symbols\" OFF)\n\n  if(CURL_LIBCURL_SOVERSION OR CURL_LIBCURL_VERSIONED_SYMBOLS)\n    # Get 'VERSIONCHANGE', 'VERSIONADD', 'VERSIONDEL', 'VERSIONINFO' variables\n    curl_transform_makefile_inc(\"Makefile.soname\" \"${CMAKE_CURRENT_BINARY_DIR}/Makefile.soname.cmake\")\n    include(\"${CMAKE_CURRENT_BINARY_DIR}/Makefile.soname.cmake\")\n\n    math(EXPR _cmakesoname \"${VERSIONCHANGE} - ${VERSIONDEL}\")\n    set(_cmakeversion \"${_cmakesoname}.${VERSIONDEL}.${VERSIONADD}\")\n  endif()\n\n  if(CURL_LIBCURL_SOVERSION)\n    set_target_properties(${LIB_SHARED} PROPERTIES\n      VERSION \"${_cmakeversion}\" SOVERSION \"${_cmakesoname}\")\n  endif()\n\n  ## Versioned symbols\n\n  if(CURL_LIBCURL_VERSIONED_SYMBOLS)\n    if(NOT DEFINED CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX)\n      # Default to prefixes used by autotools\n      if(CURL_WITH_MULTI_SSL)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"MULTISSL_\")\n      elseif(CURL_USE_OPENSSL)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"OPENSSL_\")\n      elseif(CURL_USE_MBEDTLS)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"MBEDTLS_\")\n      elseif(CURL_USE_BEARSSL)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"BEARSSL_\")\n      elseif(CURL_USE_WOLFSSL)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"WOLFSSL_\")\n      elseif(CURL_USE_GNUTLS)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"GNUTLS_\")\n      elseif(CURL_USE_RUSTLS)\n        set(CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX \"RUSTLS_\")\n      endif()\n    endif()\n    # Generate version script for the linker, for versioned symbols.\n    # Consumed variables:\n    #   CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX\n    #   CURL_LIBCURL_VERSIONED_SYMBOLS_SONAME\n    set(CURL_LIBCURL_VERSIONED_SYMBOLS_SONAME ${_cmakesoname})\n    configure_file(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/libcurl.vers.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/libcurl.vers\" @ONLY)\n    include(CMakePushCheckState)\n    include(CheckCSourceCompiles)\n    cmake_push_check_state()\n    set(CMAKE_REQUIRED_LINK_OPTIONS \"-Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/libcurl.vers\")\n    check_c_source_compiles(\"int main(void) { return 0; }\" HAVE_VERSIONED_SYMBOLS)\n    if(HAVE_VERSIONED_SYMBOLS)\n      # Superseded by LINK_OPTIONS in CMake 3.13 and later.\n      set_target_properties(${LIB_SHARED} PROPERTIES LINK_FLAGS \"${CMAKE_REQUIRED_LINK_OPTIONS}\")\n    else()\n      message(WARNING \"Versioned symbols requested, but not supported by the toolchain.\")\n    endif()\n    cmake_pop_check_state()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Crund Test Targets in CMake\nDESCRIPTION: Configures test targets for various helper components including utils, stopwatch, and properties tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nNDB_ADD_TEST(hrt_utils_test helpers/src/hrt_utils_test.cpp LIBS crund_helpers)\nNDB_ADD_TEST(hrt_stopwatch_test helpers/src/hrt_stopwatch_test.cpp\n             LIBS crund_helpers)\nNDB_ADD_TEST(Properties_test helpers/src/Properties_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Converting SQL Schema to C Header File in CMake\nDESCRIPTION: Custom command that transforms the consolidated SQL schema into a C header file (sql_commands.h) using the comp_sql utility. This allows the System Schema to be embedded directly into the MySQL server binary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/sys_schema/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands.h\n  COMMAND comp_sql\n  mysql_sys_schema\n  ${CMAKE_CURRENT_BINARY_DIR}/ALL_SYS_SCHEMA.sql\n  sql_commands.h\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS comp_sql all_sys_schema\n  ${CMAKE_CURRENT_BINARY_DIR}/ALL_SYS_SCHEMA.sql\n  VERBATIM\n)\n\nMY_ADD_CUSTOM_TARGET(sql_commands\n  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/sql_commands.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for MySQL Server\nDESCRIPTION: This snippet adds a preprocessor definition, `MYSQL_SERVER`, using the `ADD_DEFINITIONS` macro. This definition is likely used during the compilation of the MySQL server to enable or configure specific features or behaviors. No specific dependencies are needed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Command: Node Restart Tests\nDESCRIPTION: Test configuration for node restart scenarios with specific bug references and test cases\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--13-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n RestartAllNodes T6 T13\nmax-time: 1440\n```\n\n----------------------------------------\n\nTITLE: Configuring Node ID Allocation Tests\nDESCRIPTION: Test configurations for node ID allocation and connection handling in NDB Cluster. The tests cover various aspects of node connection including master connections, non-master connections, and slow connections.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_12\n\nLANGUAGE: plain\nCODE:\n```\n# alloc node id\nmax-time: 500\ncmd: testNdbApi\nargs: -n NdbClusterConnect T1\n\nmax-time: 500\ncmd: testNdbApi\nargs: -n NdbClusterConnectionConnect T1\n\nmax-time: 500\ncmd: testNdbApi\nargs: -n NdbClusterConnectNR_non_master T1\n\nmax-time: 500\ncmd: testNdbApi\nargs: -n NdbClusterConnectNR_slow T1\n\nmax-time: 500\ncmd: testNdbApi\nargs: -n NdbClusterConnectSR T1\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Guidelines Source Files\nDESCRIPTION: Sets up the source file list for the routing guidelines library, including the Bison-generated parser code and other implementation files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(guidelines_SRC\n  ${BISON_match_parser_OUTPUT_SOURCE}\n  rules_parser.cc\n  rpn.cc\n  routing_guidelines.cc\n  utils.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Frontend Library in CMake\nDESCRIPTION: Defines the router frontend library build configuration with platform-specific source files and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(router_frontend_lib STATIC\n  ${frontend_lib_source_files})\n\nTARGET_LINK_LIBRARIES(router_frontend_lib\n  router_lib\n  routing_frontend_lib\n  harness-library)\n```\n\n----------------------------------------\n\nTITLE: Creating Build ID Test Executable and Verification\nDESCRIPTION: Creates a test executable for build ID functionality and adds a post-build command to verify that the build ID can be read correctly by the system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_BUILD_ID_SUPPORT)\n  MYSQL_ADD_EXECUTABLE(build_id_test\n    build_id_test.cc build_id.cc\n    SKIP_INSTALL\n    )\n  IF(HAS_MISSING_PROFILE)\n    TARGET_COMPILE_OPTIONS(build_id_test PRIVATE ${HAS_MISSING_PROFILE})\n  ENDIF()\n  # Verify that we can read our own build-id:\n  ADD_CUSTOM_COMMAND(TARGET build_id_test POST_BUILD\n    COMMAND ${CMAKE_COMMAND}\n    -DREADELF_EXECUTABLE=${READELF_EXECUTABLE}\n    -P ${CMAKE_CURRENT_SOURCE_DIR}/verify_build_id.cmake\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/runtime_output_directory\n    COMMENT \"Verifying build-id\"\n    VERBATIM\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Settings and Compiler Flags for MySQL Keyring Component\nDESCRIPTION: Sets up compiler warning settings and removes specific TLS model flags to use default global-dynamic with -fPIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\n\n# Use default value for -ftls-model which is global-dynamic with -fPIC\nREMOVE_CMAKE_COMPILER_FLAGS(CMAKE_C_FLAGS \"-ftls-model=initial-exec\")\nREMOVE_CMAKE_COMPILER_FLAGS(CMAKE_CXX_FLAGS \"-ftls-model=initial-exec\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies in CMake\nDESCRIPTION: This CMake snippet configures library dependencies for the MySQL server project. It sets up paths and links for libraries like cbor, zlib, OpenSSL, and libfido2, specifying their usage throughout the build process. This ensures consistent linkage and inclusion across different parts of the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CBOR_LIBRARIES ext::cbor)\nSET(ZLIB_LIBRARIES ext::zlib)\nSET(CRYPTO_LIBRARIES OpenSSL::Crypto)\n\nSET(FIDO_VERSION_DIR \"libfido2-1.15.0\")\n\nSET(FIDO_INCLUDE_DIR\n  ${CMAKE_CURRENT_SOURCE_DIR}/${FIDO_VERSION_DIR}/src\n  CACHE FILEPATH \"Where to find header files for libfido2\")\n\nADD_SUBDIRECTORY(${FIDO_VERSION_DIR})\n\nADD_LIBRARY(fido_interface INTERFACE)\nTARGET_LINK_LIBRARIES(fido_interface INTERFACE fido2)\nTARGET_INCLUDE_DIRECTORIES(fido_interface SYSTEM BEFORE INTERFACE\n  ${FIDO_INCLUDE_DIR}\n  )\nADD_LIBRARY(ext::fido ALIAS fido_interface)\n```\n\n----------------------------------------\n\nTITLE: Handling Apple Xcode Platform Specifically\nDESCRIPTION: Creates alias libraries for Xcode builds since Xcode doesn't handle converting object libraries to static/shared properly. Generates export headers and exits early.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(APPLE_XCODE)\n  ADD_LIBRARY(routing_guidelines ALIAS routing_guidelines-objects)\n  ADD_LIBRARY(routing_guidelines-static ALIAS routing_guidelines-objects)\n  GENERATE_EXPORT_HEADER(routing_guidelines\n    EXPORT_FILE_NAME\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/routing_guidelines_export.h)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Symbolize Library in Abseil\nDESCRIPTION: Creates the symbolize library target for converting program addresses into human-readable names across multiple platforms with platform-specific implementation files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    symbolize\n  HDRS\n    \"symbolize.h\"\n    \"internal/symbolize.h\"\n  SRCS\n    \"symbolize.cc\"\n    \"symbolize_darwin.inc\"\n    \"symbolize_elf.inc\"\n    \"symbolize_emscripten.inc\"\n    \"symbolize_unimplemented.inc\"\n    \"symbolize_win32.inc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n    $<$<BOOL:${MINGW}>:-ldbghelp>\n  DEPS\n    absl::debugging_internal\n    absl::demangle_internal\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::malloc_internal\n    absl::raw_logging_internal\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for MySQL X Protocol Plugin\nDESCRIPTION: This snippet specifies the libraries that the MySQL X Protocol plugin will link against, ensuring all necessary components are included.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(\n  xprotocol_plugin\n  ${MYSQLX_PROTOCOL_FULL_LIB}\n  ext::libprotoc\n  ext::libprotobuf\n)\n```\n\n----------------------------------------\n\nTITLE: Remove Definition in CMake\nDESCRIPTION: This snippet removes a specific definition, `MYSQL_SERVER`, which might be set elsewhere. Removing this definition ensures that certain code paths or features are disabled or enabled based on the desired build configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nREMOVE_DEFINITIONS(-DMYSQL_SERVER)\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Structured Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's structured logging functionality. It includes the source file and dependencies needed to test the components that enable structured data logging rather than just text messages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_50\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_structured_test\n  SRCS\n    \"structured_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_structured\n    absl::scoped_mock_log\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: Links the previously defined 'ndbNDBT' library with additional libraries using CMake's TARGET_LINK_LIBRARIES command. The library '${LIBM}' is specified as a dependency for this purpose.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(ndbNDBT ${LIBM})\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Library Target\nDESCRIPTION: CMake configuration for the span library providing view functionality over contiguous sequences.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    span\n  HDRS\n    \"span.h\"\n  SRCS\n    \"internal/span.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::algorithm\n    absl::core_headers\n    absl::throw_delegate\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Group Replication Lock Dependencies Configuration\nDESCRIPTION: Configuration defining lock dependencies and state transitions between various system components. Each line represents a directed arc from a source lock to a target lock with specified states (R/W for read/write) and operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_29\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"W\" TO \"mutex/group_rpl/GCS_Gcs_xcom_view_change_control::m_joining_leaving_mutex\"\nARC FROM \"rwlock/group_rpl/RWLOCK_plugin_stop\" STATE \"W\" TO \"mutex/group_rpl/key_GR_LOCK_group_action_coordinator_process\"\n[...additional dependencies...]\n```\n\n----------------------------------------\n\nTITLE: Defining test_event Command in Bash\nDESCRIPTION: This snippet defines a MySQL testing command named 'test_event', which takes specific arguments and specifies a maximum execution time. It is applicable for conducting performance or functional tests on events within the MySQL system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmd: test_event\nargs: -n Multi T1\nmax-time: 180\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: test_event\nargs: -r 5000 -n Bug30780 T1\nmax-time: 1260\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Profiler Component with CMake\nDESCRIPTION: Sets up the CPU profiler component, defining include files, source files, and library dependencies. Creates both shared and static libraries, then installs the targets and headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nif(GPERFTOOLS_BUILD_CPU_PROFILER)\n  ### The header files we use.  We divide into categories based on directory\n  set(S_CPU_PROFILER_INCLUDES src/profiledata.h\n          src/profile-handler.h\n          src/getpc.h\n          src/base/basictypes.h\n          src/base/commandlineflags.h\n          src/base/googleinit.h\n          src/base/logging.h\n          src/base/simple_mutex.h\n          src/base/sysinfo.h\n          ${SPINLOCK_INCLUDES}\n          ${LOGGING_INCLUDES})\n  set(SG_CPU_PROFILER_INCLUDES src/gperftools/profiler.h)\n  set(CPU_PROFILER_INCLUDES ${S_CPU_PROFILER_INCLUDES} ${SG_CPU_PROFILER_INCLUDES}\n          ${SG_STACKTRACE_INCLUDES})\n  list(APPEND perftoolsinclude_HEADERS ${SG_CPU_PROFILER_INCLUDES})\n\n  ### Making the library\n  set(libprofiler_la_SOURCES src/profiler.cc\n          src/profile-handler.cc\n          src/profiledata.cc\n          ${CPU_PROFILER_INCLUDES})\n  set(libprofiler_la_LIBADD stacktrace fake_stacktrace_scope)\n  add_library(profiler SHARED ${libprofiler_la_SOURCES})\n  target_link_libraries(profiler PRIVATE ${libprofiler_la_LIBADD})\n  target_link_libraries(profiler PRIVATE Threads::Threads)\n  set_target_properties(profiler PROPERTIES\n          VERSION ${PROFILER_SO_VERSION}\n          SOVERSION ${PROFILER_SO_VERSION})\n  install(TARGETS profiler)\n  if(GPERFTOOLS_BUILD_STATIC)\n    add_library(profiler_static STATIC ${libprofiler_la_SOURCES})\n    target_link_libraries(profiler_static PRIVATE ${libprofiler_la_LIBADD})\n    if(NOT MSVC)\n      set_target_properties(profiler_static PROPERTIES OUTPUT_NAME profiler)\n    endif()\n    install(TARGETS profiler_static)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Creating Executables and Adding Tests\nDESCRIPTION: This snippet iterates through the list of tests defined earlier. For each test, it sets the source files, creates an executable target using `MYSQL_ADD_EXECUTABLE`, adds the test to the test suite, enables exports, and specifies the libraries to link against.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/group_replication/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(test ${TESTS})\n  SET(SRC_FILES ${test}-t.cc)\n\n  MYSQL_ADD_EXECUTABLE(${test}-t ${SRC_FILES}\n    ADD_TEST ${test}\n    ENABLE_EXPORTS\n    LINK_LIBRARIES\n    gr_unit_test_resource\n    gunit_large\n    server_unittest_library\n    mysqlclient\n    mysqlgcs\n    mysql_gtid\n    )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes for Copy Fragment Process Testing in MySQL\nDESCRIPTION: This section defines error codes (5002-5046) for testing failure scenarios in the copy fragment process of MySQL server. It includes situations like node failures during tuple copying, handling of ABORT, COMMIT, and COMPLETE signals, and specific table-related failures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n5002:\nInsert node failure in starting node when receiving a tuple copied from the copy node\nas part of copy fragment process.\n5003:\nInsert node failure when receiving ABORT signal.\n\n5004:\nInsert node failure handling when receiving COMMITREQ.\n\n5005:\nInsert node failure handling when receiving COMPLETEREQ.\n\n5006:\nInsert node failure handling when receiving ABORTREQ.\n\n5042:\nAs 5002, but with specified table (see DumpStateOrd)\n\nThese error code can be combined with error codes for testing time-out\nhandling in DBTC to ensure that node failures are also well handled in\ntime-out handling. They can also be used to test multiple node failure\nhandling.\n\n5045: Crash in PREPARE_COPY_FRAG_REQ\n5046: Unused\n```\n\n----------------------------------------\n\nTITLE: Checking for Peer Credentials Support in CMake\nDESCRIPTION: This snippet checks if the system supports peer credentials using the SO_PEERCRED socket option. It defines a C++ source code test and sets the HAVE_PEERCRED variable based on the result.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/auth/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nCHECK_CXX_SOURCE_COMPILES(\n\"#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#include <sys/socket.h>\nint main() {\n  struct ucred cred;\n  getsockopt(0, SOL_SOCKET, SO_PEERCRED, &cred, 0);\n}\" HAVE_PEERCRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Module Name in CMake\nDESCRIPTION: This snippet sets the name of the test module to `mysql_protocol` using the `SET` command in CMake. This module name is later used in other CMake commands to define and configure the tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(TEST_MODULE mysql_protocol)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of Headers and PC File\nDESCRIPTION: Conditionally installs header files and a pkg-config file based on DISABLE_THESE_LINES. This section is likely disabled in the current configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(DISABLE_THESE_LINES)\ninstall(FILES fido.h DESTINATION include)\ninstall(DIRECTORY fido DESTINATION include)\n\nconfigure_file(libfido2.pc.in libfido2.pc @ONLY)\ninstall(FILES \\\"${CMAKE_CURRENT_BINARY_DIR}/libfido2.pc\\\"\n\tDESTINATION \\\"${CMAKE_INSTALL_LIBDIR}/pkgconfig\\\")\nENDIF(DISABLE_THESE_LINES)\"\n```\n\n----------------------------------------\n\nTITLE: Including Google Mock Libraries for MySQL Server Tests in CMake\nDESCRIPTION: This snippet includes the Google Mock library directories as system includes, which suppresses warnings from these external libraries during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Adding Linux Large Pages Support\nDESCRIPTION: Includes large pages support for Linux if the platform supports it.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_LINUX_LARGE_PAGES)\n  LIST(APPEND MYSYS_SOURCES my_largepage.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Specifying Compile Options Based on Compiler with CMake\nDESCRIPTION: This snippet adds specific compile options tailored for GNU or Clang compilers to suppress warnings about deprecated declarations. It checks the compiler type and conditionally applies the option.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_OPTIONS(\"-Wno-deprecated-declarations\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression Configuration\nDESCRIPTION: Configures compiler warning suppressions for specific issues in NDB kernel code, particularly in Dbtup.hpp and other components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(warning\n    \"cast-qual\"\n    # Warnings in Dbtup.hpp\n    \"class-memaccess\"\n    \"format-overflow\"\n    \"maybe-uninitialized\"\n    \"uninitialized\"      # RedoPageCache CTOR: m_hash(m_pool) with gcc 13\n    \"stringop-overflow\"\n    \"unused-but-set-variable\"\n    \"unused-parameter\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Argument if Alternative Linker is Used\nDESCRIPTION: This snippet conditionally appends the CMAKE_LINKER argument if an alternative linker is specified. This ensures TCMalloc is linked with the correct linker.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(ALTERNATIVE_LD)\n  LIST(APPEND TCMALLOC_CMAKE_ARGS -DCMAKE_LINKER=${ALTERNATIVE_LD})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Unit Tests in CMake\nDESCRIPTION: Adds unit tests for various NDB components using a foreach loop. Each test is linked against the ndbgeneral library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(tests BaseString Bitmask SparseBitmask Parser HashMap2 LinkedStack\n    NodeCertificate\n    TlsKeyManager ndb_zlib cstrbuf span)\n  NDB_ADD_TEST(\"${tests}-t\" \"${tests}.cpp\" LIBS ndbgeneral)\nENDFOREACH(tests)\n```\n\n----------------------------------------\n\nTITLE: Sanitizer Check Configuration Macro\nDESCRIPTION: Macro to check and configure sanitizer options for both C and C++ compilers. Includes optimization settings and maintainer mode configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(MY_SANITIZER_CHECK SAN_OPT ADD_OPTIMIZATION RESULT)\n  MY_CHECK_C_COMPILER_FLAG(\"${SAN_OPT}\" C_RESULT)\n  MY_CHECK_CXX_COMPILER_FLAG(\"${SAN_OPT}\" CXX_RESULT)\n  IF(C_RESULT AND CXX_RESULT)\n    STRING_APPEND(CMAKE_C_FLAGS   \" ${SAN_OPT}\")\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${SAN_OPT}\")\n    IF(${ADD_OPTIMIZATION} AND OPTIMIZE_SANITIZER_BUILDS)\n      IF(MSVC)\n        STRING_APPEND(CMAKE_C_FLAGS   \" -O1 /Ob0\")\n        STRING_APPEND(CMAKE_CXX_FLAGS \" -O1 /Ob0\")\n      ELSE()\n        STRING_APPEND(CMAKE_C_FLAGS   \" -O1 -fno-inline\")\n        STRING_APPEND(CMAKE_CXX_FLAGS \" -O1 -fno-inline\")\n      ENDIF()\n      IF(NOT SANITIZE_MAINTAINER_MODE)\n        SET(MYSQL_MAINTAINER_MODE OFF CACHE BOOL\n          \"MySQL maintainer-specific development environment\" FORCE)\n      ENDIF()\n    ENDIF()\n    SET(${RESULT} 1)\n  ELSE()\n    SET(${RESULT} 0)\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Subscription Creation Protocol Flow\nDESCRIPTION: Protocol sequence for subscription creation with selective table snapshot, involving dictionary lookups.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/suma/Suma.txt#2025-04-21_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\nUSER                      SUMA                    DICT\n========================================================\nSUB_CREATE_REQ\n------------------------>\n                          case SelectiveTableSnapshot:\n                          GET_TABLEID\n                          ---------------------->\n                          <----------------------\nSUB_CREATE_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring NdbJTie Tests in CMake\nDESCRIPTION: Sets up multiple test cases for NdbJTie, including MySqlUtils, Constants, MultiLib, and Smoke tests. Each test is configured with specific Java parameters and classpath settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST(\n  NAME test_ndbjtie_mutils\n  COMMAND\n  ${Java_JAVA_EXECUTABLE_PATH} \"-ea\" \"-Xcheck:jni\"\n  \"-classpath\" \"${TEST_JAR}${JAVA_SEPARATOR}${NDBJTIE_JAR}\"\n  \"-Djava.library.path=${CMAKE_BINARY_DIR}/library_output_directory/${JAVA_SUBDIR}\"\n  \"test.MySqlUtilsTest\"\n  ${JAVATEST_WORKING_DIRECTORY}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TCMalloc Minimal Core Library\nDESCRIPTION: Sets up the core TCMalloc minimal library targets including internal interface library and shared library. Configures compilation definitions, version properties, and installation targets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(tcmalloc_minimal_internal_object PRIVATE NO_TCMALLOC_SAMPLES NO_HEAP_CHECK NDEBUG)\nadd_library(tcmalloc_minimal_internal INTERFACE)\ntarget_link_libraries(tcmalloc_minimal_internal INTERFACE ${LIBSPINLOCK})\ntarget_sources(tcmalloc_minimal_internal INTERFACE $<TARGET_OBJECTS:tcmalloc_minimal_internal_object>)\n\nset(libtcmalloc_minimal_la_SOURCES ${TCMALLOC_CC} ${TCMALLOC_MINIMAL_INCLUDES})\nset(libtcmalloc_minimal_la_DEFINES NO_TCMALLOC_SAMPLES NDEBUG)\nadd_library(tcmalloc_minimal SHARED ${libtcmalloc_minimal_la_SOURCES})\ntarget_compile_definitions(tcmalloc_minimal PRIVATE ${libtcmalloc_minimal_la_DEFINES})\nset(libtcmalloc_minimal_la_LIBADD tcmalloc_minimal_internal)\ntarget_link_libraries(tcmalloc_minimal PRIVATE tcmalloc_minimal_internal Threads::Threads)\nif(MINGW)\n  target_link_libraries(tcmalloc_minimal PRIVATE stacktrace)\nendif()\nset_target_properties(tcmalloc_minimal PROPERTIES\n        VERSION ${TCMALLOC_SO_VERSION}\n        SOVERSION ${TCMALLOC_SO_VERSION})\ninstall(TARGETS tcmalloc_minimal)\n```\n\n----------------------------------------\n\nTITLE: Configuring node_hash_set_test in CMake for Abseil\nDESCRIPTION: Defines the 'node_hash_set_test' target for testing the node hash set implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    node_hash_set_test\n  SRCS\n    \"node_hash_set_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n    \"-DUNORDERED_SET_CXX17\"\n  DEPS\n    absl::hash_generator_testing\n    absl::node_hash_set\n    absl::unordered_set_constructor_test\n    absl::unordered_set_lookup_test\n    absl::unordered_set_members_test\n    absl::unordered_set_modifiers_test\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Flags for Windows Authentication Plugin\nDESCRIPTION: Sets up essential compiler definitions for the Windows Authentication Plugin client-side. Includes flags for Windows security, error logging, and dbug library usage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_win/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DSECURITY_WIN32)\nADD_DEFINITIONS(-DDEBUG_ERRROR_LOG)  # no error logging in production builds\nADD_DEFINITIONS(-DWINAUTH_USE_DBUG_LIB)      # it is OK to use dbug library in statically\n                                             # linked plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for CNO Library\nDESCRIPTION: Specifies include directories for the 'cno' library. This establishes the paths for both public and private headers, ensuring correct file inclusion during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(cno\n  SYSTEM PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/${LIBCNO_VERSION_DIR}/\n  PRIVATE ${LIBCNO_GENERATE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Fast Type ID Library\nDESCRIPTION: This snippet defines an internal C++ library for fast type ID generation using `absl_cc_library`. It specifies the header file, compiler and linker options, and a dependency on Abseil configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    fast_type_id\n  HDRS\n    \\\"internal/fast_type_id.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining log Library\nDESCRIPTION: This snippet defines the `log` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependency on `absl::log_internal_log_impl`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log\n  SRCS\n  HDRS\n    \"log.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_log_impl\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Dependencies Graph\nDESCRIPTION: Directed graph showing dependencies between various MySQL locks including mutex, rwlock, and sxlock types. Each line represents a directed edge (ARC) from one lock to another, sometimes including an operation type (OP) like R(read), W(write), S(shared), or X(exclusive).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_table_cache\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"W\"\nARC FROM \"mutex/sql/LOCK_table_cache\" TO \"sxlock/innodb/dict_table_stats\" OP \"X\"\nARC FROM \"mutex/sql/LOCK_table_cache\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/sql/LOCK_thd_list\" TO \"mutex/innodb/rw_lock_debug_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: test_event_merge with Parameters\nDESCRIPTION: This snippet configures the merging of test events, including restrictions like no implicit null values and no multi-operations, assessing how these factors impact execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\ncmd: test_event_merge\nargs: --no-implicit-nulls --no-multiops\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for libmysqlgcs (CMake)\nDESCRIPTION: This snippet creates a custom target named `libmysqlgcs` that depends on the `mysqlgcs` target. This is a convenience target that can be used to trigger the build of the `mysqlgcs` library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_CUSTOM_TARGET(libmysqlgcs DEPENDS mysqlgcs)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Log Sink Components in MySQL Server CMake Configuration\nDESCRIPTION: This snippet adds the syseventlog and JSON log sink components to the MySQL server build. It specifies the source files and any additional link libraries required.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/logging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(log_sink_syseventlog\n  log_sink_syseventlog.cc\n  MODULE_ONLY\n  )\nMYSQL_ADD_COMPONENT(log_sink_json\n  log_sink_json.cc\n  MODULE_ONLY\n  LINK_LIBRARIES extra::rapidjson\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Protobuf Packages using Bazel - Bash\nDESCRIPTION: These commands build Protobuf source and binary wheel packages from the repository using Bazel. The binary wheel depends on the Python version installed locally.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel build @upb//python/dist:source_wheel\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel build @upb//python/dist:binary_wheel\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes for Node Failure and Arbitration Testing in MySQL\nDESCRIPTION: This section defines error codes (910-938) for testing node failure and arbitration scenarios in MySQL server. It includes scenarios like crashing the president node, handling new president after node crash, and resuming communications after node failures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n911 - 919:\nCrash president when he starts to run in ArbitState 1-9.\n\n910: Crash new president after node crash\n\n934 : Crash president in ALLOC_NODE_ID_REQ\n\n935 : Crash master on node failure (delayed) \n      and skip sending GSN_COMMIT_FAILREQ to specified node\n\n938 : Resume communications (DUMP 9991) when > 25% nodes failed\n```\n\n----------------------------------------\n\nTITLE: Compiler Conditionals for Windows and Cygwin\nDESCRIPTION: This snippet determines build options conditionally based on the compiler and environment, specially tailoring settings for MinGW, MSVC, and Cygwin platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(MINGW OR MSVC)\n  set(DEFAULT_BUILD_MINIMAL ON)\n  set(DEFAULT_BUILD_DEBUGALLOC OFF)\n  set(NEED_NANOSLEEP OFF)\nelseif(CYGWIN)\n  set(DEFAULT_BUILD_CPU_PROFILER OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Lock Dependency Graph for InnoDB Components\nDESCRIPTION: Defines the relationships between different types of locks (sx-locks, mutexes) in the InnoDB storage engine. Each ARC statement represents a dependency where one lock can be held while acquiring another, with specific states (S, X) and operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_39\n\nLANGUAGE: dot\nCODE:\n```\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/trx_sys_shard_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/zip_pad_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/fil_space_latch\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"SX\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" RECURSIVE OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"S\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\n```\n\n----------------------------------------\n\nTITLE: String Array Parameters in NdbDictionary Java Interface\nDESCRIPTION: Issue related to supporting String array input parameters in the NdbDictionary Java class. These native methods need to accept arrays of strings that map to C++ const char** parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <in:String[]>: public final native int addColumnNames(int/*_unsigned_*/ noOfNames, String[]/*_const char * *_*/ names);\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <in:String[]>: public final native void addEventColumns(int n, String[]/*_const char * *_*/ columnNames);\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Auth Backend Plugin in CMake\nDESCRIPTION: Defines the HTTP authentication backend plugin, specifying source files, dependencies, and installation paths. It is dependent on http_common and http_auth_backend_lib libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_HARNESS_PLUGIN(http_auth_backend\n  SOURCES\n  http_auth_backend_plugin.cc\n  http_auth_backend_metadata_cache.cc\n  REQUIRES\n  http_common\n  http_auth_backend_lib\n  router_utils\n  metadata_cache\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  )\nGENERATE_EXPORT_HEADER(http_auth_backend\n  EXPORT_FILE_NAME\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/http_auth_backend_export.h\n  )\nTARGET_INCLUDE_DIRECTORIES(http_auth_backend PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil StatusOr Library in CMake\nDESCRIPTION: This snippet defines the 'statusor' library configuration for Abseil. It specifies headers, source files, compiler options, and dependencies, including the previously defined 'status' library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/status/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    statusor\n  HDRS\n    \"statusor.h\"\n  SRCS\n    \"statusor.cc\"\n    \"internal/statusor_internal.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::status\n    absl::core_headers\n    absl::raw_logging_internal\n    absl::type_traits\n    absl::strings\n    absl::utility\n    absl::variant\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining log_globals Library\nDESCRIPTION: This snippet defines the `log_globals` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on several other absl libraries including `absl::atomic_hook` and `absl::config`. \nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_globals\n  SRCS\n    \"globals.cc\"\n  HDRS\n    \"globals.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::atomic_hook\n    absl::config\n    absl::core_headers\n    absl::hash\n    absl::log_severity\n    absl::raw_logging_internal\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBlobs\nargs: -bug 48040 -skip p\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Log Level in EventLogger.cpp\nDESCRIPTION: Sets the logging level for the EventBufferUsage event to Info (LogLevel::llInfo) with severity level 7 in the logger configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nROW(EventBufferUsage,        LogLevel::llInfo,   7, Logger::LL_INFO ),\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Type Traits Library in CMake\nDESCRIPTION: Configures the Abseil type_traits library target with headers, compilation options, and dependencies. This library is part of the Abseil project and provides type trait utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/meta/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    type_traits\n  HDRS\n    \"type_traits.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Fuzz Testing for HTTP Auth Method Basic\nDESCRIPTION: This snippet sets up fuzz testing for the HTTP authentication method basic, configuring execution directories and linking to the HTTP server library. Also specifies a test corpus directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(routertest_fuzz_http_auth_method_basic\n    fuzz_auth_method_basic.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/http_auth_method_basic.cc\n    COMPONENT Router\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    SKIP_INSTALL\n    )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nLIBFUZZER_ADD_TEST(routertest_fuzz_http_auth_method_basic\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus_auth_method_basic)\n```\n\n----------------------------------------\n\nTITLE: MySQL XClient Test Executable Configuration\nDESCRIPTION: Configures the XClient unit test executable with test properties and timeout settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xcl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(${XCL_UNIT_TESTS}\n  ../test_main.cc\n  ${XCL_TEST_SRC}\n  ADD_TEST xclient\n)\nSET_TESTS_PROPERTIES(xclient PROPERTIES TIMEOUT 180)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Seed Gen Exception Library - C++\nDESCRIPTION: Defines a library for handling exceptions arising from random seed generation processes, including relevant source and header files as well as dependencies to Abseil components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_seed_gen_exception\n  SRCS\n    \"seed_gen_exception.cc\"\n  HDRS\n    \"seed_gen_exception.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Condition-Mutex Bindings for Thread Synchronization\nDESCRIPTION: This configuration defines bindings between condition variables and their corresponding mutex locks in the MySQL server. These bindings ensure proper synchronization between threads when using condition variables for signaling. The format uses BIND statements to associate each condition variable with its protecting mutex, with some bindings marked with special flags like UNFAIR.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_40\n\nLANGUAGE: configuration\nCODE:\n```\nBIND \"cond/group_rpl/GCS_Gcs_async_buffer::m_wait_for_events_cond\" TO \"mutex/group_rpl/GCS_Gcs_async_buffer::m_free_buffer_mutex\" FLAGS UNFAIR\nBIND \"cond/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_cond\" TO \"mutex/group_rpl/GCS_Gcs_suspicions_manager::m_suspicions_mutex\"\nBIND \"cond/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_cond\" TO \"mutex/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_mutex\"\nBIND \"cond/group_rpl/GCS_Gcs_xcom_interface::m_wait_for_ssl_init_cond\" TO \"mutex/group_rpl/GCS_Gcs_xcom_interface::m_wait_for_ssl_init_mutex\"\nBIND \"cond/group_rpl/GCS_Gcs_xcom_proxy_impl::m_cond_xcom_comms_status\" TO \"mutex/group_rpl/GCS_Gcs_xcom_proxy_impl::m_lock_xcom_comms_status\"\nBIND \"cond/group_rpl/GCS_Gcs_xcom_proxy_impl::m_cond_xcom_exit\" TO \"mutex/group_rpl/GCS_Gcs_xcom_proxy_impl::m_lock_xcom_exit\"\nBIND \"cond/group_rpl/GCS_Gcs_xcom_proxy_impl::m_cond_xcom_ready\" TO \"mutex/group_rpl/GCS_Gcs_xcom_proxy_impl::m_lock_xcom_ready\"\nBIND \"cond/innodb/commit_cond\" TO \"mutex/innodb/commit_cond_mutex\"\nBIND \"cond/innodb/resume_encryption_cond\" TO \"mutex/innodb/resume_encryption_cond_mutex\"\nBIND \"cond/myisam/keycache_thread_var::suspend\" TO \"mutex/mysys/KEY_CACHE::cache_lock\"\nBIND \"cond/mysqlx/broker_context_sync\" TO \"mutex/mysqlx/broker_context_sync\"\nBIND \"cond/mysqlx/listener_tcp_sync\" TO \"mutex/mysqlx/listener_tcp_sync\"\nBIND \"cond/mysqlx/listener_unix_socket_sync\" TO \"mutex/mysqlx/listener_unix_socket_sync\"\nBIND \"cond/mysqlx/scheduler_dynamic_thread_exit\" TO \"mutex/mysqlx/scheduler_dynamic_thread_exit\"\nBIND \"cond/mysqlx/scheduler_dynamic_worker_pending\" TO \"mutex/mysqlx/scheduler_dynamic_worker_pending\"\nBIND \"cond/mysqlx/server_state_sync\" TO \"mutex/mysqlx/server_state_sync\"\nBIND \"cond/mysqlx/socket_acceptors_sync\" TO \"mutex/mysqlx/socket_acceptors_sync\"\nBIND \"cond/mysys/THR_COND_threads\" TO \"mutex/mysys/THR_LOCK_threads\"\nBIND \"cond/semisync/Ack_receiver::m_cond\" TO \"mutex/semisync/Ack_receiver::m_mutex\"\nBIND \"cond/semisync/COND_binlog_send_\" TO \"mutex/semisync/LOCK_binlog_\"\nBIND \"cond/sql/COND_compress_gtid_table\" TO \"mutex/sql/LOCK_compress_gtid_table\"\nBIND \"cond/sql/COND_connection_count\" TO \"mutex/sql/LOCK_connection_count\"\nBIND \"cond/sql/COND_flush_thread_cache\" TO \"mutex/sql/LOCK_thread_cache\"\nBIND \"cond/sql/COND_manager\" TO \"mutex/sql/LOCK_manager\"\nBIND \"cond/sql/COND_open\" TO \"mutex/sql/LOCK_open\"\nBIND \"cond/sql/COND_queue_state\" TO \"mutex/sql/LOCK_event_queue\"\nBIND \"cond/sql/COND_server_started\" TO \"mutex/sql/LOCK_server_started\"\nBIND \"cond/sql/COND_socket_listener_active\" TO \"mutex/sql/LOCK_socket_listener_active\"\nBIND \"cond/sql/COND_start_admin_thread\" TO \"mutex/sql/LOCK_start_admin_thread\"\nBIND \"cond/sql/COND_start_signal_handler\" TO \"mutex/sql/LOCK_start_signal_handler\"\nBIND \"cond/sql/COND_thd_list\" TO \"mutex/sql/LOCK_thd_list\"\nBIND \"cond/sql/COND_thread_cache\" TO \"mutex/sql/LOCK_thread_cache\"\nBIND \"cond/sql/COND_thr_lock\" TO \"mutex/mysys/THR_LOCK::mutex\"\nBIND \"cond/sql/DEBUG_SYNC::cond\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nBIND \"cond/sql/Event_scheduler::COND_state\" TO \"mutex/sql/Event_scheduler::LOCK_scheduler_state\"\nBIND \"cond/sql/Gtid_state\" TO \"mutex/sql/Gtid_state\"\nBIND \"cond/sql/Item_func_sleep::cond\" TO \"mutex/sql/LOCK_item_func_sleep\"\nBIND \"cond/sql/MDL_context::COND_wait_status\" TO \"mutex/sql/MDL_wait::LOCK_wait_status\"\nBIND \"cond/sql/MYSQL_BIN_LOG::COND_done\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_done\"\nBIND \"cond/sql/MYSQL_BIN_LOG::COND_flush_queue\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_flush_queue\"\nBIND \"cond/sql/MYSQL_BIN_LOG::prep_xids_cond\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_xids\"\nBIND \"cond/sql/MYSQL_BIN_LOG::update_cond\" TO \"mutex/sql/MYSQL_BIN_LOG::LOCK_binlog_end_pos\"\nBIND \"cond/sql/MYSQL_RELAY_LOG::update_cond\" TO \"mutex/sql/MYSQL_RELAY_LOG::LOCK_log_end_pos\"\nBIND \"cond/sql/Relay_log_info::data_cond\" TO \"mutex/sql/Relay_log_info::data_lock\"\nBIND \"cond/sql/Relay_log_info::log_space_cond\" TO \"mutex/sql/Relay_log_info::log_space_lock\"\nBIND \"cond/sql/Relay_log_info::mta_gaq_cond\" TO \"mutex/sql/key_mta_gaq_LOCK\"\nBIND \"cond/sql/Relay_log_info::pending_jobs_cond\" TO \"mutex/sql/Relay_log_info::pending_jobs_lock\"\nBIND \"cond/sql/Relay_log_info::replica_worker_hash_cond\" TO \"mutex/sql/Relay_log_info::replica_worker_hash_lock\"\nBIND \"cond/sql/Relay_log_info::sleep_cond\" TO \"mutex/sql/Relay_log_info::sleep_lock\"\nBIND \"cond/sql/Relay_log_info::start_cond\" TO \"mutex/sql/Relay_log_info::run_lock\"\nBIND \"cond/sql/Relay_log_info::stop_cond\" TO \"mutex/sql/Relay_log_info::run_lock\"\nBIND \"cond/sql/Source_info::rotate_cond\" TO \"mutex/sql/Source_info::rotate_lock\"\nBIND \"cond/sql/Source_info::sleep_cond\" TO \"mutex/sql/Source_info::sleep_lock\"\nBIND \"cond/sql/Source_info::start_cond\" TO \"mutex/sql/Source_info::run_lock\" FLAGS UNFAIR\nBIND \"cond/sql/Source_info::stop_cond\" TO \"mutex/sql/Source_info::run_lock\"\nBIND \"cond/sql/Source_IO_monitor::run_cond\" TO \"mutex/sql/Source_IO_monitor::run_lock\"\nBIND \"cond/sql/THD::COND_group_replication_connection_cond_var\" TO \"mutex/sql/LOCK_group_replication_connection_mutex\"\nBIND \"cond/sql/Worker_info::jobs_cond\" TO \"mutex/sql/Worker_info::jobs_lock\"\n```\n\n----------------------------------------\n\nTITLE: MySQL NdbApi Test Configuration\nDESCRIPTION: Test configuration for NdbApi functionality with specific arguments and time constraints\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--06-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNdbApi\nargs: -n MaxNdb T6\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring Atomic Hook Library in CMake for Abseil\nDESCRIPTION: Defines the 'atomic_hook' library target with its headers, dependencies, and compilation options. This is an internal-only target not meant for direct dependency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    atomic_hook\n  HDRS\n    \"internal/atomic_hook.h\"\n  DEPS\n    absl::config\n    absl::core_headers\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for MySQL Components in CMake\nDESCRIPTION: Includes various subdirectories for different MySQL components and libraries in the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(ddl_rewriter)\nADD_SUBDIRECTORY(innodb)\nADD_SUBDIRECTORY(components/mysql_server)\nADD_SUBDIRECTORY(components/keyring_common)\nADD_SUBDIRECTORY(xplugin)\nADD_SUBDIRECTORY(group_replication)\nADD_SUBDIRECTORY(libmysqlgcs)\nADD_SUBDIRECTORY(temptable)\nADD_SUBDIRECTORY(binlogevents)\nADD_SUBDIRECTORY(memory)\nADD_SUBDIRECTORY(containers)\nADD_SUBDIRECTORY(locks)\nADD_SUBDIRECTORY(changestreams)\nADD_SUBDIRECTORY(libs/utils)\nADD_SUBDIRECTORY(libs/serialization)\n```\n\n----------------------------------------\n\nTITLE: Setting Perl Path for MySQL Server Build\nDESCRIPTION: This snippet sets the PERL_PATH variable based on the operating system. For FreeBSD, it uses /usr/local/bin/perl, and for other systems, it uses /usr/bin/perl.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nIF(FREEBSD)\n  SET (PERL_PATH \"/usr/local/bin/perl\")\nELSE()\n  SET (PERL_PATH \"/usr/bin/perl\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Profiler Unit Tests with CMake\nDESCRIPTION: Sets up various unit tests for the CPU profiler component, including getpc_test, profiledata_unittest, profile_handler_unittest, and profiler_unittest variants with different threading configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_executable(getpc_test src/tests/getpc_test.cc src/getpc.h)\n  add_test(getpc_test getpc_test)\n\n  add_executable(profiledata_unittest src/tests/profiledata_unittest.cc\n          src/profiledata.h\n          src/base/commandlineflags.h\n          src/base/logging.h\n          src/base/basictypes.h)\n  target_link_libraries(profiledata_unittest ${LIBPROFILER})\n  add_test(profiledata_unittest profiledata_unittest)\n\n  add_executable(profile_handler_unittest src/tests/profile-handler_unittest.cc\n          src/profile-handler.h)\n  target_link_libraries(profile_handler_unittest ${LIBPROFILER} Threads::Threads)\n  add_test(profile_handler_unittest profile_handler_unittest)\n\n  add_test(NAME profiler_unittest.sh\n          COMMAND \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/profiler_unittest.sh\")\n  set(PROFILER_UNITTEST_INCLUDES src/config_for_unittests.h\n          src/gperftools/profiler.h)\n  set(PROFILER_UNITTEST_SRCS src/tests/profiler_unittest.cc\n          src/tests/testutil.h src/tests/testutil.cc\n          ${PROFILER_UNITTEST_INCLUDES})\n  add_executable(profiler1_unittest ${PROFILER_UNITTEST_SRCS})\n  target_compile_definitions(profiler1_unittest PRIVATE NO_THREADS)\n  target_link_libraries(profiler1_unittest ${LIBPROFILER})\n  add_executable(profiler2_unittest ${PROFILER_UNITTEST_SRCS})\n  target_compile_definitions(profiler2_unittest PRIVATE NO_THREADS)\n  target_link_libraries(profiler2_unittest stacktrace profiler)\n  add_executable(profiler3_unittest ${PROFILER_UNITTEST_SRCS})\n  target_link_libraries(profiler3_unittest ${LIBPROFILER} Threads::Threads)\n  add_executable(profiler4_unittest ${PROFILER_UNITTEST_SRCS})\n  target_link_libraries(profiler4_unittest stacktrace profiler Threads::Threads)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Header Generation\nDESCRIPTION: Sets up a custom command that generates the 'hpack-data.h' header file using the 'cno_huffman_generator' executable. It specifies the output file and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT \"${LIBCNO_GENERATE_DIR}/hpack-data.h\"\n  COMMAND cno_huffman_generator\n  ARGS \"${LIBCNO_GENERATE_DIR}/hpack-data.h\"\n  DEPENDS\n  cno_huffman_generator\n  COMMENT \"LIBCNO generating huffman codes for HTTP2 encodings.\"\n  VERBATIM\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate Handler Test in CMake\nDESCRIPTION: Configures a test file for the certificate handler component with its dependencies and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_certificate_handler.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    harness_tls\n    harness_stdx\n    router_lib\n  INCLUDE_DIRS\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Conditional FIDO Library Removal\nDESCRIPTION: This snippet checks if FIDO support is disabled (WITH_FIDO set to \"none\"). If it is, it removes the FIDO library from the SYSTEM_LIBRARIES list, preventing it from being linked during the build process. This is done using CMake's LIST command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_FIDO AND WITH_FIDO STREQUAL \\\"none\\\")\n  LIST(REMOVE_ITEM SYSTEM_LIBRARIES FIDO)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GDB Index Generation in CMake for MySQL\nDESCRIPTION: Sets up GDB index generation for faster debugging when using Mold or LLD linkers. It adds the --gdb-index option to linker flags and includes additional compiler flags for improved debugging information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nOPTION(ADD_GDB_INDEX \"Generate a .gdb_index section in the binaries.\" OFF)\n\nIF(ADD_GDB_INDEX AND (USING_LD_MOLD OR USING_LD_LLD))\n  IF(USING_LD_LLD)\n    SET(FUSE_LD \"-fuse-ld=lld\")\n  ELSE()\n    SET(FUSE_LD \"-fuse-ld=mold\")\n  ENDIF()\n\n  CMAKE_PUSH_CHECK_STATE()\n  SET(CMAKE_REQUIRED_LIBRARIES \"${FUSE_LD} -Wl,--gdb-index\")\n  CHECK_CXX_SOURCE_COMPILES(\"int main() {}\" CXX_LD_GDB_INDEX_RESULT)\n  CMAKE_POP_CHECK_STATE()\n\n  IF(CXX_LD_GDB_INDEX_RESULT)\n    STRING_APPEND(CMAKE_EXE_LINKER_FLAGS \" -Wl,--gdb-index\")\n    STRING_APPEND(CMAKE_MODULE_LINKER_FLAGS \" -Wl,--gdb-index\")\n    STRING_APPEND(CMAKE_SHARED_LINKER_FLAGS \" -Wl,--gdb-index\")\n    STRING_APPEND(CMAKE_C_FLAGS \" -ggnu-pubnames\")\n    STRING_APPEND(CMAKE_CXX_FLAGS \" -ggnu-pubnames\")\n  ELSE()\n    MESSAGE(STATUS \"Seems like linker does not support --gdb-index\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring inlined_vector_internal Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'inlined_vector_internal' library target. It defines the header file, compiler options, and dependencies for the inlined vector implementation internals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    inlined_vector_internal\n  HDRS\n   \"internal/inlined_vector.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::compressed_tuple\n    absl::core_headers\n    absl::memory\n    absl::span\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for NDB CPCD\nDESCRIPTION: Iterates through specific warning types and disables them if the compiler supports the warning flags. Handles strict-aliasing, unused-parameter, and maybe-uninitialized warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/cw/cpcd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(warning\n    \"strict-aliasing\"\n    \"unused-parameter\"\n    \"maybe-uninitialized\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Keyword List Generator Build\nDESCRIPTION: CMake configuration for building the gen_keyword_list utility that generates keyword_list.h from sql_yacc.yy. Includes compiler flags and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(gen_keyword_list\n  gen_keyword_list.cc\n  DEPENDENCIES GenServerSource\n  LINK_LIBRARIES ext::icu\n  SKIP_INSTALL\n  )\n\nIF(WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO)\n  TARGET_COMPILE_OPTIONS(gen_keyword_list PRIVATE \"-fno-lto\")\nENDIF()\n\nIF(HAS_MISSING_PROFILE)\n  ADD_COMPILE_FLAGS(gen_keyword_list.cc COMPILE_FLAGS ${HAS_MISSING_PROFILE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for MySQL REST Service Database\nDESCRIPTION: Configures additional include directories for the MySQL REST service database component based on the project structure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSET(mysql_rest_service_db_includes\n  ${PROJECT_SOURCE_DIR}/src/http/include/\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Generated Source Files for MySQL Server SQL in CMake\nDESCRIPTION: This snippet defines sets of source files that are generated during the build process. It includes configuration sources, general generated sources, digest sources, and keyword list sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CONF_SOURCES\n  ${CMAKE_CURRENT_BINARY_DIR}/sql_builtin.cc\n)\nSET(GEN_SOURCES\n  ${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.h\n  ${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.h\n  ${CMAKE_CURRENT_BINARY_DIR}/sql_hints.yy.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/lex_hash.h\n)\nSET(GEN_DIGEST_SOURCES\n  ${CMAKE_CURRENT_BINARY_DIR}/lex_token.h\n)\nSET(GEN_KEYWORD_LIST_SOURCES\n  ${CMAKE_CURRENT_BINARY_DIR}/keyword_list.h\n)\n\nSET_SOURCE_FILES_PROPERTIES(\n  ${GEN_SOURCES}\n  ${GEN_DIGEST_SOURCES}\n  ${GEN_KEYWORD_LIST_SOURCES}\n  ${CONF_SOURCES}\n  PROPERTIES GENERATED 1)\n```\n\n----------------------------------------\n\nTITLE: Setting XCOM Base and Include Directories (CMake)\nDESCRIPTION: This snippet sets the base and include directories for the XCom library using the `SET` command. These directories are used to locate source and header files during the build process. `CMAKE_CURRENT_SOURCE_DIR` represents the current source directory of the CMakeLists.txt file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(XCOM_BASEDIR\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/bindings/xcom/xcom/)\"\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(XCOM_INCLUDE_DIR\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/bindings/xcom/)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NDB General Library in CMake\nDESCRIPTION: Sets up include directories for the NDB general library compilation. It includes paths for both source and binary directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_BINARY_DIR}/storage/ndb/include\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/util\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/portlib\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/logger\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_nullguard Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_nullguard target, which provides null pointer protection for the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_nullguard\n  SRCS\n    \"internal/nullguard.cc\"\n  HDRS\n    \"internal/nullguard.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test SQL Plugins - CMake\nDESCRIPTION: This section defines multiple plugins for testing SQL commands in MySQL. Each plugin is added using the 'MYSQL_ADD_PLUGIN' macro with parameters indicating the source file, the output name, and that it's a test-only module. These plugins facilitate testing various SQL-related functionalities, ensuring robustness and reliability of the SQL interface.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_service_sql_api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_sql_complex\n  test_sql_complex.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_complex\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_all_col_types\n  test_sql_all_col_types.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_all_col_types\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_2_sessions\n  test_sql_2_sessions.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_2_sessions\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_cmds_1\n  test_sql_cmds_1.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_cmds_1\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_processlist\n  test_sql_processlist.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_processlist\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_shutdown\n  test_sql_shutdown.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_shutdown\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_sleep_is_connected\n  test_sql_sleep_is_connected.cc\n  TEST_ONLY\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_sleep_is_connected\"\n  )\nMYSQL_ADD_PLUGIN(test_sql_stored_procedures_functions\n  test_sql_stored_procedures_functions.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_stored_procedures_functions\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_views_triggers\n  test_sql_views_triggers.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_views_triggers\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_commit\n  test_sql_commit.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_commit\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_lock\n  test_sql_lock.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_lock\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_sqlmode\n  test_sql_sqlmode.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_sqlmode\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_replication\n  test_sql_replication.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_replication\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_errors\n  test_sql_errors.cc\n  TEST_ONLY\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_errors\"\n  )\nMYSQL_ADD_PLUGIN(test_sql_stmt\n  test_sql_stmt.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_stmt\"\n  TEST_ONLY\n  )\nMYSQL_ADD_PLUGIN(test_sql_reset_connection\n  test_sql_reset_connection.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libtest_sql_reset_connection\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Node Restart Bug25364\nDESCRIPTION: This command tests the system's resilience and performance after restart scenarios, specifically targeting 'Bug25364' to observe transactional consistency across restarts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug25364 T1\nmax-time: 1440\n```\n\n----------------------------------------\n\nTITLE: Defining NDB TLS Search Path in CMake\nDESCRIPTION: Adds a compile definition for NDB_TLS_SEARCH_PATH using the value from WITH_NDB_TLS_SEARCH_PATH, which specifies where to look for TLS certificates.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_COMPILE_DEFINITIONS(NDB_TLS_SEARCH_PATH=\"${WITH_NDB_TLS_SEARCH_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Mecab MySQL Plugin\nDESCRIPTION: This CMake code block conditionally adds the `mecab_parser` plugin if `WITH_MECAB` is enabled. It includes the Mecab include directory, specifies the source file (`mecab_parser/plugin_mecab.cc`), links against the Mecab library, indicates it's a module only, and sets the output name to `libpluginmecab`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/fulltext/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_MECAB)\n  INCLUDE_DIRECTORIES(${MECAB_INCLUDE_DIR})\n\n  MYSQL_ADD_PLUGIN(mecab_parser\n    mecab_parser/plugin_mecab.cc\n    LINK_LIBRARIES ${MECAB_LIBRARY}\n    MODULE_ONLY\n    MODULE_OUTPUT_NAME \\\"libpluginmecab\\\"\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Testing the C Extension\nDESCRIPTION: Commands for testing the C extension of Protocol Buffers. Allows testing across various PHP runtime versions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tests\n./test.sh 5.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for JIT Executor Plugin\nDESCRIPTION: Sets up include directories for the plugin, incorporating various project and system paths\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(jit_executor_plugin PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  PUBLIC\n  ${PROJECT_SOURCE_DIR}/src/router/include/\n  ${PROJECT_SOURCE_DIR}/src/mysql_rest_service/include/\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  ${MRS_JIT_EXECUTOR_LIB}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Representation Library\nDESCRIPTION: CMake configuration for the numeric representation utilities library containing internal representation headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    numeric_representation\n  HDRS\n    \"internal/representation.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test File Templates\nDESCRIPTION: This snippet configures test file templates located in the specified source directory. The `CONFIGURE_TEST_FILE_TEMPLATES` macro processes the input files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_TEST_FILE_TEMPLATES(${CMAKE_CURRENT_SOURCE_DIR}/data\n  \\\"tests-good-1.cfg.in;tests-good-2.cfg.in;tests-start-1.cfg.in\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring inlined_vector_test in CMake for Abseil\nDESCRIPTION: Defines the 'inlined_vector_test' target for testing the inlined vector implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    inlined_vector_test\n  SRCS\n    \"inlined_vector_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::check\n    absl::config\n    absl::core_headers\n    absl::counting_allocator\n    absl::exception_testing\n    absl::hash_testing\n    absl::inlined_vector\n    absl::memory\n    absl::strings\n    absl::test_instance_tracker\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Compiler Flags and Workarounds for ZSTD Build\nDESCRIPTION: Applies compiler-specific flags and workarounds, including fixing a GCC12 bug with FORCE_INLINE_TEMPLATE and -Og by removing -Og from debug builds, and handling missing profile warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# In case we have OPTIMIZE_DEBUG_BUILDS:BOOL=ON\n# This seems to be a gcc12 bug, the combination\n# FORCE_INLINE_TEMPLATE and -Og breaks the build.\nSTRING(REPLACE \" -Og \" \"\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  TARGET_COMPILE_OPTIONS(zstd_objlib PRIVATE ${HAS_MISSING_PROFILE})\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wdocumentation\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_C_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nIF(WIN32_CLANG)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-unused-function\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testDict\nargs: -n CreateMaxTables T6\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header with CMake\nDESCRIPTION: Uses the CMake function GENERATE_EXPORT_HEADER to create an export header for the rest_api component. It specifies the file name and path where the export header should be generated. This export header is necessary for properly exposing API symbols in shared libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_api/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nGENERATE_EXPORT_HEADER(rest_api\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/rest_api_export.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring fixed_array_exception_safety_test in CMake for Abseil\nDESCRIPTION: Sets up the 'fixed_array_exception_safety_test' target for testing exception safety of the fixed array implementation. It defines the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    fixed_array_exception_safety_test\n  SRCS\n    \"fixed_array_exception_safety_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::fixed_array\n    absl::config\n    absl::exception_safety_testing\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router Client Dependencies\nDESCRIPTION: Ensures the mysqlrouter_mrs_client is built as part of the mysqlrouter_all target despite being marked as a Test component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/mrs_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEPENDENCIES(mysqlrouter_all mysqlrouter_mrs_client)\n```\n\n----------------------------------------\n\nTITLE: Executing Scan Tests on MySQL Server\nDESCRIPTION: Designed to perform sql scan operations under various conditions, this snippet lists tests where scans are made with specific flags like 'ScanRead16'. It ensures MySQL Server's ability to handle sequential data read processes and operations within database transactions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/basic.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead16\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanRead240\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanReadCommitted240\n\nmax-time: 500\ncmd: testScan\nargs: -n ScanUpdate\n```\n\n----------------------------------------\n\nTITLE: Configuring Cleanup Library Test in CMake\nDESCRIPTION: Defines a CMake target for testing the cleanup library. It specifies the test source file, compiler options, and dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/cleanup/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    cleanup_test\n  SRCS\n    \"cleanup_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::cleanup\n    absl::config\n    absl::utility\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bits Library Test Target\nDESCRIPTION: CMake configuration for the test suite of the bits library. Specifies test source files and testing dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    bits_test\n  SRCS\n    \"bits_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::bits\n    absl::core_headers\n    absl::random_random\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining crc_cpu_detect Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines a C++ library named `crc_cpu_detect` using `absl_cc_library`. It specifies the header and source files, compiler options, and dependencies for detecting CPU features related to CRC calculation optimizations. This library is intended for internal use only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    crc_cpu_detect\n  HDRS\n    \\\"internal/cpu_detect.h\\\"\n  SRCS\n    \\\"internal/cpu_detect.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::config\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Files and Directories in CMake\nDESCRIPTION: This snippet demonstrates how to include source files and directories in the CMake configuration for the MySQL test executable. It uses conditional statements to append specific source files if certain conditions are met. The paths to various directories are listed to include headers and dependencies for the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/tests/driver/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(source_files.cmake)\nIF(HAVE_SETNS)\n  LIST(APPEND XTEST_SRC \"${CMAKE_SOURCE_DIR}/sql-common/net_ns.cc\")\nENDIF()\n\nINCLUDE_DIRECTORIES(\n  ${MYSQLX_GENERATE_DIR}\n  ${MYSQLX_PROJECT_DIR}\n  ${MYSQLX_PROTOCOL_INCLUDE_DIR}\n  ${MYSQLX_CLIENT_INCLUDE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Add Minimal Chassis Test Driver Executable in CMake\nDESCRIPTION: This snippet adds an executable named `minimal_chassis_test_driver-t` using `MYSQL_ADD_EXECUTABLE`. The executable is configured with a source file, output directory, test definition, export enablement, linked libraries and component dependency. It also conditionally links `mysql_server_component_services` if `WITH_SHARED_UNITTEST_LIBRARY` is not defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(minimal_chassis_test_driver-t\n  minimal_chassis_test_driver-t.cc\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/plugin_output_directory\n  ADD_TEST minimal_chassis_test_driver-t\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ${GTEST_LIBRARIES} server_unittest_library unit_test_common\n  DEPENDENCIES component_example_component1\n)\n\nIF(NOT WITH_SHARED_UNITTEST_LIBRARY)\n  TARGET_LINK_LIBRARIES(minimal_chassis_test_driver-t\n    mysql_server_component_services)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_flags Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_flags target, which provides flag integration for the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_flags\n  SRCS\n  HDRS\n    \"internal/flags.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::flags\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Harness Plugin Configuration Section Structure\nDESCRIPTION: Represents a configuration section object that carries configuration information for a specific plugin instance from the router configuration file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nclass ConfigSection {\n public:\n  ConfigSection& operator=(const ConfigSection&) = delete;\n  std::string    get(const std::string& option) const;\n\n public:\n  const std::string name;\n  const std::string key;\n};\n```\n\n----------------------------------------\n\nTITLE: Building ICU Stub Data Library (icustubdata)\nDESCRIPTION: Creates the icustubdata static library that contains stub implementations for ICU data. This is configured with include directories for the common ICU code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(icustubdata STATIC\n  ${ICU_VERSION_DIR}/source/stubdata/stubdata.cpp)\nTARGET_INCLUDE_DIRECTORIES(icustubdata PRIVATE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${ICU_VERSION_DIR}/source/common\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Test for MySQL Router URI Parser in CMake\nDESCRIPTION: Sets up a fuzzing test executable to test the URI parsing functionality in MySQL Router. The build is conditional on LIBFUZZER_COMPILE_FLAGS being defined and includes the router's uri.cc and utils.cc source files with appropriate include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/fuzzers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(routertest_fuzz_router_uri\n  fuzz_router_uri.cc\n  ${PROJECT_SOURCE_DIR}/src/router/src/uri.cc\n  ${PROJECT_SOURCE_DIR}/src/router/src/utils.cc\n\n  COMPONENT Router\n\n  LINK_LIBRARIES\n  harness-library\n\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  SKIP_INSTALL\n  )\nTARGET_INCLUDE_DIRECTORIES(routertest_fuzz_router_uri\n  PRIVATE\n  $<TARGET_PROPERTY:router_utils,INCLUDE_DIRECTORIES>\n  )\nLIBFUZZER_ADD_TEST(routertest_fuzz_router_uri\n  INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus/fuzz_router_uri\n  )\n```\n\n----------------------------------------\n\nTITLE: Signal Flow for DICT Locking in Node Startup (sp2)\nDESCRIPTION: This snippet illustrates the signal flow for locking the master DICT during the sp2 phase of node startup. It includes DICT_LOCK_REQ, DICT_LOCK_CONF, START_PERMREQ, START_INFOREQ, and START_PERMCONF signals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/DictLock.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDIH/s\n    DICT_LOCK_REQ\n        DICT/m\n    DICT_LOCK_CONF\nDIH/s\n    START_PERMREQ\n        DIH/m\n            START_INFOREQ\n                DIH/a\n                    invalidateNodeLCP() if INR\n                DIH/a\n            START_INFOCONF\n        DIH/m\n    START_PERMCONF\nDIH/s\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Randen HWAES in CMake\nDESCRIPTION: Defines a CMake test target for testing the hardware AES implementation of internal randen component. This target compiles and links randen_hwaes_test.cc with various dependencies including absl::log, absl::random_internal_platform, and testing frameworks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_randen_hwaes_test\n  SRCS\n    \"internal/randen_hwaes_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_internal_platform\n    absl::random_internal_randen_hwaes\n    absl::random_internal_randen_hwaes_impl\n    absl::str_format\n    GTest::gmock\n    GTest::gtest\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Low Level Hash Internal Library in CMake\nDESCRIPTION: Creates an internal 'low_level_hash' library that provides core hash primitives. It includes implementation files and depends on config, endian, int128, and prefetch components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    low_level_hash\n  HDRS\n    \"internal/low_level_hash.h\"\n  SRCS\n    \"internal/low_level_hash.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::endian\n    absl::int128\n    absl::prefetch\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex and Lock Relations in MySQL\nDESCRIPTION: This snippet contains a series of ARC declarations indicating the relationships and types of locking mechanisms between various components in MySQL. Each ARC statement represents a connection (or arc) between locks and mutexes critical for the database management system's operation. These relationships define how different processes access shared resources ensuring data integrity.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nARC FROM \"mutex/mysys/THR_LOCK_myisam\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/mysys/THR_LOCK_myisam\" TO \"rwlock/mysys/SAFE_HASH::lock\" OP \"R\"\nARC FROM \"mutex/mysys/THR_LOCK_myisam\" TO \"rwlock/mysys/SAFE_HASH::lock\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/autoinc_persisted_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/dict_persist_dirty_tables_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/dict_sys_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/dict_table_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/innobase_share_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/lock_sys_page_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/lock_sys_table_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/log_files_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/log_limits_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/parser_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/recalc_pool_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/rw_lock_list_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_sys_shard_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/trx_undo_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/innodb/undo_space_rseg_mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/myisam/MYISAM_SHARE::intern_lock\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/mysys/KEY_CACHE::cache_lock\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/mysys/THR_LOCK_charset\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/mysys/THR_LOCK::mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/pfs_example/X\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/pfs_example/Y\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_open\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_replica_list\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_sql_rand\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_status\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_table_cache\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_thd_list\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_thd_remove\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_thread_ids\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/LOG::LOCK_log\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/THD::LOCK_query_plan\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"mutex/sql/THD::LOCK_thd_query\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/pfs_example/T\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/pfs_example/X\" OP \"R\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/pfs_example/Y\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/pfs_example/Z\" OP \"R\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"R\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/sql/LOCK_system_variables_hash\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/sql/LOGGER::LOCK_logger\" OP \"R\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/sql/THR_LOCK_udf\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"rwlock/validate_pwd/LOCK_dict_file\" OP \"W\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/dict_table_stats\" OP \"X\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/fil_space_latch\" OP \"X\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/rsegs_lock\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"mutex/p_dyn_loader/key_component_id_by_urn_mutex\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\nARC FROM \"mutex/pfs_example/X\" TO \"mutex/pfs_example/Y\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/log_files_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_event_queue\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_global_system_variables\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_replica_list\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_sql_rand\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_status\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_thd_list\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_thd_remove\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_thread_ids\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/THD::LOCK_query_plan\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"mutex/sql/THD::LOCK_thd_query\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"W\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"rwlock/group_rpl/RWLOCK_transaction_observation_list\" OP \"R\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"rwlock/sql/Trans_delegate::lock\" OP \"R\"\nARC FROM \"mutex/sql/Event_scheduler::LOCK_scheduler_state\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Router Manual Pages in CMake\nDESCRIPTION: Defines a list of MySQL Router tool man pages (MAN1_ROUTER) to be installed when Router support is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MAN1_ROUTER\n  mysqlrouter.1\n  mysqlrouter_passwd.1\n  mysqlrouter_plugin_info.1\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for Changestreams Library in CMake\nDESCRIPTION: Sets up compiler warnings and disables specific warnings for the build process of the changestreams library. Adds shadow warning checks and disables missing profile warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/libstandalone/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring flat_hash_map Library in CMake for Abseil\nDESCRIPTION: Sets up the 'flat_hash_map' library target, which provides a flat hash map implementation. It defines the header file, compiler options, and dependencies for the flat hash map component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flat_hash_map\n  HDRS\n    \"flat_hash_map.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::container_memory\n    absl::core_headers\n    absl::hash_function_defaults\n    absl::raw_hash_map\n    absl::algorithm_container\n    absl::memory\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: MacOS Version-Specific CMake Requirement\nDESCRIPTION: Ensures the appropriate CMake version (3.18+) is used for macOS 11 or later to properly handle system libraries and SDK integration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# See comments above, about CMAKE_MINIMUM_REQUIRED version and macOS 11.\nIF(APPLE)\n  IF(MY_HOST_SYSTEM_VERSION VERSION_GREATER_EQUAL 20)\n    CMAKE_MINIMUM_REQUIRED(VERSION 3.18)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: System Restart SR4\nDESCRIPTION: This command focuses on testing the system restart for the scenario labeled 'SR4', allowing for observation of state recovery and data consistency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_28\n\nLANGUAGE: text\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR4 T6\nmax-time: 3600\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Commands for Database Performance\nDESCRIPTION: This snippet contains various 'ndb-sql-perf.sh' commands to execute SQL statements for creating, selecting, updating, and dropping tables in the MySQL server. Each command is set with a maximum time of 600 seconds and some specific MySQL daemon (mysqld) parameters are used to control connection pooling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-perf-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# sql\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-create-table.sh t1\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-select.sh t1 1 64\nmysqld: --ndb-cluster-connection-pool=1\ntype: bench\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-select.sh t1 1 64\nmysqld: --ndb-cluster-connection-pool=4\ntype: bench\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-update.sh t1 1 64\nmysqld: --ndb-cluster-connection-pool=1\ntype: bench\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-update.sh t1 1 64\nmysqld: --ndb-cluster-connection-pool=4\ntype: bench\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-drop-table.sh t1\ncmd-type: mysql\n\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for LOCK_plugin_install in MySQL Server\nDESCRIPTION: This snippet defines the lock dependencies for the LOCK_plugin_install mutex in MySQL server. It shows relationships with various other mutexes, read-write locks, and shared-exclusive locks across different components of the server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/sql/LOCK_user_conn\"\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"mutex/sql/LOG::LOCK_log\"\n// ... (truncated for brevity)\nARC FROM \"mutex/sql/LOCK_plugin_install\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\n```\n\n----------------------------------------\n\nTITLE: Setting Java Crund Source Directory Path\nDESCRIPTION: Defines the base source directory path for Java Crund components\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/java/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JCRUND_SRC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Server\nDESCRIPTION: Command to start MySQL server with specific InnoDB shutdown mode and table name case sensitivity settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mysqld --datadir=/tmp/8_0_11 --innodb-fast-shutdown=0 --lower_case_table_names=1 --innodb_log_file_size=4M\n```\n\n----------------------------------------\n\nTITLE: Setting up Die-If-Null Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's die_if_null functionality. It specifies the source file and dependencies needed to test the null-pointer handling utility that terminates the program when given a null pointer.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    die_if_null_test\n  SRCS\n    \"die_if_null_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::die_if_null\n    absl::log_internal_test_helpers\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NDB Management API in CMake\nDESCRIPTION: Sets up include directories for the NDB Management API compilation. It includes the current source directory and specific paths for mgmapi and kernel includes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmapi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/kernel\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the project. It uses the `INCLUDE_DIRECTORIES` command to add directories where the compiler should search for header files. These include directories contain header files for XCom, Windows dependencies, and generated XCom files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(\n  ${XCOM_WINDEPS_INCLUDE_DIRS}                   # win deps and sun rpc\n  ${XCOM_INCLUDE_DIR}                            # xcom include files\n  ${CMAKE_CURRENT_BINARY_DIR}/include/        # generated xcom include files\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Building NDB Client Shared Link Test Program in CMake\nDESCRIPTION: Creates a test executable to verify linking against the shared NDB client library. This ensures the shared library is correctly built and can be linked against.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Build test program to check linking against ndclient_so\nADD_EXECUTABLE(ndbclient_shared_link_test ndbclient_link_test.cpp)\nSET_TARGET_PROPERTIES(ndbclient_shared_link_test PROPERTIES ENABLE_EXPORTS TRUE)\nTARGET_LINK_LIBRARIES(ndbclient_shared_link_test ndbclient_so)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Routing Guidelines\nDESCRIPTION: Creates an object library target from the source files with public and private dependencies. Sets up necessary compile definitions and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(routing_guidelines-objects OBJECT ${guidelines_SRC})\nTARGET_LINK_LIBRARIES(routing_guidelines-objects\n  PUBLIC harness_stdx router_utils\n  PRIVATE extra::rapidjson)\n# Needed so items tagged with ROUTING_GUIDELINES_EXPORT\n# (to be exposed by the shared version of the library)\n# are not skipped during build\nTARGET_COMPILE_DEFINITIONS(routing_guidelines-objects\n  PUBLIC routing_guidelines_EXPORTS)\nTARGET_INCLUDE_DIRECTORIES(routing_guidelines-objects PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Management Configuration Test in CMake\nDESCRIPTION: Configures a test for the management configuration functionality, specifying the test source file and required libraries for linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(MgmConfig-t testConfig.cpp\n  LIBS ndbmgmapi ndbmgmcommon ndbtrace ndblogger ndbgeneral ndbportlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Mutex and Lock Dependencies\nDESCRIPTION: This code snippet defines the relationships between various mutexes and locks in MySQL's InnoDB storage engine. It uses ARC statements to represent dependencies, with each line showing a connection from one component to another, and sometimes specifying an operation type.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"sxlock/innodb/log_sn_lock\" OP \"X\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/log_sn_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/page_sys_arch_oper_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_mutex\" TO \"sxlock/innodb/log_sn_lock\" OP \"X\"\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Checking Clang and LibFuzzer Support with CMake\nDESCRIPTION: CMake output showing the verification of required clang capabilities including sanitize coverage trace, profile instrumentation generation, coverage mapping, and libFuzzer support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/fuzzers/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n-- Performing Test COMPILER_HAS_SANITIZE_COVERAGE_TRACE_PC_GUARD\n-- Performing Test COMPILER_HAS_SANITIZE_COVERAGE_TRACE_PC_GUARD - Success\n-- Performing Test COMPILER_HAS_PROFILE_INSTR_GENERATE\n-- Performing Test COMPILER_HAS_PROFILE_INSTR_GENERATE - Success\n-- Performing Test COMPILER_HAS_COVERAGE_MAPPING\n-- Performing Test COMPILER_HAS_COVERAGE_MAPPING - Success\n-- Performing Test CLANG_HAS_LIBFUZZER\n-- Performing Test CLANG_HAS_LIBFUZZER - Success\n```\n\n----------------------------------------\n\nTITLE: Defining Debugging Internal Library in Abseil\nDESCRIPTION: Creates an internal library with utilities for memory inspection and ELF file support, not intended for direct use by clients.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Internal-only target, do not depend on directly.\nabsl_cc_library(\n  NAME\n    debugging_internal\n  HDRS\n    \"internal/address_is_readable.h\"\n    \"internal/elf_mem_image.h\"\n    \"internal/vdso_support.h\"\n  SRCS\n    \"internal/address_is_readable.cc\"\n    \"internal/elf_mem_image.cc\"\n    \"internal/vdso_support.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n    absl::config\n    absl::dynamic_annotations\n    absl::errno_saver\n    absl::raw_logging_internal\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL test_server_telemetry_metrics Component in CMake\nDESCRIPTION: This CMake snippet adds a test-only component to the MySQL build system. The component is named 'test_server_telemetry_metrics' and includes two source files: server_metrics_component.cc and server_metrics_helpers.cc. It's configured as a module-only component for testing purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test_server_telemetry_metrics/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(test_server_telemetry_metrics\n  server_metrics_component.cc\n  server_metrics_helpers.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Lock and Mutex Dependencies\nDESCRIPTION: This snippet defines the relationships and state transitions between various InnoDB locks and mutexes. It uses a custom syntax to represent arcs in a graph-like structure, showing how different locks interact and their allowed states and operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_38\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"sxlock/innodb/hash_table_locks\" STATE \"X\" TO \"mutex/innodb/rw_lock_list_mutex\"\nARC FROM \"sxlock/innodb/hash_table_locks\" STATE \"X\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"sxlock/innodb/hash_table_locks\" STATE \"X\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"S\" TO \"mutex/innodb/autoinc_persisted_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"S\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\n// ... (truncated for brevity)\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/rtr_ssn_mutex\"\nARC FROM \"sxlock/innodb/index_tree_rw_lock\" STATE \"X\" TO \"mutex/innodb/rw_lock_debug_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library for TLS\nDESCRIPTION: Defines an interface library router_tls with include directories from various project sources, facilitating header inclusion across the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(router_tls INTERFACE)\nTARGET_INCLUDE_DIRECTORIES(router_tls INTERFACE\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  $<TARGET_PROPERTY:harness_stdx,INCLUDE_DIRECTORIES>\n  )\n```\n\n----------------------------------------\n\nTITLE: Joining paths for pc file\nDESCRIPTION: This snippet uses the custom `join_paths` function to construct the installation paths that will be used within the `libcbor.pc` file.  The `libcbor.pc` file is used by `pkg-config` to locate the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\njoin_paths(libdir_for_pc_file \"\\${prefix}\" \"${CMAKE_INSTALL_LIBDIR}\")\njoin_paths(includedir_for_pc_file \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\nconfigure_file(libcbor.pc.in libcbor.pc @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bad Any Cast Library Target\nDESCRIPTION: CMake configuration for the bad_any_cast exception library with its implementation and header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    bad_any_cast\n  HDRS\n   \"bad_any_cast.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bad_any_cast_impl\n    absl::config\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Instance Attributes Tests in CMake\nDESCRIPTION: Configures tests for instance attributes with a common pattern using FOREACH to handle multiple potential test files related to instance attributes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(test_file\n    test_instance_attributes.cc\n    )\n  ADD_HARNESS_TEST_FILE(${test_file}\n    MODULE ${TEST_MODULE}\n    LIB_DEPENDS\n      test-helpers router_cluster\n    INCLUDE_DIRS\n      $<TARGET_PROPERTY:router_cluster,INCLUDE_DIRECTORIES>\n      ../src/\n      ../../../tests/helpers/\n    SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Index Operations Testing in Shell\nDESCRIPTION: This snippet handles testing of index operations using different commands. Tests focus on scenarios involving table index manipulations and are executed with defined maximum run times and necessary parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 2500\ncmd: testIndex\nargs: -n NFNR3 T6 T13\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Target for MySQL Server Mock Schema\nDESCRIPTION: This snippet creates a custom target in CMake that depends on the generated mock schema files, ensuring they are built as part of the project's build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(mysql_server_mock_schema\n  DEPENDS mysql_server_mock_schema.cc mysql_server_mock_schema.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining non_temporal_memcpy Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines a C++ library named `non_temporal_memcpy` using `absl_cc_library`. It specifies the header file, compiler options, and dependencies including the ARM-specific intrinsics and core Abseil headers. It provides functions for performing non-temporal memory copies, which optimize memory access patterns to reduce cache pollution. This library is intended for internal use only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    non_temporal_memcpy\n  HDRS\n    \\\"internal/non_temporal_memcpy.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::non_temporal_arm_intrinsics\n    absl::config\n    absl::core_headers\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Cluster Daemon Manual Pages in CMake\nDESCRIPTION: Defines manual pages for the MySQL NDB Cluster daemons (MAN8_NDB) to be installed when NDB support is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MAN8_NDB\n  ndb_mgmd.8\n  ndbd.8\n  ndbmtd.8\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executables\nDESCRIPTION: This CMake code iterates through the list of tests and creates an executable for each one using the `MYSQL_ADD_EXECUTABLE` macro. Each executable is linked with the specified libraries and compiled with the given definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"FOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc\n    ADD_TEST ${test}\n    LINK_LIBRARIES ${TESTS_LINK_LIBRARIES}\n    COMPILE_DEFINITIONS \\\"${DISABLE_PSI_DEFINITIONS}\\\")\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Build Directory\nDESCRIPTION: Commands for configuring MySQL build directory with release build settings and Boost dependency setup.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd build/8.0.19-build\ncmake ../../git/8.0.19-src -DWITH_DEBUG=0 -DWITH_BOOST=../../boost/ -DDOWNLOAD_BOOST=1\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Lock Dependencies\nDESCRIPTION: A series of ARC statements defining the allowed lock acquisition patterns between different InnoDB locks and mutexes. Each line specifies a relationship between two locks including their states (X, S, SX) and operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_37\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/fil_space_latch\" OP \"X\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"SX\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"S\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flags CommandLineFlag Library in CMake\nDESCRIPTION: Creates a CMake target for the flags command line flag library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_commandlineflag\n  SRCS\n    \"commandlineflag.cc\"\n  HDRS\n    \"commandlineflag.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::fast_type_id\n    absl::flags_commandlineflag_internal\n    absl::optional\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf via pip - Bash\nDESCRIPTION: This command installs the Protobuf library for Python using the pip package manager, ensuring that the necessary packages for handling Protocol Buffers are available in the Python environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install protobuf\n```\n\n----------------------------------------\n\nTITLE: MySQL Mutex Dependencies Graph Definition\nDESCRIPTION: Defines directed edges (arcs) between different mutex components in MySQL Server. The graph shows dependencies between system locks, particularly focusing on relationships between SQL layer mutexes and InnoDB storage engine mutexes. Also includes operation types (S, X, W) for certain lock relationships.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/sql/Gtid_state\" TO \"mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex\"\nARC FROM \"mutex/sql/Gtid_state\" TO \"mutex/sql/Gtid_state\"\nARC FROM \"mutex/sql/Gtid_state\" TO \"mutex/sql/THD::LOCK_thd_query\"\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for WebAuthn Plugin in CMake\nDESCRIPTION: Configures the include directories needed for the WebAuthn client authentication plugin. Includes the current source directory and a common directory for shared code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/authentication_webauthn/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(CheckIncludeFiles)\n\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../common\n  )\n\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_function_defaults Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'hash_function_defaults' library target. It defines the header file, compiler options, and dependencies for default hash function implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash_function_defaults\n  HDRS\n    \"internal/hash_function_defaults.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::cord\n    absl::hash\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Building and installing GoogleTest\nDESCRIPTION: Builds GoogleTest using the generated makefiles and installs it to the system's default location (usually `/usr/local/`). This process compiles the GoogleTest library and makes it available for other projects to link against.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmake\nsudo make install    # Install in /usr/local/ by default\n```\n\n----------------------------------------\n\nTITLE: Error Checking Conditions in MySQL Backup System\nDESCRIPTION: Series of error condition checks using ndbrequire and ERROR_INSERTED macros to validate backup system state and handle specific error cases.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/backup/Backup.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nndbrequire(!ERROR_INSERTED(10001));\nndbrequire(!ERROR_INSERTED(10002));\nndbrequire(!ERROR_INSERTED(10021));\nndbrequire(!ERROR_INSERTED(10003));\nndbrequire(!ERROR_INSERTED(10004));\nndbrequire(!ERROR_INSERTED(10005));\nndbrequire(!ERROR_INSERTED(10006));\nndbrequire(!ERROR_INSERTED(10007));\nndbrequire(!ERROR_INSERTED(10008));\nndbrequire(!ERROR_INSERTED(10009));\nndbrequire(!ERROR_INSERTED(10010));\nndbrequire(!ERROR_INSERTED(10011));\nndbrequire(!ERROR_INSERTED(10012));\nndbrequire(!ERROR_INSERTED(10013));\nndbrequire(!ERROR_INSERTED(10014));\nndbrequire(!ERROR_INSERTED(10015));\nndbrequire(!ERROR_INSERTED(10016));\nndbrequire(!ERROR_INSERTED(10017));\nndbrequire(!ERROR_INSERTED(10018));\nndbrequire(!ERROR_INSERTED(10019));\nndbrequire(!ERROR_INSERTED(10020));\n```\n\n----------------------------------------\n\nTITLE: CPCD Configuration\nDESCRIPTION: Configurations for the Cluster Process Control Daemon (CPCD) to facilitate process management on various cluster nodes during testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_SETUP_README.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[ndb_cpcd]\nwork-dir= $VAR_DIR/run/ndb_cpcd # e.g. /mysql/builds/5.1/var/run/ndb_cpcd\nlogfile= $VAR_DIR/run/ndb_cpcd/log.txt # e.g. /mysql/builds/5.1/var/run/ndb_cpcd/log.txt\ndebug= 1\nuser= ndbdev\n```\n\n----------------------------------------\n\nTITLE: ByteBuffer Mappings in Ndb Java Interface\nDESCRIPTION: Issue related to ByteBuffer usage for C++ pointer mappings in the Ndb Java class. These methods require proper mapping between Java ByteBuffer and C++ void* or const void* pointers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: ByteBuffer/*_const void *_*/ ptr();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native ByteBuffer/*_const void *_*/ ptr();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support mapping <union> or check if needed\n```\n\n----------------------------------------\n\nTITLE: Setting up compiler warnings for MySQL event tracking tests\nDESCRIPTION: Configures compiler warnings by adding shadow warnings and disabling missing profile warnings for the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/event_tracking_test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Setting up Log Stripping Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log stripping functionality. It specifies the source file and dependencies needed to test the mechanisms that strip log statements at compile time based on severity.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_49\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_stripping_test\n  SRCS\n    \"stripping_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::check\n    absl::flags_program_name\n    absl::log\n    absl::log_internal_test_helpers\n    absl::log_severity\n    absl::strerror\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Building C# Protobuf Project in Visual Studio\nDESCRIPTION: Instructions for setting up and building the Protobuf library using Visual Studio 2022 or later. Requires specific compiler and runtime versions for development.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/csharp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOpen the `src/Google.Protobuf.sln` solution in Visual Studio 2022 or later\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Traces\nDESCRIPTION: This snippet adds a preprocessor definition to enable debug traces if either the `XPLUGIN_LOG_DEBUG` option or the `WITH_DEBUG` option is enabled. It also prints a status message indicating that debug traces are enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(XPLUGIN_LOG_DEBUG OR WITH_DEBUG)\n  MESSAGE(STATUS \\\"MYSQLX - Enabled debug traces\\\")\n  ADD_DEFINITIONS(-DXPLUGIN_LOG_DEBUG)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for libmysql in CMake\nDESCRIPTION: Configures compiler flags for libmysql, including downgrading warnings for specific functions and setting link options for different platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nIF((WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO) AND MY_COMPILER_IS_GNU)\n  TARGET_LINK_OPTIONS(libmysql PRIVATE -Wno-error=stringop-truncation)\nENDIF()\n\nIF(UNIX)\n  IF(LINK_FLAG_Z_DEFS)\n    TARGET_LINK_OPTIONS(libmysql PRIVATE LINKER:${LINK_FLAG_Z_DEFS})\n  ENDIF()\n\n  IF(LINUX)\n    CONFIGURE_FILE(libmysql.ver.in ${CMAKE_CURRENT_BINARY_DIR}/libmysql.ver)\n    TARGET_LINK_OPTIONS(libmysql PRIVATE\n      LINKER:--version-script=${CMAKE_CURRENT_BINARY_DIR}/libmysql.ver)\n  ENDIF()\n\n  SET_TARGET_PROPERTIES(mysqlclient PROPERTIES CLEAN_DIRECT_OUTPUT 1)\n  SET_TARGET_PROPERTIES(libmysql PROPERTIES CLEAN_DIRECT_OUTPUT 1)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting GNU Compiler Flags for MYISAMMRG\nDESCRIPTION: Adds a compiler flag to disable class-memaccess warnings for GNU compiler, as MyISAM code uses memset/memcpy operations on non-POD structs and is no longer maintained.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisammrg/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU)\n  ADD_COMPILE_FLAGS(${MYISAMMRG_SOURCES} COMPILE_FLAGS \"-Wno-class-memaccess\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL Server Java API in CMake\nDESCRIPTION: Sets up include directories for the Java API compilation, including JNI headers and MySQL-specific directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${JNI_INCLUDE_DIRS}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/utils\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/jtie\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/jtie/test/myapi)\n```\n\n----------------------------------------\n\nTITLE: Configuring compressed_tuple_test in CMake for Abseil\nDESCRIPTION: Defines the 'compressed_tuple_test' target for testing the compressed tuple implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    compressed_tuple_test\n  SRCS\n    \"internal/compressed_tuple_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::any\n    absl::compressed_tuple\n    absl::memory\n    absl::optional\n    absl::test_instance_tracker\n    absl::utility\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific mysqld Sources\nDESCRIPTION: Sets up the source files for the MySQL server executable (mysqld) with platform-specific files for Windows and Unix systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  SET(MYSQLD_SOURCE\n    main.cc\n    enable_win_jemalloc.cc\n    nt_servc.cc\n    nt_servc.h\n    message.rc)\nELSE()\n  SET(MYSQLD_SOURCE main.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking FIDO Authentication Client Plugin Prerequisites in CMake\nDESCRIPTION: Conditional checks to determine if the WebAuthn authentication client plugin should be built. The plugin is skipped if client plugins are disabled or if the required FIDO libraries are not found.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/authentication_webauthn/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  MESSAGE(STATUS \"Skipping webauthn client authentication plugin.\")\n  RETURN()\nENDIF()\n\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"authentication_webauthn\")\n# The client authentication plugin is part of the community build.\n# Build it if we have found the necessary libraries.\nIF(NOT FIDO_FOUND)\n  MESSAGE(WARNING \"Skipping the webauthn client authentication plugin\")\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: testScanPerf NDB Batch Read Committed Without Reset Bounds\nDESCRIPTION: Benchmark command for testing NDB batch scan performance with read committed mode. Uses 100,000 scans with batch size 1000 and 10 iterations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 0 -r 3 -q 0 -m 1000 -i 10 T1\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Windows-specific Sources to ICU I18N Library\nDESCRIPTION: Adds Windows-specific source files to the ICU_I18N_SOURCES list when building on Windows platforms. These include windtfmt.cpp, winnmfmt.cpp, and wintzimpl.cpp.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  LIST(APPEND ICU_I18N_SOURCES\n    ${ICU_VERSION_DIR}/source/i18n/windtfmt.cpp\n    ${ICU_VERSION_DIR}/source/i18n/winnmfmt.cpp\n    ${ICU_VERSION_DIR}/source/i18n/wintzimpl.cpp\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Using renamed GoogleTest macros\nDESCRIPTION: Illustrates how to use the renamed GoogleTest macros after applying the `-DGTEST_DONT_DEFINE_FOO=1` compiler flag.  For example, `TEST` becomes `GTEST_TEST`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nGTEST_TEST(SomeTest, DoesThis) { ... }\n```\n\nLANGUAGE: C++\nCODE:\n```\nTEST(SomeTest, DoesThis) { ... }\n```\n\n----------------------------------------\n\nTITLE: Generate Partial HTML from MAN Sources CMake\nDESCRIPTION: This snippet defines a custom command to generate partial HTML files from man page source files using mandoc, including a CSS file. It iterates through the MAN_SOURCES list, creating a custom command for each file to generate a partial HTML file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# man_html_partial\nforeach(f ${MAN_SOURCES})\n\tstring(REGEX REPLACE \"\\\\.[13]$\" \"\" g ${f})\n\tadd_custom_command(OUTPUT ${g}.partial\n\t\tCOMMAND cat ${PROJECT_SOURCE_DIR}/man/dyc.css > ${g}.partial\n\t\tCOMMAND mandoc -T html -O man=\"%N.html\",fragment ${f} >> ${g}.partial\n\t\tDEPENDS ${f})\n\tlist(APPEND HTML_PARTIAL_FILES ${g}.partial)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Python Test Configuration\nDESCRIPTION: Defines Python test targets for various GoogleTest features and scenarios\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\npy_test(googletest-break-on-failure-unittest)\npy_test(gtest_skip_check_output_test)\npy_test(googletest-catch-exceptions-test)\n```\n\n----------------------------------------\n\nTITLE: Partial Progress Check Implementation\nDESCRIPTION: Checks for partial progress across slave nodes and determines recovery actions based on rollforward or rollback decisions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/MasterTakeover.txt#2025-04-21_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nfor each slave node (saved conf)\n  if (conf->op_count == 0)\n    node->start_op = 0;\n    node->start_op_state = OS_INITIAL;\n    node->partial_recovery = true;\n  else if decision is rollforward\n    if (conf->rollforward_op > trans->rollforward_op)\n      node->start_op = conf->rollforward_op;\n      node->start_op_state = conf->rollforward_op_state;\n      node->partial_recovery = true;\n  else (decision is rollback)\n    if (conf->rollback_op < trans->rollback_op)\n      node->start_op = conf->rollback_op;\n      node->start_op_state = conf->rollback_op_state;\n      node->partial_recovery = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Library and Setting Include Directories in CMake\nDESCRIPTION: This snippet defines an INTERFACE library named 'harness_net_ts' and sets the include directories and source files required by this library. It ensures that any directory containing necessary header files for the net_ts functionality is included during the build process, thus allowing for proper compilation and linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/include/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(harness_net_ts INTERFACE)\n\nTARGET_INCLUDE_DIRECTORIES(harness_net_ts\n  INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\nTARGET_SOURCES(harness_net_ts\n  INTERFACE\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/buffer.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/executor.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/file.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/io_service_base.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/kqueue.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/kqueue_io_service.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/linux_epoll.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/linux_epoll_io_service.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/netif.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/poll.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/poll_io_service.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/resolver.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/socket.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/socket_constants.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/socket_error.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/socket_service.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/impl/socket_service_base.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/internet.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/io_context.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/local.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/netfwd.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/socket.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/timer.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql/harness/net_ts/win32_named_pipe.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking to External RPC Library (CMake)\nDESCRIPTION: This snippet conditionally links the `mysqlgcs` library to the `ext::rpc` library if the latter exists. This implies that the GCS library might depend on an external RPC implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(TARGET ext::rpc)\n  TARGET_LINK_LIBRARIES(mysqlgcs PUBLIC ext::rpc)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in Python\nDESCRIPTION: This snippet shows the command to execute Python Protocol Buffers conformance tests using Bazel, indicating how to trigger the tests for the Python language.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ bazel test //python:conformance_test\n```\n\n----------------------------------------\n\nTITLE: Adding Host Application Signal Test Plugin in MySQL Makefile\nDESCRIPTION: This snippet illustrates the plugin addition for 'test_services_host_application_signal', compiled from 'test_services_host_application_signal.cc'. It provides testing capabilities for host application signal handling within MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/test_services/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_services_host_application_signal\n  test_services_host_application_signal.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Algorithm Test Suite in CMake\nDESCRIPTION: Sets up the test suite for the Abseil algorithm library. It defines the test name, source files, compilation options, and test dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/algorithm/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    algorithm_test\n  SRCS\n    \"algorithm_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::algorithm\n    absl::config\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Running Static Analysis on Full Source Tree\nDESCRIPTION: Commands to run static analysis on the entire MySQL source tree using multiple jobs and different configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/static_analysis.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py -j 4 --tree --path ./bld > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --tree --clang-tidy=/usr/bin/clang-tidy > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --tree --path ../../bld > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --tree --scan-root=/work/mysql/sql > results.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Binlog\nDESCRIPTION: This CMake command adds a definition that signifies a standalone binlog build. This preprocessor definition likely affects the behavior of the compiled code, enabling standalone-specific features or optimizations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_DEFINITIONS(-DSTANDALONE_BINLOG)\"\n```\n\n----------------------------------------\n\nTITLE: Message Format Structure\nDESCRIPTION: Specifies the format of a message including field size, last non-ignorable field ID, and type fields.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<message_format> ::= <serializable_field_size> <last_non_ignorable_field_id> { <type_field> }\n<type_field> ::= <field_id> <field_data>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache and Default Settings\nDESCRIPTION: This snippet sets cache and validation rules for gperftools’ configuration, ensuring that invalid or unsupported settings fall back on sensible defaults.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT gperftools_tcmalloc_pagesize IN_LIST allowed_page_sizes)\n  message(WARNING\n    \"Invalid gperftools_tcmalloc_pagesize (${gperftools_tcmalloc_pagesize}), \\\n    \"setting to default value (${default_tcmalloc_pagesize})\")\n  set(gperftools_tcmalloc_pagesize ${default_tcmalloc_pagesize})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Test Executable\nDESCRIPTION: Adds an additional test executable (bug25714) when unit tests are enabled, linking against mysqlclient library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/testclients/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  MYSQL_ADD_EXECUTABLE(bug25714 bug25714.cc SKIP_INSTALL EXCLUDE_FROM_PGO)\n  TARGET_LINK_LIBRARIES(bug25714 mysqlclient)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Libraries for MySQL Server - CMake\nDESCRIPTION: Manages the inclusion of extra libraries needed for testing in MySQL server, differentiating between shared and static unit test configurations. This ensures all required libraries for tests are correctly linked.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_SHARED_UNITTEST_LIBRARY)\\n  UNSET(MYSQLD_EXTRA_LIBRARIES)\\nELSE()\\n  SET(MYSQLD_EXTRA_LIBRARIES ${MYSQLD_STATIC_PLUGIN_LIBS})\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for TCMalloc Libraries\nDESCRIPTION: This snippet adds dependencies to the imported TCMalloc libraries. This ensures that the TCMalloc external project is built before the imported libraries are used.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_DEPENDENCIES(my_tcmalloc tcmalloc_ext)\nADD_DEPENDENCIES(my_tcmalloc_debug tcmalloc_ext)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LD_LIBRARY_PATH for NDB API Library\nDESCRIPTION: Shell command to add the NDB API shared library path to the system's library search path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/ndbapi_scan/readme.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=/path/to/ndb/lib:$LD_LIBRARY_PATH\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Install RPATH\nDESCRIPTION: This snippet sets the LINUX_INSTALL_RPATH_ORIGIN variable to 1 and appends a linker flag to CMAKE_MODULE_LINKER_FLAGS_DEBUG and CMAKE_SHARED_LINKER_FLAGS_DEBUG to add an rpath for custom libraries in debug builds on Linux.  It checks for the patchelf executable and terminates with a fatal error if it cannot be found.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LINUX AND KNOWN_CUSTOM_LIBRARIES)\n  # Custom libraries are not targets, we install them as FILES.\n  # INSTALL_RPATH must must be set depending on binary type\n  # EXECUTABLE MODULE_LIBRARY SHARED_LIBRARY, see ADD_INSTALL_RPATH_FOR_OPENSSL\n  SET(LINUX_INSTALL_RPATH_ORIGIN 1)\n\n  # Debug versions of plugins may be installed to <root>/lib/plugin/debug\n  FOREACH(LINK_FLAG\n      CMAKE_MODULE_LINKER_FLAGS_DEBUG\n      CMAKE_SHARED_LINKER_FLAGS_DEBUG\n      )\n    STRING_APPEND(${LINK_FLAG} \\\" -Wl,-rpath,'\\$ORIGIN/../../private'\\\")\n    MESSAGE(STATUS \\\"${LINK_FLAG} ${${LINK_FLAG}}\\\")\n  ENDFOREACH()\n  IF(NOT PATCHELF_EXECUTABLE)\n    MESSAGE(FATAL_ERROR \\\"Please install the patchelf(1) utility.\\\")\n  ENDIF()\n  VERIFY_CUSTOM_LIBRARY_DEPENDENCIES()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Tests\nDESCRIPTION: This snippet conditionally adds the `tests` subdirectory to the build process if the `WITH_MYSQLX` option is enabled. This ensures that tests are only built when the MySQL X plugin is being built.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_MYSQLX)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Network TS Tests\nDESCRIPTION: This snippet defines a list of network transport services test files. It then iterates through the list and adds each as a Google Test file, specifying library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  test_net_ts_buffer.cc\n  test_net_ts_executor.cc\n  test_net_ts_impl_callstack.cc\n  test_net_ts_impl_file.cc\n  test_net_ts_impl_io_service_base.cc\n  test_net_ts_impl_kqueue_io_service.cc\n  test_net_ts_impl_linux_epoll_io_service.cc\n  test_net_ts_impl_netif.cc\n  test_net_ts_impl_poll_io_service.cc\n  test_net_ts_impl_resolver.cc\n  test_net_ts_impl_socket.cc\n  test_net_ts_internet.cc\n  test_net_ts_io_context.cc\n  test_net_ts_io_context_socket.cc\n  test_net_ts_socket.cc\n  test_net_ts_timer.cc\n  test_net_ts_win32_named_pipe.cc\n)\n\nFOREACH(TEST ${TESTS})\n  ADD_GOOGLETEST_FILE(${TEST} MODULE ${TEST_MODULE}\n    LIB_DEPENDS harness_net_ts)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Main Debugging Component Target in Abseil\nDESCRIPTION: Creates the main debugging component library that clients should use, which aggregates key debugging functionality like stacktrace and leak checking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# component target\nabsl_cc_library(\n  NAME\n    debugging\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::stacktrace\n    absl::leak_check\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring function_ref Library in CMake\nDESCRIPTION: Defines the function_ref library target with its source files, headers, compilation options, and dependencies. This library is part of the Abseil C++ project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    function_ref\n  SRCS\n    \"internal/function_ref.h\"\n  HDRS\n    \"function_ref.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base_internal\n    absl::core_headers\n    absl::any_invocable\n    absl::meta\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Demangle Test in Abseil\nDESCRIPTION: Defines the test target for the symbol demangling functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    demangle_test\n  SRCS\n    \"internal/demangle_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::demangle_internal\n    absl::stack_consumption\n    absl::config\n    absl::core_headers\n    absl::log\n    absl::memory\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Libfuzzer Tests in CMake\nDESCRIPTION: This snippet conditionally adds libfuzzer tests if `LIBFUZZER_COMPILE_FLAGS` is enabled. It iterates through a list of commands, creates an executable for each using `MYSQL_ADD_EXECUTABLE`, and adds a libfuzzer test using `LIBFUZZER_ADD_TEST`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(LIBFUZZER_COMPILE_FLAGS)\n  FOREACH(CMD client_greeting\n      quit\n      init_schema\n      query\n      list_fields\n      # create_db\n      # drop_db\n      reload\n      # shutdown\n      statistics\n      # processinfo\n      # connect\n      # debug\n      ping\n      # time\n      # delayedinsert\n      change_user\n      binlog_dump\n      # table_dump\n      # connect_out\n      register_replica\n      stmt_prepare\n      stmt_execute\n      stmt_param_append_data\n      stmt_close\n      stmt_reset\n      set_option\n      stmt_fetch\n      # daemon\n      binlog_dump_gtid\n      reset_connection\n      clone\n\n      binary_datetime\n      binary_time\n      )\n    MYSQL_ADD_EXECUTABLE(routertest_fuzz_mysql_protocol_${CMD}\n      fuzz_${CMD}.cc\n      COMPONENT Router\n      LINK_LIBRARIES mysql_protocol\n      SKIP_INSTALL\n      )\n    LIBFUZZER_ADD_TEST(routertest_fuzz_mysql_protocol_${CMD}\n      INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus/${CMD})\n  ENDFOREACH()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: MyISAM Lock and Mutex Interactions\nDESCRIPTION: Documents lock and mutex relationships in the MyISAM storage engine, including interactions with system-level synchronization mechanisms\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/myisam/MYISAM_SHARE::intern_lock\" TO \"mutex/mysys/KEY_CACHE::cache_lock\"\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Helper Sources in CMake\nDESCRIPTION: Sets up the compilation of C++ helper source files for the Crund benchmark suite, including stopwatch and utility implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET (C_HELPER_SOURCES\n     helpers/src/hrt_stopwatch.cpp\n     helpers/src/hrt_gstopwatch.cpp\n     helpers/src/hrt_utils.cpp\n     )\n\nADD_CONVENIENCE_LIBRARY(crund_helpers ${C_HELPER_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Random Library Components in CMake\nDESCRIPTION: This snippet defines multiple internal-only targets for the Abseil Random library using the absl_cc_library macro. It includes implementations for various random number generators, distribution utilities, and other supporting components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_pool_urbg\n  SRCS\n    \"internal/pool_urbg.cc\"\n  HDRS\n    \"internal/pool_urbg.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::endian\n    absl::random_internal_randen\n    absl::random_internal_seed_material\n    absl::random_internal_traits\n    absl::random_seed_gen_exception\n    absl::raw_logging_internal\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executables\nDESCRIPTION: This snippet iterates through the list of test files found earlier (`TESTS`). For each test file, it extracts the test name, creates an executable with `add_executable`, links it against CMocka and cbor libraries, conditionally links the math library, and adds include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nforeach (TEST ${TESTS})\n    string(REGEX REPLACE \".*/([^/]+).c\" \"\\\\1\" NAME ${TEST})\n    message(\"Adding test ${NAME}\")\n    add_executable(${NAME} \"${NAME}.c\" assertions.c stream_expectations.c test_allocator.c)\n    target_link_libraries(${NAME} ${CMOCKA_LIBRARIES})\n    target_link_libraries(${NAME} cbor)\n    if(MATH_LIBRARY)\n        target_link_libraries(${NAME} ${MATH_LIBRARY})\n    endif()\n    target_include_directories(${NAME} PUBLIC ${CMOCKA_INCLUDE_DIR})\n    # See https://stackoverflow.com/a/10824578/499521\n    ADD_TEST(ctest_build_test_${NAME}\n            \"${CMAKE_COMMAND}\" --build ${CMAKE_BINARY_DIR} --target ${NAME})\n    ADD_TEST(ctest_run_${NAME} ${NAME})\n    SET_TESTS_PROPERTIES(ctest_run_${NAME}\n            PROPERTIES DEPENDS ctest_build_test_${NAME})\n    add_dependencies(coverage ${NAME})\nendforeach (TEST)\n```\n\n----------------------------------------\n\nTITLE: INFO_SRC File Cleanup Target\nDESCRIPTION: Creates a custom target to remove INFO_SRC file from source directory when building in specific environments.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED ENV{PB2WORKDIR})\n  IF(EXISTS ${CMAKE_SOURCE_DIR}/Docs/INFO_SRC)\n    ADD_CUSTOM_TARGET(remove_INFO_SRC_from_bs\n      COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_SOURCE_DIR}/Docs/INFO_SRC\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet sets various CMake policies to specific behaviors. These policies control how CMake handles certain situations and ensure consistent behavior across different CMake versions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"CMAKE_POLICY(SET CMP0042 NEW)\nCMAKE_POLICY(SET CMP0046 NEW)\nCMAKE_POLICY(SET CMP0048 NEW)\nCMAKE_POLICY(SET CMP0054 NEW)\"\n```\n\n----------------------------------------\n\nTITLE: Defining log_flags Library\nDESCRIPTION: This snippet defines the `log_flags` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on several other absl libraries related to flags and logging configurations. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_flags\n  SRCS\n    \"flags.cc\"\n  HDRS\n    \"flags.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_globals\n    absl::log_severity\n    absl::log_internal_config\n    absl::log_internal_flags\n    absl::flags\n    absl::flags_marshalling\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Query Attributes Component with CMake\nDESCRIPTION: Defines the build configuration for the MySQL query_attributes component. The component is built as a module-only library and links against the library_mysys dependency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/query_attributes/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(query_attributes\n  query_attributes.cc\n  MODULE_ONLY\n  LINK_LIBRARIES library_mysys\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for String Service Testing\nDESCRIPTION: This snippet adds the 'test_string_service' component, containing implementation specific to testing string functionalities. It is categorized for module and test use.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_string_service\n  test_string_service.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Cleanup Library in CMake\nDESCRIPTION: Defines a public CMake target for the cleanup library. It specifies header files, compiler options, and dependencies including the internal cleanup library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/cleanup/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    cleanup\n  HDRS\n    \"cleanup.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::cleanup_internal\n    absl::config\n    absl::core_headers\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ATRT MySQL Test Run Script in CMake\nDESCRIPTION: Configures the installation of the ATRT MySQL test run script to the bin directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(PROGRAMS atrt-mysql-test-run\n  DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Disabling MSVC CPPCheck (CMake)\nDESCRIPTION: This calls `MSVC_CPPCHECK_DISABLE()` macro, presumably defined elsewhere, which disables the CPPCheck static analysis tool for MSVC builds. This can be necessary to avoid false positives or issues with the tool's integration with the MSVC compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"MSVC_CPPCHECK_DISABLE()\"\n```\n\n----------------------------------------\n\nTITLE: Setting FreeBSD-Specific Compilation Flags\nDESCRIPTION: Adds libunwind compiler flags to the stacktrace.cc file when compiling on FreeBSD.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(FREEBSD)\n  ADD_COMPILE_FLAGS(stacktrace.cc COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding gtid_set-t Executable\nDESCRIPTION: This command creates an executable named `gtid_set-t` from the source files specified in `SRC_FILES`, adds a test named `gtid_set`, links necessary libraries, and defines compiler definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(gtid_set-t ${SRC_FILES}\n  ADD_TEST gtid_set\n  LINK_LIBRARIES gunit_large server_unittest_library\n  COMPILE_DEFINITIONS \\\"${DISABLE_PSI_DEFINITIONS}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WiX Templates and MSI Build Scripts\nDESCRIPTION: Configuration of WiX template files and MSI creation scripts using CMake's configure_file command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/router/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_router_extra.wxs.in\n  ${CMAKE_CURRENT_BINARY_DIR}/mysql_router_extra.wxs\n  @ONLY)\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/create_msi.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/create_msi.cmake\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL Server Kernel in CMake\nDESCRIPTION: Sets up include directories for the MySQL Server kernel components using CMake's INCLUDE_DIRECTORIES command. This ensures the compiler can find necessary header files during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel/blocks\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel/error\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi)\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Server\nDESCRIPTION: Command to build the MySQL server daemon (mysqld) using make with parallel processing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -j8 mysqld\n```\n\n----------------------------------------\n\nTITLE: Conditional Return for Non-Server Builds\nDESCRIPTION: Skips further compilation if the WITHOUT_SERVER flag is set. This prevents building the management client when server components are not required in the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmclient/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITHOUT_SERVER)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Random Seed Sequences Test - C++\nDESCRIPTION: Defines a test specifically for the random seed sequences, including details on source files and necessary dependencies ensuring its testing functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_seed_sequences_test\n  SRCS\n    \"seed_sequences_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_seed_sequences\n    absl::random_internal_nonsecure_base\n    absl::random_random\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions (CMake)\nDESCRIPTION: This snippet adds compile definitions to the specified source files using `MY_ADD_COMPILE_DEFINITIONS`. The `MYSQL_DYNAMIC_PLUGIN` definition is added to both XCOM and GCS source files. This definition likely enables the creation of a dynamic plugin for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"MY_ADD_COMPILE_DEFINITIONS(\n  ${XCOM_SOURCES}\n  ${GCS_SOURCES}\n  COMPILE_DEFINITIONS MYSQL_DYNAMIC_PLUGIN)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data Directory Definitions in CMake\nDESCRIPTION: Adds definitions for SSL test data directory and CMAKE source directory paths used in tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/integration/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(-DSSL_TEST_DATA_DIR=\"${CMAKE_SOURCE_DIR}/mysql-test/std_data/\")\nADD_DEFINITIONS(-DCMAKE_SOURCE_DIR=\"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for NDB in CMake\nDESCRIPTION: Specifies include directories for the NDB storage engine using CMake's INCLUDE_DIRECTORIES command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel/error\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel/vm)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Component for Performance Schema Notification in CMake\nDESCRIPTION: This snippet adds a test component for performance schema notification to the MySQL server build. It specifies the source file and sets it as a module-only and test-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/perfschema/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_pfs_notification\n  test_pfs_notification.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_voidify Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_voidify target, which provides void-conversion utilities for the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_voidify\n  SRCS\n  HDRS\n    \"internal/voidify.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Low Level Hash Test Target in CMake\nDESCRIPTION: Configures a test target 'low_level_hash_test' for testing the low-level hash functionality. It depends on the low_level_hash library, strings, and Google Test for the test framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    low_level_hash_test\n  SRCS\n    \"internal/low_level_hash_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::low_level_hash\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Generated Files to STRINGS_SOURCES\nDESCRIPTION: This snippet appends the generated Japanese and Chinese UCA9 table files to the `STRINGS_SOURCES` variable. This ensures that these files are included when building the strings library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nLIST(APPEND STRINGS_SOURCES ${JA_HANS_DST_FILE} ${ZH_HANS_DST_FILE})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking Libraries in CMake\nDESCRIPTION: This snippet checks if the system name is 'SunOS' and conditionally links the 'socket' and 'nsl' libraries to the 'harness_net_ts' library. This is significant for ensuring that the library has access to the necessary networking functions when compiled on this specific operating system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/include/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n  TARGET_LINK_LIBRARIES(harness_net_ts INTERFACE socket;nsl)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Unit Tests Directory\nDESCRIPTION: This snippet conditionally adds the 'tests' directory to the CMake project if unit tests are enabled. This allows for separate compilation of test code based on the configuration set in the CMake options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Tests for Router Guidelines Parser\nDESCRIPTION: Conditional block that sets up fuzzing tests when libfuzzer is available, creating an executable target for fuzzing the routing guidelines parser with appropriate libraries and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LIBFUZZER_COMPILE_FLAGS)\n  MYSQL_ADD_EXECUTABLE(routertest_fuzz_routing_guidelines_parser\n    fuzz_parser.cc\n    $<TARGET_OBJECTS:routing_guidelines-fuzzed>\n    COMPONENT Router\n    LINK_LIBRARIES\n      harness-library  # string_format\n      router_utils     # routing_guidelines_version_from_string\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    SKIP_INSTALL\n    )\n  TARGET_INCLUDE_DIRECTORIES(routertest_fuzz_routing_guidelines_parser\n    PRIVATE $<TARGET_PROPERTY:routing_guidelines-objects,INCLUDE_DIRECTORIES>)\n\n  LIBFUZZER_ADD_TEST(routertest_fuzz_routing_guidelines_parser\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus_parser)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Cleaning the build with Maven\nDESCRIPTION: This command cleans the build by deleting compiled binaries while preserving the patched source code. This prepares the code for a new build without resetting the patches applied to the original GraalVM sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for Router Test Helpers\nDESCRIPTION: Links the router test helpers library with required dependencies including harness library, router utilities, MySQL client library, and mock server REST client.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(routertest_helpers\n  harness-library\n  router_utils\n  router_mysql\n  mock_server_rest_client\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Compiler Flags for MyISAM in CMake\nDESCRIPTION: This snippet adds a specific compiler flag for Visual Studio 2022 builds to disable optimizations for mi_delete.cc, addressing a potential compiler bug.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisam/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC AND MSVC_VERSION GREATER 1930)\n  ADD_COMPILE_FLAGS(\n    mi_delete.cc\n    COMPILE_FLAGS \"/Od\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Merged Keyring Common Tests with CMake\nDESCRIPTION: This CMake snippet defines an executable target for merged keyring component common tests. It specifies the source files, compile options, and libraries to link, including Google Test libraries and keyring component libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(merge_component_keyring_common_tests-t\n  ${ALL_KEYRING_COMPONENT_COMMON_TESTS}\n  ${COMPILE_OPTIONS_ARG}\n  ENABLE_EXPORTS\n  ADD_TEST merge_component_keyring_common_tests\n  LINK_LIBRARIES\n  ${KEYRING_COMPONENT_LIBS} ${GTEST_LIBRARIES} gtest_main\n  )\nDOWNGRADE_STRINGOP_WARNINGS(merge_component_keyring_common_tests-t)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Test Command: testBasic\nDESCRIPTION: This snippet defines a test command named `testBasic`. It specifies the arguments to be passed to the command and the maximum execution time allowed for the test. The `args` parameter sets up the test environment using `-n Fill T6`, and `max-time` sets the timeout to 10260 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--02-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasic\\nargs: -n Fill T6\\nmax-time: 10260\"\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Client Library in CMake\nDESCRIPTION: Configures the `http_client` shared library, which centralizes HTTP client functionalities. Key source files and required libraries are defined, ensuring integration with common aspects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nROUTER_ADD_SHARED_LIBRARY(http_client\n  rest_client.cc\n  http/client/client.cc\n  http/client/error_code.cc\n  http/client/request.cc\n\n  OUTPUT_NAME \"mysqlrouter_http_client\"\n\n  LINK_LIBRARIES\n  ${LIBRT}\n  http_common\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring dict_operation_lock Dependencies in X State\nDESCRIPTION: Defines allowed lock acquisitions when dict_operation_lock is held in exclusive (X) state, showing dependencies on various mutexes and locks\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_35\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"X\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"X\" TO \"mutex/innodb/autoinc_persisted_mutex\"\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"X\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Test File to Routing Guidelines Module\nDESCRIPTION: Adds the parser test file to the routing guidelines module with static library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST_FILE(test_parser.cc\n  MODULE routing_guidelines\n  LIB_DEPENDS routing_guidelines-static\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Traits Library - C++\nDESCRIPTION: Defines an internal-only library for managing traits used in random number generation, focusing on its header files and dependencies necessary for its compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_traits\n  HDRS\n    \"internal/traits.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n)\n```\n\n----------------------------------------\n\nTITLE: Building Static NDB Client Library in CMake\nDESCRIPTION: Creates the static ndbclient library by merging convenience libraries and setting up installation parameters. It also handles conditional installation based on whether NDB is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_NDB)\n  SET(SKIP_INSTALL_NDBCLIENT_STATIC SKIP_INSTALL)\nENDIF()\n\nMERGE_CONVENIENCE_LIBRARIES(ndbclient_static ${LIBS_TO_MERGE}\n  ${SKIP_INSTALL_NDBCLIENT_STATIC}\n  COMPONENT Development\n  LINK_LIBRARIES OpenSSL::SSL OpenSSL::Crypto ${LIBS_TO_LINK}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Java Classpath for Build\nDESCRIPTION: Configures the Java classpath including binary directories for classes, clusterj-api, and ndbjtie components\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/java/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CLASSPATH\n    ${CMAKE_CURRENT_BINARY_DIR}/target/classes\n    ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-api/target/classes\n    ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/target/classes\n   )\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Spy Hash State Internal Library in CMake\nDESCRIPTION: Creates an internal-only library 'spy_hash_state' that's used for testing hash implementations. This target is marked public since it's a dependency of hash_testing but external code should not depend on it directly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    spy_hash_state\n  HDRS\n    \"internal/spy_hash_state.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::hash\n    absl::strings\n    absl::str_format\n  TESTONLY\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags for GNU/Clang (CMake)\nDESCRIPTION: This snippet conditionally adds compiler flags when using GNU or Clang compilers. It disables various warnings related to unused functions, incompatible pointer types, unused typedefs/parameters/variables.  It also handles a specific case for Solaris with GNU compiler to suppress `-Wno-builtin-declaration-mismatch` for rpcgen generated sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"ELSEIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_FLAGS(\n    src/bindings/xcom/xcom/xcom_base.cc\n    src/bindings/xcom/xcom/sock_probe.cc\n    COMPILE_FLAGS\n    \"-Wno-unused-function\")\n  ADD_COMPILE_FLAGS(${XCOM_SUNRPC_SOURCES} ${XCOM_RPCGEN_SOURCES}\n    COMPILE_FLAGS\n    -Wno-incompatible-pointer-types\n    -Wno-unused-function\n    -Wno-unused-local-typedefs\n    -Wno-unused-parameter\n    -Wno-unused-variable\n    )\n  IF(SOLARIS AND MY_COMPILER_IS_GNU)\n    # rpcgen generates 'void bzero();'\n    ADD_COMPILE_FLAGS(${XCOM_RPCGEN_SOURCES}\n      COMPILE_FLAGS\n      \"-Wno-builtin-declaration-mismatch\"\n      )\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Generate HTML from MAN Sources CMake\nDESCRIPTION: This snippet defines a custom command to generate HTML files from man page source files using mandoc. It iterates through the MAN_SOURCES list, creating a custom command for each file to generate an HTML file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# man_html\nforeach(f ${MAN_SOURCES})\n\tstring(REGEX REPLACE \"\\\\.[13]$\" \"\" g ${f})\n\tadd_custom_command(OUTPUT ${g}.html\n\t\tCOMMAND mandoc -T html -O man=\"%N.html\",style=style.css -I os=\"Yubico AB\" ${f} > ${g}.html\n\t\tDEPENDS ${f})\n\tlist(APPEND HTML_FILES ${g}.html)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Library: thread_pool\nDESCRIPTION: This snippet defines an internal Abseil C++ library for thread pools, named `thread_pool`. It specifies the header file, compiler options `${ABSL_DEFAULT_COPTS}`, and dependencies on `absl::any_invocable`, `absl::core_headers`, and `absl::synchronization`. It's marked as `TESTONLY`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    thread_pool\n  HDRS\n    \\\"internal/thread_pool.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::any_invocable\n    absl::core_headers\n    absl::synchronization\n  TESTONLY\n)\"\n```\n\n----------------------------------------\n\nTITLE: Message Field Format Definition\nDESCRIPTION: Defines the basic structure of a message field containing version number and message format.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<message_field> ::= <serialization_version_number> <message_format>\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Debug Source Files for Heap Engine\nDESCRIPTION: Conditionally adds the debug source file '_check.cc' to the Heap engine sources when building in debug mode. This ensures debug functionality is only included when necessary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT BUILD_IS_SINGLE_CONFIG OR CMAKE_BUILD_TYPE_UPPER STREQUAL \"DEBUG\")\n  LIST(APPEND HEAP_SOURCES _check.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Convenience Library for Strings\nDESCRIPTION: This snippet adds a convenience library named `strings`. It includes the source files defined in `STRINGS_SOURCES`, applies the compile options defined in `STRINGS_COMPILE_OPTIONS`, and specifies dependencies on the `strings_ja_hans` and `strings_zh_hans` targets. A convenience library is a static library created for grouping object files, but does not link them into a final library or executable at this stage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(strings ${STRINGS_SOURCES}\n  ${STRINGS_COMPILE_OPTIONS}\n  DEPENDENCIES strings_ja_hans strings_zh_hans\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router Utils Test in CMake\nDESCRIPTION: Configures a test file specifically for testing MySQL Router utility functions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_mysqlrouter_utils.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_utils\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Dictionary Test Configuration\nDESCRIPTION: Configuration for dictionary-related test cases including table creation, modification, and attribute management tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 1500\ncmd: testDict\nargs: -n CreateAndDrop\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific Source Files\nDESCRIPTION: Adds Windows-specific source files to the mysys library when building on Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WIN32)\n  LIST(APPEND MYSYS_SOURCES\n    my_conio.cc\n    my_windac.cc\n    my_winerr.cc\n    my_winfile.cc\n    win_timers.cc\n    my_nojemalloc.cc\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Log of Protobuf Messages\nDESCRIPTION: This snippet adds a preprocessor definition to enable text logging of protobuf messages if the `XPLUGIN_LOG_PROTOBUF` option is enabled.  It also prints a status message indicating that the feature is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(XPLUGIN_LOG_PROTOBUF)\n  MESSAGE(STATUS \\\"MYSQLX - Text log of protobuf messages enabled\\\")\n  ADD_DEFINITIONS(-DXPLUGIN_LOG_PROTOBUF)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Binary Distribution Script for Unix Platforms\nDESCRIPTION: Creates a shell script to generate binary distribution packages using CPack. This script is only created on Unix-like platforms and is made executable for direct use.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/make_binary_distribution\n    \"cd ${CMAKE_BINARY_DIR} && '${CMAKE_CPACK_COMMAND}' -G TGZ --config CPackConfig.cmake\\n\" )\n  EXECUTE_PROCESS(\n    COMMAND chmod +x ${CMAKE_CURRENT_BINARY_DIR}/make_binary_distribution\n)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for NDB Management Server in CMake\nDESCRIPTION: Iterates through a list of compiler warnings and adds them to the C++ compilation flags if the compiler supports them. This ensures code quality by enabling warnings for unused parameters and variables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(warning\n    \"unused-but-set-variable\"\n    \"unused-parameter\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Error Handling Executables\nDESCRIPTION: Configures the build for error message compilation tools comp_err and comp_client_err, which generate error message headers and localization files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/utilities/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT CMAKE_CROSSCOMPILING)\n  MYSQL_ADD_EXECUTABLE(comp_err\n    comp_err.cc\n    COMPONENT Test\n    LINK_LIBRARIES mysys\n    )\nENDIF()\n\nMYSQL_ADD_EXECUTABLE(comp_client_err\n  comp_client_err.cc\n  ${CMAKE_SOURCE_DIR}/libmysql/errmsg.cc\n  LINK_LIBRARIES mysys\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring flat_hash_map_test in CMake for Abseil\nDESCRIPTION: Defines the 'flat_hash_map_test' target for testing the flat hash map implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    flat_hash_map_test\n  SRCS\n    \"flat_hash_map_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::any\n    absl::check\n    absl::flat_hash_map\n    absl::hash_generator_testing\n    absl::unordered_map_constructor_test\n    absl::unordered_map_lookup_test\n    absl::unordered_map_members_test\n    absl::unordered_map_modifiers_test\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Test for MySQL Router URI ToString Functionality in CMake\nDESCRIPTION: Sets up a fuzzing test executable to test the URI to string conversion functionality in MySQL Router. Similar to the first test, it includes necessary source files and is conditional on LIBFUZZER_COMPILE_FLAGS being defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/fuzzers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(routertest_fuzz_router_uri_tostring\n  fuzz_router_uri_tostring.cc\n  ${PROJECT_SOURCE_DIR}/src/router/src/uri.cc\n  ${PROJECT_SOURCE_DIR}/src/router/src/utils.cc\n\n  COMPONENT Router\n\n  LINK_LIBRARIES\n  harness-library\n\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  SKIP_INSTALL\n  )\nTARGET_INCLUDE_DIRECTORIES(routertest_fuzz_router_uri_tostring\n  PRIVATE\n  $<TARGET_PROPERTY:router_utils,INCLUDE_DIRECTORIES>\n  )\nLIBFUZZER_ADD_TEST(routertest_fuzz_router_uri_tostring\n  INITIAL_CORPUS_DIR\n  ${CMAKE_CURRENT_SOURCE_DIR}/corpus/fuzz_router_uri_tostring\n  )\n```\n\n----------------------------------------\n\nTITLE: Create Subscription ID Protocol Flow\nDESCRIPTION: Protocol sequence for creating a subscription ID between USER and SUMA components, involving UTIL for sequence generation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/suma/Suma.txt#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\nUSER                      SUMA                    UTIL\n========================================================\nCREATE_SUBID_REQ\n------------------------>\n                          UTIL_SEQUENCE\n                          ---------------------->\n                          <----------------------\nCREATE_SUBID_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Conditional Addition of Test Directory in CMake\nDESCRIPTION: This snippet conditionally adds the 'tests/' directory to the CMake build if unit testing is enabled through the 'WITH_UNIT_TESTS' variable. This allows for testing integration within the project build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/plugin_info/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests/)\nENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil StatusOr Test in CMake\nDESCRIPTION: This snippet defines the test configuration for the 'statusor' library. It specifies the test source file, compiler options, and dependencies including the 'status' and 'statusor' libraries, and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/status/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    statusor_test\n  SRCS\n   \"statusor_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::status\n    absl::statusor\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Building xxHash Static Library in CMake for MySQL Server\nDESCRIPTION: Adds a static library for xxHash, compiling the main source file with specific compile definitions. It includes a commented-out line for x86 dispatch, which is not supported on ARM architectures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/xxhash/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_STATIC_LIBRARY(xxhash_lib\n  ${BUNDLED_XXHASH_PATH}/xxhash.c\n# ${BUNDLED_XXHASH_PATH}/xxh_x86dispatch.c\n  COMPILE_DEFINITIONS PRIVATE XXH_NAMESPACE=MY_\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Example Math Wrapping\nDESCRIPTION: This snippet defines a MySQL component termed 'example_component3', which includes files related to example math wrapping functionality. It also follows the module and test only restrictions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(example_component3\n  example_component3.cc\n  example_math_wrapping_imp.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Marshalling Library in CMake\nDESCRIPTION: Creates a CMake target for the flags marshalling library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_marshalling\n  SRCS\n    \"marshalling.cc\"\n  HDRS\n    \"marshalling.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_severity\n    absl::int128\n    absl::optional\n    absl::strings\n    absl::str_format\n)\n```\n\n----------------------------------------\n\nTITLE: Calculate MAN_ALIAS_MAX CMake\nDESCRIPTION: This snippet calculates the maximum index for MAN_ALIAS based on its length, subtracting 2. This value is used for looping through MAN_ALIAS to create symlinks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(LENGTH MAN_ALIAS MAN_ALIAS_LEN)\nmath(EXPR MAN_ALIAS_MAX \"${MAN_ALIAS_LEN} - 2\")\n```\n\n----------------------------------------\n\nTITLE: Defining Random Uniform Int Distribution Test - C++\nDESCRIPTION: Defines a test for the uniform integer distribution, ensuring correct behavior through validation against specified source files and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_uniform_int_distribution_test\n  SRCS\n    \"uniform_int_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Hash Testing Library Target in CMake\nDESCRIPTION: Defines a test-only library 'hash_testing' that provides testing utilities for hash implementations. It depends on components like spy_hash_state, meta, strings, variant, and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash_testing\n  HDRS\n    \"hash_testing.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::spy_hash_state\n    absl::meta\n    absl::strings\n    absl::variant\n    GTest::gmock\n  TESTONLY\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Importing libcbor in Bazel WORKSPACE\nDESCRIPTION: This snippet shows how to import the libcbor library into a Bazel project using the `http_archive` rule in the `WORKSPACE` file. It specifies the name, build file location, SHA256 hash, strip prefix, and URL for the libcbor archive.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/Bazel.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\n# libcbor\nhttp_archive(\n    name = \"libcbor\",\n    build_file = \"//third_party:libcbor.BUILD\",\n    sha256 = \"dd04ea1a7df484217058d389e027e7a0143a4f245aa18a9f89a5dd3e1a4fcc9a\",\n    strip_prefix = \"libcbor-0.8.0\",\n    urls = [\"https://github.com/PJK/libcbor/archive/refs/tags/v0.8.0.zip\"],\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Internal FIDO Usage\nDESCRIPTION: Adds a preprocessor definition for internal FIDO library use. This definition is used during compilation to enable or disable certain features or code paths within the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_definitions(-D_FIDO_INTERNAL)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Bits Library Target\nDESCRIPTION: CMake configuration for the bits library component of Abseil. Defines header files and dependencies for bit manipulation functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    bits\n  HDRS\n    \"bits.h\"\n    \"internal/bits.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: ByteBuffer and Pointer Mappings in NdbDictionary\nDESCRIPTION: Issue related to ByteBuffer usage for C++ pointer return values in the NdbDictionary Java class. This method needs to map C++ char* return values to appropriate Java types.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: static public final native char * getValuePtr(NdbRecordConst/*_const NdbRecord *_*/ record, char * row, int/*_Uint32_*/ attrId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Test Files\nDESCRIPTION: Sets up component test files with their dependencies and include directories. Includes configuration for routing, metadata, bootstrap, and other core functionality tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test_file(${CMAKE_CURRENT_SOURCE_DIR}/${test_file}\n  MODULE \"component\"\n  INCLUDE_DIRS\n    ${PROJECT_SOURCE_DIR}/src/mock_server/include/mysqlrouter/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n                      ${PROTOBUF_INCLUDE_DIR}\n  LIB_DEPENDS\n  http_client\n  http_common\n  mock_server_rest_client\n  mysql_protocol\n  router_mysqlxclient\n  router_mysqlxmessages\n  router_cluster\n\n  DEPENDS\n  http_auth_backend\n  http_auth_realm\n  http_server\n  master_key_test_writer\n  metadata_cache\n  mock_server\n  mysql_server_mock\n  mysqlrouter_passwd\n  mysqlrouter\n  rest_api\n  rest_metadata_cache\n  rest_router\n  rest_routing\n  routing\n  routertestplugin_logger\n  signal_me\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Mutex Lock Dependencies\nDESCRIPTION: Graph definition showing mutex lock dependencies in MySQL server, particularly the relationships between Relay_log_info::run_lock and other system mutexes. The ARCs define directed relationships between different mutex locks with their operations (R for read, W for write, S for shared, X for exclusive).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"mutex/sql/Relay_log_info::run_lock\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/sql/Relay_log_info::run_lock\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/sql/Relay_log_info::run_lock\" TO \"mutex/innodb/trx_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Adding net_ts_forward Executable\nDESCRIPTION: This snippet adds an executable named `net_ts_forward`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(net_ts_forward net_ts_forward.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES harness_net_ts\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Adding Google Test Files in CMake\nDESCRIPTION: This snippet iterates through a list of C++ source files and adds each one as a Google Test using the `ADD_GOOGLETEST_FILE` macro. It specifies the module name, include directories, and library dependencies for each test file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"FOREACH(test_file\n    test_classic_protocol_binary.cc\n    test_classic_protocol_frame.cc\n    test_classic_protocol_message.cc\n    test_classic_protocol_session_track.cc\n    test_classic_protocol_wire.cc\n    test_classic_protocol.cc\n  )\n  ADD_GOOGLETEST_FILE(${test_file}\n    MODULE ${TEST_MODULE}\n    SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n    INCLUDE_DIRS ../include/\n    LIB_DEPENDS harness_stdx)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_check_op Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_check_op target, which provides check operation functionality for the Abseil logging library. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_check_op\n  SRCS\n    \"internal/check_op.cc\"\n  HDRS\n    \"internal/check_op.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_internal_nullguard\n    absl::log_internal_nullstream\n    absl::log_internal_strip\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Keyring Migration Executable Target\nDESCRIPTION: Defines the build target for the mysql_migrate_keyring executable using MYSQL_ADD_EXECUTABLE command, specifying source files and linking with required libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/migrate_keyring/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mysql_migrate_keyring\n  ${MIGRATE_KEYRING_SOURCE}\n  LINK_LIBRARIES ${MIGRATE_KEYRING_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Int128 Library Target\nDESCRIPTION: CMake configuration for the 128-bit integer library. Includes both header and source files with conditional implementation includes for intrinsic support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    int128\n  HDRS\n    \"int128.h\"\n  SRCS\n    \"int128.cc\"\n    \"int128_have_intrinsic.inc\"\n    \"int128_no_intrinsic.inc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::bits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Installing Abseil with Traditional CMake\nDESCRIPTION: Commands for running Abseil tests and installing the library using CMake. These follow the configuration and build steps in the traditional setup.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nctest --test-dir /temporary/build/abseil-cpp\ncmake --build /temporary/build/abseil-cpp --target install\n```\n\n----------------------------------------\n\nTITLE: Copy MAN Sources CMake\nDESCRIPTION: This snippet defines a custom command to copy man page source files from the project source directory to the build directory. It iterates through the MAN_SOURCES list, creating a custom command for each file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# man_copy\nforeach(f ${MAN_SOURCES})\n\tadd_custom_command(OUTPUT ${f}\n\t\tCOMMAND cp -f ${PROJECT_SOURCE_DIR}/man/${f} .\n\t\tDEPENDS ${f})\n\tlist(APPEND COPY_FILES ${f})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Including Internal Router CMake File\nDESCRIPTION: If WITH_INTERNAL is enabled, includes the router.cmake file located in the internal/cmake directory. This file likely contains additional configuration specific to internal builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WITH_INTERNAL)\n  INCLUDE(${CMAKE_SOURCE_DIR}/internal/cmake/router.cmake)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Named Backreferences Parsing - Regex\nDESCRIPTION: Manages parsing of named backreferences in regex like '\\k<name>', handling errors in case of incorrect formats or characters within the name.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\nnamed-backref:\n    '<'                  n  named-backref-2                         doBeginNamedBackRef\n    default                 errorDeath                              doBadNamedCapture\n\nnamed-backref-2:\n    ascii_letter         n  named-backref-3                         doContinueNamedBackRef\n    default                 errorDeath                              doBadNamedCapture\n\nnamed-backref-3:\n    ascii_letter         n  named-backref-3                         doContinueNamedBackRef\n    digit_char           n  named-backref-3                         doContinueNamedBackRef\n    '>'                  n  expr-quant                              doCompleteNamedBackRef\n    default                 errorDeath                              doBadNamedCapture\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Streams Library Source Files\nDESCRIPTION: Defines the core source files for the Change Streams library, including binary readers and state management components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CS_LIB_SOURCES\n  ${CS_BASE_SRC_DIR}/lib/mysql/cs/reader/binary/mysqlproto.cpp\n  ${CS_BASE_SRC_DIR}/lib/mysql/cs/reader/binary/tracker.cpp\n  ${CS_BASE_SRC_DIR}/lib/mysql/cs/reader/state.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Random Seed Sequences Library - C++\nDESCRIPTION: Defines a library for seed sequences used in random number generation. It includes necessary source files, headers, and dependencies required for its functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_seed_sequences\n  SRCS\n    \"seed_sequences.cc\"\n  HDRS\n    \"seed_sequences.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::inlined_vector\n    absl::random_internal_pool_urbg\n    absl::random_internal_salted_seed_seq\n    absl::random_internal_seed_material\n    absl::random_seed_gen_exception\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NDB Management API in CMake\nDESCRIPTION: Sets up the include directory for the NDB Management API source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/mgmcommon/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Flags for NDB\nDESCRIPTION: Defines a set of debug flags for NDB and adds them to the compiler flags for debug builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET(DEBUG_FLAGS\n  -DACC_SAFE_QUEUE\n  -DAPI_TRACE\n  -DARRAY_GUARD\n  -DERROR_INSERT\n  -DNDB_DEBUG\n  -DVM_TRACE\n  )\nSET(DEBUG_FLAGS_STRING \"\")\nFOREACH(flag ${DEBUG_FLAGS})\n  STRING_APPEND(DEBUG_FLAGS_STRING \" ${flag}\")\nENDFOREACH()\n\nSTRING_APPEND(CMAKE_C_FLAGS_DEBUG \"${DEBUG_FLAGS_STRING}\")\nSTRING_APPEND(CMAKE_CXX_FLAGS_DEBUG \"${DEBUG_FLAGS_STRING}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring System Library Dependencies for NDB Client on Non-Windows Platforms\nDESCRIPTION: For non-Windows platforms, this snippet identifies and links against required system libraries for the shared NDB client library. It handles platform-specific linking flags and symbol versioning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WIN32)\n  SET(NDBCLIENT_SYSTEM_LIBS)\n  FOREACH(lib ${NDBCLIENT_SO_LIBS})\n    LIST(FIND KNOWN_CONVENIENCE_LIBRARIES ${lib} FOUNDIT)\n    IF(FOUNDIT LESS 0)\n      MESSAGE(STATUS \"Known libs : ${KNOWN_CONVENIENCE_LIBRARIES}\")\n      MESSAGE(FATAL_ERROR \"Unknown static library ${lib} FOUNDIT ${FOUNDIT}\")\n    ENDIF()\n    GET_DEPENDEND_OS_LIBS(${lib} LIB_OSLIBS)\n    IF(LIB_OSLIBS)\n      LIST(APPEND NDBCLIENT_SYSTEM_LIBS ${LIB_OSLIBS})\n    ENDIF()\n  ENDFOREACH()\n\n  IF(NDBCLIENT_SYSTEM_LIBS)\n    LIST(REMOVE_DUPLICATES NDBCLIENT_SYSTEM_LIBS)\n    MESSAGE(STATUS \"System libs used by ndbclient_so: ${NDBCLIENT_SYSTEM_LIBS}\")\n    TARGET_LINK_LIBRARIES(ndbclient_so INTERFACE\n      ${NDBCLIENT_SYSTEM_LIBS})\n  ENDIF()\n\n  # Prepend any special linker flags(like -m64) for shared library\n  GET_TARGET_PROPERTY(ndbclient_so_link_flags ndbclient_so LINK_FLAGS)\n  IF(NOT ndbclient_so_link_flags)\n    # Avoid LINK_FLAGS-NOTFOUND\n    SET(ndbclient_so_link_flags)\n  ENDIF()\n  SET(ndbclient_so_link_flags\n    \"${CMAKE_SHARED_LIBRARY_C_FLAGS} ${ndbclient_so_link_flags}\")\n  IF(LINK_FLAG_NO_UNDEFINED)\n    STRING_APPEND(ndbclient_so_link_flags \" ${LINK_FLAG_NO_UNDEFINED}\")\n    IF(LINUX)\n      STRING_APPEND(ndbclient_so_link_flags\n        \" -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/libndbclient.ver\")\n    ENDIF()\n  ENDIF()\n  IF(SOLARIS)\n    STRING_APPEND(ndbclient_so_link_flags \" ${CMAKE_CXX_LINK_FLAGS}\")\n  ENDIF()\n  SET_TARGET_PROPERTIES(ndbclient_so\n    PROPERTIES LINK_FLAGS \"${ndbclient_so_link_flags}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Macros in CMake\nDESCRIPTION: Defines utility macros for appending and prepending strings to variables, providing flexible string manipulation capabilities during build configuration\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(STRING_APPEND STRING_VAR INPUT)\n  SET(${STRING_VAR} \"${${STRING_VAR}}${INPUT}\")\nENDMACRO()\n\nMACRO(STRING_PREPEND STRING_VAR INPUT)\n  SET(${STRING_VAR} \"${INPUT}${${STRING_VAR}}\")\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Configuring PFS Example Component Build in MySQL\nDESCRIPTION: CMake configuration to build a performance schema example component. The component is marked as module-only and test-only, indicating it's not part of the main server build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/pfs_example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(pfs_example\n  pfs_example.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Scan Operation Implementation Details\nDESCRIPTION: Details the implementation aspects of scan operations including NdbReceiver usage, batch handling, and signal processing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/ScanOperation.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1) Scan uses one NdbReceiver per \"parallelism\"\n2) Each NdbReceiver can handle up to \"batch size\" rows\n3) API send one \"pointer\" per parallelism (prev. was one per row)\n4) API handles each receiver independently.\n   It can \"nextResult\"-one, receive one and close-one\n5) When a recevier has been \"nextResult\"-ed, the API can fetch from it again\n6) After doing \"openScan\"-req, no wait is performed\n   (only possible to block on nextResult(true) or closeScan)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Project Directory Structure with CMake\nDESCRIPTION: This CMake snippet configures the directory structure by adding the source directory and conditionally adding the tests directory if unit tests are enabled. It uses the WITH_UNIT_TESTS variable to determine whether to include the tests directory in the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Set Test Variables in CMake\nDESCRIPTION: This snippet sets a variable `TESTS` containing a list of test names. This variable is later used to iterate through the tests and configure them.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS registry dynamic_loader)\n```\n\n----------------------------------------\n\nTITLE: testReadPerf Command\nDESCRIPTION: Benchmark command for testing read performance with 25 iterations on table T1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntestReadPerf -i 25 -c 0 -d 0 T1\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Source Files List for MySQL Server Library Component in CMake\nDESCRIPTION: Creates an empty list of source files for a MySQL Server library component, indicating this component may be header-only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/utils/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TARGET_SRCS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connection Pool Plugin Build in CMake\nDESCRIPTION: Configures the build settings for the REST Connection Pool plugin. Specifies source files, required dependencies, and installation destination. Sets up export header generation and include directories for the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_connection_pool/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nADD_HARNESS_PLUGIN(rest_connection_pool\n  SOURCES\n  rest_connection_pool_config.cc\n  rest_connection_pool_plugin.cc\n  rest_connection_pool_status.cc\n  rest_connection_pool_list.cc\n  REQUIRES\n  connection_pool\n  http_server_lib\n  rest_api\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\")\n\nGENERATE_EXPORT_HEADER(rest_connection_pool\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/rest_connection_pool_export.h)\n\nTARGET_INCLUDE_DIRECTORIES(rest_connection_pool\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding daemon_example Plugin in MySQL Server with CMake\nDESCRIPTION: This CMake command adds the daemon_example plugin to MySQL Server. It specifies the source file, sets it as a module-only plugin, defines the output name, and marks it for testing only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/daemon_example/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(daemon_example\n  daemon_example.cc\n  MODULE_ONLY\n  MODULE_OUTPUT_NAME \"libdaemon_example\"\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Building zlib Convenience Library in CMake\nDESCRIPTION: Creates a convenience library target for zlib using the defined source files and headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(zlib\n  ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})\n```\n\n----------------------------------------\n\nTITLE: Adding MYISAMMRG Plugin to MySQL Build\nDESCRIPTION: Configures the MYISAMMRG plugin as a mandatory storage engine and links it with the rapidjson library dependency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisammrg/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_PLUGIN(myisammrg ${MYISAMMRG_SOURCES}\n  STORAGE_ENGINE MANDATORY\n  LINK_LIBRARIES extra::rapidjson)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: graphcycles_test\nDESCRIPTION: This snippet defines an Abseil C++ test for the `graphcycles_internal` library, named `graphcycles_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::check`, `absl::core_headers`, `absl::graphcycles_internal`, `absl::log`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    graphcycles_test\n  SRCS\n    \\\"internal/graphcycles_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::check\n    absl::core_headers\n    absl::graphcycles_internal\n    absl::log\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting NDB Connection String Environment Variable\nDESCRIPTION: Shell command to configure the NDB connection string for cluster connectivity.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/ndbapi_scan/readme.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport NDB_CONNECTSTRING=hostname:port\n```\n\n----------------------------------------\n\nTITLE: Building C Library with make\nDESCRIPTION: Compiles the libcno library for use in C applications. The make command generates the necessary binary file for integrating with C applications. Requires make to be installed on the system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake obj/libcno.a\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Redo Log Reader Executable Build in CMake\nDESCRIPTION: Defines the build configuration for the ndb_redo_log_reader executable. It specifies the source files, sets it as part of the ClusterTools component, enables exports, and links against several NDB-related libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dblqh/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_redo_log_reader\n  redoLogReader/records.cpp\n  redoLogReader/reader.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ndbmgmapi\n  ndbgeneral\n  ndblogger\n  ndbportlib\n  ndbtrace\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining a system restart with extended time limits\nDESCRIPTION: Configures 'testSystemRestart' for scenario 'SR_DD_1' with table 'D1' and allows a longer maximum execution time of 3780 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_1 D1\nmax-time: 3780\n```\n\n----------------------------------------\n\nTITLE: Installing Private Library Conditionally\nDESCRIPTION: Conditionally installs the 'fido2' library as a private library if either WITH_AUTHENTICATION_WEBAUTHN or WITH_AUTHENTICATION_CLIENT_PLUGINS is enabled.  INSTALL_PRIVATE_LIBRARY is assumed to be a custom macro.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WITH_AUTHENTICATION_WEBAUTHN OR WITH_AUTHENTICATION_CLIENT_PLUGINS)\n  INSTALL_PRIVATE_LIBRARY(fido2)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Disable Missing Profile Warning in CMake\nDESCRIPTION: This snippet disables warnings related to missing profile information during the build process. This is often used to suppress non-critical warnings that might clutter the build output.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Building the tcmalloc Library - CMake\nDESCRIPTION: This snippet details the build process for the tcmalloc library and its components. It sets various sources, defines, and links necessary for both internal and shared versions of the library, and includes conditional checks for building heap checkers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(libtcmalloc_internal_la_SOURCES ${libtcmalloc_minimal_internal_la_SOURCES}\n          ${TCMALLOC_INCLUDES}\n          src/base/low_level_alloc.cc\n          src/mmap_hook.cc\n          src/heap-profile-table.cc\n          src/heap-profiler.cc\n          src/raw_printer.cc\n          ${EMERGENCY_MALLOC_CC}\n          src/memory_region_map.cc)\n  set(libtcmalloc_internal_la_DEFINE NDEBUG ${EMERGENCY_MALLOC_DEFINE})\n  set(libtcmalloc_internal_la_LIBADD stacktrace Threads::Threads)\n\n  set(libtcmalloc_la_SOURCES ${TCMALLOC_CC} ${TCMALLOC_INCLUDES})\n  set(libtcmalloc_la_DEFINE NDEBUG ${EMERGENCY_MALLOC_DEFINE})\n  set(libtcmalloc_la_LIBADD tcmalloc_internal Threads::Threads)\n  if(GPERFTOOLS_BUILD_HEAP_CHECKER)\n    # heap-checker-bcad is last, in hopes its global ctor will run first.\n    # (Note this is added to libtcmalloc.la, not libtcmalloc_internal.la,\n    # but that's ok; the internal/external distinction is only useful for\n    # cygwin, and cygwin doesn't use HEAP_CHECKER anyway.)\n    set(HEAP_CHECKER_SOURCES src/base/linuxthreads.cc\n            src/heap-checker.cc\n            src/heap-checker-bcad.cc)\n    list(APPEND libtcmalloc_la_SOURCES ${HEAP_CHECKER_SOURCES})\n  else()\n    list(APPEND libtcmalloc_internal_la_DEFINE NO_HEAP_CHECK)\n    list(APPEND libtcmalloc_la_DEFINE NO_HEAP_CHECK)\n  endif()\n\n  add_library(tcmalloc_internal_object OBJECT ${libtcmalloc_internal_la_SOURCES})\n  target_compile_definitions(tcmalloc_internal_object PRIVATE ${libtcmalloc_internal_la_DEFINE})\n  add_library(tcmalloc_internal INTERFACE)\n  target_sources(tcmalloc_internal INTERFACE $<TARGET_OBJECTS:tcmalloc_internal_object>)\n  target_link_libraries(tcmalloc_internal INTERFACE ${libtcmalloc_internal_la_LIBADD})\n\n  add_library(tcmalloc SHARED ${libtcmalloc_la_SOURCES})\n  target_compile_definitions(tcmalloc PRIVATE ${libtcmalloc_la_DEFINE})\n  target_link_libraries(tcmalloc ${libtcmalloc_la_LIBADD})\n  set_target_properties(tcmalloc PROPERTIES\n          VERSION ${TCMALLOC_SO_VERSION}\n          SOVERSION ${TCMALLOC_SO_VERSION})\n  install(TARGETS tcmalloc)\n  if(GPERFTOOLS_BUILD_STATIC)\n    add_library(tcmalloc_static STATIC ${libtcmalloc_la_SOURCES})\n    target_compile_definitions(tcmalloc_static PRIVATE ${libtcmalloc_la_DEFINE})\n    if(NOT MSVC)\n      set_target_properties(tcmalloc_static PROPERTIES OUTPUT_NAME tcmalloc)\n    endif()\n    target_link_libraries(tcmalloc_static PRIVATE ${libtcmalloc_la_LIBADD})\n    install(TARGETS tcmalloc_static)\n  endif()\n\n```\n\n----------------------------------------\n\nTITLE: Integer Map Field Definitions in Protocol Buffers\nDESCRIPTION: Defines map fields for various integer types including int32, int64, uint32, uint64, sint32, sint64, fixed32, fixed64, sfixed32, and sfixed64. Each map demonstrates basic 0->0 and 1->1 mappings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/map_test_data.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmap_int32_int32 {\n  key: 0\n  value: 0\n}\nmap_int32_int32 {\n  key: 1\n  value: 1\n}\nmap_int64_int64 {\n  key: 0\n  value: 0\n}\nmap_int64_int64 {\n  key: 1\n  value: 1\n}\nmap_uint32_uint32 {\n  key: 0\n  value: 0\n}\nmap_uint32_uint32 {\n  key: 1\n  value: 1\n}\nmap_uint64_uint64 {\n  key: 0\n  value: 0\n}\nmap_uint64_uint64 {\n  key: 1\n  value: 1\n}\nmap_sint32_sint32 {\n  key: 0\n  value: 0\n}\nmap_sint32_sint32 {\n  key: 1\n  value: 1\n}\nmap_sint64_sint64 {\n  key: 0\n  value: 0\n}\nmap_sint64_sint64 {\n  key: 1\n  value: 1\n}\nmap_fixed32_fixed32 {\n  key: 0\n  value: 0\n}\nmap_fixed32_fixed32 {\n  key: 1\n  value: 1\n}\nmap_fixed64_fixed64 {\n  key: 0\n  value: 0\n}\nmap_fixed64_fixed64 {\n  key: 1\n  value: 1\n}\nmap_sfixed32_sfixed32 {\n  key: 0\n  value: 0\n}\nmap_sfixed32_sfixed32 {\n  key: 1\n  value: 1\n}\nmap_sfixed64_sfixed64 {\n  key: 0\n  value: 0\n}\nmap_sfixed64_sfixed64 {\n  key: 1\n  value: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Building Convenience Library for Windows Authentication Client\nDESCRIPTION: Creates a convenience library for the Windows Authentication client with all source files and headers, linking against the Windows Security API (Secur32).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_win/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(auth_win_client ${PLUGIN_SOURCES} ${HEADERS}\n  LINK_LIBRARIES Secur32)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Test Case Validation in CMake\nDESCRIPTION: Defines a custom target that depends on the successful validation of test case files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_TARGET(check_testcase_files ALL\n  SOURCES check_testcase_files.passed)\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Component Target\nDESCRIPTION: CMake configuration for the main numeric component library that depends on the int128 implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    numeric\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::int128\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Event Command in MySQL\nDESCRIPTION: This snippet defines a command for testing event operations in the MySQL server. It specifies the command name, associated arguments, and a maximum execution time. The command is structured to facilitate testing of the MergeEventOperationApplier functionality in the MySQL environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--12-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# GENERATED FILE\n\ncmd: test_event\nargs: -n MergeEventOperationApplier_NR -l 2\nmax-time: 19620\n```\n\n----------------------------------------\n\nTITLE: NDB Include Directories Configuration\nDESCRIPTION: Sets up include directories for various NDB kernel components including blocks, error handling, and virtual machine modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/cmvmi\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbacc\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbdict\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbdih\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dblqh\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbtc\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbtup\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/ndbfs\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/ndbcntr\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/qmgr\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/trix\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/backup\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbutil\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/suma\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbtux\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbinfo\n  ${CMAKE_CURRENT_SOURCE_DIR}/blocks/dbspj\n  ${CMAKE_CURRENT_SOURCE_DIR}/error\n  ${CMAKE_CURRENT_SOURCE_DIR}/vm\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmsrv\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Lock Dependencies Configuration\nDESCRIPTION: Defines lock state transitions and dependencies between various MySQL subsystems. Uses ARC FROM/TO syntax to specify lock relationships with states (R/W) and operations (S/X).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nARC FROM \"rwlock/sql/LOGGER::LOCK_logger\" STATE \"W\" TO \"sxlock/innodb/trx_purge_latch\" OP \"S\"\nARC FROM \"rwlock/sql/Server_state_delegate::lock\" STATE \"R\" TO \"cond/group_rpl/COND_delayed_init_run\"\nARC FROM \"rwlock/sql/Server_state_delegate::lock\" STATE \"R\" TO \"mutex/group_rpl/LOCK_delayed_init_run\"\nARC FROM \"rwlock/sql/Server_state_delegate::lock\" STATE \"R\" TO \"mutex/group_rpl/LOCK_delayed_init_server_ready\"\n```\n\n----------------------------------------\n\nTITLE: Add Component Dependencies in CMake\nDESCRIPTION: This snippet iterates through the list of `EXAMPLE_COMPONENTS` and adds each component as a dependency to the `dynamic_loader-t` target. Adding dependencies ensures that the components are built before the `dynamic_loader-t` executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(EXAMPLE_COMPONENT ${EXAMPLE_COMPONENTS})\n  ADD_DEPENDENCIES(dynamic_loader-t ${EXAMPLE_COMPONENT})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n Bug15587 T1\nmax-time: 360\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: NextScanWhenNoMore\nDESCRIPTION: This command tests the scenario where a next scan is executed despite no more items existing to retrieve, placing it under specific parameters to control execution time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncmd: testScan\nargs: -n NextScanWhenNoMore T6 D1 D2\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Parser State Transitions in Text\nDESCRIPTION: This snippet outlines the syntax of state definitions used by an ICU regular expression parser. It includes state names, input characters, transition rules, and respective actions to be executed by the state machine. The definitions are used by a Perl script to generate C arrays that initialize rule parsing in the ICU library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n#StateName:\n#   input-char           n next-state           ^push-state     action\n#   input-char           n next-state           ^push-state     action\n#       |                |   |                      |             |\n#       |                |   |                      |             |--- action to be performed by state machine\n#       |                |   |                      |                  See function RBBIRuleScanner::doParseActions()\n#       |                |   |                      |\n#       |                |   |                      |--- Push this named state onto the state stack.\n#       |                |   |                           Later, when next state is specified as \"pop\",\n#       |                |   |                           the pushed state will become the current state.\n#       |                |   |\n#       |                |   |--- Transition to this state if the current input character matches the input\n#       |                |        character or char class in the left hand column.  \"pop\" causes the next\n#       |                |        state to be popped from the state stack.\n#       |                |\n#       |                |--- When making the state transition specified on this line, advance to the next\n#       |                     character from the input only if 'n' appears here.\n#       |\n#       |--- Character or named character classes to test for.  If the current character being scanned\n#            matches, perform the actions and go to the state specified on this line.\n#            The input character is tested sequentially, in the order written.  The characters and\n#            character classes tested for do not need to be mutually exclusive.  The first match wins.\n```\n\n----------------------------------------\n\nTITLE: Install Man Pages with GZIP_PATH CMake\nDESCRIPTION: This snippet handles the installation of gzipped man pages if GZIP_PATH is defined. It installs gzipped files generated from MAN_SOURCES and MAN_ALIAS into man1 or man3 directories based on the file extension.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(GZIP_PATH)\n\tadd_dependencies(man_gzip man_copy)\n\tadd_dependencies(man_symlink_gzip man_gzip)\n\tadd_dependencies(man man_symlink_gzip)\n\tforeach(f ${MAN_SOURCES})\n\t\tif (${f} MATCHES \".1$\")\n\t\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${f}.gz\n\t\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n\t\telseif(${f} MATCHES \".3$\")\n\t\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${f}.gz\n\t\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man3\")\n\t\tendif()\n\tendforeach()\n\tforeach(i RANGE 0 ${MAN_ALIAS_MAX} 2)\n\t\tmath(EXPR j \"${i} + 1\")\n\t\tlist(GET MAN_ALIAS ${j} DST)\n\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${DST}.3.gz\n\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man3\")\n\tendforeach()\nelse()\n\tadd_dependencies(man man_symlink)\n\tforeach(f ${MAN_SOURCES})\n\t\tif (${f} MATCHES \".1$\")\n\t\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${f}\n\t\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n\t\telseif(${f} MATCHES \".3$\")\n\t\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${f}\n\t\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man3\")\n\t\tendif()\n\tendforeach()\n\tforeach(i RANGE 0 ${MAN_ALIAS_MAX} 2)\n\t\tmath(EXPR j \"${i} + 1\")\n\t\tlist(GET MAN_ALIAS ${j} DST)\n\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${DST}.3\n\t\t\tDESTINATION \"${CMAKE_INSTALL_MANDIR}/man3\")\n\tendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_globals Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_globals target, which manages global state for the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_globals\n  SRCS\n    \"internal/globals.cc\"\n  HDRS\n    \"internal/globals.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_severity\n    absl::raw_logging_internal\n    absl::strings\n    absl::time\n)\n```\n\n----------------------------------------\n\nTITLE: Building tcmalloc_debug Libraries with CMake\nDESCRIPTION: Configures and builds tcmalloc with debug allocation support, including both shared and static libraries. Sets appropriate compiler definitions and target properties based on build configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(GPERFTOOLS_BUILD_DEBUGALLOC)\n  if(GPERFTOOLS_BUILD_HEAP_CHECKER OR GPERFTOOLS_BUILD_HEAP_PROFILER)\n    add_library(tcmalloc_debug SHARED src/debugallocation.cc ${HEAP_CHECKER_SOURCES} ${TCMALLOC_INCLUDES})\n    target_compile_definitions(tcmalloc_debug PRIVATE ${libtcmalloc_la_DEFINE}\n            TCMALLOC_FOR_DEBUGALLOCATION)\n    target_link_libraries(tcmalloc_debug PRIVATE ${libtcmalloc_la_LIBADD})\n    set_target_properties(tcmalloc_debug PROPERTIES\n            VERSION ${TCMALLOC_SO_VERSION}\n            SOVERSION ${TCMALLOC_SO_VERSION})\n    install(TARGETS tcmalloc_debug)\n    if(GPERFTOOLS_BUILD_STATIC)\n      add_library(tcmalloc_debug_static STATIC src/debugallocation.cc ${HEAP_CHECKER_SOURCES} ${TCMALLOC_INCLUDES})\n      target_compile_definitions(tcmalloc_debug_static PRIVATE ${libtcmalloc_la_DEFINE}\n              TCMALLOC_FOR_DEBUGALLOCATION)\n      target_link_libraries(tcmalloc_debug_static PRIVATE ${libtcmalloc_la_LIBADD})\n      if(NOT MSVC)\n        set_target_properties(tcmalloc_debug_static PROPERTIES\n                OUTPUT_NAME tcmalloc_debug)\n      endif()\n      install(TARGETS tcmalloc_debug_static)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: DeferredMixedLoadError with Node Selection\nDESCRIPTION: This entry checks the behavior of the system under deferred mixed load conditions, incorporating node selection parameters to assess performance variations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_29\n\nLANGUAGE: text\nCODE:\n```\ncmd: testIndex\nargs: -n DeferredMixedLoadError --skip-ndb-optimized-node-selection T1 T6 T13\nmax-time: 3780\n```\n\n----------------------------------------\n\nTITLE: Configuring ndb_print_backup_file Executable Build in CMake\nDESCRIPTION: CMake configuration to build the ndb_print_backup_file executable. Specifies the source file, component designation, and required NDB library dependencies including ndbmgmapi, ndbgeneral, ndblogger, ndbportlib, and ndbtrace.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/backup/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_print_backup_file\n  read.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ndbmgmapi\n  ndbgeneral\n  ndblogger\n  ndbportlib\n  ndbtrace\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Files and Dependencies in CMake\nDESCRIPTION: This snippet sets up a test target in the CMake build system for the MySQL server, specifying the test plugin source files, module, extra sources, and library dependencies. It includes a variety of test source files necessary for testing the functionality around MySQL REST services and database interactions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST_FILE(test_plugin.cc\n  MODULE mrs\n  EXTRA_SOURCES\n    ./helper/set_http_component.cc\n    ./test_authorize_manager.cc\n    ./test_helper_json.cc\n    ./test_helper_response_json_template.cc\n    ./test_collector_mysql_cache_manager.cc\n    ./test_database_rest_table.cc\n    ./test_database_rest_sp.cc\n    ./test_database_entries.cc\n    ./test_mrs_authentication_rate_control.cc\n    ./test_mrs_database_converters.cc\n    ./test_mrs_database_rest_table.cc\n    ./test_mrs_database_rest_table_get.cc\n    ./test_mrs_database_rest_table_get_one.cc\n    ./test_mrs_database_rest_table_put.cc\n    ./test_mrs_database_rest_table_post.cc\n    ./test_mrs_database_rest_table_delete.cc\n    ./test_mrs_json_mapper_check.cc\n    ./test_mrs_json_mapper_delete.cc\n    ./test_mrs_json_mapper_select.cc\n    ./test_mrs_json_mapper_insert.cc\n    ./test_mrs_json_mapper_update.cc\n    ./test_mrs_database_filter_object_generator.cc\n    ./test_mrs_parse_json.cc\n    ./test_helper_media_detector.cc\n    ./test_helper_plugin_monitor.cc\n    ./test_helper_string.cc\n    ./test_helper_jwt.cc\n    ./test_helper_gtid.cc\n    ./test_mrs_gtid_manager.cc\n    ./test_http_utilities.cc\n    ./test_rest_handler_authorize.cc\n    ./test_rest_handler_object.cc\n    ./test_rest_handler_file.cc\n    ./test_rest_handler.cc\n    ./test_rest_mrs_user_manager.cc\n    ./test_rest_user_entry.cc\n    ./test_mrs_http_header_accept.cc\n    ./test_mrs_http_session_manager.cc\n    ./test_mrs_json_template.cc\n    ./test_mrs_query_entries_db_object.cc\n    ./test_mrs_user_cache.cc\n    ./test_mrs_route_manager.cc\n    ./test_handler_object.cc\n    ./test_object_checksum.cc\n  LIB_DEPENDS mysql_rest_service test-helpers\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Severity Library in CMake for Abseil\nDESCRIPTION: Sets up the 'log_severity' library target with its headers, source files, dependencies, and compilation options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_severity\n  HDRS\n    \"log_severity.h\"\n  SRCS\n    \"log_severity.cc\"\n  DEPS\n    absl::core_headers\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake\nDESCRIPTION: Adds the source directory as a subdirectory for compilation, ensuring core MySQL server source files are included in the build process\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Extracting Debian Major Version\nDESCRIPTION: Extracts the major version number from the full Debian release version by removing everything after the decimal point. This is used to standardize version identification for package naming.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# lsb_release on Debian reports the full version number, e.g. 9.9, and we just want the major version\nIF(DEB_ID STREQUAL \"debian\")\n  string(REGEX REPLACE \"\\\\..*\" \"\" DEB_RELEASE \"${DEB_RELEASE}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Warnings for MySQL Keyring Encryption Test\nDESCRIPTION: Configures compiler warnings specific to the keyring encryption test. It adds shadow warnings and disables missing profile warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/keyring_encryption_test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Identifying Command Line Variables\nDESCRIPTION: This snippet iterates through all CMake cache variables and identifies those specified on the command line. It retrieves the HELPSTRING property for each variable and appends variables with the help string \"No help, variable specified on the command line.\" to the COMMAND_LINE_VARS list.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\n\"GET_CMAKE_PROPERTY(CACHE_VARS CACHE_VARIABLES)\nUNSET(COMMAND_LINE_VARS)\nFOREACH(CACHE_VAR ${CACHE_VARS})\n  GET_PROPERTY(CACHE_VAR_HELPSTRING CACHE ${CACHE_VAR} PROPERTY HELPSTRING)\n  IF(CACHE_VAR_HELPSTRING STREQUAL\n      \\\"No help, variable specified on the command line.\\\"\n      )\n    LIST(APPEND COMMAND_LINE_VARS ${CACHE_VAR})\n  ENDIF()\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Utils Test in CMake\nDESCRIPTION: Configures a test file for general utility functions with its dependencies on router MySQL and utilities libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_utils.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_mysql\n    router_utils\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining SRBank test command\nDESCRIPTION: Details the 'testSRBank' command which conducts a mixed operation over 300 records with a refresh rate of 15 on table 'T1', allowing a maximum execution time of 1800 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSRBank\nargs: -n Mix -l 300 -r 15 T1\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: testScanPerf Read Hold Lock With Reset Bounds\nDESCRIPTION: Benchmark command for testing scan performance in read hold lock mode with reset bounds. Uses 100,000 scans with lock level 1 and queue option enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 1 -r 2 -q 1 T1\n```\n\n----------------------------------------\n\nTITLE: Defining OCI Source Files for Compilation\nDESCRIPTION: Sets up a CMake variable containing the list of source files that make up the OCI common library. These files implement signing key functionality and utility functions for Oracle Cloud Infrastructure integration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql-common/oci/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(OCI_SOURCES\n  signing_key.cc\n  utilities.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Tools Library\nDESCRIPTION: This snippet adds a static library target 'ndbtools' comprised of multiple C++ source files crucial for NDB data import functionalities. It facilitates structured management of related implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/tools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbtools STATIC\n  NdbImport.cpp\n  NdbImportImpl.cpp\n  NdbImportCsv.cpp\n  NdbImportCsvGram.cpp\n  NdbImportUtil.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Print File Executable in CMake\nDESCRIPTION: Creates an executable named 'ndb_print_file' with specified source files and linking options using CMake's MYSQL_ADD_EXECUTABLE command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_print_file\n  print_file.cpp\n  diskpage.cpp\n  dbtup/tuppage.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES ndbclient_static ext::zlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting up Log Modifier Methods Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log modifier methods. It includes the source file and dependencies needed to test the functions that modify logging behavior or log message attributes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_modifier_methods_test\n  SRCS\n    \"log_modifier_methods_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::log_internal_test_actions\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_sink\n    absl::scoped_mock_log\n    absl::strings\n    absl::time\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MyTime Client Test Executable in CMake\nDESCRIPTION: This snippet creates a sample executable that links only with libmytime, intended for demonstration and verification of independent library functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/examples/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mytime_client-t mytime_client-t.cc SKIP_INSTALL)\nTARGET_LINK_LIBRARIES(mytime_client-t mytime ${LIBRT})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Windows-specific Sources with CMake\nDESCRIPTION: Conditionally adds the Windows-specific source directory when building with MSVC. This ensures platform-specific code is included only when needed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    add_subdirectory(src/windows)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Classic Protocol Splicer Test for MySQL Router\nDESCRIPTION: Configures a test for the classic protocol splicer with specific dependencies, include directories and extra source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nADD_ROUTER_TEST_FILE(\n  test_classic_protocol_splicer.cc\n  MODULE routing\n  LIB_DEPENDS\n    mysql_protocol\n    test-helpers\n    router_mysqlxclient\n    router_mysqlxmessages\n    connection_pool\n    ext::libprotobuf\n    routing_connections\n  INCLUDE_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src\n    ${CMAKE_CURRENT_SOURCE_DIR}/../include\n  EXTRA_SOURCES\n    ../src/context.cc\n    ../src/destination_ssl_context.cc\n  )\n\nROUTERTEST_GET_TARGET(T \"test_classic_protocol_splicer.cc\" \"routing\")\nTARGET_INCLUDE_DIRECTORIES(${T}\n  PRIVATE $<TARGET_PROPERTY:routing,INCLUDE_DIRECTORIES>)\nTARGET_COMPILE_DEFINITIONS(${T}\n  PRIVATE ROUTING_STATIC_DEFINE=1)\nTARGET_COMPILE_FEATURES(${T} PUBLIC cxx_std_20)\n```\n\n----------------------------------------\n\nTITLE: Add Static Library in CMake\nDESCRIPTION: This snippet adds a static library named `unit_test_common` using the source file `unit_test_common.cc`. Static libraries are linked directly into executables at compile time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(unit_test_common STATIC\n  unit_test_common.cc )\n```\n\n----------------------------------------\n\nTITLE: Linking to iphlpapi Library (CMake)\nDESCRIPTION: This snippet conditionally links the `mysqlgcs` library to the `iphlpapi` library on Windows platforms. This library provides functions for IP helper functionality, which is likely required for network-related operations in the GCS library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(MSVC)\n  TARGET_LINK_LIBRARIES(mysqlgcs PRIVATE iphlpapi)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Common Subdirectory to MySQL CMake Build\nDESCRIPTION: Adds the 'common' subdirectory to the build process, which likely contains shared code and utilities used by multiple MySQL components and plugins.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(common)\n```\n\n----------------------------------------\n\nTITLE: Initializing Library Variables for MySQL Client\nDESCRIPTION: This snippet initializes variables for client libraries and general libraries. These variables are likely used later in the build process to specify library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Use cmake variables to inspect dependencies for\n# mysqlclient library (add -l stuff)\nSET(CLIENT_LIBS \"\")\nSET(LIBS \"\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in MySQL CMake Build\nDESCRIPTION: Disables warnings related to missing profiles in the build configuration. This function is called to suppress specific warnings when building MySQL server components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Creating Crund JAR Package\nDESCRIPTION: Creates the final JAR package for Crund with specified source files, classpath, and dependencies on clusterj-api and ndbjtie JARs\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/java/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_JAR(crund\n           ${JAVA_CRUND_SOURCES}\n           CLASSPATH ${CLASSPATH}\n           DEPENDENCIES clusterj-api.jar ndbjtie.jar\n          )\n```\n\n----------------------------------------\n\nTITLE: Adding compiler flags for result.cc\nDESCRIPTION: This snippet conditionally adds compiler flags to the `src/result.cc` file. It checks if the `-Wmissing-profile` warning flag is supported by the compiler, and if so, it adds the flag to the compilation process for that specific source file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/temptable/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(src/result.cc COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Finding CMocka Package\nDESCRIPTION: This snippet uses the `find_package` command to locate the CMocka testing framework.  The `REQUIRED` keyword ensures that CMake will generate an error if CMocka is not found. This makes CMocka a mandatory dependency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(CMocka REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Finding Execinfo Library in CMake\nDESCRIPTION: Searches for the execinfo library which provides backtrace functionality on some platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(EXECINFO_LIBRARY execinfo)\n```\n\n----------------------------------------\n\nTITLE: Executing Event Operation Test in MySQL\nDESCRIPTION: This configuration sets up an event operation test named 'test_event' for MySQL. The '-n' parameter specifies the event operation handler, while '-l' sets the logging level. Max-time is defined to ensure the test runs within a specific timeframe.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-basic--01-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: test_event\nargs: -n EventOperationApplier -l 2\nmax-time: 16560\n```\n\n----------------------------------------\n\nTITLE: Adding Component Tag Definition for Connection Control\nDESCRIPTION: Sets a compiler definition to specify the logging component tag for the connection_control module. This tag is used to identify log messages originating from this component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/connection_control/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"CONNECTION_CONTROL\")\n```\n\n----------------------------------------\n\nTITLE: Qmgr Node Registration and Confirmation\nDESCRIPTION: Details the node registration confirmation process and subsequent steps for adding nodes to the cluster. Includes timing constraints and failure conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/Start.txt#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nWhen receiving CM_REGCONF\n4) Send CM_NODEINFOREQ to all connected(and connecting) nodes \n   reported in CM_REGCONF\n\n5) Wait until -\na) All CM_NODEINFO_CONF has arrived\nb) TimeToWaitAlive has passed -> Failure to start\n\n6) Send CM_ACKADD to president\n\n7) Wait until - \na) Receive CM_ADD(CommitNew) from president -> I'm in the qmgr cluster\nb) TimeToWaitAlive has passed -> Failure to start\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Test Targets in CMake\nDESCRIPTION: Adds test targets for thread configuration and InitConfigFileParser, linking them with necessary libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/mgmcommon/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(thr_config-t thr_config.cpp LIBS ndbmgmapi ndbgeneral ndbportlib)\nNDB_ADD_TEST(InitConfigFileParser-t InitConfigFileParser.cpp\n          LIBS ndbmgmcommon ndbgeneral ndbportlib)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unit Tests for Heap Storage Engine\nDESCRIPTION: Conditionally adds unit test executables for the Heap storage engine when unit tests are enabled. Configures two test executables with different source files and test cases.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  MYSQL_ADD_EXECUTABLE(hp_test1 hp_test1.cc _check.cc\n    ADD_TEST hp_test1\n    LINK_LIBRARIES heap_library\n    )\n  MYSQL_ADD_EXECUTABLE(hp_test2 hp_test2.cc _check.cc hp_rsame.cc\n    ADD_TEST hp_test2\n    LINK_LIBRARIES heap_library\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining String Error Library\nDESCRIPTION: This snippet defines an internal C++ library for string error handling using `absl_cc_library`. It includes source and header files, compiler and linker options, and dependencies on Abseil configuration, core headers, and errno saver.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    strerror\n  SRCS\n    \\\"internal/strerror.cc\\\"\n  HDRS\n    \\\"internal/strerror.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::errno_saver\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Directories in CMake\nDESCRIPTION: This CMake configuration snippet sets up the build paths for the MySQL server by adding specific directories required for its components. It disables profile warnings for missing profiles and conditionally includes additional test directories if the path exists. Dependencies include CMake and valid path references. The expected output is a configured state ready for building the MySQL components. Key parameters include 'XPLUGIN_ADDITIONAL_TESTS_PATH' which specifies an optional path for additional tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nADD_SUBDIRECTORY(driver)\nADD_SUBDIRECTORY(components)\n\nIF(XPLUGIN_ADDITIONAL_TESTS_PATH)\n  IF(EXISTS ${XPLUGIN_ADDITIONAL_TESTS_PATH}/)\n    ADD_SUBDIRECTORY(${XPLUGIN_ADDITIONAL_TESTS_PATH} \"${CMAKE_CURRENT_BINARY_DIR}/extra_xtests\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring fixed_array Library in CMake for Abseil\nDESCRIPTION: Sets up the 'fixed_array' library target, which provides a fixed-size array implementation. It defines the header file, compiler options, and dependencies for the fixed array component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    fixed_array\n  HDRS\n   \"fixed_array.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::compressed_tuple\n    absl::algorithm\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::throw_delegate\n    absl::memory\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Tests in MySQL Server\nDESCRIPTION: This snippet specifies timeout configurations for MySQL commands, demonstrating how different transactions behave under certain timeout conditions. Commands like 'testTimeout' simulate transaction timeouts and checks on resilience, requiring MySQL server setup with transaction support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/basic.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testTimeout\nargs: -n DontTimeoutTransaction T1\n\ncmd: testTimeout \nargs: -n DontTimeoutTransaction5 T1\n\ncmd: testTimeout\nargs: -n TimeoutTransaction T1\n\ncmd: testTimeout \nargs: -n TimeoutTransaction5 T1\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake for MySQL Server\nDESCRIPTION: This CMake directive adds the 'src' subdirectory to the build process for the MySQL server project. It indicates that the source code and additional build instructions are located in the 'src' folder.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/destination_status/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Job Pool for Large Executable on Windows\nDESCRIPTION: Sets the job pool for linking the mysqld executable on Windows with Ninja build system to handle large executable linking efficiently.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\n# With Ninja, link huge executables one-by-one.\nIF(WIN32)\n  SET_PROPERTY(TARGET mysqld PROPERTY JOB_POOL_LINK one_job)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Bug Fix Tests\nDESCRIPTION: Test configurations for validating specific bug fixes related to basic operations and node restarts in NDB Cluster. These tests target specific identified bugs with test cases designed to verify their resolutions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_16\n\nLANGUAGE: plain\nCODE:\n```\n# Bug18408671 added on 17.04.2014\n#max-time : 300\n#cmd: testDict\n#args: -n FK_SRNR1 T1\n#\n# Bug18408666 added on 17.04.2014\n#max-time : 300\n#cmd: testDict\n#args: -n FK_SRNR2 T1\n#\nmax-time : 300\ncmd: testBasic\nargs: -n Bug16834333 T1\n\nmax-time : 300\ncmd: testNodeRestart\nargs: -n Bug16834416 T1\n\nmax-time : 600\ncmd: testNodeRestart\nargs: -n Bug16944817 T1\n```\n\n----------------------------------------\n\nTITLE: Subscription Sync Metadata Protocol Flow\nDESCRIPTION: Protocol sequence for subscription synchronization metadata handling, including table listing and information gathering.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/suma/Suma.txt#2025-04-21_snippet_2\n\nLANGUAGE: ascii\nCODE:\n```\nUSER                      SUMA                    DICT\n========================================================\nSUB_SYNC_REQ::MetaData\n------------------------>\n                          case DatabaseSnapshot:\n                          LIST_TABLES\n                          ---------------------->\n                          <----------------------\nfor each table...\n                          GET_TABINFO\n                          ---------------------->\n                          <----------------------\nSUB_META_DATA                                     DIH\n<-------------------------                       =======\n                          DI_FCOUNT\n                          ---------------------->\n                          <----------------------\n                          DI_GETPRIM\n                          ---------------------->\n                          <----------------------\n..end for each table\nSUB_SYNC_CONF\n<-------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Internal Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags internal library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_internal\n  SRCS\n    \"internal/flag.cc\"\n  HDRS\n    \"internal/flag.h\"\n    \"internal/sequence_lock.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::flags_commandlineflag\n    absl::flags_commandlineflag_internal\n    absl::flags_config\n    absl::flags_marshalling\n    absl::synchronization\n    absl::meta\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Router TLS Test\nDESCRIPTION: Sets private include directories for the routertest_openssl_tls target, enabling access to source and header files\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(routertest_openssl_tls\n  PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}/../src/\n  ${CMAKE_CURRENT_SOURCE_DIR}/\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling gtest as a shared library\nDESCRIPTION: Shows how to compile gtest as a shared library (DLL) and link tests against it, using compiler flags.  `GTEST_CREATE_SHARED_LIBRARY` creates the shared library and `GTEST_LINKED_AS_SHARED_LIBRARY` links against it.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n-DGTEST_CREATE_SHARED_LIBRARY=1\n```\n\nLANGUAGE: C++\nCODE:\n```\n-DGTEST_LINKED_AS_SHARED_LIBRARY=1\n```\n\n----------------------------------------\n\nTITLE: Lint MAN Sources CMake\nDESCRIPTION: This snippet defines a custom command to lint man page source files using mandoc. It iterates through the MAN_SOURCES list, creating a custom command for each file that generates a lint file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# man_lint\nforeach(f ${MAN_SOURCES})\n\tadd_custom_command(OUTPUT ${f}.lint\n\t\tCOMMAND mandoc -T lint -W warning ${f} > ${f}.lint\n\t\tDEPENDS ${f})\n\tlist(APPEND LINT_FILES ${f}.lint)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comment Parsing in C++\nDESCRIPTION: This code snippet demonstrates various scenarios for comment parsing in C++, including single-line comments, multi-line comments, and comments within strings. It's designed to test the trim_comments.sh tool's ability to correctly identify and handle different comment types.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/scripts/test/comments.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/* 1 this is a comment and should be removed */\n\n2 this is not a comment; it should be preserved\n\n3 this is not a comment /* 4 this is a comment*/ 5 this is not a comment\n\n/*\n6\nthis\nis\na\ncomment\n*/\n\n7 not comment /*\n8\nmulti\nline\ncomment\n*/ 9 not comment\n\n\"/* 10 this is a string and not a comment; it should be preserved */\"\n\n\"this is a string \\\\\" /*this is a comment*/ no comment // \" comment\n\n\"11 this is also a string\"\n\n/*\"12 this is a comment and not a string; it should be removed\"*/\n\n13 '\"' /* 14 this is not a string, it is a comment */ '\"' 15\n\n16 1'000 \"'17 this is a string /* so this is no comment */ because 1'000 is a number\" 18 2'000\n\n\"19 all \\\" this /* is */ a \\\" string ' from // beginning \\' to\nend\"\n\n/*\n20\n\\n\nthis\n\"\nis\n*\na comment\n/\nand\n'\nit\n\\'\nshould\n/*\nbe\n\\\"\nremoved\n*\n/\n*/\n21\n\n// 22 this is a comment\n\n23 this is no comment // 24 this is a comment /* 25 and this is a comment\n26 this is not a comment // 27 this */ 28 is a comment\n\n// \\\n29 this is a comment too\n\n/// 30 this is a comment\n\n31 this is no comment /// 32 this is a comment /* 33 and this is a comment\n34 this is not a comment /// 35 this */ 36 is a comment\n\n/// \\\n37 this is a comment too\n```\n\n----------------------------------------\n\nTITLE: Adding Local Network TS Test\nDESCRIPTION: This snippet adds the `test_net_ts_local.cc` file as a Google Test. It sets the module and library dependencies including test-helpers for TempDirectory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_GOOGLETEST_FILE(test_net_ts_local.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS harness_net_ts\n  # TempDirectory\n  LIB_DEPENDS test-helpers\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compilation Visibility for MySQL Keyring Component\nDESCRIPTION: Conditionally sets compilation visibility options if the COMPONENT_COMPILE_VISIBILITY variable is defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(COMPONENT_COMPILE_VISIBILITY)\n  SET(COMPILE_OPTIONS_ARG COMPILE_OPTIONS \"${COMPONENT_COMPILE_VISIBILITY}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License for MySQL Server Project\nDESCRIPTION: This code snippet defines the copyright and license information for the MySQL Server project. It specifies the GNU General Public License version 2.0 and includes additional permissions for linking with separately licensed software.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# Copyright (c) 2010, 2025, Oracle and/or its affiliates.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is designed to work with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have either included with\n# the program or referenced in the documentation.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Program Name Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags program name library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_program_name\n  SRCS\n    \"internal/program_name.cc\"\n  HDRS\n    \"internal/program_name.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::flags_path_util\n    absl::strings\n    absl::synchronization\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Command Execution for Downgrade Testing - Shell\nDESCRIPTION: This snippet tests downgrade scenarios in MySQL using the 'testDowngrade' command. Each command utilizes various arguments that specify specific downgrade tests, with defined maximum time limits for execution. These tests assess the impact of downgrading various components or services in a controlled environment. Prerequisites include having the MySQL server environment and necessary permissions to run the tests. Outputs include log results of the downgrade test executions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/downgrade-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n ShowVersions T1\\nmax-time: 600\\ntype: bench  # Always record result\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR1 T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR2 T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR3 T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_FS T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Traffic T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Traffic_FS T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Bug14702377 T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_Only T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_Before_NR1 T2\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_NDBD_MGMD T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Mixed_MGMD_API_NDBD T2\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_SR_ManyTablesMaxFrag T1\\nmax-time: 6000\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR1_WithMGMDStart T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_Before_NR1_WithMGMDStart T2\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR2_WithMGMDInitialStart T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_NR3_WithMGMDInitialStart T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_FS_WithMGMDInitialStart T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Traffic_WithMGMDInitialStart T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Traffic_FS_WithMGMDInitialStart T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Bug14702377_WithMGMDInitialStart T1\\nmax-time: 600\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_Only_WithMGMDInitialStart T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_Api_NDBD_MGMD_WithMGMDInitialStart T1\\nmax-time: 1200\\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDowngrade\\nargs: -n Downgrade_SR_ManyTablesMaxFrag_WithMGMDInitialStart T1\\nmax-time: 6000\\n\n```\n\n----------------------------------------\n\nTITLE: Event Dropping Sequence Diagram\nDESCRIPTION: Illustrates the sequence flow for dropping an event, showing interactions between USER, DICT(Master), and UTIL components for removing entries from system table.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Dbdict.txt#2025-04-21_snippet_1\n\nLANGUAGE: ascii-diagram\nCODE:\n```\nUSER                      DICT(Master)            UTIL                   SUMA\n================================================================================\nDROP_EVENT_REQ\n-------------------------->\n\t\t\t  - remove from system table\n                          UTIL_PREPARE::delete\n                          ------------------------>\n                          <------------------------\n                          UTIL_EXECUTE        \n                          ------------------------>\n                          <------------------------\nDROP_EVENT_CONF\n<--------------------------\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Standalone Binlog\nDESCRIPTION: This CMake command adds a compiler definition for standalone binlog. This definition likely controls conditional compilation within the C++ source code, enabling or disabling features specific to the standalone binlog build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_DEFINITIONS(-DSTANDALONE_BINLOG)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Warnings in CMake\nDESCRIPTION: Configures warnings for the build process, including shadow warnings and disabling missing profile warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Adding TCMalloc as External Project\nDESCRIPTION: This snippet adds TCMalloc as an external project using `EXTERNALPROJECT_ADD`. It specifies the source directory, CMake arguments, and the build products that should be built. The build products are the shared libraries for TCMalloc (both regular and debug versions).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"EXTERNALPROJECT_ADD(tcmalloc_ext\n  SOURCE_DIR ${TCMALLOC_SOURCE_DIR}\n  CMAKE_ARGS ${TCMALLOC_CMAKE_ARGS}\n  BUILD_BYPRODUCTS\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc.so\\\"\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc.so.9.16.5\\\"\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc_debug.so\\\"\n  \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc_debug.so.9.16.5\\\"\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Mock Log Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's scoped mock log functionality. It specifies the source file and dependencies needed to test the utilities for capturing and validating log messages in tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    scoped_mock_log_test\n  SRCS\n    \"scoped_mock_log_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_globals\n    absl::log_internal_globals\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_severity\n    absl::memory\n    absl::scoped_mock_log\n    absl::strings\n    absl::synchronization\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Install Man Pages with MANDOC_PATH CMake\nDESCRIPTION: This snippet handles the installation of man pages if MANDOC_PATH is defined. It installs the style.css file, HTML files generated from MAN_SOURCES, and HTML files generated from MAN_ALIAS.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(MANDOC_PATH)\n\tadd_dependencies(man man_symlink_html)\n\tadd_dependencies(man_gzip man_lint)\n\tinstall(FILES ${PROJECT_SOURCE_DIR}/man/style.css\n\t\tDESTINATION \"${CMAKE_INSTALL_DOCDIR}/html\")\n\tforeach(f ${MAN_SOURCES})\n\t\tstring(REGEX REPLACE \"\\\\.[13]$\" \"\" f ${f})\n\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${f}.html\n\t\t\tDESTINATION \"${CMAKE_INSTALL_DOCDIR}/html\")\n\tendforeach()\n\tforeach(i RANGE 0 ${MAN_ALIAS_MAX} 2)\n\t\tmath(EXPR j \"${i} + 1\")\n\t\tlist(GET MAN_ALIAS ${j} DST)\n\t\tinstall(FILES ${PROJECT_BINARY_DIR}/man/${DST}.html\n\t\t\tDESTINATION \"${CMAKE_INSTALL_DOCDIR}/html\")\n\tendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: WiX Package Configuration Setup\nDESCRIPTION: Sets up CPACK WiX configuration variables including paths to custom WXS files and MSI setup configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CPACK_WIX_CONFIG ${CMAKE_CURRENT_SOURCE_DIR}/CPackWixConfig.cmake)\nSET(CPACK_WIX_INCLUDE \"${CMAKE_CURRENT_BINARY_DIR}/mysql_server_extra.wxs;\n  ${CMAKE_CURRENT_BINARY_DIR}/custom_ui.wxs;\n  ${CMAKE_CURRENT_BINARY_DIR}/redist_check.wxs\")\nSET(CPACK_MSI_SETUP ${CMAKE_CURRENT_SOURCE_DIR}/cpack_msi_setup.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Packaging and Documentation\nDESCRIPTION: Sets up platform-specific components including man pages for UNIX systems and various packaging formats for Linux distributions. This includes RPM packages for different Linux variants and DEB packages for Debian-based systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ENABLE_GCOV)\n  INCLUDE(fastcov)\nENDIF()\n\nIF(UNIX)\n  ADD_SUBDIRECTORY(man)\nENDIF()\n\nIF(LINUX AND NOT WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(packaging/rpm-common)\n  IF(LINUX_DEB_PLATFORM)\n    ADD_SUBDIRECTORY(packaging/deb-in)\n  ENDIF()\n  IF(LINUX_FEDORA)\n    ADD_SUBDIRECTORY(packaging/rpm-fedora)\n  ENDIF()\n  IF(LINUX_RHEL)\n    ADD_SUBDIRECTORY(packaging/rpm-oel)\n    ADD_SUBDIRECTORY(packaging/rpm-docker)\n  ENDIF()\n  IF(LINUX_SUSE)\n    ADD_SUBDIRECTORY(packaging/rpm-sles)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Declaring Google Mock Flag Macros in C++\nDESCRIPTION: Macros for declaring boolean, 32-bit integer, and string flags in Google Mock. These are typically used to define configurable options for the testing framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googlemock/include/gmock/internal/custom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DECLARE_bool_(name)\nGMOCK_DECLARE_int32_(name)\nGMOCK_DECLARE_string_(name)\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Router Documentation Files\nDESCRIPTION: Configures installation of documentation files if documentation directory is defined. Only installs the sample configuration file since other documentation is part of the server tree.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ROUTER_INSTALL_DOCDIR)\n  INSTALL(FILES ${PROJECT_SOURCE_DIR}/doc/sample_mysqlrouter.conf\n          DESTINATION ${ROUTER_INSTALL_DOCDIR}\n          COMPONENT Router)\n  # we do not install the README, License and so on as we\n  # are part of the server-tree\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Set MySQL Directories\nDESCRIPTION: This snippet defines variables for important directories used by MySQL, such as the data directory, binary directory, and sbin directory. These variables are later used in the installation process to specify the location of files and scripts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(localstatedir \\\"${MYSQL_DATADIR}\\\")\n\nSET(prefix \\\"${CMAKE_INSTALL_PREFIX}\\\")\nSET(bindir ${prefix}/${INSTALL_BINDIR})\nSET(sbindir ${prefix}/${INSTALL_SBINDIR})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous API Extension Tests\nDESCRIPTION: Test configurations for asynchronous API operations in NDB Cluster, focusing on multiwait functionality and different versions of the asynchronous interface. These tests verify the proper behavior of non-blocking operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_11\n\nLANGUAGE: plain\nCODE:\n```\n# async api extensions\nmax-time: 500\ncmd: testAsynchMultiwait\nargs: -n AsynchMultiwaitPkRead T1\n\nmax-time: 500\ncmd: testAsynchMultiwait\nargs: -n AsynchMultiwaitWakeup T1\n\nmax-time: 500\ncmd: testAsynchMultiwait\nargs: -n AsynchMultiwait_Version2 T1\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Compilation Loop\nDESCRIPTION: Iterates through the test list to create test executables with specified compilation settings, linking against mysql_serialization and gunit_small libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/containers/buffers/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc\n    ADD_TEST ${test}\n    LINK_LIBRARIES mysql_serialization gunit_small\n    COMPILE_DEFINITIONS \"${DISABLE_PSI_DEFINITIONS}\")\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Serialization Library in CMake\nDESCRIPTION: This snippet uses a custom CMake function LIBS_MYSQL_CREATE_LIBRARY to create the MySQL serialization library. It uses the previously defined TARGET_SRCS and TARGET_HEADERS lists as input.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nLIBS_MYSQL_CREATE_LIBRARY(mysql_serialization\n  TARGET_SRCS ${TARGET_SRCS}\n  TARGET_HEADERS ${TARGET_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes for Time-out Handling in DBLQH\nDESCRIPTION: This section defines error codes (5011-8072) for testing time-out handling and other scenarios in the DBLQH (Database Local Query Handler) component of MySQL server. It includes delays in signal execution, specific error simulations, and testing of TC (Transaction Coordinator) behaviors.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n5011:\nDelay execution of COMMIT signal 2 seconds to generate time-out.\n\n5012 (use 5017):\nFirst delay execution of COMMIT signal 2 seconds to generate COMMITREQ.\nDelay execution of COMMITREQ signal 2 seconds to generate time-out.\n\n5013:\nDelay execution of COMPLETE signal 2 seconds to generate time-out.\n\n5014 (use 5018):\nFirst delay execution of COMPLETE signal 2 seconds to generate COMPLETEREQ.\nDelay execution of COMPLETEREQ signal 2 seconds to generate time-out.\n\n5015:\nDelay execution of ABORT signal 2 seconds to generate time-out.\n\n5016: (ABORTREQ only as part of take-over)\nDelay execution of ABORTREQ signal 2 seconds to generate time-out.\n\n5031: lqhKeyRef, ZNO_TC_CONNECT_ERROR\n5032: lqhKeyRef, simulate a temporary redo error ZTEMPORARY_REDO_LOG_FAILURE\n5033: lqhKeyRef, ZTAIL_PROBLEM_IN_LOG_ERROR\n\n5034: Don't pop scan queue\n\n5035: Delay ACC_CONTOPCONT\n\n5038: Drop LQHKEYREQ + set 5039\n5039: Drop ABORT + set 5003\n\n8048: Make TC not choose own node for simple/dirty read\n5041: Crash is receiving simple read from other TC on different node\n\n8050: Send TCKEYREF is operation is non local\n8071: Send TCKEYREF is unique index operation is non local\n8072: 8050 || 8071\n```\n\n----------------------------------------\n\nTITLE: Windows Linker Option Configuration\nDESCRIPTION: This snippet configures linker options specifically for Windows builds to suppress the `LNK4286` warning (and `LNK4217` when using clang).  It targets the `group_replication_gcs_mysql_network_provider-t` executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/group_replication/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  # LNK4286: symbol 'unknown_sqlstate' is imported from mysqlclient.lib\n  TARGET_LINK_OPTIONS(\n    group_replication_gcs_mysql_network_provider-t PRIVATE /ignore:4286\n    )\n  # With clang we get 4217 rather than 4286\n  IF(WIN32_CLANG)\n    TARGET_LINK_OPTIONS(\n      group_replication_gcs_mysql_network_provider-t PRIVATE /ignore:4217\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_25\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n RestartRandomNodeError T6 T13\nmax-time: 1260\"\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Changestreams Static Library in CMake\nDESCRIPTION: Configures the output directory for the compiled changestreams static library archive using the CS_LIBS_ARCHIVE_OUTPUT_DIR variable which should contain the desired output path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/libstandalone/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSET_TARGET_PROPERTIES(changestreams_standalone_static\n  PROPERTIES\n  ARCHIVE_OUTPUT_DIRECTORY ${CS_LIBS_ARCHIVE_OUTPUT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Bison and Flex Target Configuration Comments in MySQL Build\nDESCRIPTION: These comments describe the syntax for configuring Bison and Flex targets in the MySQL build system. They outline the parameters for BISON_TARGET and FLEX_TARGET CMake commands.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# BISON_TARGET(<Name> <YaccInput> <CodeOutput>\n#              [COMPILE_FLAGS <flags>]\n#              [DEFINES_FILE <file>]\n#              [VERBOSE <file>]\n#              )\n# FLEX_TARGET(Name FlexInput FlexOutput\n#             [COMPILE_FLAGS <string>]\n#             [DEFINES_FILE <string>]\n#             )\n# The Name argument is just an alias.\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL X Plugin Build Options in CMake\nDESCRIPTION: This CMake script configures build options for the MySQL X Plugin. It checks if the plugin is enabled, sets include directories, adds definitions, and includes subdirectories for XPL and XCL components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_MYSQLX)\n  RETURN()\nENDIF()\n\nINCLUDE(CTest)\n\nOPTION(MYSQLX_ADDITIONAL_TESTS_ENABLE \"MYSQLX - enable additional tests\" OFF)\n\nSET(MYSQLX_PROJECT_DIR \"${PROJECT_SOURCE_DIR}/plugin/x\")\n\nGET_DIRECTORY_PROPERTY(MYSQLX_CLIENT_INCLUDE_DIR\n  DIRECTORY ${MYSQLX_PROJECT_DIR}\n  DEFINITION MYSQLX_CLIENT_INCLUDE_DIR\n)\n\nGET_DIRECTORY_PROPERTY(MYSQLX_GENERATE_DIR\n  DIRECTORY ${MYSQLX_PROJECT_DIR}\n  DEFINITION MYSQLX_GENERATE_DIR\n)\n\nINCLUDE_DIRECTORIES(\n  ${MYSQLX_GENERATE_DIR}\n  ${MYSQLX_CLIENT_INCLUDE_DIR}\n)\n\nADD_DEFINITIONS(-DXPLUGIN_DISABLE_LOG)\n# Protobuf 3.7.0 will generate #if 3007000 < PROTOBUF_MIN_PROTOC_VERSION\nIF(PROTOBUF_VERSION_NUMBER MATCHES \"3007000\")\n  ADD_DEFINITIONS(-DPROTOBUF_MIN_PROTOC_VERSION=2006000)\nENDIF()\n\nADD_SUBDIRECTORY(xpl)\nADD_SUBDIRECTORY(xcl)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Poisson Distribution Test - C++\nDESCRIPTION: Defines a test to verify the implementation of the Poisson distribution, outlining source files and dependencies required for testing its correctness.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_poisson_distribution_test\n  SRCS\n    \"poisson_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_distributions\n    absl::random_random\n    absl::core_headers\n    absl::flat_hash_map\n    absl::log\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing Reuse Test with Google Test in CMake\nDESCRIPTION: Sets up a specific routing reuse test file with Google Test framework and its required library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/integration/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_GOOGLETEST_FILE(${CMAKE_CURRENT_SOURCE_DIR}/test_routing_reuse.cc\n  MODULE \"integration\"\n  LIB_DEPENDS\n  router_mysqlxclient\n  router_mysqlxmessages # for TextFormatParser\n  routertest_helpers\n  mysql_protocol\n)\n```\n\n----------------------------------------\n\nTITLE: Defining test command for node restart scenarios\nDESCRIPTION: This snippet sets up the 'testNodeRestart' command to simulate a cluster split latency scenario using table 'T1', with a maximum execution time of 900 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n ClusterSplitLatency T1\nmax-time: 900\n```\n\n----------------------------------------\n\nTITLE: Defining ABI-Stable Row Data Structure using Packet Template in C++\nDESCRIPTION: Demonstrates how to use the Packet template to define a stable ABI for storing and accessing row data in a table. It defines an enum for field types, uses Packet for row structure, and Vector for the table.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/abi_helpers/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// The table has three columns. The type code identifies the column.\nenum Employee_field_type { col_name, col_birth_date, col_employment_date };\n// A row has three elements, and we store them in an array of 3 Field\n// objects where each value consists of a type code and the actual value.\nusing Employee_row = Packet<Employee_field_type>;\n// The table is a vector of rows.\nusing Employees = Vector<Employee_row>;\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: per_thread_sem_test\nDESCRIPTION: This snippet defines an Abseil C++ test for per-thread semaphore functionality, named `per_thread_sem_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::per_thread_sem_test_common`, `absl::synchronization`, `absl::strings`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    per_thread_sem_test\n  SRCS\n    \\\"internal/per_thread_sem_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::per_thread_sem_test_common\n    absl::synchronization\n    absl::strings\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Java Source Files for ClusterJ Tie in CMake\nDESCRIPTION: Creates a list of all Java source files that need to be compiled for the ClusterJ Tie module. Each file implements a specific part of the NDB Cluster Java interface functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-tie/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CLUSTERJ_TIE_PREFIX}/BlobImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ClusterConnectionImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ClusterConnectionServiceImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ClusterTransactionImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ColumnImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/DbImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/DbImplForNdbRecord.java\n  ${CLUSTERJ_TIE_PREFIX}/DbugImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/DictionaryImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/FixedByteBufferPoolImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/IndexImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/IndexOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/IndexScanOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/KeyPart.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordBlobImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordDeleteOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordIndexScanOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordInsertOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordKeyOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordResultDataImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordScanOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordScanResultDataImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordSmartValueHandlerFactoryImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordSmartValueHandlerImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordTableScanOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/NdbRecordUniqueKeyOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/OperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/PartitionKeyImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ResultDataImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ScanFilterImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ScanOperationImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/ScanResultDataImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/TableImpl.java\n  ${CLUSTERJ_TIE_PREFIX}/Utility.java\n  ${CLUSTERJ_TIE_PREFIX}/VariableByteBufferPoolImpl.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating Master DICT Alive Nodes List\nDESCRIPTION: This section outlines the process of initializing and updating the c_aliveNodes list in the master DICT. It covers initialization during DICT start, removal of failed nodes, and addition of starting nodes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/DictLock.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(1) c_aliveNodes is initialized when DICT starts\n    in sp3 in READ_NODESCONF from CNTR\n\n(2) when slave node fails (in any sp of the slave node)\n    it is removed from c_aliveNodes in NODE_FAILREP\n\n(3) when slave starts, it is added to c_aliveNodes\n    in sp4 of the starting node in INCL_NODEREQ\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Config Library in CMake\nDESCRIPTION: Creates a CMake target for the flags configuration library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_config\n  SRCS\n    \"usage_config.cc\"\n  HDRS\n    \"config.h\"\n    \"usage_config.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::flags_path_util\n    absl::flags_program_name\n    absl::core_headers\n    absl::strings\n    absl::synchronization\n)\n```\n\n----------------------------------------\n\nTITLE: Defining absl_log Library\nDESCRIPTION: This snippet defines the `absl_log` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependency on `absl::log_internal_log_impl`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    absl_log\n  SRCS\n  HDRS\n    \"absl_log.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_log_impl\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Profile Warning in CMake for MySQL Heap Engine\nDESCRIPTION: Disables warnings related to missing profiles in the CMake build system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/heap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Retrieving MySQL XClient Library Properties\nDESCRIPTION: Gets directory properties for MySQL XClient and Protocol libraries using CMake's GET_DIRECTORY_PROPERTY command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xcl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nGET_DIRECTORY_PROPERTY(MYSQLX_CLIENT_FULL_LIB\n  DIRECTORY ${MYSQLX_PROJECT_DIR}\n  DEFINITION MYSQLX_CLIENT_FULL_LIB)\n\nGET_DIRECTORY_PROPERTY(MYSQLX_PROTOCOL_FULL_LIB\n  DIRECTORY ${MYSQLX_PROJECT_DIR}\n  DEFINITION MYSQLX_PROTOCOL_FULL_LIB)\n```\n\n----------------------------------------\n\nTITLE: Setting LIBCNO Version and Generate Directory\nDESCRIPTION: Defines variables for library version and output directory. These variables are essential for organizing output files within the build structure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LIBCNO_VERSION_DIR \"libcno-208939f540957a35b337dacdd5c5e34d51821bd2\")\nSET(LIBCNO_GENERATE_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Annobin and LTO Flags\nDESCRIPTION: This snippet addresses a warning message generated by the \"annobin\" plugin when LTO is enabled without -D_FORTIFY_SOURCE options.  It checks if the C and CXX flags contain \"FORTIFY_SOURCE\" and, if not, and the flags contain \"-specs=.*redhat-annobin\", it removes -flto flag to ensure consistency in RPM builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LINUX_RPM_PLATFORM)\n  IF(NOT CMAKE_C_FLAGS MATCHES \\\"FORTIFY_SOURCE\\\")\n    IF(CMAKE_C_FLAGS MATCHES \\\"-specs=.*redhat-annobin\\\")\n      REMOVE_CMAKE_COMPILER_FLAGS(CMAKE_C_FLAGS \\\"${MY_COMPILER_FLAG_FLTO}\\\")\n    ENDIF()\n  ENDIF()\n  IF(NOT CMAKE_CXX_FLAGS MATCHES \\\"FORTIFY_SOURCE\\\")\n    IF(CMAKE_CXX_FLAGS MATCHES \\\"-specs=.*redhat-annobin\\\")\n      REMOVE_CMAKE_COMPILER_FLAGS(CMAKE_CXX_FLAGS \\\"${MY_COMPILER_FLAG_FLTO}\\\")\n    ENDIF()\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Utility Library in C++\nDESCRIPTION: This snippet defines a C++ library named 'utility' using the Abseil framework. It includes header files, options for compilation, and dependencies required for functionality. The library aims to encapsulate general utility functions that can be utilized across various components in the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/utility/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    utility\n  HDRS\n    \"utility.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base_internal\n    absl::config\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_test_matchers Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_test_matchers target, which provides test matchers for the Abseil logging system. It specifies source files, headers, compiler options, dependencies, and is marked as testonly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_test_matchers\n  SRCS\n    \"internal/test_matchers.cc\"\n  HDRS\n    \"internal/test_matchers.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_entry\n    absl::log_internal_test_helpers\n    absl::log_severity\n    absl::strings\n    absl::time\n    GTest::gtest\n    GTest::gmock\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Google Mock Flags in C++\nDESCRIPTION: Macros for getting and setting flag values in Google Mock. These are used to access and modify the configuration options at runtime.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googlemock/include/gmock/internal/custom/README.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_FLAG_GET(flag_name)\nGMOCK_FLAG_SET(flag_name, value)\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Api_Before_NR1\nDESCRIPTION: This command represents an upgrade scenario to validate API behavior before commencing with the non-restart test NR1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Api_Before_NR1 T2\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AppArmor for Ubuntu Packages\nDESCRIPTION: Sets up AppArmor security profiles for MySQL Server and Router specifically for Ubuntu packages. This includes adding build dependencies, installation paths, and profile loading commands to various package configuration files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable various apparmor systems for Ubuntu\nIF(DEB_ID STREQUAL \"ubuntu\")\n  SET (DEB_CONTROL_BDEPS \", dh-apparmor\")\n  SET (DEB_RULES_INSTALL_APPARMOR \"install -g root -o root -m 0644 -D debian/extra/apparmor-profile debian/tmp/etc/apparmor.d/usr.sbin.mysqld\")\n  SET (DEB_RULES_APPARMOR_LOAD \"dh_apparmor -pmysql-${DEB_PRODUCTNAME}-server --profile-name=usr.sbin.mysqld\")\n  SET (DEB_INSTALL_SERVER_APPARMOR \"etc/apparmor.d/usr.sbin.mysqld\")\n  SET (DEB_INSTALL_ROUTER_APPARMOR \"etc/apparmor.d/usr.bin.mysqlrouter\")\n  SET (DEB_INIT_SERVER_APPARMOR \"/lib/apparmor/profile-load usr.sbin.mysqld\")\n  SET (DEB_INIT_ROUTER_APPARMOR \"/lib/apparmor/profile-load usr.bin.mysqlrouter\")\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Removal Based on Build Configuration\nDESCRIPTION: Removes specific source files based on compile definitions and build type. Removes threading condition and mutex files if SAFE_MUTEX is not defined, and removes debugging code if NDEBUG is defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(BUILD_IS_SINGLE_CONFIG)\n  GET_PROPERTY(CWD_DEFINITIONS DIRECTORY PROPERTY COMPILE_DEFINITIONS)\n  IF(NOT CMAKE_CXX_FLAGS MATCHES \"DSAFE_MUTEX\" AND\n      NOT CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} MATCHES \"DSAFE_MUTEX\" AND\n      NOT CWD_DEFINITIONS MATCHES \"SAFE_MUTEX\")\n    # Both have ifdef SAFE_MUTEX\n    LIST(REMOVE_ITEM MYSYS_SOURCES\n      thr_cond.cc\n      thr_mutex.cc\n      )\n  ENDIF()\n  IF(CMAKE_CXX_FLAGS MATCHES \"DNDEBUG\" OR\n      CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} MATCHES \"DNDEBUG\" OR\n      CWD_DEFINITIONS MATCHES \"NDEBUG\")\n    # ifndef NDEBUG\n    LIST(REMOVE_ITEM MYSYS_SOURCES\n      dbug.cc\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Listing Java Source Files for ClusterJ Core in CMake\nDESCRIPTION: Defines a comprehensive list of Java source files to be compiled for the ClusterJ Core library. This includes files from various packages within the core module.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-core/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CLUSTERJ_CORE_PREFIX}/CacheManager.java\n  ${CLUSTERJ_CORE_PREFIX}/SessionFactoryImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/SessionFactoryServiceImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/SessionImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/StateManager.java\n  ${CLUSTERJ_CORE_PREFIX}/StoreManager.java\n  ${CLUSTERJ_CORE_PREFIX}/TransactionImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/AbstractDomainFieldHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/AbstractDomainTypeHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/DomainFieldHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/DomainTypeHandlerFactoryImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/DomainTypeHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/IndexHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/InvocationHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/metadata/KeyValueHandlerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/AndPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/BetweenPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/CandidateIndexImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/ComparativePredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/EqualPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/GreaterEqualPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/GreaterThanPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/InPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/IsNotNullPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/IsNullPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/LessEqualPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/LessThanPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/LikePredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/NotPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/OrPredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/ParameterImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/PredicateImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/PropertyImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/QueryBuilderImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/QueryDomainTypeImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/QueryExecutionContextImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/query/QueryImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/DomainFieldHandler.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/DomainTypeHandler.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/DomainTypeHandlerFactory.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/QueryExecutionContext.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/SessionSPI.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/SmartValueHandler.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/ValueHandler.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/ValueHandlerBatching.java\n  ${CLUSTERJ_CORE_PREFIX}/spi/ValueHandlerFactory.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Blob.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ClusterConnection.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ClusterConnectionService.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ClusterTransaction.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Column.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Db.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Dictionary.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Index.java\n  ${CLUSTERJ_CORE_PREFIX}/store/IndexOperation.java\n  ${CLUSTERJ_CORE_PREFIX}/store/IndexScanOperation.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Operation.java\n  ${CLUSTERJ_CORE_PREFIX}/store/PartitionKey.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ResultData.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ScanFilter.java\n  ${CLUSTERJ_CORE_PREFIX}/store/ScanOperation.java\n  ${CLUSTERJ_CORE_PREFIX}/store/Table.java\n  ${CLUSTERJ_CORE_PREFIX}/util/DeMinimisLogger.java\n  ${CLUSTERJ_CORE_PREFIX}/util/DeMinimisLoggerFactory.java\n  ${CLUSTERJ_CORE_PREFIX}/util/I18NHelper.java\n  ${CLUSTERJ_CORE_PREFIX}/util/JDK14LoggerFactoryImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/util/JDK14LoggerImpl.java\n  ${CLUSTERJ_CORE_PREFIX}/util/Logger.java\n  ${CLUSTERJ_CORE_PREFIX}/util/LoggerFactory.java\n  ${CLUSTERJ_CORE_PREFIX}/util/LoggerFactoryService.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Static NDB Management Client Library\nDESCRIPTION: Defines a static library named 'ndbmgmclient' that includes the CommandInterpreter.cpp source file. This library provides command interpretation functionality for the NDB management client.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmclient/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbmgmclient STATIC CommandInterpreter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Add MySQL Component in CMake\nDESCRIPTION: This snippet uses the `MYSQL_ADD_COMPONENT` macro to define several components: `self_required_test_component`, `cyclic_dependency_test_component_1`, `cyclic_dependency_test_component_2`, and `test_reference_cache`.  These components are defined as `MODULE_ONLY` and are skipped during installation (`SKIP_INSTALL`).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(self_required_test_component\n  self_required_test_component.cc\n  MODULE_ONLY\n  SKIP_INSTALL\n  )\nMYSQL_ADD_COMPONENT(cyclic_dependency_test_component_1\n  cyclic_dependency_test_component_1.cc\n  MODULE_ONLY\n  SKIP_INSTALL\n  )\nMYSQL_ADD_COMPONENT(cyclic_dependency_test_component_2\n  cyclic_dependency_test_component_2.cc\n  MODULE_ONLY\n  SKIP_INSTALL\n  )\nMYSQL_ADD_COMPONENT(test_reference_cache\n  test_reference_cache.cc\n  MODULE_ONLY\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Parse Library in CMake\nDESCRIPTION: Creates a CMake target for the flags parse library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_parse\n  SRCS\n    \"parse.cc\"\n  HDRS\n    \"internal/parse.h\"\n    \"parse.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::algorithm_container\n    absl::config\n    absl::core_headers\n    absl::flags_config\n    absl::flags\n    absl::flags_commandlineflag\n    absl::flags_commandlineflag_internal\n    absl::flags_internal\n    absl::flags_private_handle_accessor\n    absl::flags_program_name\n    absl::flags_reflection\n    absl::flags_usage\n    absl::strings\n    absl::synchronization\n)\n```\n\n----------------------------------------\n\nTITLE: Set Expression Parsing - Regex\nDESCRIPTION: Describes how set expressions are parsed within regex, detailing states for managing special characters, intersections, and errors. Handles sequences like '[^...]' and '[&...]' to correctly position characters within sets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_7\n\nLANGUAGE: regex\nCODE:\n```\nset-open:\n   '^'                   n  set-open2                               doSetNegate\n   ':'                      set-posix                               doSetPosixProp\n   default                  set-open2\n\nset-open2:\n   ']'                   n  set-after-lit                           doSetLiteral\n   default                  set-start\n\nset-posix:\n    ']'                  n   pop                                    doSetEnd\n    ':'                      set-start\n    default                  errorDeath                             doRuleError  # should not be possible.\n\nset-start:\n    ']'                  n  pop                                     doSetEnd\n    '['                  n  set-open      ^set-after-set            doSetBeginUnion\n    '\\'                  n  set-escape\n    '-'                  n  set-start-dash\n    '&'                  n  set-start-amp\n    default              n  set-after-lit                           doSetLiteral\n\nset-start-dash:\n    '-'                     errorDeath                              doRuleError\n    default                 set-after-lit                           doSetAddDash\n\nset-start-amp:\n    '&'                     errorDeath                              doRuleError\n    default                 set-after-lit                           doSetAddAmp\n\nset-after-lit:\n    ']'                  n  pop                                     doSetEnd\n    '['                  n  set-open      ^set-after-set            doSetBeginUnion\n    '-'                  n  set-lit-dash\n    '&'                  n  set-lit-amp\n    '\\'                  n  set-escape\n    eof                     errorDeath                              doSetNoCloseError\n    default              n  set-after-lit                           doSetLiteral\n\nset-after-set:\n    ']'                  n  pop                                     doSetEnd\n    '['                  n  set-open      ^set-after-set            doSetBeginUnion\n    '-'                  n  set-set-dash\n    '&'                  n  set-set-amp\n    '\\'                  n  set-escape\n    eof                     errorDeath                              doSetNoCloseError\n    default              n  set-after-lit                           doSetLiteral\n\nset-after-range:\n    ']'                  n  pop                                     doSetEnd\n    '['                  n  set-open      ^set-after-set            doSetBeginUnion\n    '-'                  n  set-range-dash\n    '&'                  n  set-range-amp\n    '\\'                  n  set-escape\n    eof                     errorDeath                              doSetNoCloseError\n    default              n  set-after-lit                           doSetLiteral\n\nset-after-op:\n    '['                  n  set-open         ^set-after-set         doSetBeginUnion\n    ']'                     errorDeath                              doSetOpError\n    '\\'                  n  set-escape\n    default              n  set-after-lit                           doSetLiteral\n\nset-set-amp:\n    '['                  n  set-open      ^set-after-set           doSetBeginIntersection1\n    '&'                  n  set-after-op                           doSetIntersection2\n    default                 set-after-lit                          doSetAddAmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Commercial vs Community Edition Packaging\nDESCRIPTION: Extensive configuration that sets up different package naming, licensing, and plugin lists depending on whether the build is for MySQL Commercial or Community Edition. Commercial Edition includes additional proprietary plugins not found in Community Edition.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Commercial or community\nIF (DEB_PRODUCT STREQUAL \"commercial\")\n  SET (DEB_CMAKE_EXTRAS \"${DEB_CMAKE_EXTRAS} -DWITH_MLE=ON\")\n  SET (DEB_COPYRIGHT_UPSTREAMNAME \"MySQL Commercial Server ${MYSQL_BASE_VERSION}\")\n  SET (DEB_PRODUCTNAME \"${DEB_BASE_PRODUCT}commercial\")\n  SET (DEB_PRODUCTNAMEC \"${DEB_BASE_PRODUCTC}Enterprise\")\n  SET (DEB_NOTPRODUCTNAME \"${DEB_BASE_PRODUCT}community\")\n  SET (DEB_LICENSENAME \"Commercial\")\n  SET (DEB_SERVERVERSION \"${DEB_BASE_VERSION}+commercial-1\")\n  # List of plugins that are only in commercial packages\n  # Plugins that are in both community and commercial should NOT be added here\n  SET (DEB_INSTALL_SERVER_PLUGINS\n\"\nusr/lib/mysql/plugin/audit_log.so\nusr/lib/mysql/plugin/authentication_kerberos.so\nusr/lib/mysql/plugin/authentication_openid_connect.so\nusr/lib/mysql/plugin/authentication_ldap_sasl.so\nusr/lib/mysql/plugin/authentication_ldap_simple.so\nusr/lib/mysql/plugin/authentication_pam.so\nusr/lib/mysql/plugin/authentication_webauthn.so\nusr/lib/mysql/plugin/component_enterprise_encryption.so\nusr/lib/mysql/plugin/component_keyring_encrypted_file.so\nusr/lib/mysql/plugin/component_keyring_hashicorp.so\nusr/lib/mysql/plugin/component_keyring_oci.so\nusr/lib/mysql/plugin/data_masking.so\nusr/lib/mysql/plugin/firewall.so\nusr/lib/mysql/plugin/keyring_okv.so\nusr/lib/mysql/plugin/keyring_hashicorp.so\nusr/lib/mysql/plugin/thread_pool.so\nusr/lib/mysql/plugin/firewall.so\nusr/lib/mysql/plugin/component_keyring_encrypted_file.so\nusr/lib/mysql/plugin/component_keyring_oci.so\nusr/lib/mysql/plugin/component_enterprise_encryption.so\nusr/lib/mysql/plugin/component_masking.so\nusr/lib/mysql/plugin/component_masking_functions.so\nusr/lib/mysql/plugin/component_mle.so\nusr/lib/mysql/plugin/component_scheduler.so\nusr/lib/mysql/plugin/component_telemetry.so\nusr/lib/mysql/plugin/component_option_tracker.so\nusr/lib/mysql/plugin/component_group_replication_flow_control_stats.so\nusr/lib/mysql/plugin/component_group_replication_elect_prefers_most_updated.so\nusr/lib/mysql/plugin/component_group_replication_resource_manager.so\nusr/lib/mysql/plugin/component_replication_applier_metrics.so\nusr/lib/mysql/private/libpolyglot.so\n\")\n\n   SET (DEB_INSTALL_TEST_PLUGINS\n\"\nusr/lib/mysql/plugin/component_test_global_priv_registration.so\nusr/lib/mysql/plugin/component_test_page_track_component.so\nusr/bin/mysql_test_jwt_generator\n\")\n\n  SET (DEB_INSTALL_CLIENT_PLUGINS\n\"\nusr/lib/mysql/plugin/telemetry_client.so\n\")\n\n  IF (DEB_AWS_SDK)\n    SET (DEB_CMAKE_EXTRAS \"${DEB_CMAKE_EXTRAS} -DWITH_KEYRING_AWS=ON -DWITH_AWS_SDK=${DEB_AWS_SDK} -DDEB_AWS_SDK=${DEB_AWS_SDK}\")\n    SET (DEB_INSTALL_SERVER_PLUGINS \"${DEB_INSTALL_SERVER_PLUGINS}\nusr/lib/mysql/plugin/keyring_aws.so\n\")\n\n    IF (DEFINED ENV{AWS_VER})\n      IF ($ENV{AWS_VER} STREQUAL \"1.11\")\n        SET (DEB_INSTALL_SERVER_PLUGINS \"${DEB_INSTALL_SERVER_PLUGINS}\nusr/lib/mysql/plugin/component_keyring_aws.so\n\")\n      ELSE()\n        MESSAGE(STATUS \"Unsupported AWS SDK version: $ENV{AWS_VER}, skip packaging component_keyring_aws.\")\n      ENDIF()\n    ELSE()\n      MESSAGE(STATUS \"Environment variable AWS_VER not set, skip packaging component_keyring_aws.\")\n    ENDIF()\n  ENDIF()\n\n  IF (WITH_CURL)\n    SET (DEB_CMAKE_EXTRAS \"${DEB_CMAKE_EXTRAS} -DWITH_CURL=${WITH_CURL}\")\n  ENDIF()\n  SET (DEB_REMOVEPATTERN \"gpl.in\")\n  INCLUDE (deb_commercial.cmake)\n\n  IF (NOT DEFINED DEB_NOMEB)\n    INCLUDE(deb_meb.cmake)\n  ENDIF()\nELSE()\n  SET (DEB_PRODUCT \"${DEB_BASE_PRODUCT}community\")\n  SET (DEB_COPYRIGHT_UPSTREAMNAME \"MySQL Server ${MYSQL_BASE_VERSION}\")\n  SET (DEB_PRODUCTNAME \"${DEB_BASE_PRODUCT}community\")\n  SET (DEB_PRODUCTNAMEC \"${DEB_BASE_PRODUCTC}Community\")\n  SET (DEB_NOTPRODUCTNAME \"${DEB_BASE_PRODUCT}commercial\")\n  SET (DEB_LICENSENAME \"GPL\")\n  SET (DEB_SERVERVERSION \"${DEB_BASE_VERSION}-1\")\n  SET (DEB_REMOVEPATTERN \"com.in\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Random Generators Test - C++\nDESCRIPTION: Defines a test for random generators utilizing the random distributions library, specifying source files along with the required dependencies for the GTest framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_generators_test\n  SRCS\n    \"generators_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_distributions\n    absl::random_random\n    absl::raw_logging_internal\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Usage Internal Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags usage internal library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_usage_internal\n  SRCS\n    \"internal/usage.cc\"\n  HDRS\n    \"internal/usage.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::flags_config\n    absl::flags\n    absl::flags_commandlineflag\n    absl::flags_internal\n    absl::flags_path_util\n    absl::flags_private_handle_accessor\n    absl::flags_program_name\n    absl::flags_reflection\n    absl::flat_hash_map\n    absl::strings\n    absl::synchronization\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional NDB Java Test Executable - CMake\nDESCRIPTION: Conditionally adds an executable named 'testClusterJ' if 'WITH_NDB_JAVA' is defined. It is compiled from 'testClusterJ.cpp' and links against the NDBCLIENT library with private compile definitions for configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/ndbapi/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_NDB_JAVA)\n  NDB_ADD_EXECUTABLE(testClusterJ testClusterJ.cpp NDBCLIENT)\n  TARGET_COMPILE_DEFINITIONS(testClusterJ PRIVATE\n                             CMAKE_BINARY_DIR=\"${CMAKE_BINARY_DIR}\"\n                             CMAKE_INSTALL_PREFIX=\"${CMAKE_INSTALL_PREFIX}\"\n                             INSTALL_LIBDIR=\"${INSTALL_LIBDIR}\"\n                             INSTALL_MYSQLSHAREDIR=\"${INSTALL_MYSQLSHAREDIR}\"\n                             WITH_CLASSPATH=\"${WITH_CLASSPATH}\"\n                            )\nENDIF(WITH_NDB_JAVA)\n```\n\n----------------------------------------\n\nTITLE: Configuring Failure Signal Handler Test in Abseil\nDESCRIPTION: Defines the test target for the failure signal handler library with threading support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    failure_signal_handler_test\n  SRCS\n    \"failure_signal_handler_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::check\n    absl::failure_signal_handler\n    absl::stacktrace\n    absl::symbolize\n    absl::strings\n    absl::raw_logging_internal\n    Threads::Threads\n    GTest::gmock\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CXX Compiler Warning Flag\nDESCRIPTION: Checks for and appends the -Wno-unused-local-typedefs compiler warning flag to CMAKE_CXX_FLAGS if supported by the compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/containers/buffers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for gtid_set-t\nDESCRIPTION: Defines the source files used to create the `gtid_set-t` executable.  In this case, it consists of a single source file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(SRC_FILES\ngtid_set-t.cc)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Export Header\nDESCRIPTION: This snippet includes the necessary export header for the MySQL REST service library. It enables the library's export definitions and ensures proper linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library with Link Libraries and Properties\nDESCRIPTION: Adds a shared library named 'fido2' using the specified source files (FIDO_SOURCES and COMPAT_SOURCES). It configures the library's version, soname, and links it against external libraries like ext::cbor, OpenSSL::Crypto, HIDAPI_LIBRARIES, UDEV_LIBRARIES, and ext::zlib. The SKIP_INSTALL option prevents automatic installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_SHARED_LIBRARY(fido2\n  ${FIDO_SOURCES} ${COMPAT_SOURCES}\n  SKIP_INSTALL\n  VERSION ${FIDO_LIBRARY_VERSION} SOVERSION ${FIDO_MAJOR}\n  LINK_LIBRARIES\n    ext::cbor\n    ${BASE_LIBRARIES}\n    OpenSSL::Crypto\n    ${HIDAPI_LIBRARIES}\n    ${UDEV_LIBRARIES}\n    ext::zlib\n  NO_UNDEFINED\n  )\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Result Replacement Directive\nDESCRIPTION: Example of test directive to replace engine-specific results for easier maintenance of tests across different storage engines.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/funcs_1/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n--replace_result $engine_type <engine_to_be_tested>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data Files for Routing Simulator\nDESCRIPTION: Identifies all JSON test files in the data/simulator directory and copies them to the test output location.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB TEST_FILES RELATIVE\n  ${CMAKE_CURRENT_SOURCE_DIR}/data data/simulator/*.json)\nCOPY_TEST_FILES(${CMAKE_CURRENT_SOURCE_DIR}/data \"${TEST_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Dictionary Testing in Shell\nDESCRIPTION: This snippet executes dictionary-related tests in MySQL, particularly when the database is full. It uses the `testDict` command with appropriate arguments. A working MySQL instance and the test environment are prerequisites for running the test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 2500\ncmd: testDict\nargs: -n CreateTableWhenDbIsFull T6\n```\n\n----------------------------------------\n\nTITLE: Executing testNodeRestart Command in MySQL\nDESCRIPTION: This code snippet illustrates the 'testNodeRestart' command which is used to test scenarios involving node restarts in MySQL. Each entry specifies a unique bug or feature test with corresponding execution time limits. Inputs represent specific bug cases, while outputs indicate the results of node restart tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug36245 T1\nmax-time: 360\n\ncmd: testNodeRestart\nargs: -n Bug29364 T1\nmax-time: 1620\n\ncmd: testNodeRestart\nargs: -n Bug16834416 T1\nmax-time: 540\n\ncmd: testNodeRestart\nargs: -n Bug56044 T1\nmax-time: 720\n\ncmd: testNodeRestart\nargs: -n Bug26481 T1\nmax-time: 1260\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_28\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testScan\nargs: -n ScanReadWhileNodeIsDown D1 D2\nmax-time: 1800\"\n```\n\n----------------------------------------\n\nTITLE: Executing testSystemRestart Command in MySQL\nDESCRIPTION: This snippet specifies the 'testSystemRestart' command to test system restart processes under various conditions in MySQL. Each command includes a unique test parameter and a time limitation for execution. Inputs consist of bug identification and situation specifics, while outputs reflect the success of the system restart tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n Bug41915 D2\nmax-time: 720\n\ncmd: testSystemRestart\nargs: -n SR_UNDO T6\nmax-time: 3060\n\ncmd: testSystemRestart\nargs: -n SR_UNDO D2\nmax-time: 3060\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MySQL Keyring Migration Tool\nDESCRIPTION: Sets the MIGRATE_KEYRING_SOURCE variable with a list of source files needed to build the mysql_migrate_keyring executable. Includes logger, options handling, components subsystem, and main source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/migrate_keyring/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MIGRATE_KEYRING_SOURCE\n  # Logger\n  ${CMAKE_CURRENT_SOURCE_DIR}/../logger.cc\n\n  # Options handling\n  options.cc\n\n  # Components subsystem\n  components.cc\n\n  # Main\n  migrate_keyring.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generate Export Header in CMake for MySQL Router\nDESCRIPTION: Includes the GenerateExportHeader CMake module which is used to generate export headers for libraries to properly handle symbol visibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Mock Helpers Target in CMake\nDESCRIPTION: Defines an internal-only 'random_internal_mock_helpers' CMake target for mock helpers. It specifies headers, compiler options, linker options, and dependencies. This target is not intended for direct external use.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_mock_helpers\n  HDRS\n    \"internal/mock_helpers.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::fast_type_id\n    absl::optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Router Test Helpers Static Library\nDESCRIPTION: Builds a static library from the helper source files for use in router tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(routertest_helpers STATIC ${helper_sources})\n```\n\n----------------------------------------\n\nTITLE: Defining Random Discrete Distribution Test - C++\nDESCRIPTION: Defines a test specifically for the discrete distribution implementation, ensuring the correct functioning through specified source files and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_discrete_distribution_test\n  SRCS\n    \"discrete_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Basic Test in CMake\nDESCRIPTION: This snippet configures the test target for Abseil's core logging functionality. It includes test sources and all required dependencies for validating the basic logging behaviors and mechanisms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_basic_test\n  SRCS\n    \"log_basic_test.cc\"\n    \"log_basic_test_impl.inc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::log\n    absl::log_entry\n    absl::log_globals\n    absl::log_severity\n    absl::log_internal_test_actions\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::scoped_mock_log\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Including Project Binary Directory\nDESCRIPTION: This snippet adds the project's binary directory to the include directories. This allows the compiler to find generated header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/include)\"\n```\n\n----------------------------------------\n\nTITLE: Defining node restart command with bug and limits\nDESCRIPTION: The snippet outlines a 'testNodeRestart' command for the 'Bug34216' scenario on table 'T1', also involving 'I3' and 'D2' with a limit of 3240 seconds for execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug34216 -l 10 T1 I3 D2\nmax-time: 3240\n```\n\n----------------------------------------\n\nTITLE: Testing Native PHP Implementation\nDESCRIPTION: Commands for setting up dependencies and running tests for the native PHP implementation of Protocol Buffers. Requires Bazel, Composer, and PHP-Dev.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napt-get install bazel composer php-dev\ngit clone https://github.com/protocolbuffers/protobuf.git\ncd protobuf\nbazel build :protoc\ncd php\ncomposer install\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard in CMake\nDESCRIPTION: Demonstrates how to set the C++ standard to C++17 in a CMakeLists.txt file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in C#\nDESCRIPTION: This snippet provides the command for running C# Protocol Buffers conformance tests using Bazel. It includes checks for the dotnet installation and proper environment configuration required for running the tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ `which dotnet || echo \\\"You must have dotnet installed!\\\" $ `bazel test //csharp:conformance_test \\ \\u0026\\u0026\\u0026 --action_env=DOTNET_CLI_TELEMETRY_OPTOUT=1 --test_env=DOTNET_CLI_HOME=~ \\ \\u0026\\u0026\\u0026 --action_env=DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring MySQL Test Helper Library\nDESCRIPTION: This CMake snippet adds a static library named 'test-helpers' from the source file 'src/test_helpers.cc'. It then configures include directories and links necessary libraries to the target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/shared/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(test-helpers STATIC src/test_helpers.cc)\nTARGET_INCLUDE_DIRECTORIES(test-helpers SYSTEM PUBLIC ${GMOCK_INCLUDE_DIRS})\nTARGET_INCLUDE_DIRECTORIES(test-helpers\n  PUBLIC include\n  PUBLIC ${MySQLRouter_BINARY_DIR}/include)\nTARGET_LINK_LIBRARIES(test-helpers\n  PUBLIC ${TEST_LIBRARIES} harness-library)\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in Objective-C\nDESCRIPTION: This snippet indicates how to run Objective-C conformance tests specifically on Mac. Bazel is used, and there is a restriction on the minimum macOS version required.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ `bazel test //objectivec:conformance_test --macos_minimum_os=10.9\n```\n\n----------------------------------------\n\nTITLE: Early Return for Server-less Builds in CMake\nDESCRIPTION: Stops processing the file if the WITHOUT_SERVER option is enabled, which would indicate a build configuration that doesn't need the NDB management server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITHOUT_SERVER)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating API Test Application in CMake\nDESCRIPTION: Creates a test application for verifying the MySQL client API. It generates a list of API functions, configures the test source file, and sets up compilation and linking for the test executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLIENT_API_FUNCTION_LIST \"\")\nFOREACH(api ${CLIENT_API_FUNCTIONS})\n  SET(CLIENT_API_FUNCTION_LIST \"${CLIENT_API_FUNCTION_LIST} ${api},\")\nENDFOREACH()\nFOREACH(api ${CLIENT_API_NONBLOCKING_FUNCTIONS})\n  SET(CLIENT_API_FUNCTION_LIST \"${CLIENT_API_FUNCTION_LIST} ${api},\")\nENDFOREACH()\n\nCONFIGURE_FILE(api_test.c.in ${CMAKE_CURRENT_BINARY_DIR}/api_test.c)\n\nMYSQL_ADD_EXECUTABLE(libmysql_api_test\n  ${CMAKE_CURRENT_BINARY_DIR}/api_test.c\n  LINK_LIBRARIES libmysql ${LIBRT}\n  SKIP_INSTALL\n  )\nSET_TARGET_PROPERTIES(libmysql_api_test PROPERTIES LINKER_LANGUAGE CXX)\n```\n\n----------------------------------------\n\nTITLE: Define Java Source Files for NDB JTie API\nDESCRIPTION: Configures the list of Java source files that comprise the NDB JTie API, including MGMAPI, CharsetMap, and various NDBAPI classes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CLUSTERJ_NDBJTIE_PREFIX}/mgmapi/MGMAPI.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/mysql/CharsetMap.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/mysql/CharsetMapConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/mysql/Utils.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NDBAPI.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NDBAPIConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/Ndb.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbBlob.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbBlobConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbDictionary.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbError.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbErrorConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbEventOperation.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbEventOperationConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbIndexOperation.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbIndexOperationConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbIndexScanOperation.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbIndexScanOperationConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbInterpretedCode.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbInterpretedCodeConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbLockHandle.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbLockHandleConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbOperation.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbOperationConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbRecAttr.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbRecAttrConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbRecord.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbRecordConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbScanFilter.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbScanFilterConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbScanOperation.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbScanOperationConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbTransaction.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/NdbTransactionConst.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/Ndb_cluster_connection.java\n  ${CLUSTERJ_NDBJTIE_PREFIX}/ndbapi/Ndb_cluster_connectionConst.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining test command for node restart with bug tracking\nDESCRIPTION: This defines another 'testNodeRestart' for tracking 'Bug16772' execution on table 'T1', specifying a time limit of 720 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug16772 T1\nmax-time: 720\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Api_Only\nDESCRIPTION: This command executes an upgrade test focused solely on the API, designated as 'Upgrade_Api_Only', to analyze API-related changes during the upgrade process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Api_Only T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending BASE_LIBRARIES for Windows\nDESCRIPTION: Conditionally appends the 'webauthn' library to the BASE_LIBRARIES list when building for Windows and the USE_WINHELLO flag is set. The BASE_LIBRARIES list is a collection of library dependencies used during the linking process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32)\n  IF(USE_WINHELLO)\n    list(APPEND BASE_LIBRARIES webauthn)\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NdbJTie in CMake\nDESCRIPTION: Sets up include directories for NdbJTie, including paths for utils, jtie, mgmapi, ndbapi, and JNI headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/utils\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/jtie\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/ndbapi\n  ${JNI_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Special Compiler Flags for GIS Files in MySQL on Windows\nDESCRIPTION: Adds /bigobj compiler flags to GIS-related source files on Windows to fix \"number of sections exceeded object file format limit\" error in MSVC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Fixes \"C1128: number of sections exceeded object file format limit\" in MSVC\nIF(WIN32)\n  ADD_COMPILE_FLAGS(\n    gis/difference.cc\n    gis/difference_functor.cc\n    gis/intersection_functor.cc\n    gis/symdifference_functor.cc\n    gis/touches.cc\n    gis/union.cc\n    gis/union_functor.cc\n    gis/within.cc\n    item_geofunc.cc\n    item_geofunc_relchecks.cc\n    COMPILE_FLAGS \"/bigobj\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Log Filter Test in CMake\nDESCRIPTION: Configures a test file for log filtering functionality with dependencies on MySQL-related libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_log_filter.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_mysql\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: System Restart SR_DD_3b\nDESCRIPTION: This entry describes a command aimed at testing system restarts under specific conditions labeled 'SR_DD_3b', ensuring data integrity and availability post-restart.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_26\n\nLANGUAGE: text\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_3b D1\nmax-time: 1260\n```\n\n----------------------------------------\n\nTITLE: Installing daemon_example Configuration File with CMake\nDESCRIPTION: This CMake command installs the daemon_example.ini configuration file. It specifies the destination directory and marks it as a component for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/daemon_example/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(FILES\n  daemon_example.ini\n  DESTINATION ${INSTALL_PLUGINDIR}\n  COMPONENT Test\n  )\n```\n\n----------------------------------------\n\nTITLE: Root CA Configuration\nDESCRIPTION: Creates the configuration file for the root CA with policy settings and certificate extensions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_3\n\nLANGUAGE: config\nCODE:\n```\n[ ca ]\ndefault_ca = CA_default\n[ CA_default ]\ndir = $PWD/ca\ncerts = $dir/certs\ndatabase = $dir/root.index.txt\nserial   = $dir/root.serial\npolicy= policy_match\n[ policy_match ]\norganizationName = match\norganizationalUnitName = optional\ncommonName = supplied\nemailAddress = optional\n[ v3_ca ]\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid:always,issuer\nbasicConstraints = CA:true\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: CreateLoadDrop\nDESCRIPTION: This snippet structures the test scenario for creating, loading, and dropping database structures under controlled conditions, monitoring performance metrics closely.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\ncmd: testIndex\nargs: -n CreateLoadDrop T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Creating JAR for JTIE Unload Test in CMake\nDESCRIPTION: Uses the CREATE_JAR command to create a JAR file for the JTIE unload test, including the specified Java sources and classpath.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/unload/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(jtie-test-unload ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH})\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data Directories for MySQL Router Tests\nDESCRIPTION: Sets up preprocessor definitions for component test data directory and SSL test data directory paths to be used in tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(\n  -DCOMPONENT_TEST_DATA_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/component/data/\")\nADD_DEFINITIONS(\n  -DSSL_TEST_DATA_DIR=\"${CMAKE_SOURCE_DIR}/mysql-test/std_data/\")\n```\n\n----------------------------------------\n\nTITLE: Including cbor.h in C file\nDESCRIPTION: This snippet demonstrates how to include the `cbor.h` header file in a C source file after libcbor has been set up as a Bazel dependency. This allows the C code to use the functions and data structures provided by the libcbor library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/Bazel.md#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n```c\n#include \"cbor.h\"\n\nstatic const uint8_t version = cbor_major_version;\n```\n```\n\n----------------------------------------\n\nTITLE: Generating All Keyring Component Common Tests with CMake\nDESCRIPTION: This snippet iterates through the list of keyring component common tests, appending '-t.cc' to each test name and adding an encryption source file to create a comprehensive list of test files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(ALL_KEYRING_COMPONENT_COMMON_TESTS)\nFOREACH(test ${KEYRING_COMPONENT_COMMON_TESTS})\n  LIST(APPEND ALL_KEYRING_COMPONENT_COMMON_TESTS ${test}-t.cc)\nENDFOREACH()\nLIST(APPEND ALL_KEYRING_COMPONENT_COMMON_TESTS\n  ${CMAKE_SOURCE_DIR}/components/keyrings/common/encryption/aes.cc\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for NDB CPCD\nDESCRIPTION: Specifies the include directories required for building the NDB CPCD component, including paths to NDBAPI, MGMAPI, and other required NDB components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/cw/cpcd/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/mgmcommon\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/portlib\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmclient\n  )\n```\n\n----------------------------------------\n\nTITLE: Complex Type Map Field Definitions in Protocol Buffers\nDESCRIPTION: Defines map fields for bytes, enums and message types. Shows mappings with binary data, enum values and nested message structures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/map_test_data.txt#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmap_int32_bytes {\n  key: 0\n  value: \"This is a very long string that goes in the heap\"\n}\nmap_int32_bytes {\n  key: 1\n  value: \"This is another very long string that goes in the heap\"\n}\nmap_int32_enum {\n  key: 0\n  value: MAP_ENUM_BAR\n}\nmap_int32_enum {\n  key: 1\n  value: MAP_ENUM_BAZ\n}\nmap_int32_foreign_message {\n  key: 0\n  value {\n    c: 0\n  }\n}\nmap_int32_foreign_message {\n  key: 1\n  value {\n    c: 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Source Files List in CMake for MySQL Server\nDESCRIPTION: This snippet defines a CMake variable named TARGET_SRCS which is initialized as an empty list. This indicates that this particular component consists only of header files without associated source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/abi_helpers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TARGET_SRCS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Test File for MySQL Router Testing\nDESCRIPTION: Adds a specific test file for the routing plugin with its dependencies, include directories, and extra sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST_FILE(${CMAKE_CURRENT_SOURCE_DIR}/plugin/test_plugin.cc\n  MODULE \"routing\"\n  LIB_DEPENDS\n    routing_export_all\n    test-helpers\n    extra::rapidjson\n  INCLUDE_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src\n    ${PROJECT_SOURCE_DIR}/tests/helpers\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/plugin_config.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/routing_plugin.cc\n  )\nROUTERTEST_GET_TARGET(T \"plugin/test_plugin.cc\" \"routing\")\nTARGET_COMPILE_DEFINITIONS(${T}\n  PRIVATE ROUTING_PLUGIN_STATIC_DEFINE=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining test command for scanning with bug ID\nDESCRIPTION: Defines another 'testScan' command for testing the 'Bug12324191' scenario with tables 'T1', 'T6', and 'T13', imposing a time limit of 180 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n Bug12324191 T1 T6 T13\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Executing testDict Command in MySQL\nDESCRIPTION: This snippet contains the 'testDict' command which handles dictionary operations in MySQL. It outlines various tests with specific names and time limits for execution. The inputs involve dictionary-related unique identifiers and the outputs provide results pertaining to dictionary functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testDict\nargs: -n Bug13416603 I2\nmax-time: 540\n\ncmd: testDict\nargs: -l 1 -n FailAddFragment\nmax-time: 1980\n```\n\n----------------------------------------\n\nTITLE: Configuring ndb_print_schema_file Executable Build with CMake\nDESCRIPTION: CMake configuration that defines build parameters for the ndb_print_schema_file executable. Specifies the main source file, component designation, and required NDB Cluster library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_print_schema_file\n  printSchemaFile.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ndbmgmapi\n  ndbgeneral\n  ndblogger\n  ndbportlib\n  ndbtrace\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Protobuf Test Addition\nDESCRIPTION: This CMake code conditionally adds tests and libraries related to Protocol Buffers (Protobuf) if the `WITH_CS_PROTOBUF` option is enabled. It appends the `cstreams_reader_state_codec_pb` test and associated libraries (`changestreams_pb_static`, `ext::libprotobuf-lite`) to the respective lists.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF (WITH_CS_PROTOBUF)\n  LIST(APPEND TESTS\n    cstreams_reader_state_codec_pb)\n\n  LIST(APPEND TESTS_LINK_LIBRARIES\n    changestreams_pb_static\n    ext::libprotobuf-lite)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Executing Test Commands for MySQL Server\nDESCRIPTION: This collection of command configurations is used to run specific tests on the MySQL server. Each command (e.g., testBasic, testNdbApi) is followed by parameters indicating the type of test, datasets involved, and maximum execution time. The intention is to evaluate functionality and detect bugs in different components of the server. It supports parameters such as '-n' for naming the test or '-l', '-r' for specifying iterations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--11-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n CommitAsMuch626 T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n DeleteClusterConnectionWhileUsed T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n NdbErrorOperation T6\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n PkRead T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n Bug54944DATABUFFER T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n CommitDelete T1 T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n OnlyOpenScanOnce T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -l 1 -n SR7 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n ScanUpdate2 T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n FK_TRANS2 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testIndex\nargs: -n Bug46069 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDataBuffers\nargs:\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testIndex\nargs: -n BuildDuring_O T6\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug24543 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n PkRead WIDE_MAXKEY_HUGO WIDE_MAXATTR_HUGO WIDE_MAXKEYMAXCOLS_HUGO WIDE_MINKEYMAXCOLS_HUGO\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n NdbClusterConnectNR_slow T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug18044717 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: test_event\nargs: -n Apiv2EmptyEpochs T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n ReadWithLocksAndInserts T6 D1 D2\nmax-time: 540\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n ScanReadError5023 T1 D1 D2\nmax-time: 540\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n PkUpdate WIDE_MAXKEY_HUGO WIDE_MAXATTR_HUGO WIDE_MAXKEYMAXCOLS_HUGO WIDE_MINKEYMAXCOLS_HUGO\nmax-time: 540\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBlobs\nargs: -rows 25\nmax-time: 540\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug32922 T1\nmax-time: 720\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -n Bug54611 T1\nmax-time: 720\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug27466 T1\nmax-time: 900\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -n basic T1\nmax-time: 1080\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n TemporaryTables T1 T6\nmax-time: 1260\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSRBank\nargs: -n SR -l 300 -r 15 T1\nmax-time: 1260\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR3 T6\nmax-time: 2880\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testIndex\nargs: -l 2 -n SR1_O T6 T13\nmax-time: 3780\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Minimum Version and Policies\nDESCRIPTION: Sets the minimum CMake version and includes CMake policy configurations to ensure consistent build behavior across different CMake versions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.14.6)\nINCLUDE(cmake_policies NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: DropWithTakeover\nDESCRIPTION: This command helps investigate the functionality around dropping tables with takeover scenarios, ensuring proper handling of resource management and data safety.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\ncmd: testDict\nargs: -n DropWithTakeover T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Server Mock with JSON Trace\nDESCRIPTION: This snippet demonstrates how to initiate the MySQL Server Mock using a specified JSON trace file and a port number. The command facilitates testing by simulating the expected server behavior based on the provided trace.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/mysql_server_mock.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mysql_server_mock ./simple.json 5500\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug12315582\nDESCRIPTION: This snippet registers a test command to investigate the 'Bug12315582' scenario, specifying the arguments needed to execute the test successfully and impose a maximum time to prevent hanging operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncmd: testIndex\nargs: -n Bug12315582 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Master Node Recovery Protocol Implementation\nDESCRIPTION: Implements the master node's recovery protocol during NODE_FAILREP execution, including transaction state analysis and slave coordination.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/MasterTakeover.txt#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nif new master\n  check for pending transaction, count operations (opCount)\n  for each slave\n    if no pending transaction found\n         ask slave if it has a pending transaction\n         DICT_TAKEOVER_REQ, req->requestInfo = TO_FIND_TRANS (goto 7)\n    else ask slave about state of the transaction operations,\n         DICT_TAKEOVER_REQ,\n         req->opCount = opCount, req->requestInfo = TO_FIND_OPS (goto 8)\n  for each slave\n    if slave did not find transaction (or did not reply), DICT_TAKEOVER_REF\n      ignore the slave\n    else analyze slave progress (goto 2)\n  if decision is rollforward\n       rollforward (goto 5)\n  else rollback (goto 6)\n  send SCHEMA_TRANS_REP to waiting client\nsend NF_COMPLETE_REP\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Private Handle Accessor Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags private handle accessor library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_private_handle_accessor\n  SRCS\n    \"internal/private_handle_accessor.cc\"\n  HDRS\n    \"internal/private_handle_accessor.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::flags_commandlineflag\n    absl::flags_commandlineflag_internal\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Including Optional Component Configurations\nDESCRIPTION: Conditionally includes additional CMake files for MySQL Router, NDB Cluster, and debug builds based on build flags. This modular approach allows for customization of package content based on build options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT DEFINED DEB_NOROUTER)\n  INCLUDE(deb_router.cmake)\nENDIF()\nIF (WITH_NDB)\n  INCLUDE(deb_ndb.cmake)\nENDIF()\nif (DEFINED DEB_WITH_DEBUG)\n  INCLUDE(deb_debug.cmake)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MgmApi Example Executables in CMake\nDESCRIPTION: Defines executable targets for Management API example programs. Each ADD_EXECUTABLE command specifies a target name and its corresponding source file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# MgmApi examples\nADD_EXECUTABLE(ndb_mgmapi_logevent mgmapi_logevent/main.cpp)\nADD_EXECUTABLE(ndb_mgmapi_logevent2 mgmapi_logevent2/main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Target Headers and Source Files in CMake for MySQL Server\nDESCRIPTION: This CMake snippet defines two empty variables, TARGET_HEADERS and TARGET_SRCS, which are typically used to specify header and source files for a target in the MySQL Server project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/allocators/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TARGET_HEADERS\n)\n\nSET(TARGET_SRCS\n)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testScan\nargs: -n OnlyOneScanPerTrans T6 D1 D2\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags based on RHEL and GCC\nDESCRIPTION: This snippet conditionally appends compiler flags if the system is RHEL and using an alternative GCC. It adds the '-B' flag to specify the prefix for GCC's binaries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LINUX_RHEL AND ALTERNATIVE_GCC)\n  LIST(APPEND TCMALLOC_CMAKE_ARGS -DCMAKE_C_FLAGS=\\\"-B${GCC_B_PREFIX}\\\")\n  LIST(APPEND TCMALLOC_CMAKE_ARGS -DCMAKE_CXX_FLAGS=\\\"-B${GCC_B_PREFIX}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Debug Sync in MySQL Server\nDESCRIPTION: This CMake code conditionally removes the debug_sync.cc file from the SQL_SHARED_SOURCES list if the ENABLED_DEBUG_SYNC flag is not set in the compilation flags or definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(BUILD_IS_SINGLE_CONFIG)\n  GET_PROPERTY(CWD_DEFINITIONS DIRECTORY PROPERTY COMPILE_DEFINITIONS)\n  IF(NOT CMAKE_CXX_FLAGS MATCHES \"DENABLED_DEBUG_SYNC\" AND\n      NOT CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} MATCHES \"DENABLED_DEBUG_SYNC\" AND\n      NOT CWD_DEFINITIONS MATCHES \"ENABLED_DEBUG_SYNC\")\n    # This has ifdef ENABLED_DEBUG_SYNC\n    LIST(REMOVE_ITEM SQL_SHARED_SOURCES\n      debug_sync.cc\n      )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Consumption Test in Abseil\nDESCRIPTION: Defines the test target for the stack consumption measurement functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    stack_consumption_test\n  SRCS\n    \"internal/stack_consumption_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::stack_consumption\n    absl::core_headers\n    absl::log\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Test System Restart Command\nDESCRIPTION: This snippet executes a test command to restart the system. It includes a reference to an option `-n SR_DD_1b_LCP D1` and specifies a maximum execution time of 12060 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--09-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_1b_LCP D1\nmax-time: 12060\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug21755\nDESCRIPTION: This entry targets 'Bug21755', setting the framework to examine conditions and consequences of specific dictionary state changes on the database behavior.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ncmd: testDict\nargs: -n Bug21755 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for MySQL Cluster\nDESCRIPTION: This snippet adds subdirectories for include and src, and conditionally adds other directories based on NDB and Java configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(include)\nADD_SUBDIRECTORY(src)\n\nIF(NOT WITH_NDB)\n  RETURN()\nENDIF()\n\nIF (OPENSSL_MAJOR_MINOR_FIX_VERSION VERSION_LESS \"1.0.2\")\n  MESSAGE(WARNING\n    \"MySQL Cluster Transparent Data Encryption (TDE) not supported.\"\n    \"Needs OpenSSL 1.0.2 or newer.\")\nENDIF()\n\nADD_SUBDIRECTORY(tools)\nADD_SUBDIRECTORY(test)\nIF(WITH_NDB_TEST)\n  ADD_SUBDIRECTORY(src/cw/cpcd)\nENDIF()\nIF(WITH_NDB_JAVA)\n  ADD_SUBDIRECTORY(clusterj)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Udev rules with CMake\nDESCRIPTION: This CMake snippet installs the udev rules file '70-u2f.rules' to the directory specified by the variable UDEV_RULES_DIR. The installation occurs only if UDEV_RULES_DIR is defined.  This facilitates granting permissions for U2F devices.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/udev/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UDEV_RULES_DIR)\n\tinstall(FILES 70-u2f.rules DESTINATION ${UDEV_RULES_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flags CommandLineFlag Internal Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags command line flag internal library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_commandlineflag_internal\n  SRCS\n    \"internal/commandlineflag.cc\"\n  HDRS\n    \"internal/commandlineflag.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::dynamic_annotations\n    absl::fast_type_id\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Clang in CMake\nDESCRIPTION: Adds specific compiler flag to suppress deprecated warnings when using Clang compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_CLANG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-deprecated\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: notification_test\nDESCRIPTION: This snippet defines an Abseil C++ test for the notification synchronization primitive, named `notification_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and depends on `absl::synchronization`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    notification_test\n  SRCS\n    \\\"notification_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Windows Authentication Plugin\nDESCRIPTION: Defines the header and source files required for the Windows Authentication Plugin client-side implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_win/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(HEADERS common.h handshake.h)\nSET(PLUGIN_SOURCES\n  common.cc\n  handshake.cc\n  handshake_client.cc\n  log_client.cc\n  plugin_client.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing ATRT Support Scripts in CMake\nDESCRIPTION: Configures the installation of various ATRT support scripts for result analysis, test setup, and coverage analysis to the mysql-test/ndb directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(PROGRAMS\n  atrt-analyze-result.sh\n  atrt-backtrace.sh\n  atrt-gather-result.sh\n  atrt-setup.sh\n  atrt-analyze-coverage.sh\n  atrt-compute-coverage.sh\n  atrt-mysqltest\n  autotest-boot.sh\n  autotest-run.sh\n  check-tests.sh\n  make-config.sh\n  make-html-reports.sh\n  make-index.sh\n  ndb-autotest.sh\n  upgrade-boot.sh\n  DESTINATION mysql-test/ndb\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Cleanup Library in CMake\nDESCRIPTION: Defines an internal-only CMake target for the cleanup library. It specifies header files, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/cleanup/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    cleanup_internal\n  HDRS\n    \"internal/cleanup.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base_internal\n    absl::core_headers\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Including Header Files for gperftools Installation\nDESCRIPTION: This snippet prepares a list of headers for installation related to gperftools, directing the installation path and including the necessary files for public access post-installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(googleinclude_HEADERS\n        src/google/heap-checker.h\n        src/google/heap-profiler.h\n        src/google/malloc_extension.h\n        src/google/malloc_extension_c.h\n        src/google/malloc_hook.h\n        src/google/malloc_hook_c.h\n        src/google/profiler.h\n        src/google/stacktrace.h\n        src/google/tcmalloc.h\n        )\ninstall(FILES ${googleinclude_HEADERS}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/google\n        )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing MySQL Router Manual Pages in CMake\nDESCRIPTION: Installs MySQL Router man pages only when Router support is enabled in the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_ROUTER)\n  INSTALL(FILES ${MAN1_ROUTER}\n    DESTINATION ${INSTALL_MANDIR}/man1 COMPONENT ManPages\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Debian Platform Release Identifier\nDESCRIPTION: Creates a platform-version identifier by concatenating the Debian distribution ID with its release number, resulting in values like 'ubuntu18.04' or 'debian9'. This is used for platform-specific package configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# ubuntu18.04, debian9, etc\nSET (DEB_PLATFORMRELEASE \"${DEB_ID}${DEB_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Add Dependencies CMake\nDESCRIPTION: This snippet defines dependencies between the custom targets. For example, man_symlink depends on man_copy, man_lint depends on man_symlink, and so on.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(man_symlink man_copy)\nadd_dependencies(man_lint man_symlink)\nadd_dependencies(man_html man_lint)\nadd_dependencies(man_symlink_html man_html)\nadd_dependencies(man_html_partial man_lint)\nadd_dependencies(man_symlink_html_partial man_html_partial)\nadd_custom_target(man ALL)\n```\n\n----------------------------------------\n\nTITLE: Adding Compilation Definitions for MySQL Plugin\nDESCRIPTION: Adds a preprocessor definition for a log component tag specific to the 'replication_observers_example'. This helps in tagging logs emanating from this component, aiding in later identification during debugging.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/replication_observers_example/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\\\"replication_observers_example\\\")\n```\n\n----------------------------------------\n\nTITLE: Intermediate CA1 Setup\nDESCRIPTION: Initializes the directory structure and files for the first intermediate CA\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ca/intermediate_ca1.certs\ntouch ca/intermediate_ca1.index.txt\ntouch ca/intermediate_ca1.index.txt.attr\necho '00' > ca/intermediate_ca1.serial\nopenssl genrsa -out ca/intermediate_ca1.key 2048\n```\n\n----------------------------------------\n\nTITLE: Numeric Sequence in Plain Text\nDESCRIPTION: A sequential list of numbers from 1 to 2221, with each number on a new line\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug30435_5k.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1\\n2\\n3\\n...\\n2219\\n2220\\n2221\n```\n\n----------------------------------------\n\nTITLE: Setting GCC Compiler Options for MySQL Router Test Plugin\nDESCRIPTION: Conditionally adds a warning suppression flag for GCC compiler version 12 or higher to address memcpy warnings in the test plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 11)\n  TARGET_LINK_OPTIONS(${T} PRIVATE -Wno-stringop-overread)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Another Test Command for Node Restart in MySQL\nDESCRIPTION: This snippet defines another test command for restarting a node during a specific operation (LCP T6). It sets the test name to RestartNodeDuringLCP T6 and a maximum execution time of 13140 seconds. LCP likely stands for Log CheckPoint. \nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--06-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n RestartNodeDuringLCP T6\nmax-time: 13140\"\n```\n\n----------------------------------------\n\nTITLE: Defining Test Command: testTransactions\nDESCRIPTION: This snippet defines another test command named `testTransactions`. It specifies that no arguments are passed to the command, and it sets the maximum execution time for the test. The `max-time` parameter sets the timeout to 12420 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--02-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testTransactions\\nargs:\\nmax-time: 12420\"\n```\n\n----------------------------------------\n\nTITLE: Defining testScan Command in Bash\nDESCRIPTION: This snippet contains definitions for the 'testScan' command, which is used to test scanning operations in MySQL across different node sets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testScan\nargs: -n TupScanRead100 -l 100 T1 D1 D2\nmax-time: 720\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testScan\nargs: -n ScanReadError5021 T1 D1 D2\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_nullstream Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_nullstream target, which implements a no-op stream for the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_nullstream\n  SRCS\n  HDRS\n    \"internal/nullstream.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_severity\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Linking RapidJSON Library to MySQL System Library\nDESCRIPTION: Links the RapidJSON library as a dependency for the MySQL system library, allowing JSON parsing and manipulation functionality to be used by system components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(library_mysys rapidjson)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Test Executable for MySQL Server in CMake\nDESCRIPTION: This snippet disables a missing profile warning and adds a basic test executable to the MySQL server project. It also links the test with the mytap library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/mytap/t/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_EXECUTABLE(basic-t basic-t.cc ADD_TEST basic)\nTARGET_LINK_LIBRARIES(basic-t mytap)\n```\n\n----------------------------------------\n\nTITLE: Adding Executables for PLOB in CMake\nDESCRIPTION: This snippet adds an executable target for Plain LOB using the MYSQL_ADD_EXECUTABLE command. It defines the necessary source files and links with dependencies such as ext::zlib and gunit_small.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(lot0lot-t ${PLOB_SRC_FILES}\\n  SKIP_INSTALL\\n  ENABLE_EXPORTS\\n  LINK_LIBRARIES ext::zlib ${GTEST_LIBRARIES} gunit_small\\n  )\n```\n\n----------------------------------------\n\nTITLE: Building the project with Maven\nDESCRIPTION: This command executes a Maven package command that copies the GraalVM Polyglot API sources, applies patches, and builds the JIT Executor library. The resulting library is located in the polyglot-nativeapi-native-library/target directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn package\n```\n\n----------------------------------------\n\nTITLE: Configuring Libraries for CRUND Benchmark\nDESCRIPTION: Links required libraries (crund_helpers and ndbclient_so) for the CRUND benchmark application.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/cpp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nLINK_LIBRARIES(crund_helpers ndbclient_so)\n```\n\n----------------------------------------\n\nTITLE: Including Directories in CMake\nDESCRIPTION: Specifies the directories to be included in the build process for finding header files related to SQL and InnoDB storage engine components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/sql\n  ${CMAKE_SOURCE_DIR}/storage/innobase/include\n)\n```\n\n----------------------------------------\n\nTITLE: Node Restart Test Command\nDESCRIPTION: A test command configuration for node restart during network failure, with specific arguments and extended time limit\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--03-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -l 1 -n RestartNFDuringNR T6 T13\nmax-time: 11880\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Threshold in MySQL Server\nDESCRIPTION: Defines the maximum error code value (10000) for session-only errors in the MySQL management API session. Values below this threshold are considered session-specific, while higher values affect the entire management server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/ERROR_codes.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#define MGM_ERROR_MAX_INJECT_SESSION_ONLY 10000\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: NoCommit630\nDESCRIPTION: This snippet outlines a test command focusing on the 'NoCommit630' scenario, designed to test multi-transaction scenarios without committing changes, along with its execution constraints.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBasic\nargs: -n NoCommit630 T1 T6 D1 D2\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Defining MAN Sources with CMake List\nDESCRIPTION: This CMake snippet defines a list named `MAN_SOURCES` and appends a series of filenames with the `.3` or `.1` extension to it.  These files are assumed to be the source files for manual pages that will be processed by `mandoc` or a similar tool. The SPDX-License-Identifier is defined at the beginning of the document, indicating a BSD-2-Clause license.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"list(APPEND MAN_SOURCES\n\teddsa_pk_new.3\n\tes256_pk_new.3\n\tes384_pk_new.3\n\tfido2-assert.1\n\tfido2-cred.1\n\tfido2-token.1\n\tfido_init.3\n\tfido_assert_new.3\n\tfido_assert_allow_cred.3\n\tfido_assert_set_authdata.3\n\tfido_assert_verify.3\n\tfido_bio_dev_get_info.3\n\tfido_bio_enroll_new.3\n\tfido_bio_info_new.3\n\tfido_bio_template.3\n\tfido_cbor_info_new.3\n\tfido_cred_new.3\n\tfido_cred_exclude.3\n\tfido_credman_metadata_new.3\n\tfido_cred_set_authdata.3\n\tfido_cred_verify.3\n\tfido_dev_enable_entattest.3\n\tfido_dev_get_assert.3\n\tfido_dev_get_touch_begin.3\n\tfido_dev_info_manifest.3\n\tfido_dev_largeblob_get.3\n\tfido_dev_make_cred.3\n\tfido_dev_open.3\n\tfido_dev_set_io_functions.3\n\tfido_dev_set_pin.3\n\tfido_strerr.3\n\trs256_pk_new.3\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unit Test Libraries in MySQL Server\nDESCRIPTION: Configures static libraries for unit testing, including gunit_small and gunit_large with various dependencies and compile definitions\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(gunit_small STATIC\n  benchmark.cc\n  fake_costmodel.cc\n  gunit_test_main.cc\n  skip_trailing.cc\n  strnxfrm.cc\n  thread_utils.cc\n  fake_table.cc\n)\nSET_TARGET_PROPERTIES(gunit_small\n  PROPERTIES COMPILE_DEFINITIONS \"${DISABLE_PSI_DEFINITIONS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining JAR Dependencies for ClusterJ Tie in CMake\nDESCRIPTION: Specifies the JAR file dependencies required for building the ClusterJ Tie module. These JAR files must be built before compiling ClusterJ Tie.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-tie/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAR_DEPENDENCIES\n  clusterj-core.jar\n  ndbjtie.jar\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Component Build in CMake\nDESCRIPTION: Conditional inclusion of Java-based Crund components for ClusterJ, Ndbjtie, and JDBC testing when Java support is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_NDB_JAVA)\n  ADD_SUBDIRECTORY(java)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Up IDE Header Group for Windows Authentication Plugin\nDESCRIPTION: Configures source groups for better organization in IDEs, placing header files in a separate folder.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/authentication_win/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSOURCE_GROUP(Headers REGULAR_EXPRESSION \".*h$\")\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testIndex\nargs: -n Bug60851 T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Testing Prefetch Functionality\nDESCRIPTION: This snippet defines a C++ test for the prefetch library using `absl_cc_test`. It includes source files, compiler options, and dependencies on the Abseil prefetch library and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    prefetch_test\n  SRCS\n    \\\"prefetch_test.cc\\\"\n    \\\"internal/prefetch_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::prefetch\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_NR3\nDESCRIPTION: This command executes the upgrade test for the third instance of a non-restart upgrade scenario 'Upgrade_NR3', comparing performance among different upgrade paths.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_NR3 T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug19202654 Backup\nDESCRIPTION: This snippet is aimed at testing the backup process for 'Bug19202654', ensuring the system performs as expected within specified operational limits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBackup\nargs: -n Bug19202654 T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Defining Standard MySQL Tool Manual Pages in CMake\nDESCRIPTION: Defines a list of standard MySQL tool man pages (MAN1) to be installed, covering various MySQL client utilities and administration tools.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MAN1\n  comp_err.1\n  ibd2sdi.1\n  innochecksum.1\n  my_print_defaults.1\n  myisam_ftdump.1\n  myisamchk.1\n  myisamlog.1\n  myisampack.1\n  mysql.1\n  mysql_config.1\n  mysql_config_editor.1\n  mysql_secure_installation.1\n  mysql_tzinfo_to_sql.1\n  mysqladmin.1\n  mysqlbinlog.1\n  mysqlcheck.1\n  mysqldump.1\n  mysqldumpslow.1\n  mysqlimport.1\n  mysqlman.1\n  mysqlshow.1\n  mysqlslap.1\n  perror.1\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Java Sources for MySQL Server API Wrapper in CMake\nDESCRIPTION: Sets up a list of Java source files for the MySQL Server Java API wrapper and test. These files are located in the myjapi and test directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/A.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/B0.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/B1.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/CI.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/D0.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/D1.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/D2.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/E.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/MyJapi.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/myjapi/MyJapiCtypes.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/MyJapiTest.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSTD Build Options and Legacy Support\nDESCRIPTION: Defines CMake options for configuring ZSTD build features such as legacy support, multithreading, programs, contrib, tests, and static runtime linking. Also sets up conditional compilation flags for legacy support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zstd/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Options\n#-----------------------------------------------------------------------------\nOPTION(ZSTD_LEGACY_SUPPORT \"LEGACY SUPPORT\" OFF)\nOPTION(ZSTD_MULTITHREAD_SUPPORT \"MULTITHREADING SUPPORT\" OFF)\nOPTION(ZSTD_BUILD_PROGRAMS \"BUILD PROGRAMS\" ON)\nOPTION(ZSTD_BUILD_CONTRIB \"BUILD CONTRIB\" OFF)\nOPTION(ZSTD_BUILD_TESTS \"BUILD TESTS\" OFF)\nif (MSVC)\n    OPTION(ZSTD_USE_STATIC_RUNTIME \"LINK TO STATIC RUN-TIME LIBRARIES\" OFF)\nendif ()\n\nIF (ZSTD_LEGACY_SUPPORT)\n    MESSAGE(STATUS \"ZSTD_LEGACY_SUPPORT defined!\")\n    ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=4)\nELSE (ZSTD_LEGACY_SUPPORT)\n    MESSAGE(STATUS \"ZSTD_LEGACY_SUPPORT not defined!\")\n    ADD_DEFINITIONS(-DZSTD_LEGACY_SUPPORT=0)\nENDIF (ZSTD_LEGACY_SUPPORT)\n```\n\n----------------------------------------\n\nTITLE: Testing Log Severity Functionality\nDESCRIPTION: This snippet defines a C++ test target for log severity functionality using `absl_cc_test`. It lists source files, and dependencies including Abseil flags internals, marshalling, log severity, strings, and Google Mock/Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    log_severity_test\n  SRCS\n    \\\"log_severity_test.cc\\\"\n  DEPS\n    absl::flags_internal\n    absl::flags_marshalling\n    absl::log_severity\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_policy_testing_test in CMake for Abseil\nDESCRIPTION: Defines the 'hash_policy_testing_test' target for testing the hash policy testing utilities. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    hash_policy_testing_test\n  SRCS\n    \"internal/hash_policy_testing_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash_policy_testing\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Dialect with Bazel Environment Variable\nDESCRIPTION: Shows how to set the C++ dialect to C++17 using the BAZEL_CXXOPTS environment variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBAZEL_CXXOPTS=-std=c++17\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_log_impl Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_log_impl target, which implements core logging functionality in the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_log_impl\n  SRCS\n  HDRS\n    \"internal/log_impl.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_conditions\n    absl::log_internal_message\n    absl::log_internal_strip\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Clang-Specific Compiler Flags for Command.cpp in CMake\nDESCRIPTION: Adds a special compiler flag to disable dynamic-class-memaccess error when building with Clang compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_CLANG)\n  ADD_COMPILE_FLAGS(command.cpp COMPILE_FLAGS\n    \" -Wno-error=dynamic-class-memaccess\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining List of Test Files\nDESCRIPTION: This snippet defines a list of test files. These files are C++ source files used for harness testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  test_access_rights.cc\n  test_loader.cc\n  test_loader_lifecycle.cc\n  test_logging.cc\n  test_designator.cc\n  test_iterator.cc\n  test_utilities.cc\n  test_common.cc\n  test_config.cc\n  test_filesystem.cc\n  test_hostname_validator.cc\n  test_bug22104451.cc\n  test_random_generator.cc\n  test_mysql_router_thread.cc\n  test_mpmc_queue.cc\n  test_dynamic_state.cc\n  test_arg_handler.cc\n  test_vt100.cc\n  test_string_utils.cc\n  test_process_launcher.cc\n  test_config_builder.cc\n  test_event_state_tracker.cc\n  test_config_option.cc\n  test_hexify.cc\n  test_configuration_update_schema.cc\n  test_dynamic_config.cc\n  test_destination.cc\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Link-Time Optimization for mysqld on macOS\nDESCRIPTION: Configures Link-Time Optimization specifically for the mysqld executable on macOS to work around issues with LTO in shared libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n# macOS has problems with enabling LTO for shared libs, so we only set it\n# as target property for mysqld.\nIF(APPLE AND WITH_LTO)\n  SET_TARGET_PROPERTIES(mysqld PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Unique Hash Index Structure Definition\nDESCRIPTION: Defines the structure of a unique hash index X on table T, where the index consists of attributes A1 to An and includes an NDB$PK field that contains the concatenated primary key at 4-byte boundaries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/CreateIndex.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nunique hash index X on T(A1,...,An) becomes:\\ntable X with primary key A1,...,An and extra attribute NDB$PK\\n\\nNDB$PK is primary key of T concatenated at 4-byte boundaries\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration with CMake\nDESCRIPTION: This snippet adds the Google Mock include directories to the CMake project, ensuring that the compiler can find the necessary header files for Google Mock during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES (${GMOCK_INCLUDE_DIRS})\"\n```\n\n----------------------------------------\n\nTITLE: CPCD Command Line Options\nDESCRIPTION: Command line options available for running the ndb_cpcd daemon, allowing for custom configurations when not using a configuration file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_SETUP_README.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-w, --work-dir=name\n    Work directory. Should be exist before starting ndb_cpcd. Usually it's $VARDIR/run/ndb_cpcd\n-p, --port=#\n    TCP port to listen on. By default 1234\n-S, --syslog\n    Log events to syslog\n-L, --logfile=name\n    File to log events to. Usually it's $VARDIR/run/ndb_cpcd/logfile.txt\n-D, --debug\n    Enable debug mode.\n-u, --user=name\n    Run as user\n```\n\n----------------------------------------\n\nTITLE: Generating Python Protobuf Files - Bash\nDESCRIPTION: This command uses protoc to generate Python files from proto definitions. By specifying the 'pyi_out' option, it can additionally create .pyi stub files for IDE support and introspection.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ protoc --python_out=pyi_out:output_dir\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Files List for MySQL Router Tests\nDESCRIPTION: Sets up a list of routing test files that will be compiled and included in the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEST_MODULE \"routing\")\nSET(test_files\n  test_block_clients.cc\n  # test_connection.cc\n  test_connection_container.cc\n  test_metadata_cache_group.cc\n  test_static_routing.cc\n  test_routing.cc\n  test_setup_named_socket_service.cc\n  test_setup_tcp_service.cc\n  test_auth_digest.cc\n  test_classic_quit_sender.cc\n  test_classic_reset_connection_sender.cc\n  test_sql_splitting_allowed.cc\n  test_start_transaction_parser.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testDict\nargs: -n CreateAndDropAtRandom -l 200 T1\nmax-time: 360\"\n```\n\n----------------------------------------\n\nTITLE: Testing Redo Process - MySQL Server - Bash\nDESCRIPTION: This snippet provides a command to test the redo process in the MySQL server. The 'testRedo' command is used with specific arguments to verify the functionality involved in the redo operation. No external dependencies are required apart from the MySQL server itself.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--01-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncmd: testRedo\nargs: -v -n RestartFD -l 2 T1\nmax-time: 5760\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_26\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testIndex\nargs: -n NFNR2 T6 T13\nmax-time: 1440\"\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Test Executables\nDESCRIPTION: For each defined test, this snippet generates a specific executable that is excluded from the all-target build, links necessary libraries, and specifies dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(test ${TESTS})\n  SET(SRC_FILES ${test}-t.cc)\n  MYSQL_ADD_EXECUTABLE(${test}-t ${SRC_FILES}\n    ENABLE_EXPORTS\n    EXCLUDE_FROM_ALL\n    SKIP_INSTALL\n    LINK_LIBRARIES gunit_large server_unittest_library\n    DEPENDENCIES GenError\n    )\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Creating CRUND Executable Target\nDESCRIPTION: Creates an executable target named crundAB using the previously defined source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/cpp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(crundAB ${CPP_CRUND_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Router App Test in CMake\nDESCRIPTION: Configures a test for the main MySQL Router application with dependencies on frontend libraries and additional filesystem utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_mysqlrouter_app.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_frontend_lib\n    routing_frontend_lib\n  EXTRA_SOURCES\n    ../../../tests/helpers/filesystem_utils.cc\n  INCLUDE_DIRS\n    ../../../tests/helpers/\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_SR_ManyTablesMaxFrag\nDESCRIPTION: This command executes an upgrade test designed for scenarios involving multiple tables and fragmentations, identified as 'Upgrade_SR_ManyTablesMaxFrag'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_SR_ManyTablesMaxFrag T1\nmax-time: 6000\n\n```\n\n----------------------------------------\n\nTITLE: ICU Regex Parser State Definition\nDESCRIPTION: This segment defines regex parser states for the ICU library using a text-based syntax. These definitions detail the possible states and transitions when reading a regular expression, specifying the behavior for opening parentheses, quantifiers, and capture groups, among others. The definitions are crafted to be processed by a Perl script that generates C arrays for state initialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n#  start state, scan position is at the beginning of the pattern.\nstart:\n   default                 term                                     doPatStart\n\n#  term.  At a position where we can accept the start most items in a pattern.\nterm:\n    quoted               n expr-quant                               doLiteralChar\n    rule_char            n expr-quant                               doLiteralChar\n    '['                  n set-open       ^set-finish               doSetBegin\n    '('                  n open-paren\n    '.'                  n expr-quant                               doDotAny\n    '^'                  n expr-quant                               doCaret\n    '$'                  n expr-quant                               doDollar\n    '\\'                  n backslash\n    '|'                  n  term                                    doOrOperator\n    ')'                  n  pop                                     doCloseParen\n    eof                    term                                     doPatFinish\n    default                errorDeath                               doRuleError\n\n# expr-quant    We've just finished scanning a term, now look for the optional\n#                trailing quantifier - *, +, ?, *?,  etc.\nexpr-quant:\n    '*'                  n  quant-star\n    '+'                  n  quant-plus\n    '?'                  n  quant-opt\n    '{'                  n  interval-open                          doIntervalInit\n    '('                  n  open-paren-quant\n    default                 expr-cont\n\n# expr-cont      Expression, continuation.  At a point where additional terms are\n#                                          allowed, but not required.  No Quantifiers\nexpr-cont:\n    '|'                  n  term                                    doOrOperator\n    ')'                  n  pop                                     doCloseParen\n    default                 term\n\n# open-paren-quant   Special case handling for comments appearing before a quantifier,\n#                      e.g.   x(?#comment )*\n#                    Open parens from expr-quant come here; anything but a (?# comment\n#                    branches into the normal parenthesis sequence as quickly as possible.\nopen-paren-quant:\n    '?'                  n  open-paren-quant2                      doSuppressComments\n    default                 open-paren\n\nopen-paren-quant2:\n    '#'                  n  paren-comment   ^expr-quant\n    default                 open-paren-extended\n\n# open-paren    We've got an open paren.  We need to scan further to\n#               determine what kind of quantifier it is - plain (, (?:, (?>, or whatever.\nopen-paren:\n    '?'                  n  open-paren-extended                     doSuppressComments\n    default                 term            ^expr-quant             doOpenCaptureParen\n\nopen-paren-extended:\n    ':'                  n  term            ^expr-quant             doOpenNonCaptureParen  #  (?:\n    '>'                  n  term            ^expr-quant             doOpenAtomicParen      #  (?>\n    '='                  n  term            ^expr-cont              doOpenLookAhead        #  (?=\n    '!'                  n  term            ^expr-cont              doOpenLookAheadNeg     #  (?!\n    '<'                  n  open-paren-lookbehind\n    '#'                  n  paren-comment   ^term\n    'i'                     paren-flag                              doBeginMatchMode\n    'd'                     paren-flag                              doBeginMatchMode\n    'm'                     paren-flag                              doBeginMatchMode\n    's'                     paren-flag                              doBeginMatchMode\n    'u'                     paren-flag                              doBeginMatchMode\n    'w'                     paren-flag                              doBeginMatchMode\n    'x'                     paren-flag                              doBeginMatchMode\n    '-'                     paren-flag                              doBeginMatchMode\n    '('                  n  errorDeath                              doConditionalExpr\n    '{'                  n  errorDeath                              doPerlInline\n    default                 errorDeath                              doBadOpenParenType\n\nopen-paren-lookbehind:\n    '='                  n  term            ^expr-cont              doOpenLookBehind       #  (?<=\n    '!'                  n  term            ^expr-cont              doOpenLookBehindNeg    #  (?<!\n    ascii_letter            named-capture                           doBeginNamedCapture    #  (?<name\n    default                 errorDeath                              doBadOpenParenType\n\n# paren-comment    We've got a (?# ... )  style comment.  Eat pattern text till we get to the ')'\nparen-comment:\n    ')'                  n  pop\n    eof                    errorDeath                              doMismatchedParenErr\n    default              n  paren-comment\n\n# paren-flag    Scanned a (?ismx-ismx  flag setting\nparen-flag:\n    'i'                  n  paren-flag                              doMatchMode\n    'd'                  n  paren-flag                              doMatchMode\n    'm'                  n  paren-flag                              doMatchMode\n    's'                  n  paren-flag                              doMatchMode\n    'u'                  n  paren-flag                              doMatchMode\n    'w'                  n  paren-flag                              doMatchMode\n    'x'                  n  paren-flag                              doMatchMode\n    '-'                  n  paren-flag                              doMatchMode\n    ')'                  n  term                                    doSetMatchMode\n    ':'                  n  term              ^expr-quant           doMatchModeParen\n    default                 errorDeath                              doBadModeFlag\n\n# named-capture    (?<name> ... ), position currently on the name.\nnamed-capture:\n    ascii_letter         n  named-capture                           doContinueNamedCapture\n    digit_char           n  named-capture                           doContinueNamedCapture\n    '>'                  n  term               ^expr-quant          doOpenCaptureParen      # common w non-named capture.\n    default                 errorDeath                              doBadNamedCapture\n\n# quant-star     Scanning a '*' quantifier.  Need to look ahead to decide\n#                between plain '*', '*?', '*+'\nquant-star:\n     '?'                 n  expr-cont                               doNGStar               #  *?\n     '+'                 n  expr-cont                               doPossessiveStar       #  *+\n     default                expr-cont                               doStar\n\n# quant-plus     Scanning a '+' quantifier.  Need to look ahead to decide\n#                between plain '+', '+?', '++'\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Command for Node Restart in MySQL\nDESCRIPTION: This snippet defines a test command for restarting a node. It specifies the test name (MixedPkReadPkUpdate), logging level (1), and a maximum execution time of 7920 seconds. This test likely involves reading and updating primary keys during the restart process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--06-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -l 1 -n MixedPkReadPkUpdate\nmax-time: 7920\"\n```\n\n----------------------------------------\n\nTITLE: Adding Default Paths Test in CMake\nDESCRIPTION: Configures a test for default paths functionality with dependency on router utilities library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_default_paths.cc\n  MODULE ${TEST_MODULE}\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n  LIB_DEPENDS\n    router_utils\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring rest_signal Plugin Build with CMake\nDESCRIPTION: Sets up the build configuration for the REST signal plugin for MySQL Router. The plugin requires rest_api_lib and rest_api components, and generates the necessary export headers for proper symbol visibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/rest_signal/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nADD_HARNESS_PLUGIN(rest_signal\n  SOURCES\n  rest_signal_plugin.cc\n  rest_signal_abort.cc\n  REQUIRES\n  rest_api_lib\n  rest_api\n  DESTINATION \"${ROUTER_INSTALL_PLUGINDIR}\"\n  NO_INSTALL\n  )\n\nGENERATE_EXPORT_HEADER(rest_signal\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/rest_signal_export.h)\n\nTARGET_INCLUDE_DIRECTORIES(rest_signal\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Specific Build Flags\nDESCRIPTION: Sets a compilation flag for the MySQL server. This flag is used to indicate that the build is specific to MySQL server components, ensuring proper compilation and linking within the MySQL build ecosystem.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/replication_observers_example/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\n```\n\n----------------------------------------\n\nTITLE: Starting Fragments and Completing MySQL Server Startup\nDESCRIPTION: This snippet shows the final steps of the MySQL Server startup process, including starting logged fragments and sending start requests to all LQHs (Local Query Handlers).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/SystemRestart.new.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nFor each fragment \n  IF Fragment is logged\n     START_FRAGREQ -> LQH x\n\n  START_RECREQ -> all LQH\n     Note does not wait for START_FRAGCONF\n\nNDB_STARTCONF ->\n```\n\n----------------------------------------\n\nTITLE: Character Pointer Mappings in NdbRecAttr Classes\nDESCRIPTION: Issues related to mapping C++ char* pointers in the NdbRecAttr and NdbRecAttrConst Java classes. These methods need proper translation between Java and C++ pointer types.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native char * aRef() /*_const_*/;\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: char * aRef() /*_const_*/;\n```\n\n----------------------------------------\n\nTITLE: Updating Patch Files with Maven Validate Command\nDESCRIPTION: This command updates the patch files to reflect changes made to the GraalVM Polyglot Library. It compiles necessary updates, removes temporary commits and tags, and creates a new commit. Updated commit descriptions should accurately describe changes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/polyglot-nativeapi/DEV_BUILD.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn -Dcommit validate\n```\n\n----------------------------------------\n\nTITLE: Defining Common Libraries for CMake Projects\nDESCRIPTION: This snippet defines necessary common libraries required for the building process, encompassing platform-specific libraries and OpenSSL dependencies. It sets up the appropriate library paths based on the compilation targets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/src/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(common_libraries ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT}\n  ${SHLWAPI_LIBRARIES} ${WINSOCK_LIBRARIES} OpenSSL::SSL OpenSSL::Crypto)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Library: per_thread_sem_test_common\nDESCRIPTION: This snippet defines an internal Abseil C++ library for testing per-thread semaphores, named `per_thread_sem_test_common`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::synchronization`, `absl::base`, `absl::config`, `absl::strings`, `absl::time`, and `GTest::gmock`. It's marked as `TESTONLY`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    per_thread_sem_test_common\n  SRCS\n    \\\"internal/per_thread_sem_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::base\n    absl::config\n    absl::strings\n    absl::time\n    GTest::gmock\n  TESTONLY\n)\"\n```\n\n----------------------------------------\n\nTITLE: Building Abseil with Traditional CMake Setup\nDESCRIPTION: Commands for configuring and building Abseil using the traditional CMake approach with external Google Test. This setup uses previously installed Google Test and enables Abseil installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S /source/abseil-cpp -B /build/abseil-cpp -DCMAKE_PREFIX_PATH=/installation/dir -DCMAKE_INSTALL_PREFIX=/installation/dir -DABSL_ENABLE_INSTALL=ON -DABSL_USE_EXTERNAL_GOOGLETEST=ON -DABSL_FIND_GOOGLETEST=ON\ncmake --build /temporary/build/abseil-cpp\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Bug14702377\nDESCRIPTION: This test command targets the bug identified as 'Bug14702377', specifically checking its impact and resolution during an upgrade scenario.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Bug14702377 T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Executing Test Restart Command in MySQL\nDESCRIPTION: This snippet details a command used to execute a restart test on MySQL, specifying the transaction ID (GCI) and other parameters. The 'testRestartGci' command requires specifying a node and a duration for how long the test should run. Max-time indicates the maximum allowable duration for the test to complete.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-basic--01-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testRestartGci\nargs: T6 D1\nmax-time: 6120\n```\n\n----------------------------------------\n\nTITLE: Creating JTIE Jar with CMake\nDESCRIPTION: The CREATE_JAR command compiles the listed JAVA_SOURCES into a JAR file named 'jtie', using the specified CLASSPATH. This operation is crucial in the package building step, facilitating Java integration in the MySQL build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(jtie ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH})\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Reflection Library in CMake\nDESCRIPTION: Creates a CMake target for the flags reflection library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_reflection\n  SRCS\n    \"reflection.cc\"\n  HDRS\n    \"reflection.h\"\n    \"internal/registry.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::flags_commandlineflag\n    absl::flags_private_handle_accessor\n    absl::flags_config\n    absl::strings\n    absl::synchronization\n    absl::flat_hash_map\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Parameters with CMake\nDESCRIPTION: This snippet sets compilation definitions for the MySQL server, including log tags for components, and disables specific warnings on MSVC. It is used to configure the build environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/semisync/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\nADD_DEFINITIONS(-DLOG_SUBSYSTEM_TAG=\\\"Repl\\\")\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\\\"semisync\\\")\nMSVC_CPPCHECK_DISABLE()\n\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Wide Multiply in CMake\nDESCRIPTION: Defines a CMake test target for testing the internal wide multiply component. This target compiles and links wide_multiply_test.cc with dependencies on absl::random_internal_wide_multiply, absl::bits, absl::int128, and testing frameworks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_wide_multiply_test\n  SRCS\n      internal/wide_multiply_test.cc\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_internal_wide_multiply\n    absl::bits\n    absl::int128\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Common Libraries Configuration for MySQL Mock Server\nDESCRIPTION: This snippet configures platform-specific libraries required for the MySQL server mock server, determining which libraries to link based on the target operating system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(common_libraries)\nIF(WIN32)\n  LIST(APPEND common_libraries ws2_32)\nELSEIF(SOLARIS)\n  LIST(APPEND common_libraries -lnsl -lsocket -lpthread)\nELSE()\n  LIST(APPEND common_libraries -lpthread)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Group Replication Plugin Modules Termination Lock Dependencies\nDESCRIPTION: Comprehensive mapping of mutex and lock interactions during group replication plugin modules termination, showing complex dependency relationships between various MySQL subsystems\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/innodb/lock_sys_page_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_policy_traits Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'hash_policy_traits' library target. It defines the header file, compiler options, and dependencies for hash policy traits utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash_policy_traits\n  HDRS\n    \"internal/hash_policy_traits.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::common_policy_traits\n    absl::meta\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: NDB Component Relationship Structure\nDESCRIPTION: Defines the relationship between NdbConnection, NdbScanOperation, and their interconnected references.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/ScanOperation.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nx) NdbConnection (main)\nm_theFirstCursorOperation -> y\n\ny) NdbScanOperation\nm_transConnection -> x\ntheNdbCon -> z\n\nz) NdbConnection (scan)\ntheScanningOp -> y\ntheFirstOpInList -> y (until after openScan)\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex Dependency Arcs in MySQL InnoDB Storage Engine\nDESCRIPTION: This code defines a directed graph of mutex dependencies in MySQL's InnoDB storage engine. Each line represents an arc from one mutex to another, sometimes with an operation specification (OP). These relationships help document and enforce locking order to prevent deadlocks in the database engine.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_6\n\nLANGUAGE: dot\nCODE:\n```\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"mutex/innodb/buf_pool_zip_free_mutex\"\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/dblwr_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/dict_foreign_err_mutex\" TO \"mutex/sql/THD::LOCK_thd_query\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_zip_free_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_zip_hash_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/log_limits_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/fil_space_latch\" OP \"X\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"SX\"\nARC FROM \"mutex/innodb/dict_persist_dirty_tables_mutex\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/autoinc_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_zip_free_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_zip_hash_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/clone_snapshot_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/clone_sys_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/dict_foreign_err_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/dict_persist_dirty_tables_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/dict_table_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/fts_delete_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/log_limits_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/master_key_id_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/page_zip_stat_per_index_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/purge_sys_pq_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/recalc_pool_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/rw_lock_list_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_sys_serialisation_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/trx_sys_shard_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/undo_space_rseg_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/innodb/zip_pad_mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/mysys/THR_LOCK_open\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/sql/LOCK_keyring_operations\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"prlock/sql/MDL_lock::rwlock\" OP \"W\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"rwlock/keyring/LOCK_keyring\" OP \"R\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"rwlock/keyring/LOCK_keyring\" OP \"W\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/dict_table_stats\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/dict_table_stats\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/fil_space_latch\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/fts_cache_init_rw_lock\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"SX\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/log_sn_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/rsegs_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_sys_mutex\" TO \"sxlock/innodb/undo_spaces_lock\" OP \"S\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/innodb/rw_lock_list_mutex\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"sxlock/innodb/dict_table_stats\" OP \"X\"\nARC FROM \"mutex/innodb/dict_table_mutex\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/innodb/fil_system_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/fil_system_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/fil_system_mutex\" TO \"mutex/innodb/rw_lock_list_mutex\"\nARC FROM \"mutex/innodb/fil_system_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/flush_list_mutex\" TO \"mutex/innodb/page_sys_arch_oper_mutex\"\nARC FROM \"mutex/innodb/flush_list_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"mutex/innodb/sync_array_mutex\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/innodb/ibuf_bitmap_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_zip_free_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_zip_hash_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/buf_pool_zip_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/lock_sys_page_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"mutex/innodb/sync_array_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Crund Executable Build in CMake\nDESCRIPTION: Configures the build for runCrund executable with NDB client dependencies and specific compile definitions for binary and classpath directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/helpers)\n\nNDB_ADD_EXECUTABLE(runCrund runCrund.cpp NDBCLIENT)\nTARGET_COMPILE_DEFINITIONS(runCrund PRIVATE\n                           CMAKE_BINARY_DIR=\\\"${CMAKE_BINARY_DIR}\\\"\n                           WITH_CLASSPATH=\\\"${WITH_CLASSPATH}\\\"\n                          )\n```\n\n----------------------------------------\n\nTITLE: Adding event tracking consumer components\nDESCRIPTION: Creates three consumer test components for event tracking. All are marked as module-only and test-only components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/event_tracking_test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_event_tracking_consumer_a\n  event_tracking_consumer_a.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n\nMYSQL_ADD_COMPONENT(test_event_tracking_consumer_b\n  event_tracking_consumer_b.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n\n  MYSQL_ADD_COMPONENT(test_event_tracking_consumer_c\n  event_tracking_consumer_c.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Test Case Validation in CMake\nDESCRIPTION: Defines a custom command that runs the test case validation and generates an output file for review.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(OUTPUT check_testcase_files.passed\n  COMMAND atrt\n          --check-testcase-files ${testcase_files}\n          > ${CMAKE_CURRENT_BINARY_DIR}/check_testcase_files.output\n  COMMAND echo See output in ${CMAKE_CURRENT_BINARY_DIR}/check_testcase_files.output\n          > ${CMAKE_CURRENT_BINARY_DIR}/check_testcase_files.passed\n          DEPENDS atrt ${testcase_files}\n          WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n          )\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Text Formatter in EventLogger.cpp\nDESCRIPTION: Implements the text formatter function for the EventBufferUsage event that converts the raw event data into a human-readable message with usage percentage calculation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid getTextEventBufferUsage(QQQQ) {\n  BaseString::snprintf(m_text, m_text_len,\n\t\t       \"Event buffer usage: %d(%d\\%)\",\n\t\t       theData[1],\n\t\t       theData[2] ? (theData[1]*100)/theData[2] : 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bit Generator Reference Target in CMake\nDESCRIPTION: Defines the 'random_bit_gen_ref' CMake target for the bit generator reference component. It specifies headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_bit_gen_ref\n  HDRS\n    \"bit_gen_ref.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::random_internal_distribution_caller\n    absl::random_internal_fast_uniform_bits\n    absl::type_traits\n)\n```\n\n----------------------------------------\n\nTITLE: Defining log_internal_structured Library\nDESCRIPTION: This snippet defines the `log_internal_structured` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependencies on `absl::config`, `absl::log_internal_message`, and `absl::strings`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_structured\n  HDRS\n    \"internal/structured.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_internal_message\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Algorithm Container Library in CMake\nDESCRIPTION: Configures the Abseil algorithm container utility library. It specifies the library name, header files, compilation options, and dependencies on other Abseil components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/algorithm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    algorithm_container\n  HDRS\n    \"container.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::algorithm\n    absl::core_headers\n    absl::meta\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Warning Flag for Shadow Variables in CMake\nDESCRIPTION: Adds shadow variable warnings to the compiler flags for building the keyring migration tool.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/client/migrate_keyring/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_WSHADOW_WARNING()\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Command: Blob Tests\nDESCRIPTION: Test configuration for blob-related tests with bug references and skipping options\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--13-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBlobs\nargs: -skip hp -bug 28116\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Example Test Case Definitions\nDESCRIPTION: Examples showing the definitions of test cases in the test case file, including parameters for execution time, commands, and arguments to be passed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_SETUP_README.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmax-time: 600\ncmd: testBlobs\nargs:\n\nmax-time: 1200\ncmd: testRead\nargs: -n PkRead\n\nmax-time: 3600\ncmd: atrt-mysql-test-run \nargs: --force\n\nmax-time: 120\ncmd: MyTest1 \nargs: -n\n\nmax-time: 180\ncmd: MyTest2 \nrun-all: yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Injection and Debug Options for NDB\nDESCRIPTION: Adds CMake options to enable error injection and special debug features for NDB.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nOPTION(WITH_ERROR_INSERT\n  \"Enable error injection in NDB\" OFF)\nIF(WITH_ERROR_INSERT)\n  ADD_DEFINITIONS(-DERROR_INSERT)\nENDIF()\n\nOPTION(WITH_NDB_DEBUG\n  \"Enable special ndb NDB features(including ERROR_INSERT)\" OFF)\nIF(WITH_NDB_DEBUG)\n  ADD_DEFINITIONS(${DEBUG_FLAGS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread-Local Storage Model Options in CMake\nDESCRIPTION: Removes specific thread-local storage model compiler flags from both C and C++ compilation, allowing the default value (global-dynamic with -fPIC) to be used instead of initial-exec.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nREMOVE_CMAKE_COMPILER_FLAGS(CMAKE_C_FLAGS \"-ftls-model=initial-exec\")\nREMOVE_CMAKE_COMPILER_FLAGS(CMAKE_CXX_FLAGS \"-ftls-model=initial-exec\")\n```\n\n----------------------------------------\n\nTITLE: Configuring flat_hash_set Library in CMake for Abseil\nDESCRIPTION: Sets up the 'flat_hash_set' library target, which provides a flat hash set implementation. It defines the header file, compiler options, and dependencies for the flat hash set component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flat_hash_set\n  HDRS\n    \"flat_hash_set.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::container_memory\n    absl::hash_function_defaults\n    absl::raw_hash_set\n    absl::algorithm_container\n    absl::core_headers\n    absl::memory\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding MySQL Server Test Executables in CMake\nDESCRIPTION: This snippet defines a list of tests and creates executable targets for each test. It uses a custom MYSQL_ADD_EXECUTABLE command to set up the test executables with specific linking and compilation options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/utils/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS\n  enumerations\n)\n\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc\n    ADD_TEST ${test}\n    LINK_LIBRARIES gunit_small\n    COMPILE_DEFINITIONS \"${DISABLE_PSI_DEFINITIONS}\")\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Test Executables\nDESCRIPTION: Defines and builds test executables for MySQL serialization components. Creates test targets with specific linking and compilation requirements for each test in the TESTS list.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/serialization/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  variable_length_integers\n  serializable\n)\n\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc\n    ADD_TEST ${test}\n    LINK_LIBRARIES mysql_serialization gunit_small\n    COMPILE_DEFINITIONS \"${DISABLE_PSI_DEFINITIONS}\")\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Harness Test Target and File Templates\nDESCRIPTION: This snippet defines a macro to get the target for a test and creates a directory for harness tests post-build. It also configures test file templates based on provided input data, which is crucial for setting up the testing environment for specific test cases related to the MySQL Router.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/keepalive/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nROUTERTEST_GET_TARGET(test_target \"test_plugin_keepalive.cc\" harness)\nCREATE_HARNESS_TEST_DIRECTORY_POST_BUILD(${test_target} keepalive)\nCONFIGURE_TEST_FILE_TEMPLATES(${CMAKE_CURRENT_SOURCE_DIR}/data\n  \"keepalive.cfg.in\")\n```\n\n----------------------------------------\n\nTITLE: Defining test command for scanning with extra next result bug\nDESCRIPTION: This snippet defines a test command 'testScan' with arguments specifying the test case 'extraNextResultBug11748194' and the database table 'T1'. It sets a maximum execution time of 180 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n extraNextResultBug11748194 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Setting Broken Java Files in CMake\nDESCRIPTION: Defines a list of Java files that are considered 'broken' and might need special handling during compilation. These files are located in various subdirectories of the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(BROKEN_JAVAC\n ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/testsuite/clusterj/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/testsuite/clusterj/domaintypehandler/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/testsuite/clusterj/model/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/testsuite/clusterj/util/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/../clusterj-unit/src/main/java/junit/framework/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/../clusterj-unit/src/main/java/junit/textui/*.java\n ${CMAKE_CURRENT_SOURCE_DIR}/../clusterj-unit/src/main/java/org/junit/*.java)\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Test Executables (CMake)\nDESCRIPTION: These lines use the custom CMake macro `NDB_ADD_EXECUTABLE` to define and build several executable programs for testing NDB. Each line specifies the target executable name, the main source file, and required dependencies like `NDBTEST` and `NDBCLIENT`. The macro handles the details of compiling and linking the executables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoFill hugoFill.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoLoad hugoLoad.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoLockRecords hugoLockRecords.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoPkDelete hugoPkDelete.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoPkRead hugoPkRead.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoPkReadRecord hugoPkReadRecord.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoPkUpdate hugoPkUpdate.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoScanRead hugoScanRead.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoScanUpdate hugoScanUpdate.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(restart restart.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(verify_index verify_index.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(copy_tab copy_tab.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(create_index create_index.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(hugoJoin hugoJoin.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(ndb_connect connect.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(create_fk create_fk.cpp NDBTEST NDBCLIENT)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(drop_fk drop_fk.cpp NDBTEST NDBCLIENT)\"\n```\n\n----------------------------------------\n\nTITLE: Operations Testing in Shell\nDESCRIPTION: This test is configured to handle general operations in MySQL through specified test commands. It checks comprehensive operations for edge case result checking and outputs, running commands unchecked for specific parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 7200\ncmd: testOperations\nargs:\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Test Command\nDESCRIPTION: Executes a test command using predefined test scripts and arguments. Dependencies include access to the MySQL test environment and necessary permissions. Key parameters: 'cmd' denotes the script to run, 'args' specifies the arguments, and 'max-time' sets a time limit for execution. It provides structured command execution to verify different MySQL server components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--10-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n InsertError2 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testLimits\nargs: -n ExhaustSegmentedSectionIx WIDE_2COL_IX\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n Bug48700 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n ScanDelete2 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n Bug44015 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n NoCommitRollback630 T1 T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n OnlyOneOpInScanTrans T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -l 1 -n SR8 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n ScanUpdateAndScanRead T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug36199 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n ScanUpdateAbort16 T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testIndex\nargs: -n ConstraintDetails\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n GetTabInfoRef T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug32160 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n Bug41905 T1\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testAsynchMultiwait\nargs: -n AsynchMultiwait_Version2 T1\nmax-time: 540\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testScan\nargs: -n CheckInactivityBeforeClose T6 D1 D2\nmax-time: 180\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n Bug58277 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: test_event\nargs: -n Bug34853 T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testOIBasic\nargs: -case gz\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBasic\nargs: -n DDInsertFailUpdateBatch\nmax-time: 900\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBackup\nargs: -n FailMaster T1\nmax-time: 360\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n Bug36702 D1\nmax-time: 1080\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug25554 T1\nmax-time: 1260\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testBackup\nargs: -n NFMasterAsSlave T1\nmax-time: 900\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n NoLoad T6\nmax-time: 1080\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testIndex\nargs: -n NFNR2_O T6 T13\nmax-time: 1260\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug48474 T1\nmax-time: 1080\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: test_event\nargs: -n CreateDropNR T1\nmax-time: 3240\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n RestartRandomNodeInitial T6 T13\nmax-time: 4860\n```\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n FiftyPercentStopAndWait T6 T13\nmax-time: 4500\n```\n\n----------------------------------------\n\nTITLE: Generating Fuzzing Coverage Reports with Make\nDESCRIPTION: Command to generate HTML coverage reports for the fuzzing tests, which will be saved in the tests/fuzzers directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/fuzzers/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make fuzz-coverage.html\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties for NdbJTie in CMake\nDESCRIPTION: Applies the 'NDB' label to all NdbJTie tests for easier identification and grouping in the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET_TESTS_PROPERTIES(\n  test_ndbjtie_constants\n  test_ndbjtie_multilib\n  test_ndbjtie_mutils\n  test_ndbjtie_smoke\n  test_ndbjtie_unload_constants\n  test_ndbjtie_unload_multilib\n  test_ndbjtie_unload_mutils\n  test_ndbjtie_unload_smoke\n  PROPERTIES LABELS \"NDB\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB General Library Properties in CMake\nDESCRIPTION: Sets properties for the NDB general library, specifically handling cyclic dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET_TARGET_PROPERTIES(ndbgeneral PROPERTIES LINK_INTERFACE_MULTIPLICITY 3)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Flags for Windows in CMake\nDESCRIPTION: This snippet checks if the build target is Windows (WIN32) and adds the `/bigobj` compile flag for `test_classic_protocol_message.cc` if it is. This flag is used to allow object files larger than the default limit.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_protocol/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32)\n  ADD_COMPILE_FLAGS(\n    test_classic_protocol_message.cc\n    COMPILE_FLAGS \\\"/bigobj\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Performance Schema Consumer in MySQL\nDESCRIPTION: This SQL query enables a specific Performance Schema consumer (EVENTS_WAITS_CURRENT). It's used in multiple configurations to set up specific monitoring scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/conf.txt#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE performance_schema.SETUP_CONSUMERS\n  set enabled='YES' where name='EVENTS_WAITS_CURRENT';\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Directory Path for MySQL Server in CMake\nDESCRIPTION: This snippet sets the binary directory path for MySQL server installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-common/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(bindir \"${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: NdbRecordCICharPKUpdate\nDESCRIPTION: This snippet configures a test command testing the handling of updates for a character-based primary key in Ndb records. It outlines the arguments and sets a max execution time, ensuring thorough validation of the update mechanism.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNdbApi\nargs: -n NdbRecordCICharPKUpdate T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Sample ATRT Test Case Configuration\nDESCRIPTION: Example test case configuration demonstrating basic ATRT test setup with time limit and test command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_USAGE_README.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead? T1\n```\n\n----------------------------------------\n\nTITLE: Configuring container_memory Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'container_memory' library target. It defines the header file, compiler options, and dependencies for container memory management utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    container_memory\n  HDRS\n    \"internal/container_memory.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::memory\n    absl::type_traits\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in CMake\nDESCRIPTION: This CMake command disables warnings for missing profiles in the build process. It's used to suppress profiling-related warnings for test components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/perfschema/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Fast Uniform Bits Library - C++\nDESCRIPTION: Defines an internal library that manages fast uniform bits generation functionalities, detailing required header files, dependencies, and options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_fast_uniform_bits\n  HDRS\n    \"internal/fast_uniform_bits.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n)\n```\n\n----------------------------------------\n\nTITLE: Defining test command for NDB API\nDESCRIPTION: This snippet configures the 'testNdbApi' command to test the 'FragmentedApiFailure' scenario with table 'T1', allowing a maximum time of 300 seconds for execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNdbApi\nargs: -n FragmentedApiFailure T1\nmax-time: 300\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: mutex_method_pointer_test\nDESCRIPTION: This snippet defines an Abseil C++ test for mutex method pointers, named `mutex_method_pointer_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::base`, `absl::config`, `absl::synchronization`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    mutex_method_pointer_test\n  SRCS\n    \\\"mutex_method_pointer_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::synchronization\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring node_hash_set Library in CMake for Abseil\nDESCRIPTION: Sets up the 'node_hash_set' library target, which provides a node-based hash set implementation. It defines the header file, compiler options, and dependencies for the node hash set component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    node_hash_set\n  HDRS\n    \"node_hash_set.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n    absl::hash_function_defaults\n    absl::node_slot_policy\n    absl::raw_hash_set\n    absl::algorithm_container\n    absl::memory\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Warning Check for uca9dump\nDESCRIPTION: This code checks for a specific compiler warning (`-Wmissing-profile`). If the warning is present, it adds the warning flag to the compilation of `uca9-dump.cc`. This ensures that the code is compiled with the necessary warning checks, if supported by the compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  ADD_COMPILE_FLAGS(uca9-dump.cc COMPILE_FLAGS ${HAS_MISSING_PROFILE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Tests in CMake\nDESCRIPTION: Defines several NDB test targets including NdbHW-t, NdbDir-t, NdbGetInAddr-t, and NdbProcess-t, linking against the appropriate libraries for each test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(NdbHW-t NdbHW.cpp LIBS ndbmgmapi ndbgeneral ndbportlib)\n\nNDB_ADD_TEST(NdbDir-t NdbDir.cpp LIBS ndbmgmapi ndbgeneral ndbportlib)\n\nNDB_ADD_TEST(NdbGetInAddr-t NdbTCP.cpp LIBS ndbgeneral ${LIBSOCKET} ${LIBNSL})\nNDB_ADD_TEST(NdbProcess-t NdbProcess.cpp LIBS ndbmgmapi ndbgeneral ndbportlib)\n```\n\n----------------------------------------\n\nTITLE: Test Dictionary Command Configuration\nDESCRIPTION: Defines a test command for dictionary restart with specific arguments and maximum time limit\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--05-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\ncmd: testDict\nargs: -l 25 -n DictRestart T1\nmax-time: 6660\n```\n\n----------------------------------------\n\nTITLE: ATRT Test Execution with Logging\nDESCRIPTION: Runs ATRT with log file generation for detailed test investigation and error tracking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_USAGE_README.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\natrt --log-file=log.txt --testcase-file=atrt_test_case_file\n```\n\n----------------------------------------\n\nTITLE: Adding Executables for zlob0int in CMake\nDESCRIPTION: This snippet defines an executable target for zlob0int that compiles the set ZLOB source files. It includes options to skip installation and enable exports, linking it with external libraries as necessary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(zlob0int-t ${ZLOB_SRC_FILES}\\n  SKIP_INSTALL\\n  ENABLE_EXPORTS\\n  LINK_LIBRARIES ext::zlib ${GTEST_LIBRARIES} gunit_small\\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: CloseWithoutStop\nDESCRIPTION: This test command inspects the system behavior when closing without stopping a process properly, providing insight into potential resource leaks or locking issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncmd: testScan\nargs: -n CloseWithoutStop T6 D1 D2\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring sample_recorder_test in CMake\nDESCRIPTION: Defines the absl_cc_test target for testing the sample_recorder library. Specifies the test source file and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    sample_recorder_test\n  SRCS\n    \"internal/sample_recorder_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::sample_recorder\n    absl::time\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Consumption Library in Abseil\nDESCRIPTION: Creates an internal test-only library for measuring stack consumption, useful for checking stack usage in tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Internal-only target, do not depend on directly.\nabsl_cc_library(\n  NAME\n    stack_consumption\n  HDRS\n    \"internal/stack_consumption.h\"\n  SRCS\n    \"internal/stack_consumption.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::raw_logging_internal\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Defining NO Error Message\nDESCRIPTION: Defines error message translations for 'NO' error type, including an unsupported language entry.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_phantom_lang.txt#2025-04-21_snippet_2\n\nLANGUAGE: mysql-error\nCODE:\n```\nER_NO\n\teng \"NO\"\n\txxx \"Hi I'm a language not listed in the languages directive and should throw an error!\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testAsynchMultiwait\nargs: -n AsynchMultiwaitPkRead T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Setting JTIE Java API Source Paths in CMake\nDESCRIPTION: This snippet sets the variable CLUSTERJ_JTIE_PREFIX to the path of the JTIE Java API source files. It is a preparatory step for path management within the build process, essential for locating Java class files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLUSTERJ_JTIE_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/com/mysql/jtie/)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Abseil Installation Rules\nDESCRIPTION: Configures installation rules for Abseil, including targets, config files, and header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(ABSL_ENABLE_INSTALL)\n  install(EXPORT ${PROJECT_NAME}Targets\n    NAMESPACE absl::\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  configure_package_config_file(\n    CMake/abslConfig.cmake.in\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  install(FILES \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  install(DIRECTORY absl\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    FILES_MATCHING\n      PATTERN \"*.inc\"\n      PATTERN \"*.h\"\n      PATTERN \"copts\" EXCLUDE\n      PATTERN \"testdata\" EXCLUDE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Compiler Options for xxHash in CMake\nDESCRIPTION: Adds platform-specific compiler options for Solaris and Unix systems. For Solaris, it disables the 'undef' warning, and for Unix systems, it sets the visibility to hidden.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/xxhash/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(SOLARIS)\n  TARGET_COMPILE_OPTIONS(xxhash_lib PRIVATE \"-Wno-undef\")\nENDIF()\n\nIF(UNIX)\n  TARGET_COMPILE_OPTIONS(xxhash_lib PRIVATE \"-fvisibility=hidden\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring tcmalloc_debug Unit Tests with CMake\nDESCRIPTION: Sets up unit tests for the tcmalloc_debug library, including test targets for the sampler, sampling, heap profiler, and heap checker functionality. The tests are only built when BUILD_TESTING is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_executable(tcmalloc_debug_unittest ${tcmalloc_unittest_SOURCES})\n  target_compile_definitions(tcmalloc_debug_unittest PRIVATE DEBUGALLOCATION ${tcmalloc_unittest})\n  target_link_libraries(tcmalloc_debug_unittest tcmalloc_debug ${tcmalloc_unittest_LIBADD})\n  add_test(tcmalloc_debug_unittest tcmalloc_debug_unittest)\n\n  add_executable(sampler_debug_test ${sampler_test_SOURCES})\n  target_link_libraries(sampler_debug_test tcmalloc_debug ${tcmalloc_unittest_LIBADD})\n  add_test(sampler_debug_test sampler_debug_test)\n\n  add_executable(sampling_debug_test ${sampling_test_SOURCES})\n  target_link_libraries(sampling_debug_test ${TCMALLOC_FLAGS} tcmalloc_debug Threads::Threads)\n  add_test(sampling_debug_test.sh \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/sampling_test.sh\" sampling_debug_test)\n\n  if(GPERFTOOLS_BUILD_HEAP_PROFILER)\n    add_executable(heap_profiler_debug_unittest ${heap_profiler_unittest_SOURCES})\n    target_link_libraries(heap_profiler_debug_unittest ${TCMALLOC_FLAGS} tcmalloc_debug Threads::Threads)\n    add_test(heap-profiler_debug_unittest.sh \"${CMAKE_CURRENT_SOURCE_DIR}/src/tests/heap-profiler_unittest.sh\" heap-profiler_debug_unittest)\n  endif()\n  if(GPERFTOOLS_BUILD_HEAP_CHECKER)\n    add_executable(heap_checker_debug_unittest ${heap_checker_unittest_SOURCES})\n    target_link_libraries(heap_checker_debug_unittest ${TCMALLOC_FLAGS} tcmalloc_debug logging Threads::Threads)\n    add_test(heap_checker_debug_unittest heap_checker_debug_unittest)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Schema Consumers in MySQL\nDESCRIPTION: This SQL query disables all Performance Schema consumers. It's used in multiple configurations to reset the consumer settings before applying specific configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/conf.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE performance_schema.SETUP_CONSUMERS\n  set enabled='NO';\n```\n\n----------------------------------------\n\nTITLE: Executing testScan Command in MySQL\nDESCRIPTION: This code snippet defines the 'testScan' command with various arguments to execute scanning tests in MySQL. Each test specifies the scan name and applies a time limit for execution. The expected inputs are the scan configuration names and the outputs are the results of the scan operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -nScanFragRecExhaust T1\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanRead16\nmax-time: 180\n\ncmd: testScan\nargs: -n Bug42559 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanWithLocksAndInserts T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanReaderror5022 T1 D1 D2\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: Configuring Bug Fix Tests for MySQL NDB Cluster\nDESCRIPTION: A series of test configurations that validate specific bug fixes in NDB Cluster. Each test targets a specific bug identified by its bug number and includes relevant test parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_9\n\nLANGUAGE: plain\nCODE:\n```\nmax-time: 500\ncmd: testNativeDefault\nargs: \n\n# Bug18408705 added on 17.04.2014\n#max-time: 500\n#cmd: testDict\n#args: -n Bug53944 T1\n#\nmax-time: 300\ncmd: testIndex\nargs: -n Bug56829 T1\n\nmax-time: 300\ncmd: testIndex\nargs: -n Bug12315582 T1\n\nmax-time: 300\ncmd: testIndex\nargs: -n Bug60851 T1\n\nmax-time: 500\ncmd: testNodeRestart\nargs: -n ForceStopAndRestart T1\n\nmax-time: 300\ncmd: testDict\nargs: -n Bug58277 T1\n\nmax-time: 300\ncmd: testDict\nargs: -n Bug57057 T1\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Fuzzers with Make\nDESCRIPTION: Command to run all fuzzers for a duration of 10 seconds using make.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/fuzzers/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make fuzz\n```\n\n----------------------------------------\n\nTITLE: Including CMake Configuration Files\nDESCRIPTION: This section includes various CMake configuration files. These files likely contain additional settings, macros, or functions used to configure the build process. They might handle tasks like compiler detection, dependency management, or code generation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE(cmake/configure.cmake)\"\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(cmake/mysql_gcs.h.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/include/mysql/gcs/mysql_gcs.h)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(cmake/xcom.h.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/include/xcom/xcom.h)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(cmake/xcom_debug.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/xcom/task_debug.h COPYONLY)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(cmake/gcs_debug.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/xcom/gcs_debug.h COPYONLY)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"CONFIGURE_FILE(cmake/gcs_profile.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/xcom/xcom_profile.h COPYONLY)\"\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE(cmake/rpcgen.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for Testing\nDESCRIPTION: Creates a static library version for testing purposes, inheriting include directories, compile options, and definitions from the object library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(routing_guidelines-static STATIC\n  $<TARGET_OBJECTS:routing_guidelines-objects>)\nTARGET_INCLUDE_DIRECTORIES(routing_guidelines-static PUBLIC\n  $<TARGET_PROPERTY:routing_guidelines-objects,INCLUDE_DIRECTORIES>\n  )\nTARGET_COMPILE_OPTIONS(routing_guidelines-static PUBLIC\n  $<TARGET_PROPERTY:routing_guidelines-objects,COMPILE_OPTIONS>\n  )\nTARGET_COMPILE_DEFINITIONS(routing_guidelines-static PUBLIC\n  $<TARGET_PROPERTY:routing_guidelines-objects,COMPILE_DEFINITIONS>\n  )\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data Matrix\nDESCRIPTION: Matrix of special characters and numeric values arranged in rows. Each row begins with a special character repeated 4 times, followed by numeric values including integers and floating point numbers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/memory_tb1.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n!\\t!\\t!\\t!\\t125\\t69\\t107\\t223\\t9324\\t34526\\t518\\t41335\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t-5\\t1\\t1\\t1\\t1\\t1\\t1\\t-5\\t0.0\\t1\\t0.0\\t1\\t0.0\\t1\\t0.0\\t-5\\t1\\t1\\t1\\t-5\\t-5\\n@\\t@\\t@\\t@\\t33\\t206\\t121\\t215\\t9380\\t15833\\t14975\\t52816\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t-4\\t2\\t2\\t2\\t2\\t2\\t2\\t-4\\t1.1\\t2\\t1.1\\t2\\t1.1\\t2\\t1.1\\t-4\\t2\\t2\\t2\\t-4\\t-4\\n#\\t#\\t#\\t#\\t117\\t5\\t25\\t30\\t21071\\t22894\\t7157\\t52356\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t-3\\t3\\t3\\t3\\t3\\t3\\t3\\t-3\\t2.2\\t3\\t2.2\\t3\\t2.2\\t3\\t2.2\\t-3\\t3\\t3\\t3\\t-3\\t-3\\n$\\t$\\t$\\t$\\t2\\t19\\t61\\t214\\t1220\\t9289\\t14636\\t719\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t-2\\t4\\t4\\t4\\t4\\t4\\t4\\t-2\\t3.3\\t4\\t3.3\\t4\\t3.3\\t4\\t3.3\\t-2\\t4\\t4\\t4\\t-2\\t-2\\n%\\t%\\t%\\t%\\t102\\t185\\t122\\t228\\t21359\\t20663\\t7136\\t60130\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t-1\\t5\\t5\\t5\\t5\\t5\\t5\\t-1\\t4.4\\t5\\t4.4\\t5\\t4.4\\t5\\t4.4\\t-1\\t5\\t5\\t5\\t-1\\t-1\\n^\\t^\\t^\\t^\\t24\\t48\\t102\\t248\\t30907\\t13155\\t26008\\t11892\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t0\\t6\\t6\\t6\\t6\\t6\\t6\\t0\\t5.5\\t6\\t5.5\\t6\\t5.5\\t6\\t5.5\\t0\\t6\\t6\\t6\\t0\\t0\\n&\\t&\\t&\\t&\\t68\\t95\\t123\\t253\\t26999\\t2063\\t7957\\t49062\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t1\\t7\\t7\\t7\\t7\\t7\\t7\\t1\\t6.6\\t7\\t6.6\\t7\\t6.6\\t7\\t6.6\\t1\\t7\\t7\\t7\\t1\\t1\\n*\\t*\\t*\\t*\\t114\\t116\\t86\\t237\\t16008\\t64728\\t29018\\t63686\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t2\\t8\\t8\\t8\\t8\\t8\\t8\\t2\\t7.7\\t8\\t7.7\\t8\\t7.7\\t8\\t7.7\\t2\\t8\\t8\\t8\\t2\\t2\\n(\\t(\\t(\\t(\\t102\\t120\\t12\\t166\\t7011\\t231\\t28948\\t43386\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t3\\t9\\t9\\t9\\t9\\t9\\t9\\t3\\t8.8\\t9\\t8.8\\t9\\t8.8\\t9\\t8.8\\t3\\t9\\t9\\t9\\t3\\t3\\n)\\t)\\t)\\t)\\t14\\t162\\t113\\t166\\t15432\\t23427\\t9909\\t55743\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t4\\t10\\t10\\t10\\t10\\t10\\t10\\t4\\t9.9\\t10\\t9.9\\t10\\t9.9\\t10\\t9.9\\t4\\t10\\t10\\t10\\t4\\t4\n```\n\n----------------------------------------\n\nTITLE: Node Restart Test Command 1\nDESCRIPTION: Test configuration for node restart with mixed read and update scan, limited to 1 iteration with a maximum time of 7560 seconds\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--04-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -l 1 -n MixedReadUpdateScan\nmax-time: 7560\n```\n\n----------------------------------------\n\nTITLE: Configure NDB JTie Library Build in CMake\nDESCRIPTION: Adds a convenience library target for ndbjtie, specifying the source file and include directories for JNI headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbjtie\n  ndbjtie_lib.cpp\n  INCLUDE_DIRECTORIES\n  ${JNI_INCLUDE_DIRS}\n  jtie\n  utils\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing LOAD_FILE function in MySQL Server\nDESCRIPTION: Implementation of the LOAD_FILE SQL function that reads a file's content into a string. The function validates file access permissions, checks file size limitations, and returns the file content as a string value.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/load_file.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/* Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/**\n  @file\n\n  @brief\n  Functions to read textfiles and store the read word in a buffer.\n  This file is included by sql_load.cc\n*/\n\n#include \"sql/sql_class.h\" /* For THD */\n\n#include <fcntl.h>\n\n/**\n  Read a text file into a buffer and return it as a String.\n\n  @note\n    We assume that the file contains ascii text as default, but if\n    the first byte is 0xEF, 0xBB and the next byte 0xBF, we assume UTF-8.\n\n  @param name        Name of file to read\n  @param file_length Return length of file\n  @param [out] error         Error code\n\n  @retval\n    String\n  @retval\n    NULL on error.\n*/\n\nString *load_file(THD *thd, const char *name, size_t *file_length,\n                  bool *error) {\n  char convert_buffer[STRING_BUFFER_USUAL_SIZE];\n  String convert_string(convert_buffer, sizeof(convert_buffer),\n                        thd->variables.character_set_client);\n  PSI_file_locker_state state;\n  File file;\n  String *read_string;\n  *error = false;\n  DBUG_TRACE;\n\n  DBUG_PRINT(\"enter\", (\"name: '%s'\", name));\n\n  // GMS: Check if the file size is smaller than load_data_max_size_bytes. \n  // Should we use the file_attr here for check or load the file size later?\n  // We are using stat here in file_exists()\n  ulong max_file_size = static_cast<ulong>(thd->variables.max_allowed_packet);\n  if (thd->is_admin_connection()) {\n    max_file_size = std::min(static_cast<ulong>(thd->variables.max_allowed_packet),\n                             thd->m_admin_connection->m_max_load_data_size);\n  }\n\n  /* Read the file */\n  *file_length = 0;\n\n  if ((file = mysql_file_open(key_file_loadfile, name, O_RDONLY, MYF(0),\n                              &state)) < 0) {\n    my_error(ER_FILE_NOT_FOUND, MYF(0), name, my_errno());\n    goto err;\n  }\n\n  read_string = new (thd->mem_root) String(thd->variables.net_buffer_length);\n\n  my_off_t size = mysql_file_seek(file, 0L, MY_SEEK_END, MYF(0));\n\n  if (unlikely(size < 0)) {\n    my_error(ER_ERROR_ON_READ, MYF(0), name, my_errno());\n    goto err_with_file;\n  }\n  if (size == 0) goto empty_file;\n\n  if (size > max_file_size) {\n    my_error(ER_FILE_TOO_LARGE, MYF(0), name);\n    goto err_with_file;\n  }\n\n  if (mysql_file_seek(file, 0L, MY_SEEK_SET, MYF(0)) == MY_FILEPOS_ERROR) {\n    my_error(ER_ERROR_ON_READ, MYF(0), name, my_errno());\n    goto err_with_file;\n  }\n\n  if (read_string->reserve(static_cast<uint>(size))) goto err_with_file;\n\n  if (mysql_file_read(file, (uchar *)read_string->ptr(), size, MYF(MY_NABP)) ||\n      read_string->length(static_cast<uint>(size))) {\n    my_error(ER_ERROR_ON_READ, MYF(0), name, my_errno());\n    delete read_string;\n    goto err_with_file;\n  }\n\n  /*\n    A file ends by '\\0', but an SQL statement can continue on the next line\n  */\n  if (read_string->length() > 0 && read_string->ptr()[read_string->length() - 1] == '\\0')\n    read_string->length(read_string->length() - 1);\n\n  /*\n    If the file is in utf8, check the file for a bom and skip it\n    The bom is three bytes 0xEF, 0xBB, 0xBF\n  */\n  if (read_string->length() > READ_BOM_SIZE &&\n      (uchar)read_string->ptr()[0] == READ_BOM_BYTE_1 &&\n      (uchar)read_string->ptr()[1] == READ_BOM_BYTE_2 &&\n      (uchar)read_string->ptr()[2] == READ_BOM_BYTE_3) {\n    read_string->replace(0, READ_BOM_SIZE, nullptr, 0);\n  }\n\nempty_file:\n  mysql_file_close(file, MYF(0));\n  *file_length = read_string->length();\n  return read_string;\n\nerr_with_file:\n  mysql_file_close(file, MYF(0));\nerr:\n  *error = true;\n  return nullptr;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding objdump Target for MySQL Server\nDESCRIPTION: Adds a target to generate objdump output for the mysqld executable, useful for analyzing exported symbols.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\n# You may want to redirect output for this one,\n# the list of exported symbols is loooong.\nADD_OBJDUMP_TARGET(show_mysqld \"$<TARGET_FILE:mysqld>\" DEPENDS mysqld)\n```\n\n----------------------------------------\n\nTITLE: Defining Main Flags Library in CMake\nDESCRIPTION: Creates the main CMake target for the flags library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags\n  SRCS\n    \"flag.cc\"\n  HDRS\n    \"declare.h\"\n    \"flag.h\"\n    \"internal/flag_msvc.inc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::flags_commandlineflag\n    absl::flags_config\n    absl::flags_internal\n    absl::flags_reflection\n    absl::base\n    absl::core_headers\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Registering MySQL Change Streams Test Executables\nDESCRIPTION: Iterates through all defined tests and creates executable targets for each one. Each test is configured to use its corresponding source file, linked with the previously defined libraries, and registered as a test in the CMake test system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/src/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test} ${TESTS_DIR}/${test}.cpp\n    ADD_TEST ${test}\n    LINK_LIBRARIES ${TEST_LINK_LIBRARIES})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Sending Event from ndbapi (Internal)\nDESCRIPTION: Code for sending the EventBufferUsage event from the internal ndbapi component by preparing the event data array and calling the send_event_report method.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nUint32 data[3];\ndata[0]= NDB_LE_EventBufferUsage;\ndata[1]= 0;\ndata[2]= 0;\nm_ndb->theImpl->send_event_report(data,3);\n```\n\n----------------------------------------\n\nTITLE: Defining Random Examples Test - C++\nDESCRIPTION: Defines a general test for the random examples, which uses the random random library and the GTest framework for validation purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_examples_test\n  SRCS\n    \"examples_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_random\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Charset Test Suite\nDESCRIPTION: Command to execute the funcs_2 test suite using the MySQL test run script. This runs all charset and collation tests across supported storage engines.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/funcs_2/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./mysql-test-run.pl --suite=funcs_2\n```\n\n----------------------------------------\n\nTITLE: Parsing Optional Quantifiers - Regex\nDESCRIPTION: Handles parsing for optional quantifiers like '?', '??', and '?+' in regex patterns. Key actions are branching based on the subsequent character to determine the type and behavior of the quantifier.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\nquant-opt:\n     '?'                 n  expr-cont                               doNGOpt                 #  ??\n     '+'                 n  expr-cont                               doPossessiveOpt         #  ?+\n     default                expr-cont                               doOpt                   #  ?\n```\n\n----------------------------------------\n\nTITLE: Configure MySQL Log Rotate Script\nDESCRIPTION: This snippet configures the `mysql-log-rotate` script from a template file (`mysql-log-rotate.in`). The configured script is placed in the binary directory. The `@ONLY` option ensures that only variables defined in CMake are expanded in the template.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/mysql-log-rotate.in\n  ${CMAKE_CURRENT_BINARY_DIR}/mysql-log-rotate @ONLY)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring container_memory_test in CMake for Abseil\nDESCRIPTION: Defines the 'container_memory_test' target for testing the container memory implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    container_memory_test\n  SRCS\n    \"internal/container_memory_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::container_memory\n    absl::strings\n    absl::test_instance_tracker\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Log Uniform Int Distribution Test - C++\nDESCRIPTION: Defines a test for the log uniform integer distribution focusing on source files and dependencies which validate the implementation and functionalities of the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_log_uniform_int_distribution_test\n  SRCS\n    \"log_uniform_int_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Benchmark Configuration\nDESCRIPTION: Benchmark test configurations for asynchronous database operations with varying parameters for load testing\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 1\ntype: bench\n\nmax-time: 180\ncmd: DbAsyncGenerator\nargs: -time 60 -p 25\ntype: bench\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library for NDB Blocks in CMake\nDESCRIPTION: Creates a static library named 'ndbblocks' with a large list of source files using CMake's ADD_STATIC_LIBRARY command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_STATIC_LIBRARY(ndbblocks\n  LocalProxy.cpp\n  PgmanProxy.cpp\n  RestoreProxy.cpp\n  backup/QBackup.cpp\n  backup/QBackupProxy.cpp\n  backup/Backup.cpp\n  backup/BackupInit.cpp\n  backup/BackupProxy.cpp\n  cmvmi/Cmvmi.cpp\n  dbacc/Dbqacc.cpp\n  dbacc/DbqaccProxy.cpp\n  dbacc/DbaccInit.cpp\n  dbacc/DbaccMain.cpp\n  dbacc/DbaccProxy.cpp\n  dbdict/Dbdict.cpp\n  dbdih/DbdihInit.cpp\n  dbdih/DbdihMain.cpp\n  dbdih/Sysfile.cpp\n  dbgdm/DbgdmProxy.cpp\n  dbinfo/Dbinfo.cpp\n  dblqh/DblqhCommon.cpp\n  dblqh/DblqhInit.cpp\n  dblqh/DblqhMain.cpp\n  dblqh/DblqhProxy.cpp\n  dblqh/Dbqlqh.cpp\n  dblqh/DbqlqhProxy.cpp\n  dbspj/DbspjInit.cpp\n  dbspj/DbspjMain.cpp\n  dbspj/DbspjProxy.cpp\n  dbtc/DbtcInit.cpp\n  dbtc/DbtcMain.cpp\n  dbtc/DbtcProxy.cpp\n  dbtup/Dbqtup.cpp\n  dbtup/DbqtupProxy.cpp\n  dbtup/DbtupAbort.cpp\n  dbtup/DbtupBuffer.cpp\n  dbtup/DbtupClient.cpp\n  dbtup/DbtupCommit.cpp\n  dbtup/DbtupDebug.cpp\n  dbtup/DbtupDiskAlloc.cpp\n  dbtup/DbtupExecQuery.cpp\n  dbtup/DbtupFixAlloc.cpp\n  dbtup/DbtupGen.cpp\n  dbtup/DbtupIndex.cpp\n  dbtup/DbtupMeta.cpp\n  dbtup/DbtupPagMan.cpp\n  dbtup/DbtupPageMap.cpp\n  dbtup/DbtupProxy.cpp\n  dbtup/DbtupRoutines.cpp\n  dbtup/DbtupScan.cpp\n  dbtup/DbtupStoredProcDef.cpp\n  dbtup/DbtupTabDesMan.cpp\n  dbtup/DbtupTrigger.cpp\n  dbtup/DbtupVarAlloc.cpp\n  dbtup/Undo_buffer.cpp\n  dbtup/tuppage.cpp\n  dbtux/Dbqtux.cpp\n  dbtux/DbqtuxProxy.cpp\n  dbtux/DbtuxBuild.cpp\n  dbtux/DbtuxDebug.cpp\n  dbtux/DbtuxGen.cpp\n  dbtux/DbtuxMaint.cpp\n  dbtux/DbtuxMeta.cpp\n  dbtux/DbtuxNode.cpp\n  dbtux/DbtuxProxy.cpp\n  dbtux/DbtuxScan.cpp\n  dbtux/DbtuxSearch.cpp\n  dbtux/DbtuxStat.cpp\n  dbtux/DbtuxTree.cpp\n  dbutil/DbUtil.cpp\n  diskpage.cpp\n  lgman.cpp\n  ndbcntr/NdbcntrInit.cpp\n  ndbcntr/NdbcntrMain.cpp\n  ndbcntr/NdbcntrSysTable.cpp\n  ndbfs/AsyncFile.cpp\n  ndbfs/AsyncIoThread.cpp\n  ndbfs/Filename.cpp\n  ndbfs/Ndbfs.cpp\n  ndbfs/VoidFs.cpp\n  pgman.cpp\n  qmgr/QmgrInit.cpp\n  qmgr/QmgrMain.cpp\n  QRestore.cpp\n  QRestoreProxy.cpp\n  restore.cpp\n  suma/Suma.cpp\n  suma/SumaInit.cpp\n  thrman.cpp\n  trix/Trix.cpp\n  trpman.cpp\n  tsman.cpp\n  ${EXTRA_SRC}\n  LINK_LIBRARIES ext::zlib\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake Build\nDESCRIPTION: CMake directive to include the src subdirectory in the build process, which contains the main source files for MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_router/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Defining Common System Sources in CMake for MySQL Server\nDESCRIPTION: Sets up the base system source files that are common across all platforms for the MySQL system library. Includes the main system file and common API components for cgroups and general functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/library_mysys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(MY_SYSTEM_SOURCES\n  my_system.cc\n  my_system_api/my_system_api_cgroup.cc\n  my_system_api/my_system_api_common.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Testing NDB API Operations in Shell\nDESCRIPTION: This snippet represents a structured test command for NDB API operations focusing on maximum operations. It tests a variety of scenarios by providing specific arguments to the `testNdbApi` command. It requires a configured environment to run and uses several parameters like `max-time` to limit the execution time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 900\ncmd: testNdbApi\nargs: -n MaxOperations T1 T6 T13\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warning Flags for MySQL Server in CMake\nDESCRIPTION: Sets up compiler flags for the MySQL Server build process, handling warning suppressions and visibility settings across different platforms. The script checks for compiler support for specific warnings and applies appropriate flags, with special handling for Windows, Apple/Xcode, and visibility settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  STRING_APPEND(CMAKE_C_FLAGS \" ${HAS_MISSING_PROFILE}\")\nENDIF()\n\nMY_CHECK_C_COMPILER_FLAG(\"-Wdeprecated-non-prototype\"\n  HAS_DEPRECATED_NON_PROTOTYPE)\nIF(HAS_DEPRECATED_NON_PROTOTYPE)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-deprecated-non-prototype\")\nENDIF()\n\nIF(NOT WIN32)\n  STRING_APPEND(CMAKE_C_FLAGS \" -fvisibility=hidden\")\n  REMOVE_CMAKE_COMPILER_FLAGS(CMAKE_C_FLAGS \"${MY_COMPILER_FLAG_FLTO}\")\nENDIF()\n\n# Xcode >= 14 makes noise about sprintf, and loss of precision\n# when assigning integers from 64 bits to 32 bits, so silence:\nIF(APPLE)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-deprecated-declarations\")\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-shorten-64-to-32\")\nENDIF()\n\nADD_SUBDIRECTORY(${ZLIB_VERSION_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Node Restart Bug43888\nDESCRIPTION: A similar command setup for 'Bug43888', providing a framework to monitor behavior and recovery scenarios after nodes are restarted.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_24\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug43888 T1\nmax-time: 720\n```\n\n----------------------------------------\n\nTITLE: testScanPerf NDB Batch Read Committed With Reset Bounds\nDESCRIPTION: Benchmark command for testing NDB batch scan performance with read committed mode and reset bounds. Uses 100,000 scans with batch size 1000 and queue option enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 0 -r 3 -q 1 -m 1000 -i 10 T1\n```\n\n----------------------------------------\n\nTITLE: Parsing Escaped Characters After Dash\nDESCRIPTION: Handles escaped characters that follow a dash in a character set, determining whether they form a range or result in an error.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_13\n\nLANGUAGE: state-machine\nCODE:\n```\nset-lit-dash-escape:\n   's'                      errorDeath                             doSetOpError\n   'S'                      errorDeath                             doSetOpError\n   'w'                      errorDeath                             doSetOpError\n   'W'                      errorDeath                             doSetOpError\n   'd'                      errorDeath                             doSetOpError\n   'D'                      errorDeath                             doSetOpError\n   'N'                      set-after-range                        doSetNamedRange\n   default               n  set-after-range                        doSetRange\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Command: NDB API Tests\nDESCRIPTION: Test configuration for NDB API related tests covering cluster connections, bug fixes, and various scenarios\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--13-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n NdbClusterConnectionConnect T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for various NDB components using CMake's ADD_SUBDIRECTORY command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(backup)\nADD_SUBDIRECTORY(dbdict)\nADD_SUBDIRECTORY(dbdih)\nADD_SUBDIRECTORY(dblqh)\nADD_SUBDIRECTORY(dbtup)\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Mock Overload Set Library - C++\nDESCRIPTION: Defines a mock overload set library which is used internally. The library includes headers for its functionality and specifies compiler and linker options along with dependencies on other Abseil components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_mock_overload_set\n  HDRS\n    \"internal/mock_overload_set.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_mocking_bit_gen\n    absl::random_internal_mock_helpers\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings for Missing PGO Profile Data in CMake\nDESCRIPTION: This snippet disables warnings related to missing profile-guided optimization (PGO) data, which are not relevant for unit tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Configuring dict_operation_lock Dependencies in S State\nDESCRIPTION: Defines allowed lock acquisitions when dict_operation_lock is held in shared (S) state, showing what other locks can be acquired\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_34\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"S\" TO \"mutex/innodb/trx_pool_manager_mutex\"\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"S\" TO \"mutex/innodb/trx_pool_mutex\"\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"S\" TO \"mutex/innodb/trx_sys_mutex\"\nARC FROM \"sxlock/innodb/dict_operation_lock\" STATE \"S\" TO \"mutex/innodb/trx_sys_shard_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Library Extension based on OS\nDESCRIPTION: This CMake code block determines the correct dynamic library extension based on the operating system. On Windows, it sets the extension to \"dll\", while on other systems (excluding macOS, which isn't explicitly handled), it sets the extension to \"so\". This ensures that the correct extension is used when building the shared library for the plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  SET(DYNLIB_EXTENSION \"dll\")\nELSE()\n  SET(DYNLIB_EXTENSION \"so\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL 5.6 Data Directory Initialization\nDESCRIPTION: Perl script command for initializing MySQL 5.6 data directory with cross-platform compatibility settings using mysql_install_db.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nperl ./scripts/mysql_install_db --cross-bootstrap --user=mysql --builddir=. --srcdir=../../git/8.0 \\\n     --datadir=/tmp/5_6 --lc-messages-dir=./sql/share/english --lower-case-table-names=1 --innodb-log-file-size=4M\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Library Target in CMake\nDESCRIPTION: Defines the 'random_random' CMake target for the main Abseil random library. It specifies headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_random\n  HDRS\n    \"random.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_distributions\n    absl::random_internal_nonsecure_base\n    absl::random_internal_pcg_engine\n    absl::random_internal_pool_urbg\n    absl::random_internal_randen_engine\n    absl::random_seed_sequences\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending NFC and PCSC Source Files\nDESCRIPTION: Conditionally appends NFC and PC/SC (Personal Computer/Smart Card) source files to the FIDO_SOURCES variable when the USE_PCSC flag is set.  This adds support for smart card interaction.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(USE_PCSC)\n\tlist(APPEND FIDO_SOURCES nfc.c pcsc.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Configuration Files in CMake\nDESCRIPTION: Configures test configuration file templates and copies additional configuration files needed for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Use configuration file templates to generate configuration files\nSET(FILE_TEMPLATES\n  mysqlrouter.conf.in\n  mysqlrouter_consolelogger.conf.in\n  mysqlrouter_extra.conf.in\n  mysqlrouter_nologger.conf.in\n)\nCONFIGURE_TEST_FILE_TEMPLATES(${CMAKE_CURRENT_SOURCE_DIR} \"${FILE_TEMPLATES}\")\nCOPY_TEST_FILES(${CMAKE_CURRENT_SOURCE_DIR}\n  \"config_a.conf;config_b.conf;config_c.ini;parse_error.conf\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding JIT Executor Library\nDESCRIPTION: Locates the JIT executor library with custom hints and paths, preparing for plugin integration\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_LIBRARY(JIT_EXECUTOR_LIBRARY\n  NAMES jitexecutor\n  HINTS \"${MRS_JIT_EXECUTOR_LIB}\"\n  NO_DEFAULT_PATH\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing pkg-config Files for TCMalloc and Profiler Libraries\nDESCRIPTION: This snippet installs the generated pkg-config files for TCMalloc variants and the profiler library to the system's pkg-config directory. It uses CMAKE_INSTALL_LIBDIR to determine the correct installation path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/libtcmalloc.pc\n        ${CMAKE_CURRENT_BINARY_DIR}/libtcmalloc_minimal.pc\n        ${CMAKE_CURRENT_BINARY_DIR}/libtcmalloc_debug.pc\n        ${CMAKE_CURRENT_BINARY_DIR}/libtcmalloc_minimal_debug.pc\n        ${CMAKE_CURRENT_BINARY_DIR}/libprofiler.pc\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n```\n\n----------------------------------------\n\nTITLE: Defining ZLOB Source Files in CMake\nDESCRIPTION: This snippet uses the SET command in CMake to define the source files for ZLOB, which are required for the ZLOB functionality within the MySQL project. It specifies multiple source and header files that will be compiled together.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(ZLOB_SRC_FILES\\n  zlob0int-t.cc\\n  zlob0int.cc\\n  zlob0int.h\\n  mtr0log.cc\\n  ut0dbg.cc\\n  lot0buf.cc\\n  fil0fil.cc\\n  fut0lst.cc\\n  lot0dat.cc)\n```\n\n----------------------------------------\n\nTITLE: Number to String Conversion Functions in MySQL\nDESCRIPTION: Functions for converting numeric values to string representations. Includes variations for different integer types and decimal numbers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nsnprintf()\nlong10_to_str()\nlonglong10_to_str()\n```\n\n----------------------------------------\n\nTITLE: Testing System Restart with SR_DD_1b_LCP\nDESCRIPTION: This snippet tests the system restart functionality using the command \"testSystemRestart\" with arguments \"-n SR_DD_1b_LCP D2\". It specifies a maximum execution time of 13680 seconds. This setup is likely used for assessing the restart reliability or performance under specific conditions. No additional dependencies are mentioned, but the context implies this is part of a test suite for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--07-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_1b_LCP D2\nmax-time: 13680\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL NDB Cluster Test Parameters\nDESCRIPTION: The file specifies a series of test commands with their arguments and maximum execution times. Each test focuses on different NDB Cluster functionality such as unlocking rows, API operations, index handling, node restarts, and foreign key operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: plain\nCODE:\n```\n# Start\nmax-time: 500\ncmd: testBasic\nargs: --forceshortreqs -n PkUpdate\n\nmax-time: 300\ncmd: testIndex\nargs: --forceshortreqs -n InsertDelete T2\n\nmax-time: 2500\ncmd: testPartitioning\nargs: --forceshortreqs\n\n# End of short (signal train) handling tests\nmax-time: 300\ncmd: testIndex\nargs: -n ConstraintDetails\n\nmax-time: 900\ncmd: testNdbinfo\nargs:\n```\n\n----------------------------------------\n\nTITLE: Prepare Phase Protocol Flow\nDESCRIPTION: Documents the signal flow in the PREPARE phase between Client, Util and Dict components. Shows request, dictionary info retrieval, prepare operation and confirmation steps.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbutil/DbUtil.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClient --UTIL_PREPARE_REQ--> Util\n                    ...\nClient --UTIL_PREPARE_REQ--> Util\n\nUtil --GET_TABINFOREQ-->  Dict\n\nUtil   <--DICTTABINFO--   Dict\n                 ...\nUtil   <--DICTTABINFO--   Dict\n\nClient <--UTIL_PREPARE_CONF-- Util\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Error Message Languages\nDESCRIPTION: Specifies the supported languages for error messages as English and Latin1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_phantom_lang.txt#2025-04-21_snippet_0\n\nLANGUAGE: mysql-error\nCODE:\n```\nlanguages english=eng latin1;\n```\n\n----------------------------------------\n\nTITLE: Adding net_ts_accept Executable\nDESCRIPTION: This snippet adds an executable named `net_ts_accept`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(net_ts_accept net_ts_accept.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES harness_net_ts\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files for MySQL Server in CMake\nDESCRIPTION: This snippet copies specific configuration files (mysql_config.sh and my_config.h) to the build directory without modification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-common/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(cfile\n    mysql_config.sh\n    my_config.h\n    )\n  CONFIGURE_FILE(${cfile} ${CMAKE_CURRENT_BINARY_DIR}/${cfile} COPYONLY)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated 'sbrk' Warning on Apple Platforms in CMake\nDESCRIPTION: Adds a compiler flag to suppress the deprecated-declarations warning for the ndbd_malloc_impl.cpp file when compiling on Apple platforms. This is necessary due to the use of the deprecated 'sbrk' function.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(APPLE)\n  ADD_COMPILE_FLAGS(ndbd_malloc_impl.cpp COMPILE_FLAGS\n    \" -Wno-error=deprecated-declarations\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Cluster Test Commands with Arguments and Timeout Values\nDESCRIPTION: A series of test command configurations for the MySQL NDB Cluster test suite. Each configuration specifies the test command to run, command-line arguments, and maximum execution time in seconds. Tests cover various functional areas including basic operations, scanning, system restart, and error handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--09-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNdbApi\nargs: -n BadColNameHandling T6\nmax-time: 180\n\ncmd: testLimits\nargs: -n ExhaustSegmentedSectionPk WIDE_2COL\nmax-time: 180\n\ncmd: testBasic\nargs: -n NoCommit626 T6 D1 D2\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n GetValueInUpdate T6\nmax-time: 180\n\ncmd: testBasic\nargs: -n NoCommitAndClose T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n ImplicitRollbackDelete T1 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n OnlyOneOpBeforeOpenScan T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n NoCloseTransaction T6 D1 D2\nmax-time: 180\n\ncmd: test_event\nargs: -n Bug35208 T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n MaxEqual\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n Bug44065\nmax-time: 180\n\ncmd: testNdbApi\nargs: -l 100 -n Bug37158\nmax-time: 180\n\ncmd: testBasicAsynch\nargs: -n PkReadAsynch\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug20185 T1\nmax-time: 360\n\ncmd: testIndex\nargs: -n BuildDuring T6\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanUpdate\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanRead488T -l 10 T6 D1 D2\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanParallelism\nmax-time: 360\n\ncmd: testSystemRestart\nargs: -l 1 -n SR9 T1\nmax-time: 360\n\ncmd: testDict\nargs: -n FragmentTypeAllLarge T1 T6\nmax-time: 360\n\ncmd: test_event\nargs: -n Bug31701 T1\nmax-time: 720\n\ncmd: testDict\nargs: -r 2500 -n TableAddAttrs\nmax-time: 1800\n\ncmd: test_event\nargs: -n Bug33793 T1\nmax-time: 720\n\ncmd: testBackup\nargs: -n NFSlave T1\nmax-time: 900\n\ncmd: testMgm\nargs:\nmax-time: 900\n\ncmd: testNodeRestart\nargs: -n FiftyPercentFail T6 T13\nmax-time: 1800\n\ncmd: testSystemRestart\nargs: -n SR_DD_1_LCP D1\nmax-time: 3960\n\ncmd: testScan\nargs: -n ScanReadRestart T1 T6 T13\nmax-time: 2160\n\ncmd: testSystemRestart\nargs: -n SR2 T6\nmax-time: 3600\n\ncmd: testSystemRestart\nargs: -n SR1 T6\nmax-time: 4320\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNdbApi\nargs: -n UnlockScan T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Flags (CMake)\nDESCRIPTION: This line adds a specific compiler flag to the `spj_performance_test.cpp` source file. The flag `-Wno-error=undefined-reinterpret-cast` disables the treatment of \"undefined reinterpret cast\" warnings as errors. This is useful for suppressing warnings that might arise from specific coding patterns used in the test code when compiled with Clang.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_COMPILE_FLAGS(spj_performance_test.cpp COMPILE_FLAGS\n      \\\" -Wno-error=undefined-reinterpret-cast\\\")\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Dictionary Test Configuration\nDESCRIPTION: Test configuration for database dictionary operations with specific arguments and time limits\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--06-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testDict\nargs: -n Bug54651 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Status Library in CMake\nDESCRIPTION: This snippet defines the 'status' library configuration for Abseil. It specifies headers, source files, compiler options, platform-specific definitions, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/status/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    status\n  HDRS\n    \"status.h\"\n  SRCS\n    \"internal/status_internal.h\"\n    \"status.cc\"\n    \"status_payload_printer.h\"\n    \"status_payload_printer.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEFINES\n    \"$<$<PLATFORM_ID:AIX>:_LINUX_SOURCE_COMPAT>\"\n  DEPS\n    absl::atomic_hook\n    absl::config\n    absl::cord\n    absl::core_headers\n    absl::function_ref\n    absl::inlined_vector\n    absl::optional\n    absl::raw_logging_internal\n    absl::stacktrace\n    absl::str_format\n    absl::strerror\n    absl::strings\n    absl::symbolize\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Classpath for NdbJTie Tests in CMake\nDESCRIPTION: Defines the classpath for compiling NdbJTie tests, including necessary JAR files and class directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/test/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/test/myjapi/target/classes)\n```\n\n----------------------------------------\n\nTITLE: Adding Source and Test Directories in CMake\nDESCRIPTION: This snippet adds the main source directory and optionally includes the tests directory if the 'WITH_UNIT_TESTS' flag is set. It is useful for organizing the project build configuration effectively.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Testing NDB API for MySQL Server\nDESCRIPTION: This snippet includes a command for testing the NDB API functionality within the MySQL server, ensuring compatibility and expected behavior under various conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNdbApi\nargs: -n Bug44065_org\nmax-time: 2520\n```\n\n----------------------------------------\n\nTITLE: Updating Performance Schema Instruments in MySQL\nDESCRIPTION: This SQL query updates all Performance Schema instruments to be enabled but not timed. It's used in the PERFSCHEMA-ENABLED-STANDBY configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/conf.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE performance_schema.SETUP_INSTRUMENTS\n  set enabled='NO', timed='NO';\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory to CMake Project\nDESCRIPTION: This snippet uses CMake to add a subdirectory called \\'src\\' to the build process. This operation is often used to include additional source directories in a modular project structure. It requires CMake to be installed and the subdirectory's CMakeLists.txt to be correctly configured.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL X Protocol Plugin Executable\nDESCRIPTION: This snippet defines the MySQL X Protocol plugin executable, specifying source files and skipping the installation step.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(\n  xprotocol_plugin\n  ${PROTOC_PLUGIN_SRC}\n  SKIP_INSTALL\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Event Handling in MySQL Server\nDESCRIPTION: This snippet tests event handling and race conditions in the database, ensuring that concurrent operations work without causing issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: test_event\nargs: -n DbUtilRace T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Testing Node Restart Scenarios for MySQL Server\nDESCRIPTION: This snippet encompasses various commands for simulating and testing node restarts within a MySQL cluster, validating the stability and recovery of cluster nodes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug41295 T1\nmax-time: 1080\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n GcpStop T1 --loops=1\nmax-time: 1080\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug25984 T1\nmax-time: 1620\n```\n\n----------------------------------------\n\nTITLE: testScanPerf Load Command\nDESCRIPTION: Command to load data for the testScanPerf benchmark with 1 cluster and 1 data node.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -c 1 -d 1 T1\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSpj\nargs: -n ScanJoin\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Literary Impact on Self-Understanding\nDESCRIPTION: Detailed examination of how classic works like Paradise Lost, Plutarch's Lives, and Sorrows of Werter shape the creature's perception of self and society\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/lob/frankenstein.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"I can hardly describe to you the effect of these books. They produced in me an infinity of new images and feelings, that sometimes raised me to ecstasy, but more frequently sunk me into the lowest dejection.\"\n```\n\n----------------------------------------\n\nTITLE: Parsing & Character in Sets\nDESCRIPTION: Defines how to handle the ampersand character in character sets. It could be part of the '&&' intersection operator or a literal character depending on context.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_8\n\nLANGUAGE: state-machine\nCODE:\n```\nset-lit-amp:\n    '&'                  n  set-after-op                            doSetIntersection2\n    default                 set-after-lit                           doSetAddAmp\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Test Executables\nDESCRIPTION: Sets up and configures test executables for MySQL server components. Creates test targets and links them with required libraries including mysys, gunit_small, and sqlgunitlib.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/locks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  shared_spin_lock)\n\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc ADD_TEST ${test})\n  TARGET_LINK_LIBRARIES(${test}-t mysys gunit_small sqlgunitlib)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Including GMock Headers\nDESCRIPTION: Adds GMock include directories to the system include path for test compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/containers/buffers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Dependencies for LOCK_reset_gtid_table in MySQL Server\nDESCRIPTION: This snippet defines the lock dependencies for the LOCK_reset_gtid_table mutex in MySQL server. It shows relationships with various InnoDB mutexes, debug synchronization, and other system mutexes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"cond/sql/DEBUG_SYNC::cond\"\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"cond/sql/MDL_context::COND_wait_status\"\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"mutex/csv/tina\"\n// ... (truncated for brevity)\nARC FROM \"mutex/sql/LOCK_reset_gtid_table\" TO \"mutex/innodb/dict_table_mutex\"\n```\n\n----------------------------------------\n\nTITLE: testScanPerf Read Committed Without Reset Bounds\nDESCRIPTION: Benchmark command for testing scan performance in read committed mode without reset bounds. Uses 100,000 scans with access type 1 and result type 2.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 0 -r 2 -q 0 T1\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Connection Pool Plugin in CMake\nDESCRIPTION: This snippet configures the include directories for the connection pool plugin target using TARGET_INCLUDE_DIRECTORIES. It specifies both private and public include paths.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(connection_pool_plugin PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding net_ts_connect Executable\nDESCRIPTION: This snippet adds an executable named `net_ts_connect`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(net_ts_connect net_ts_connect.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES harness_net_ts\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stacktrace Library in Abseil\nDESCRIPTION: Creates the stacktrace library target with its header files, source files, and dependencies for capturing stack traces across multiple architectures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    stacktrace\n  HDRS\n    \"stacktrace.h\"\n    \"internal/stacktrace_aarch64-inl.inc\"\n    \"internal/stacktrace_arm-inl.inc\"\n    \"internal/stacktrace_config.h\"\n    \"internal/stacktrace_emscripten-inl.inc\"\n    \"internal/stacktrace_generic-inl.inc\"\n    \"internal/stacktrace_powerpc-inl.inc\"\n    \"internal/stacktrace_riscv-inl.inc\"\n    \"internal/stacktrace_unimplemented-inl.inc\"\n    \"internal/stacktrace_win32-inl.inc\"\n    \"internal/stacktrace_x86-inl.inc\"\n  SRCS\n    \"stacktrace.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    $<$<BOOL:${EXECINFO_LIBRARY}>:${EXECINFO_LIBRARY}>\n  DEPS\n    absl::debugging_internal\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::raw_logging_internal\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup and Commit Order Tests\nDESCRIPTION: Test configurations for backup operations and transaction commit order verification in NDB Cluster. The tests include specific backup bug fixes and validation of proper commit ordering in the access manager.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_19\n\nLANGUAGE: plain\nCODE:\n```\nmax-time: 600\ncmd: testBackup\nargs: -n Bug17882305 T1\n\nmax-time: 600\ncmd: testBackup\nargs: -n Bug19202654 T1\n\nmax-time : 600\ncmd: testNodeRestart\nargs: -n DeleteRestart T1\n\nmax-time : 600\ncmd: testBasic\nargs: -n AccCommitOrder T1\n```\n\n----------------------------------------\n\nTITLE: Installing libcbor via Homebrew\nDESCRIPTION: This command utilizes Homebrew to install the libcbor library, providing an easy method for macOS users to obtain the library for CBOR support in C.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install libcbor\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Show Versions\nDESCRIPTION: This command executes the upgrade test to show the version details of the MySQL server. It is part of a series of upgrade related tests aimed at assessing the server's upgrade capabilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n ShowVersions T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex Dependencies for MySQL Group Replication\nDESCRIPTION: This code snippet defines the relationships between various mutexes used in MySQL Group Replication. It uses 'ARC FROM' statements to specify dependencies, indicating which mutexes interact with or depend on others. This is crucial for understanding the locking mechanisms and potential deadlock scenarios in the Group Replication implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nARC FROM \"mutex/group_rpl/LOCK_clone_read_mode\" TO \"rwlock/sql/Trans_delegate::lock\" OP \"R\"\nARC FROM \"mutex/group_rpl/LOCK_connection_map\" TO \"mutex/sql/LOCK_group_replication_connection_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_connection_map\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/group_rpl/LOCK_connection_map\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/group_rpl/LOCK_connection_map\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_replica_list\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_status\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_thd_list\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_thd_remove\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_thread_ids\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/LOCK_transaction_cache\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/THD::LOCK_query_plan\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"mutex/sql/THD::LOCK_thd_query\"\nARC FROM \"mutex/group_rpl/LOCK_delayed_init_run\" TO \"rwlock/sql/Trans_delegate::lock\" OP \"R\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"cond/group_rpl/COND_session_thread_method_exec\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"cond/group_rpl/COND_session_thread_run\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"mutex/group_rpl/LOCK_session_thread_method_exec\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"mutex/group_rpl/LOCK_session_thread_run\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_group_member_info_update_lock\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"mutex/group_rpl/LOCK_message_service_run\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_mysql_handler_thread_run\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_mysql_thread_dispatcher_run\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_mysql_thread_handler_dispatcher_run\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_mysql_thread_run\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"cond/group_rpl/COND_applier_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"cond/sql/Relay_log_info::stop_cond\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_applier_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_applier_module_suspend\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_certification_info\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_certification_members\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/innodb/rw_lock_debug_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/innodb/trx_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/LOCK_plugin\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/MYSQL_RELAY_LOG::LOCK_log_end_pos\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/Relay_log_info::run_lock\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/Source_info::run_lock\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/THD::LOCK_current_cond\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"mutex/sql/THD::LOCK_thd_data\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"rwlock/group_rpl/RWLOCK_certifier_stable_gtid_set\" OP \"W\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"rwlock/group_rpl/RWLOCK_flow_control_module_info\" OP \"R\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"rwlock/sql/channel_lock\" OP \"W\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"X\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_applier_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_clone_handler_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_group_action_coordinator_thread\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_message_service_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_mysql_thread_handler_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_mysql_thread_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_recovery_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/group_rpl/COND_view_modification_wait\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/sql/Relay_log_info::stop_cond\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/sql/Source_info::stop_cond\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"cond/sql/Source_IO_monitor::run_cond\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/GCS_Gcs_async_buffer::m_free_buffer_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/GCS_Gcs_xcom_engine::m_wait_for_notification_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/GCS_Gcs_xcom_view_change_control::m_joining_leaving_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/key_GR_LOCK_group_action_coordinator_process\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/key_GR_LOCK_group_action_coordinator_thread\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/key_GR_LOCK_group_action_coordinator_thread_end\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/key_GR_LOCK_group_part_handler_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_applier_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_applier_module_suspend\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_autorejoin_module\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_certification_members\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_clone_handler_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_clone_query\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_connection_map\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_group_member_info_manager_update_lock\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_group_member_info_update_lock\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_message_service_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_mysql_handler_thread_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_mysql_thread_dispatcher_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_mysql_thread_handler_dispatcher_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_mysql_thread_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_plugin_applier_module_initialize_terminate\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_plugin_online\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_recovery\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_recovery_module_run\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_synchronized_queue\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_view_modification_wait\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/group_rpl/LOCK_wait_ticket\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/innodb/buf_pool_LRU_list_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/innodb/fil_system_mutex\"\nARC FROM \"mutex/group_rpl/LOCK_plugin_modules_termination\" TO \"mutex/innodb/flush_list_mutex\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Startup Sequence\nDESCRIPTION: This snippet outlines the entire startup process for NDB Cluster, including internal start phases, component interactions, and data handling procedures. It details the communication between DIH, DICT, and other components during cluster initialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/NodeRestart.new.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMaster DIH\t\t\tStarting DIH\t\t  Starting DICT\n----------------------\t\t----------------------\t  ---------------------\n\n                                Check for sysfile\n\t\t\t\tDIH_RESTARTCONF ->\n\n******************************************************************************\n* NDB_STTOR interal startphase = 1\n******************************************************************************\n\n\t\t\t\t\t\t\t  Read schema file\n\n******************************************************************************\n* NDB_STTOR interal startphase = 2\n******************************************************************************\n\n\t\t\t\t<- START_PERMREQ\n\nXXX\n\nSTART_PERMCONF ->\n\n******************************************************************************\n* NDB_STTOR interal startphase = 3\n******************************************************************************\n\n\t\t\t\t<- START_MEREQ\n\nSTART_RECREQ -> starting LQH\n             <- START_RECCONF\n\nFor each table\n  COPY_TABREQ -> starting DIH\n\nDICTSTARTREQ -> starting DICT\n\t\t\t \t\t\t\t  GET_SCHEMA_INFOREQ\n\t\t\t\t\t\t\t  (to master DICT)\n\n\t\t\t\t\t\t\t  ->SCHEMA_INFO\n\t\t\t\t\t\t\t    (schema file)\n\n\t\t\t\t\t\t\t  1) For each table\n\t\t\t                             If TableStatus OK\n\t\t\t                                ReadTableFile\n\t\t\t\t\t\t      else\n\t\t\t                                        GET_TABINFOREQ\n                                                          2) DIADDTABREQ->DIH\n\t\t\t\t\t\t\t\n\t\t\t\tFor each local frag\n\t\t\t\t  ADD_FRAG_REQ -> local DICT\n\t\t\t\tDI_ADD_TAB_CONF\n\t\t\t\t\t\t          <- DICTSTARTCONF\n\nINCL_NODEREQ -> all DIH\n\nSTART_MECONF -> starting DIH\n (including sysfile)\n\n******************************************************************************\n* NDB_STTOR interal startphase = 5\n******************************************************************************\n\n\t\t\t\t<- START_COPYREQ\n\nSTART_TOREQ -> all DIH\n\nFor each fragment\n  UPDATE_FRAG_STATEREQ -> all DIH\n  \n  COPY-DATA (LQHKEYREQ++)\n\n  UPDATE_TOREQ -> all DIH\n  \n  COPY_ACTIVEREQ -> starting LQH\n\n  UPDATE_FRAG_STATEREQ -> all DIH\n\nSTART_COPYCONF -> \n\nLOCAL CHECKPOINT\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Google Mock in MySQL Router Tests\nDESCRIPTION: Sets up system include directories for Google Mock (GMock) testing framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Suppressing Linker Warnings in MSVC\nDESCRIPTION: Suppresses specific linker warnings that may arise when combining certain flags in MSVC projects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MSVC)\n  STRING(APPEND CMAKE_SHARED_LINKER_FLAGS \" /IGNORE:4197\")\n  SET(protobuf_HAVE_LD_VERSION_SCRIPT OFF)\n  SET(protobuf_HAVE_LD_VERSION_SCRIPT OFF CACHE INTERNAL \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Demangle Internal Library in Abseil\nDESCRIPTION: Creates an internal library for demangling C++ symbol names, providing readable function names from mangled symbols.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Internal-only target, do not depend on directly.\nabsl_cc_library(\n  NAME\n    demangle_internal\n  HDRS\n    \"internal/demangle.h\"\n  SRCS\n    \"internal/demangle.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::core_headers\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Log Message in MySQL Server\nDESCRIPTION: This snippet defines a custom error log message with the identifier ER_ERRLOG_HI. It sets the starting error number to 10000 and specifies an English message to be displayed when the error occurs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_errlog.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstart-error-number 10000\n\nER_ERRLOG_HI\n\teng \"Starting error log. Hooray!\"\n```\n\n----------------------------------------\n\nTITLE: Executing testIndex Command in MySQL\nDESCRIPTION: This snippet details the 'testIndex' command that verifies the integrity and functionality of indexes within MySQL. Each instance outlines unique bugs or features it tests against, along with time constraints for execution. Inputs include specific test identifiers, with outputs reflecting the success or failure of index testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testIndex\nargs: -n Bug25059 -r 3000 T1\nmax-time: 180\n\ncmd: testIndex\nargs: -n RefreshWithOrderedIndex T2 D2\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Building ndb_print_sys_file Executable with CMake\nDESCRIPTION: CMake configuration to build the ndb_print_sys_file executable for MySQL NDB Cluster. Links against various NDB libraries including management API, general utilities, logging, port library, tracing, and blocks components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdih/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_print_sys_file\n  printSysfile.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ndbmgmapi\n  ndbgeneral\n  ndblogger\n  ndbportlib\n  ndbtrace\n  ndbblocks\n  )\n```\n\n----------------------------------------\n\nTITLE: Node Restart Test Configuration - Change LDMs\nDESCRIPTION: Test configuration for node restart scenario with changes in Local Data Managers, involving two test targets\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--06-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n ChangeNumLDMsNR T1 D1\nmax-time: 2500\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Selection for NDB File System in CMake\nDESCRIPTION: Sets the EXTRA_SRC variable based on the target platform (Windows or POSIX) using CMake's IF statement.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET(EXTRA_SRC ndbfs/Win32AsyncFile.cpp)\nELSE()\n  SET(EXTRA_SRC ndbfs/PosixAsyncFile.cpp)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_append_truncated Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_append_truncated target, which provides functionality for appending truncated content in the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_append_truncated\n  SRCS\n  HDRS\n    \"internal/append_truncated.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::strings\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Rewriter Scripts using CMake\nDESCRIPTION: This CMake code iterates through a list of script files (`install_rewriter`, `uninstall_rewriter`), configures them from `.sql.in` templates, and installs the resulting `.sql` files to the `${INSTALL_MYSQLSHAREDIR}` directory. It also sets permissions to allow the owner to read and write, and the group and world to read.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(file\n    install_rewriter\n    uninstall_rewriter)\n\n  CONFIGURE_FILE(\n    ${CMAKE_CURRENT_SOURCE_DIR}/${file}.sql.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${file}.sql\n    )\n\n  INSTALL(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/${file}.sql\n    DESTINATION ${INSTALL_MYSQLSHAREDIR}\n    COMPONENT SupportFiles\n    PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n    )\n\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Bad Any Cast Implementation\nDESCRIPTION: Internal CMake configuration for bad_any_cast implementation library with source and header files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    bad_any_cast_impl\n  SRCS\n   \"bad_any_cast.h\"\n   \"bad_any_cast.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::raw_logging_internal\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Strings Library (Non-Windows)\nDESCRIPTION: This snippet sets compile options for the strings library, specifically setting the `-fvisibility=hidden` flag on non-Windows platforms. This flag hides symbols by default, improving security and reducing the size of the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WIN32)\n  SET(STRINGS_COMPILE_OPTIONS COMPILE_OPTIONS \"-fvisibility=hidden\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Random Library Test Targets in CMake\nDESCRIPTION: This snippet defines multiple internal-only test targets for the Abseil Random library using the absl_cc_test macro. These tests cover various components of the random library implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_traits_test\n  SRCS\n    \"internal/traits_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_internal_traits\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Seed Material Library - C++\nDESCRIPTION: Defines an internal library managing seed material generation functionalities in random number generation processes, specifying its source and header files as well as dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_seed_material\n  SRCS\n    \"internal/seed_material.cc\"\n  HDRS\n    \"internal/seed_material.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n    $<$<BOOL:${MINGW}>:-lbcrypt>\n  DEPS\n    absl::core_headers\n    absl::optional\n    absl::random_internal_fast_uniform_bits\n    absl::raw_logging_internal\n    absl::span\n    absl::strings\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Harness Test Files\nDESCRIPTION: This snippet iterates through the list of test files and adds each as a harness test file. It specifies include directories and library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"FOREACH(TEST ${TESTS})\n  ADD_HARNESS_TEST_FILE(${TEST} MODULE ${TEST_MODULE}\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/shared/include/\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/src/\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/tests/include/\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/tests/\n    LIB_DEPENDS test-helpers;harness_stdx)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Building Sample and Test Executables\nDESCRIPTION: Provides CMake commands to optionally build sample and test executables using gtest_main. Users can enable the options to build these for demonstration or testing purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_build_samples)\n  cxx_executable(sample1_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample2_unittest samples gtest_main samples/sample2.cc)\n  cxx_executable(sample3_unittest samples gtest_main)\n  cxx_executable(sample4_unittest samples gtest_main samples/sample4.cc)\n  cxx_executable(sample5_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample6_unittest samples gtest_main)\n  cxx_executable(sample7_unittest samples gtest_main)\n  cxx_executable(sample8_unittest samples gtest_main)\n  cxx_executable(sample9_unittest samples gtest)\n  cxx_executable(sample10_unittest samples gtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding JTIE Test Subdirectories in CMake\nDESCRIPTION: Adds the required subdirectories (myapi, myjapi, and unload) to the build process. These directories contain the actual JTIE test implementations that will be compiled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(myapi)\nADD_SUBDIRECTORY(myjapi)\nADD_SUBDIRECTORY(unload)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Exponential Distribution Test - C++\nDESCRIPTION: Defines a test for the implementation of the exponential distribution, including source files and crucial dependencies overseeing the test execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_exponential_distribution_test\n  SRCS\n    \"exponential_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::numeric_representation\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Removing C++ Standard Flag for GCC/Clang in MySQL Server Build\nDESCRIPTION: This snippet removes the C++ standard flag from CXXFLAGS for GCC and Clang compilers. It uses a regular expression to strip out any -std=c++XX flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  STRING(REGEX REPLACE \"-std=c..[0-9]+\" \"\" CXXFLAGS \"${CXXFLAGS}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Copying GCI and Starting Dictionary in MySQL Server\nDESCRIPTION: This snippet shows the process of copying GCI (Global Checkpoint Information) to all DIHs and starting the dictionary on the master node.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/SystemRestart.new.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCOPY_GCIREQ -> all DIHs\n\t\t\t\t\nDICTSTARTREQ -> local DICT (master)\n\n\t\t\t\tmaster\n                                ======\n\t\t                For each table (that should be started)\n\t\t\t\t  1) ReadTableFile\n\t\t\t\t  2) DI_ADD_TAB_REQ -> local DIH\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_27\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n NF_Hammer -r 5 T1\nmax-time: 1620\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: test_event\nargs: -n Apiv2-check_event_queue_cleared T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Basic ATRT Test Execution - Simple Run\nDESCRIPTION: Minimal command to run ATRT with a test case file. Provides basic test execution without logging or verbose output.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_USAGE_README.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natrt --testcase-file=atrt_test_case_file\n```\n\n----------------------------------------\n\nTITLE: Parsing Escape Sequences in Sets\nDESCRIPTION: Processes various backslash escape sequences within character sets, mapping them to the appropriate character classes or literal characters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_14\n\nLANGUAGE: state-machine\nCODE:\n```\nset-escape:\n   'p'                      set-after-set                           doSetProp\n   'P'                      set-after-set                           doSetProp\n   'N'                      set-after-lit                           doSetNamedChar\n   's'                   n  set-after-range                         doSetBackslash_s\n   'S'                   n  set-after-range                         doSetBackslash_S\n   'w'                   n  set-after-range                         doSetBackslash_w\n   'W'                   n  set-after-range                         doSetBackslash_W\n   'd'                   n  set-after-range                         doSetBackslash_d\n   'D'                   n  set-after-range                         doSetBackslash_D\n   'h'                   n  set-after-range                         doSetBackslash_h\n   'H'                   n  set-after-range                         doSetBackslash_H\n   'v'                   n  set-after-range                         doSetBackslash_v\n   'V'                   n  set-after-range                         doSetBackslash_V\n   default               n  set-after-lit                           doSetLiteralEscaped \n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for MySQL Router Tests\nDESCRIPTION: Configures the include directories needed for MySQL Router test components, including Google Mock and project test sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${GMOCK_INCLUDE_DIRS}\n  ${PROJECT_SOURCE_DIR}/tests/\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Log Streamer Test in CMake\nDESCRIPTION: This snippet configures the test target for Abseil's log streamer functionality. It specifies the source file and dependencies needed to test the stream-based logging interfaces.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_streamer_test\n  SRCS\n    \"log_streamer_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::core_headers\n    absl::log\n    absl::log_internal_test_actions\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_streamer\n    absl::log_severity\n    absl::scoped_mock_log\n    absl::strings\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog Timestamp\nDESCRIPTION: Creates a RFC-2822 formatted timestamp for the Debian package changelog using the system date command, which is required for proper package versioning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Timestamp for use in debian/changelog\nIF (NOT DEFINED DEB_CHANGELOG_TIMESTAMP)\n  execute_process(\n    COMMAND date --rfc-2822\n    OUTPUT_VARIABLE DEB_CHANGELOG_TIMESTAMP\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  SET (DEB_CHANGELOG_TIMESTAMP ${DEB_CHANGELOG_TIMESTAMP} CACHE STRING \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Include CMake Module for Export Headers\nDESCRIPTION: This code snippet includes a CMake module responsible for generating export headers, which are crucial for managing symbol visibility across different libraries and components in the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Project and Minimum Version\nDESCRIPTION: This snippet sets the minimum required version of CMake and initializes the CMake project for Google Test with specified languages, CXX and C. It ensures the right environment is in place before proceeding with further configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(gtest VERSION ${GOOGLETEST_VERSION} LANGUAGES CXX C)\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Management Common Convenience Library in CMake\nDESCRIPTION: Defines a convenience library 'ndbmgmcommon' with various source files and links it to the 'ndbmgmapi' library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/mgmcommon/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbmgmcommon\n  Config.cpp\n  ConfigInfo.cpp\n  ConfigObject.cpp\n  ConfigRetriever.cpp\n  ConfigSection.cpp\n  InitConfigFileParser.cpp\n  IPCConfig.cpp\n  DnsCache.cpp\n  thr_config.cpp\n  LINK_LIBRARIES ndbmgmapi\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring dict_table_stats Lock Dependencies\nDESCRIPTION: Defines the allowed lock acquisition paths when dict_table_stats lock is held in exclusive (X) state\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_36\n\nLANGUAGE: config\nCODE:\n```\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"mutex/innodb/buf_pool_chunks_mutex\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"sxlock/innodb/dict_table_stats\" STATE \"X\" TO \"mutex/innodb/buf_pool_free_list_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Int128 Test Target\nDESCRIPTION: CMake configuration for the int128 test suite including stream and general functionality tests with required testing dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/numeric/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    int128_test\n  SRCS\n    \"int128_stream_test.cc\"\n    \"int128_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::int128\n    absl::base\n    absl::hash_testing\n    absl::type_traits\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining source files for temptable plugin\nDESCRIPTION: This CMake command sets a list of source files that make up the temptable plugin.  These `.cc` files contain the actual C++ code for the plugin. The variable TEMPTABLE_SOURCES is then used in subsequent commands to refer to this list of source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/temptable/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEMPTABLE_SOURCES\n  src/allocator.cc\n  src/block.cc\n  src/column.cc\n  src/handler.cc\n  src/index.cc\n  src/indexed_cells.cc\n  src/memutils.cc\n  src/plugin.cc\n  src/result.cc\n  src/row.cc\n  src/table.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating OCI Convenience Library Target in CMake\nDESCRIPTION: Creates a convenience library target named 'oci_common' using the previously defined source files. This library will be built as part of the MySQL server project and can be linked against by other components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql-common/oci/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(\n  oci_common\n  ${OCI_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Build Options with CMake\nDESCRIPTION: This CMake snippet disables default ON build options like tests, examples, manpages, and tools. It sets the options to OFF, ensuring they aren't included in the build process. This minimization streamlines the build for specific distributions of the MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(BUILD_TESTS OFF)\nSET(BUILD_TESTS OFF CACHE INTERNAL \"\")\n\nSET(BUILD_EXAMPLES OFF)\nSET(BUILD_EXAMPLES OFF CACHE INTERNAL \"\")\n\nSET(BUILD_MANPAGES OFF)\nSET(BUILD_MANPAGES OFF CACHE INTERNAL \"\")\n\nSET(FIDO_BUILD_SHARED_LIBS OFF)\nSET(FIDO_BUILD_SHARED_LIBS OFF CACHE INTERNAL \"\")\n\nSET(FIDO_BUILD_STATIC_LIBS OFF)\nSET(FIDO_BUILD_STATIC_LIBS OFF CACHE INTERNAL \"\")\n\nSET(BUILD_TOOLS OFF)\nSET(BUILD_TOOLS OFF CACHE INTERNAL \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files for MySQL Binary Log Event Libraries in CMake\nDESCRIPTION: Lists all the header files that are part of the MySQL binary log event libraries. This includes various codec, compression, and event-related headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/event/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TARGET_HEADERS\n  codecs/base.h\n  codecs/binary.h\n  codecs/factory.h\n  compression/iterator.h\n  export/binary_log_funcs.h\n  binary_log.h\n  binlog_event.h\n  byteorder.h\n  control_events.h\n  debug_vars.h\n  event_reader_macros.h\n  event_reader.h\n  load_data_events.h\n  rows_event.h\n  statement_events.h\n  table_id.h\n  trx_boundary_parser.h\n  wrapper_functions.h\n  compression/base.h\n  compression/compressor.h\n  compression/decompressor.h\n  compression/factory.h\n  compression/none_comp.h\n  compression/none_dec.h\n  compression/zstd_comp.h\n  compression/zstd_dec.h\n)\n```\n\n----------------------------------------\n\nTITLE: Debugging C Extension with gdb\nDESCRIPTION: Command to run gdb for debugging the Protocol Buffers C extension. Useful for in-depth troubleshooting.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gdb_test.sh\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug_WritePartialIgnoreError\nDESCRIPTION: This snippet defines a test command to check the 'Bug_WritePartialIgnoreError' scenario with a specific max execution time. The purpose is to validate the handling of write errors in specific transactions, leveraging the testNdbApi command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNdbApi\nargs: -n Bug_WritePartialIgnoreError T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Avoiding Macro Name Clashes in GoogleTest\nDESCRIPTION: Shows how to avoid macro name clashes between GoogleTest and other libraries by renaming GoogleTest macros using compiler flags. This is achieved by defining `GTEST_DONT_DEFINE_FOO=1`, which renames the `FOO` macro to `GTEST_FOO`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n-DGTEST_DONT_DEFINE_FOO=1\n```\n\n----------------------------------------\n\nTITLE: Sorted Scan Implementation\nDESCRIPTION: Explains the implementation of sorted scans in the API layer, including parallelism and receiver handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/ScanOperation.txt#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1) The sorted scan is transparent to TC\n   It's a API only impl.\n2) The API makes the following adjustements:\n* Scan all fragments simultaniously (max parallelism)\n* Never return a row to the API if a NdbReciver is \"outstanding\"\n* Sort Receivers (only top row as they already are sorted within)\n```\n\n----------------------------------------\n\nTITLE: Command Execution Configuration\nDESCRIPTION: Each block specifies a command that is executed with a set maximum time and specific arguments. These configurations test various components and scenarios (e.g., backups, node restarts, partitioning) within MySQL. Each command configuration includes a 'max-time' attribute indicating the maximum time allowed for execution, a 'cmd' specifying the command, and 'args' detailing the arguments to pass. Proper configuration allows for structured and automated testing processes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/test-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 1000\ncmd: testBackup\nargs: -n BackupBank T6\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time : 300\ncmd: testDict\nargs: -n FK_SRNR1 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time : 300\ncmd: testDict\nargs: -n FK_SRNR2 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 1000\ncmd: testNdbApi\nargs: -n Bug44065_org\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 300\ncmd: testNdbApi\nargs: -n FragmentedApiFailure T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 600\ncmd: testNodeRestart\nargs: -n Bug34702 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 2500\ncmd: testPartitioning\nargs: --forceshortreqs\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 1000\ncmd: testSRBank\nargs: -n SR -l 300 -r 15 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 5000\ncmd: testNodeRestart\nargs: -n GCP -l 1 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 600\ncmd: test_event\nargs: -r 5000 -n Bug30780 T1\n```\n\nLANGUAGE: PlainText\nCODE:\n```\nmax-time: 600\ncmd: testRedo\nargs: -n RestartFD -l 2 T1\n```\n\n----------------------------------------\n\nTITLE: Configuring Solaris Package Auxiliary Files with CMake\nDESCRIPTION: This CMake script checks if the build is for Solaris, sets the installation location, and installs the postinstall-solaris script. It ensures the script is copied to the binary directory and installed with the correct permissions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/solaris/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT SOLARIS)\n  RETURN()\nENDIF()\n\n# Currently, this expands to \"support-files/\" in most layouts,\n# but to \"/usr/share/mysql/\" in a RPM.\n# It is important not to pollute \"/usr/bin\".\nSET(inst_location ${INSTALL_SUPPORTFILESDIR})\n\nFOREACH(script  postinstall-solaris)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${script}.sh \n                 ${CMAKE_CURRENT_BINARY_DIR}/${script} COPYONLY )\n\n  INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${script} \n     DESTINATION ${inst_location}/solaris COMPONENT Server_Scripts\n     PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Case File Names\nDESCRIPTION: Collection of test case file names following naming convention 'rr_[operation]_[scenario]' where operation includes insert (i), update (u), delete (d), select (s), and count (c) operations. Numbers indicate test sequence or data ranges.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/engines/rr_trx/run.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrr_u_10-19_nolimit\nrr_u_4\nrr_id_3\nrr_i_40-44\nrr_id_900\nrr_iud_rollback-multi-50\nrr_insert_select_2\nrr_replace_7-8\nrr_sc_sum_total\nrr_sc_select-same_2\nrr_sc_select-limit-nolimit_4\nrr_s_select-uncommitted\nrr_c_count_not_zero\n```\n\n----------------------------------------\n\nTITLE: ATRT Verbose Test Execution with Regression Mode\nDESCRIPTION: Comprehensive test run with increased verbosity, logging, and continued execution on test failures.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/ATRT_USAGE_README.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\natrt -v -v -r -R --log-file=log.txt --testcase-file=atrt_test_case_file\n```\n\n----------------------------------------\n\nTITLE: Removing source file based on platform\nDESCRIPTION: This CMake conditional statement checks if the target platform is not Linux. If the platform is not Linux, it removes `src/memutils.cc` from the TEMPTABLE_SOURCES list. This allows for platform-specific handling of source files during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/temptable/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  LIST(REMOVE_ITEM TEMPTABLE_SOURCES src/memutils.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL System Restart Test Configuration\nDESCRIPTION: Test configuration for full system restart scenarios with different arguments and maximum execution times\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--06-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_2b D2\nmax-time: 1620\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testDict\nargs: -n CreateAndDropWithData\nmax-time: 540\"\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Environment Variable Library\nDESCRIPTION: This snippet defines an internal C++ library for managing scoped environment variables using `absl_cc_library`. It specifies the source and header files, compiler options, and dependencies on Abseil configuration and raw logging internals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    scoped_set_env\n  SRCS\n    \\\"internal/scoped_set_env.cc\\\"\n  HDRS\n    \\\"internal/scoped_set_env.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::raw_logging_internal\n)\"\n```\n\n----------------------------------------\n\nTITLE: Handling ASAN Failures on Windows\nDESCRIPTION: Disables AddressSanitizer (ASAN) failures for Windows Visual Studio builds if ASAN is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_ASAN AND WIN32_VS)\n  ADD_DEFINITIONS(-DHAVE_ASAN_WIN32_VS=1)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding External Backtrace Support\nDESCRIPTION: Links the mysys library with external backtrace library if enabled in the build configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_EXT_BACKTRACE)\n  TARGET_LINK_LIBRARIES(mysys ext::backtrace)\n  TARGET_LINK_LIBRARIES(mysys_objlib ext::backtrace)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Set Example Component Variables in CMake\nDESCRIPTION: This snippet sets a variable named `EXAMPLE_COMPONENTS` to a list of component names. This list is likely used for further processing, such as adding dependencies or configuring build settings for these components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nSET(EXAMPLE_COMPONENTS\n  component_example_component1\n  component_example_component2\n  component_example_component3\n  component_self_required_test_component\n  component_cyclic_dependency_test_component_1\n  component_cyclic_dependency_test_component_2\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing NDB Cluster Manual Pages in CMake\nDESCRIPTION: Installs MySQL NDB Cluster tool and daemon man pages only when NDB support is enabled in the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_NDB)\n  INSTALL(FILES ${MAN1_NDB}\n    DESTINATION ${INSTALL_MANDIR}/man1 COMPONENT ManPages)\n  INSTALL(FILES ${MAN8_NDB}\n    DESTINATION ${INSTALL_MANDIR}/man8 COMPONENT ManPages)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal IOStream State Saver in CMake\nDESCRIPTION: Defines a CMake test target for testing the internal IOStream state saver component. This target compiles and links iostream_state_saver_test.cc with dependencies on absl::random_internal_iostream_state_saver and GTest.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_iostream_state_saver_test\n  SRCS\n    \"internal/iostream_state_saver_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_internal_iostream_state_saver\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Protobuf Message Field Definitions and Values\nDESCRIPTION: A complete protobuf message instance showing different field types (optional, repeated, default, oneof) with various data types including integers, floats, strings, enums, nested messages, and groups. The example demonstrates proper value assignment for each field type.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/text_format_unittest_data.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\noptional_int32: 101\noptional_int64: 102\noptional_uint32: 103\noptional_uint64: 104\noptional_sint32: 105\noptional_sint64: 106\noptional_fixed32: 107\noptional_fixed64: 108\noptional_sfixed32: 109\noptional_sfixed64: 110\noptional_float: 111\noptional_double: 112\noptional_bool: true\noptional_string: \"115\"\noptional_bytes: \"116\"\nOptionalGroup {\n  a: 117\n}\noptional_nested_message {\n  bb: 118\n}\noptional_foreign_message {\n  c: 119\n}\noptional_import_message {\n  d: 120\n}\noptional_nested_enum: BAZ\noptional_foreign_enum: FOREIGN_BAZ\noptional_import_enum: IMPORT_BAZ\noptional_string_piece: \"124\"\noptional_cord: \"125\"\noptional_public_import_message {\n  e: 126\n}\noptional_lazy_message {\n  bb: 127\n}\nrepeated_int32: 201\nrepeated_int32: 301\nrepeated_int64: 202\nrepeated_int64: 302\nrepeated_uint32: 203\nrepeated_uint32: 303\nrepeated_uint64: 204\nrepeated_uint64: 304\nrepeated_sint32: 205\nrepeated_sint32: 305\nrepeated_sint64: 206\nrepeated_sint64: 306\nrepeated_fixed32: 207\nrepeated_fixed32: 307\nrepeated_fixed64: 208\nrepeated_fixed64: 308\nrepeated_sfixed32: 209\nrepeated_sfixed32: 309\nrepeated_sfixed64: 210\nrepeated_sfixed64: 310\nrepeated_float: 211\nrepeated_float: 311\nrepeated_double: 212\nrepeated_double: 312\nrepeated_bool: true\nrepeated_bool: false\nrepeated_string: \"215\"\nrepeated_string: \"315\"\nrepeated_bytes: \"216\"\nrepeated_bytes: \"316\"\nRepeatedGroup {\n  a: 217\n}\nRepeatedGroup {\n  a: 317\n}\nrepeated_nested_message {\n  bb: 218\n}\nrepeated_nested_message {\n  bb: 318\n}\nrepeated_foreign_message {\n  c: 219\n}\nrepeated_foreign_message {\n  c: 319\n}\nrepeated_import_message {\n  d: 220\n}\nrepeated_import_message {\n  d: 320\n}\nrepeated_nested_enum: BAR\nrepeated_nested_enum: BAZ\nrepeated_foreign_enum: FOREIGN_BAR\nrepeated_foreign_enum: FOREIGN_BAZ\nrepeated_import_enum: IMPORT_BAR\nrepeated_import_enum: IMPORT_BAZ\nrepeated_string_piece: \"224\"\nrepeated_string_piece: \"324\"\nrepeated_cord: \"225\"\nrepeated_cord: \"325\"\nrepeated_lazy_message {\n  bb: 227\n}\nrepeated_lazy_message {\n  bb: 327\n}\ndefault_int32: 401\ndefault_int64: 402\ndefault_uint32: 403\ndefault_uint64: 404\ndefault_sint32: 405\ndefault_sint64: 406\ndefault_fixed32: 407\ndefault_fixed64: 408\ndefault_sfixed32: 409\ndefault_sfixed64: 410\ndefault_float: 411\ndefault_double: 412\ndefault_bool: false\ndefault_string: \"415\"\ndefault_bytes: \"416\"\ndefault_nested_enum: FOO\ndefault_foreign_enum: FOREIGN_FOO\ndefault_import_enum: IMPORT_FOO\ndefault_string_piece: \"424\"\ndefault_cord: \"425\"\noneof_uint32: 601\noneof_nested_message {\n  bb: 602\n}\noneof_string: \"603\"\noneof_bytes: \"604\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Output Directories for Change Streams Library\nDESCRIPTION: Sets up the source and output directories for the Change Streams library, including locations for protobuf-generated files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CS_BASE_SRC_DIR ${CMAKE_SOURCE_DIR}/libchangestreams/src)\nSET(CS_LIB_PB_GENERATE_DIR ${CMAKE_BINARY_DIR}/libchangestreams/generated/lite/mysql/cs/codec/pb)\nSET(CS_LIB_PB_SPEC_FILES ${CS_BASE_SRC_DIR}/lib/protobuf/reader_state.proto)\nSET(CS_LIBS_ARCHIVE_OUTPUT_DIR ${CMAKE_BINARY_DIR}/libchangestreams/lib/)\n```\n\n----------------------------------------\n\nTITLE: ByteBuffer and Pointer Mappings in NdbScanOperation\nDESCRIPTION: Issues related to ByteBuffer usage for C++ pointer mappings in the NdbScanOperation Java class. These methods involve mapping between Java ByteBuffer and C++ void* pointers, as well as handling double pointers for out parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: ByteBuffer/*_void *_*/ customData();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native ByteBuffer/*_void *_*/ customData();\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:BB> or check if needed: public final native void customData(ByteBuffer/*_void *_*/ p0);\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support <out:char *> or check if needed: public final native int nextResult(const char * * out_row_ptr, boolean fetchAllowed, boolean forceSend);\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration Parameters\nDESCRIPTION: Configuration settings for MySQL server that define the locations for data files, undo logs, and other InnoDB settings required for the tablespace portability test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/README_tablespace_portable_linux.txt#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlog_error_verbosity=3\nlower_case_table_names=1\ninnodb_log_group_home_dir=../data_home\ninnodb_data_home_dir=../data_home\ninnodb_undo_directory=../undo_files\ninnodb_undo_tablespaces=5\ninnodb_data_file_path=data01:20M;data02:20M:autoextend\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSystemRestart\nargs: -n Bug27434 T1\nmax-time: 360\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Test Command Configuration\nDESCRIPTION: Collection of test commands with timing and arguments specifications for testing various MySQL server functionalities including node restarts, system restarts, event handling, and basic operations. Each test has a max-time limit and specific test arguments.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 2500\ncmd: test_event\nargs: -n Multi\n\nmax-time: 3600\ncmd: test_event\nargs: -n CreateDropNR T1\n\nmax-time: 600\ncmd: testBasic\nargs: -n PkRead T1\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: kernel_timeout_internal_test\nDESCRIPTION: This snippet defines an Abseil C++ test named `kernel_timeout_internal_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::kernel_timeout_internal`, `absl::config`, `absl::random_random`, `absl::time`, and `GTest::gmock_main` for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    kernel_timeout_internal_test\n  SRCS\n    \\\"internal/kernel_timeout_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::kernel_timeout_internal\n    absl::config\n    absl::random_random\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: System Restart Testing in Shell\nDESCRIPTION: This snippet initializes a test for system restart capabilities, testing with a full database setup. It executes under specified time constraints using the `testSystemRestart` command. The environment must support MySQL's system-level operations for accurate test results.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 14400\ncmd: testSystemRestart\nargs: -n SR_FULLDB T6\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Build Configuration - CMake\nDESCRIPTION: The snippet adds the 'src' directory to the build process, allowing compilation of source files within that directory. This is commonly used in CMake configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysqlxmessages/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compare Library Target\nDESCRIPTION: CMake configuration for the compare library providing comparison functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    compare\n  HDRS\n    \"compare.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n    absl::type_traits\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing Ampersand After Range\nDESCRIPTION: Handles an ampersand character that appears after a range expression, determining whether it's part of an intersection operator or a literal.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_11\n\nLANGUAGE: state-machine\nCODE:\n```\nset-range-amp:\n    '&'                  n  set-after-op                           doSetIntersection2\n    default                 set-after-lit                          doSetAddAmp\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterJ Test Exports in CMake\nDESCRIPTION: This code block sets up a list of packages to be exported for use in the ClusterJ testing environment. It includes packages for JUnit and internal ClusterJ test structures, facilitating the smooth functioning of test suites by specifying accessible modules.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLUSTERJ_TEST_EXPORTS\n  junit.framework\n  junit.textui\n  org.junit\n  regression\n  testsuite.clusterj\n  testsuite.clusterj.domaintypehandler\n  testsuite.clusterj.model\n  testsuite.clusterj.util)\n```\n\n----------------------------------------\n\nTITLE: Building NDB Transport Library\nDESCRIPTION: Creates a convenience library named 'ndbtransport' containing all transport-related source files including platform-specific implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/transporter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbtransport\n  Transporter.cpp\n  TCP_Transporter.cpp\n  Loopback_Transporter.cpp\n  TransporterRegistry.cpp\n  Packer.cpp\n  Multi_Transporter.cpp\n  ${EXTRA_SRC}\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending Base Libraries for Windows and Apple (Revisited)\nDESCRIPTION: Appends platform-specific libraries to the BASE_LIBRARIES list.  This section includes libraries for Windows (wsock32, ws2_32, bcrypt, setupapi, hid, winscard) and Apple (CoreFoundation, IOKit, PCSC).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(WIN32)\n\tlist(APPEND BASE_LIBRARIES wsock32 ws2_32 bcrypt setupapi hid)\n\tif(USE_PCSC)\n\t\tlist(APPEND BASE_LIBRARIES winscard)\n\tendif()\nelseif(APPLE)\n\tlist(APPEND BASE_LIBRARIES \\\"-framework CoreFoundation\\\"\n\t    \\\"-framework IOKit\\\")\n\tif(USE_PCSC)\n\t\tlist(APPEND BASE_LIBRARIES \\\"-framework PCSC\\\")\n\tendif()\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library for MySQL REST Service\nDESCRIPTION: Defines an interface library for the MySQL REST service. This library will be used to ensure that any dependent libraries can include necessary headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(mysql_rest_service_if INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Automodule Documentation for google.protobuf.text_format in Python\nDESCRIPTION: This snippet represents the auto-generated documentation for the `google.protobuf.text_format` module. It includes documentation for members, inherited members, and undocumented members. This is achieved using the `automodule` directive within the reStructuredText format.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/python/docs/google/protobuf/text_format.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: google.protobuf.text_format\n   :members:\n   :inherited-members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Tests for MySQL NDB Cluster\nDESCRIPTION: Test configurations for foreign key functionality in NDB Cluster. The tests cover creation, dropping, error handling, and cascading operations for foreign key constraints.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_17\n\nLANGUAGE: plain\nCODE:\n```\n# Bug18401792 added on 17.04.2014\n#max-time : 600\n#cmd: testDict\n#args: -n DictTakeOver_1 T1\n#\nmax-time : 300\ncmd: testFK\nargs: -n CreateDrop T1\n\n# Bug18408667 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n CreateDropWithData T1\n#\n# Bug18408662 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n CreateDropDuring T1\n#\nmax-time : 300\ncmd: testFK\nargs: -n CreateDropError T1\n\n# Bug18408675 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n Basic1 T1\n#\n# Bug18408677 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n Basic5 T1\n#\n# Bug18408670 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n Basic55 T1\n#\n# Bug18408672 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n TransError T1 T15\n#\nmax-time : 300\ncmd: testFK\nargs: -n Cascade1 T1\n\n# Bug18408680 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n Cascade10 T1\n#\n# Bug18408674 added on 17.04.2014\n#max-time : 300\n#cmd: testFK\n#args: -n CascadeError T1\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in Python C++\nDESCRIPTION: This snippet demonstrates running Python conformance tests with an option to use fast C++ Protocol Buffers by defining an environment variable. Bazel is used to perform the tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ bazel test //python:conformance_test_cpp --define=use_fast_cpp_protos=true\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: System Restart to I3\nDESCRIPTION: This snippet outlines a procedure to test a system restart to a specific state labeled 'I3', defining necessary arguments for execution and operational limits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_27\n\nLANGUAGE: text\nCODE:\n```\ncmd: testSystemRestart\nargs: -n to I3\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal btree_test_common Library in CMake for Abseil\nDESCRIPTION: Sets up an internal-only 'btree_test_common' library target for testing purposes. It includes test headers and dependencies specific to B-tree testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    btree_test_common\n  hdrs\n    \"btree_test.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::btree\n    absl::cord\n    absl::flat_hash_set\n    absl::strings\n    absl::time\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Distributions Test - C++\nDESCRIPTION: Defines a test covering the various functionalities of the random distributions library, linking necessary source codes and dependencies for effective execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_distributions_test\n  SRCS\n    \"distributions_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_distributions\n    absl::random_random\n    absl::random_internal_distribution_test_util\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Classpath for JTIE Unload Test in CMake\nDESCRIPTION: Sets the classpath for the JTIE unload test, pointing to the compiled classes in the NDB JTIE unload test directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/unload/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/test/unload/target/classes)\n```\n\n----------------------------------------\n\nTITLE: Testing System Restart - MySQL Server - Bash\nDESCRIPTION: This snippet provides a command to test the system restart procedure in the MySQL server. The 'testSystemRestart' command is employed with specific arguments to ensure that the server's restart functionality is properly validated. It does not reference any external dependencies beyond MySQL itself.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--01-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_1b D1\nmax-time: 12240\n```\n\n----------------------------------------\n\nTITLE: Defining log_structured Library\nDESCRIPTION: This snippet defines the `log_structured` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependencies on `absl::config`, `absl::log_internal_structured`, and `absl::strings`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_33\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_structured\n  HDRS\n    \"structured.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_internal_structured\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: mutex_test\nDESCRIPTION: This snippet defines an Abseil C++ test for mutex functionality, named `mutex_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and dependencies, including `absl::synchronization`, `absl::thread_pool`, `absl::base`, `absl::check`, `absl::config`, `absl::core_headers`, `absl::log`, `absl::memory`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    mutex_test\n  SRCS\n    \\\"mutex_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::thread_pool\n    absl::base\n    absl::check\n    absl::config\n    absl::core_headers\n    absl::log\n    absl::memory\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Foreign Key Test Configuration\nDESCRIPTION: Test configuration for foreign key operations with specific arguments and time constraints\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--06-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testFK\nargs: -n CreateDropError T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Install MySQL Log Rotate Script\nDESCRIPTION: This snippet installs the configured `mysql-log-rotate` script to the installation directory. The script is installed as part of the Server_Scripts component, and permissions are set to allow the owner to read and write, and the group and world to read.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/mysql-log-rotate\n  COMPONENT Server_Scripts\n  DESTINATION ${INSTALL_SUPPORTFILESDIR}\n  PERMISSIONS\n  OWNER_READ OWNER_WRITE\n  GROUP_READ WORLD_READ\n  )\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data Values\nDESCRIPTION: Test data set with 10 rows containing mixed data types including integers, floating point numbers in standard and scientific notation, dates, timestamps and binary values. Each row follows a consistent pattern with incrementing values.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/ndb_tb2.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n1\t1\t1\t1\t1\t1\t-5\t0.0\t1\t0.0\t1\t0.0\t1\t0.0\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1000-01-01\t838:59:58\t1970-01-02 00:00:01\t19700102000001\t1902\t1902\t1902\t2\t2\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties in CMake\nDESCRIPTION: This snippet sets compile flags for a list of C source files, excluding MSVC compiler. It uses `set_source_files_properties` to add `EXTRA_CFLAGS` to the specified source files.  This allows for custom compilation options for specific files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n\tset_source_files_properties(assert_get.c assert_verify.c base64.c bio.c\n\t    config.c cred_make.c cred_verify.c credman.c fido2-assert.c\n\t    fido2-cred.c fido2-token.c pin.c token.c util.c\n\t    PROPERTIES COMPILE_FLAGS \"${EXTRA_CFLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Daemon Manual Pages in CMake\nDESCRIPTION: Defines manual pages for the MySQL server daemon (MAN8) to be installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MAN8\n  mysqld.8\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Log Format Test in CMake\nDESCRIPTION: This snippet configures the test target for Abseil's log formatting functionality. It includes the source file and dependencies needed to test formatting capabilities within the logging system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_format_test\n  SRCS\n    \"log_format_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::check\n    absl::log\n    absl::log_internal_test_matchers\n    absl::optional\n    absl::scoped_mock_log\n    absl::str_format\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings for MySQL Error Messages\nDESCRIPTION: This snippet defines the language settings for error messages, specifying English (eng) and Latin1 character encodings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_multilang.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nlanguages english=eng latin1;\nlanguages english=eng latin1;\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Test Command Configuration\nDESCRIPTION: A series of test command definitions with their arguments and maximum execution times. Each command specifies a test executable, test-specific arguments, and a maximum allowed runtime in seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--08-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testLimits\nargs: -n ExhaustSegmentedSectionScan WIDE_2COL\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n GetOperationNoTab T6\nmax-time: 180\n\ncmd: testScan\nargs: -n CloseRefresh T1\nmax-time: 180\n\ncmd: test_event\nargs: -n Apiv2HQE-latestGCI T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n Bug54944 T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n CommitTry630 T1 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ExecuteScanWithoutOpenScan T6 D1 D2\nmax-time: 180\n\ncmd: testBlobs\nargs: -bug 27370 -skip p\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug36276 T1\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanReadAndPkRead T6 D1 D2\nmax-time: 180\n\ncmd: testDict\nargs: -r 10000 -n TableAddAttrsDuring T1 T6\nmax-time: 1800\n\ncmd: testScan\nargs: -n ScanRead240\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n UnlockMulti T3\nmax-time: 360\n\ncmd: testNodeRestart\nargs: -n Bug31980 T1\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanDelete\nmax-time: 360\n\ncmd: testBasic\nargs: -n PkInsert\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanRead488 -l 10 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanRead488O -l 10 T6 D1 D2\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanReadError5024 T1 D1 D2\nmax-time: 360\n\ncmd: testBasic\nargs: -n TupError\nmax-time: 900\n\ncmd: testSystemRestart\nargs: -l 2 -n Bug28770 T1\nmax-time: 540\n\ncmd: test_event\nargs: -n Bug37442 T1\nmax-time: 540\n\ncmd: test_event\nargs: -n Apiv2-check_event_queue_cleared_initial T1\nmax-time: 900\n\ncmd: testBackup\nargs: -n BackupOne T1 T6 I3 D2\nmax-time: 1080\n\ncmd: testNodeRestart\nargs: -n Bug27283 T1\nmax-time: 1260\n\ncmd: testScan\nargs: -n ScanReadWhileNodeIsDown T1\nmax-time: 1080\n\ncmd: testScan\nargs: -n ScanReadRestart D1 D2\nmax-time: 1440\n\ncmd: testNodeRestart\nargs: -n Bug44952 T1\nmax-time: 2700\n\ncmd: testNodeRestart\nargs: -n Bug18612SR T1\nmax-time: 2880\n\ncmd: testIndex\nargs: -n DeferredError\nmax-time: 3780\n```\n\n----------------------------------------\n\nTITLE: Setting Path to Custom SSL for Apple\nDESCRIPTION: Calls a custom CMake function SET_PATH_TO_CUSTOM_SSL_FOR_APPLE to configure the path to a custom SSL library for the 'fido2' target when building for Apple platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET_PATH_TO_CUSTOM_SSL_FOR_APPLE(fido2)\"\n```\n\n----------------------------------------\n\nTITLE: Defining non_temporal_memcpy Test with absl_cc_test in Bazel\nDESCRIPTION: This snippet defines a C++ test named `non_temporal_memcpy_test` using `absl_cc_test`. It specifies the source file for the test, compiler options, and dependencies. The dependencies include the `non_temporal_memcpy` library and the Google Test framework, indicating that this test verifies the correctness and performance of the non-temporal memory copy implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    non_temporal_memcpy_test\n  SRCS\n    \\\"internal/non_temporal_memcpy_test.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::non_temporal_memcpy\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keyring Frontend Test in CMake\nDESCRIPTION: Configures a test for keyring frontend functionality with special warning downgrade for string operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_keyring_frontend.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_utils\n  EXTRA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/keyring_frontend.cc\n  INCLUDE_DIRS\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n  )\nDOWNGRADE_STRINGOP_WARNINGS(routertest_router_keyring_frontend)\n```\n\n----------------------------------------\n\nTITLE: Testing Optimization Functionality\nDESCRIPTION: This snippet defines a C++ test for optimization functionality using `absl_cc_test`. It includes the source file, compiler options, and dependencies on Abseil core headers, optional, and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    optimization_test\n  SRCS\n    \\\"optimization_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::core_headers\n    absl::optional\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compatibility Sources for Windows in CMake\nDESCRIPTION: This snippet conditionally appends more compatibility source files to the `COMPAT_SOURCES` variable when building on Windows (excluding Cygwin and MSYS). It adds files like `bsd-getline.c` and `getopt_long.c` which provide POSIX-like functionality on Windows.  If building shared libraries, `posix_win.c` is also included.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 AND NOT CYGWIN AND NOT MSYS)\n\tlist(APPEND COMPAT_SOURCES\n\t\t../openbsd-compat/bsd-getline.c\n\t\t../openbsd-compat/endian_win32.c\n\t\t../openbsd-compat/explicit_bzero_win32.c\n\t\t../openbsd-compat/getopt_long.c\n\t\t../openbsd-compat/readpassphrase_win32.c\n\t)\n\tif (BUILD_SHARED_LIBS)\n\t\tlist(APPEND COMPAT_SOURCES ../openbsd-compat/posix_win.c)\n\tendif()\nelse()\n\tlist(APPEND COMPAT_SOURCES ../openbsd-compat/readpassphrase.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Scan Close Operation Protocol\nDESCRIPTION: Describes the protocol for closing scan operations, including signal handling and receiver completion.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/ScanOperation.txt#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1) Each NdbReciver gets a signal when it's complete\n   (0 rows is ack-ed)\n2) The API then \"closes\" this receiver\n3) The API can at any time close then scan for other reason(s)\n   (example dying)\n4) This is signal:ed via a NEXT_SCANREQ (close = 1)\n5) TC responds with a SCAN_TABCONF (close = 1)\n```\n\n----------------------------------------\n\nTITLE: Testing Dictionary Operations in MySQL Server\nDESCRIPTION: Tests specified here are intended to evaluate dictionary operations like creating and dropping tables in MySQL with various conditions. Commands such as 'testDict' execute operations on database schema, testing scenarios like creation under different load conditions, hence requiring a MySQL environment with proper table schema setup.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/basic.txt#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 1500\ncmd: testDict\nargs: -n CreateAndDrop\n\nmax-time: 1500\ncmd: testDict\nargs: -n CreateAndDropWithData\n\nmax-time: 1500\ncmd: testDict\nargs: -n CreateAndDropDuring T6 T10\n```\n\n----------------------------------------\n\nTITLE: NDBAPI Test Configuration\nDESCRIPTION: Test configurations for NDBAPI functionality including transaction handling, operation management, and error scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 500\ncmd: testNdbApi\nargs: -n MaxTransactions T1 T6 T13\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil Utility Test in C++\nDESCRIPTION: This snippet defines a test case for the 'utility' library created in the previous snippet. It specifies the source file for the tests, compilation options, and dependencies on the Abseil utility components and Google Test framework. The purpose is to ensure the functionality of the utility library is verified through automated tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/utility/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    utility_test\n  SRCS\n    \"utility_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::utility\n    absl::core_headers\n    absl::memory\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Return Check in CMake\nDESCRIPTION: This code block checks if the target `rewriter` was successfully created by `MYSQL_ADD_PLUGIN`. If the target does not exist (meaning the plugin should not be built), the function returns early, preventing further build steps.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT TARGET rewriter)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Warning Flags for Bison-generated Code\nDESCRIPTION: Checks if the compiler supports the -Wimplicit-fallthrough warning flag and applies it to the Bison-generated parser source if supported.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wimplicit-fallthrough\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(${BISON_match_parser_OUTPUT_SOURCE}\n    COMPILE_FLAGS \"${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Zone Library\nDESCRIPTION: CMake configuration for the Abseil time zone library with multiple source and header files\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/time/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    time_zone\n  HDRS\n    \"internal/cctz/include/cctz/time_zone.h\"\n    \"internal/cctz/include/cctz/zone_info_source.h\"\n  SRCS\n    \"internal/cctz/src/time_zone_fixed.cc\"\n    \"internal/cctz/src/time_zone_fixed.h\"\n    \"internal/cctz/src/time_zone_format.cc\"\n    \"internal/cctz/src/time_zone_if.cc\"\n    \"internal/cctz/src/time_zone_if.h\"\n    \"internal/cctz/src/time_zone_impl.cc\"\n    \"internal/cctz/src/time_zone_impl.h\"\n    \"internal/cctz/src/time_zone_info.cc\"\n    \"internal/cctz/src/time_zone_info.h\"\n    \"internal/cctz/src/time_zone_libc.cc\"\n    \"internal/cctz/src/time_zone_libc.h\"\n    \"internal/cctz/src/time_zone_lookup.cc\"\n    \"internal/cctz/src/time_zone_posix.cc\"\n    \"internal/cctz/src/time_zone_posix.h\"\n    \"internal/cctz/src/tzfile.h\"\n    \"internal/cctz/src/zone_info_source.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    Threads::Threads\n    $<$<PLATFORM_ID:Darwin>:-Wl,-framework,CoreFoundation>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for API Test in CMake\nDESCRIPTION: Configures additional compiler flags for the API test application, including strict prototypes and warnings for missing profiles.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU)\n  ADD_COMPILE_FLAGS(\n    ${CMAKE_CURRENT_BINARY_DIR}/api_test.c\n    COMPILE_FLAGS -Wstrict-prototypes\n    )\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(\n    ${CMAKE_CURRENT_BINARY_DIR}/api_test.c\n    COMPILE_FLAGS ${HAS_WARN_FLAG}\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring flat_hash_set_test in CMake for Abseil\nDESCRIPTION: Defines the 'flat_hash_set_test' target for testing the flat hash set implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    flat_hash_set_test\n  SRCS\n    \"flat_hash_set_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n    \"-DUNORDERED_SET_CXX17\"\n  DEPS\n    absl::check\n    absl::flat_hash_set\n    absl::hash_generator_testing\n    absl::memory\n    absl::strings\n    absl::unordered_set_constructor_test\n    absl::unordered_set_lookup_test\n    absl::unordered_set_members_test\n    absl::unordered_set_modifiers_test\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Sizing Options in CMake\nDESCRIPTION: This snippet allows the configuration of features related to dynamic sized delete operators. It evaluates specific options to enable these features based on user preferences during the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\noption(gperftools_dynamic_sized_delete_support\n       \"Try to build run-time switch for sized delete operator\"\n       OFF)\nif(gperftools_dynamic_sized_delete_support)\n  set(ENABLE_DYNAMIC_SIZED_DELETE 1)\nendif()\n\noption(gperftools_sized_delete \"Build sized delete operator\" OFF)\nif(gperftools_sized_delete)\n  set(ENABLE_SIZED_DELETE 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil City Hash Internal Library in CMake\nDESCRIPTION: Defines an internal 'city' hash target that implements the CityHash algorithm. The target includes implementation files and depends on config, core_headers, and endian components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    city\n  HDRS\n    \"internal/city.h\"\n  SRCS\n    \"internal/city.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::endian\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring inlined_vector_exception_safety_test in CMake for Abseil\nDESCRIPTION: Sets up the 'inlined_vector_exception_safety_test' target for testing exception safety of the inlined vector implementation. It defines the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    inlined_vector_exception_safety_test\n  SRCS\n    \"inlined_vector_exception_safety_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::inlined_vector\n    absl::config\n    absl::exception_safety_testing\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Scoped Environment Variable Functionality\nDESCRIPTION: This snippet defines a C++ test target for the scoped environment variable library using `absl_cc_test`. It includes the source file, compiler options, and dependencies on the Abseil scoped environment variable library and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    scoped_set_env_test\n  SRCS\n    \\\"internal/scoped_set_env_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::scoped_set_env\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data Files\nDESCRIPTION: Configures the installation of ICU data directory to the private library directory with appropriate file permissions. This is part of the SharedLibraries component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(DIRECTORY ${ICUDT_DIR}\n  DESTINATION \"${INSTALL_PRIV_LIBDIR}\"\n  COMPONENT SharedLibraries\n  FILE_PERMISSIONS\n    OWNER_READ\n    OWNER_WRITE\n    GROUP_READ\n    WORLD_READ\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring zlib Project Settings in CMake\nDESCRIPTION: Sets up the basic project configuration for zlib, including version, language, and build options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n\nset(VERSION \"1.3.1\")\n\nproject(zlib VERSION ${VERSION} LANGUAGES C)\n\noption(ZLIB_BUILD_EXAMPLES \"Enable Zlib Examples\" ON)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory 'tests/mrs_client'\nDESCRIPTION: This snippet adds the 'tests/mrs_client' subdirectory to the build process. This directory likely contains tests for the MRS client.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_SUBDIRECTORY(tests/mrs_client)\"\n```\n\n----------------------------------------\n\nTITLE: Tabular Test Data for MySQL Server\nDESCRIPTION: Test data containing 10 rows of structured data with consistent patterns. Each row includes string patterns, special characters, numeric values, and repeating sequences. The data appears to be formatted for database testing or validation purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/innodb_tb1.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\na`0\ta`0\t0`\t0`\ta`0\ta`0\t0`\t0`\t!\t6\t163\t103\t238\t3058\t30243\t22056\t9444\t-5\t1\t1\t1\t-5\t1\t1\t1\t-5\t1\t1\t1\t-5\t1\t1\t1\t-5\t-5\t1\t1\t1\t1\t1\t1\t-5\t0.0\t1\t0.0\t1\t0.0\t1\t0.0\t-5\t1\t1\t1\t-5\t-5\naa0\taa0\t1aa\t1aa\taa0\taa0\t1aa\t1aa\t@\t9\t207\t1\t246\t13214\t57220\t1505\t58996\t-4\t2\t2\t2\t-4\t2\t2\t2\t-4\t2\t2\t2\t-4\t2\t2\t2\t-4\t-4\t2\t2\t2\t2\t2\t2\t-4\t1.1\t2\t1.1\t2\t1.1\t2\t1.1\t-4\t2\t2\t2\t-4\t-4\nab0\tab0\t2baa\t2baa\tab0\tab0\t2baa\t2baa\t#\t3\t50\t103\t193\t10965\t3038\t31585\t20149\t-3\t3\t3\t3\t-3\t3\t3\t3\t-3\t3\t3\t3\t-3\t3\t3\t3\t-3\t-3\t3\t3\t3\t3\t3\t3\t-3\t2.2\t3\t2.2\t3\t2.2\t3\t2.2\t-3\t3\t3\t3\t-3\t-3\n```\n\n----------------------------------------\n\nTITLE: Event Testing in Shell\nDESCRIPTION: This snippet initiates tests related to event operations within MySQL. It utilizes `test_event` command with numerous parameters to test the behavior of events under specified conditions and execution limits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 3600\ncmd: test_event\nargs: -n EventOperationApplier_NR -l 2\n```\n\n----------------------------------------\n\nTITLE: NDB JTie Project Structure Conditional Block\nDESCRIPTION: CPP conditional block (#if 0) containing project documentation, directory structure, build instructions, and todo list. This block is currently deactivated, indicating it needs updating.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#if 0\n\nNDB JTie -- A Robust Java Wrapper for NDB API\n---------------------------------------------\n\nDirectory Structure:\n\nndbjtie/\t\t\t\tthis directory\n\n    jtie/\t\t\t\tJTie generic C++ template library\n\tinclude/\t\t\tAPI & implementation sources\n\tsrc/com/mysql/jtie/\t\tJava sources\n\ttest/\t\t\t\tunit tests\n\n    mysql/\t\t\t\tMySQL Utility function library\n\tinclude/\n        src/\n        test/\n\n    ndbjtie/\t\t\t\tNDB Java API library\n        src/\n\t    com/mysql/ndbjtie/mgmapi/\tJava Management API\n\t    com/mysql/ndbjtie/mysql/\tMySQL Utilities functions\n\t    com/mysql/ndbjtie/ndbapi/\tJava NDB API\n\t    mgmapi.cpp\t\t\tMGM API JNI implementation\n\t    mysql.cpp\t\t\tMySQL Utilities JNI implementation\n\t    ndbapi.cpp\t\t\tNDB API JNI implementation\n        test/\t\t\t\tunit tests\n\n    utils/\t\t\t\tutility classes (for debugging)\n\n\nThe current, provisional build system\n-------------------------------------\n\n    env.properties\t\t\texternal include & tool dependencies\n    Makefile\t\t\t\tglobal targets\n    Makefile.defaults\t\t\tdefault rules & targets\n\nQuick build & test procedure:\n\n- edit env.properties for the JAVA and NDBAPI include/lib paths\n\n- run \"make help\" for a list of gloabl make targets\n\n- run \"make dep\" to build the dependencies in all subprojects\n\n- run \"make dbg\" to build the debug binaries in all subprojects\n\n- in jtie/test, run \"make check\" for the generic lib unit test\n\n- in ndbjtie/test, run \"make check\" for the NDB JTIE \"smoke\" test\n  (requires a running cluster on default ports with CRUND schema loaded)\n\n\nQuestions and comments appreciated.\nmartin.zaun@sun.com\n\n\nTo Do List\n----------\n\n- mapping support for Object[] parameters\n\n- current version ~0.9\n\n- integrate with automake, Cluster paths, build system\n\n- cleanup and fix mapping issues tagged by \"// MMM! ...\"\n\n- cleanup and fix code issues tagged by    \"// XXX ...\"\n\n- uncomment & implement unmapped NDB API functions needed by Cluster/J\n\n- ...\n\n#endif\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Source and Classpath for Jar Creation\nDESCRIPTION: This code defines Java source files and the classpath required for building a Java JAR. The JAVA_SOURCES variable lists Java files for JTIE, while CLASSPATH contains the directory for compiled Java classes. These variables are used in the JAR creation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CLUSTERJ_JTIE_PREFIX}/ArrayWrapper.java\n  ${CLUSTERJ_JTIE_PREFIX}/Wrapper.java\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/target/classes)\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Entry Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log entry functionality. It specifies the source file and dependencies needed to validate the log entry components that store logging information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_entry_test\n  SRCS\n    \"log_entry_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_entry\n    absl::log_internal_append_truncated\n    absl::log_internal_format\n    absl::log_internal_globals\n    absl::log_internal_test_helpers\n    absl::log_severity\n    absl::span\n    absl::strings\n    absl::time\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Mutex and Lock Dependencies\nDESCRIPTION: This code defines the relationships between various InnoDB mutexes and locks. It uses 'ARC FROM' statements to indicate which locks or mutexes can be held while acquiring others, specifying the operation type (S, X, SX) where applicable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"sxlock/innodb/btr_search_latch\" OP \"S\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"S\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"sxlock/innodb/hash_table_locks\" OP \"X\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"sxlock/innodb/index_tree_rw_lock\" OP \"SX\"\nARC FROM \"mutex/innodb/ibuf_mutex\" TO \"sxlock/innodb/lock_sys_global_rw_lock\" OP \"S\"\n\n// ... (truncated for brevity)\n\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/buf_pool_flush_state_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/flush_list_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/log_limits_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/log_sn_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/page_sys_arch_mutex\"\nARC FROM \"mutex/innodb/page_sys_arch_client_mutex\" TO \"mutex/innodb/page_sys_arch_oper_mutex\"\n```\n\n----------------------------------------\n\nTITLE: Checking and Disabling Shadow Field Warnings in CMake\nDESCRIPTION: Detects if the C++ compiler supports the 'shadow-field' warning flag and disables it if supported. This prevents warnings about shadowed fields that occur particularly with Clang compiler when running the JTIE tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"shadow-field\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  MESSAGE(STATUS \"Turning off shadow field warnings for jtie tests\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Path Utility Source Selection\nDESCRIPTION: Conditionally adds platform-specific path utility source files based on the operating system (Unix or Windows)\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n    LIST(APPEND jit_executor_plugin_SOURCE utils/utils_path_unix.cc)\nELSEIF(WIN32)\n    LIST(APPEND jit_executor_plugin_SOURCE utils/utils_path_win32.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning\nDESCRIPTION: Disables compiler warning for missing profile features specifically for Xcode on macOS. This ensures a cleaner build without unnecessary warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nIF(APPLE_XCODE)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-shorten-64-to-32\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Testing Node Restart Command Definition - Shell\nDESCRIPTION: This snippet defines a command to test the restart of a MySQL node with specific parameters. The command, `testNodeRestart`, uses arguments to set a specific node for testing and a time limit for the operation. It is intended for use in a testing environment to verify node behavior during restart scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--13-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n LCP_with_many_parts -r 1000 T17\nmax-time: 6000\n```\n\n----------------------------------------\n\nTITLE: Suppressing Windows SDK Warnings\nDESCRIPTION: Suppresses warnings generated by Windows SDK header files for specific source files when using MSVC static analyzer.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# WinSDK files included by these .cc files generate warnings in /analyze\n# TODO: remove these when the warnings in the SDK are fixed.\n# See e.g. https://aka.ms/AAfydfn\nIF(MSVC_CPPCHECK AND MSVC AND MSVC_VERSION GREATER 1935)\n  ADD_COMPILE_FLAGS(my_init.cc COMPILE_FLAGS \"/wd6553\")\n  ADD_COMPILE_FLAGS(my_conio.cc COMPILE_FLAGS \"/wd28286\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Parsing Plus Quantifiers - Regex\nDESCRIPTION: Defines transitions for processing '+' quantifiers like '??' and '?+'. Each state determines the quantifier's type by evaluating subsequent characters and chooses the appropriate parsing action.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\nquant-plus:\n     '?'                 n  expr-cont                               doNGPlus               #  *?\n     '+'                 n  expr-cont                               doPossessivePlus       #  *+\n     default                expr-cont                               doPlus\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Cluster vs Standard MySQL\nDESCRIPTION: Sets up different package naming and build configuration options depending on whether the build includes MySQL Cluster (NDB) functionality or standard MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WITH_NDB)\n  SET (DEB_BASE_PRODUCT \"cluster-\")\n  SET (DEB_BASE_PRODUCTC \"Cluster \")\n  SET (DEB_BASE_VERSION ${MYSQL_CLUSTER_VERSION})\n  SET (DEB_CONTROL_SERVER_CONFLICT_NDB \"mysql-community-server, mysql-commercial-server\")\n  SET (DEB_CONTROL_CLIENT_CONFLICT_NDB \"mysql-community-client, mysql-commercial-client\")\n  SET (DEB_NOMEB \"1\")\n  SET (DEB_NOROUTER \"1\")\n  SET (DEB_CMAKE_EXTRAS \"${DEB_CMAKE_EXTRAS} -DWITH_MEB=0 -DWITH_ROUTER=0\")\nELSE()\n  SET (DEB_BASE_PRODUCT \"\")\n  SET (DEB_BASE_PRODUCTC \"\")\n  SET (DEB_BASE_VERSION ${VERSION})\n  SET (DEB_CONTROL_SERVER_CONFLICT_NDB \"mysql-cluster-community-server, mysql-cluster-commercial-server\")\n  SET (DEB_CONTROL_CLIENT_CONFLICT_NDB \"mysql-cluster-community-client, mysql-cluster-commercial-client\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory with CMake\nDESCRIPTION: The snippet uses the ADD_SUBDIRECTORY command to include a 'test' directory, likely containing test-related files and scripts. This command is used to guide the build system in processing the contents of the 'test' folder.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(test)\n```\n\n----------------------------------------\n\nTITLE: Adding URI Test in CMake\nDESCRIPTION: Configures a test file for testing URI functionality with benchmark capabilities and required dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_uri.cc\n  MODULE ${TEST_MODULE}\n  EXTRA_SOURCES\n    ${CMAKE_SOURCE_DIR}/unittest/gunit/benchmark.cc\n  LIB_DEPENDS\n    test-helpers\n    router_utils\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Testing UTF-8 Malformed Sequences - Continuation Bytes\nDESCRIPTION: Tests handling of unexpected continuation bytes in UTF-8 sequences\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n3.1.1  First continuation byte 0x80: \"\"\n3.1.2  Last  continuation byte 0xbf: \"¿\"\n3.1.3  2 continuation bytes: \"¿\"\n3.1.4  3 continuation bytes: \"¿\"\n3.1.5  4 continuation bytes: \"¿¿\"\n3.1.6  5 continuation bytes: \"¿¿\"\n3.1.7  6 continuation bytes: \"¿¿¿\"\n3.1.8  7 continuation bytes: \"¿¿¿\"\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive of MySQL Data Files for Portability Testing\nDESCRIPTION: Command to create a compressed archive of all MySQL data directories and files that will be used for testing tablespace portability between Linux and Windows.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/README_tablespace_portable_linux.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzip -r -9 tablespace_portable_linux.zip datadir1/ Linx-DB/ undo_files/ part?\n```\n\n----------------------------------------\n\nTITLE: Handling Table and Fragment Data in MySQL Server\nDESCRIPTION: This snippet details the process of reading table files, copying table information to other DIHs, and adding fragments to the local dictionary.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/SystemRestart.new.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1) ReadTableFile (DIH)\n2) COPY_TABREQ -> all DIH (but self)\n3) For each local frag\n   ADD_FRAG_REQ -> local DICT\n4) DI_ADD_TAB_CONF \t\t\t\t\n\n\t\t\t\tSCHEMA_INFO -> all DICTs\n\t\t\t\t   Info = schema file\n\n\t\t\t\tParticipant\n\t\t\t\t===========\n\t\t\t\t1) For each table\n\t\t\t\t   1) If TableStatus match\n\t\t\t\t        ReadTableFile\n                                      else\n\t\t\t                GET_TABINFOREQ\n\t\t\t\t   2) WriteTableFile\n                                   3) Parse Table Data\n                                   4) DI_ADD_TAB_REQ -> local DIH\n     \n                                <- SCHEMA_INFOCONF\n\n\n               <- DICTSTARTCONF\n```\n\n----------------------------------------\n\nTITLE: Configuring SET CLASSPATH variable in CMake\nDESCRIPTION: The snippet defines the `CLASSPATH` variable in a CMake configuration file. It sets the essential paths needed for Java class loading, including the compiled classes and target module paths. Adjusting the class path is crucial for Java application setup to ensure all dependencies are found during runtime.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  target/classes\n  ${WITH_CLASSPATH}\n  ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-api/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-core/target/classes)\n```\n\n----------------------------------------\n\nTITLE: Define Symlink Targets CMake\nDESCRIPTION: This snippet calls the define_symlink_target macro to create symlink targets for different file extensions (3, html, partial, 3.gz).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ndefine_symlink_target(man_symlink 3)\ndefine_symlink_target(man_symlink_html html)\ndefine_symlink_target(man_symlink_html_partial partial)\ndefine_symlink_target(man_symlink_gzip 3.gz)\n```\n\n----------------------------------------\n\nTITLE: Parsing Dash After Range\nDESCRIPTION: Processes a dash character that appears after a range expression. A trailing single dash should be treated as literal, while a double dash is still a difference operator.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_10\n\nLANGUAGE: state-machine\nCODE:\n```\nset-range-dash:\n    '-'                  n  set-after-op                           doSetDifference2\n    default                 set-after-lit                          doSetAddDash\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_NR3_LCP_InProgress\nDESCRIPTION: This command gauges the effects of an ongoing upgrade scenario labeled 'Upgrade_NR3_LCP_InProgress', focusing on how the system handles upgrades in motion.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_NR3_LCP_InProgress T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug62321 with Skip Parameter\nDESCRIPTION: This entry configures the test for Bug62321, applying a skip parameter to optionally bypass certain checks during execution. This is crucial for scenarios where specific tests are known to fail or are not applicable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBlobs\nargs: -bug 62321 -skip p\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Distribution Caller Library - C++\nDESCRIPTION: Defines an internal library for calling distribution functions, detailing its header files and necessary dependencies for correct integration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_internal_distribution_caller\n  HDRS\n    \"internal/distribution_caller.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::utility\n    absl::fast_type_id\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: This command adds the `src` subdirectory to the current build process in CMake. This includes the source code located in the `src` directory for compilation and linking into the final MySQL server executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_SUBDIRECTORY(src)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sample_recorder Library in CMake\nDESCRIPTION: Defines the absl_cc_library target for the sample_recorder component with its headers and dependencies. This component provides functionality for recording statistical samples.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    sample_recorder\n  HDRS\n    \"internal/sample_recorder.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::synchronization\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Civil Time Library\nDESCRIPTION: CMake configuration for the Abseil civil time library with header and source files\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/time/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    civil_time\n  HDRS\n    \"internal/cctz/include/cctz/civil_time.h\"\n    \"internal/cctz/include/cctz/civil_time_detail.h\"\n  SRCS\n  \"internal/cctz/src/civil_time_detail.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n)\n```\n\n----------------------------------------\n\nTITLE: Identifying Known Failures in Protobuf Conformance Tests\nDESCRIPTION: This snippet lists conformance tests for which the Python/C++ implementation currently has known failures. It is intended to help the development team keep track of these issues to ensure they do not introduce regressions in other tests. The functionality is specifically related to Protobuf conformance testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/failure_list_python_cpp.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nRecommended.Proto3.JsonInput.IgnoreUnknownEnumStringValueInMapValue.ProtobufOutput\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nRecommended.Proto3.JsonInput.IgnoreUnknownEnumStringValueInOptionalField.ProtobufOutput\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nRecommended.Proto3.JsonInput.IgnoreUnknownEnumStringValueInRepeatedField.ProtobufOutput\n```\n\n----------------------------------------\n\nTITLE: Checking POSIX Compatibility in C\nDESCRIPTION: These C code snippets are embedded within CMake checks to verify the availability of specific POSIX features in the host system. They attempt to compile short C programs that utilize POSIX functions like 'getpwnam_r' to determine compatibility and define relevant macros if successful. The checks ensure that the project can be built on systems with varying levels of POSIX support.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libedit/libedit-20240808-3.1/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <stdlib.h>\\n#include <sys/types.h>\\n#include <pwd.h>\\nint main() {\\n  int ret = getpwnam_r(NULL, NULL, NULL, (size_t)0, NULL);\\n  return ret;\\n}\n```\n\nLANGUAGE: C\nCODE:\n```\n#include <stdlib.h>\\n#include <sys/types.h>\\n#include <pwd.h>\\nint main() {\\n  struct passwd *pwd = getpwnam_r(NULL, NULL, NULL, 0);\\n  return pwd != NULL;\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Server Context Test\nDESCRIPTION: This snippet adds the `test_tls_server_context.cc` test file as a harness test file. It specifies include directories and library dependencies, including OpenSSL and harness_tls.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS\n  test_tls_server_context.cc\n)\n\nFOREACH(TEST ${TESTS})\n  ADD_HARNESS_TEST_FILE(${TEST} MODULE ${TEST_MODULE}\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/shared/include/\n    INCLUDE_DIRS ${MySQLRouter_SOURCE_DIR}/src/harness/include/\n    INCLUDE_DIRS ${MySQLRouter_BINARY_DIR}/src/harness/include/\n    LIB_DEPENDS harness_tls;test-helpers;OpenSSL::SSL;OpenSSL::Crypto)\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MYISAMMRG Source Files in CMake\nDESCRIPTION: Defines the list of source files that comprise the MYISAMMRG storage engine plugin. These files handle various operations like creation, deletion, locking, and record operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/myisammrg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MYISAMMRG_SOURCES\n  ha_myisammrg.cc\n  myrg_close.cc\n  myrg_create.cc\n  myrg_delete.cc\n  myrg_extra.cc\n  myrg_info.cc\n  myrg_locking.cc\n  myrg_open.cc\n  myrg_panic.cc\n  myrg_queue.cc myrg_range.cc\n  myrg_records.cc\n  myrg_rfirst.cc\n  myrg_rkey.cc\n  myrg_rlast.cc\n  myrg_rnext.cc\n  myrg_rnext_same.cc\n  myrg_rprev.cc\n  myrg_rrnd.cc\n  myrg_static.cc\n  myrg_update.cc\n  myrg_write.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting source files for cbor library\nDESCRIPTION: This snippet sets the source files for the cbor library. It creates a list of `.c` files that will be compiled and linked to create the library. The variable `SOURCES` is then used in subsequent CMake commands to refer to these files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES cbor.c allocators.c cbor/streaming.c cbor/internal/encoders.c cbor/internal/builder_callbacks.c cbor/internal/loaders.c cbor/internal/memory_utils.c cbor/internal/stack.c cbor/internal/unicode.c cbor/encoding.c cbor/serialization.c cbor/arrays.c cbor/common.c cbor/floats_ctrls.c cbor/bytestrings.c cbor/callbacks.c cbor/strings.c cbor/maps.c cbor/tags.c cbor/ints.c)\n```\n\n----------------------------------------\n\nTITLE: Test Data Matrix with Mixed Data Types\nDESCRIPTION: A tabular dataset containing test values across multiple data types including integers, floating point numbers in scientific notation, dates, timestamps, and strings with special characters. Each row represents a test case with incrementing values and varying formats.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/memory_tb4.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n1\t1\t1\t1\t1\t1\t-5\t0.0\t1\t0.0\t1\t0.0\t1\t0.0\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1000-01-01\t838:59:58\t1970-01-02 00:00:01\t19700102000001\t1902\t2\t2\t0!\t0\t0!\t0\t\t0\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Testing in Shell\nDESCRIPTION: This shell command snippet tests foreign key operations within a MySQL environment, ensuring proper behavior when creating or dropping tables with foreign keys. The test is executed with a time constraint using the `testFK` command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmax-time : 300\ncmd: testFK\nargs: -n CreateDropDuring T1\n```\n\n----------------------------------------\n\nTITLE: Variable-width Type References in NdbBlob Java Interface\nDESCRIPTION: Issue related to supporting variable-width type non-const references in the NdbBlob Java class. These native methods require passing integer arrays for output parameters in the C++ implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/com/mysql/ndbjtie/ndbapi/issues.txt#2025-04-21_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support variable-width type non-const references or check if needed: public final native void getVersion(int[]/*_int &_*/ version);\n```\n\nLANGUAGE: Java\nCODE:\n```\n// MMM! support variable-width type non-const references or check if needed: public final native int getNull(int[]/*_int &_*/ isNull);\n```\n\n----------------------------------------\n\nTITLE: Installing Standard MySQL Manual Pages in CMake\nDESCRIPTION: Configures the installation of standard MySQL tool and server man pages to the appropriate directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(FILES ${MAN1} DESTINATION ${INSTALL_MANDIR}/man1 COMPONENT ManPages)\nINSTALL(FILES ${MAN8} DESTINATION ${INSTALL_MANDIR}/man8 COMPONENT ManPages)\n```\n\n----------------------------------------\n\nTITLE: Appending Compatibility Sources in CMake\nDESCRIPTION: This snippet appends a list of compatibility source files to the `COMPAT_SOURCES` variable. These files provide implementations for functions that may not be available on all platforms, ensuring cross-platform compatibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND COMPAT_SOURCES\n\t../openbsd-compat/bsd-getpagesize.c\n\t../openbsd-compat/explicit_bzero.c\n\t../openbsd-compat/freezero.c\n\t../openbsd-compat/recallocarray.c\n\t../openbsd-compat/strlcat.c\n\t../openbsd-compat/strlcpy.c\n\t../openbsd-compat/strsep.c\n)\n```\n\n----------------------------------------\n\nTITLE: Information Schema Drop Database Error Example\nDESCRIPTION: Example showing error messages when attempting to drop the information_schema database, demonstrating case sensitivity behavior.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/funcs_1/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP DATABASE information_schema;\nERROR 42000: Access denied for user ... to database 'information_schema'\nDROP DATABASE INFORMATION_SCHEMA;\nERROR 42000: Access denied for user ... to database 'INFORMATION_SCHEMA'\n```\n\n----------------------------------------\n\nTITLE: Conditional Dictionary File Configuration in CMake\nDESCRIPTION: Configures the dictionary file only for out-of-source builds by checking if source and binary directories are different. Prevents unnecessary copying during in-source builds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/share/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF (NOT ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  CONFIGURE_FILE(dictionary.txt\n    ${CMAKE_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/dictionary.txt)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional DLL Building in Abseil CMake\nDESCRIPTION: Conditionally builds Abseil as a DLL when the ABSL_BUILD_DLL option is enabled. Also builds test helpers as a DLL if ABSL_BUILD_TEST_HELPERS is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (${ABSL_BUILD_DLL})\n  absl_make_dll()\n  if (${ABSL_BUILD_TEST_HELPERS})\n    absl_make_dll(TEST ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable (CMake)\nDESCRIPTION: This line uses the `TARGET_LINK_LIBRARIES` command to specify the libraries that the `ndb_cpcc` executable should be linked against. In this case, it links against `ndbNDBT` and `ndbclient_static`, providing the necessary functions and symbols defined in those libraries to the executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"TARGET_LINK_LIBRARIES(ndb_cpcc ndbNDBT ndbclient_static)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Unit Tests in CMake\nDESCRIPTION: Creates CMake targets for various unit tests of the Abseil Flags library components. Each test target specifies source files, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    flags_commandlineflag_test\n  SRCS\n    \"commandlineflag_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::flags\n    absl::flags_commandlineflag\n    absl::flags_commandlineflag_internal\n    absl::flags_config\n    absl::flags_private_handle_accessor\n    absl::flags_reflection\n    absl::memory\n    absl::strings\n    GTest::gtest_main\n)\n\n# ... (other test definitions follow)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Node Restart Bug16895311\nDESCRIPTION: This command investigates the 'Bug16895311' scenario, specifically monitoring interactions and data state preservation through network disruptions or restarts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug16895311 T1\nmax-time: 1080\n```\n\n----------------------------------------\n\nTITLE: Checking and Disabling Ignored Qualifiers Warnings in CMake\nDESCRIPTION: Detects if the C++ compiler supports the 'ignored-qualifiers' warning flag and disables it if supported. This prevents warnings about type qualifiers being ignored on function return types in the JTIE tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"ignored-qualifiers\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  MESSAGE(STATUS \"Turning off ignored qualifier warnings for jtie tests\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Test File for Metadata Cache Plugin - CMake\nDESCRIPTION: This snippet configures a test module for the metadata cache by adding necessary files and dependencies. It uses CMake to organize the build system and establish libraries required for testing, creating a modular testing structure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEST_MODULE metadata_cache)\nADD_TEST_FILE(test_cache_plugin.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n    router_mysqlxclient\n    router_mysqlxmessages\n    router_cluster    # ClusterMetadataDynamicState\n  INCLUDE_DIRS\n    ../src\n    ${CMAKE_CURRENT_SOURCE_DIR}/helper\n  EXTRA_SOURCES\n    ../src/router_options.cc\n    ../src/log_suppressor.cc\n    ../src/cluster_metadata_ar.cc\n    ../src/cluster_metadata_gr.cc\n    ../src/cluster_metadata.cc\n    ../src/metadata_cache.cc\n    ../src/metadata_cache_ar.cc\n    ../src/metadata_cache_gr.cc\n    ../src/cache_api.cc\n    ../src/gr_notifications_listener.cc\n    ../src/group_replication_metadata.cc\n    ../src/metadata_factory.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/helper/mock_metadata.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/helper/mock_metadata_factory.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in memcmp for Filesort in MySQL\nDESCRIPTION: Checks for and applies the -fno-builtin-memcmp flag to filesort_utils.cc to prevent issues with compiler built-in memcmp implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_FLAG(\"-fno-builtin-memcmp\" HAVE_NO_BUILTIN_MEMCMP)\n# See comments in filesort_compare-t.cc about __builtin_memcmp\nIF(HAVE_NO_BUILTIN_MEMCMP)\n  ADD_COMPILE_FLAGS(\n    filesort_utils.cc\n    COMPILE_FLAGS \"-fno-builtin-memcmp\"\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining ndbsignaldata Convenience Library in CMake\nDESCRIPTION: This snippet defines a CMake convenience library target named 'ndbsignaldata' that includes numerous C++ source files for NDB Cluster signal processing. The library includes files for table operations, indexing, backup, fragment handling, and many other cluster operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/debugger/signaldata/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CONVENIENCE_LIBRARY(ndbsignaldata\n  AccLock.cpp\n  AllocNodeId.cpp\n  AlterIndx.cpp\n  AlterIndxImpl.cpp\n  AlterTab.cpp\n  AlterTable.cpp\n  ApiVersion.cpp\n  BackupImpl.cpp\n  BackupSignalData.cpp\n  BuildIndx.cpp\n  BuildIndxImpl.cpp\n  CloseComReqConf.cpp\n  CntrStart.cpp\n  ContinueB.cpp\n  CopyGCI.cpp\n  CreateEvnt.cpp\n  CreateFK.cpp\n  CreateFragmentation.cpp\n  CreateIndx.cpp\n  CreateIndxImpl.cpp\n  CreateTab.cpp\n  CreateTable.cpp\n  CreateTrig.cpp\n  CreateTrigImpl.cpp\n  DbinfoScan.cpp\n  DictTabInfo.cpp\n  DihContinueB.cpp\n# DihSwitchReplicaReq.cpp\n  DisconnectRep.cpp\n  DropFK.cpp\n  DropIndx.cpp\n  DropIndxImpl.cpp\n  DropTab.cpp\n  DropTable.cpp\n  DropTrig.cpp\n  DropTrigImpl.cpp\n  FailRep.cpp\n  FireTrigOrd.cpp\n  FsAppendReq.cpp\n  FsCloseReq.cpp\n  FsConf.cpp\n  FsOpenReq.cpp\n  FsReadWriteReq.cpp\n  FsRef.cpp\n  GCP.cpp\n  GetConfig.cpp\n  GetTabInfo.cpp\n  IndexStatSignal.cpp\n  IndxAttrInfo.cpp\n  IndxKeyInfo.cpp\n  IsolateOrd.cpp\n  LCP.cpp\n  LocalRouteOrd.cpp\n  LqhFrag.cpp\n  LqhKey.cpp\n  LqhTrans.cpp\n  MasterLCP.cpp\n  NFCompleteRep.cpp\n  NdbSttor.cpp\n  NdbfsContinueB.cpp\n  NodePing.cpp\n  PackedSignal.cpp\n  PrepDropTab.cpp\n  PrepFailReqRef.cpp\n  ProcessInfoRep.cpp\n  ReadNodesConf.cpp\n  RestoreImpl.cpp\n  ScanFrag.cpp\n  ScanTab.cpp\n  SchemaTrans.cpp\n  SchemaTransImpl.cpp\n  SignalDataPrint.cpp\n  SignalDroppedRep.cpp\n  SignalNames.cpp\n  StartRec.cpp\n  SumaImpl.cpp\n  SystemError.cpp\n  TcIndx.cpp\n  TcKeyConf.cpp\n  TcKeyRef.cpp\n  TcKeyReq.cpp\n  TcRollbackRep.cpp\n  TrigAttrInfo.cpp\n  TrpKeepAlive.cpp\n  TupCommit.cpp\n  TupKey.cpp\n  TuxMaint.cpp\n  UtilDelete.cpp\n  UtilExecute.cpp\n  UtilLock.cpp\n  UtilPrepare.cpp\n  UtilSequence.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling Variable Shadowing Warning (CMake)\nDESCRIPTION: This snippet conditionally enables the variable shadowing warning based on the `MYSQL_MAINTAINER_MODE` flag. If enabled, it adds the `-Wshadow` compiler option for Clang or `-Wshadow=compatible-local` for GNU compilers. This helps detect potential issues where a local variable shadows a variable in an outer scope.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(MYSQL_MAINTAINER_MODE)\n  IF(MY_COMPILER_IS_CLANG)\n    ADD_COMPILE_OPTIONS(\"-Wshadow\")\n  ELSEIF(MY_COMPILER_IS_GNU)\n    ADD_COMPILE_OPTIONS(\"-Wshadow=compatible-local\")\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Boolean and String Map Field Definitions in Protocol Buffers\nDESCRIPTION: Defines map fields for boolean and string types. Boolean maps show true/false mappings while string maps contain long heap strings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/map_test_data.txt#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmap_bool_bool {\n  key: false\n  value: false\n}\nmap_bool_bool {\n  key: true\n  value: true\n}\nmap_string_string {\n  key: \"This is a very long string that goes in the heap\"\n  value: \"This is a very long string that goes in the heap\"\n}\nmap_string_string {\n  key: \"This is another very long string that goes in the heap\"\n  value: \"This is another very long string that goes in the heap\"\n}\n```\n\n----------------------------------------\n\nTITLE: testScanPerf Read Hold Lock Without Reset Bounds\nDESCRIPTION: Benchmark command for testing scan performance in read hold lock mode without reset bounds. Uses 100,000 scans with lock level 1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 1 -r 2 -q 0 T1\n```\n\n----------------------------------------\n\nTITLE: Additional Compiler and Include Configurations for MySQL Client with CMake\nDESCRIPTION: This snippet provides platform-specific adjustments for Windows environments without Clang, setting compiler options for mysqlxclient libraries. It also adjusts for bundled protobuf usage by including additional directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/client/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_PROTOBUF STREQUAL \"bundled\")\n  TARGET_INCLUDE_DIRECTORIES(mysqlxclient SYSTEM BEFORE PUBLIC\n    \"${BUNDLED_ABSEIL_SRCDIR}\")\n  TARGET_INCLUDE_DIRECTORIES(mysqlxclient_lite SYSTEM BEFORE PUBLIC\n    \"${BUNDLED_ABSEIL_SRCDIR}\")\nENDIF()\n\n# See MYSQL_PROTOBUF_GENERATE_CPP_LIBRARY()\nIF(MSVC AND NOT WIN32_CLANG)\n  TARGET_COMPILE_OPTIONS(mysqlxclient PRIVATE /wd4251 /wd4091)\n  TARGET_COMPILE_OPTIONS(mysqlxclient_lite PRIVATE /wd4251 /wd4091)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Newer_LCP_FS_Fail\nDESCRIPTION: This test command assesses the potential failures when upgrading to newer LCP under file system conditions, characterized as 'Upgrade_Newer_LCP_FS_Fail'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Newer_LCP_FS_Fail T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Writing package version file\nDESCRIPTION: This snippet uses `write_basic_package_version_file` to generate a CMake package version file (`libcborConfigVersion.cmake`).  This file defines the version number and compatibility settings for the `cbor` library.  It ensures that projects using `find_package` can correctly determine the library's version and compatibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nwrite_basic_package_version_file(\n\t${CMAKE_CURRENT_BINARY_DIR}/libcborConfigVersion.cmake\n\tVERSION ${CBOR_VERSION}\n  COMPATIBILITY SameMajorVersion\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Blob Data with In/Out Parameter Pattern in ClusterJ\nDESCRIPTION: Demonstrates how to read blob data using ClusterJ's pattern for in/out parameters. The code first allocates a byte array based on the blob length, then passes it to a method that reads the data using a native call that modifies an array passed by reference.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/HOWTO.txt#2025-04-21_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void readData() {\n    int length = getLength().intValue();\n    data = new byte[length];\n    readData(data, length); // calls BlobImpl.java\n}\n```\n\n----------------------------------------\n\nTITLE: Including and Checking Compiler Warnings in CMake\nDESCRIPTION: Initializes the build configuration by including necessary headers and checking for specific compiler warnings when compiling with Clang on Windows. Adjusts compiler flags based on the presence of warning flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(GenerateExportHeader)\n\nIF(WIN32_CLANG)\n  MY_CHECK_CXX_COMPILER_WARNING(\"-Wdeprecated-copy-with-dtor\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-packaged C Extension from PECL\nDESCRIPTION: Uses PECL to install the Protocol Buffers C extension. This simplifies installation by downloading pre-built packages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pecl install protobuf-{VERSION}\n```\n\n----------------------------------------\n\nTITLE: Handling Character Sets in C\nDESCRIPTION: Functions under the MY_CHARSET_HANDLER structure manage character set-specific operations like detecting multi-byte sequences or calculating character lengths. These routines are vital for diverse charset implementations and optimize character processing in SQL operations. Dependencies include charset definitions and linked routines.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Executing Scan Test for MySQL Server\nDESCRIPTION: This snippet executes a scan test with parameters for maximum execution time and specific keys to test scanning capabilities of the MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanKeyInfoExhaust T1\nmax-time: 180\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanRead40RandomTable -l 100 T1\nmax-time: 360\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanRead488_Mixed -l 10 T6 D1 D2\nmax-time: 720\n```\n\n----------------------------------------\n\nTITLE: Setting NDB_OS Environment Variable in Makefile\nDESCRIPTION: Configuration step to define the NDB_OS variable in the Makefile for NDB Cluster compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/ndbapi_scan/readme.txt#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nNDB_OS=1\n```\n\n----------------------------------------\n\nTITLE: Referencing MySQL Server Port Configuration\nDESCRIPTION: A configuration path expression that references the port setting of a MySQL server. This syntax uses dot notation to access nested configuration properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/corpus_parser/server_port.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.server.port\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This CMake command adds the GMock include directories to the system include paths. This ensures that the compiler can find the necessary header files for the GMock testing framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\"\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Library: kernel_timeout_internal\nDESCRIPTION: This snippet defines an internal Abseil C++ library named `kernel_timeout_internal`.  It includes header and source files, compiler options `${ABSL_DEFAULT_COPTS}`, and dependencies such as `absl::base`, `absl::config`, `absl::core_headers`, `absl::raw_logging_internal`, and `absl::time`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    kernel_timeout_internal\n  HDRS\n    \\\"internal/kernel_timeout.h\\\"\n  SRCS\n    \\\"internal/kernel_timeout.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::raw_logging_internal\n    absl::time\n)\"\n```\n\n----------------------------------------\n\nTITLE: Importing MySQL Utils Library in C++\nDESCRIPTION: This snippet demonstrates how to include the MySQL Utils library in a C++ project. The library provides various utility functions and is header-only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/utils/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"mysql/utils/bounded_arithmetic.h\"\n#include \"mysql/utils/concat.h\"\n#include \"mysql/utils/deprecate_header.h\"\n#include \"mysql/utils/enumeration_utils.h\"\n#include \"mysql/utils/error.h\"\n#include \"mysql/utils/is_specialization.h\"\n#include \"mysql/utils/nodiscard.h\"\n#include \"mysql/utils/return_status.h\"\n#include \"mysql/utils/type_traits.h\"\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Flags\nDESCRIPTION: This snippet sets compiler flags for standard compliance and checks attributes relevant for #ifdef conditions, which are dependent on various system capabilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\"#include <stdlib.h>\\n                         static void foo(void) __attribute__ ((unused));\\n                         void foo(void) { exit(1); }\\n                         int main() { return 0; }\"\\n        HAVE___ATTRIBUTE__)\n\ncheck_c_source_compiles(\"#include <stdlib.h>\\n                        void foo(void) __attribute__((aligned(128)));\\n                        void foo(void) { exit(1); }\\n                        int main() { return 0; }\"\\n        HAVE___ATTRIBUTE__ALIGNED_FN)\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow Warning Flag in CMake for OCI Library\nDESCRIPTION: Adds compiler warning for variable shadowing to the build configuration. This helps identify potential bugs where local variables unintentionally hide variables from outer scopes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql-common/oci/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_WSHADOW_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate Generator Test in CMake\nDESCRIPTION: Configures a test file for the certificate generator component with its dependencies, source files, and include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_certificate_generator.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers  # init_test_logger\n    harness_tls\n  EXTRA_SOURCES\n    ../src/certificate_generator.cc\n  INCLUDE_DIRS\n    $<TARGET_PROPERTY:router_lib,INCLUDE_DIRECTORIES>\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Algorithm Container Test Suite in CMake\nDESCRIPTION: Sets up the test suite for the Abseil algorithm container utility library. It defines the test name, source files, compilation options, and test dependencies including various Abseil components and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/algorithm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    container_test\n  SRCS\n    \"container_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::algorithm_container\n    absl::base\n    absl::core_headers\n    absl::memory\n    absl::span\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stacktrace Test in Abseil\nDESCRIPTION: Defines the test target for the stacktrace library with the test source file and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    stacktrace_test\n  SRCS\n    \"stacktrace_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::stacktrace\n    absl::core_headers\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting UNIX-specific Compiler Options for ICU Libraries\nDESCRIPTION: Applies Linux-specific compiler options to all ICU libraries when building on UNIX platforms. Uses predefined ICU_LINUX_COMPILE_OPTIONS variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  TARGET_COMPILE_OPTIONS(icuuc PRIVATE ${ICU_LINUX_COMPILE_OPTIONS})\n  TARGET_COMPILE_OPTIONS(icui18n PRIVATE ${ICU_LINUX_COMPILE_OPTIONS})\n  TARGET_COMPILE_OPTIONS(icustubdata PRIVATE ${ICU_LINUX_COMPILE_OPTIONS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSSL DLL Dependencies\nDESCRIPTION: Adds a dependency on copying OpenSSL DLLs for targets that link with mysys and are independent of other targets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# For targets that link with mysys, and are independent of other targets.\nIF(TARGET copy_openssl_dlls)\n  ADD_DEPENDENCIES(mysys copy_openssl_dlls)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files to FIDO_SOURCES List\nDESCRIPTION: Appends a list of C source files to the FIDO_SOURCES variable. These source files constitute the core implementation of the FIDO2 library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"list(APPEND FIDO_SOURCES\n\taes256.c\n\tassert.c\n\tauthkey.c\n\tbio.c\n\tblob.c\n\tbuf.c\n\tcbor.c\n\tcompress.c\n\tconfig.c\n\tcred.c\n\tcredman.c\n\tdev.c\n\tecdh.c\n\teddsa.c\n\terr.c\n\tes256.c\n\tes384.c\n\thid.c\n\tinfo.c\n\tio.c\n\tiso7816.c\n\tlargeblob.c\n\tlog.c\n\tpin.c\n\trandom.c\n\treset.c\n\trs1.c\n\trs256.c\n\ttime.c\n\ttouch.c\n\ttpm.c\n\ttypes.c\n\tu2f.c\n\tutil.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Bounded Arithmetic in C++ for MySQL\nDESCRIPTION: The bounded_arithmetic.h header provides multiplication and addition operations that are capped at a maximum value. This is likely used for preventing overflow in mathematical calculations within MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/math/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Example usage (not provided in the original text)\n#include \"bounded_arithmetic.h\"\n\n// Perform bounded addition\nresult = bounded_add(a, b, MAX_VALUE);\n\n// Perform bounded multiplication\nresult = bounded_multiply(x, y, MAX_VALUE);\n```\n\n----------------------------------------\n\nTITLE: String Scanner Function for Space Handling\nDESCRIPTION: Utility function for skipping leading spaces in strings, particularly used when inserting string values into numeric fields.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nscan()    // skips leading spaces in string\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Path Util Library in CMake\nDESCRIPTION: Creates an internal-only CMake target for the flags path utility library. It specifies headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_path_util\n  HDRS\n    \"internal/path_util.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Level Alloc Unit Test in CMake\nDESCRIPTION: Sets up the low_level_alloc_unittest executable for testing. It defines sources, includes, and links necessary libraries. The test is only built if BUILD_TESTING is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  set(LOW_LEVEL_ALLOC_UNITTEST_INCLUDES\n          src/base/low_level_alloc.h\n          src/base/basictypes.h\n          src/gperftools/malloc_hook.h\n          src/gperftools/malloc_hook_c.h\n          src/malloc_hook-inl.h\n          ${SPINLOCK_INCLUDES}\n          ${LOGGING_INCLUDES})\n  set(low_level_alloc_unittest_SOURCES src/base/low_level_alloc.cc\n          src/malloc_hook.cc\n          src/mmap_hook.cc\n          src/tests/low_level_alloc_unittest.cc\n          ${LOW_LEVEL_ALLOC_UNITTEST_INCLUDES})\n  if(MSVC OR MINGW)\n      list(APPEND low_level_alloc_unittest_SOURCES src/windows/port.cc)\n  endif()\n  add_executable(low_level_alloc_unittest ${low_level_alloc_unittest_SOURCES})\n  target_compile_definitions(low_level_alloc_unittest PRIVATE NO_TCMALLOC_SAMPLES)\n  target_link_libraries(low_level_alloc_unittest spinlock sysinfo logging)\n  add_test(low_level_alloc_unittest low_level_alloc_unittest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Encoding Signed Negative Integer Example (-65535)\nDESCRIPTION: Example showing how the negative number -65535 is encoded in signed variable-length format using 3 bytes, including a sign bit of 1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_9\n\nLANGUAGE: binary\nCODE:\n```\n00001111 11111111 11101011\n```\n\n----------------------------------------\n\nTITLE: Defining testNodeRestart Command in Bash\nDESCRIPTION: This snippet outlines various instances of the 'testNodeRestart' command with different arguments and their respective maximum execution times. This command is used for testing node restarts in MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug42422 -l 1 T1\nmax-time: 360\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug57522 T1\nmax-time: 900\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n Bug16766493 D1\nmax-time: 360\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n TestLCPFSErr --records=100000 T1\nmax-time: 360\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n LCPScanFragWatchdogIsolation T1\nmax-time: 540\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n MNF -l 15 T1\nmax-time: 2340\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n MixedPkRead T6 T13\nmax-time: 2160\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n GCP -l 1 T1\nmax-time: 3960\n```\n\n----------------------------------------\n\nTITLE: Showing Information Schema Tables Example\nDESCRIPTION: Example of correct case-sensitive table query in Information Schema, demonstrating proper usage for consistent results across different OS filesystems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/funcs_1/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES FOR information_schema LIKE 'TABLES'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conditional Test Executables in CMake\nDESCRIPTION: This code configures a list of tests to be added as executable binaries while allowing skipping certain tests based on conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/examples/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS simple skip todo skip_all no_plan)\nFOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc ADD_TEST ${test})\n  TARGET_LINK_LIBRARIES(${test}-t mytap)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for MySQL Server Build\nDESCRIPTION: CMake configuration that disables specific compiler warnings for GNU and Clang compilers. It iterates through a list of warning types and adds corresponding compiler flags to suppress them.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  INCLUDE(CheckCXXCompilerFlag)\n  FOREACH(warning\n      \"cast-qual\"\n      \"maybe-uninitialized\"\n      \"restrict\"\n      \"unused-but-set-variable\"\n      \"unused-parameter\"\n      )\n    MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n    IF(HAS_WARN_FLAG)\n      SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-${warning}\")\n      SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-${warning}\")\n    ENDIF()\n  ENDFOREACH()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Java Sources for NdbJTie Tests in CMake\nDESCRIPTION: Sets up a list of Java source files for NdbJTie tests. These files are used to create the test JAR file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/JTieTestBase.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/MySqlUtilsTest.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/NdbJTieConstantsTest.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/NdbJTieMultiLibTest.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/test/NdbJTieSmokeTest.java\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Redefinition (CMake)\nDESCRIPTION: This snippet sets a compiler option to suppress the `UINT8_MAX` macro redefinition warning when building on Windows. This is a common issue when including certain headers on Windows.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WIN32)\n  # UINT8_MAX: macro redefinition\n  TARGET_COMPILE_OPTIONS(mysqlgcs PRIVATE \\\"/wd4005\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake for MySQL Server\nDESCRIPTION: This CMake command adds the 'src/' subdirectory to the build process, indicating that the source files for the MySQL server are located in this directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/bootstrap/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src/)\n```\n\n----------------------------------------\n\nTITLE: Testing Incomplete UTF-8 Sequences\nDESCRIPTION: This section tests the decoder's handling of incomplete UTF-8 sequences, where the last continuation byte is missing. Each sequence should result in a single replacement character.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n\"À\"\n\"à\"\n\"ð\"\n\"ø\"\n\"ü\"\n\"ß\"\n\"ï¿\"\n\"÷¿¿\"\n\"û¿¿¿\"\n\"ý¿¿¿¿\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_22\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n Bug25468 T1\nmax-time: 720\"\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Dialect in Bazel Configuration File\nDESCRIPTION: Illustrates how to set the C++ dialect to C++17 in the .bazelrc configuration file.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_2\n\nLANGUAGE: bazel\nCODE:\n```\nbuild --cxxopt=-std=c++17\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Source Directory in CMake Build\nDESCRIPTION: CMake directive to include the src subdirectory in the build process of MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_routing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Building GoogleTest with CMake\nDESCRIPTION: Builds GoogleTest using CMake, optionally excluding GoogleMock. This command generates the necessary build files based on the system's environment.  The `-DBUILD_GMOCK=OFF` flag is used to exclude GoogleMock from the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/README.md#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake .. -DBUILD_GMOCK=OFF\n```\n\n----------------------------------------\n\nTITLE: Printing CMocka Variables\nDESCRIPTION: This snippet prints the values of the `CMOCKA_LIBRARIES` and `CMOCKA_INCLUDE_DIR` variables to the console using the `message(STATUS)` command. This is useful for debugging and verifying that CMocka has been found correctly and that the include directories and libraries are properly set.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(STATUS \"CMocka vars: ${CMOCKA_LIBRARIES} ${CMOCKA_INCLUDE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Random Mock Distributions Test - C++\nDESCRIPTION: Defines a test for the random mock distributions library, specifying its source files and required dependencies on other libraries including GTest framework components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_mock_distributions_test\n  SRCS\n    \"mock_distributions_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_mocking_bit_gen\n    absl::random_random\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Examine Stack Internal Library in Abseil\nDESCRIPTION: Creates an internal library for examining stack traces, not intended for direct use by clients.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Internal-only target, do not depend on directly.\nabsl_cc_library(\n  NAME\n    examine_stack\n  HDRS\n    \"internal/examine_stack.h\"\n  SRCS\n    \"internal/examine_stack.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::stacktrace\n    absl::symbolize\n    absl::config\n    absl::core_headers\n    absl::raw_logging_internal\n)\n```\n\n----------------------------------------\n\nTITLE: Defining scoped_mock_log Library\nDESCRIPTION: This snippet defines the `scoped_mock_log` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on various Abseil libraries and GTest libraries. The library is marked as PUBLIC and TESTONLY.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    scoped_mock_log\n  SRCS\n    \"scoped_mock_log.cc\"\n  HDRS\n    \"scoped_mock_log.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::log_entry\n    absl::log_severity\n    absl::log_sink\n    absl::log_sink_registry\n    absl::raw_logging_internal\n    absl::strings\n    GTest::gmock\n    GTest::gtest\n  PUBLIC\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for NDB Cluster Development\nDESCRIPTION: The INCLUDE_DIRECTORIES command specifies directories for compiler to search during NDB cluster tools development. Dependencies include paths to NDB API, kernel signal data, and utility headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/kernel/signaldata\n  ${CMAKE_SOURCE_DIR}/storage/ndb/include/util\n  ${CMAKE_SOURCE_DIR}/storage/ndb/test/include\n  ${CMAKE_BINARY_DIR}/storage/ndb/tools)\n```\n\n----------------------------------------\n\nTITLE: Generating C# Code from Proto Files\nDESCRIPTION: Command-line instruction for converting .proto definition files into C# source code using the protoc compiler with the C# output option.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/csharp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --csharp_out=.\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterJ Test Suite Source Paths in CMake\nDESCRIPTION: Sets up variables for the root directories of the ClusterJ unit tests and test suite. These variables are used to construct file paths for Java source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLUSTERJ_JUNIT_PREFIX\n  ${CMAKE_CURRENT_SOURCE_DIR}/../clusterj-unit/src/main/java)\nSET(CLUSTERJ_TESTSUITE_PREFIX\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/testsuite/clusterj)\n```\n\n----------------------------------------\n\nTITLE: Encoding Signed Negative Integer Example (-65536)\nDESCRIPTION: Example showing how the negative number -65536 is encoded in signed variable-length format using 3 bytes, including a sign bit of 1.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_10\n\nLANGUAGE: binary\nCODE:\n```\n00001111 11111111 11111011\n```\n\n----------------------------------------\n\nTITLE: Conditional Return based on UNIX System\nDESCRIPTION: This snippet checks if the system is not UNIX. If it's not, the function returns, effectively skipping the rest of the installation process for non-UNIX systems. This ensures that the following installation steps are only executed on UNIX-like operating systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/support-files/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(NOT UNIX)\n  RETURN()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Message Structure\nDESCRIPTION: Complete Protocol Buffer message definition showing various field types (optional, repeated, default, oneof) with their values. Includes primitive types, nested messages, enums, and complex field types like cord and lazy messages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/text_format_unittest_data_pointy.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\noptional_int32: 101\noptional_int64: 102\noptional_uint32: 103\noptional_uint64: 104\noptional_sint32: 105\noptional_sint64: 106\noptional_fixed32: 107\noptional_fixed64: 108\noptional_sfixed32: 109\noptional_sfixed64: 110\noptional_float: 111\noptional_double: 112\noptional_bool: true\noptional_string: \"115\"\noptional_bytes: \"116\"\nOptionalGroup <\n  a: 117\n>\noptional_nested_message <\n  bb: 118\n>\noptional_foreign_message <\n  c: 119\n>\noptional_import_message <\n  d: 120\n>\noptional_nested_enum: BAZ\noptional_foreign_enum: FOREIGN_BAZ\noptional_import_enum: IMPORT_BAZ\noptional_string_piece: \"124\"\noptional_cord: \"125\"\noptional_public_import_message <\n  e: 126\n>\noptional_lazy_message <\n  bb: 127\n>\noptional_unverified_lazy_message <\n  bb: 128\n>\nrepeated_int32: 201\nrepeated_int32: 301\nrepeated_int64: 202\nrepeated_int64: 302\nrepeated_uint32: 203\nrepeated_uint32: 303\nrepeated_uint64: 204\nrepeated_uint64: 304\nrepeated_sint32: 205\nrepeated_sint32: 305\nrepeated_sint64: 206\nrepeated_sint64: 306\nrepeated_fixed32: 207\nrepeated_fixed32: 307\nrepeated_fixed64: 208\nrepeated_fixed64: 308\nrepeated_sfixed32: 209\nrepeated_sfixed32: 309\nrepeated_sfixed64: 210\nrepeated_sfixed64: 310\nrepeated_float: 211\nrepeated_float: 311\nrepeated_double: 212\nrepeated_double: 312\nrepeated_bool: true\nrepeated_bool: false\nrepeated_string: \"215\"\nrepeated_string: \"315\"\nrepeated_bytes: \"216\"\nrepeated_bytes: \"316\"\nRepeatedGroup <\n  a: 217\n>\nRepeatedGroup <\n  a: 317\n>\nrepeated_nested_message <\n  bb: 218\n>\nrepeated_nested_message <\n  bb: 318\n>\nrepeated_foreign_message <\n  c: 219\n>\nrepeated_foreign_message <\n  c: 319\n>\nrepeated_import_message <\n  d: 220\n>\nrepeated_import_message <\n  d: 320\n>\nrepeated_nested_enum: BAR\nrepeated_nested_enum: BAZ\nrepeated_foreign_enum: FOREIGN_BAR\nrepeated_foreign_enum: FOREIGN_BAZ\nrepeated_import_enum: IMPORT_BAR\nrepeated_import_enum: IMPORT_BAZ\nrepeated_string_piece: \"224\"\nrepeated_string_piece: \"324\"\nrepeated_cord: \"225\"\nrepeated_cord: \"325\"\nrepeated_lazy_message <\n  bb: 227\n>\nrepeated_lazy_message <\n  bb: 327\n>\ndefault_int32: 401\ndefault_int64: 402\ndefault_uint32: 403\ndefault_uint64: 404\ndefault_sint32: 405\ndefault_sint64: 406\ndefault_fixed32: 407\ndefault_fixed64: 408\ndefault_sfixed32: 409\ndefault_sfixed64: 410\ndefault_float: 411\ndefault_double: 412\ndefault_bool: false\ndefault_string: \"415\"\ndefault_bytes: \"416\"\ndefault_nested_enum: FOO\ndefault_foreign_enum: FOREIGN_FOO\ndefault_import_enum: IMPORT_FOO\ndefault_string_piece: \"424\"\ndefault_cord: \"425\"\noneof_uint32: 601\noneof_nested_message <\n  bb: 602\n>\noneof_string: \"603\"\noneof_bytes: \"604\"\n```\n\n----------------------------------------\n\nTITLE: Setting Test Files\nDESCRIPTION: This snippet sets a list of test configuration files. These configuration files are used by the tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TEST_FILES\n  logger.cfg\n  logger.d/default.cfg\n  logger.d/magic.cfg\n  logger.d/one.cfg\n  magic-alt.cfg\n  tests-bad-1.cfg\n  tests-bad-2.cfg\n  tests-bad-3.cfg\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Leak Check Test in Abseil\nDESCRIPTION: Defines the test target for the leak check library functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    leak_check_test\n  SRCS\n    \"leak_check_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::leak_check\n    absl::base\n    absl::log\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Executing testBasic Command in MySQL\nDESCRIPTION: This snippet provides several examples of the 'testBasic' command which tests fundamental operations in MySQL involving rollback scenarios and primary key reads. Each command incorporates specific arguments and execution limits, defining the nature of each test. Inputs include bug reports and key identifier pairs; outputs denote success or failure of basic functionalities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testBasic\nargs: -n RollbackNothing T1 T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n Bug27756\nmax-time: 180\n\ncmd: testBasic\nargs: -n PkReadAndLocker T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n MassiveRollback2 T1 T6 D1 D2\nmax-time: 360\n\ncmd: testBasic\nargs: -n PkRead\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: MySQL XClient Test Library Linkage\nDESCRIPTION: Configures library linkage for the XClient unit test executable, including protocol libraries, testing frameworks, and external dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xcl/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(${XCL_UNIT_TESTS}\n  ${GCOV_LDFLAGS}\n  ${MYSQLX_CLIENT_FULL_LIB}\n  ${MYSQLX_PROTOCOL_FULL_LIB}\n  harness_net_ts\n  ext::libprotobuf\n  ext::lz4\n  mysqlclient\n  gtest\n  gmock\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Leak Check Library in Abseil\nDESCRIPTION: Creates a library for detecting memory leaks during testing, providing annotations to suppress leak detection in specific areas.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/debugging/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    leak_check\n  HDRS\n    \"leak_check.h\"\n  SRCS\n    \"leak_check.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Signed Positive Integer Example\nDESCRIPTION: Example showing how the positive number 65535 is encoded in signed variable-length format using 3 bytes, including a sign bit of 0.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: binary\nCODE:\n```\n00001111 11111111 11110011\n```\n\n----------------------------------------\n\nTITLE: Specifying Libraries for MySQL Keyring Encryption Test\nDESCRIPTION: Defines the list of libraries required for linking the keyring encryption test. Includes system libraries, MySQL-specific libraries, and OpenSSL libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/keyring_encryption_test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(KEYRING_ENCRYPTION_TEST_LIBRARIES\n  ${CMAKE_DL_LIBS}\n  minchassis\n  mysys\n  OpenSSL::SSL OpenSSL::Crypto\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Library: graphcycles_internal\nDESCRIPTION: This snippet defines an internal Abseil C++ library named `graphcycles_internal`.  It specifies the header and source files, compiler options using `${ABSL_DEFAULT_COPTS}`, and dependencies on other Abseil libraries like `absl::base`, `absl::config`, and `absl::core_headers`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    graphcycles_internal\n  HDRS\n    \\\"internal/graphcycles.h\\\"\n  SRCS\n    \\\"internal/graphcycles.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::malloc_internal\n    absl::raw_logging_internal\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for filesort_compare Test in CMake\nDESCRIPTION: Sets compiler flags for the filesort_compare test, disabling built-in memcmp function if HAVE_NO_BUILTIN_MEMCMP is defined.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_NO_BUILTIN_MEMCMP)\n  ADD_COMPILE_FLAGS(\n    filesort_compare-t.cc\n    COMPILE_FLAGS \"-fno-builtin-memcmp\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_test_actions Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_test_actions target, which provides test actions for the Abseil logging system. It specifies source files, headers, compiler options, dependencies, and is marked as testonly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_test_actions\n  SRCS\n    \"internal/test_actions.cc\"\n  HDRS\n    \"internal/test_actions.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log_entry\n    absl::log_severity\n    absl::strings\n    absl::time\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Event Subdirectory in MySQL Server CMake Configuration\nDESCRIPTION: Simple CMake directive that includes the 'event' subdirectory in the MySQL server build process. This ensures that the event-related components are compiled as part of the main build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/binlog/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(event)\n```\n\n----------------------------------------\n\nTITLE: Linking to Online Changelog in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown format, linking to the online changelog for the curl project. The link text is 'changelog' and it points to the URL 'https://curl.se/changes.html'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/curl-8.12.1/CHANGES.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[changelog](https://curl.se/changes.html)\n```\n\n----------------------------------------\n\nTITLE: Handling Compiler Warnings for Thread Configuration in CMake\nDESCRIPTION: Checks for the 'format-overflow' compiler warning and adds a flag to disable it for the 'thr_config.cpp' file if present.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/mgmcommon/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"format-overflow\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(thr_config.cpp COMPILE_FLAGS \"-Wno-error=format-overflow\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNdbApi\nargs: -n NdbRecordPKAmbiguity T1 T6 T15\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Defining Undocumented MySQL Client API Functions in CMake\nDESCRIPTION: Lists the undocumented but still exported C API functions that are part of the MySQL client library. These functions lack formal documentation but are retained for compatibility with existing applications.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLIENT_API_FUNCTIONS_UNDOCUMENTED\n  get_tty_password\n  # my_load_defaults is a wrapper for load_defaults and it is not documented.\n  # We will have a FR to replace this for decent name/functionality and\n  # document it.\n  my_load_defaults\n  handle_options\n  # pure-ftpd 1.0.42 needs either my_make_scrambled_password (preferred)\n  # or make_scrambled_password.\n  my_make_scrambled_password\n\n  CACHE INTERNAL \"Undocumented functions exported by client API\"\n\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Overlong UTF-8 Sequences\nDESCRIPTION: This section tests overlong UTF-8 sequences, which are longer than necessary to encode a character. A safe UTF-8 decoder should reject these sequences.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n\"À¯\"\n\"à¯\"\n\"ð¯\"\n\"ø¯\"\n\"ü¯\"\n```\n\n----------------------------------------\n\nTITLE: Defining Random Beta Distribution Test - C++\nDESCRIPTION: Defines a test for the Beta distribution. This includes specific test source files, compiler options, linker options, and dependencies necessary for its execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_beta_distribution_test\n  SRCS\n    \"beta_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::numeric_representation\n    absl::random_distributions\n    absl::random_random\n    absl::random_internal_distribution_test_util\n    absl::random_internal_sequence_urbg\n    absl::random_internal_pcg_engine\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in JRuby\nDESCRIPTION: This snippet explains the procedure to run JRuby Protocol Buffers conformance tests using Bazel, highlighting environment setup and the switch to the Java Ruby platform.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ [[ $(ruby --version) == \\\"jruby\\\"* ]] || echo \\\"Switch to Java Ruby!\\\" $ bazel test //ruby:conformance_test_jruby --define=ruby_platform=java \\ \\u0026\\u0026\\u0026 --action_env=PATH --action_env=GEM_PATH --action_env=GEM_HOME\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Traffic\nDESCRIPTION: This command tests the upgrade process under traffic conditions, termed 'Upgrade_Traffic', to evaluate the server's performance during active workloads.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Traffic T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil If Constexpr Library in C++\nDESCRIPTION: This snippet defines another C++ library called 'if_constexpr' using the Abseil framework, focusing on compile-time evaluations. It includes necessary headers, compilation options, and dependencies required for implementing compile-time logic. This library is essential for modern C++ programming techniques leveraging conditional compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/utility/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    if_constexpr\n  HDRS\n    \"internal/if_constexpr.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Setting DEFAULT_PREFIX Definition for Non-Windows Platforms in CMake\nDESCRIPTION: Adds a compiler definition for DEFAULT_PREFIX with the installation prefix path for non-Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WIN32)\n  ADD_DEFINITIONS(-DDEFAULT_PREFIX=\\\"${CMAKE_INSTALL_PREFIX}\\\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring periodic_sampler Library in CMake\nDESCRIPTION: Defines the absl_cc_library target for the periodic_sampler component with its source files, headers, and dependencies. This library provides functionality for sampling at periodic intervals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    periodic_sampler\n  SRCS\n    \"internal/periodic_sampler.cc\"\n  HDRS\n    \"internal/periodic_sampler.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n    absl::exponential_biased\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for REST Routing Plugin\nDESCRIPTION: Configures the include directories for the rest_routing target, making the generated export header publicly available to other components that depend on this plugin.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_routing/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(rest_routing\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/../include/\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding net_ts_netifs Executable\nDESCRIPTION: This snippet adds an executable named `net_ts_netifs`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(net_ts_netifs net_ts_netifs.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES harness_net_ts\n  )\"\n```\n\n----------------------------------------\n\nTITLE: MySQL XClient Test Dependencies Configuration\nDESCRIPTION: Defines build dependencies for the XClient unit test executable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xcl/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEPENDENCIES(${XCL_UNIT_TESTS}\n  ${MYSQLX_CLIENT_FULL_LIB}\n  ${MYSQLX_PROTOCOL_FULL_LIB}\n  xprotocol_tags\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Client Symbols for Windows in CMake\nDESCRIPTION: This code manages conditional exporting of client symbols for the MySQL client based on platform, particularly focusing on Windows environment configurations. It handles both general client exports and specific exports based on whether it is built with MSVC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# mysqlclient symbols\nIF(WIN32)\n  LIST(APPEND ROUTER_MYSQLCLIENT_EXPORTS\n    ?client_errors@@3PAPEBDA\n  )\nENDIF()\n\n# vio (for mysqlxclient)\nIF(MSVC)\n  LIST(APPEND ROUTER_MYSQLCLIENT_EXPORTS\n    vio_new\n    vio_fd\n    vio_timeout\n    vio_socket_connect\n    new_VioSSLConnectorFd\n    process_tls_version\n    sslconnect\n    free_vio_ssl_acceptor_fd\n    sslGetErrString\n  )\nENDIF()\n\nIF(WIN32_CLANG)\n  LIST(APPEND ROUTER_MYSQLCLIENT_EXPORTS\n    ?psi_socket_service@@3PEAUPSI_socket_service_v1@@EA\n  )\nELSE()\n  LIST(APPEND ROUTER_MYSQLCLIENT_EXPORTS\n    psi_socket_service\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Disabling Profile Warnings for Tests in MySQL CMake Configuration\nDESCRIPTION: Disables missing profile warnings specifically for test code, as profiling tests is not a priority in this context.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/table_access/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Setting Classpath for ClusterJ Core Compilation in CMake\nDESCRIPTION: Defines the classpath for compiling ClusterJ Core, including the target classes directory and the clusterj-api classes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-core/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/clusterj/clusterj-api/target/classes)\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for Test Logs\nDESCRIPTION: This snippet creates directories for storing test logs. It checks if the build is single configuration and creates directories accordingly. If not it will loop through the different configuration types, and create directories for each.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(BUILD_IS_SINGLE_CONFIG)\n  EXECUTE_PROCESS(\n    COMMAND ${CMAKE_COMMAND} -E\n    make_directory ${CMAKE_CURRENT_BINARY_DIR}/var\n    COMMAND ${CMAKE_COMMAND} -E\n    make_directory ${CMAKE_CURRENT_BINARY_DIR}/var/log\n    COMMAND ${CMAKE_COMMAND} -E\n    make_directory ${CMAKE_CURRENT_BINARY_DIR}/var/log/harness\n    )\nELSE()\n  FOREACH(config ${CMAKE_CONFIGURATION_TYPES})\n    EXECUTE_PROCESS(\n      COMMAND ${CMAKE_COMMAND} -E\n      make_directory ${CMAKE_CURRENT_BINARY_DIR}/${config}/var\n      COMMAND ${CMAKE_COMMAND} -E\n      make_directory ${CMAKE_CURRENT_BINARY_DIR}/${config}/var/log\n      COMMAND ${CMAKE_COMMAND} -E\n      make_directory ${CMAKE_CURRENT_BINARY_DIR}/${config}/var/log/harness\n    )\n  ENDFOREACH()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Floating Point Map Field Definitions in Protocol Buffers\nDESCRIPTION: Defines map fields for floating point types (float and double) with integer keys. Shows basic 0->0 and 1->1 mappings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/map_test_data.txt#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmap_int32_float {\n  key: 0\n  value: 0\n}\nmap_int32_float {\n  key: 1\n  value: 1\n}\nmap_int32_double {\n  key: 0\n  value: 0\n}\nmap_int32_double {\n  key: 1\n  value: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Define Symlink Target Macro CMake\nDESCRIPTION: This macro defines a custom command to create symbolic links for man pages based on MAN_ALIAS. It takes the target name and extension as arguments, loops through MAN_ALIAS, and creates a symlink from SRC.EXT to DST.EXT.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(define_symlink_target NAME EXT)\n\tforeach(i RANGE 0 ${MAN_ALIAS_MAX} 2)\n\t\tmath(EXPR j \"${i} + 1\")\n\t\tlist(GET MAN_ALIAS ${i} SRC)\n\t\tlist(GET MAN_ALIAS ${j} DST)\n\t\tadd_custom_command(OUTPUT ${DST}.${EXT}\n\t\t\tCOMMAND ln -sf ${SRC}.${EXT} ${DST}.${EXT})\n\t\tlist(APPEND ${NAME}_LINK_FILES ${DST}.${EXT})\n\tendforeach()\n\tadd_custom_target(${NAME} DEPENDS ${${NAME}_LINK_FILES})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Defining the Schema Generation Function with CMake\nDESCRIPTION: This code snippet defines a CMake function that generates source files for a given schema based on a JSON definition. The function sets properties for the generated files and creates a custom command to generate them using the 'json_schema_embedder'. It also establishes dependencies for build management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nFUNCTION(ADD_SCHEMA_COMMAND SCHEMA_NAME CLASS_NAME)\n  SET(GENERATED_SOURCES\n    ${CMAKE_CURRENT_BINARY_DIR}/${SCHEMA_NAME}.cc\n    ${CMAKE_CURRENT_BINARY_DIR}/${SCHEMA_NAME}.h\n    )\n  SET(GENERATED_SOURCES\n    ${GENERATED_SOURCES} PARENT_SCOPE)\n  SET_SOURCE_FILES_PROPERTIES(${GENERATED_SOURCES}\n    PROPERTIES GENERATED TRUE)\n\n  ADD_CUSTOM_COMMAND(\n    OUTPUT ${GENERATED_SOURCES}\n    COMMAND json_schema_embedder\n    ${CMAKE_CURRENT_SOURCE_DIR}/${SCHEMA_NAME}.json\n    ${SCHEMA_NAME}.cc\n    ${SCHEMA_NAME}.h\n    ${CLASS_NAME}\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    COMMENT \"Generating sources for harness library\"\n    DEPENDS ${SCHEMA_NAME}.json\n    )\n\n  ADD_CUSTOM_TARGET(json_schema_target_${SCHEMA_NAME}\n    DEPENDS ${GENERATED_SOURCES}\n    )\n  ADD_DEPENDENCIES(clang_tidy_prerequisites\n    json_schema_target_${SCHEMA_NAME}\n    )\nENDFUNCTION(ADD_SCHEMA_COMMAND)\n```\n\n----------------------------------------\n\nTITLE: Finding Math Library\nDESCRIPTION: This snippet attempts to locate the system's math library using `find_library`. If found, its path is stored in the `MATH_LIBRARY` variable and used to link the math library to the test executables later. If it is not found, then it will not be used. \nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(MATH_LIBRARY m)\n```\n\n----------------------------------------\n\nTITLE: C++ Test Configuration with Standard Compiler Flags\nDESCRIPTION: Defines multiple C++ test targets using GoogleTest framework with standard compiler settings\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googletest/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_test(googletest-death-test-test gtest_main)\ncxx_test(gtest_environment_test gtest)\ncxx_test(googletest-filepath-test gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Google Test with Traditional CMake Setup\nDESCRIPTION: Commands for building and installing Google Test using the traditional CMake approach with separate build and install steps. This is useful for larger projects where components are built and installed separately.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMake/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S /source/googletest -B /build/googletest -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/installation/dir -DBUILD_GMOCK=ON\ncmake --build /build/googletest --target install\n```\n\n----------------------------------------\n\nTITLE: Finalizing Set Parsing\nDESCRIPTION: Handles the completion of a character set when the closing square bracket is encountered, transitioning back to general regular expression parsing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_15\n\nLANGUAGE: state-machine\nCODE:\n```\nset-finish:\n    default                 expr-quant                              doSetFinish\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions for Solaris\nDESCRIPTION: This snippet adds preprocessor definitions and compiler options specifically for the Solaris operating system. It disables rapidjson optimization and compiler warnings for deprecated declarations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(SOLARIS)\n  # disable rapidjson optimisation on Solaris as it breaks\n  # shared objects that build with -fPIC\n  ADD_DEFINITIONS(-DRAPIDJSON_48BITPOINTER_OPTIMIZATION=0)\n\n  # MD5_Init() and others are deprecated.\n  IF(MY_COMPILER_IS_GNU_OR_CLANG)\n    ADD_COMPILE_OPTIONS(\\\"-Wno-deprecated-declarations\\\")\n  ENDIF()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Google Mock Flag Macros in C++\nDESCRIPTION: Macros for defining boolean, 32-bit integer, and string flags in Google Mock. These macros allow setting a default value and documentation for each flag.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/googletest/googletest-1.14.0/googlemock/include/gmock/internal/custom/README.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DEFINE_bool_(name, default_val, doc)\nGMOCK_DEFINE_int32_(name, default_val, doc)\nGMOCK_DEFINE_string_(name, default_val, doc)\n```\n\n----------------------------------------\n\nTITLE: Configuring DDL Rewriter Test Executable in CMake\nDESCRIPTION: Sets up a test executable for the DDL Rewriter plugin, including source files from the plugin directory and linking with gunit_small testing library\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/ddl_rewriter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ddl_rewriter-t\n  ddl_rewriter-t.cc\n  ${CMAKE_SOURCE_DIR}/plugin/ddl_rewriter/ddl_rewriter.cc\n  ENABLE_EXPORTS\n  ADD_TEST ddl_rewriter-t\n  LINK_LIBRARIES gunit_small\n)\n```\n\n----------------------------------------\n\nTITLE: Creating fido2-token Executable in CMake\nDESCRIPTION: This snippet defines the `fido2-token` executable, specifying its source files, including `fido2-token.c`, `base64.c`, `bio.c`, `config.c`, `credman.c`, `largeblob.c`, `pin.c`, `token.c`, `util.c`, and the compatibility sources defined in `COMPAT_SOURCES`. It creates the executable using these files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(fido2-token\n\tfido2-token.c\n\tbase64.c\n\tbio.c\n\tconfig.c\n\tcredman.c\n\tlargeblob.c\n\tpin.c\n\ttoken.c\n\tutil.c\n\t${COMPAT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining testSystemRestart Command in Bash\nDESCRIPTION: This snippet describes the 'testSystemRestart' command, which is used to simulate system restart scenarios in the MySQL environment, including arguments and maximum execution time for specific tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_3_LCP D1\nmax-time: 720\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_2_LCP D1\nmax-time: 900\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Boolean Response Error Messages in MySQL\nDESCRIPTION: This snippet defines two basic error messages for boolean responses (NO and YES) in English, which are likely used as standard responses in various MySQL operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_multilang.txt#2025-04-21_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\nER_NO\n\teng \"NO\"\n\nER_YES\n\teng \"YES\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Memory Library in CMake\nDESCRIPTION: This snippet defines the 'memory' library target using absl_cc_library. It specifies the header file, compilation options, and dependencies required for the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/memory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    memory\n  HDRS\n    \"memory.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::core_headers\n    absl::meta\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring exponential_biased_test in CMake\nDESCRIPTION: Defines the absl_cc_test target for testing the exponential_biased library. Specifies the test source file and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    exponential_biased_test\n  SRCS\n    \"internal/exponential_biased_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::exponential_biased\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_policy_traits_test in CMake for Abseil\nDESCRIPTION: Defines the 'hash_policy_traits_test' target for testing the hash policy traits utilities. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    hash_policy_traits_test\n  SRCS\n    \"internal/hash_policy_traits_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash_policy_traits\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Prefetch Library\nDESCRIPTION: This snippet defines a C++ library for memory prefetching using `absl_cc_library`. It includes header files, compiler and linker options, and dependencies on Abseil configuration and core headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    prefetch\n  HDRS\n    \\\"prefetch.h\\\"\n    \\\"internal/prefetch.h\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers  # TODO(b/265984188): remove\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting JAR File Names and Paths for JTIE Tests in CMake\nDESCRIPTION: Defines variables for JAR file names and paths used in JTIE unload and MYJAPI tests, including version information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/unload/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAR \"${JAVA_NDB_VERSION}.jar\")\nSET(JTIE_TEST_UNLOAD_JAR \"${CMAKE_CURRENT_BINARY_DIR}/jtie-test-unload-${JAR}\")\nGET_FILENAME_COMPONENT(PARENT ${CMAKE_CURRENT_BINARY_DIR} PATH)\nSET(JTIE_MYJAPI_DIR \"${PARENT}/myjapi\")\nSET(JTIE_MYJAPI_JAR \"${JTIE_MYJAPI_DIR}/jtie-test-myjapi-${JAR}\")\n```\n\n----------------------------------------\n\nTITLE: Checking System Dependencies for zlib in CMake\nDESCRIPTION: Performs checks for required system headers and functions, and sets up definitions based on the results.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckTypeSize)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckCSourceCompiles)\n\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(stdint.h    HAVE_STDINT_H)\ncheck_include_file(stddef.h    HAVE_STDDEF_H)\n\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\ncheck_type_size(off64_t OFF64_T)\nif(HAVE_OFF64_T)\n   add_definitions(-D_LARGEFILE64_SOURCE=1)\nendif()\n\ncheck_function_exists(fseeko HAVE_FSEEKO)\nif(NOT HAVE_FSEEKO)\n    add_definitions(-DNO_FSEEKO)\nendif()\n\ncheck_include_file(unistd.h Z_HAVE_UNISTD_H)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: This snippet sets the CMake module path to include custom CMake modules located in different directories within the project.  This allows CMake to find custom functions and macros.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(CMAKE_MODULE_PATH\n  ${CMAKE_MODULE_PATH}\n  \\\"${CMAKE_SOURCE_DIR}\\\"\n  \\\"${CMAKE_CURRENT_SOURCE_DIR}\\\"\n  \\\"${CMAKE_CURRENT_SOURCE_DIR}/cmake\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining absl_check Library\nDESCRIPTION: This snippet defines the `absl_check` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependency on `absl::log_internal_check_impl`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    absl_check\n  SRCS\n  HDRS\n    \"absl_check.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_check_impl\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Including Source Files and Conditional Test Source in CMake\nDESCRIPTION: Includes the source_files.cmake and conditionally includes additional test sources if MYSQLX_ADDITIONAL_TESTS_ENABLE is set.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(source_files.cmake)\n\nIF(MYSQLX_ADDITIONAL_TESTS_ENABLE)\n  INCLUDE(mysql_function_names.cmake)\n  LIST(APPEND XPL_TEST_SRC \"${MYSQLX_GENERATE_DIR}/mysql_function_names_t.cc\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_NR1\nDESCRIPTION: This command executes the upgrade test for the non-restart scenario 'Upgrade_NR1' to assess the upgrade process without needing a server restart.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_NR1 T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Including CMake modules\nDESCRIPTION: This snippet includes CMake modules for joining paths and checking function existence.  `JoinPaths` is likely a custom module, while `CheckFunctionExists` is a standard CMake module.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(JoinPaths)\ninclude(CheckFunctionExists)\n```\n\n----------------------------------------\n\nTITLE: Defining check Library\nDESCRIPTION: This snippet defines the `check` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependencies on several other absl libraries including `absl::log_internal_check_impl`, `absl::core_headers`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    check\n  SRCS\n  HDRS\n    \"check.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_check_impl\n    absl::core_headers\n    absl::log_internal_check_op\n    absl::log_internal_conditions\n    absl::log_internal_message\n    absl::log_internal_strip\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Containers Library Build in CMake\nDESCRIPTION: This snippet sets up the compilation of the mysql_containers library. It defines the source files and headers to be included, and uses a custom CMake function to create the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/containers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nSET(TARGET_HEADERS\n)\n\nSET(TARGET_SRCS\n  buffers/grow_calculator.cpp\n  buffers/grow_constraint.cpp\n  buffers/grow_status.cpp\n)\n\nLIBS_MYSQL_CREATE_LIBRARY(mysql_containers\n  TARGET_SRCS ${TARGET_SRCS}\n  TARGET_HEADERS ${TARGET_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for cstrbuf Test in CMake\nDESCRIPTION: Sets compiler options for the cstrbuf test, specifically disabling an error for GCC versions greater than 13.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  IF(MY_COMPILER_IS_GNU AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 13)\n    TARGET_COMPILE_OPTIONS(cstrbuf-t PRIVATE\n      \"-Wno-error=suggest-attribute=format\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Test Suite\nDESCRIPTION: CMake configuration for test cases covering various time-related functionalities\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/time/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    time_test\n  SRCS\n    \"civil_time_test.cc\"\n    \"clock_test.cc\"\n    \"duration_test.cc\"\n    \"format_test.cc\"\n    \"time_test.cc\"\n    \"time_zone_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::time_internal_test_util\n    absl::time\n    absl::config\n    absl::core_headers\n    absl::strings\n    absl::str_format\n    absl::time_zone\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Libraries\nDESCRIPTION: This CMake command sets the libraries to link with the tests. It includes libraries for changestreams, binlog events, the MySQL client, and the GUnit testing framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TESTS_LINK_LIBRARIES\n  changestreams_standalone_static\n  mysql_binlog_event_standalone\n  mysqlclient\n  gunit_small)\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking SQL Join Operations\nDESCRIPTION: This section uses 'ndb-sql-perf.sh' commands to perform various operations focused on benchmarking SQL joins. Each command is designed to execute with a maximum time of 600 seconds and targets different SQL scripts relating to TPC-W and music store scenarios.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-perf-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# sql join\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-load-tpcw.sh\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-tpcw-getBestSeller.sh\ncmd-type: mysql\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-drop-tpcw.sh\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-load-music-store.sh\ncmd-type: mysql\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-select-music-store.sh\ncmd-type: mysql\ntype: bench\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 600\ncmd: ndb-sql-perf.sh\nargs: ndb-sql-perf-drop-music-store.sh\ncmd-type: mysql\n\n```\n\n----------------------------------------\n\nTITLE: Adding Core Server Subdirectories\nDESCRIPTION: Includes core source and header directories for MySQL Server project compilation. Adds source and include directories as standard build components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(include)\n```\n\n----------------------------------------\n\nTITLE: Setting Archiver Argument if Alternative Archiver is Used\nDESCRIPTION: This snippet conditionally appends the CMAKE_AR argument if an alternative archiver is specified.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(ALTERNATIVE_AR)\n  LIST(APPEND TCMALLOC_CMAKE_ARGS -DCMAKE_AR=${ALTERNATIVE_AR})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Downgrading OpenSSL3 Deprecation Warnings\nDESCRIPTION: Calls a custom CMake function DOWNGRADE_OPENSSL3_DEPRECATION_WARNINGS to suppress deprecation warnings related to OpenSSL 3 in specified source files. This function likely uses compiler flags to silence specific warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n\"DOWNGRADE_OPENSSL3_DEPRECATION_WARNINGS(\n  cbor.c\n  ecdh.c\n  es256.c\n  es384.c\n  rs256.c\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_message Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_message target, which handles log message creation and processing in the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_message\n  SRCS\n    \"internal/log_message.cc\"\n  HDRS\n    \"internal/log_message.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::errno_saver\n    absl::inlined_vector\n    absl::examine_stack\n    absl::log_internal_append_truncated\n    absl::log_internal_format\n    absl::log_internal_globals\n    absl::log_internal_proto\n    absl::log_internal_log_sink_set\n    absl::log_internal_nullguard\n    absl::log_globals\n    absl::log_entry\n    absl::log_severity\n    absl::log_sink\n    absl::log_sink_registry\n    absl::memory\n    absl::raw_logging_internal\n    absl::strings\n    absl::strerror\n    absl::time\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Mathematics and Science Symbols in UTF-8\nDESCRIPTION: Demonstration of mathematical and scientific notation using UTF-8 encoded characters including integrals, set theory, and chemical formulas.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/UTF-8-demo.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  ∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i),      ⎧⎡⎛┌─────┐⎞⎤⎫\n  ∀x∈ℝ: ⌈x⌉ = −⌊−x⌋, α ∧ ¬β = ¬(¬α ∨ β),    ⎪⎢⎜│a²+b³ ⎟⎥⎪\n  ℕ ⊆ ℕ₀ ⊂ ℤ ⊂ ℚ ⊂ ℝ ⊂ ℂ,                   ⎨⎢⎜       ⎟⎥⎬\n  2H₂ + O₂ ⇌ 2H₂O, R = 4.7 kΩ, ⌀ 200 mm     ⎩⎣⎝i=1    ⎠⎦⎭\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_FS\nDESCRIPTION: This command targets the upgrade scenario 'Upgrade_FS', meant to validate the file system upgrade performance in MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_FS T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Defining crc_cord_state Test with absl_cc_test in Bazel\nDESCRIPTION: This snippet defines a C++ test named `crc_cord_state_test` using `absl_cc_test`. It specifies the source file for the test, compiler options, and dependencies, including the `crc_cord_state` and `crc32c` libraries, and the Google Test framework.  This test suite validates the functionality for CRC calculations applied to Abseil Cords.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    crc_cord_state_test\n  SRCS\n    \\\"internal/crc_cord_state_test.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc_cord_state\n    absl::crc32c\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies for MySQL Keyring Common Library\nDESCRIPTION: Defines the dependencies required for building the keyring common library, including GenError.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/common/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET (KEYRING_COMMON_DEPENDENCIES\n  GenError\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Dialect with Bazel Command Line\nDESCRIPTION: Demonstrates how to set the C++ dialect to C++17 using Bazel command line options.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbazel build --cxxopt=-std=c++17 ...\n```\n\n----------------------------------------\n\nTITLE: Testing Fast Type ID Functionality\nDESCRIPTION: This snippet defines a C++ test for the fast type ID library using `absl_cc_test`. It includes the source file, compiler options, and dependencies on the Abseil fast type ID library and Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    fast_type_id_test\n  SRCS\n    \\\"internal/fast_type_id_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::fast_type_id\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: MySQL X Plugin Synchronization\nDESCRIPTION: Captures mutex and lock dependencies specific to the MySQL X Plugin, including client session and server exit synchronization mechanisms\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lock_order_dependencies.txt#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nARC FROM \"mutex/mysqlx/server_client_exit\" TO \"mutex/sql/DEBUG_SYNC::mutex\"\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Router Client Include Directories\nDESCRIPTION: Configures include directories for the mysqlrouter_mrs_client build, including the current source directory and an additional HTTP source directory needed for compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/mrs_client/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(mysqlrouter_mrs_client\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    # TODO(areliga): had to add it while rebasing to 9.0\n    # this should likely be solved some other way\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../src/http/src/\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Classifier Test\nDESCRIPTION: Adds private include directories specifically for the classifier test target, pointing to the MySQL Router harness headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing_guidelines/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(routertest_routing_guidelines_classifier PRIVATE\n  ${MySQLRouter_SOURCE_DIR}/src/harness/include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating xcom_rpcgen_headers Interface Library (CMake)\nDESCRIPTION: This conditionally creates an interface library named `xcom_rpcgen_headers` if the CMake version is greater than 3.19 and it is not an Apple Xcode project.  This library contains the generated RPC header files.  If the CMake version is older it adds the `mysqlgcs` target as a dependency instead.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(CMAKE_VERSION VERSION_GREATER \\\"3.19\\\" AND NOT APPLE_XCODE)\n  # New in version 3.19:\n  # An interface library target may be created with source files.\n  ADD_LIBRARY(xcom_rpcgen_headers INTERFACE ${GEN_RPC_H_FILES})\n  SET_PROPERTY(TARGET xcom_rpcgen_headers PROPERTY EXCLUDE_FROM_ALL TRUE)\n  ADD_DEPENDENCIES(clang_tidy_prerequisites xcom_rpcgen_headers)\nELSE()\n  # Older cmake version? Generate the full libraries instead.\n  ADD_DEPENDENCIES(clang_tidy_prerequisites mysqlgcs)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Warning Flags\nDESCRIPTION: Checks for the presence of a specific compiler warning flag for array bounds. If found, it applies the warning option to the 'cno' library compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Warray-bounds\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  TARGET_COMPILE_OPTIONS(cno PRIVATE \"${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining testDict Command in Bash\nDESCRIPTION: This snippet defines the 'testDict' command used for testing dictionary-related functionalities in MySQL with specified arguments and execution times.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testDict\nargs: -n FK_SRNR2 T1\nmax-time: 1800\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testDict\nargs: -n FK_SRNR1 T1\nmax-time: 1980\n```\n\n----------------------------------------\n\nTITLE: Configuring test_instance_tracker Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'test_instance_tracker' library target for testing purposes. It defines the header and source files, compiler options, and dependencies for tracking test instances.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    test_instance_tracker\n  HDRS\n    \"internal/test_instance_tracker.h\"\n  SRCS\n    \"internal/test_instance_tracker.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::compare\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Generated Source File Properties\nDESCRIPTION: This snippet sets the `GENERATED` property to `TRUE` for the generated Japanese and Chinese UCA9 table files. This property is used by CMake to indicate that these files are generated during the build process and should not be treated as regular source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET_SOURCE_FILES_PROPERTIES(\n  ${JA_HANS_DST_FILE} ${ZH_HANS_DST_FILE}\n  PROPERTIES GENERATED TRUE\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding acl_cli Executable\nDESCRIPTION: This snippet adds an executable named `acl_cli`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(acl_cli acl_cli.cc\n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES\n  harness-library\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Target Linking Libraries for Windows and Apple\nDESCRIPTION: Conditionally links the 'fido2' target with platform-specific libraries. On Windows, it links with 'wsock32', 'ws2_32', 'bcrypt', 'setupapi', and 'hid'. On Apple (macOS), it links with the CoreFoundation and IOKit frameworks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32)\n  TARGET_LINK_LIBRARIES(fido2 wsock32 wsock32 ws2_32 bcrypt setupapi hid)\nELSEIF(APPLE)\n  TARGET_LINK_LIBRARIES(fido2 \\\"-framework CoreFoundation\\\" \\\"-framework IOKit\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Including Directories for GoogleTest\nDESCRIPTION: This snippet defines the include directories necessary for the testing suite, specifying both standard system directories and custom ones for test files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tests/)\n```\n\n----------------------------------------\n\nTITLE: Configuring periodic_sampler_test in CMake\nDESCRIPTION: Defines the absl_cc_test target for testing the periodic_sampler library. Specifies the test source file and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/profiling/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    periodic_sampler_test\n  SRCS\n    \"internal/periodic_sampler_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::core_headers\n    absl::periodic_sampler\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining die_if_null Library\nDESCRIPTION: This snippet defines the `die_if_null` library using the `absl_cc_library` Bazel rule. It specifies the source and header files, compiler options, linker options, and its dependencies on `absl::config`, `absl::core_headers`, `absl::log`, and `absl::strings`. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    die_if_null\n  SRCS\n    \"die_if_null.cc\"\n  HDRS\n    \"die_if_null.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::log\n    absl::strings\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Checking library version\nDESCRIPTION: This snippet checks if the major version number (`CBOR_VERSION_MAJOR`) is not equal to 0. If it isn't, it throws a fatal error, indicating a potential issue with the shared library versioning scheme. It recommends checking a GitHub issue for more details.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT ${CBOR_VERSION_MAJOR} EQUAL 0)\n\tMESSAGE(FATAL_ERROR \"Change the shared library version scheme to reflect https://github.com/PJK/libcbor/issues/52.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Security Context Plugin in MySQL Server CMake Configuration\nDESCRIPTION: This snippet adds the 'test_security_context' plugin to the MySQL server build. It's set as a module-only plugin and marked for testing purposes only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/audit_null/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(test_security_context\n  test_security_context.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Bit Generator Reference Test Target in CMake\nDESCRIPTION: Defines the 'random_bit_gen_ref_test' CMake target for testing the bit generator reference component. It specifies source files, compiler options, linker options, and test dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_bit_gen_ref_test\n  SRCS\n    \"bit_gen_ref_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_bit_gen_ref\n    absl::random_random\n    absl::random_internal_sequence_urbg\n    absl::fast_type_id\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil City Hash Test Target in CMake\nDESCRIPTION: Configures a test target 'city_test' for testing the City hash implementation specifically. It depends on the city library and Google Test for the test framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/hash/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    city_test\n  SRCS\n    \"internal/city_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::city\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Linking SQL Built-in Source for Test - CMake\nDESCRIPTION: Conditionally appends `sql_builtin.cc` to the list of extra source files for the MySQL server build when shared unit test libraries are not being used, ensuring all necessary components are included for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WITH_SHARED_UNITTEST_LIBRARY)\\n  LIST(APPEND MYSQLD_EXTRA_SOURCES ${CMAKE_BINARY_DIR}/sql/sql_builtin.cc)\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data with Negative IDs and String Patterns\nDESCRIPTION: Test data set containing 10 rows with negative IDs (-5000 to -4991), string values with incrementing 'a' characters, and matching negative values in the third column. The string pattern follows a systematic progression with special characters (`, ^, _) mixed with alphabetic characters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/t9.txt#2025-04-21_snippet_0\n\nLANGUAGE: mysql\nCODE:\n```\n-5000\ta`\t-5000\n-4999\taaa\t-4999\n-4998\tabaa\t-4998\n-4997\tacaaa\t-4997\n-4996\tadaaaa\t-4996\n-4995\taeaaaaa\t-4995\n-4994\tafaaaaaa\t-4994\n-4993\tagaaaaaaa\t-4993\n-4992\ta^aaaaaaaa\t-4992\n-4991\ta_aaaaaaaaa\t-4991\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Replication Library\nDESCRIPTION: Creates the core replication (rpl) library for MySQL with its dependencies and links it to the main SQL library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nSET (RPL_SOURCE rpl_handler.cc rpl_tblmap.cc rpl_context.cc)\nADD_DEPENDENCIES(binlog GenError)\nADD_LIBRARY(rpl STATIC ${RPL_SOURCE})\nTARGET_LINK_LIBRARIES(rpl sql_main)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug54945 with Node Selection\nDESCRIPTION: This test checks the system's responses to Bug54945, specifically with respect to resource allocation when certain nodes are optimized or skipped, employing a clear execution timeframe.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\ncmd: testScan\nargs: -n Bug54945 --skip-ndb-optimized-node-selection T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Parsing Dash After Literals\nDESCRIPTION: Processes a dash that appears after literals in a character set. The dash could be a range operator, part of a difference operator, or a literal character depending on context.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_12\n\nLANGUAGE: state-machine\nCODE:\n```\nset-lit-dash:\n    '-'                  n  set-after-op                            doSetDifference2\n    '['                     set-after-lit                           doSetAddDash\n    ']'                     set-after-lit                           doSetAddDash\n    '\\\\'                  n  set-lit-dash-escape\n    default              n  set-after-range                         doSetRange\n```\n\n----------------------------------------\n\nTITLE: Defining Random Gaussian Distribution Test - C++\nDESCRIPTION: Defines a test for validating the Gaussian distribution implementation through specified source files and frameworks that facilitate the testing process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_gaussian_distribution_test\n  SRCS\n    \"gaussian_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::numeric_representation\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    absl::str_format\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testNodeRestart\nargs: -n Bug28717 T1\nmax-time: 360\"\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Build Configuration\nDESCRIPTION: Handles different build configurations for Windows and Unix platforms, including POM file generation and logging setup\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  CONFIGURE_FILE(\n    ${CMAKE_CURRENT_SOURCE_DIR}/pom.xml.in\n    ${CMAKE_CURRENT_BINARY_DIR}/pom.xml\n    @ONLY NEWLINE_STYLE WIN32)\n\n  FOREACH(CLUSTERJ_PROJECT ${CLUSTERJ_PROJECTS})\n    CONFIGURE_FILE(\n      ${CMAKE_CURRENT_SOURCE_DIR}/clusterj-${CLUSTERJ_PROJECT}/pom.xml.in\n      ${CMAKE_CURRENT_BINARY_DIR}/clusterj-${CLUSTERJ_PROJECT}/pom.xml\n      @ONLY NEWLINE_STYLE WIN32)\n    CONFIGURE_FILE(\n      ${CMAKE_CURRENT_SOURCE_DIR}/logging.properties\n      ${CMAKE_CURRENT_BINARY_DIR}/clusterj-${CLUSTERJ_PROJECT}/\n      COPYONLY)\n  ENDFOREACH(CLUSTERJ_PROJECT in CLUSTERJ_PROJECTS)\nELSE(WIN32)\n  [... Unix configuration ...]\nENDIF(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Zipf Distribution Test - C++\nDESCRIPTION: Defines a test for the Zipf distribution, assessing its implementation through specified source files and dependencies to ensure correctness.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_zipf_distribution_test\n  SRCS\n    \"zipf_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes for Global Checkpoint Handling in MySQL\nDESCRIPTION: This section defines error codes (7000-7250) for testing global checkpoint handling in MySQL server. It covers scenarios like inserting system errors at various stages of the global checkpoint process, delaying specific operations, and testing GCP Monitor functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n7000:\nInsert system error in master when global checkpoint is idle.\n\n7001:\nInsert system error in master after receiving GCP_PREPARE from\nall nodes in the cluster.\n\n7002:\nInsert system error in master after receiving GCP_NODEFINISH from\nall nodes in the cluster.\n\n7003:\nInsert system error in master after receiving GCP_SAVECONF from\nall nodes in the cluster.\n\n7004:\nInsert system error in master after completing global checkpoint with\nall nodes in the cluster.\n\n7186:\nMaster: Dont send GCP_PREPARE to all node(s)...and die after 1s\n\n7187:\nMaster: Dont send GCP_COMMIT to all node(s)...and die after 1s\n\n7188:\nMaster: Dont send GCP_SAVE_REQ to all node(s)...and die after 1s\n\n7189:\nMaster: Dont send COPY_GCIREQ (GCP) to all node(s)...and die after 1s\n\n7190:\nMaster Dont send SUB_GCP_COMPLETE_REP to all node(s) and dies after 1s\n\n7005:\nInsert system error in GCP participant when receiving GCP_PREPARE.\n\n7006:\nInsert system error in GCP participant when receiving GCP_COMMIT.\n\n7007:\nInsert system error in GCP participant when receiving GCP_TCFINISHED.\n\n7008:\nInsert system error in GCP participant when receiving COPY_GCICONF.\n\n5000:\nInsert system error in GCP participant when receiving GCP_SAVEREQ.\n\n5007:\nDelay GCP_SAVEREQ by 10 secs\n\n5090:\nDelay opening next redo log file.\n\n7165: Delay INCL_NODE_REQ in starting node yeilding error in GCP_PREPARE\n\n7030: Delay in GCP_PREPARE until node has completed a node failure\n7031: Delay in GCP_PREPARE and die 3s later\n\n7177: Delay copying of sysfileData in execCOPY_GCIREQ\n\n7180: Crash master during master-take-over in execMASTER_LCPCONF\n\n7183: Crash when receiving COPY_GCIREQ\n\n7184: Crash before starting next GCP after a node failure\n\n7185: Dont reply to COPY_GCI_REQ where reason == GCP\n\n7193: Dont send LCP_FRAG_ORD to self, and crash when sending first\n      LCP_FRAG_ORD(last)\n\n7194: Force removeNodeFromStored to complete in the middle of MASTER_LCPCONF\n\nFollowing are used to test GCP Monitor and take an extra argument\nwhich default to 0, but if 1 will disable 'normal' handling of\nGCP Stop so that isolation is required to remove a node.\n\n7241: Delay COPY_GCIREQ processing indefinitely\n7242: No initiation of GCP_COMMIT from Master\n7243: No initiation of GCP_SAVE_REQ from Master\n7237: Delay GCP_SAVEREQ processing indefinitely\n7238: Delay GCP_PREPARE processing indefinitely\n7239: Delay GCP_COMMIT processing indefinitely\n7244: Delay SUB_GCP_COMPLETE_REP processing indefinitely\n7247: Delay WAIT_GCP_REQ processing indefinitely\n7248: Skip most recent LCP during a restart\n7250: Boost GCI to provoke a warning\n```\n\n----------------------------------------\n\nTITLE: Incorrect Bazel Configuration for Library Compilation\nDESCRIPTION: Shows an incorrect way to set C++ dialect for a specific target in Bazel, which may lead to ABI compatibility issues.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_4\n\nLANGUAGE: bazel\nCODE:\n```\n# DON'T DO THIS!!!\ncc_library(\n    name = \"my_library\",\n    srcs = [\"my_library.cc\"],\n    copts = [\"-std=c++17\"],  # May create a mixed-mode compile!\n    deps = [\"@com_google_absl//absl/strings\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing Profile Warning Support\nDESCRIPTION: Checks if the compiler supports the -Wmissing-profile warning flag and applies it to mf_path.cc if available.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wmissing-profile\" HAS_MISSING_PROFILE)\nIF(HAS_MISSING_PROFILE)\n  ADD_COMPILE_FLAGS(mf_path.cc COMPILE_FLAGS \"${HAS_MISSING_PROFILE}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Test Executables without Standard Dependencies (CMake)\nDESCRIPTION: These lines creates an executable `ndb_cpcc` and `statUtils`, but the `ndb_cpcc` does not have `NDBTEST` and `NDBCLIENT` dependencies specified directly in the `NDB_ADD_EXECUTABLE` macro call, while `statUtils` has the standard dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(ndb_cpcc cpcc.cpp)\"\n\n```\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(statUtils statUtils.cpp NDBTEST NDBCLIENT)\"\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectory 'src' using ADD_SUBDIRECTORY\nDESCRIPTION: This command is used to add the 'src' directory to the current build context. It is commonly used in CMake build systems to include source code located in the specified subdirectory into the project's build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_connection_pool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_SUBDIRECTORY(src)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Abseil Library Subdirectories in CMake\nDESCRIPTION: Adds various Abseil library component directories to the CMake build system. This organizes the project into logical components such as base, algorithm, container, and others.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(base)\nadd_subdirectory(algorithm)\nadd_subdirectory(cleanup)\nadd_subdirectory(container)\nadd_subdirectory(crc)\nadd_subdirectory(debugging)\nadd_subdirectory(flags)\nadd_subdirectory(functional)\nadd_subdirectory(hash)\nadd_subdirectory(log)\nadd_subdirectory(memory)\nadd_subdirectory(meta)\nadd_subdirectory(numeric)\nadd_subdirectory(profiling)\nadd_subdirectory(random)\nadd_subdirectory(status)\nadd_subdirectory(strings)\nadd_subdirectory(synchronization)\nadd_subdirectory(time)\nadd_subdirectory(types)\nadd_subdirectory(utility)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Dictionary and Node Restart Tests\nDESCRIPTION: Test configurations for advanced dictionary operations and node restart scenarios in NDB Cluster. These tests validate transaction handling with foreign keys, index statistics, and various node restart conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_18\n\nLANGUAGE: plain\nCODE:\n```\n# Bug18379566 added on 17.04.2014\n#max-time : 600\n#cmd: testNodeRestart\n#args: -n Bug16007980 T1\n#\n# Bug18408691 added on 17.04.2014\n#max-time : 600\n#cmd: testNodeRestart\n#args: -n Bug16766493 D1\n#\nmax-time : 300\ncmd: testDict\nargs: -n FK_TRANS1 T1\n\nmax-time : 300\ncmd: testDict\nargs: -n FK_TRANS2 T1\n\nmax-time : 300\ncmd: testDict\nargs: -n FK_Bug18069680 T1\n\nmax-time : 300\ncmd: testDict\nargs: -n indexStat T1\n\nmax-time : 300\ncmd: testDict\nargs: -n forceGCPWait T1\n\nmax-time : 600\ncmd: testNodeRestart\nargs: -n Bug16895311 T1\n\nmax-time : 600\ncmd: testNodeRestart\nargs: -n Bug18044717 T1\n\nmax-time : 600\ncmd: testNodeRestart\nargs: -n GCPStopFalsePositive T1\n```\n\n----------------------------------------\n\nTITLE: Setting ICU I18N Source Files\nDESCRIPTION: Defines the list of source files required for building the ICU internationalization (i18n) component. Contains files for handling calendars, formatting, collation, and other i18n features.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSET(ICU_I18N_SOURCES\n  ${ICU_VERSION_DIR}/source/i18n/alphaindex.cpp\n  ${ICU_VERSION_DIR}/source/i18n/anytrans.cpp\n  ${ICU_VERSION_DIR}/source/i18n/astro.cpp\n  [...additional files...]\n  ${ICU_VERSION_DIR}/source/i18n/strrepl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MSI Build Target for MySQL Router\nDESCRIPTION: Custom target definition for building the final MSI installer package with Visual Studio configuration handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/router/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_GENERATOR MATCHES \"Visual Studio\")\n SET(CONFIG_PARAM \"-DCMAKE_INSTALL_CONFIG_NAME=${CMAKE_CFG_INTDIR}\")\nENDIF()\n\nADD_CUSTOM_TARGET(\n  MSI-Router\n  COMMAND set VS_UNICODE_OUTPUT=\n  COMMAND ${CMAKE_COMMAND}\n  ${CONFIG_PARAM}\n  -P  ${CMAKE_CURRENT_BINARY_DIR}/create_msi.cmake\n)\nADD_DEPENDENCIES(MSI-Router configure_mysql_router_extra)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags for dd_string_type Test in CMake\nDESCRIPTION: Adds a compiler flag to suppress warnings for dd_string_type test when using GNU compiler with profile-guided optimization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND FPROFILE_USE)\n  ADD_COMPILE_FLAGS(dd_string_type-t.cc COMPILE_FLAGS\n    \"-Wno-alloc-size-larger-than\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Source Directory\nDESCRIPTION: Adds the 'src' subdirectory to the project build configuration using CMake's ADD_SUBDIRECTORY command. This ensures that source files in the 'src' directory are compiled and included in the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/jit_executor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for UTF-8 Validation\nDESCRIPTION: Description of error handling mechanism for overlapped non-ASCII First Bytes, where range indices 9-11 are adjusted and validated against the range table.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/README.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for Windows in CMake\nDESCRIPTION: Adds a specific compile flag to suppress warning 4373 on Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  SET_TARGET_PROPERTIES(xplugin_unit_tests PROPERTIES COMPILE_FLAGS \"/wd4373\")\nENDIF(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Target for Plugin Configuration Test - CMake\nDESCRIPTION: This snippet configures the build environment for the plugin configuration test by retrieving the target and establishing necessary include directories and compile definitions. It is similar to the previous setup but specifically for the plugin configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nROUTERTEST_GET_TARGET(T \"test_plugin_config.cc\" \"${TEST_MODULE}\")\nTARGET_INCLUDE_DIRECTORIES(${T}\n  PRIVATE\n    $<TARGET_PROPERTY:metadata_cache,INCLUDE_DIRECTORIES>\n  )\nTARGET_COMPILE_DEFINITIONS(${T}\n  PRIVATE\n  METADATA_CACHE_PLUGIN_STATIC_DEFINE=1\n  METADATA_CACHE_STATIC_DEFINE=1\n  )\n```\n\n----------------------------------------\n\nTITLE: Declaring zlib Functions in Visual Basic for Win16 and Win32\nDESCRIPTION: This snippet declares zlib functions for both 16-bit and 32-bit Windows environments. It includes declarations for compress, uncompress, gzopen, gzread, gzwrite, and gzclose functions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/old/visual-basic.txt#2025-04-21_snippet_0\n\nLANGUAGE: Visual Basic\nCODE:\n```\n#If Win16 Then   'Use Win16 calls.\nDeclare Function compress Lib \"ZLIB.DLL\" (ByVal compr As\n        String, comprLen As Any, ByVal buf As String, ByVal buflen\n        As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB.DLL\" (ByVal uncompr\n        As String, uncomprLen As Any, ByVal compr As String, ByVal\n        lcompr As Long) As Integer\nDeclare Function gzopen Lib \"ZLIB.DLL\" (ByVal filePath As\n        String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzwrite Lib \"ZLIB.DLL\" (ByVal file As\n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer)\n        As Integer\nDeclare Function gzclose Lib \"ZLIB.DLL\" (ByVal file As\n        Long) As Integer\n#Else\nDeclare Function compress Lib \"ZLIB32.DLL\"\n        (ByVal compr As String, comprLen As Any, ByVal buf As\n        String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB32.DLL\"\n        (ByVal uncompr As String, uncomprLen As Any, ByVal compr As\n        String, ByVal lcompr As Long) As Long\nDeclare Function gzopen Lib \"ZLIB32.DLL\"\n        (ByVal file As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzwrite Lib \"ZLIB32.DLL\"\n        (ByVal file As Long, ByVal uncompr As String, ByVal\n        uncomprLen As Long) As Long\nDeclare Function gzclose Lib \"ZLIB32.DLL\"\n        (ByVal file As Long) As Long\n#End If\n```\n\n----------------------------------------\n\nTITLE: Configuring test_instance_tracker_test in CMake for Abseil\nDESCRIPTION: Defines the 'test_instance_tracker_test' target for testing the test instance tracker implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    test_instance_tracker_test\n  SRCS\n    \"internal/test_instance_tracker_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::test_instance_tracker\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasic\nargs: -n CommitTry626 T6 D1 D2\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory 'tests'\nDESCRIPTION: This snippet conditionally adds the 'tests' subdirectory to the build process if unit tests are enabled (WITH_UNIT_TESTS). This directory likely contains unit tests for the MySQL Router application.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_23\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasic\nargs: -n Fill T13\nmax-time: 1440\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning in MySQL Build\nDESCRIPTION: This snippet disables warnings related to missing profiles by calling the DISABLE_MISSING_PROFILE_WARNING() macro.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory for MySQL Server\nDESCRIPTION: This snippet adds the 'src' directory to the CMake project, which contains the source code for the MySQL server. It ensures that the build system recognizes the source directory during the compilation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/metadata_cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Flags for Windows Clang\nDESCRIPTION: This snippet appends a compiler flag (`-Wno-deprecated-copy-with-dtor`) to the C++ flags when using Clang on Windows. This flag suppresses a warning about deprecated copy constructors.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32_CLANG)\n  # Clang complains that classes to be DLLexported need an explicit\n  # copy assignment operator.\n  STRING_APPEND(CMAKE_CXX_FLAGS \\\" -Wno-deprecated-copy-with-dtor\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining YES Error Message\nDESCRIPTION: Defines error message translation for 'YES' error type in English.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_phantom_lang.txt#2025-04-21_snippet_3\n\nLANGUAGE: mysql-error\nCODE:\n```\nER_YES\n\teng \"YES\"\n```\n\n----------------------------------------\n\nTITLE: Defining crc_internal Library with absl_cc_library in Bazel\nDESCRIPTION: This snippet defines a C++ library named `crc_internal` using `absl_cc_library`. It specifies the header and source files, compiler options, and dependencies required for internal CRC calculations, including optimized versions for x86 and ARM architectures.  This library is intended for internal use only.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_library(\n  NAME\n    crc_internal\n  HDRS\n    \\\"internal/crc.h\\\"\n    \\\"internal/crc32_x86_arm_combined_simd.h\\\"\n  SRCS\n    \\\"internal/crc.cc\\\"\n    \\\"internal/crc_internal.h\\\"\n    \\\"internal/crc_x86_arm_combined.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc_cpu_detect\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::dynamic_annotations\n    absl::endian\n    absl::prefetch\n    absl::raw_logging_internal\n    absl::memory\n    absl::bits\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for MySQL Server and Logging\nDESCRIPTION: These CMake commands add preprocessor definitions used during compilation. `-DMYSQL_SERVER` likely indicates that the code is being compiled for the MySQL server, while `-DLOG_COMPONENT_TAG=\"Rewriter\"` defines a log component tag for easier log filtering and identification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"Rewriter\")\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug13394788\nDESCRIPTION: This snippet defines a test scenario for the 'Bug13394788', allowing developers to verify the behavior of the system under the specified conditions and for a limited execution time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncmd: testScan\nargs: -n Bug13394788 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Tests Configuration\nDESCRIPTION: Adds unit tests subdirectory only when unit testing is explicitly enabled through the WITH_UNIT_TESTS flag\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Including Directories in CMake for MySQL Server\nDESCRIPTION: This snippet checks for a specific compiler warning flag, appends it to CMAKE_CXX_FLAGS if available, and includes system directories for GMock. It's part of the build configuration for MySQL server tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/memory/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nMSVC_CPPCHECK_DISABLE()\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nINCLUDE_DIRECTORIES(SYSTEM\n  ${GMOCK_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Building libcbor with CMake in Bazel BUILD file\nDESCRIPTION: This snippet shows how to build the libcbor library using CMake within a Bazel `BUILD` file. It uses a `genrule` to execute CMake commands to generate Makefiles and build the `libcbor.a` static library. The resulting library and header files are then made available for other packages to use.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/Bazel.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\ngenrule(\n  name = \"cbor_cmake\",\n  srcs = glob([\"**\"]),\n  outs = [\"libcbor.a\", \"cbor.h\", \"cbor/arrays.h\", \"cbor/bytestrings.h\",\n          \"cbor/callbacks.h\", \"cbor/cbor_export.h\", \"cbor/common.h\", \"cbor/configuration.h\", \"cbor/data.h\",\n          \"cbor/encoding.h\", \"cbor/floats_ctrls.h\", \"cbor/ints.h\", \"cbor/maps.h\",\n          \"cbor/serialization.h\", \"cbor/streaming.h\", \"cbor/strings.h\", \"cbor/tags.h\"],\n  cmd = \" && \".join([\n    # Remember where output should go.\n    \"INITIAL_WD=`pwd`\",\n    # Build libcbor library.\n    \"cd `dirname $(location CMakeLists.txt)`\",\n    \"cmake -DCMAKE_BUILD_TYPE=Release .\",\n    \"cmake --build .\",\n    # Export the .a and .h files for cbor rule, below.\n    \"cp src/libcbor.a src/cbor.h $$INITIAL_WD/$(RULEDIR)\",\n    \"cp src/cbor/*h cbor/configuration.h $$INITIAL_WD/$(RULEDIR)/cbor\"]),\n  visibility = [\"//visibility:private\"],\n)\n\ncc_import(\n  name = \"cbor\",\n  hdrs = [\"cbor.h\", \"cbor/arrays.h\", \"cbor/bytestrings.h\",\n          \"cbor/callbacks.h\", \"cbor/cbor_export.h\", \"cbor/common.h\", \"cbor/configuration.h\", \"cbor/data.h\",\n          \"cbor/encoding.h\", \"cbor/floats_ctrls.h\", \"cbor/ints.h\", \"cbor/maps.h\",\n          \"cbor/serialization.h\", \"cbor/streaming.h\", \"cbor/strings.h\", \"cbor/tags.h\"],\n  static_library = \"libcbor.a\",\n  visibility = [\"//visibility:public\"],\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug17882305\nDESCRIPTION: A test command targeted at the 'Bug17882305', allowing for focused testing on this specific issue related to backing up data, defined with clear parameters regarding execution time.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBackup\nargs: -n Bug17882305 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Inclusion with CMake\nDESCRIPTION: This CMake snippet directs the build system to include the 'src' directory and conditionally include the 'tests' directory if 'WITH_UNIT_TESTS' is enabled. It ensures that the necessary subdirectories are incorporated during the build process. Used primarily for configuring build environments in projects such as MySQL Server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\\nIF(WITH_UNIT_TESTS)\\n  ADD_SUBDIRECTORY(tests)\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing testSystemRestart Command in Shell\nDESCRIPTION: The snippet demonstrates how to execute a command named 'testSystemRestart' with specific arguments using shell commands. It is configured to run a test scenario related to system restart within MySQL Server. The required arguments are '-n SR_DD_1b D2', and the execution has a maximum time limit of 13680 seconds. This is typically used in testing environments to verify system restart functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--08-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_1b D2\nmax-time: 13680\n```\n\n----------------------------------------\n\nTITLE: Defining CRUND Source Files\nDESCRIPTION: Defines the set of C++ source files required to build the CRUND benchmark application. Includes core driver files and NDB API implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/cpp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CPP_CRUND_SOURCES\n    CrundDriver.cpp\n    Driver.cpp\n    CrundLoad.cpp\n    NdbapiAB.cpp\n    crund.cpp\n   )\n```\n\n----------------------------------------\n\nTITLE: Installing ClusterJ Test JAR in CMake\nDESCRIPTION: This segment installs the generated `clusterj-test` JAR file to a designated directory on the system. It uses the `INSTALL` command to copy the JAR file to the specified path, ensuring it's available as part of the ClusterJ component in the MySQL shared directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/clusterj-test-${JAVA_NDB_VERSION}.jar\n  DESTINATION ${INSTALL_MYSQLSHAREDIR}/java COMPONENT ClusterJ)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags for Clang in MySQL Router Tests\nDESCRIPTION: Conditionally appends a warning suppression flag to C++ compilation when using the Clang compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_CLANG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-deprecated\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Router Test Plugins\nDESCRIPTION: This snippet demonstrates how to define and configure multiple test plugins for the MySQL router using the `add_harness_plugin` macro.  Each plugin is assigned a name, specifies whether to install, the destination directory and source file(s). Some plugins also define dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/plugins/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_harness_plugin(routertestplugin_bad_one NO_INSTALL\n  DESTINATION harness\n  SOURCES bad_one.cc)\nadd_harness_plugin(routertestplugin_bad_two NO_INSTALL\n  DESTINATION harness\n  SOURCES bad_two.cc)\nadd_harness_plugin(routertestplugin_magic NO_INSTALL\n  DESTINATION harness\n  SOURCES magic.cc)\nTARGET_INCLUDE_DIRECTORIES(routertestplugin_magic PRIVATE ../include)\n\nadd_harness_plugin(routertestplugin_example NO_INSTALL\n  DESTINATION harness\n  SOURCES example.cc\n  REQUIRES routertestplugin_magic)\n\nadd_harness_plugin(routertestplugin_lifecycle NO_INSTALL\n  DESTINATION harness\n  SOURCES lifecycle.cc\n)\nTARGET_INCLUDE_DIRECTORIES(routertestplugin_lifecycle PRIVATE ../include)\n\nadd_harness_plugin(routertestplugin_lifecycle2 NO_INSTALL\n  DESTINATION harness\n  SOURCES lifecycle2.cc)\nadd_harness_plugin(routertestplugin_lifecycle3 NO_INSTALL\n  DESTINATION harness\n  SOURCES lifecycle3.cc)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target 'mysqlrouter_all'\nDESCRIPTION: This snippet adds a custom target named 'mysqlrouter_all'.  This target acts as a meta-target to build everything router-related, but nothing that it doesn't depend on.  Individual targets must add themselves as dependencies to this target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_CUSTOM_TARGET(mysqlrouter_all)\"\n```\n\n----------------------------------------\n\nTITLE: Listing Java Source Files for ClusterJ Test Suite in CMake\nDESCRIPTION: Defines a comprehensive list of Java source files that comprise the ClusterJ test suite. This includes test classes, model classes, and utility classes used in the test suite.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-test/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AbstractClusterJModelTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AbstractClusterJTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AbstractQueryTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AllTests.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AutoCloseableTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AutoCommitTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/AutoPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BigIntegerTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BinaryPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BinaryTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BitTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BlobInstanceTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BlobTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/BulkDeleteTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/Bug17200163Test.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ByteBufferPoolTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/CharsetTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ClearSmokeTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ConnectionPoolTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DateAsSqlDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DateAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DatetimeAsSqlTimestampTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DatetimeAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DbugTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DecimalTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DefaultConnectValuesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DeleteAllByClassTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DeleteInsertTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DeleteQueryAllPrimitivesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DomainTypeHandlerFactoryTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DynamicBinaryPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DynamicBytePKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DynamicObjectTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DynamicShortPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/DynamicStringPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/FindByPrimaryKey2Test.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/FindByPrimaryKeyErrorHandlingTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/FindByPrimaryKeyTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/FixedLengthCharTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/HashOnlyLongIntStringPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/LoadTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/LongIntStringPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/LongLongStringPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/LongvarbinaryPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/MediumIntegerTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/MediumUnsignedTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/MultiplePKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/MultithreadedFindTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/MultithreadedTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/NegativeMetadataTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/NotPersistentTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/NullValuesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ObjectNotFoundTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/PartitionKeyTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ProjectionTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryAllPrimitivesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryBigIntegerTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryBlobTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryBtreeIndexScanTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryByteArrayTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDateAsSqlDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDateAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDatetimeAsSqlTimestampTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDatetimeAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDecimalTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryDoubleTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryExplainTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryExtraConditionsTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryFloatTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryHashIndexScanTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryHashPKScanTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryInTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryLikeByteArrayTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryLikeTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryLimitsTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryMultiColumnIndexInTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryMultipleParameterTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryNotNullTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryNotTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryNullTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryOrTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryOrderingTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryPrimaryKeyTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryScanLockTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryStringTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTableScanTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTextIndexScanTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTimeAsSqlTimeTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTimeAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTimestampAsSqlTimestampTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryTimestampAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryUniqueKeyTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/QueryYearTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/Reconnect2Test.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ReconnectTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/RecvThreadCPUTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/ReleaseTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/SaveTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/SchemaChangeTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/SerialTransactionsTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/SessionFactoryTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/StressTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TableWithoutPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TimeAsSqlTimeTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TimeAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/Timestamp2AsSqlTimestampTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TimestampAsSqlTimestampTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TimestampAsUtilDateTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TransactionErrorSetPartitionKeyTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/TransactionStateTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/UpdateTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/VarbinaryPKTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/VarbinaryTypesTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/VarcharStringLengthTest.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/domaintypehandler/CrazyDomainTypeHandlerFactoryImpl.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AllPrimitives.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AutoPKBigint.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AutoPKInt.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AutoPKMediumint.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AutoPKSmallint.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/AutoPKTinyint.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadEmployeeNoPrimaryKeyAnnotationOnClass.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadEmployeePrimaryKeyAnnotationColumnAndColumns.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadEmployeePrimaryKeyAnnotationNoColumnOrColumns.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadEmployeePrimaryKeyAnnotationOnClassMisspelledField.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadEmployeeWrongPrimaryKeyAnnotationOnClass.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadIndexDuplicateColumn.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadIndexDuplicateIndexName.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BadIndexMissingColumn.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BigIntegerTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BinaryPK.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BinaryTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BitTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/BlobTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/ByteArrayTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetBig5.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetLatin1.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetModel.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetSjis.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetSwedishUtf8.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CharsetUtf8.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/ConversationSummary.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/CrazyDelegate.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/Customer.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DateAsSqlDateTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DateAsUtilDateTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DatetimeAsSqlTimestampTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DatetimeAsUtilDateTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DecimalTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/Dn2id.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DoubleTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DynamicPK.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/DynamicStringPKs.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/Employee.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/Employee2.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/FloatTypes.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/HashOnlyLongIntStringPK.java\n  ${CLUSTERJ_TESTSUITE_PREFIX}/model/IdBase.java\n```\n\n----------------------------------------\n\nTITLE: Remaining Bytes Processing Strategy\nDESCRIPTION: Strategy for handling remaining bytes less than 16 bytes using byte-by-byte validation approach, including lookback buffer mechanism for First Byte identification.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/README.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Setting SSL Test Data Directory in CMake for MySQL Router Tests\nDESCRIPTION: Adds a compiler definition to specify the SSL test data directory path based on the CMake source directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DSSL_TEST_DATA_DIR=\"${CMAKE_SOURCE_DIR}/mysql-test/std_data/\")\n```\n\n----------------------------------------\n\nTITLE: Copying Test Files\nDESCRIPTION: This snippet copies the listed test files from the source directory to the binary directory. The `COPY_TEST_FILES` macro handles the file copying operation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n\"COPY_TEST_FILES(${CMAKE_CURRENT_SOURCE_DIR}/data \\\"${TEST_FILES}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Generating Export Header for REST Routing Plugin\nDESCRIPTION: Creates an export header file for the rest_routing plugin to manage symbol visibility. The export header is generated in the include directory for proper symbol exporting and importing across components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_routing/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nGENERATE_EXPORT_HEADER(rest_routing\n  EXPORT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/../include/mysqlrouter/rest_routing_export.h)\n```\n\n----------------------------------------\n\nTITLE: Defining log_streamer Library\nDESCRIPTION: This snippet defines the `log_streamer` library using the `absl_cc_library` Bazel rule. It specifies the header file, compiler options, linker options, and its dependencies on several Abseil libraries, including `absl::config`, `absl::absl_log`, `absl::log_severity`, etc. The library is marked as PUBLIC.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_30\n\nLANGUAGE: bazel\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_streamer\n  SRCS\n  HDRS\n    \"log_streamer.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::absl_log\n    absl::log_severity\n    absl::optional\n    absl::strings\n    absl::strings_internal\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Password Database Functions Support\nDESCRIPTION: Adds password database access functionality if the system supports getpwnam function.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_GETPWNAM)\n  SET(MYSYS_SOURCES ${MYSYS_SOURCES} my_getpwnam.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Disabling MSVC CPPCheck\nDESCRIPTION: This snippet disables the C++ code analysis tool, CPPCheck, when using the MSVC compiler. This is likely done to avoid false positives or compatibility issues with the tool.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"MSVC_CPPCHECK_DISABLE()\"\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Ordered Index Performance Tests (Bash)\nDESCRIPTION: These commands run performance tests for MySQL ordered index operations using the testOIBasic tool. They cover different scenarios including index maintenance, full scans, and single tuple retrieval.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbtux/Times.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntestOIBasic -case u -table 1 -index 2 -fragtype small -threads 10 -rows 100000 -subloop 1 -nologging\n```\n\nLANGUAGE: bash\nCODE:\n```\ntestOIBasic -case u -table 2 -index 5 -fragtype small -threads 10 -rows 100000 -subloop 1 -nologging\n```\n\nLANGUAGE: bash\nCODE:\n```\ntestOIBasic -case v -table 1 -index 1 -fragtype small -threads 10 -rows 100000 -subloop 1 -nologging\n```\n\nLANGUAGE: bash\nCODE:\n```\ntestOIBasic -case w -table 1 -index 1 -fragtype small -threads 10 -rows 100000 -samples 50000 -subloop 1 -nologging -v2\n```\n\n----------------------------------------\n\nTITLE: Defining basic test command with bug tracking\nDESCRIPTION: Details the 'testBasic' command tracking 'Bug54986' on table 'D2', imposing a time limit of 1080 seconds for execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testBasic\nargs: -n Bug54986 D2\nmax-time: 1080\n```\n\n----------------------------------------\n\nTITLE: Node Restart Test Command 2\nDESCRIPTION: Test configuration for node restart with full database test involving T6 and T13 targets, with a maximum time of 16020 seconds\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--04-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n FullDb T6 T13\nmax-time: 16020\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory 'src'\nDESCRIPTION: This snippet adds the 'src' subdirectory to the build process. This directory likely contains the source code for the MySQL Router application.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n\"ADD_SUBDIRECTORY(src)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for conf_to_src Utility\nDESCRIPTION: This snippet adds an executable named `conf_to_src` which is built from `conf_to_src.cc`. This utility likely converts configuration files to source code.  The `SKIP_INSTALL` option prevents it from being installed during the installation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(conf_to_src conf_to_src.cc SKIP_INSTALL)\nTARGET_LINK_LIBRARIES(conf_to_src strings)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for NDB JTIE Utils in CMake\nDESCRIPTION: Sets up the include directory for NDB JTIE (Java TIE) utilities. This is necessary for compiling components that depend on these utility headers.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myapi/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbjtie/utils)\n```\n\n----------------------------------------\n\nTITLE: LCP Process Flow Between Master DIH and LQH in MySQL Server\nDESCRIPTION: Detailed sequence diagram showing the message flow and operations for Local Checkpoint (LCP) processing between Master DIH and LQH components. The process includes operation size requests, GCI calculations, fragment ordering, and completion reporting.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdih/LCP.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMaster DIH                                      LQH\n==========                                      ==========\n\n1) TCGETOPSIZEREQ -> all TC\n\n2) If sum(operation size) < Threshold\n     Goto 1\n\n3) For each table\n     Calc Keep GCI (local using CONTINUEB)\n\n4) COPY_GCIREQ -> all DIH\n\n5) TC_CLOPSIZEREQ -> all TC\n\n6) For each fragment\n     LCP_FRAG_ORD -> LQH\n\n\t\t\t\t\t\tDo LCP...\n\t\t\t\t\t\t1) LCP_FRAG_REP -> all DIH\n\t\t\t\t\t\t2) If last fragment\n\t\t\t\t\t\t   LCP_COMPLETE_REP -> all DIH\n\t\t\t\t\t\t\n7) When receiving LCP_COMPLETE_REP from DIH\n   1) If all DIHs have completed\n      Goto 1\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH and Compiler Flags for MySQL Testing\nDESCRIPTION: In this snippet, RPATH settings and compiler flags are appended for the MySQL test executable in CMake. The setup ensures that all necessary compile-time definitions and flags are incorporated, including disabling logging for NGS and handling compiler warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/tests/driver/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX_INSTALL_RPATH_ORIGIN_PRIV_LIBDIR)\n  ADD_INSTALL_RPATH_FOR_PROTOBUF(mysqlxtest)\nENDIF()\n\nMYSQLX_APPEND_COMPILE_FLAGS(mysqlxtest\n  \"${MYSQLX_PROTOCOL_FLAGS}\"\n)\n\nMYSQLX_APPEND_COMPILE_DEFINITIONS(mysqlxtest\n  \"NGS_DISABLE_LOGGING\"\n)\n\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wunused-but-set-parameter\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  ADD_COMPILE_FLAGS(${XTEST_SRC} COMPILE_FLAGS ${HAS_WARN_FLAG})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unit Test Directories\nDESCRIPTION: Conditionally adds unit test directories to the build when unit testing is enabled. This includes test framework examples and TAP-based testing infrastructure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(unittest)\n  ADD_SUBDIRECTORY(unittest/examples)\n  ADD_SUBDIRECTORY(unittest/mytap)\n  ADD_SUBDIRECTORY(unittest/mytap/t)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating NDB Test Executable with Skip Install Flag (CMake)\nDESCRIPTION: This line creates an executable program named `test_cpcd` for testing NDB. The `SKIP_INSTALL` flag is added. This ensures that while the executable is built, it is not installed as part of the project, which is useful for test programs that are not meant to be deployed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"NDB_ADD_EXECUTABLE(test_cpcd test_cpcd.cpp NDBTEST NDBCLIENT SKIP_INSTALL)\"\n```\n\n----------------------------------------\n\nTITLE: Setting ClusterJ API Package Exports\nDESCRIPTION: Defines the Java packages to be exported in the ClusterJ API JAR manifest.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-api/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CLUSTERJ_API_EXPORTS\\n  com.mysql.clusterj\\n  com.mysql.clusterj.annotation\\n  com.mysql.clusterj.query\\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Component for Polish Greeting Service\nDESCRIPTION: This snippet defines another MySQL component called 'example_component2', which includes source files for a Polish greeting service implementation. Similar to the previous component, it is specified for module use only and for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/example/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nMYSQL_ADD_COMPONENT(example_component2\n  example_component2.cc\n  polish_greeting_service_imp.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Variant Library Target\nDESCRIPTION: CMake configuration for the variant library providing type-safe union functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    variant\n  HDRS\n    \"variant.h\"\n  SRCS\n    \"internal/variant.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bad_variant_access\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::type_traits\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TIRPC Library Build for MySQL Server in CMake\nDESCRIPTION: Sets up an external project to build a static TIRPC library without GSSAPI support to avoid OpenSSL conflicts. The configuration includes compiler flags, build directory setup, and creation of an imported library target that can be used by other MySQL components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/tirpc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE(ExternalProject)\n\nSET(TIRPC_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/extra/tirpc/libtirpc-1.3.5\")\n\n# Set correct search path for executables, libraries, and data files.\nIF(ALTERNATIVE_GCC)\n  SET(TIRPC_C_B_OPTION \"-B${GCC_B_PREFIX} \")\nENDIF()\n\nFIND_PROGRAM(MAKE_EXECUTABLE make)\n\nSET(TIRPC_CONFIGURE_PREFIX \"${CMAKE_BINARY_DIR}/tirpc\")\nSET(TIRPC_C_FLAGS \"${CMAKE_C_COMPILER_ARG1} ${TIRPC_C_B_OPTION}\")\nSTRING_APPEND(TIRPC_C_FLAGS \" ${CMAKE_C_FLAGS}\")\nSTRING_APPEND(TIRPC_C_FLAGS \" ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n\n# clang has this, but clang++ does not.\nMY_CHECK_C_COMPILER_FLAG(\"-Wdeprecated-non-prototype\"\n  HAS_DEPRECATED_NON_PROTOTYPE)\nIF(HAS_DEPRECATED_NON_PROTOTYPE)\n  STRING_APPEND(TIRPC_C_FLAGS \" -Wno-deprecated-non-prototype\")\nENDIF()\nMY_CHECK_C_COMPILER_FLAG(\"-Wincompatible-pointer-types-discards-qualifiers\"\n  HAS_INCOMPATIBLE_POINTER_TYPES_DISCARDS_QUALIFIERS)\nIF(HAS_INCOMPATIBLE_POINTER_TYPES_DISCARDS_QUALIFIERS)\n  STRING_APPEND(TIRPC_C_FLAGS\n    \" -Wno-incompatible-pointer-types-discards-qualifiers\")\nENDIF()\nMY_CHECK_C_COMPILER_FLAG(\"-Wgnu-variable-sized-type-not-at-end\"\n  HAS_GNU_VARIABLE_SIZED_TYPE_NOT_AT_END)\nIF(HAS_GNU_VARIABLE_SIZED_TYPE_NOT_AT_END)\n  STRING_APPEND(TIRPC_C_FLAGS\n    \" -Wno-gnu-variable-sized-type-not-at-end\")\nENDIF()\n\nSET(TIRPC_CONFIGURE_ARGS\n  \"AR=${CMAKE_AR}\"\n  \"RANLIB=${CMAKE_RANLIB}\"\n  \"CC=${CMAKE_C_COMPILER}\"\n  \"--with-pic\"\n  \"--disable-shared\"\n  \"--disable-gssapi\"\n  \"--prefix=${TIRPC_CONFIGURE_PREFIX}\"\n  \"CFLAGS=${TIRPC_C_FLAGS}\"\n  )\n\nSET(TIRPC_BUILD_COMMAND ${MAKE_EXECUTABLE})\n\nSET(TIRPC_EXTERNAL_PROJECT_ADD_ARGS\n  CONFIGURE_COMMAND\n  \"${TIRPC_SOURCE_DIR}/configure\" ${TIRPC_CONFIGURE_ARGS}\n  BUILD_COMMAND\n  ${TIRPC_BUILD_COMMAND}\n  )\n\nEXTERNALPROJECT_ADD(tirpc_ext\n  SOURCE_DIR \"${TIRPC_SOURCE_DIR}\"\n  ${TIRPC_EXTERNAL_PROJECT_ADD_ARGS}\n  BUILD_BYPRODUCTS \"${TIRPC_CONFIGURE_PREFIX}/lib/libtirpc.a\"\n  BINARY_DIR \"${CMAKE_BINARY_DIR}/extra/build_tirpc\"\n  )\n\n# The include directory must exist before we set INTERFACE_INCLUDE_DIRECTORIES\nFILE(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}/tirpc/include/tirpc\")\n\nADD_LIBRARY(ext::rpc STATIC IMPORTED GLOBAL)\nSET_TARGET_PROPERTIES(ext::rpc PROPERTIES\n  IMPORTED_LOCATION \"${TIRPC_CONFIGURE_PREFIX}/lib/libtirpc.a\"\n  )\nTARGET_INCLUDE_DIRECTORIES(ext::rpc\n  SYSTEM BEFORE INTERFACE \"${CMAKE_BINARY_DIR}/tirpc/include/tirpc\"\n  )\nADD_DEPENDENCIES(ext::rpc tirpc_ext)\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Mixed_MGMD_API_NDBD\nDESCRIPTION: This command assesses the performance of mixed environments involving MGMD and NDBD during upgrades, referred to as 'Upgrade_Mixed_MGMD_API_NDBD'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Mixed_MGMD_API_NDBD T2\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyring File Component Compilation Option\nDESCRIPTION: Sets the default value for the keyring_file component compilation flag if not explicitly defined by the user. This controls whether the component will be built.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/keyring_file/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT DEFINED WITH_COMPONENT_KEYRING_FILE AND\n    NOT DEFINED WITHOUT_COMPONENT_KEYRING_FILE)\n  SET(WITH_COMPONENT_KEYRING_FILE 1)\nENDIF()\n\nIF(NOT WITH_COMPONENT_KEYRING_FILE)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectories to MySQL Router Build\nDESCRIPTION: Adds component, fuzzers, and integration test directories to the build.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(component)\nADD_SUBDIRECTORY(fuzzers)\nADD_SUBDIRECTORY(integration)\n```\n\n----------------------------------------\n\nTITLE: Testing UTF-8 Boundary Conditions - First Possible Sequences\nDESCRIPTION: Tests the first possible sequence for different UTF-8 byte lengths (1-6 bytes), representing various Unicode code points\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2.1.1  1 byte  (U-00000000):        \" \"\n2.1.2  2 bytes (U-00000080):        \"Â\"\n2.1.3  3 bytes (U-00000800):        \"à \"\n2.1.4  4 bytes (U-00010000):        \"ð\"\n2.1.5  5 bytes (U-00200000):        \"ø\"\n2.1.6  6 bytes (U-04000000):        \"ü\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Configuration\nDESCRIPTION: This snippet configures a system restart test for MySQL. It specifies the test name (`testSystemRestart`), arguments (`-n Bug48436 T1`), and a maximum execution time (`5940` seconds).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-basic--02-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSystemRestart\\nargs: -n Bug48436 T1\\nmax-time: 5940\"\n```\n\n----------------------------------------\n\nTITLE: Testing CMake Thread Functionality\nDESCRIPTION: This snippet defines a C++ test for CMake thread functionality using `absl_cc_test`. It specifies the source file, compiler options, and a dependency on the Abseil base library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    cmake_thread_test\n  SRCS\n    \\\"internal/cmake_thread_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::base\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router Configuration File\nDESCRIPTION: Custom target setup for generating the MySQL Router configuration file sample during build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/router/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nMY_ADD_CUSTOM_TARGET(\n  configure_mysql_router_extra ALL\n  COMMAND ${CMAKE_COMMAND}\n  -DINPUT_FILE=${CMAKE_CURRENT_SOURCE_DIR}/mysqlrouter.conf.in\n  -DOUTPUT_FILE=${PROJECT_BINARY_DIR}/stage/${CMAKE_CFG_INTDIR}/etc/mysqlrouter.conf.sample\n  -P ${CMAKE_CURRENT_SOURCE_DIR}/../configure_file.cmake\n)\n\nINSTALL(FILES \"${PROJECT_BINARY_DIR}/stage/\\${CMAKE_INSTALL_CONFIG_NAME}/etc/mysqlrouter.conf.sample\"\n  DESTINATION \"etc\" COMPONENT Router)\n```\n\n----------------------------------------\n\nTITLE: Defining another node restart test command\nDESCRIPTION: Configures 'testNodeRestart' for testing 'GcpStopIsolation' with table 'T1' and loops parameter, allowing a maximum execution time of 1080 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testNodeRestart\nargs: -n GcpStopIsolation T1 --loops=1\nmax-time: 1080\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_config Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_config target, which provides configuration settings for the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_config\n  SRCS\n  HDRS\n    \"internal/config.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Language Directories List in CMake\nDESCRIPTION: Defines a list of language directory names that will be installed as part of MySQL server's shared resources. Includes support for multiple European and Asian languages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/share/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(dirs\n  bulgarian\n  czech\n  danish\n  dutch\n  english\n  estonian \n  french\n  german \n  greek\n  hungarian\n  italian\n  japanese\n  korean\n  norwegian\n  norwegian-ny\n  polish\n  portuguese\n  romanian\n  russian\n  serbian\n  slovak\n  spanish\n  swedish\n  ukrainian\n  )\n```\n\n----------------------------------------\n\nTITLE: Retrieving MYSQLX_CLIENT_LIB Directory Property in CMake\nDESCRIPTION: Retrieves the MYSQLX_CLIENT_LIB directory property from the MYSQLX_PROJECT_DIR directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/xplugin/xpl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nGET_DIRECTORY_PROPERTY(MYSQLX_CLIENT_LIB\n  DIRECTORY ${MYSQLX_PROJECT_DIR}\n  DEFINITION MYSQLX_CLIENT_LIB\n)\n```\n\n----------------------------------------\n\nTITLE: String Format Structure\nDESCRIPTION: Specifies the format for string data including length and character sequence.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<string_format> ::= <string_length> { <character> }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Warning Flag\nDESCRIPTION: This CMake code checks if the compiler supports the `-Wno-unused-local-typedefs` warning flag. If the compiler supports the warning flag, it appends the flag to the CMAKE_CXX_FLAGS, suppressing warnings related to unused local typedefs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/changestreams/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"MY_CHECK_CXX_COMPILER_WARNING(\\\"-Wno-unused-local-typedefs\\\" HAS_WARN_FLAG)\"\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Test Data Values\nDESCRIPTION: Structured test data containing integer, float, date, timestamp and binary values in tab-separated format. Used for MySQL server testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/myisam_tb4.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1\t1\t1\t1\t1\t1\t-5\t0.0\t1\t0.0\t1\t0.0\t1\t0.0\t-1.17549435e-38\t1.175494352e-38...\n```\n\n----------------------------------------\n\nTITLE: Defining another system restart scenario\nDESCRIPTION: Sets up a second 'testSystemRestart' command for the test scenario 'SR_DD_3b_LCP' using table 'D2', allowing a maximum execution time of 1080 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_3b_LCP D2\nmax-time: 1080\n```\n\n----------------------------------------\n\nTITLE: Configuring node_hash_map_test in CMake for Abseil\nDESCRIPTION: Defines the 'node_hash_map_test' target for testing the node hash map implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    node_hash_map_test\n  SRCS\n    \"node_hash_map_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash_generator_testing\n    absl::node_hash_map\n    absl::tracked\n    absl::unordered_map_constructor_test\n    absl::unordered_map_lookup_test\n    absl::unordered_map_members_test\n    absl::unordered_map_modifiers_test\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Server Component Services Library in CMake\nDESCRIPTION: Creates a static library for MySQL server component services with specific compiler definitions and external dependencies. The library links against rapidjson, zlib, and unordered_dense libraries, and depends on GenError target.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/server_component/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(mysql_server_component_services STATIC\n  ${MYSQL_SERVER_COMPONENT_SOURCES})\nTARGET_COMPILE_DEFINITIONS(mysql_server_component_services\n  PRIVATE WITH_MYSQL_COMPONENTS_TEST_DRIVER)\nTARGET_LINK_LIBRARIES(mysql_server_component_services\n  PRIVATE\n  extra::rapidjson\n  ext::zlib\n  extra::unordered_dense\n  )\nADD_DEPENDENCIES(mysql_server_component_services GenError)\n```\n\n----------------------------------------\n\nTITLE: Setting Ranlib Argument if Alternative Ranlib is Used\nDESCRIPTION: This snippet conditionally appends the CMAKE_RANLIB argument if an alternative ranlib is specified.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(ALTERNATIVE_RANLIB)\n  LIST(APPEND TCMALLOC_CMAKE_ARGS -DCMAKE_RANLIB=${ALTERNATIVE_RANLIB})\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Source Directory in CMake Build\nDESCRIPTION: CMake directive to include the src subdirectory in the build process, which contains the main MySQL server source code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/rest_metadata_cache/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Define Logging Component for validate_password Plugin\nDESCRIPTION: This snippet sets a compile-time definition for logging, associating log entries with the validate_password component. It illustrates the practice of tagging logging information to facilitate debugging and tracking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/password_validation/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"validate_password\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL NDB in CMake\nDESCRIPTION: Sets up include directories for the MySQL NDB (Network Database) component. It specifies paths for the current source directory and kernel-related directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/error/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/kernel/vm)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific Resource Files in CMake\nDESCRIPTION: Conditionally adds Windows-specific resource files needed for logging to the event log when building the NDB management server on Windows platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n  # Add the rseource files for logging to event log\n  SET(NDB_MGMD_EXTRA_SRC\n    ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/logger/message.rc\n    ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/logger/MSG00001.bin)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting XCOM Source Files (CMake)\nDESCRIPTION: This section defines the list of source files for the XCom library using the `SET` command. The `XCOM_SOURCES` variable now holds a list of `.cc` and `.c` files that make up the XCom library. These sources implement the various functionalities of the XCom library, including message handling, memory management, configuration, and networking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(XCOM_SOURCES\n  # XCom\n  src/bindings/xcom/xcom/pax_msg.cc\n  src/bindings/xcom/xcom/xcom_base.cc\n  src/bindings/xcom/xcom/xcom_memory.cc\n  src/bindings/xcom/xcom/xcom_vp_str.cc\n  src/bindings/xcom/xcom/xcom_cfg.cc\n  src/bindings/xcom/xcom/xcom_cache.cc\n  src/bindings/xcom/xcom/xcom_transport.cc\n  src/bindings/xcom/xcom/node_address.cc\n  src/bindings/xcom/xcom/xcom_msg_queue.cc\n  src/bindings/xcom/xcom/xcom_statistics.cc\n  src/bindings/xcom/xcom/app_data.cc\n  src/bindings/xcom/xcom/site_def.cc\n  src/bindings/xcom/xcom/xcom_recover.cc\n  src/bindings/xcom/xcom/task.cc\n  src/bindings/xcom/xcom/bitset.cc\n  src/bindings/xcom/xcom/simset.cc\n  src/bindings/xcom/xcom/node_set.cc\n  src/bindings/xcom/xcom/xcom_interface.cc\n  src/bindings/xcom/xcom/node_list.cc\n  src/bindings/xcom/xcom/task_debug.cc\n  src/bindings/xcom/xcom/sock_probe.cc\n  src/bindings/xcom/xcom/task_net.cc\n  src/bindings/xcom/xcom/synode_no.cc\n  src/bindings/xcom/xcom/xcom_detector.cc\n  src/bindings/xcom/xcom/xcom_input_request.cc\n  src/bindings/xcom/xcom/get_synode_app_data.cc\n  src/bindings/xcom/xcom/checked_data.cc\n  src/bindings/xcom/xcom/xdr_checked_data.c\n  src/bindings/xcom/xcom/network/network_provider_manager.cc\n  src/bindings/xcom/xcom/network/xcom_network_provider.cc\n  src/bindings/xcom/xcom/network/xcom_network_provider_native_lib.cc\n  src/bindings/xcom/xcom/network/xcom_network_provider_ssl_native_lib.cc\n  src/bindings/xcom/xcom/leader_info_data.cc\n  ${XCOM_SUNRPC_SOURCES}\n  ${XCOM_RPCGEN_SOURCES})\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testScan\nargs: -n ScanReadAbort T6 D1 D2\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options with CMake\nDESCRIPTION: This snippet conditionally sets compile options based on the `COMPONENT_COMPILE_VISIBILITY` variable. If defined, it sets the `COMPILE_OPTIONS_ARG` variable, which can be used to pass compile options to the compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/keyring_common/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(COMPONENT_COMPILE_VISIBILITY)\n  SET(COMPILE_OPTIONS_ARG COMPILE_OPTIONS \\\"${COMPONENT_COMPILE_VISIBILITY}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_Api_NDBD_MGMD\nDESCRIPTION: This command checks the functionality of the NDBD with MGMD (Management Node) during the upgrade, labeled as 'Upgrade_Api_NDBD_MGMD'.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_Api_NDBD_MGMD T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Defining MAN Aliases with CMake List\nDESCRIPTION: This CMake snippet defines a list named `MAN_ALIAS` and appends a series of aliases for manual pages. Each pair of items in the list represents an alias from the first name to the second. This is likely done to allow users to find documentation using different names or functions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"list(APPEND MAN_ALIAS\n\teddsa_pk_new eddsa_pk_free\n\teddsa_pk_new eddsa_pk_from_EVP_PKEY\n\teddsa_pk_new eddsa_pk_from_ptr\n\teddsa_pk_new eddsa_pk_to_EVP_PKEY\n\tes256_pk_new es256_pk_free\n\tes256_pk_new es256_pk_from_EC_KEY\n\tes256_pk_new es256_pk_from_EVP_PKEY\n\tes256_pk_new es256_pk_from_ptr\n\tes256_pk_new es256_pk_to_EVP_PKEY\n\tes384_pk_new es384_pk_free\n\tes384_pk_new es384_pk_from_EC_KEY\n\tes384_pk_new es384_pk_from_EVP_PKEY\n\tes384_pk_new es384_pk_from_ptr\n\tes384_pk_new es384_pk_to_EVP_PKEY\n\tfido_assert_allow_cred fido_assert_empty_allow_list\n\tfido_assert_new fido_assert_authdata_len\n\tfido_assert_new fido_assert_authdata_ptr\n\tfido_assert_new fido_assert_authdata_raw_len\n\tfido_assert_new fido_assert_authdata_raw_ptr\n\tfido_assert_new fido_assert_blob_len\n\tfido_assert_new fido_assert_blob_ptr\n\tfido_assert_new fido_assert_clientdata_hash_len\n\tfido_assert_new fido_assert_clientdata_hash_ptr\n\tfido_assert_new fido_assert_count\n\tfido_assert_new fido_assert_flags\n\tfido_assert_new fido_assert_free\n\tfido_assert_new fido_assert_hmac_secret_len\n\tfido_assert_new fido_assert_hmac_secret_ptr\n\tfido_assert_new fido_assert_id_len\n\tfido_assert_new fido_assert_id_ptr\n\tfido_assert_new fido_assert_largeblob_key_len\n\tfido_assert_new fido_assert_largeblob_key_ptr\n\tfido_assert_new fido_assert_rp_id\n\tfido_assert_new fido_assert_sigcount\n\tfido_assert_new fido_assert_sig_len\n\tfido_assert_new fido_assert_sig_ptr\n\tfido_assert_new fido_assert_user_display_name\n\tfido_assert_new fido_assert_user_icon\n\tfido_assert_new fido_assert_user_id_len\n\tfido_assert_new fido_assert_user_id_ptr\n\tfido_assert_new fido_assert_user_name\n\tfido_assert_set_authdata fido_assert_set_authdata_raw\n\tfido_assert_set_authdata fido_assert_set_clientdata\n\tfido_assert_set_authdata fido_assert_set_clientdata_hash\n\tfido_assert_set_authdata fido_assert_set_count\n\tfido_assert_set_authdata fido_assert_set_extensions\n\tfido_assert_set_authdata fido_assert_set_hmac_salt\n\tfido_assert_set_authdata fido_assert_set_hmac_secret\n\tfido_assert_set_authdata fido_assert_set_rp\n\tfido_assert_set_authdata fido_assert_set_sig\n\tfido_assert_set_authdata fido_assert_set_up\n\tfido_assert_set_authdata fido_assert_set_uv\n\tfido_assert_set_authdata fido_assert_set_winhello_appid\n\tfido_bio_dev_get_info fido_bio_dev_enroll_begin\n\tfido_bio_dev_get_info fido_bio_dev_enroll_cancel\n\tfido_bio_dev_get_info fido_bio_dev_enroll_continue\n\tfido_bio_dev_get_info fido_bio_dev_enroll_remove\n\tfido_bio_dev_get_info fido_bio_dev_get_template_array\n\tfido_bio_dev_get_info fido_bio_dev_set_template_name\n\tfido_bio_enroll_new fido_bio_enroll_free\n\tfido_bio_enroll_new fido_bio_enroll_last_status\n\tfido_bio_enroll_new fido_bio_enroll_remaining_samples\n\tfido_bio_info_new fido_bio_info_free\n\tfido_bio_info_new fido_bio_info_max_samples\n\tfido_bio_info_new fido_bio_info_type\n\tfido_bio_template fido_bio_template_array_count\n\tfido_bio_template fido_bio_template_array_free\n\tfido_bio_template fido_bio_template_array_new\n\tfido_bio_template fido_bio_template_free\n\tfido_bio_template fido_bio_template_id_len\n\tfido_bio_template fido_bio_template_id_ptr\n\tfido_bio_template fido_bio_template_name\n\tfido_bio_template fido_bio_template_new\n\tfido_bio_template fido_bio_template_set_id\n\tfido_bio_template fido_bio_template_set_name\n\tfido_cbor_info_new fido_cbor_info_aaguid_len\n\tfido_cbor_info_new fido_cbor_info_aaguid_ptr\n\tfido_cbor_info_new fido_cbor_info_algorithm_cose\n\tfido_cbor_info_new fido_cbor_info_algorithm_count\n\tfido_cbor_info_new fido_cbor_info_algorithm_type\n\tfido_cbor_info_new fido_cbor_info_certs_len\n\tfido_cbor_info_new fido_cbor_info_certs_name_ptr\n\tfido_cbor_info_new fido_cbor_info_certs_value_ptr\n\tfido_cbor_info_new fido_cbor_info_extensions_len\n\tfido_cbor_info_new fido_cbor_info_extensions_ptr\n\tfido_cbor_info_new fido_cbor_info_free\n\tfido_cbor_info_new fido_cbor_info_fwversion\n\tfido_cbor_info_new fido_cbor_info_maxcredbloblen\n\tfido_cbor_info_new fido_cbor_info_maxcredcntlst\n\tfido_cbor_info_new fido_cbor_info_maxcredidlen\n\tfido_cbor_info_new fido_cbor_info_maxlargeblob\n\tfido_cbor_info_new fido_cbor_info_maxmsgsiz\n\tfido_cbor_info_new fido_cbor_info_maxrpid_minpinlen\n\tfido_cbor_info_new fido_cbor_info_minpinlen\n\tfido_cbor_info_new fido_cbor_info_new_pin_required\n\tfido_cbor_info_new fido_cbor_info_options_len\n\tfido_cbor_info_new fido_cbor_info_options_name_ptr\n\tfido_cbor_info_new fido_cbor_info_options_value_ptr\n\tfido_cbor_info_new fido_cbor_info_protocols_len\n\tfido_cbor_info_new fido_cbor_info_protocols_ptr\n\tfido_cbor_info_new fido_cbor_info_rk_remaining\n\tfido_cbor_info_new fido_cbor_info_transports_len\n\tfido_cbor_info_new fido_cbor_info_transports_ptr\n\tfido_cbor_info_new fido_cbor_info_uv_attempts\n\tfido_cbor_info_new fido_cbor_info_uv_modality\n\tfido_cbor_info_new fido_cbor_info_versions_len\n\tfido_cbor_info_new fido_cbor_info_versions_ptr\n\tfido_cbor_info_new fido_dev_get_cbor_info\n\tfido_cred_exclude fido_cred_empty_exclude_list\n\tfido_cred_new fido_cred_aaguid_len\n\tfido_cred_new fido_cred_aaguid_ptr\n\tfido_cred_new fido_cred_attstmt_len\n\tfido_cred_new fido_cred_attstmt_ptr\n\tfido_cred_new fido_cred_authdata_len\n\tfido_cred_new fido_cred_authdata_ptr\n\tfido_cred_new fido_cred_authdata_raw_len\n\tfido_cred_new fido_cred_authdata_raw_ptr\n\tfido_cred_new fido_cred_clientdata_hash_len\n\tfido_cred_new fido_cred_clientdata_hash_ptr\n\tfido_cred_new fido_cred_display_name\n\tfido_cred_new fido_cred_flags\n\tfido_cred_new fido_cred_fmt\n\tfido_cred_new fido_cred_free\n\tfido_cred_new fido_cred_id_len\n\tfido_cred_new fido_cred_id_ptr\n\tfido_cred_new fido_cred_largeblob_key_len\n\tfido_cred_new fido_cred_largeblob_key_ptr\n\tfido_cred_new fido_cred_pin_minlen\n\tfido_cred_new fido_cred_prot\n\tfido_cred_new fido_cred_pubkey_len\n\tfido_cred_new fido_cred_pubkey_ptr\n\tfido_cred_new fido_cred_rp_id\n\tfido_cred_new fido_cred_rp_name\n\tfido_cred_new fido_cred_sigcount\n\tfido_cred_new fido_cred_sig_len\n\tfido_cred_new fido_cred_sig_ptr\n\tfido_cred_new fido_cred_type\n\tfido_cred_new fido_cred_user_id_len\n\tfido_cred_new fido_cred_user_id_ptr\n\tfido_cred_new fido_cred_user_name\n\tfido_cred_new fido_cred_x5c_len\n\tfido_cred_new fido_cred_x5c_list_count\n\tfido_cred_new fido_cred_x5c_list_len\n\tfido_cred_new fido_cred_x5c_list_ptr\n\tfido_cred_new fido_cred_x5c_ptr\n\tfido_cred_verify fido_cred_verify_self\n\tfido_credman_metadata_new fido_credman_del_dev_rk\n\tfido_credman_metadata_new fido_credman_get_dev_metadata\n\tfido_credman_metadata_new fido_credman_get_dev_rk\n\tfido_credman_metadata_new fido_credman_get_dev_rp\n\tfido_credman_metadata_new fido_credman_metadata_free\n\tfido_credman_metadata_new fido_credman_rk\n\tfido_credman_metadata_new fido_credman_rk_count\n\tfido_credman_metadata_new fido_credman_rk_existing\n\tfido_credman_metadata_new fido_credman_rk_free\n\tfido_credman_metadata_new fido_credman_rk_new\n\tfido_credman_metadata_new fido_credman_rk_remaining\n\tfido_credman_metadata_new fido_credman_rp_count\n\tfido_credman_metadata_new fido_credman_rp_free\n\tfido_credman_metadata_new fido_credman_rp_id\n\tfido_credman_metadata_new fido_credman_rp_id_hash_len\n\tfido_credman_metadata_new fido_credman_rp_id_hash_ptr\n\tfido_credman_metadata_new fido_credman_rp_name\n\tfido_credman_metadata_new fido_credman_rp_new\n\tfido_credman_metadata_new fido_credman_set_dev_rk\n\tfido_cred_set_authdata fido_cred_set_attstmt\n\tfido_cred_set_authdata fido_cred_set_attobj\n\tfido_cred_set_authdata fido_cred_set_authdata_raw\n\tfido_cred_set_authdata fido_cred_set_blob\n\tfido_cred_set_authdata fido_cred_set_clientdata\n\tfido_cred_set_authdata fido_cred_set_clientdata_hash\n\tfido_cred_set_authdata fido_cred_set_extensions\n\tfido_cred_set_authdata fido_cred_set_fmt\n\tfido_cred_set_authdata fido_cred_set_id\n\tfido_cred_set_authdata fido_cred_set_pin_minlen\n\tfido_cred_set_authdata fido_cred_set_prot\n\tfido_cred_set_authdata fido_cred_set_rk\n\tfido_cred_set_authdata fido_cred_set_rp\n\tfido_cred_set_authdata fido_cred_set_sig\n\tfido_cred_set_authdata fido_cred_set_type\n\tfido_cred_set_authdata fido_cred_set_user\n\tfido_cred_set_authdata fido_cred_set_uv\n\tfido_cred_set_authdata fido_cred_set_x509\n\tfido_dev_enable_entattest fido_dev_toggle_always_uv\n\tfido_dev_enable_entattest fido_dev_force_pin_change\n\tfido_dev_enable_entattest fido_dev_set_pin_minlen\n\tfido_dev_enable_entattest fido_dev_set_pin_minlen_rpid\n\tfido_dev_get_touch_begin fido_dev_get_touch_status\n\tfido_dev_info_manifest fido_dev_info_free\n\tfido_dev_info_manifest fido_dev_info_manufacturer_string\n\tfido_dev_info_manifest fido_dev_info_new\n\tfido_dev_info_manifest fido_dev_info_path\n\tfido_dev_info_manifest fido_dev_info_product\n\tfido_dev_info_manifest fido_dev_info_product_string\n\tfido_dev_info_manifest fido_dev_info_ptr\n\tfido_dev_info_manifest fido_dev_info_set\n\tfido_dev_info_manifest fido_dev_info_vendor\n\tfido_dev_open fido_dev_build\n\tfido_dev_open fido_dev_cancel\n\tfido_dev_open fido_dev_close\n\tfido_dev_open fido_dev_flags\n\tfido_dev_open fido_dev_force_fido2\n\tfido_dev_open fido_dev_force_u2f\n\tfido_dev_open fido_dev_free\n\tfido_dev_open fido_dev_has_pin\n\tfido_dev_open fido_dev_has_uv\n\tfido_dev_open fido_dev_is_fido2\n\tfido_dev_open fido_dev_is_winhello\n\tfido_dev_open fido_dev_major\n\tfido_dev_open fido_dev_minor\n\tfido_dev_open fido_dev_new\n)\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Linux Platform in CMake\nDESCRIPTION: Conditional check that exits the script if the platform is not Linux, as Debian packaging only applies to Linux systems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT LINUX)\n  RETURN()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Globals Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log globals functionality. It includes the necessary source file and dependencies to validate the global state and configuration aspects of the logging system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_globals_test\n  SRCS\n    \"globals_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_globals\n    absl::log_internal_globals\n    absl::log_internal_test_helpers\n    absl::log_severity\n    absl::scoped_mock_log\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_policy_testing Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'hash_policy_testing' library target for testing purposes. It defines the header file, compiler options, and dependencies for hash policy testing utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    hash_policy_testing\n  HDRS\n    \"internal/hash_policy_testing.h\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::hash\n    absl::strings\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Defining test command for reading scanned results\nDESCRIPTION: Another 'testScan' defines the 'ScanRead100' process, limiting to 100 records and referencing tables 'T1', 'D1', and 'D2' with a maximum execution time of 540 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanRead100 -l 100 T1 D1 D2\nmax-time: 540\n```\n\n----------------------------------------\n\nTITLE: Setting GCC Compiler Flags for DSE\nDESCRIPTION: Adds lifetime-dse compiler flag for GCC to handle memory allocation in NDB kernel, working around bug#25690926.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  STRING_APPEND(CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} \" -flifetime-dse=1\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Testing UTF-8 Greek Word Encoding\nDESCRIPTION: Demonstrates correct UTF-8 encoding of the Greek word 'kosme'\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nÎºá½¹ÏÎ¼Îµ\n```\n\n----------------------------------------\n\nTITLE: Configuring fixed_array_test in CMake for Abseil\nDESCRIPTION: Defines the 'fixed_array_test' target for testing the fixed array implementation. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    fixed_array_test\n  SRCS\n    \"fixed_array_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::fixed_array\n    absl::counting_allocator\n    absl::config\n    absl::exception_testing\n    absl::hash_testing\n    absl::memory\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Libraries for Solaris\nDESCRIPTION: Conditionally adds Solaris-specific network libraries (nsl and socket) to the routing library when building on Solaris platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/src/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(SOLARIS)\n  TARGET_LINK_LIBRARIES(routing\n    PRIVATE -lnsl\n    PRIVATE -lsocket)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Server with Custom Configuration\nDESCRIPTION: Command to initialize a new MySQL instance with a specific configuration file and settings. This establishes the datadir that will be used for portability testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/README_tablespace_portable_linux.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mysqld --defaults-file=./my.cnf --datadir=../Linx-DB/ --basedir=. -u root --initialize-insecure\n```\n\n----------------------------------------\n\nTITLE: Adding Guidelines Version Test in CMake\nDESCRIPTION: Configures a test for version guidelines with dependency on router utilities library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_guidelines_version.cc\n  MODULE ${TEST_MODULE}\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n  LIB_DEPENDS\n    router_utils\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for ndb_opts in CMake\nDESCRIPTION: Sets a compile definition for ndb_opts.cpp, specifically defining the NDB_TLS_SEARCH_PATH.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSET_PROPERTY(SOURCE ndb_opts.cpp\n             PROPERTY COMPILE_DEFINITIONS\n             NDB_TLS_SEARCH_PATH=\"${WITH_NDB_TLS_SEARCH_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring node_hash_map Library in CMake for Abseil\nDESCRIPTION: Sets up the 'node_hash_map' library target, which provides a node-based hash map implementation. It defines the header file, compiler options, and dependencies for the node hash map component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    node_hash_map\n  HDRS\n    \"node_hash_map.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::container_memory\n    absl::core_headers\n    absl::hash_function_defaults\n    absl::node_slot_policy\n    absl::raw_hash_map\n    absl::algorithm_container\n    absl::memory\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test File Addition (Solaris)\nDESCRIPTION: This snippet conditionally appends a test file to the `TESTS` list, excluding it on Solaris platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(NOT SOLARIS)\n  LIST(APPEND TESTS\n    test_secure_memory_pool.cc\n  )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Preventing installation of config files\nDESCRIPTION: This snippet uses `do_not_install` to prevent the installation of the generated CMake package configuration files (`libcborConfig.cmake` and `libcborConfigVersion.cmake`). It's important to note that `do_not_install` appears to be a custom macro or function since standard CMake doesn't have that command.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ndo_not_install(\n\tFILES\n\t\t${CMAKE_CURRENT_BINARY_DIR}/libcborConfig.cmake\n\t\t${CMAKE_CURRENT_BINARY_DIR}/libcborConfigVersion.cmake\n\tDESTINATION\n\t\t${CMAKE_INSTALL_LIBDIR}/cmake/libcbor\n\t)\n```\n\n----------------------------------------\n\nTITLE: Defining crc32c Test with absl_cc_test in Bazel\nDESCRIPTION: This snippet defines a C++ test named `crc32c_test` using `absl_cc_test`. It specifies the source file for the test, compiler options, and dependencies including the `crc32c` library itself, string utilities, string formatting, and the Google Test framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/crc/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: Bazel\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    crc32c_test\n  SRCS\n    \\\"crc32c_test.cc\\\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::crc32c\n    absl::strings\n    absl::str_format\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configure C++ Compiler Warnings in CMake\nDESCRIPTION: Sets up C++ compiler warning flags for handling unused variables and parameters. Checks compiler support for each warning flag and appends supported flags to CMAKE_CXX_FLAGS.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(warning\n    \"unused-but-set-variable\"\n    \"unused-parameter\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting ICU Common Source Files\nDESCRIPTION: This part of the CMake file specifies a list of common source files required by the ICU library. These files are used in the compilation of ICU within the MySQL server setup. The snippet ensures that all necessary ICU components are included, linking them through a defined variable for ease of access and maintenance throughout the project's build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(ICU_COMMON_SOURCES\n  ${ICU_VERSION_DIR}/source/common/appendable.cpp\n  ${ICU_VERSION_DIR}/source/common/bmpset.cpp\n  ${ICU_VERSION_DIR}/source/common/brkeng.cpp\n  ${ICU_VERSION_DIR}/source/common/brkiter.cpp\n  ${ICU_VERSION_DIR}/source/common/bytesinkutil.cpp\n  ${ICU_VERSION_DIR}/source/common/bytestream.cpp\n  ${ICU_VERSION_DIR}/source/common/bytestriebuilder.cpp\n  ${ICU_VERSION_DIR}/source/common/bytestrie.cpp\n  ${ICU_VERSION_DIR}/source/common/bytestrieiterator.cpp\n  ${ICU_VERSION_DIR}/source/common/caniter.cpp\n  ${ICU_VERSION_DIR}/source/common/characterproperties.cpp\n  ${ICU_VERSION_DIR}/source/common/chariter.cpp\n  ${ICU_VERSION_DIR}/source/common/charstr.cpp\n  ${ICU_VERSION_DIR}/source/common/cmemory.cpp\n  ${ICU_VERSION_DIR}/source/common/cstr.cpp\n  ${ICU_VERSION_DIR}/source/common/cstring.cpp\n  ${ICU_VERSION_DIR}/source/common/cwchar.cpp\n  ${ICU_VERSION_DIR}/source/common/dictbe.cpp\n  ${ICU_VERSION_DIR}/source/common/dictionarydata.cpp\n  ${ICU_VERSION_DIR}/source/common/dtintrv.cpp\n  ${ICU_VERSION_DIR}/source/common/edits.cpp\n  ${ICU_VERSION_DIR}/source/common/emojiprops.cpp\n  ${ICU_VERSION_DIR}/source/common/errorcode.cpp\n  ${ICU_VERSION_DIR}/source/common/filteredbrk.cpp\n  ${ICU_VERSION_DIR}/source/common/filterednormalizer2.cpp\n  ${ICU_VERSION_DIR}/source/common/icudataver.cpp\n  ${ICU_VERSION_DIR}/source/common/icuplug.cpp\n  ${ICU_VERSION_DIR}/source/common/loadednormalizer2impl.cpp\n  ${ICU_VERSION_DIR}/source/common/localebuilder.cpp\n  ${ICU_VERSION_DIR}/source/common/localematcher.cpp\n  ${ICU_VERSION_DIR}/source/common/localeprioritylist.cpp\n  ${ICU_VERSION_DIR}/source/common/locavailable.cpp\n  ${ICU_VERSION_DIR}/source/common/locbased.cpp\n  ${ICU_VERSION_DIR}/source/common/locdispnames.cpp\n  ${ICU_VERSION_DIR}/source/common/locdistance.cpp\n  ${ICU_VERSION_DIR}/source/common/locdspnm.cpp\n  ${ICU_VERSION_DIR}/source/common/locid.cpp\n  ${ICU_VERSION_DIR}/source/common/loclikely.cpp\n  ${ICU_VERSION_DIR}/source/common/loclikelysubtags.cpp\n  ${ICU_VERSION_DIR}/source/common/locmap.cpp\n  ${ICU_VERSION_DIR}/source/common/locresdata.cpp\n  ${ICU_VERSION_DIR}/source/common/locutil.cpp\n  ${ICU_VERSION_DIR}/source/common/lsr.cpp\n  ${ICU_VERSION_DIR}/source/common/lstmbe.cpp\n  ${ICU_VERSION_DIR}/source/common/messagepattern.cpp\n  ${ICU_VERSION_DIR}/source/common/mlbe.cpp\n  ${ICU_VERSION_DIR}/source/common/normalizer2.cpp\n  ${ICU_VERSION_DIR}/source/common/normalizer2impl.cpp\n  ${ICU_VERSION_DIR}/source/common/normlzr.cpp\n  ${ICU_VERSION_DIR}/source/common/parsepos.cpp\n  ${ICU_VERSION_DIR}/source/common/patternprops.cpp\n  ${ICU_VERSION_DIR}/source/common/pluralmap.cpp\n  ${ICU_VERSION_DIR}/source/common/propname.cpp\n  ${ICU_VERSION_DIR}/source/common/propsvec.cpp\n  ${ICU_VERSION_DIR}/source/common/punycode.cpp\n  ${ICU_VERSION_DIR}/source/common/putil.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbi_cache.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbi.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbidata.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbinode.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbirb.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbiscan.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbisetb.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbistbl.cpp\n  ${ICU_VERSION_DIR}/source/common/rbbitblb.cpp\n  ${ICU_VERSION_DIR}/source/common/resbund_cnv.cpp\n  ${ICU_VERSION_DIR}/source/common/resbund.cpp\n  ${ICU_VERSION_DIR}/source/common/resource.cpp\n  ${ICU_VERSION_DIR}/source/common/restrace.cpp\n  ${ICU_VERSION_DIR}/source/common/ruleiter.cpp\n  ${ICU_VERSION_DIR}/source/common/schriter.cpp\n  ${ICU_VERSION_DIR}/source/common/serv.cpp\n  ${ICU_VERSION_DIR}/source/common/servlk.cpp\n  ${ICU_VERSION_DIR}/source/common/servlkf.cpp\n  ${ICU_VERSION_DIR}/source/common/servls.cpp\n  ${ICU_VERSION_DIR}/source/common/servnotf.cpp\n  ${ICU_VERSION_DIR}/source/common/servrbf.cpp\n  ${ICU_VERSION_DIR}/source/common/servslkf.cpp\n  ${ICU_VERSION_DIR}/source/common/sharedobject.cpp\n  ${ICU_VERSION_DIR}/source/common/simpleformatter.cpp\n  ${ICU_VERSION_DIR}/source/common/static_unicode_sets.cpp\n  ${ICU_VERSION_DIR}/source/common/stringpiece.cpp\n  ${ICU_VERSION_DIR}/source/common/stringtriebuilder.cpp\n  ${ICU_VERSION_DIR}/source/common/uarrsort.cpp\n  ${ICU_VERSION_DIR}/source/common/ubidi.cpp\n  ${ICU_VERSION_DIR}/source/common/ubidiln.cpp\n  ${ICU_VERSION_DIR}/source/common/ubidi_props.cpp\n  ${ICU_VERSION_DIR}/source/common/ubiditransform.cpp\n  ${ICU_VERSION_DIR}/source/common/ubidiwrt.cpp\n  ${ICU_VERSION_DIR}/source/common/ubrk.cpp\n  ${ICU_VERSION_DIR}/source/common/ucase.cpp\n  ${ICU_VERSION_DIR}/source/common/ucasemap.cpp\n  ${ICU_VERSION_DIR}/source/common/ucasemap_titlecase_brkiter.cpp\n  ${ICU_VERSION_DIR}/source/common/ucat.cpp\n  ${ICU_VERSION_DIR}/source/common/uchar.cpp\n  ${ICU_VERSION_DIR}/source/common/ucharstriebuilder.cpp\n  ${ICU_VERSION_DIR}/source/common/ucharstrie.cpp\n  ${ICU_VERSION_DIR}/source/common/ucharstrieiterator.cpp\n  ${ICU_VERSION_DIR}/source/common/uchriter.cpp\n  ${ICU_VERSION_DIR}/source/common/ucln_cmn.cpp\n  ${ICU_VERSION_DIR}/source/common/ucmndata.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv2022.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_bld.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvbocu.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_cb.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_cnv.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_ct.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvdisp.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_err.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_ext.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvhz.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_io.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvisci.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvlat1.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_lmb.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvmbcs.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvscsu.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnvsel.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_set.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_u16.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_u32.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_u7.cpp\n  ${ICU_VERSION_DIR}/source/common/ucnv_u8.cpp\n  ${ICU_VERSION_DIR}/source/common/ucol_swp.cpp\n  ${ICU_VERSION_DIR}/source/common/ucptrie.cpp\n  ${ICU_VERSION_DIR}/source/common/ucurr.cpp\n  ${ICU_VERSION_DIR}/source/common/udata.cpp\n  ${ICU_VERSION_DIR}/source/common/udatamem.cpp\n  ${ICU_VERSION_DIR}/source/common/udataswp.cpp\n  ${ICU_VERSION_DIR}/source/common/uenum.cpp\n  ${ICU_VERSION_DIR}/source/common/uhash.cpp\n  ${ICU_VERSION_DIR}/source/common/uhash_us.cpp\n  ${ICU_VERSION_DIR}/source/common/uidna.cpp\n  ${ICU_VERSION_DIR}/source/common/uinit.cpp\n  ${ICU_VERSION_DIR}/source/common/uinvchar.cpp\n  ${ICU_VERSION_DIR}/source/common/uiter.cpp\n  ${ICU_VERSION_DIR}/source/common/ulist.cpp\n  ${ICU_VERSION_DIR}/source/common/uloc.cpp\n  ${ICU_VERSION_DIR}/source/common/uloc_keytype.cpp\n  ${ICU_VERSION_DIR}/source/common/uloc_tag.cpp\n  ${ICU_VERSION_DIR}/source/common/umapfile.cpp\n  ${ICU_VERSION_DIR}/source/common/umath.cpp\n  ${ICU_VERSION_DIR}/source/common/umutablecptrie.cpp\n  ${ICU_VERSION_DIR}/source/common/umutex.cpp\n  ${ICU_VERSION_DIR}/source/common/unames.cpp\n  ${ICU_VERSION_DIR}/source/common/unifiedcache.cpp\n  ${ICU_VERSION_DIR}/source/common/unifilt.cpp\n  ${ICU_VERSION_DIR}/source/common/unifunct.cpp\n  ${ICU_VERSION_DIR}/source/common/uniset_closure.cpp\n  ${ICU_VERSION_DIR}/source/common/uniset.cpp\n  ${ICU_VERSION_DIR}/source/common/uniset_props.cpp\n  ${ICU_VERSION_DIR}/source/common/unisetspan.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr_case.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr_case_locale.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr_cnv.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr_props.cpp\n  ${ICU_VERSION_DIR}/source/common/unistr_titlecase_brkiter.cpp\n  ${ICU_VERSION_DIR}/source/common/unormcmp.cpp\n  ${ICU_VERSION_DIR}/source/common/unorm.cpp\n  ${ICU_VERSION_DIR}/source/common/uobject.cpp\n  ${ICU_VERSION_DIR}/source/common/uprops.cpp\n  ${ICU_VERSION_DIR}/source/common/uresbund.cpp\n  ${ICU_VERSION_DIR}/source/common/ures_cnv.cpp\n  ${ICU_VERSION_DIR}/source/common/uresdata.cpp\n  ${ICU_VERSION_DIR}/source/common/usc_impl.cpp\n  ${ICU_VERSION_DIR}/source/common/uscript.cpp\n  ${ICU_VERSION_DIR}/source/common/uscript_props.cpp\n  ${ICU_VERSION_DIR}/source/common/uset.cpp\n  ${ICU_VERSION_DIR}/source/common/usetiter.cpp\n  ${ICU_VERSION_DIR}/source/common/uset_props.cpp\n  ${ICU_VERSION_DIR}/source/common/ushape.cpp\n  ${ICU_VERSION_DIR}/source/common/usprep.cpp\n  ${ICU_VERSION_DIR}/source/common/ustack.cpp\n  ${ICU_VERSION_DIR}/source/common/ustrcase.cpp\n  ${ICU_VERSION_DIR}/source/common/ustrcase_locale.cpp\n  ${ICU_VERSION_DIR}/source/common/ustr_cnv.cpp\n  ${ICU_VERSION_DIR}/source/common/ustrenum.cpp\n  ${ICU_VERSION_DIR}/source/common/ustrfmt.cpp\n  ${ICU_VERSION_DIR}/source/common/ustring.cpp\n  ${ICU_VERSION_DIR}/source/common/ustr_titlecase_brkiter.cpp\n  ${ICU_VERSION_DIR}/source/common/ustrtrns.cpp\n  ${ICU_VERSION_DIR}/source/common/ustr_wcs.cpp\n  ${ICU_VERSION_DIR}/source/common/utext.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Memory Test in CMake\nDESCRIPTION: This snippet defines the test target for the 'memory' library using absl_cc_test. It specifies the test source file, compilation options, and dependencies including the Google Test framework.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/memory/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    memory_test\n  SRCS\n    \"memory_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::memory\n    absl::core_headers\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling MSVC CPPCheck\nDESCRIPTION: This snippet disables the MSVC CPPCheck tool. This is likely done to avoid false positives or compatibility issues with the MySQL X plugin code.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"MSVC_CPPCHECK_DISABLE()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Random Mocking Bit Generator Library - C++\nDESCRIPTION: Defines a library for mocking bit generation, incorporating various dependencies including other Abseil components and Google Test libraries. This library is designed for both public use and testing purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_library(\n  NAME\n    random_mocking_bit_gen\n  HDRS\n    \"mock_distributions.h\"\n    \"mocking_bit_gen.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::flat_hash_map\n    absl::raw_logging_internal\n    absl::random_distributions\n    absl::random_internal_distribution_caller\n    absl::random_internal_mock_overload_set\n    absl::random_random\n    absl::strings\n    absl::span\n    absl::type_traits\n    absl::utility\n    absl::variant\n    GTest::gmock\n    GTest::gtest\n  PUBLIC\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TCMalloc Minimal Debug in CMake\nDESCRIPTION: Sets up various unit tests for TCMalloc minimal debug library, including tcmalloc_minimal_debug_unittest, malloc_extension_debug_test, memalign_debug_unittest, realloc_debug_unittest, and debugallocation_test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n    add_executable(tcmalloc_minimal_debug_unittest ${tcmalloc_minimal_unittest_SOURCES})\n    target_compile_definitions(tcmalloc_minimal_debug_unittest PRIVATE DEBUGALLOCATION)\n    target_link_libraries(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug ${tcmalloc_minimal_unittest_LDADD})\n    add_test(tcmalloc_minimal_debug_unittest tcmalloc_minimal_debug_unittest)\n\n    add_executable(malloc_extension_debug_test ${malloc_extension_test_SOURCES})\n    target_link_libraries(malloc_extension_debug_test tcmalloc_minimal_debug ${malloc_extension_test_LIBADD})\n    add_test(malloc_extension_debug_test malloc_extension_debug_test)\n\n    if(NOT MINGW AND NOT APPLE)\n      add_executable(memalign_debug_unittest ${memalign_unittest_SOURCES})\n      target_link_libraries(memalign_debug_unittest\n              tcmalloc_minimal_debug Threads::Threads)\n      add_test(memalign_debug_unittest memalign_debug_unittest)\n    endif()\n\n    add_executable(realloc_debug_unittest ${realloc_unittest_SOURCES})\n    target_link_libraries(realloc_debug_unittest PUBLIC tcmalloc_minimal_debug)\n    add_test(realloc_debug_unittest realloc_debug_unittest)\n\n    if(WITH_STACK_TRACE)\n      add_executable(debugallocation_test src/tests/debugallocation_test.cc)\n      target_link_libraries(debugallocation_test PUBLIC tcmalloc_minimal_debug Threads::Threads)\n\n      add_test(NAME debugallocation_test\n              COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/src/tests/debugallocation_test.sh)\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterJ Java Source Files\nDESCRIPTION: Lists all Java source files that make up the ClusterJ API, including core classes, annotations, and query interfaces.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-api/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JAVA_SOURCES\\n  ${CLUSTERJ_API_PREFIX}/ClusterJDatastoreException.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJException.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJFatalException.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJFatalInternalException.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJFatalUserException.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJHelper.java\\n  ${CLUSTERJ_API_PREFIX}/ClusterJUserException.java\\n  ${CLUSTERJ_API_PREFIX}/ColumnMetadata.java\\n  ${CLUSTERJ_API_PREFIX}/ColumnType.java\\n  ${CLUSTERJ_API_PREFIX}/Constants.java\\n  ${CLUSTERJ_API_PREFIX}/Dbug.java\\n  ${CLUSTERJ_API_PREFIX}/DynamicObject.java\\n  ${CLUSTERJ_API_PREFIX}/DynamicObjectDelegate.java\\n  ${CLUSTERJ_API_PREFIX}/LockMode.java\\n  ${CLUSTERJ_API_PREFIX}/Query.java\\n  ${CLUSTERJ_API_PREFIX}/Results.java\\n  ${CLUSTERJ_API_PREFIX}/Session.java\\n  ${CLUSTERJ_API_PREFIX}/SessionFactory.java\\n  ${CLUSTERJ_API_PREFIX}/SessionFactoryService.java\\n  ${CLUSTERJ_API_PREFIX}/Transaction.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Column.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Columns.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Extension.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Extensions.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Index.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Indices.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Lob.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/NotPersistent.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/NullValue.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/PartitionKey.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/PersistenceCapable.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/PersistenceModifier.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Persistent.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/PrimaryKey.java\\n  ${CLUSTERJ_API_PREFIX}/annotation/Projection.java\\n  ${CLUSTERJ_API_PREFIX}/query/Predicate.java\\n  ${CLUSTERJ_API_PREFIX}/query/PredicateOperand.java\\n  ${CLUSTERJ_API_PREFIX}/query/QueryBuilder.java\\n  ${CLUSTERJ_API_PREFIX}/query/QueryDefinition.java\\n  ${CLUSTERJ_API_PREFIX}/query/QueryDomainType.java\\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring hash_function_defaults_test in CMake for Abseil\nDESCRIPTION: Defines the 'hash_function_defaults_test' target for testing the default hash function implementations. It specifies the test source file, compiler options, and test dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    hash_function_defaults_test\n  SRCS\n    \"internal/hash_function_defaults_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::cord\n    absl::cord_test_helpers\n    absl::hash_function_defaults\n    absl::hash\n    absl::random_random\n    absl::strings\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: String Operation Warning Downgrade\nDESCRIPTION: This CMake command downgrades string operation warnings for the rewriter plugin. This is likely done to suppress specific warnings that are not critical for the plugin's functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/rewriter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nDOWNGRADE_STRINGOP_WARNINGS(rewriter)\n```\n\n----------------------------------------\n\nTITLE: Database Information Scanning Protocol Flow Diagram\nDESCRIPTION: ASCII diagram showing the request/response flow for database information scanning between API, Master DBINFO and Slave DBINFO components. Demonstrates cursor propagation, response aggregation, and handling of maxRows/maxBytes limits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbinfo/DbinfoScan.txt#2025-04-21_snippet_0\n\nLANGUAGE: ascii-diagram\nCODE:\n```\nAPI\t\t\tMASTER DBINFO\t\tSLAVE DBINFO\tSLAVE other blk\n\nDBINFO_SCANREQ---------->DBINFO_SCANREQ--------->DBINFO_SCANREQ->\n(no cursor)\t\t (with cursor)\t\t (with cursor)\n\n\t\t\t\t\t\t\t     <-- DBINFO_SCANCONF\n\n\t\t\t\t\t\t DBINFO_SCANREQ->\n\n\t\t\t\t\t\t\t     <-- DBINFO_SCANCONF\n\n  \t\t\t\t     \t     <-- DBINFO_SCANCONF\n\t     \t     <-- DBINFO_SCANCONF\nDBINFO_SCANCONF\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Search Path for TransporterFacade\nDESCRIPTION: Sets compile definitions for TransporterFacade.cpp to define the NDB TLS search path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbapi/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET_PROPERTY(SOURCE TransporterFacade.cpp\n             PROPERTY COMPILE_DEFINITIONS\n             NDB_TLS_SEARCH_PATH=\"${WITH_NDB_TLS_SEARCH_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Testing Overlong Representation of NUL Character\nDESCRIPTION: This section tests overlong representations of the ASCII NUL character. These should be rejected and not treated as the NUL character.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n\"À\"\n\"à\"\n\"ð\"\n\"ø\"\n\"ü\"\n```\n\n----------------------------------------\n\nTITLE: Defining InnoDB Dedicated Server Test Requirements in MySQL Server Testing\nDESCRIPTION: Describes requirements for running the innodb_dedicated-server test, specifying that it must be executed on a machine with a single mysqld instance. The test is incompatible with parallel test execution using MTR or environments with multiple mysqld instances.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/suite/special/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This suite contains tests that require special hardware configuration.\n# Please run it only on machines that satisfy conditions specified in test.\n################################################################################\n* innodb_dedicated-server - This has to be run on a machine that has only one mysqld.\n  This test suite can't run with MTR --parallel > 1 or if there are other mysqld instances on machine.\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Warning Suppression\nDESCRIPTION: Disables specific compiler warnings for GNU compilers in RelWithDebInfo build type to prevent format-truncation errors.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/testclients/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(MY_COMPILER_IS_GNU AND CMAKE_BUILD_TYPE_UPPER STREQUAL \"RELWITHDEBINFO\")\n  ADD_COMPILE_FLAGS(mysql_client_test.cc\n    COMPILE_FLAGS \"-Wno-error=format-truncation\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment with CMake\nDESCRIPTION: Sets up the environment for all defined tests, applying the TESTS_ENVIRONMENT property to each test. This ensures consistent test execution across different platforms.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  get_directory_property(tests TESTS)\n  message(\"TESTS_ENVIRONMENT:${TESTS_ENVIRONMENT}\")\n  if(TESTS_ENVIRONMENT)\n    foreach(test IN LISTS tests)\n      set_tests_properties(${test} PROPERTIES ENVIRONMENT \"${TESTS_ENVIRONMENT}\")\n    endforeach()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Prime Numbers\nDESCRIPTION: A sequence of prime numbers from 2 to 29 listed vertically. Each line contains a single prime number.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/numbers.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2\n3\n5\n7\n11\n13\n17\n23\n29\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory to MySQL Server Project\nDESCRIPTION: CMake instruction to include the src subdirectory in the project build process. This directive tells CMake to process the CMakeLists.txt file located in the src directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/rest_signal/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: Defining Broken JavaC Files in CMake\nDESCRIPTION: Sets a variable containing patterns for Java files that may cause issues with certain JavaC compilers. This is used to handle potential compilation problems.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-core/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET ( BROKEN_JAVAC\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/*.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/metadata/*.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/query/*.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/spi/*.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/store/*.java\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/core/util/*.java)\n```\n\n----------------------------------------\n\nTITLE: Defining NDB Cluster Tool Manual Pages in CMake\nDESCRIPTION: Defines a list of MySQL NDB Cluster tool man pages (MAN1_NDB) to be installed when NDB support is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(MAN1_NDB\n  ndb_blob_tool.1\n  ndb_config.1\n  ndb_cpcd.1\n  ndb_delete_all.1\n  ndb_desc.1\n  ndb_drop_index.1\n  ndb_drop_table.1\n  ndb_error_reporter.1\n  ndb_import.1\n  ndb_index_stat.1\n  ndb_mgm.1\n  ndb_move_data.1\n  ndb_perror.1\n  ndb_print_backup_file.1\n  ndb_print_file.1\n  ndb_print_frag_file.1\n  ndb_print_schema_file.1\n  ndb_print_sys_file.1\n  ndb_redo_log_reader.1\n  ndb_restore.1\n  ndb_secretsfile_reader.1\n  ndb_select_all.1\n  ndb_select_count.1\n  ndb_show_tables.1\n  ndb_sign_keys.1\n  ndb_size.pl.1\n  ndb_top.1\n  ndb_waiter.1\n  ndbinfo_select_all.1\n  ndbxfrm.1\n)\n```\n\n----------------------------------------\n\nTITLE: Setting ClusterJ Tie Java Source Files Path in CMake\nDESCRIPTION: Defines the base directory path for the ClusterJ Tie Java source files. This path variable is used as a prefix for all the Java source files to be compiled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-tie/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLUSTERJ_TIE_PREFIX\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj/tie)\n```\n\n----------------------------------------\n\nTITLE: MySQL Operation Copy Tuple Requirements\nDESCRIPTION: Specification of when copy tuples are required for different operation types.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbtup/Notes.txt#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nOperation      Copy tuple\n---------      ----------\nfirst/INSERT    no\ndelete/INSERT   yes (this is in effect an update)\nUPDATE          yes\nDELETE          no\n```\n\n----------------------------------------\n\nTITLE: Box Drawing Characters in UTF-8\nDESCRIPTION: Demonstration of box drawing and alignment characters in UTF-8, showing various border styles and patterns.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/UTF-8-demo.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐\n  ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥\n  ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘\n```\n\n----------------------------------------\n\nTITLE: Optimizing SQL Parser Functions in MSVC\nDESCRIPTION: Forces optimization of MYSQLparse function in MSVC compiler with the /d2OptimizeHugeFunctions flag for sql_yacc.cc.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Force optimization of (large) MYSQLparse function in MSVC\nIF(WIN32 AND NOT WIN32_CLANG)\n  ADD_COMPILE_FLAGS(\n    ${CMAKE_CURRENT_BINARY_DIR}/sql_yacc.cc\n    COMPILE_FLAGS \"/d2OptimizeHugeFunctions\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Type Traits Test in CMake\nDESCRIPTION: Sets up the test target for the Abseil type_traits library. It specifies the test source file, compilation options, and dependencies including Google Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/meta/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    type_traits_test\n  SRCS\n    \"type_traits_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::config\n    absl::time\n    absl::core_headers\n    absl::type_traits\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: String Padding Function for Unicode Characters\nDESCRIPTION: Function to pad strings with Unicode characters according to specific character sets. Primarily used for space padding operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CHARSET_INFO.txt#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nfill()     // writes Unicode value into string with given length\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Library Target\nDESCRIPTION: CMake configuration for the optional library providing nullable object wrapper functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/types/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    optional\n  HDRS\n    \"optional.h\"\n  SRCS\n    \"internal/optional.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bad_optional_access\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::memory\n    absl::type_traits\n    absl::utility\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Crund Source Files\nDESCRIPTION: Defines the list of Java source files that comprise the Crund testing framework, including JDBC, NDBJTIE, and Cluster/J implementations\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/crund/java/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(JAVA_CRUND_SOURCES\n    ${JCRUND_SRC}/ClusterjAB.java\n    ${JCRUND_SRC}/ClusterjS.java\n    ${JCRUND_SRC}/CrundDriver.java\n    ${JCRUND_SRC}/CrundLoad.java\n    ${JCRUND_SRC}/CrundSLoad.java\n    ${JCRUND_SRC}/Driver.java\n    ${JCRUND_SRC}/IA.java\n    ${JCRUND_SRC}/IB.java\n    ${JCRUND_SRC}/JdbcAB.java\n    ${JCRUND_SRC}/JdbcS.java\n    ${JCRUND_SRC}/Load.java\n    ${JCRUND_SRC}/NdbjtieAB.java\n    ${JCRUND_SRC}/NdbjtieS.java\n    ${JCRUND_SRC}/ResultProcessor.java\n    ${JCRUND_SRC}/JdbcDriverTest.java\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for FIDO2 Executables in CMake\nDESCRIPTION: This snippet links the `fido2-cred`, `fido2-assert`, and `fido2-token` executables against the required cryptographic libraries (`${CRYPTO_LIBRARIES}`) and a FIDO2 specific library (`${_FIDO2_LIBRARY}`).  This ensures that the executables can use the functionality provided by these libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/tools/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(fido2-cred ${CRYPTO_LIBRARIES} ${_FIDO2_LIBRARY})\ntarget_link_libraries(fido2-assert ${CRYPTO_LIBRARIES} ${_FIDO2_LIBRARY})\ntarget_link_libraries(fido2-token ${CRYPTO_LIBRARIES} ${_FIDO2_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Generating pkg-config Files for TCMalloc and Profiler Libraries\nDESCRIPTION: This snippet generates pkg-config files for different variants of TCMalloc (standard, debug, minimal, minimal debug) and the profiler library. It uses a template file 'cmake/pkgconfig.pc' and configures it with different library names.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nset(NAME tcmalloc)\nconfigure_file(cmake/pkgconfig.pc libtcmalloc.pc @ONLY)\nset(NAME tcmalloc_debug)\nconfigure_file(cmake/pkgconfig.pc libtcmalloc_debug.pc @ONLY)\nset(NAME tcmalloc_minimal)\nconfigure_file(cmake/pkgconfig.pc libtcmalloc_minimal.pc @ONLY)\nset(NAME tcmalloc_minimal_debug)\nconfigure_file(cmake/pkgconfig.pc libtcmalloc_minimal_debug.pc @ONLY)\nset(NAME profiler)\nconfigure_file(cmake/pkgconfig.pc libprofiler.pc @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining system restart test command\nDESCRIPTION: Sets up a 'testSystemRestart' command to simulate a restart scenario 'SR_DD_2' for table 'D1' with a maximum time of 900 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_2 D1\nmax-time: 900\n```\n\n----------------------------------------\n\nTITLE: Defining Copyright and License Terms for MySQL Server\nDESCRIPTION: This snippet outlines the copyright notice, license terms, and additional permissions for MySQL Server. It specifies the use of GNU General Public License version 2.0 and allows linking with separately licensed software.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/ERROR_codes.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# Copyright (c) 2003, 2025, Oracle and/or its affiliates.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is designed to work with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have either included with\n# the program or referenced in the documentation.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n```\n\n----------------------------------------\n\nTITLE: Adding JTIE Unload Test in CMake\nDESCRIPTION: Configures and adds the JTIE unload test using ADD_TEST command, specifying Java executable, classpath, library path, and various Java system properties for the test execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/unload/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST(\n  NAME test_jtie_unload\n  COMMAND\n  ${Java_JAVA_EXECUTABLE_PATH} \"-ea\" \"-Xcheck:jni\"\n  \"-classpath\" \"${JTIE_TEST_UNLOAD_JAR}${JAVA_SEPARATOR}${JTIE_MYJAPI_JAR}\"\n  \"-Djava.library.path=${JTIE_MYJAPI_DIR}/${JAVA_SUBDIR}\"\n  \"-Dcom.mysql.jtie.test.MyLoadUnloadTest.target_package_prefixes=test.,myjapi.\"\n  \"-Dcom.mysql.jtie.test.MyLoadUnloadTest.target_class_name=test.MyJapiTest\"\n  \"-Dcom.mysql.jtie.test.MyLoadUnloadTest.target_method_name=test\"\n  \"test.MyLoadUnloadTest\"\n)\nSET_TESTS_PROPERTIES(test_jtie_unload PROPERTIES LABELS \"NDB\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Event API Tests for MySQL NDB Cluster\nDESCRIPTION: Test configurations for event handling and notification in NDB Cluster. The tests verify empty updates, backward compatibility for polling, and event queue clearing under various conditions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_20\n\nLANGUAGE: plain\nCODE:\n```\nmax-time: 1200\ncmd: test_event\nargs: -n EmptyUpdates T1\n\nmax-time: 1200\ncmd: test_event\nargs: -n BackwardCompatiblePollNoWait T1\n\nmax-time: 1200\ncmd: test_event\nargs: -n BackwardCompatiblePollLongWait T1\n\nmax-time: 1200\ncmd: test_event\nargs: -n BackwardCompatiblePollInconsistency T1\n\n#max-time: 1000\n#cmd: test_event\n#args: -n Apiv2HQE-latestGCI T1\n#\n#max-time: 1200\n#cmd: test_event\n#args: -n Apiv2-check_event_queue_cleared T1\n#\nmax-time: 1200\ncmd: test_event\nargs: -n Apiv2-check_event_queue_cleared_initial T1\n\nmax-time: 300\ncmd: testSystemRestart\nargs: -n OneNodeWithCleanFilesystem T1\n\ncmd: test_event\nargs: -n SubscribeNR T1\nmax-time: 1200\n```\n\n----------------------------------------\n\nTITLE: Fuzz Testing for Base64\nDESCRIPTION: This snippet sets up fuzz testing for Base64 functionalities, establishing execution output directories and linking necessary modules for the test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(routertest_fuzz_http_base64\n    fuzz_base64.cc\n    COMPONENT Router\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    SKIP_INSTALL\n    )\n```\n\nLANGUAGE: cmake\nCODE:\n```\nLIBFUZZER_ADD_TEST(routertest_fuzz_http_base64\n    INITIAL_CORPUS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/corpus_base64)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Router Component\nDESCRIPTION: Conditionally adds the MySQL Router component if building with server and the router option is enabled. When disabled, it cleans up any existing router executables to prevent stale binaries from being used.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\n# depends on mysql_version.h to exist\nIF(NOT WITHOUT_SERVER AND WITH_ROUTER)\n  ADD_SUBDIRECTORY(router)\nELSE()\n  # Define harness_net_ts target and public include directories.\n  ADD_SUBDIRECTORY(router/src/harness/include)\n  # In case we switch from ON to OFF, we do not want mtr\n  # to pick up any obsolete executables.\n  IF(WIN32)\n    SET(MYSQLROUTER_EXE \"mysqlrouter.exe\")\n  ELSE()\n    SET(MYSQLROUTER_EXE \"mysqlrouter\")\n  ENDIF()\n  SET(EXE_DIR ${CMAKE_BINARY_DIR}/runtime_output_directory)\n  IF(BUILD_IS_SINGLE_CONFIG)\n    FILE(REMOVE ${EXE_DIR}/${MYSQLROUTER_EXE})\n  ELSE()\n    FILE(REMOVE\n      ${EXE_DIR}/Debug/${MYSQLROUTER_EXE}\n      ${EXE_DIR}/RelWithDebInfo/${MYSQLROUTER_EXE}\n      ${EXE_DIR}/Release/${MYSQLROUTER_EXE}\n      ${EXE_DIR}/MinSizeRel/${MYSQLROUTER_EXE}\n      )\n  ENDIF()\n  # We do not want ctest to pick up obsolete tests.\n  # See similar code for WITH_UNIT_TESTS above.\n  IF(EXISTS \"${CMAKE_BINARY_DIR}/router/CTestTestfile.cmake\")\n    FILE(GLOB_RECURSE CTEST_TESTFILES\n      \"${CMAKE_BINARY_DIR}/router/CTestTestfile.cmake\")\n    FILE(REMOVE ${CTEST_TESTFILES})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting TCMalloc Source Directory\nDESCRIPTION: This snippet defines the source directory for the TCMalloc project. It specifies the location where the TCMalloc source code is located within the MySQL source tree.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TCMALLOC_SOURCE_DIR\n  \\\"${CMAKE_SOURCE_DIR}/extra/gperftools/gperftools-2.15\\\"\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Log Flags Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log flags functionality. It specifies the source file and dependencies needed to test command-line flag integration with the logging system.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_flags_test\n  SRCS\n    \"flags_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_flags\n    absl::log_globals\n    absl::log_internal_flags\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_severity\n    absl::flags\n    absl::flags_reflection\n    absl::scoped_mock_log\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for execinfo.h\nDESCRIPTION: This snippet checks for the existence of the `execinfo.h` header file using the `CHECK_INCLUDE_FILE` macro.  The result is stored in the `HAS_EXECINFO` variable, which can be used later to conditionally compile code that depends on this header.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nCHECK_INCLUDE_FILE(\"execinfo.h\" HAS_EXECINFO)\n```\n\n----------------------------------------\n\nTITLE: Adding Imported TCMalloc Debug Library\nDESCRIPTION: This snippet adds an imported shared library target for the TCMalloc debug library. It specifies the language (C) and the location of the library file. This allows CMake to properly link against TCMalloc's debug version.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_LIBRARY(my_tcmalloc_debug SHARED IMPORTED GLOBAL)\nSET_TARGET_PROPERTIES(my_tcmalloc_debug PROPERTIES\n  IMPORTED_LINK_INTERFACE_LANGUAGES \\\"C\\\"\n  IMPORTED_LOCATION \\\"${CMAKE_BINARY_DIR}/lib/libtcmalloc_debug.so\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending Fuzzing Source Files\nDESCRIPTION: Conditionally appends source files related to fuzzing to the FIDO_SOURCES variable. This allows for including fuzzing-specific code during testing and development when the FUZZ flag is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(FUZZ)\n\tlist(APPEND FIDO_SOURCES ../fuzz/clock.c)\n\tlist(APPEND FIDO_SOURCES ../fuzz/pcsc.c)\n\tlist(APPEND FIDO_SOURCES ../fuzz/prng.c)\n\tlist(APPEND FIDO_SOURCES ../fuzz/udev.c)\n\tlist(APPEND FIDO_SOURCES ../fuzz/uniform_random.c)\n\tlist(APPEND FIDO_SOURCES ../fuzz/wrap.c)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Data Structure in ndb_logevent.h\nDESCRIPTION: Defines the data structure for the EventBufferUsage event with usage and avail fields to store event-specific information.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n/** Log event specific data for for corresponding NDB_LE_ log event */\nstruct {\n  unsigned usage;\n  unsigned avail;\n} EventBufferUsage;\n```\n\n----------------------------------------\n\nTITLE: Testing String Error Functionality\nDESCRIPTION: This snippet defines a C++ test for the string error library using `absl_cc_test`. It includes the source file, compiler options, and dependencies on the Abseil string error library, strings, and Google Mock/Test.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    strerror_test\n  SRCS\n    \\\"internal/strerror_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::strerror\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Compiler Warnings in CMake\nDESCRIPTION: Disables specific types of compiler warnings if the compiler supports the warning flags. Iterates through a list of warning types and appends the appropriate compiler flags to CMAKE_CXX_FLAGS and CMAKE_C_FLAGS.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/ndbapi-examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(warning\n    \"unused-but-set-variable\"\n    \"strict-aliasing\"\n    \"unused-parameter\"\n    \"maybe-uninitialized\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n    STRING_APPEND(CMAKE_C_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: blocking_counter_test\nDESCRIPTION: This snippet defines an Abseil C++ test for the blocking counter synchronization primitive, named `blocking_counter_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and depends on `absl::synchronization`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    blocking_counter_test\n  SRCS\n    \\\"blocking_counter_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data Table with Special Characters and Numeric Values\nDESCRIPTION: A data table containing 10 rows of test data with special characters in the leftmost columns, followed by alphanumeric codes and various numeric values. Each row maintains the same structure but with different values, possibly representing test fixtures for MySQL.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/myisam_tb1.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n!\\t!\\t!\\ta`0\\ta`0\\t0`\\t0`\\ta`0\\ta`0\\t0`\\t0`\\t!\\t20\\t96\\t13\\t158\\t11496\\t12640\\t26882\\t22184\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t1\\t1\\t1\\t-5\\t-5\\t1\\t1\\t1\\t1\\t1\\t1\\t-5\\t0.0\\t1\\t0.0\\t1\\t0.0\\t1\\t0.0\\t-5\\t1\\t1\\t1\\t-5\\t-5\n@\\t@\\t@\\taa0\\taa0\\t1aa\\t1aa\\taa0\\taa0\\t1aa\\t1aa\\t@\\t68\\t67\\t107\\t152\\t1647\\t41491\\t10631\\t40729\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t2\\t2\\t2\\t-4\\t-4\\t2\\t2\\t2\\t2\\t2\\t2\\t-4\\t1.1\\t2\\t1.1\\t2\\t1.1\\t2\\t1.1\\t-4\\t2\\t2\\t2\\t-4\\t-4\n#\\t#\\t#\\tab0\\tab0\\t2baa\\t2baa\\tab0\\tab0\\t2baa\\t2baa\\t#\\t0\\t54\\t39\\t182\\t28122\\t30607\\t623\\t40601\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t3\\t3\\t3\\t-3\\t-3\\t3\\t3\\t3\\t3\\t3\\t3\\t-3\\t2.2\\t3\\t2.2\\t3\\t2.2\\t3\\t2.2\\t-3\\t3\\t3\\t3\\t-3\\t-3\n$\\t$\\t$\\tac0\\tac0\\t3caaa\\t3caaa\\tac0\\tac0\\t3caaa\\t3caaa\\t$\\t40\\t53\\t33\\t204\\t8927\\t17582\\t6931\\t6231\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t4\\t4\\t4\\t-2\\t-2\\t4\\t4\\t4\\t4\\t4\\t4\\t-2\\t3.3\\t4\\t3.3\\t4\\t3.3\\t4\\t3.3\\t-2\\t4\\t4\\t4\\t-2\\t-2\n%\\t%\\t%\\tad0\\tad0\\t4daaaa\\t4daaaa\\tad0\\tad0\\t4daaaa\\t4daaaa\\t%\\t27\\t126\\t101\\t76\\t8412\\t64647\\t24531\\t7195\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t5\\t5\\t5\\t-1\\t-1\\t5\\t5\\t5\\t5\\t5\\t5\\t-1\\t4.4\\t5\\t4.4\\t5\\t4.4\\t5\\t4.4\\t-1\\t5\\t5\\t5\\t-1\\t-1\n^\\t^\\t^\\tae0\\tae0\\t5eaaaaa\\t5eaaaaa\\tae0\\tae0\\t5eaaaaa\\t5eaaaaa\\t^\\t48\\t168\\t35\\t166\\t25531\\t41269\\t21741\\t46926\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t6\\t6\\t6\\t0\\t0\\t6\\t6\\t6\\t6\\t6\\t6\\t0\\t5.5\\t6\\t5.5\\t6\\t5.5\\t6\\t5.5\\t0\\t6\\t6\\t6\\t0\\t0\n&\\t&\\t&\\taf0\\taf0\\t6faaaaaa\\t6faaaaaa\\taf0\\taf0\\t6faaaaaa\\t6faaaaaa\\t&\\t31\\t148\\t93\\t146\\t8540\\t31876\\t22500\\t8553\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t7\\t7\\t7\\t1\\t1\\t7\\t7\\t7\\t7\\t7\\t7\\t1\\t6.6\\t7\\t6.6\\t7\\t6.6\\t7\\t6.6\\t1\\t7\\t7\\t7\\t1\\t1\n*\\t*\\t*\\tag0\\tag0\\t7gaaaaaaa\\t7gaaaaaaa\\tag0\\tag0\\t7gaaaaaaa\\t7gaaaaaaa\\t*\\t95\\t51\\t63\\t48\\t5445\\t40770\\t2704\\t28590\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t8\\t8\\t8\\t2\\t2\\t8\\t8\\t8\\t8\\t8\\t8\\t2\\t7.7\\t8\\t7.7\\t8\\t7.7\\t8\\t7.7\\t2\\t8\\t8\\t8\\t2\\t2\n(\\t(\\t(\\ta^0\\ta^0\\t8^aaaaaaaa\\t8^aaaaaaaa\\ta^0\\ta^0\\t8^aaaaaaaa\\t8^aaaaaaaa\\t(\\t17\\t203\\t60\\t176\\t2330\\t41952\\t4228\\t46680\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t9\\t9\\t9\\t3\\t3\\t9\\t9\\t9\\t9\\t9\\t9\\t3\\t8.8\\t9\\t8.8\\t9\\t8.8\\t9\\t8.8\\t3\\t9\\t9\\t9\\t3\\t3\n)\\t)\\t)\\ta_0\\ta_0\\t9_aaaaaaaaa\\t9_aaaaaaaaa\\ta_0\\ta_0\\t9_aaaaaaaaa\\t9_aaaaaaaaa\\t)\\t43\\t137\\t116\\t109\\t17630\\t47511\\t18723\\t24472\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t10\\t10\\t10\\t4\\t4\\t10\\t10\\t10\\t10\\t10\\t10\\t4\\t9.9\\t10\\t9.9\\t10\\t9.9\\t10\\t9.9\\t4\\t10\\t10\\t10\\t4\\t4\n```\n\n----------------------------------------\n\nTITLE: Sending Event from ndbd Kernel\nDESCRIPTION: Code for sending the EventBufferUsage event from the ndbd kernel by setting the event type and data fields in a signal and sending it to CMVMI_REF.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/include/mgmapi/ndb_logevent.txt#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nUint32 *data= signal->getDataPtrSend();\ndata[0]= NDB_LE_EventBufferUsage;\ndata[1]= 0;\ndata[2]= 0;\nsendSignal(CMVMI_REF, GSN_EVENT_REP, signal, 3, JBB);\n```\n\n----------------------------------------\n\nTITLE: Adding Change Streams Library Subdirectories to Build\nDESCRIPTION: Includes subdirectories for the library's components, standalone library, and tests in the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libchangestreams/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src/lib)\nADD_SUBDIRECTORY(src/libstandalone)\nADD_SUBDIRECTORY(src/tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for NDB Tests (CMake)\nDESCRIPTION: This line adds the specified directory to the include paths used during compilation.  It ensures that header files located in `${CMAKE_SOURCE_DIR}/storage/ndb/test/include` are accessible to the source files being compiled. `${CMAKE_SOURCE_DIR}` represents the root directory of the CMake project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/storage/ndb/test/include)\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake RPATH options\nDESCRIPTION: This snippet sets CMake options related to RPATH (Runtime Search Path). It disables the build RPATH and conditionally sets the `CMAKE_MACOSX_RPATH` variable if it's not already defined. This controls how the dynamic linker finds shared libraries at runtime.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_SKIP_BUILD_RPATH FALSE)\n\nif (NOT DEFINED CMAKE_MACOSX_RPATH)\n\tset(CMAKE_MACOSX_RPATH 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: System Restart Test Configuration\nDESCRIPTION: Test configurations for system restart scenarios testing various aspects of recovery and restart behavior.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 5000\ncmd: testSystemRestart\nargs: -n SR1 T1\n```\n\n----------------------------------------\n\nTITLE: Installing Charset Directory in CMake\nDESCRIPTION: Installs the charsets directory to MySQL share directory while excluding the languages.html file. Part of the Server component installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/share/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/charsets\n  DESTINATION ${INSTALL_MYSQLSHAREDIR}\n  COMPONENT Server\n  PATTERN \"languages.html\" EXCLUDE\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Non-Systemd Manual Pages in CMake\nDESCRIPTION: Adds manual pages for non-systemd specific scripts (mysql.server, mysqld_multi, mysqld_safe) when systemd integration is not enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/man/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WITH_SYSTEMD)\n  LIST(APPEND MAN1\n    mysql.server.1\n    mysqld_multi.1\n    mysqld_safe.1\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: ChangeHalfRestartChangeHalf\nDESCRIPTION: This command investigates the effects of partial server restarts during change scenarios, termed 'ChangeHalfRestartChangeHalf', to evaluate system resilience.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n ChangeHalfRestartChangeHalf T1\nmax-time: 1200\n\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Message Definition with Optional, Repeated and Default Fields\nDESCRIPTION: This Protocol Buffer message definition contains various field types including optional, repeated, and default fields with primitives (integers, floats, strings), enumerated types, nested messages, and specialized field types. The definition demonstrates proper Protocol Buffer syntax and structure with assigned values for testing or example purposes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/text_format_unittest_data_oneof_implemented.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\noptional_int32: 101\noptional_int64: 102\noptional_uint32: 103\noptional_uint64: 104\noptional_sint32: 105\noptional_sint64: 106\noptional_fixed32: 107\noptional_fixed64: 108\noptional_sfixed32: 109\noptional_sfixed64: 110\noptional_float: 111\noptional_double: 112\noptional_bool: true\noptional_string: \"115\"\noptional_bytes: \"116\"\nOptionalGroup {\n  a: 117\n}\noptional_nested_message {\n  bb: 118\n}\noptional_foreign_message {\n  c: 119\n}\noptional_import_message {\n  d: 120\n}\noptional_nested_enum: BAZ\noptional_foreign_enum: FOREIGN_BAZ\noptional_import_enum: IMPORT_BAZ\noptional_string_piece: \"124\"\noptional_cord: \"125\"\noptional_public_import_message {\n  e: 126\n}\noptional_lazy_message {\n  bb: 127\n}\noptional_unverified_lazy_message {\n  bb: 128\n}\nrepeated_int32: 201\nrepeated_int32: 301\nrepeated_int64: 202\nrepeated_int64: 302\nrepeated_uint32: 203\nrepeated_uint32: 303\nrepeated_uint64: 204\nrepeated_uint64: 304\nrepeated_sint32: 205\nrepeated_sint32: 305\nrepeated_sint64: 206\nrepeated_sint64: 306\nrepeated_fixed32: 207\nrepeated_fixed32: 307\nrepeated_fixed64: 208\nrepeated_fixed64: 308\nrepeated_sfixed32: 209\nrepeated_sfixed32: 309\nrepeated_sfixed64: 210\nrepeated_sfixed64: 310\nrepeated_float: 211\nrepeated_float: 311\nrepeated_double: 212\nrepeated_double: 312\nrepeated_bool: true\nrepeated_bool: false\nrepeated_string: \"215\"\nrepeated_string: \"315\"\nrepeated_bytes: \"216\"\nrepeated_bytes: \"316\"\nRepeatedGroup {\n  a: 217\n}\nRepeatedGroup {\n  a: 317\n}\nrepeated_nested_message {\n  bb: 218\n}\nrepeated_nested_message {\n  bb: 318\n}\nrepeated_foreign_message {\n  c: 219\n}\nrepeated_foreign_message {\n  c: 319\n}\nrepeated_import_message {\n  d: 220\n}\nrepeated_import_message {\n  d: 320\n}\nrepeated_nested_enum: BAR\nrepeated_nested_enum: BAZ\nrepeated_foreign_enum: FOREIGN_BAR\nrepeated_foreign_enum: FOREIGN_BAZ\nrepeated_import_enum: IMPORT_BAR\nrepeated_import_enum: IMPORT_BAZ\nrepeated_string_piece: \"224\"\nrepeated_string_piece: \"324\"\nrepeated_cord: \"225\"\nrepeated_cord: \"325\"\nrepeated_lazy_message {\n  bb: 227\n}\nrepeated_lazy_message {\n  bb: 327\n}\ndefault_int32: 401\ndefault_int64: 402\ndefault_uint32: 403\ndefault_uint64: 404\ndefault_sint32: 405\ndefault_sint64: 406\ndefault_fixed32: 407\ndefault_fixed64: 408\ndefault_sfixed32: 409\ndefault_sfixed64: 410\ndefault_float: 411\ndefault_double: 412\ndefault_bool: false\ndefault_string: \"415\"\ndefault_bytes: \"416\"\ndefault_nested_enum: FOO\ndefault_foreign_enum: FOREIGN_FOO\ndefault_import_enum: IMPORT_FOO\ndefault_string_piece: \"424\"\ndefault_cord: \"425\"\noneof_bytes: \"604\"\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library 'libmyapi' in CMake\nDESCRIPTION: Defines a static library named 'libmyapi' which is compiled from the 'myapi.cpp' source file. This library likely contains a C++ API for MySQL functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myapi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(libmyapi STATIC myapi.cpp)\n```\n\n----------------------------------------\n\nTITLE: HTML DOCTYPE and Structure for UTF-8 Test File\nDESCRIPTION: Basic HTML structure with XHTML 1.0 Transitional DOCTYPE declaration for a UTF-8 test file. The document includes the root html element with xmlns attribute, head section with title, and opening body tag.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_durst.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head><title>UTF-8 test file</title></head>\n    <body>\n    <p>Original by Markus Kuhn, adapted for HTML by Martin D&uuml;rst.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Compiler Flags\nDESCRIPTION: Sets platform-specific compiler flags for Unix and Apple systems, including visibility settings and warning controls.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/curl/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(UNIX)\n  STRING_APPEND(CMAKE_C_FLAGS   \" -fvisibility=hidden\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -fvisibility=hidden\")\nENDIF()\n\nMY_CHECK_CXX_COMPILER_WARNING(\"format-overflow\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_C_FLAGS   \" ${HAS_WARN_FLAG}\")\nENDIF()\n\nIF(APPLE)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-deprecated-declarations\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files to COMPAT_SOURCES List\nDESCRIPTION: Appends a list of C source files to the COMPAT_SOURCES variable. These source files provide compatibility functions for different operating systems, particularly those lacking certain standard functions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"list(APPEND COMPAT_SOURCES\n\t../openbsd-compat/bsd-asprintf.c\n\t../openbsd-compat/bsd-getpagesize.c\n\t../openbsd-compat/clock_gettime.c\n\t../openbsd-compat/endian_win32.c\n\t../openbsd-compat/explicit_bzero.c\n\t../openbsd-compat/explicit_bzero_win32.c\n\t../openbsd-compat/freezero.c\n\t../openbsd-compat/recallocarray.c\n\t../openbsd-compat/strlcat.c\n\t../openbsd-compat/timingsafe_bcmp.c\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Language and Error Message Definitions for MySQL Server\nDESCRIPTION: This snippet sets up the language encoding for error messages and defines two basic error messages 'NO' and 'YES' with their corresponding error codes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nlanguages english=eng latin1;\n\nstart-error-number 1000\n\nER_NO\n\teng \"NO\"\n\nER_YES\n\teng \"YES\"\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testBasicAsynch\nargs: -n PkDeleteAsynch\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Resource Group Implementation in MySQL\nDESCRIPTION: Adds platform-specific source files for resource group implementation based on the target operating system (Linux, Apple, FreeBSD, Solaris, Windows).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LINUX)\n  LIST(APPEND SQL_SHARED_SOURCES\n    resourcegroups/platform/thread_attrs_api_linux.cc)\nELSEIF(APPLE)\n  LIST(APPEND SQL_SHARED_SOURCES\n    resourcegroups/platform/thread_attrs_api_apple.cc)\nELSEIF(FREEBSD)\n  LIST(APPEND SQL_SHARED_SOURCES\n    resourcegroups/platform/thread_attrs_api_freebsd.cc)\nELSEIF(SOLARIS)\n  LIST(APPEND SQL_SHARED_SOURCES\n    resourcegroups/platform/thread_attrs_api_solaris.cc)\nELSEIF(WIN32)\n  LIST(APPEND SQL_SHARED_SOURCES\n    resourcegroups/platform/thread_attrs_api_win.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring WiX Setup for MySQL Router MSI Package\nDESCRIPTION: Initial WiX setup and path configuration for MySQL Router installer build process. Includes license file handling and WiX configuration settings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/router/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(${CMAKE_SOURCE_DIR}/packaging/WiX/wix_setup.cmake)\n\nIF(NOT WIX_DIR)\n  RETURN()\nENDIF()\n\nSET(CPACK_WIX_CONFIG ${CMAKE_CURRENT_SOURCE_DIR}/CPackWixConfig.cmake)\nSET(CPACK_MSI_SETUP ${CMAKE_SOURCE_DIR}/packaging/WiX/cpack_msi_setup.cmake)\n\nSET(LICENSE_FILE \"${CMAKE_SOURCE_DIR}/router/LICENSE.router\")\nCREATE_WIX_LICENCE_AND_RTF(${LICENSE_FILE})\n\nSET(CPACK_WIX_INCLUDE \"${CMAKE_CURRENT_BINARY_DIR}/mysql_router_extra.wxs;\n${CMAKE_CURRENT_SOURCE_DIR}/custom_ui.wxs;\n${CMAKE_BINARY_DIR}/packaging/WiX/redist_check.wxs\")\n```\n\n----------------------------------------\n\nTITLE: Editline Library Check\nDESCRIPTION: This snippet checks for the system editline library and issues a fatal error if it's missing when -DWITH_EDITLINE=system is specified.  It suggests using -DWITH_EDITLINE=bundled instead.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\n\"# Add system/bundled editline.\nMYSQL_CHECK_EDITLINE()\nSET(EDITLINE_WARN_GIVEN)\nWARN_MISSING_SYSTEM_EDITLINE(EDITLINE_WARN_GIVEN)\nIF(EDITLINE_WARN_GIVEN)\n  MESSAGE(FATAL_ERROR\n    \\\"-DWITH_EDITLINE=system, but missing system libraries.\\\\n\\\"\n    \\\"You can use -DWITH_EDITLINE=bundled instead.\\\\n\\\"\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: testScanPerf Read Committed With Reset Bounds\nDESCRIPTION: Benchmark command for testing scan performance in read committed mode with reset bounds. Uses 100,000 scans with queue option enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/docs/wl2077.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntestScanPerf -s 100000 -c 0 -d 0 -a 1 -l 0 -r 2 -q 1 T1\n```\n\n----------------------------------------\n\nTITLE: Configuring bind_front Library in CMake\nDESCRIPTION: Defines the bind_front library target with its source files, headers, compilation options, and dependencies. This library is part of the Abseil C++ project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    bind_front\n  SRCS\n    \"internal/front_binder.h\"\n  HDRS\n    \"bind_front.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::base_internal\n    absl::compressed_tuple\n  PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies via pip\nDESCRIPTION: Installs the necessary Python dependencies for using libcno in Python applications. This includes cffi for ffi interface and the libcno from a Git repository. Requires Python 3 and pip installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcno/libcno-208939f540957a35b337dacdd5c5e34d51821bd2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install cffi\npip3 install git+https://github.com/pyos/libcno\n```\n\n----------------------------------------\n\nTITLE: Event Dropping Sequence Diagram\nDESCRIPTION: Illustrates the sequence for dropping an event, including reading from system table, removing subscriptions, and deleting from system table.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/Event.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUSER                      DICT(Master)     (Slaves)         UTIL         SUMA\n================================================================================\nDROP_EVENT_REQ\n-------------------------->\\n\\t\\t\\t  - read from system table\n                          UTIL_PREPARE::read\n                          ------------------------------------>\\n                          <------------------------------------\n                          UTIL_EXECUTE        \n                          ------------------------------------>\\n                          <------------------------------------\n                          SUB_REMOVE_REQ\n                          -------------------->\\n                                               SUB_REMOVE\n                                               ------------------------------>\\n                                               <------------------------------\n                          SUB_REMOVE_CONF\n                          <--------------------\n\\t\\t\\t  - remove from system table\n                          UTIL_PREPARE::delete\n                          ------------------------------------>\\n                          <------------------------------------\n                          UTIL_EXECUTE        \n                          ------------------------------------>\\n                          <------------------------------------\nDROP_EVENT_CONF\n<--------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug56829\nDESCRIPTION: This snippet is related to the 'Bug56829', aiming to validate the expected performance under specific indexing scenarios, detailing parameters for execution limits.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ncmd: testIndex\nargs: -n Bug56829 T1\nmax-time: 280\n```\n\n----------------------------------------\n\nTITLE: Including System Directories in CMake\nDESCRIPTION: This snippet includes system directories, specifically GMock directories, into the CMake configuration. This ensures that the necessary headers are available for the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/containers/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM\n  ${GMOCK_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Internal Test Utility Library\nDESCRIPTION: CMake configuration for an internal test utility library with time-related dependencies\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/time/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    time_internal_test_util\n  HDRS\n    \"internal/test_util.h\"\n  SRCS\n    \"internal/test_util.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::time\n    absl::config\n    absl::raw_logging_internal\n    absl::time_zone\n  TESTONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Flags for conf_to_src\nDESCRIPTION: This snippet conditionally adds compiler flags to `conf_to_src.cc` based on whether the `-Wmissing-profile` warning is enabled. This is consistent with the handling of `uca9-dump.cc` and ensures consistent compiler behavior across the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAS_MISSING_PROFILE)\n  ADD_COMPILE_FLAGS(conf_to_src.cc COMPILE_FLAGS ${HAS_MISSING_PROFILE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags for Clang (CMake)\nDESCRIPTION: This snippet conditionally adds a compilation flag for Clang compilers. Specifically, it disables the `-Wno-conditional-uninitialized` warning for the XCOM source files if the compiler is Clang. This is likely done to suppress false positives or known issues with Clang's analysis of conditional initialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/group_replication/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(MY_COMPILER_IS_CLANG)\n  ADD_COMPILE_FLAGS(${XCOM_SOURCES}\n    COMPILE_FLAGS\n    \"-Wno-conditional-uninitialized\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Generated Tags\nDESCRIPTION: This snippet creates a custom target that depends on the output of the Protocol Buffers compilation, ensuring the tags are generated correctly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nMY_ADD_CUSTOM_TARGET(xprotocol_tags\n  DEPENDS\n  xprotocol_plugin\n  \"${MYSQLX_GENERATE_DIR}/xprotocol_tags.h\"\n  \"${MYSQLX_GENERATE_DIR}/encoding_descriptors.h\"\n  SOURCES\n  \"${MYSQLX_GENERATE_DIR}/xprotocol_tags.h\"\n  \"${MYSQLX_GENERATE_DIR}/encoding_descriptors.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending LIBRT to BASE_LIBRARIES\nDESCRIPTION: Appends the LIBRT library to the BASE_LIBRARIES list. LIBRT is a library that provides real-time extensions, often necessary for time-related functions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/src/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n\"list(APPEND BASE_LIBRARIES ${LIBRT})\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Clang in MySQL Router Tests\nDESCRIPTION: Adds a specific compiler flag to suppress deprecation warnings when using Clang compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MY_COMPILER_IS_CLANG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-deprecated\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: MySQL Node Restart Test Configuration\nDESCRIPTION: Test configuration for node restart scenarios with various arguments and extended time limits\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--06-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testNodeRestart\nargs: -n GCPStopFalsePositive T1\nmax-time: 900\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection Control Plugin in CMake\nDESCRIPTION: This CMake snippet defines the configuration for building the MySQL connection control plugin. It specifies the source files, sets it as a module-only plugin, and links required libraries including RapidJSON and MySys.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/connection_control/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_PLUGIN(connection_control\n  connection_control_coordinator.cc\n  connection_control.cc\n  security_context_wrapper.cc\n  connection_delay.cc\n  option_usage.cc\n  MODULE_ONLY\n  LINK_LIBRARIES\n    extra::rapidjson\n    library_mysys\n  )\n```\n\n----------------------------------------\n\nTITLE: Signal Flow for Releasing DICT Lock after Node Start\nDESCRIPTION: This snippet demonstrates the signal flow for releasing the DICT lock after the node has started. It includes NODE_START_REP and DICT_UNLOCK_ORD signals.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/DictLock.txt#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCNTR/s\n    NODE_START_REP\n        DIH/s\n            DICT_UNLOCK_ORD\n                DICT/m\n```\n\n----------------------------------------\n\nTITLE: Configuring Spinlock Test in CMake for Abseil\nDESCRIPTION: Sets up the 'spinlock_test' target with its source files, dependencies, and compilation options. This test target is used to verify the functionality of the spinlock implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/base/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    spinlock_test\n  SRCS\n    \"spinlock_test_common.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::base\n    absl::base_internal\n    absl::config\n    absl::core_headers\n    absl::synchronization\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Command: Dictionary Tests\nDESCRIPTION: Test configuration for dictionary-related tests with various arguments and scenarios\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--13-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n CreateInvalidTables T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Documentation of Contributors - Patches and Roles\nDESCRIPTION: This section lists various contributors to the Protocol Buffers project, detailing their contributions, roles, and patch submissions that enhance the functionality and performance of the Protocol Buffers framework. Dependencies include the Protocol Buffers codebase and its associated documentation policies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/CONTRIBUTORS.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProject: /mysql/mysql-server\nContent:\nThis file contains a list of people who have made large contributions\nto the public version of Protocol Buffers.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nOriginal Protocol Buffers design and implementation:\n  Sanjay Ghemawat <sanjay@google.com>\n  Jeff Dean <jeff@google.com>\n  Daniel Dulitz <daniel@google.com>\n  Craig Silverstein\n  Paul Haahr <haahr@google.com>\n  Corey Anderson <corin@google.com>\n  (and many others)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPatch contributors:\n  Kevin Ko <kevin.s.ko@gmail.com>\n    * Small patch to handle trailing slashes in --proto_path flag.\n  Johan Euphrosine <proppy@aminche.com>\n    * Small patch to fix Python CallMethod().\n  Ulrich Kunitz <kune@deine-taler.de>\n    * Small optimizations to Python serialization.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nEvan Jones <evanj@mit.edu>\n    * Optimize Java serialization code when writing a small message to a stream.\n    * Optimize Java serialization of strings so that UTF-8 encoding happens only once per string per serialization call.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Libraries\nDESCRIPTION: This snippet configures custom libraries if WITH_CUSTOM_LIBRARIES is defined. It uses FILE(GLOB) to search for custom library directories (SSL, Kerberos, SASL, LDAP, CURL) within the specified WITH_CUSTOM_LIBRARIES path. If a directory is found, it sets the corresponding WITH_* variable as an internal cache variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(WITH_CUSTOM_LIBRARIES)\n  FILE(GLOB WITH_SSL      \\\"${WITH_CUSTOM_LIBRARIES}/openssl*\\\")\n  FILE(GLOB WITH_KERBEROS \\\"${WITH_CUSTOM_LIBRARIES}/krb5*\\\")\n  FILE(GLOB WITH_SASL     \\\"${WITH_CUSTOM_LIBRARIES}/cyrus-sasl*\\\")\n  FILE(GLOB WITH_LDAP     \\\"${WITH_CUSTOM_LIBRARIES}/openldap*\\\")\n  FILE(GLOB WITH_CURL     \\\"${WITH_CUSTOM_LIBRARIES}/curl*\\\")\n  FOREACH(WITH_OPT WITH_SSL WITH_KERBEROS WITH_SASL WITH_LDAP WITH_CURL)\n    IF(IS_DIRECTORY ${${WITH_OPT}})\n      SET(${WITH_OPT} ${${WITH_OPT}} CACHE INTERNAL \\\"\\\" FORCE)\n      MESSAGE(STATUS \\\"${WITH_OPT} ${${WITH_OPT}}\\\")\n    ELSE()\n      # WITH_CURL may be set to \\\"none\\\" in the cache, unset normal variable.\n      UNSET(${WITH_OPT})\n      MESSAGE(WARNING \\\"${WITH_OPT} not found\\\") # This should be FATAL_ERROR\n    ENDIF()\n  ENDFOREACH()\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Config Files Test in CMake\nDESCRIPTION: Configures a test file for configuration file handling with additional source files and sets special compile definitions for static linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nADD_HARNESS_TEST_FILE(test_config_files.cc\n  MODULE ${TEST_MODULE}\n  LIB_DEPENDS\n    test-helpers\n  EXTRA_SOURCES\n    ../src/config_files.cc\n  INCLUDE_DIRS\n    $<TARGET_PROPERTY:router_lib,INCLUDE_DIRECTORIES>\n    ../src/\n  SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS})\nSET_TARGET_PROPERTIES(\n  routertest_${TEST_MODULE}_config_files\n  PROPERTIES\n  COMPILE_DEFINITIONS ROUTER_LIB_STATIC_DEFINE=1)\n```\n\n----------------------------------------\n\nTITLE: Testing Maximum Overlong UTF-8 Sequences\nDESCRIPTION: This section tests the maximum overlong sequences for different byte lengths. These should be rejected as malformed UTF-8 sequences.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n\"Á¿\"\n\"à¿\"\n\"ð¿¿\"\n\"ø¿¿¿\"\n\"ü¿¿¿¿\"\n```\n\n----------------------------------------\n\nTITLE: Testing Dictionary Operations in MySQL Server\nDESCRIPTION: This snippet tests various dictionary operations in MySQL, validating schema management and concurrency handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testDict\nargs: -n DropTableConcurrentLCP T1\nmax-time: 1260\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testDict\nargs: -n Bug46585 T1 I3 D1\nmax-time: 2160\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testDict\nargs: -n SchemaTrans -l 1\nmax-time: 4320\n```\n\n----------------------------------------\n\nTITLE: Adding Bug-specific Tests in CMake\nDESCRIPTION: Configures tests for specific bug issues in a separate module with appropriate dependencies and includes, with warning downgrade for string operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/tests/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(test_file\n    issues/test_bug24909259.cc\n    )\n  ADD_HARNESS_TEST_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${test_file}\n    MODULE issues\n    LIB_DEPENDS\n      test-helpers\n      router_utils\n      router_frontend_lib  # init_keyring\n    INCLUDE_DIRS\n      $<TARGET_PROPERTY:router_utils,INCLUDE_DIRECTORIES>\n      ../src/\n    SYSTEM_INCLUDE_DIRS ${GMOCK_INCLUDE_DIRS}\n  )\nENDFOREACH()\nDOWNGRADE_STRINGOP_WARNINGS(routertest_issues_bug24909259)\n```\n\n----------------------------------------\n\nTITLE: Including NDB API Headers in CMake\nDESCRIPTION: Adds the NDB API include directory to the include path for compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/storage/ndb/include/ndbapi)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Test Commands with Time Limits\nDESCRIPTION: This configuration file defines multiple MySQL server test commands with specific test cases, arguments, and execution time limits. Each entry follows a pattern of 'cmd', 'args', and 'max-time' properties to specify what test to run, with what parameters, and the maximum time allowed for execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--03-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: test_event\nargs: -n Bug44915 T1\nmax-time: 180\n\ncmd: test_event\nargs: -n SumaScanGetNodesContinueB T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n ExecuteAsynch T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n InsertError T1\nmax-time: 180\n\ncmd: testScan\nargs: -n Bug36124 T1\nmax-time: 180\n\ncmd: testScan\nargs: -l 100 -n Scan-bug8262 T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n RollbackUpdate T1 T6 D1 D2\nmax-time: 180\n\ncmd: testBlobs\nargs: -bug 27018 -skip p\nmax-time: 180\n\ncmd: testScan\nargs: -n Bug24447 T1\nmax-time: 180\n\ncmd: testBitfield\nargs:\nmax-time: 180\n\ncmd: test_event\nargs: -n BackwardCompatiblePollLongWait T1\nmax-time: 180\n\ncmd: testBasic\nargs: -n DeleteRead\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug36246 T1\nmax-time: 540\n\ncmd: flexBench\nargs: -c 25 -t 10\nmax-time: 180\n\ncmd: testIndex\nargs: -n DeferredMixedLoad T1 T6 T13\nmax-time: 180\n\ncmd: testDict\nargs: -n FK_Bug18069680 T1\nmax-time: 360\n\ncmd: testNodeRestart\nargs: -n Bug58453 T1\nmax-time: 900\n\ncmd: testBasic\nargs: -n PkDirtyRead\nmax-time: 360\n\ncmd: testBackup\nargs: -n FailMasterAsSlave T1\nmax-time: 180\n\ncmd: testDict\nargs: -n Bug29501 T1\nmax-time: 360\n\ncmd: testDict\nargs: -n TableAddAttrsDuringError\nmax-time: 540\n\ncmd: testNdbinfo\nargs:\nmax-time: 900\n\ncmd: testBasic\nargs: --forceshortreqs -n PkUpdate\nmax-time: 720\n\ncmd: testNodeRestart\nargs: -n Bug18414 T1\nmax-time: 720\n\ncmd: testScan\nargs: -n CheckGetValue T6 D1 D2\nmax-time: 900\n\ncmd: testRedo\nargs: -nRedoFull T1\nmax-time: 1440\n\ncmd: testScan\nargs: -n ScanVariants\nmax-time: 1080\n\ncmd: testBasic\nargs: -n NoCommitSleep T6 D1 D2\nmax-time: 900\n\ncmd: testIndex\nargs: -n NF_DeferredMixed T1 T6 T13\nmax-time: 1980\n\ncmd: testDict\nargs: -n Restart_NR2 T1 I3\nmax-time: 4140\n\ncmd: testPartitioning\nargs:\nmax-time: 4500\n```\n\n----------------------------------------\n\nTITLE: Transaction Outcome Decision Logic\nDESCRIPTION: Determines transaction outcome based on highest and lowest transaction states across nodes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/MasterTakeover.txt#2025-04-21_snippet_2\n\nLANGUAGE: pseudocode\nCODE:\n```\ntrans->m_state = trans->lowest_trans_state;\nswitch(trans->highest_trans_state)\n  case TS_INITIAL:\n  case TS_STARTING:\n  case TS_STARTED:\n  case TS_PARSING:\n  case TS_SUBOP:\n  case TS_ROLLBACK_SP:\n  case TS_FLUSH_PREPARE:\n  case TS_PREPARING:\n  case TS_ABORTING_PREPARE:\n  case TS_ABORTING_PARSE:\n   decision is rollback!\n   break;\n  case TS_FLUSH_COMMIT:\n  case TS_COMMITTING:\n    if (trans->rollback_op_state != OS_COMMITTED)\n      decision is rollback;\n      break;\n  case TS_FLUSH_COMPLETE:\n  case TS_COMPLETING:\n  case TS_ENDING:\n    decision is rollforward!\n```\n\n----------------------------------------\n\nTITLE: Creating JAR for MySQL Server Java API Test in CMake\nDESCRIPTION: Uses the CREATE_JAR command to build a JAR file for the Java API test. It includes the specified Java sources, classpath, and merges with other JARs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(jtie-test-myjapi ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  MERGE_JARS ${JARS}\n  DEPENDENCIES jtie.jar)\n```\n\n----------------------------------------\n\nTITLE: Adding NdbJTie Unit Tests Shared Library in CMake\nDESCRIPTION: Creates a shared library for NdbJTie unit tests, specifying source files and setting various properties.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(libndbjtie_unit_tests SHARED\n  ndbjtie_unit_tests_consts.cpp\n  ndbjtie_unit_tests_lib.cpp\n  )\n\nSET_TARGET_PROPERTIES(libndbjtie_unit_tests PROPERTIES\n  LINK_FLAGS \"${CMAKE_SHARED_LIBRARY_C_FLAGS}\"\n  OUTPUT_NAME \"ndbjtie_unit_tests\")\n\nSET_TARGET_PROPERTIES(libndbjtie_unit_tests PROPERTIES\n  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/library_output_directory)\n```\n\n----------------------------------------\n\nTITLE: Restarting System Tests for MySQL Server\nDESCRIPTION: This snippet focuses on testing system restart scenarios, ensuring that MySQL handles restarts correctly and consistently manages data integrity.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n Bug46412 -l 10 T1\nmax-time: 900\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_3 D1\nmax-time: 720\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n SR_DD_2b_LCP D2\nmax-time: 1620\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSystemRestart\nargs: -n to D2\nmax-time: 1800\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Version Test in CMake\nDESCRIPTION: Adds a specific test for the NDB version component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/util/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(ndb_version-t version.cpp LIBS ndbgeneral)\n```\n\n----------------------------------------\n\nTITLE: Converting Distribution ID to Lowercase\nDESCRIPTION: Converts the distribution ID (Ubuntu/Debian) to lowercase for consistent handling in package naming and configuration.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Change uppercase first letter of Ubuntu/Debian\nstring(TOLOWER \"${DEB_ID}\" DEB_ID)\n```\n\n----------------------------------------\n\nTITLE: Creating I/O Cache Test Executable\nDESCRIPTION: Creates a test executable for the I/O cache functionality by compiling mf_iocache.cc with the MAIN definition.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(mf_iocache_test\n  mf_iocache.cc\n  EXCLUDE_FROM_PGO\n  LINK_LIBRARIES mysys\n  SKIP_INSTALL\n  COMPILE_DEFINITIONS MAIN\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Libraries and Includes in CMake\nDESCRIPTION: Sets up Windows-specific source files, libraries, and includes for MySQL Server build. It configures libraries like 'windows' and 'spinlock', and sets up linking for Windows-specific libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(MINGW OR MSVC)\n  set(WINDOWS_INCLUDES\n          src/windows/port.h\n          src/windows/mingw.h\n          src/windows/mini_disassembler.h\n          src/windows/mini_disassembler_types.h\n          src/windows/preamble_patcher.h)\n  set(libwindows_la_SOURCES ${WINDOWS_INCLUDES}\n          src/windows/port.cc\n          src/windows/system-alloc.cc\n          src/windows/ia32_modrm_map.cc\n          src/windows/ia32_opcode_map.cc\n          src/windows/mini_disassembler.cc\n          src/windows/patch_functions.cc\n          src/windows/preamble_patcher.cc\n          src/windows/preamble_patcher_with_stub.cc)\n  add_library(windows_object OBJECT ${libwindows_la_SOURCES})\n  add_library(windows INTERFACE)\n  target_sources(windows INTERFACE $<TARGET_OBJECTS:windows_object>)\n  target_link_libraries(windows INTERFACE psapi)\n\n  set(SPINLOCK_INCLUDES src/base/spinlock.h\n          src/base/spinlock_internal.h\n          src/base/spinlock_win32-inl.h\n          src/base/spinlock_linux-inl.h\n          src/base/spinlock_posix-inl.h)\n  set(libspinlock_la_SOURCES src/base/spinlock.cc\n          src/base/spinlock_internal.cc\n          ${SPINLOCK_INCLUDES})\n  add_library(spinlock STATIC ${libspinlock_la_SOURCES})\n  set(LIBSPINLOCK windows spinlock sysinfo logging)\n  target_link_libraries(sysinfo shlwapi)\n  target_link_libraries(spinlock synchronization)\n\nelse()\n  # Non-Windows configuration\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding linux_timestamping Executable\nDESCRIPTION: This snippet adds an executable named `linux_timestamping`. It uses `MYSQL_ADD_EXECUTABLE` and defines the source file, component, install skipping, and linked libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n\"MYSQL_ADD_EXECUTABLE(linux_timestamping linux_timestamping.cc \n  COMPONENT Router\n  SKIP_INSTALL\n  LINK_LIBRARIES\n  harness_net_ts harness_stdx\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Compiler Warnings in CMake for MySQL Server\nDESCRIPTION: Checks and applies the -Wno-unused-local-typedefs compiler warning flag to the C++ compiler flags if supported. This helps suppress warnings about unused local typedefs during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/locks/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL NDB Cluster Test Commands\nDESCRIPTION: A comprehensive set of test command definitions for MySQL NDB Cluster testing. Each line specifies a test command, its arguments including test case names and table identifiers, and the maximum time allowed for test execution in seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--01-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testScan\nargs: -n TupCheckSumError T1\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n MultiCrashTest T1\nmax-time: 1800\n\ncmd: test_event\nargs: -n Bug56579 T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n Bug_11133 T1 D1 D2\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n WaitUntilReady T1 T6 T13\nmax-time: 180\n\ncmd: testBasic\nargs: -n UnlockBatch T6\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n UpdateWithoutKeys T6 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n NoCommitAndClose T1 T6 D1 D2\nmax-time: 180\n\ncmd: testScan\nargs: -n ScanReadError5025 T1 D1 D2\nmax-time: 180\n\ncmd: testBasic\nargs: -n PkInsertTwice T1 T6 D1 D2\nmax-time: 180\n\ncmd: flexHammer\nargs: -r 5 -t 32\nmax-time: 180\n\ncmd: testFK\nargs: -n Cascade1 T1\nmax-time: 180\n\ncmd: testNdbApi\nargs: -n RecordSpecificationBackwardCompatibility\nmax-time: 180\n\ncmd: testDict\nargs: -n Bug57057 T1\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug15685 T1\nmax-time: 180\n\ncmd: test_event_merge\nargs: --no-implicit-nulls --separate-events\nmax-time: 180\n\ncmd: testDict\nargs: -n FragmentTypeSingle T1\nmax-time: 180\n\ncmd: testNodeRestart\nargs: -n Bug57767 T2\nmax-time: 360\n\ncmd: testDict\nargs: -n Bug14645319 T1\nmax-time: 360\n\ncmd: testScan\nargs: -n ScanReadError5030 T1 D1 D2\nmax-time: 360\n\ncmd: testNodeRestart\nargs: -n Bug15632 T1\nmax-time: 360\n\ncmd: testIndex\nargs: -n InsertDelete T1\nmax-time: 540\n\ncmd: testNodeRestart\nargs: -n DeleteRestart T1\nmax-time: 540\n\ncmd: testNodeRestart\nargs: -n TwoNodeFailure T6 T13\nmax-time: 2520\n\ncmd: testDict\nargs: -n FailAddPartition T1 I3\nmax-time: 720\n\ncmd: testNodeRestart\nargs: -n ForceStopAndRestart T1\nmax-time: 540\n\ncmd: testNodeRestart\nargs: -n pnr --nologging T1\nmax-time: 1080\n\ncmd: testNodeRestart\nargs: -n MixReadUnlockRestart T1\nmax-time: 1080\n\ncmd: testSystemRestart\nargs: -n SR_DD_3b D2\nmax-time: 1080\n\ncmd: testLimits\nargs: -n SlowDihFileWrites T1\nmax-time: 1620\n\ncmd: testDict\nargs: -n CreateAndDropIndexes -l 200 T1\nmax-time: 3060\n\ncmd: testSystemRestart\nargs: -n SR1 T1\nmax-time: 4140\n```\n\n----------------------------------------\n\nTITLE: Finding patchelf Executable\nDESCRIPTION: This snippet uses the `FIND_PROGRAM` command to locate the `patchelf` executable on Linux systems. It also creates a custom target `copy_linux_custom_dlls` and sets `KNOWN_CUSTOM_LIBRARIES` as an internal cache variable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/CMakeLists.txt#2025-04-21_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(LINUX)\n  # Look up patchelf(1) here, before doing SSL/KERBEROS/SASL/LDAP config.\n  FIND_PROGRAM(PATCHELF_EXECUTABLE patchelf)\n  ADD_CUSTOM_TARGET(copy_linux_custom_dlls)\n  SET(KNOWN_CUSTOM_LIBRARIES \\\"\\\" CACHE INTERNAL \\\"\\\" FORCE)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: PkUpdate\nDESCRIPTION: This entry outlines the testing conditions for primary key updates, providing parameters that govern the execution length and monitoring the integrity of updates made.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\ncmd: testBasic\nargs: -n PkUpdate\nmax-time: 720\n```\n\n----------------------------------------\n\nTITLE: Setting Version Variables\nDESCRIPTION: This snippet declares version variables for the various shared objects utilized in gperftools, allowing consistent version management throughout the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TCMALLOC_SO_VERSION 9.16.5)\nset(PROFILER_SO_VERSION 5.11.5)\nset(TCMALLOC_AND_PROFILER_SO_VERSION 10.11.6)\n```\n\n----------------------------------------\n\nTITLE: Adding Compilation Definitions for MySQL Server and Logging\nDESCRIPTION: This CMake snippet adds compilation definitions for the MySQL Server and sets the logging component tag for the connection control plugin. These definitions are used during the compilation process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/connection_control/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEFINITIONS(-DMYSQL_SERVER)\nADD_DEFINITIONS(-DLOG_COMPONENT_TAG=\"CONNECTION_CONTROL\")\n```\n\n----------------------------------------\n\nTITLE: Testing Foreign Key Constraints for MySQL Server\nDESCRIPTION: This snippet includes several commands designed to test foreign key constraints and behaviors in MySQL, ensuring that data integrity is maintained during operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--01-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testFK\nargs: -n CreateDropWithData T1\nmax-time: 180\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testFK\nargs: -n CascadeError T1\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: WiX Directory Check and License Setup\nDESCRIPTION: Checks for WiX toolset directory and creates RTF license file from plain text LICENSE file if needed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WIX_DIR)\n  RETURN()\nENDIF()\n\n# WiX wants the license text as rtf; if there is no rtf license, \n# we create a fake one from the plain text LICENSE file.\nCREATE_WIX_LICENCE_AND_RTF(\"${CMAKE_SOURCE_DIR}/LICENSE\")\n```\n\n----------------------------------------\n\nTITLE: Defining testOIBasic Command in Bash\nDESCRIPTION: This snippet defines the 'testOIBasic' command, which is used to perform basic tests on object instances in MySQL with the specified case argument.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--02-tests.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncmd: testOIBasic\nargs: -case abcdefz\nmax-time: 4860\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Data Sample\nDESCRIPTION: Sample test data output showing numeric values, dates, timestamps and binary data in raw format. Contains multiple rows with systematically varying values used for testing MySQL server functionality.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/myisam_tb2.txt#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n6\t6\t6\t6\t6\t6\t0\t5.5\t6\t5.5\t6\t5.5\t6\t5.5\t-1.175494345e-38\t1.175494357e-38...\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_30\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSystemRestart\nargs: -n SR_UNDO D1\nmax-time: 2880\"\n```\n\n----------------------------------------\n\nTITLE: WiX Template File Configuration\nDESCRIPTION: Configures WiX template files by copying and replacing variables in multiple .wxs.in files to generate final WXS files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/mysql_server_extra.wxs.in\n  ${CMAKE_CURRENT_BINARY_DIR}/mysql_server_extra.wxs\n  @ONLY)\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/redist_check.wxs.in\n  ${CMAKE_CURRENT_BINARY_DIR}/redist_check.wxs\n  @ONLY)\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/custom_ui.wxs.in\n  ${CMAKE_CURRENT_BINARY_DIR}/custom_ui.wxs\n  @ONLY)\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/create_msi.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/create_msi.cmake\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Server Copyright and License Terms\nDESCRIPTION: This code block defines the copyright notice, license terms, and additional permissions for the MySQL server project. It specifies the GNU General Public License version 2.0 and includes provisions for linking with separately licensed software.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbtup/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Copyright (c) 2008, 2025, Oracle and/or its affiliates.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is designed to work with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have either included with\n# the program or referenced in the documentation.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_strip Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_strip target, which handles stripping of log statements in the Abseil logging system. It specifies headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_strip\n  SRCS\n  HDRS\n    \"internal/strip.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log_internal_message\n    absl::log_internal_nullstream\n    absl::log_severity\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterJ Exports\nDESCRIPTION: Specifies the Java packages to be exported by ClusterJ\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CLUSTERJ_EXPORTS\n  com.mysql.clusterj\n  com.mysql.clusterj.query\n  com.mysql.clusterj.annotation\n  com.mysql.clusterj.metadata\n  com.mysql.clusterj.spi\n  com.mysql.clusterj.store\n  com.mysql.clusterj.util\n  com.mysql.clusterj.tie\n  )\n```\n\n----------------------------------------\n\nTITLE: Test Configuration Format\nDESCRIPTION: Standard format for defining test cases with max-time limit, command name, and arguments. Tests cover various areas including scanning, node restarts, system restarts, and API operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmax-time: 720\ncmd: testScan\nargs: -n ScanReaderror5022 T1 D1 D2\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags for Windows Clang Build\nDESCRIPTION: Adds a Windows-specific compiler flag to disable Microsoft-cast warnings when compiling ndb_daemon.cpp with Clang on Windows.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32_CLANG)\n  ADD_COMPILE_FLAGS(ndb_daemon.cpp COMPILE_FLAGS \" -Wno-microsoft-cast\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating JAR for ClusterJ Core in CMake\nDESCRIPTION: Configures the creation of the ClusterJ Core JAR file, specifying the Java sources, classpath, dependencies, and additional resources to be included.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-core/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_JAR(clusterj-core ${JAVA_SOURCES}\n  CLASSPATH ${CLASSPATH}\n  DEPENDENCIES clusterj-api.jar\n  EXTRA_FILES src/main/resources/META-INF\n              src/main/resources/com\n  BROKEN_JAVAC ${BROKEN_JAVAC})\n```\n\n----------------------------------------\n\nTITLE: Testing Illegal UTF-8 Code Positions\nDESCRIPTION: This section tests UTF-8 sequences that represent illegal code positions, including single and paired UTF-16 surrogates. These should be rejected as malformed sequences.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n\"í \"\n\"í­¿\"\n\"í®\"\n\"í¯¿\"\n\"í°\"\n\"í¾\"\n\"í¿¿\"\n\"í í°\"\n\"í í¿¿\"\n\"í­¿í°\"\n\"í­¿í¿¿\"\n\"í®í°\"\n\"í®í¿¿\"\n\"í¯¿í°\"\n\"í¯¿í¿¿\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: UnlockBasic\nDESCRIPTION: This snippet defines a command intended to unlock basic functionalities within the test framework, implying essential checks on permission and access aspects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ncmd: testNdbApi\nargs: -n UnlockBasic T1\nmax-time: 540\n```\n\n----------------------------------------\n\nTITLE: Test Operations Command Configuration\nDESCRIPTION: Defines a test operations command with an unspecified argument list and a maximum time limit\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--05-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: configuration\nCODE:\n```\ncmd: testOperations\nargs:\nmax-time: 20340\n```\n\n----------------------------------------\n\nTITLE: Creating rpl_channel_credentials Library and Test in CMake\nDESCRIPTION: Sets up a static library for rpl_channel_credentials and creates an executable test linked against it.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(rpl_channel_credentials_lib STATIC\n  ${CMAKE_SOURCE_DIR}/sql/rpl_channel_credentials.cc\n)\n\nMYSQL_ADD_EXECUTABLE(rpl_channel_credentials-t rpl_channel_credentials-t.cc\n  ENABLE_EXPORTS\n  ADD_TEST rpl_channel_credentials\n  LINK_LIBRARIES rpl_channel_credentials_lib gunit_small\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Clang Tidy\nDESCRIPTION: This snippet ensures that the clang_tidy_prerequisites target has dependencies on the xprotocol_tags target, establishing the necessary build order.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/plugin/x/protocol/plugin/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nADD_DEPENDENCIES(clang_tidy_prerequisites xprotocol_tags)\n```\n\n----------------------------------------\n\nTITLE: Executing Upgrade Test: Upgrade_NR2\nDESCRIPTION: This command executes the upgrade test for the second non-restart scenario 'Upgrade_NR2', continuing the assessments for non-disruptive upgrades in MySQL server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/upgrade-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testUpgrade\nargs: -n Upgrade_NR2 T1\nmax-time: 600\n\n```\n\n----------------------------------------\n\nTITLE: Defining Test Executables\nDESCRIPTION: Sets up a list of test cases related to buffer management and sequencing that need to be compiled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/containers/buffers/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESTS\n  managed_buffer_sequence\n  managed_buffer\n  rw_buffer_sequence\n)\n```\n\n----------------------------------------\n\nTITLE: MSI Build Custom Target\nDESCRIPTION: Defines the main MSI build target that executes the MSI creation script with proper configuration parameters.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/WiX/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nADD_CUSTOM_TARGET(\n  MSI\n  COMMAND set VS_UNICODE_OUTPUT=\n  COMMAND ${CMAKE_COMMAND} \n  ${CONFIG_PARAM} \n  -P  ${CMAKE_CURRENT_BINARY_DIR}/create_msi.cmake\n)\n\nIF(TARGET remove_INFO_SRC_from_bs)\n  ADD_DEPENDENCIES(MSI remove_INFO_SRC_from_bs)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring bind_front Test in CMake\nDESCRIPTION: Sets up the test target for the bind_front library. It specifies the test source file, compilation options, and dependencies required for testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/functional/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    bind_front_test\n  SRCS\n    \"bind_front_test.cc\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::bind_front\n    absl::memory\n    GTest::gmock_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flags Usage Library in CMake\nDESCRIPTION: Creates a CMake target for the flags usage library. It specifies source files, headers, compiler options, linker options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/flags/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    flags_usage\n  SRCS\n    \"usage.cc\"\n  HDRS\n    \"usage.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::config\n    absl::core_headers\n    absl::flags_usage_internal\n    absl::raw_logging_internal\n    absl::strings\n    absl::synchronization\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL Server Build\nDESCRIPTION: This CMake code snippet sets up the include directories for the MySQL Server build process. It includes system-level Google Mock (GMock) directories and the project's test directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tests/)\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Command DbCreate\nDESCRIPTION: This command is used to create a database, primarily configured to run with a maximum time of 300 seconds. It serves as an initial setup to facilitate subsequent benchmarking operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-perf-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmax-time: 300\ncmd: DbCreate\nargs:\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Sink Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's log sink functionality. It includes the source file and dependencies needed to validate the components that enable custom handling of log messages.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    log_sink_test\n  SRCS\n    \"log_sink_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::core_headers\n    absl::log\n    absl::log_internal_test_actions\n    absl::log_internal_test_helpers\n    absl::log_internal_test_matchers\n    absl::log_sink\n    absl::log_sink_registry\n    absl::log_severity\n    absl::scoped_mock_log\n    absl::strings\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Protobuf Message Field Values Definition\nDESCRIPTION: A complete Protocol Buffers message instance showing values for various field types including primitives, strings, enums, and nested messages. The example demonstrates optional fields, repeated fields with multiple values, default fields, and oneof fields.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/src/google/protobuf/testdata/text_format_unittest_data_pointy_oneof.txt#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\noptional_int32: 101\noptional_int64: 102\noptional_uint32: 103\noptional_uint64: 104\noptional_sint32: 105\noptional_sint64: 106\noptional_fixed32: 107\noptional_fixed64: 108\noptional_sfixed32: 109\noptional_sfixed64: 110\noptional_float: 111\noptional_double: 112\noptional_bool: true\noptional_string: \"115\"\noptional_bytes: \"116\"\nOptionalGroup <\n  a: 117\n>\noptional_nested_message <\n  bb: 118\n>\noptional_foreign_message <\n  c: 119\n>\noptional_import_message <\n  d: 120\n>\noptional_nested_enum: BAZ\noptional_foreign_enum: FOREIGN_BAZ\noptional_import_enum: IMPORT_BAZ\noptional_string_piece: \"124\"\noptional_cord: \"125\"\noptional_public_import_message <\n  e: 126\n>\noptional_lazy_message <\n  bb: 127\n>\noptional_unverified_lazy_message <\n  bb: 128\n>\nrepeated_int32: 201\nrepeated_int32: 301\nrepeated_int64: 202\nrepeated_int64: 302\nrepeated_uint32: 203\nrepeated_uint32: 303\nrepeated_uint64: 204\nrepeated_uint64: 304\nrepeated_sint32: 205\nrepeated_sint32: 305\nrepeated_sint64: 206\nrepeated_sint64: 306\nrepeated_fixed32: 207\nrepeated_fixed32: 307\nrepeated_fixed64: 208\nrepeated_fixed64: 308\nrepeated_sfixed32: 209\nrepeated_sfixed32: 309\nrepeated_sfixed64: 210\nrepeated_sfixed64: 310\nrepeated_float: 211\nrepeated_float: 311\nrepeated_double: 212\nrepeated_double: 312\nrepeated_bool: true\nrepeated_bool: false\nrepeated_string: \"215\"\nrepeated_string: \"315\"\nrepeated_bytes: \"216\"\nrepeated_bytes: \"316\"\nRepeatedGroup <\n  a: 217\n>\nRepeatedGroup <\n  a: 317\n>\nrepeated_nested_message <\n  bb: 218\n>\nrepeated_nested_message <\n  bb: 318\n>\nrepeated_foreign_message <\n  c: 219\n>\nrepeated_foreign_message <\n  c: 319\n>\nrepeated_import_message <\n  d: 220\n>\nrepeated_import_message <\n  d: 320\n>\nrepeated_nested_enum: BAR\nrepeated_nested_enum: BAZ\nrepeated_foreign_enum: FOREIGN_BAR\nrepeated_foreign_enum: FOREIGN_BAZ\nrepeated_import_enum: IMPORT_BAR\nrepeated_import_enum: IMPORT_BAZ\nrepeated_string_piece: \"224\"\nrepeated_string_piece: \"324\"\nrepeated_cord: \"225\"\nrepeated_cord: \"325\"\nrepeated_lazy_message <\n  bb: 227\n>\nrepeated_lazy_message <\n  bb: 327\n>\ndefault_int32: 401\ndefault_int64: 402\ndefault_uint32: 403\ndefault_uint64: 404\ndefault_sint32: 405\ndefault_sint64: 406\ndefault_fixed32: 407\ndefault_fixed64: 408\ndefault_sfixed32: 409\ndefault_sfixed64: 410\ndefault_float: 411\ndefault_double: 412\ndefault_bool: false\ndefault_string: \"415\"\ndefault_bytes: \"416\"\ndefault_nested_enum: FOO\ndefault_foreign_enum: FOREIGN_FOO\ndefault_import_enum: IMPORT_FOO\ndefault_string_piece: \"424\"\ndefault_cord: \"425\"\noneof_bytes: \"604\"\n```\n\n----------------------------------------\n\nTITLE: Basic Operation Testing in Shell\nDESCRIPTION: This code snippet is designed to test basic operations within the MySQL server. Using the `testBasic` command, it checks functionalities with provided arguments under a capped maximum time frame.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmax-time: 600\ncmd: testBasic\nargs: -n Bug54986 D2\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Server with Custom Configuration\nDESCRIPTION: Command to start the MySQL server using the same configuration file and datadir used during initialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/README_tablespace_portable_linux.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/mysqld --defaults-file=./my.cnf --datadir=../Linx-DB/ --basedir=. -u root\n```\n\n----------------------------------------\n\nTITLE: Testing Concatenation of Incomplete UTF-8 Sequences\nDESCRIPTION: This test concatenates all the incomplete sequences from the previous section. A proper decoder should signal 10 separate malformed sequences.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n\"Ààðøüßï¿÷¿¿û¿¿¿ý¿¿¿¿\"\n```\n\n----------------------------------------\n\nTITLE: Testing Impossible UTF-8 Bytes\nDESCRIPTION: This section tests the decoder's handling of bytes that cannot appear in a correct UTF-8 string. These should be treated as errors.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n\"þ\"\n\"ÿ\"\n\"þþÿÿ\"\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Test Command: Bug21384 Index\nDESCRIPTION: This snippet registers a test for the 'Bug21384', allowing developers to verify index-related issues under specified conditions while observing execution efficiency.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--02-tests.txt#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ncmd: testIndex\nargs: -n Bug21384\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Running Static Analysis on Single Commits\nDESCRIPTION: Commands to analyze specific commits using static analysis tools with various configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/static_analysis.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --commit > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --commit HEAD~2 > results.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./scripts/static_analysis.py --commit HEAD~2 --clang-tidy-diff=/usr/share/clang/clang-tidy-diff.py > results.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Project Test Directory to Include Path\nDESCRIPTION: Includes the project's test directory in the include path, allowing test-specific header files to be accessible during compilation\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tests/)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Uniform Real Distribution Test - C++\nDESCRIPTION: Defines a test for the uniform real distribution, linking necessary source files and dependencies to ensure the integrity of its implementation during testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_uniform_real_distribution_test\n  SRCS\n    \"uniform_real_distribution_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::log\n    absl::numeric_representation\n    absl::random_distributions\n    absl::random_internal_distribution_test_util\n    absl::random_internal_pcg_engine\n    absl::random_internal_sequence_urbg\n    absl::random_random\n    absl::strings\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a test command for scanning with time limits\nDESCRIPTION: Sets up a 'testScan' command to check the 'ScanRead40' scenario, specifying a limit of 100 records and involving tables 'T1', 'D1', and 'D2', with a maximum time of 360 seconds.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--03-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testScan\nargs: -n ScanRead40 -l 100 T1 D1 D2\nmax-time: 360\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Test SafeProcess Library in CMake\nDESCRIPTION: Configures installation of the Base.pm Perl module into the MySQL test directory when the INSTALL_MYSQLTESTDIR variable is set. This module is part of the My::SafeProcess library used for MySQL testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/lib/My/SafeProcess/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(INSTALL_MYSQLTESTDIR)\n  INSTALL(FILES Base.pm\n    DESTINATION \"${INSTALL_MYSQLTESTDIR}/lib/My/SafeProcess\" COMPONENT Test\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Schema Timer in MySQL\nDESCRIPTION: This SQL query sets the Performance Schema timer to 'CYCLE'. It's used in configurations that require precise timing measurements.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/conf.txt#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE performance_schema.SETUP_TIMERS\n  set timer_name='CYCLE';\n```\n\n----------------------------------------\n\nTITLE: Error Handling State\nDESCRIPTION: A fallback state used when syntax errors are detected. This state is designed to help the state machine exit gracefully in case of unexpected errors.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_16\n\nLANGUAGE: state-machine\nCODE:\n```\nerrorDeath:\n    default              n errorDeath                               doExit\n```\n\n----------------------------------------\n\nTITLE: Installing ATRT Test Configuration Files in CMake\nDESCRIPTION: Configures the installation of test case files and configuration files matching specific patterns to the mysql-test/ndb directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(DIRECTORY .\n  DESTINATION mysql-test/ndb\n  FILES_MATCHING\n  PATTERN \"*-tests.txt\"\n  PATTERN \"conf-*.cnf\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Log File Path for MySQL Server in CMake\nDESCRIPTION: This snippet sets the default log file path for MySQL server if it hasn't been specified already.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-common/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF (\"${LOGFILE_RPM}\" STREQUAL \"\")\n  SET(LOGFILE_RPM \"/var/log/mysqld.log\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Abseil Project and Output Directories\nDESCRIPTION: Sets up the Abseil project, including language, version, and output directories for binaries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(absl LANGUAGES CXX VERSION 20230802)\ninclude(CTest)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testIndex\nargs: -n Bug50118 T1\nmax-time: 180\"\n```\n\n----------------------------------------\n\nTITLE: Setting Test Module Name\nDESCRIPTION: This snippet sets the name of the test module to 'harness'. This module name is used in subsequent test definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"SET(TEST_MODULE harness)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files Discovery in MySQL CMake\nDESCRIPTION: Configures how header files are discovered depending on the IDE/generator being used, with special handling for Xcode. Uses GLOB_RECURSE conditionally to find all header files in the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nUNSET(SQL_HEADERS)\nIF(CMAKE_GENERATOR STREQUAL \"Xcode\")\n  OPTION(GLOB_RECURSE_SQL_HEADERS \"Find header files with GLOB_RECURSE\" ON)\nELSE()\n  OPTION(GLOB_RECURSE_SQL_HEADERS \"Find header files with GLOB_RECURSE\" OFF)\nENDIF()\nIF(GLOB_RECURSE_SQL_HEADERS)\n  # Needed so that IDEs (e.g. Xcode) can see all sources when searching\n  # This recursive search finds over 1500 header files, and may actually\n  # take a significant amount of time. Hence, do it only upon request.\n  # Visual Studio will scan/parse for headers at startup anyways.\n  FILE(GLOB_RECURSE SQL_HEADERS\n    \"${CMAKE_SOURCE_DIR}/include/*.h\"\n    \"${CMAKE_SOURCE_DIR}/sql/*.h\"\n    \"${CMAKE_SOURCE_DIR}/storage/*.h\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Check Test in CMake\nDESCRIPTION: This snippet defines the test target for Abseil's check functionality. It includes the required source files and dependencies for testing assertion mechanisms and related utilities.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    check_test\n  SRCS\n    \"check_test.cc\"\n    \"check_test_impl.inc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::check\n    absl::config\n    absl::core_headers\n    absl::log_internal_test_helpers\n    absl::status\n    GTest::gmock\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Testing UTF-8 Boundary Conditions - Last Possible Sequences\nDESCRIPTION: Tests the last possible sequence for different UTF-8 byte lengths (1-6 bytes), representing various Unicode code points\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/third_party/utf8_range/utf8_corpus_dir/utf8_corpus_kuhn.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2.2.1  1 byte  (U-0000007F):        \"\"\n2.2.2  2 bytes (U-000007FF):        \"ß¿\"\n2.2.3  3 bytes (U-0000FFFF):        \"ï¿¿\"\n2.2.4  4 bytes (U-001FFFFF):        \"÷¿¿¿\"\n2.2.5  5 bytes (U-03FFFFFF):        \"û¿¿¿¿\"\n2.2.6  6 bytes (U-7FFFFFFF):        \"ý¿¿¿¿¿\"\n```\n\n----------------------------------------\n\nTITLE: Setting ClusterJ API Source Path\nDESCRIPTION: Defines the base directory path for ClusterJ API Java source files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/clusterj/clusterj-api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CLUSTERJ_API_PREFIX\\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/main/java/com/mysql/clusterj)\n```\n\n----------------------------------------\n\nTITLE: Enabling All Performance Schema Consumers in MySQL\nDESCRIPTION: This SQL query enables all Performance Schema consumers. It's used in the PERFSCHEMA-ENABLED-BIGBANG-CYCLE configuration for comprehensive monitoring.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/perfschema/unittest/conf.txt#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE performance_schema.SETUP_CONSUMERS\n  set enabled='YES';\n```\n\n----------------------------------------\n\nTITLE: Test Dictionary Creation Command\nDESCRIPTION: A test command configuration for creating a table when a database is full, with specific arguments and time limit\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/weekly-devel--03-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testDict\nargs: -n CreateTableWhenDbIsFull T6\nmax-time: 10620\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Multi-Threaded Send Test in CMake\nDESCRIPTION: Creates a test target for mt-send-t if WITH_NDBMTD is enabled. This test is linked against the unit test libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_NDBMTD)\n  NDB_ADD_TEST(mt-send-t mt-send-t.cpp LIBS ${ALL_UNIT_TEST_LIBS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Event Test Configuration\nDESCRIPTION: Test configuration for event test with slow GCP complete acknowledgment and single test target\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--06-tests.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncmd: test_event\nargs: -n SlowGCP_COMPLETE_ACK T1\nmax-time : 200\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_24\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testScan\nargs: -n ScanRead40 -l 100 T6 D1 D2\nmax-time: 720\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Plugins\nDESCRIPTION: This snippet adds a subdirectory named `plugins` to the build process. It allows for the inclusion of plugin-related source code and build configurations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_SUBDIRECTORY(plugins)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Table Access Component in MySQL CMake Configuration\nDESCRIPTION: Adds a test-only component called 'test_table_access' to the MySQL build system. The component is compiled from test_table_access.cc source file and marked as a module-only, test-only component.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/table_access/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_COMPONENT(test_table_access\n  test_table_access.cc\n  MODULE_ONLY\n  TEST_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring counting_allocator Library in CMake for Abseil\nDESCRIPTION: Sets up the internal-only 'counting_allocator' library target. It defines the header file, compiler options, and dependencies for the counting allocator implementation used in testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    counting_allocator\n  HDRS\n    \"internal/counting_allocator.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  DEPS\n    absl::config\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Error Code Configuration\nDESCRIPTION: Specifies language settings and error code start number for MySQL server. Sets English and Latin1 as supported languages and defines 1000 as the starting error number.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_no_msgs.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nlanguages english=eng latin1;\n\nstart-error-number 1000\n```\n\n----------------------------------------\n\nTITLE: Defining zlib Source Files and Headers in CMake\nDESCRIPTION: Lists all the source files and headers required to build the zlib library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/zlib/zlib-1.3.1/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_PUBLIC_HDRS\n    ${CMAKE_CURRENT_BINARY_DIR}/zconf.h\n    zlib.h\n)\nset(ZLIB_PRIVATE_HDRS\n    crc32.h\n    deflate.h\n    gzguts.h\n    inffast.h\n    inffixed.h\n    inflate.h\n    inftrees.h\n    trees.h\n    zutil.h\n)\nset(ZLIB_SRCS\n    adler32.c\n    compress.c\n    crc32.c\n    deflate.c\n    gzclose.c\n    gzlib.c\n    gzread.c\n    gzwrite.c\n    inflate.c\n    infback.c\n    inftrees.c\n    inffast.c\n    trees.c\n    uncompr.c\n    zutil.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for NDB Management Server in CMake\nDESCRIPTION: Configures the include directories needed for building the NDB management server, referencing various components from the NDB storage engine source tree.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmsrv/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbapi\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/mgmclient\n  ${CMAKE_SOURCE_DIR}/storage/ndb/src/common/mgmcommon\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Data Removal for MySQL Build\nDESCRIPTION: CMake configuration to remove profiling data after build completion when FPROFILE_GENERATE is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/sql/CMakeLists.txt#2025-04-21_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nIF(FPROFILE_GENERATE)\n  ADD_CUSTOM_COMMAND(TARGET mysqld POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${FPROFILE_DIR}\n    COMMENT \"Removing profile data in ${FPROFILE_DIR}\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Preventing installation of pc file\nDESCRIPTION: This snippet prevents installation of the `libcbor.pc` file. It's intended to not be installed using `do_not_install`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ndo_not_install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libcbor.pc\"\n\tDESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NDB Test Programs in CMake\nDESCRIPTION: This snippet sets up options for building NDB test programs and NdbApi examples based on various build conditions like gcov, valgrind, and specific package suffixes.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSET(WITH_NDBAPI_EXAMPLES_DEFAULT OFF)\nOPTION(WITH_NDB_TEST\n  \"Include the NDB Cluster ndbapi test programs\" OFF)\nIF(WITH_NDB_TEST)\n  MESSAGE(STATUS \"Building NDB test programs\")\nELSE()\n  # Turn on NDB tests automatically for gcov builds\n  IF(ENABLE_GCOV AND NOT WIN32 AND NOT APPLE)\n    MESSAGE(STATUS \"Building NDB test programs for improved gcov coverage\")\n    SET(WITH_NDB_TEST ON)\n    MESSAGE(STATUS \"Building NdbApi examples for improved gcov coverage\")\n    SET(WITH_NDBAPI_EXAMPLES_DEFAULT ON)\n  ENDIF()\n  # Turn on NDB tests automatically for valgrind builds\n  IF(WITH_VALGRIND)\n    MESSAGE(STATUS \"Building NDB test programs for improved valgrind coverage\")\n    SET(WITH_NDB_TEST ON)\n    MESSAGE(STATUS \"Building NdbApi examples for improved valgrind coverage\")\n    SET(WITH_NDBAPI_EXAMPLES_DEFAULT ON)\n  ENDIF()\n  # Turn on NDB tests automatically for \"-devbld\" debug builds\n  # to increase test coverage\n  IF(PACKAGE_SUFFIX STREQUAL \"-devbld\" AND\n     CMAKE_BUILD_TYPE_UPPER STREQUAL \"DEBUG\")\n    MESSAGE(STATUS \"Building NDB test programs for \\\"-devbld\\\" debug build\")\n    SET(WITH_NDB_TEST ON)\n    MESSAGE(STATUS \"Building NdbApi examples for \\\"-devbld\\\" debug build\")\n    SET(WITH_NDBAPI_EXAMPLES_DEFAULT ON)\n  ENDIF()\n  # Turn on build of NDB tests automatically for \"-werror\" builds\n  IF(PACKAGE_SUFFIX STREQUAL \"-werror\")\n    MESSAGE(STATUS \"Building NDB test programs for \\\"-werror\\\" build\")\n    SET(WITH_NDB_TEST ON)\n    MESSAGE(STATUS \"Building NdbApi examples for \\\"-werror\\\" build\")\n    SET(WITH_NDBAPI_EXAMPLES_DEFAULT ON)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing testSpj Command in MySQL\nDESCRIPTION: This snippet describes multiple instances of the 'testSpj' command aimed at testing specific join functionalities within MySQL. Each entry includes a test name and any relevant parameters, along with time constraints for execution. Expected inputs encompass feature and bug identifiers, while outputs signify the validity of join operations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--07-tests.txt#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd: testSpj\nargs: -n FeatureDisabled T1\nmax-time: 180\n\ncmd: testSpj\nargs: -n NegativeJoin T1\nmax-time: 180\n\ncmd: testSpj\nargs: -n bug#23049170 -l 1 T1\nmax-time: 300\n\ncmd: testSpj\nargs: -n LookupJoin\nmax-time: 360\n\ncmd: testSpj\nargs: -n NF_Join T6 T13\nmax-time: 3780\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping MySQL Router for Clustering\nDESCRIPTION: This snippet outlines the commands required to bootstrap a MySQL Router instance. It includes starting the MySQL Server Mock with a specified configuration file and port, and then initializing the router with the designated server.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mock_server/src/mysql_server_mock.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mysql_server_mock --mysqld-port=5050 --stmt-file=./bootstrapper.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mysqlrouter --bootstrap localhost:5050 -d router-conf\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Router Subdirectories in CMake\nDESCRIPTION: Adds the source directory to the build and conditionally includes unit tests if enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/router/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src/)\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests/)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: NDB Cluster Test Command Configuration\nDESCRIPTION: This snippet configures a test command for the NDB Cluster. It specifies the command to be executed (cmd), the arguments to be passed to the command (args), and the maximum execution time allowed for the command (max-time). These configurations are used to automate testing of different features and scenarios in the NDB Cluster environment.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic--12-tests.txt#2025-04-21_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n\"cmd: testSystemRestart\nargs: -n Bug46651 T1\nmax-time: 360\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Classpath and JARs for MySQL Server Java API in CMake\nDESCRIPTION: Defines the CLASSPATH and JARS variables for the Java API compilation. These are used to specify the locations of necessary class files and JAR dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CLASSPATH\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/test/myjapi/target/classes\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/target/classes)\n\nSET(JARS\n  ${CMAKE_BINARY_DIR}/storage/ndb/src/ndbjtie/jtie/jtie.jar)\n```\n\n----------------------------------------\n\nTITLE: Including NDB Management Common Directory in CMake Build\nDESCRIPTION: Sets up the include directory path for NDB management common components. This ensures the compiler can find necessary header files from the mgmcommon directory.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmclient/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/storage/ndb/src/common/mgmcommon)\n```\n\n----------------------------------------\n\nTITLE: Building GraalVM Polyglot Library Package with Maven\nDESCRIPTION: This Maven command packages the modified GraalVM Polyglot Library, allowing developers to test enhancements. It should be run after any modifications to the library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/polyglot-nativeapi/DEV_BUILD.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn package\n```\n\n----------------------------------------\n\nTITLE: Preventing installation of targets\nDESCRIPTION: This snippet uses `do_not_install` (likely a custom CMake macro or function) to prevent the installation of the `cbor` target (library).  It prevents installing the archive, library, and runtime components to their respective installation directories. This might be used for a header-only library or a library that is not meant to be installed system-wide.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ndo_not_install(TARGETS cbor\n\tARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n```\n\n----------------------------------------\n\nTITLE: Enabling RapidJSON String Support\nDESCRIPTION: Enables string support for the RapidJSON library by defining a preprocessor macro. This allows the use of std::string in JSON serialization.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/src/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(-DRAPIDJSON_HAS_STDSTRING=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring btree Library in CMake for Abseil\nDESCRIPTION: Defines the 'btree' library target with its headers, compiler options, linker options, and dependencies. This target provides B-tree map and set implementations.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/container/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    btree\n  HDRS\n    \"btree_map.h\"\n    \"btree_set.h\"\n    \"internal/btree.h\"\n    \"internal/btree_container.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::container_common\n    absl::common_policy_traits\n    absl::compare\n    absl::compressed_tuple\n    absl::container_memory\n    absl::cord\n    absl::core_headers\n    absl::layout\n    absl::memory\n    absl::raw_logging_internal\n    absl::strings\n    absl::throw_delegate\n    absl::type_traits\n    absl::utility\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragmented Signal and Schema Object Tests\nDESCRIPTION: Test configurations for fragmented signal sending and schema object ownership verification in NDB Cluster. These tests validate the cluster's ability to handle fragmented communication and proper ownership of schema objects.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-basic-tests.txt#2025-04-21_snippet_13\n\nLANGUAGE: plain\nCODE:\n```\n# Fragmented signal send\nmax-time: 1800\ncmd: testNdbApi\nargs: -n TestFragmentedSend T1\n\nmax-time: 1800\ncmd: testNdbApi\nargs: -n SchemaObjectOwnerCheck T1\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data into MySQL Table\nDESCRIPTION: This snippet represents a set of data that could be inserted into a MySQL table. It includes three columns: two text columns and one integer column. The data appears to be structured for testing string sorting and negative integer values.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/t3.txt#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\na`\ta`\t-5000\naaa\taaa\t-4999\nabaa\tabaa\t-4998\nacaaa\tacaaa\t-4997\nadaaaa\tadaaaa\t-4996\naeaaaaa\taeaaaaa\t-4995\nafaaaaaa\tafaaaaaa\t-4994\nagaaaaaaa\tagaaaaaaa\t-4993\na^aaaaaaaa\ta^aaaaaaaa\t-4992\na_aaaaaaaaa\ta_aaaaaaaaa\t-4991\n```\n\n----------------------------------------\n\nTITLE: Setting Error Message Start Number\nDESCRIPTION: Sets the starting error number for subsequent error message definitions to 5000.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_phantom_lang.txt#2025-04-21_snippet_1\n\nLANGUAGE: mysql-error\nCODE:\n```\nstart-error-number 5000\n```\n\n----------------------------------------\n\nTITLE: Building ndb_print_frag_file Executable with CMake\nDESCRIPTION: CMake configuration to build the ndb_print_frag_file executable for MySQL NDB Cluster. Links against NDB libraries including management API, general utilities, logging, port library, and tracing components.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdih/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(ndb_print_frag_file\n  printFragfile.cpp\n  COMPONENT ClusterTools\n  ENABLE_EXPORTS\n  LINK_LIBRARIES\n  ndbmgmapi\n  ndbgeneral\n  ndblogger\n  ndbportlib\n  ndbtrace\n  )\n```\n\n----------------------------------------\n\nTITLE: Slave Progress Analysis Implementation\nDESCRIPTION: Analyzes slave progress based on DICT_TAKEOVER_CONF responses, determining transaction states and operation counts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/blocks/dbdict/MasterTakeover.txt#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\ntrans->lowest_trans_state = TS_ENDING;\ntrans->highest_trans_state = TS_INITIAL;\nfor each slave\n  if (conf->requestInfo == TO_FIND_TRANS and no master trans)\n    master trans = seize missing transaction\n  if master op_count < slave op_count (can only differ by one)\n    seize missing operation (increase master op_count++)\n  if (weight(conf->trans_state) < weight(trans->lowest_trans_state))\n    trans->lowest_trans_state = conf->trans_state;\n  if (weight(conf->trans_state) > weight(trans->highest_trans_state))\n    trans->highest_trans_state = conf->trans_state;\n```\n\n----------------------------------------\n\nTITLE: Building Clang-Tidy Prerequisites\nDESCRIPTION: Make command to build required prerequisites for clang-tidy analysis.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/static_analysis.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(nproc) clang_tidy_prerequisites\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake\nDESCRIPTION: Configures the build process to include the source code directory for MySQL server compilation\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n```\n\n----------------------------------------\n\nTITLE: MySQL Test Dataset Values\nDESCRIPTION: A test dataset containing 10 rows of data with various MySQL data types including integers, floating point numbers, scientific notation values, dates, times and timestamps. Each row follows a consistent pattern with incrementing values.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/memory_tb2.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1\t1\t1\t1\t1\t1\t-5\t0.0\t1\t0.0\t1\t0.0\t1\t0.0\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t-1.17549435e-38\t-1.17549435e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1.175494352e-38\t1000-01-01\t838:59:58\t1970-01-02 00:00:01\t19700102000001\t1902\t2\t2\n```\n\n----------------------------------------\n\nTITLE: Disabling Missing Profile Warning\nDESCRIPTION: This snippet disables a warning related to missing profile information, likely during the build process.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n\"DISABLE_MISSING_PROFILE_WARNING()\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Data Directory (Pre-8.x)\nDESCRIPTION: Command for initializing a new data directory for MySQL versions before 8.x with specific configuration parameters for cross-platform compatibility.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/log_corruption/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./sql/mysqld --initialize-insecure --datadir=/tmp/5_7_9 --console --lower_case_table_names=1 --innodb_log_file_size=4M\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Tests Subdirectory\nDESCRIPTION: Adds the tests subdirectory only when unit testing is explicitly enabled, providing flexibility in build configuration\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/mysql_rest_service/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in Java\nDESCRIPTION: This snippet describes how to run Java Protocol Buffers conformance tests using Bazel. It specifies targets for both core and lite versions of the Java implementation. Ensure that Bazel is installed and Java is configured on the machine.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ bazel test //java/core:conformance_test //java/lite:conformance_test\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Number Sequence for MySQL\nDESCRIPTION: This line sets the starting point for error number assignments in the MySQL server, beginning at 1000.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/comp_err/msg_srv2client_multilang.txt#2025-04-21_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\nstart-error-number 1000\n```\n\n----------------------------------------\n\nTITLE: Fixed Container Format\nDESCRIPTION: Defines the format for fixed-size arrays containing field data elements.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/serialization/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n<fixed_container_format> ::= { <field_data> }+\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NDB Management API Test in CMake\nDESCRIPTION: Adds a test named 'mgmapi-t' using the NDB_ADD_TEST macro. It specifies the test source file and required libraries for linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/mgmapi/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(mgmapi-t mgmapi-t.cpp LIBS ndbmgmapi ndbgeneral)\n```\n\n----------------------------------------\n\nTITLE: Defining Abseil C++ Test: barrier_test\nDESCRIPTION: This snippet defines an Abseil C++ test for the barrier synchronization primitive, named `barrier_test`. It specifies the source file, compiler options `${ABSL_TEST_COPTS}`, and depends on `absl::synchronization`, `absl::time`, and `GTest::gmock_main`.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/synchronization/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n\"absl_cc_test(\n  NAME\n    barrier_test\n  SRCS\n    \\\"barrier_test.cc\\\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  DEPS\n    absl::synchronization\n    absl::time\n    GTest::gmock_main\n)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Test List\nDESCRIPTION: This sets a list of test names, which will be iterated over to create test executables. This variable holds the names of individual test suites or test programs.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(TESTS\n  gno_intervals\n  grow_calculator\n  gtids\n  heartbeat_codec\n  payload_event_buffer_istream\n  transaction_compression\n  transaction_payload_codec\n  gtid_tag\n  tsid_encoding\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring System Include Directories for GoogleMock\nDESCRIPTION: Adds system include directories for GoogleMock testing framework, enabling access to required header files for testing infrastructure\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executables (Loop)\nDESCRIPTION: This loop iterates through the list of test names defined in the `TESTS` variable. For each test, it creates an executable using `MYSQL_ADD_EXECUTABLE`, adds a test using `ADD_TEST`, and links necessary libraries. It also defines compiler definitions.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"FOREACH(test ${TESTS})\n  MYSQL_ADD_EXECUTABLE(${test}-t ${test}-t.cc\n    ADD_TEST ${test}\n    LINK_LIBRARIES mysql_gtid mysql_binlog_event_standalone gunit_small\n    COMPILE_DEFINITIONS \\\"${DISABLE_PSI_DEFINITIONS}\\\")\nENDFOREACH()\"\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Flags for Windows\nDESCRIPTION: This snippet adds a compiler flag (`/wd4251`) to the C++ flags specifically for Windows. This flag disables a specific warning related to DLL interfaces.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(WIN32)\n  # 'identifier' : class 'type' needs to have dll-interface to be used\n  # by clients of class 'type2'\n  SET(CMAKE_CXX_FLAGS \\\"${CMAKE_CXX_FLAGS} /wd4251\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Running C++ Tests with CMake\nDESCRIPTION: This snippet describes an alternative method for running C++ conformance tests using CMake. It requires that the tests are already set up to be discovered by CMake, using patterns to match relevant tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ ctest -R conformance_cpp_test\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Path and Dependencies for WebAuthn Plugin\nDESCRIPTION: Handles runtime path configurations and dependencies for the WebAuthn plugin. Sets up the install RPATH for FIDO2 libraries and adds a dependency on FIDO2 DLL symlinks if applicable.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libmysql/fido_client/authentication_webauthn/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF (INSTALL_RPATH_FOR_FIDO2)\n  ADD_INSTALL_RPATH_FOR_FIDO2(authentication_webauthn_client)\nENDIF()\n\nIF(TARGET symlink_fido2_dlls)\n  ADD_DEPENDENCIES(authentication_webauthn_client symlink_fido2_dlls)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Generating ZH_HANS Table\nDESCRIPTION: This snippet adds a custom command to generate the Chinese UCA9 table. It uses the `uca9dump` executable to convert the source file (`ZH_HANS_SRC_FILE`) into a C++ source file (`ZH_HANS_DST_FILE`). The `DEPENDS` keyword ensures that the command is executed only when the source file or the `uca9dump` executable is updated.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/strings/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_CUSTOM_COMMAND(\n  OUTPUT ${ZH_HANS_DST_FILE}\n  COMMAND uca9dump zh\n  --in_file=${ZH_HANS_SRC_FILE}\n  --out_file=${ZH_HANS_DST_FILE}\n  DEPENDS uca9dump ${ZH_HANS_SRC_FILE}\n  )\nADD_CUSTOM_TARGET(strings_zh_hans DEPENDS ${ZH_HANS_DST_FILE})\n```\n\n----------------------------------------\n\nTITLE: Including RapidJSON CMake File\nDESCRIPTION: This snippet includes a CMake file that provides configuration and support for the RapidJSON library. This file likely defines include paths and library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE(${CMAKE_SOURCE_DIR}/cmake/rapidjson.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Building MySQL Server Scheduler Static Library in CMake\nDESCRIPTION: Defines the ndbsched static library using CMake's ADD_LIBRARY command. This library includes components related to the MySQL Server scheduler implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(ndbsched STATIC\n  FastScheduler.cpp\n  LongSignal_nonmt.cpp\n  SimplePropertiesSection_nonmt.cpp\n  SimulatedBlock_nonmt.cpp\n  ThreadConfig.cpp\n  TimeQueue.cpp\n  TransporterCallback_nonmt.cpp\n  dummy_nonmt.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Java Sources for JTIE Unload Test in CMake\nDESCRIPTION: Defines the Java source file for the MyLoadUnloadTest class used in JTIE unload testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/unload/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(JAVA_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/test/MyLoadUnloadTest.java)\n```\n\n----------------------------------------\n\nTITLE: Setting PID File Path for MySQL Server in CMake\nDESCRIPTION: This snippet determines the appropriate PID file path for MySQL server based on the Linux distribution. It sets a default path if not already specified.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/rpm-common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF (\"${PIDFILE_RPM}\" STREQUAL \"\")\n  IF (LINUX_FEDORA)\n    SET(PIDFILE_RPM \"/run/mysqld/mysqld.pid\")\n  ELSE()\n    SET(PIDFILE_RPM \"/var/run/mysqld/mysqld.pid\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecated Function Warnings for uidna.cpp\nDESCRIPTION: Adds compiler flags to suppress deprecated declarations warnings specifically for the uidna.cpp file when using GCC or Clang. This addresses the deprecated uidna_toASCII_65 function.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# uidna_toASCII_65 is marked as deprecated\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  ADD_COMPILE_FLAGS(\n    ${ICU_VERSION_DIR}/source/common/uidna.cpp COMPILE_FLAGS \"-Wno-deprecated-declarations\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 for Abseil Archive\nDESCRIPTION: Shows how to generate the SHA256 hash for the Abseil archive URL using curl and sha256sum.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/FAQ.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL --output - https://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip | sha256sum -\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Dependencies with CMake\nDESCRIPTION: The CMake script checks the presence of specific header files and functions essential for building the MySQL server. It sets directories, configures file generation, and customizes build targets depending on the environment. Predefined functions are used to handle platform-specific needs for building the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libedit/libedit-20240808-3.1/src/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# See src/Makefile.am for original build dependencies.\n\nDISABLE_MISSING_PROFILE_WARNING()\n\nINCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR} )\nINCLUDE(CheckIncludeFile)\ninclude(CheckFunctionExists)\n\nCHECK_INCLUDE_FILES (sys/cdefs.h HAVE_SYS_CDEFS_H)\nCHECK_INCLUDE_FILES(term.h HAVE_TERM_H)\n\nIF(SOLARIS)\n  #On Solaris, default awk is next to unusable while the xpg4 one is ok.\n  IF(EXISTS /usr/xpg4/bin/awk)\n    SET(AWK_EXECUTABLE /usr/xpg4/bin/awk)\n  ENDIF()\nENDIF()\n\nIF(NOT AWK_EXECUTABLE)\n  FIND_PROGRAM(AWK_EXECUTABLE NAMES gawk awk DOC \"path to the awk executable\")\nENDIF()\nMESSAGE(STATUS \"AWK_EXECUTABLE is ${AWK_EXECUTABLE}\")\n\nMARK_AS_ADVANCED(AWK_EXECUTABLE)\nSET(AWK ${AWK_EXECUTABLE})\nCONFIGURE_FILE(makelist.in ${CMAKE_CURRENT_BINARY_DIR}/makelist @ONLY)\n\nSET(MAKELIST ${CMAKE_CURRENT_BINARY_DIR}/makelist)\n\nCHECK_C_SOURCE_COMPILES(\n  \"#include <stdlib.h>\\n#include <sys/types.h>\\n#include <pwd.h>\\nint main() {\\n  int ret = getpwnam_r(NULL, NULL, NULL, (size_t)0, NULL);\\n  return ret;\\n}\"\n  HAVE_GETPW_R_POSIX\n  )\n\n# POSIX.1c Draft 6\nCHECK_C_SOURCE_COMPILES(\n  \"#include <stdlib.h>\\n#include <sys/types.h>\\n#include <pwd.h>\\nint main() {\\n  struct passwd *pwd = getpwnam_r(NULL, NULL, NULL, 0);\\n  return pwd != NULL;\\n}\"\n  HAVE_GETPW_R_DRAFT\n)\n\nCHECK_FUNCTION_EXISTS(getline         HAVE_GETLINE)\n#    _FUNCTION_EXISTS(strlcpy         HAVE_STRLCPY) in configure.cmake\n#    _FUNCTION_EXISTS(strlcat         HAVE_STRLCAT) in configure.cmake\nCHECK_FUNCTION_EXISTS(vis             HAVE_VIS)\nCHECK_FUNCTION_EXISTS(unvis           HAVE_UNVIS)\nCHECK_FUNCTION_EXISTS(__secure_getenv HAVE___SECURE_GETENV)\nCHECK_FUNCTION_EXISTS(secure_getenv   HAVE_SECURE_GETENV)\n\nFUNCTION(MAKELIST_TARGET target outfile options infiles)\n  STRING(REPLACE \";\" \" \" infile_string \"${infiles}\")\n  LIST(REMOVE_ITEM infiles vi.h emacs.h common.h) # remove from DEPENDS\n  ADD_CUSTOM_COMMAND(\n    OUTPUT ${outfile}\n    COMMAND sh ${MAKELIST} ${options} ${infile_string} > ${outfile}\n    COMMENT \"makelist ${options} ${infile_string} > ${outfile}\"\n    DEPENDS ${infiles}\n    )\n  ADD_CUSTOM_TARGET(${target} DEPENDS ${outfile})\nENDFUNCTION()\n\nSET(BUILT_SOURCES vi.h emacs.h common.h fcns.h help.h func.h)\nSET(AHDR vi.h emacs.h common.h)\nSET(ASRC\n  ${CMAKE_CURRENT_SOURCE_DIR}/vi.c\n  ${CMAKE_CURRENT_SOURCE_DIR}/emacs.c\n  ${CMAKE_CURRENT_SOURCE_DIR}/common.c\n  )\n\nMAKELIST_TARGET(libedit_vi     vi.h     -h ${CMAKE_CURRENT_SOURCE_DIR}/vi.c)\nMAKELIST_TARGET(libedit_emacs  emacs.h  -h ${CMAKE_CURRENT_SOURCE_DIR}/emacs.c)\nMAKELIST_TARGET(libedit_common common.h -h ${CMAKE_CURRENT_SOURCE_DIR}/common.c)\nMAKELIST_TARGET(libedit_fcns   fcns.h   -fh \"${AHDR}\")\nMAKELIST_TARGET(libedit_help   help.h   -bh \"${ASRC}\")\nMAKELIST_TARGET(libedit_func   func.h   -fc \"${AHDR}\")\n\n# Add target dependencies, to compensate for the DEPENDS we removed above.\nADD_DEPENDENCIES(libedit_fcns libedit_vi libedit_emacs libedit_common)\nADD_DEPENDENCIES(libedit_func libedit_vi libedit_emacs libedit_common)\n\nINCLUDE_DIRECTORIES(\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CURSES_INCLUDE_PATH}\n)\n\nSET(LIBEDIT_SOURCES\n  chared.c\n  chartype.c\n  common.c\n  el.c\n  eln.c\n  emacs.c\n  filecomplete.c\n  hist.c\n  history.c\n  historyn.c\n  keymacro.c\n  literal.c\n  map.c\n  parse.c\n  prompt.c\n  read.c\n  readline.c\n  reallocarr.c\n  refresh.c\n  search.c\n  sig.c\n  terminal.c\n  tokenizer.c\n  tokenizern.c\n  tty.c\n  vi.c\n  ${BUILT_SOURCES}\n  ${LIBEDIT_EXTRA_SOURCES}\n  )\n\nIF(NOT HAVE_STRLCPY)\n  LIST(APPEND LIBEDIT_SOURCES strlcpy.c)\nENDIF()\nIF(NOT HAVE_STRLCAT)\n  LIST(APPEND LIBEDIT_SOURCES strlcat.c)\nENDIF()\nIF(NOT HAVE_VIS)\n  LIST(APPEND LIBEDIT_SOURCES vis.c)\nENDIF()\nIF(NOT HAVE_UNVIS)\n  LIST(APPEND LIBEDIT_SOURCES unvis.c)\nENDIF()\nIF(FREEBSD AND HAVE_GETLINE)\n  ADD_DEFINITIONS(-D_WITH_GETLINE=1)\nENDIF()\n\nADD_LIBRARY(edit STATIC ${LIBEDIT_SOURCES})\nTARGET_LINK_LIBRARIES(edit ${CURSES_LIBRARY})\nADD_DEPENDENCIES(edit libedit_vi libedit_emacs libedit_common libedit_fcns libedit_help libedit_func)\n\n\n# clang may complain:\n# converts between pointers to integer types with different sign\nMY_CHECK_C_COMPILER_FLAG(\"-Wpointer-sign\" HAVE_POINTER_SIGN)\nIF(HAVE_POINTER_SIGN)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-pointer-sign\")\nENDIF()\n\nMY_CHECK_C_COMPILER_FLAG(\"-Wstringop-overflow\" HAVE_STRINGOP_OVERFLOW)\nIF(HAVE_STRINGOP_OVERFLOW)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-stringop-overflow\")\nENDIF()\n\nMY_CHECK_C_COMPILER_FLAG(\"-Wunused-result\" HAVE_UNUSED_RESULT)\nIF(HAVE_UNUSED_RESULT)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-unused-result\")\nENDIF()\n\nMY_CHECK_C_COMPILER_FLAG(\"-Wstringop-truncation\" HAVE_STRINGOP_TRUNCATION)\nIF(HAVE_STRINGOP_TRUNCATION)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-stringop-truncation\")\nENDIF()\n\n# warning: comparing the result of pointer addition\nMY_CHECK_C_COMPILER_FLAG(\"-Waddress\" HAVE_ADDRESS)\nIF(HAVE_ADDRESS)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-address\")\nENDIF()\n\n# warning: pointer may be used after realloc\nMY_CHECK_C_COMPILER_FLAG(\"-Wuse-after-free\" HAVE_USE_AFTER_FREE)\nIF(HAVE_USE_AFTER_FREE)\n  TARGET_COMPILE_OPTIONS(edit PRIVATE \"-Wno-use-after-free\")\nENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Backup Component in CMake\nDESCRIPTION: This snippet disables a missing profile warning and adds the mysqlbackup component to the MySQL server project. It specifies the source files, sets it as a module-only component, and links it with the library_mysys library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/mysqlbackup/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nMYSQL_ADD_COMPONENT(mysqlbackup\n  mysqlbackup.cc\n  backup_page_tracker.cc\n  MODULE_ONLY\n  LINK_LIBRARIES library_mysys\n  )\n```\n\n----------------------------------------\n\nTITLE: Running C++ Tests with Bazel\nDESCRIPTION: This snippet demonstrates running conformance tests for the C++ implementation using Bazel, showcasing how to execute the tests defined for the C++ source code. This requires that Bazel is installed and the environment is configured correctly.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ bazel test //src:conformance_test\n```\n\n----------------------------------------\n\nTITLE: Initializing Ubuntu-specific Variables\nDESCRIPTION: Sets default empty values for Ubuntu-specific packaging variables related to AppArmor and debug symbol packages. These will be conditionally populated based on the target platform.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Only used on Ubuntu\nSET (DEB_CONTROL_BDEPS \"\")\nSET (DEB_RULES_INSTALL_APPARMOR \"\")\nSET (DEB_RULES_APPARMOR_LOAD \"\")\nSET (DEB_INSTALL_SERVER_APPARMOR \"\")\nSET (DEB_INIT_SERVER_APPARMOR \"\")\nSET (DEB_INIT_ROUTER_APPARMOR \"\")\n# Only used on Ubuntu 16.04 for manually created debug symbol packages\nSET (DEB_CONTROL_DBGSYM \"\")\nSET (DEB_RULES_STRIP \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Plain LOB Source Files in CMake\nDESCRIPTION: This snippet defines the source files required for the Plain LOB functionality in MySQL using the SET command in CMake. It includes both source and header files essential for the development of LOB management.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/innodb/lob/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(PLOB_SRC_FILES\\n  lot0lot.cc\\n  lot0buf.cc\\n  lot0dat.cc\\n  lot0dat.h\\n  lot0lob.h\\n  lot0lob.cc\\n  mach0data.h\\n  fut0lst.cc\\n  fil0fil.cc\\n  mtr0log.cc\\n  ut0dbg.cc\\n  lob0int.cc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for Random Internal Randen in CMake\nDESCRIPTION: Defines a CMake test target for testing the internal randen component of Abseil's random library. This target compiles and links the randen_test.cc file with dependencies on absl::random_internal_randen, absl::type_traits, and GTest.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/random/CMakeLists.txt#2025-04-21_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_test(\n  NAME\n    random_internal_randen_test\n  SRCS\n    \"internal/randen_test.cc\"\n  COPTS\n    ${ABSL_TEST_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::random_internal_randen\n    absl::type_traits\n    GTest::gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Flags (GNU Compiler Specific)\nDESCRIPTION: This snippet adds specific compile flags to the `payload_event_buffer_istream-t.cc` source file when using the GNU compiler (`MY_COMPILER_IS_GNU`) and when profile-guided optimization is enabled (`FPROFILE_USE`). It suppresses `-Wno-array-bounds` and `-Wno-stringop-overflow` warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(MY_COMPILER_IS_GNU AND FPROFILE_USE)\n  ADD_COMPILE_FLAGS(payload_event_buffer_istream-t.cc COMPILE_FLAGS\n    \\\"-Wno-array-bounds\\\"\n    \\\"-Wno-stringop-overflow\\\"\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pthread Flags in CMake\nDESCRIPTION: This snippet iterates through various properties of the Threads::Threads target to compile pthread flags. It collects link libraries, options, include directories, compile options, definitions, and sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/gperftools/gperftools-2.15/CMakeLists.txt#2025-04-21_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nset(PTHREAD_FLAGS)\nforeach(flag IN ITEMS INTERFACE_LINK_LIBRARIES INTERFACE_LINK_OPTIONS INTERFACE_INCLUDE_DIRECTORIES INTERFACE_COMPILE_OPTIONS INTERFACE_COMPILE_DEFINITIONS INTERFACE_SOURCES)\n  get_target_property(T Threads::Threads ${flag})\n  if(T)\n    set(PTHREAD_FLAGS \"${PTHREAD_FLAGS} ${T}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Exporting libcbor BUILD file\nDESCRIPTION: This snippet exports the libcbor BUILD file to make it available to the top-level WORKSPACE file. This enables Bazel to locate and use the build definitions for libcbor.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/Bazel.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nexports_files([\"libcbor.BUILD\"]))\n```\n```\n\n----------------------------------------\n\nTITLE: Resetting the project with Maven\nDESCRIPTION: This command completely resets the project to its initial state by cleaning the build and removing any modifications, including the patched source code. It uses the `dev` profile during the clean operation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/ext/jit-executor-lib/README.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn -Ddev clean\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Keyring Components Build in CMake\nDESCRIPTION: This CMake snippet configures the build for MySQL keyring components. It disables missing profile warnings and adds subdirectories for common code and the keyring_file component implementation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/keyrings/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDISABLE_MISSING_PROFILE_WARNING()\n\nADD_SUBDIRECTORY(common)\n\n# Keyring_file component\nADD_SUBDIRECTORY(keyring_file)\n```\n\n----------------------------------------\n\nTITLE: Configuring log_internal_proto Target in Abseil\nDESCRIPTION: CMake configuration for the log_internal_proto target, which provides protocol buffer integration for the Abseil logging system. It specifies source files, headers, compiler options, and dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/abseil/abseil-cpp-20230802.1/absl/log/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nabsl_cc_library(\n  NAME\n    log_internal_proto\n  SRCS\n    \"internal/proto.cc\"\n  HDRS\n    \"internal/proto.h\"\n  COPTS\n    ${ABSL_DEFAULT_COPTS}\n  LINKOPTS\n    ${ABSL_DEFAULT_LINKOPTS}\n  DEPS\n    absl::base\n    absl::config\n    absl::core_headers\n    absl::strings\n    absl::span\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Router License and README Files\nDESCRIPTION: This snippet sets variables that define the paths to the router's license and README files. These variables are used later during installation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n\"SET(ROUTER_LICENSE_FILE \\\"${CMAKE_SOURCE_DIR}/router/LICENSE.router\\\")\nSET(ROUTER_README_FILE \\\"${CMAKE_SOURCE_DIR}/router/README.router\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Root CA Generation\nDESCRIPTION: Generates the root CA key and certificate, and sets up root CA directory structure\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out ca/root.key 2048\nopenssl req -new -x509 '-sha256' -key ca/root.key -out ca/root.crt -days 7200 -subj \"/O=Oracle/OU=MySQL/CN=Root CA\"\n\nmkdir ca/root.certs\ntouch ca/root.index.txt\ntouch ca/root.index.txt.attr\necho '00' > ca/root.serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Test for MySQL Server Java API in CMake\nDESCRIPTION: Sets up a test command for the Java API using the Java executable. It specifies the classpath, library path, and test class to run.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/ndbjtie/jtie/test/myjapi/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(JAR \"${JAVA_NDB_VERSION}.jar\")\nset(JTIE_MYJAPI_JAR \"${CMAKE_CURRENT_BINARY_DIR}/jtie-test-myjapi-${JAR}\")\n\nADD_TEST(\n  NAME test_jtie_myjapi\n  COMMAND\n  ${Java_JAVA_EXECUTABLE_PATH} \"-ea\" \"-Xcheck:jni\"\n  \"-classpath\" \"${JTIE_MYJAPI_JAR}\"\n  \"-Djava.library.path=${CMAKE_CURRENT_BINARY_DIR}/${JAVA_SUBDIR}\"\n  \"test.MyJapiTest\"\n)\nSET_TESTS_PROPERTIES(test_jtie_myjapi PROPERTIES LABELS \"NDB\")\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Test Configuration\nDESCRIPTION: Test configuration for foreign key test with basic settings and single test target\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--06-tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testFK\nargs: -n Basic1 T1\nmax-time: 180\n```\n\n----------------------------------------\n\nTITLE: Building the C Extension from Source\nDESCRIPTION: Commands to package and install the Protocol Buffers C extension from source using PEAR and PECL. Ensure 'pear', 'gcc', 'make', and libtool are installed.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/php/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ext/google/protobuf\npear package\nsudo pecl install protobuf-{VERSION}.tgz\n```\n\n----------------------------------------\n\nTITLE: Configuring CXX Compiler Warning Flag\nDESCRIPTION: Checks for and appends the -Wno-unused-local-typedefs compiler warning flag to CMAKE_CXX_FLAGS if supported by the compiler.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/serialization/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Warning Flag\nDESCRIPTION: This snippet checks for compiler support for the `-Wno-unused-local-typedefs` warning flag. If the compiler supports it, the flag is appended to the `CMAKE_CXX_FLAGS` variable, enabling the warning.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/group_replication/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Parsing Dash After Set\nDESCRIPTION: Handles parsing a dash character after a set expression. The dash could be a set difference operator, the start of a '--' operator, or a literal character.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/icu/icu-release-73-1/source/i18n/regexcst.txt#2025-04-21_snippet_9\n\nLANGUAGE: state-machine\nCODE:\n```\nset-set-dash:\n    '['                  n  set-open      ^set-after-set           doSetBeginDifference1\n    '-'                  n  set-after-op                           doSetDifference2\n    default                 set-after-lit                          doSetAddDash\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for OpenSSL Plugin\nDESCRIPTION: Configures private include directories for the router_openssl target, allowing access to specific header files in the project's include directories.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/openssl/src/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(router_openssl PRIVATE\n  ${CMAKE_CURRENT_BINARY_DIR}/../include/\n  ${CMAKE_CURRENT_SOURCE_DIR}/../include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Router Test Helpers\nDESCRIPTION: Configures include directories for the router test helpers library, making headers publicly available to dependent targets.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(routertest_helpers\n  PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/helpers\n  ${PROJECT_SOURCE_DIR}/src/harness/shared/include/\n  )\n```\n\n----------------------------------------\n\nTITLE: Running Protocol Buffers Tests in Ruby\nDESCRIPTION: This snippet provides instructions to run Ruby Protocol Buffers conformance tests with Bazel. It involves checking the Ruby platform and setting the environment for the test execution.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/protobuf-24.4/conformance/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ [[ $(ruby --version) == \\\"ruby\\\"* ]] || echo \\\"Select a C Ruby!\\\" $ bazel test //ruby:conformance_test --define=ruby_platform=c \\ \\u0026\\u0026\\u0026 --action_env=PATH --action_env=GEM_PATH --action_env=GEM_HOME\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Plugin Directories in CMake\nDESCRIPTION: This CMake code adds the source directory for compilation and conditionally includes the test directory when unit testing is enabled via the WITH_UNIT_TESTS flag.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(src)\n\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Node Restart Test Configuration - Change Log Parts\nDESCRIPTION: Test configuration for node restart scenario with changes in log parts, involving two test targets\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/daily-devel--06-tests.txt#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmd: testNodeRestart\nargs: -n ChangeNumLogPartsINR T1 D1\nmax-time : 800\n```\n\n----------------------------------------\n\nTITLE: Including GMock Headers\nDESCRIPTION: Adds GMock include directories to the system include path for test compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libs/serialization/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0075\nDESCRIPTION: This snippet checks if the CMake policy CMP0075 exists and, if it does, sets it to 'NEW'. This policy likely controls how libraries are linked in check executables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"IF(POLICY CMP0075)\n  CMAKE_POLICY(SET CMP0075 NEW)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Checking C++ Compiler Warning\nDESCRIPTION: This snippet checks if the C++ compiler supports the `-Wno-unused-local-typedefs` warning flag. If the flag is supported, it appends the flag to the `CMAKE_CXX_FLAGS` variable. This is used to suppress specific compiler warnings.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"MY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \\\" ${HAS_WARN_FLAG}\\\")\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Adding ndbd_malloc Test Target in CMake\nDESCRIPTION: Creates a test target for ndbd_malloc_impl using the NDB_ADD_TEST custom command. This test is linked against the unit test libraries.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/kernel/vm/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nNDB_ADD_TEST(ndbd_malloc-t ndbd_malloc_impl.cpp LIBS ${ALL_UNIT_TEST_LIBS} ${ALL_UNIT_TEST_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Server Sample Data in Tabular Format\nDESCRIPTION: This snippet shows a sample dataset in a tab-separated format, likely used for testing or populating a MySQL database table. It contains three columns: two for string values and one for integer values.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/funcs_1/t7.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na`\ta`\t\t-5000\naaa\taaa\t\t-4999\nabaa\tabaa\t\t-4998\nacaaa\tacaaa\t\t-4997\nadaaaa\tadaaaa\t\t-4996\naeaaaaa\taeaaaaa\t\t-4995\nafaaaaaa\tafaaaaaa\t\t-4994\nagaaaaaaa\tagaaaaaaa\t\t-4993\na^aaaaaaaa\ta^aaaaaaaa\t\t-4992\na_aaaaaaaaa\ta_aaaaaaaaa\t\t-4991\n```\n\n----------------------------------------\n\nTITLE: Preventing installation of cbor.h\nDESCRIPTION: This snippet prevents the installation of the `cbor.h` header file to the specified installation directory. It is using the `do_not_install` command/macro.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libcbor/libcbor-0.11.0/src/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ndo_not_install(FILES cbor.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Test File for IO Plugin with CMake\nDESCRIPTION: This CMake command adds a test file specifically for the IO plugin module, detailing library dependencies and additional source files required. The macro definition ensures that static definitions are used when compiling the target to avoid dynamic linkage.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_file(test_io_plugin.cc\n  MODULE io\n  LIB_DEPENDS io_component;test-helpers\n  EXTRA_SOURCES ../src/io_plugin.cc\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_COMPILE_DEFINITIONS(routertest_io_io_plugin PRIVATE -DIO_STATIC_DEFINE=1)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Version File\nDESCRIPTION: This snippet includes a CMake file that handles version management for the project.  It loads version-related information into CMake variables.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE(cmake/version.cmake)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for MySQL Tests\nDESCRIPTION: This section of the configuration file sets up system and project-specific include directories required for building and testing MySQL components. It relies on GMock include directories and ensures access to project test sources.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/io/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tests/)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MySQL Keyring Encryption Test\nDESCRIPTION: Sets up the list of source files required for building the keyring encryption test. Includes files for options, components subsystem, and the main keyring encryption logic.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/components/test/keyring_encryption_test/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(KEYRING_ENCRYPTION_TEST_SOURCE\n  # Options\n  options.cc\n\n  # Components subsystem\n  components.cc\n\n  # Main\n  keyring_encryption.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake snippet adds the 'src' subdirectory to the build process. It also conditionally adds the 'tests' subdirectory if the `WITH_UNIT_TESTS` option is enabled.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/connection_pool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src)\nIF(WITH_UNIT_TESTS)\n  ADD_SUBDIRECTORY(tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Include Directories in CMake\nDESCRIPTION: This snippet adds a directory to the include path for the CMake project. It specifies the path to the 'example' component's header files so that they can be included during compilation.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/components/mysql_server/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${CMAKE_SOURCE_DIR}/components/example\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Files\nDESCRIPTION: This snippet sets the test files needed for the testing process, including server key and certificate files used during testing.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/http/tests/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TEST_FILES\n  server-key.pem\n  server-cert.pem\n  )\nCOPY_TEST_FILES(${CMAKE_SOURCE_DIR}/mysql-test/std_data/ \"${TEST_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Thread Lock Test Executable\nDESCRIPTION: Creates a test executable for the thread locking functionality by compiling thr_lock.cc with the MAIN definition.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(thr_lock\n  thr_lock.cc\n  EXCLUDE_FROM_PGO\n  LINK_LIBRARIES mysys\n  SKIP_INSTALL\n  COMPILE_DEFINITIONS MAIN\n  )\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Creation\nDESCRIPTION: Creates the base directory structure for certificate storage\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/bug27491518/cert_generation.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ca\nmkdir server\nmkdir clients\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake\nDESCRIPTION: This snippet adds the 'src/' directory to the CMake build system, allowing it to include all the source files located there. This setup is essential for organizing the project's code structure.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/plugin_info/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(src/)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files List in CMake for MySQL Server\nDESCRIPTION: This snippet defines a CMake variable named TARGET_HEADERS which contains a list of header files to be included in the MySQL server build. These headers include various utility classes and functionality such as ABI helpers, array views, and packet handling.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/libs/mysql/abi_helpers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TARGET_HEADERS\n  abi_helpers.h\n  array_view.h\n  detail/array_base.h\n  field.h\n  packet.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building InnoDB Utilities\nDESCRIPTION: Configures the build for InnoDB-specific utilities innochecksum and ibd2sdi with their dependencies and compiler flags.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/utilities/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(innochecksum\n  innochecksum.cc\n  COMPONENT Server\n  DEPENDENCIES GenError\n  LINK_LIBRARIES mysys innodb_zipdecompress ext::lz4 extra::rapidjson\n  )\nTARGET_COMPILE_DEFINITIONS(innochecksum PRIVATE UNIV_NO_ERR_MSGS UNIV_LIBRARY)\n\nMYSQL_ADD_EXECUTABLE(ibd2sdi\n  ibd2sdi.cc\n  COMPONENT Server\n  DEPENDENCIES GenError\n  LINK_LIBRARIES mysys innodb_zipdecompress ext::lz4 extra::rapidjson\n  )\nTARGET_COMPILE_DEFINITIONS(ibd2sdi PRIVATE UNIV_NO_ERR_MSGS UNIV_LIBRARY DISABLE_PSI_MEMORY)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Routing Library for Testing\nDESCRIPTION: Creates a static library from the routing target and sets compile definitions for static linking.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/routing/tests/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSTATICLIB_FROM_TARGET(routing_export_all routing)\nTARGET_COMPILE_DEFINITIONS(routing_export_all\n  PUBLIC ROUTING_STATIC_DEFINE=1)\n```\n\n----------------------------------------\n\nTITLE: Including GMock Directories\nDESCRIPTION: This command adds the Google Mock (GMock) include directories to the list of directories to search for header files. This is necessary for compiling tests that use GMock.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/binlogevents/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\"\n```\n\n----------------------------------------\n\nTITLE: Setting Test Data Directory Definitions\nDESCRIPTION: Defines paths for SSL test data and CMake source directories used in tests.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nADD_DEFINITIONS(-DSSL_TEST_DATA_DIR=\"${CMAKE_SOURCE_DIR}/mysql-test/std_data/\")\nADD_DEFINITIONS(-DCMAKE_SOURCE_DIR=\"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Test Executable\nDESCRIPTION: Creates an executable for signal testing with MySQL system library dependencies.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/tests/component/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nMYSQL_ADD_EXECUTABLE(signal_me\n  signal_me.cc\n  LINK_LIBRARIES mysys\n  COMPONENT Router\n  SKIP_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Warnings for Apple Clang\nDESCRIPTION: This snippet suppresses specific warnings when using the Clang compiler on macOS, ensuring compatibility with Xcode.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/protobuf/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(APPLE)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-deprecated-declarations\")\n  STRING_APPEND(CMAKE_CXX_FLAGS \" -Wno-shorten-64-to-32\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Exploring Existential Questions through Literature\nDESCRIPTION: Reflection on personal identity, origin, and purpose through comparative reading of philosophical and historical texts\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysql-test/std_data/lob/frankenstein.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Who was I? What was I? Whence did I come? What was my destination? These questions continually recurred, but I was unable to solve them.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific Source Files in CMake\nDESCRIPTION: Conditionally adds Windows-specific source files for the NDB port library. Uses a forked version of 'nt_servc.cc' to avoid symbol conflicts with the server library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/src/common/portlib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32)\n\n# Bug#27303447 - WL#9809 declared function \"signal_event()\" in\n# \"nt_servc.cc\" and defined the same in server library. But \"nt_servc.cc\"\n# is a general file also used in cluster libraries. So, when building cluster,\n# compiler gives linking error for cluster libraries as the definition for the\n# symbol \"signal_event()\" is not found in cluster libraries. Untill the issue\n# with \"nt_servc.cc\" gets fixed as a temporary solution have forked the old code\n# of \"nt_servc.cc\" into \"ndb_nt_servc.cc\"\n\n# SET(EXTRA_SRC ${CMAKE_SOURCE_DIR}/sql/nt_servc.cc)\n  SET(EXTRA_SRC ndb_nt_servc.cc)\nENDIF(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Target Flag for MySQL Server\nDESCRIPTION: This snippet sets a TARGET_LINUX flag to 'true' if the build is for Linux, and 'false' otherwise. This flag is used in some scripts.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/scripts/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# some scripts use  @TARGET_LINUX@\nIF(LINUX)\n  SET(TARGET_LINUX \"true\")\nELSE()\n  SET(TARGET_LINUX \"false\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Test for Validating Test Case Files in CMake\nDESCRIPTION: Finds all test case files and creates a test that validates them using the ATRT tool.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/storage/ndb/test/run-test/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB testcase_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"*-tests.txt\")\nADD_TEST(NAME check_testcase_files\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  COMMAND atrt --check-testcase-files ${testcase_files})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GMock\nDESCRIPTION: This snippet sets the include directories for the GMock testing framework. It uses the `INCLUDE_DIRECTORIES` command to add the GMock include directories to the CMake include path.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/router/src/harness/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(SYSTEM ${GMOCK_INCLUDE_DIRS})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Compilation and Linking\nDESCRIPTION: Sets up the compilation and linking of each test executable, including dependencies on GUnit, MySQL GCS library, and LZ4 compression library.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(tpath ${GCS_INTERFACE_TESTS} ${GCS_XCOM_TESTS})\n  GET_FILENAME_COMPONENT(test ${tpath} NAME)\n  MYSQL_ADD_EXECUTABLE(${test}-t ${tpath}-t.cc\n    ADD_TEST ${test}\n    ENABLE_EXPORTS\n    LINK_LIBRARIES gunit_small mysqlgcs ext::lz4\n    )\n  SET(GCS_UNIT_TESTS \"${GCS_UNIT_TESTS}\" \"${test}-t\")\n  IF(WIN32)\n    TARGET_LINK_OPTIONS(${test}-t PRIVATE /ignore:4217 /ignore:4286)\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Interface Test Paths\nDESCRIPTION: Defines the list of interface test files to be compiled, focusing on core GCS functionality like message handling and tagged locks.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/libmysqlgcs/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GCS_INTERFACE_TESTS\n  interface/gcs_message\n  interface/gcs_tagged_lock)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings in CMake\nDESCRIPTION: This snippet checks for certain C++ compiler warnings and appends them to the compiler flags if they are available. It primarily affects the CMake configuration of the project.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/unittest/gunit/containers/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMY_CHECK_CXX_COMPILER_WARNING(\"-Wno-unused-local-typedefs\" HAS_WARN_FLAG)\nIF(HAS_WARN_FLAG)\n  STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Processing Debian Package Template Files\nDESCRIPTION: Processes and configures all template files from the packaging directory. It creates the debian/ directory structure, filters out irrelevant files based on build type, handles conditional systemd files, and applies variable substitutions to generate the final packaging files.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/packaging/deb-in/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# All files are configured and copied to the debian/ directory, which is used\n# by debuild to make the packages\nSET (DEB_ROOT ${CMAKE_SOURCE_DIR}/packaging/deb-in)\nFILE(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/debian)\nFILE(GLOB_RECURSE SOURCEFILES RELATIVE \"${DEB_ROOT}\" \"${DEB_ROOT}/*\")\n# Skip the copyright file from the \"other\" product type\nLIST(REMOVE_ITEM SOURCEFILES \"copyright.${DEB_REMOVEPATTERN}\")\nLIST(REMOVE_ITEM SOURCEFILES \"CMakeLists.txt\")\n# Don't install systemd file on systems without systemd\nIF(DEB_INSTALL_SERVER_SYSTEMD STREQUAL \"\")\n\tLIST(REMOVE_ITEM SOURCEFILES \"mysql-packagesource-server.mysql.service.in\")\nENDIF()\nFOREACH (SOURCEFILE ${SOURCEFILES})\n  STRING(REGEX REPLACE \"-packagesource\" \"-${DEB_PRODUCTNAME}\"\n    TMPFILE ${SOURCEFILE})\n  # Strip away the input file endings from the destination filenames\n  STRING(REGEX REPLACE \".in$\" \"\" TMPFILE ${TMPFILE})\n  STRING(REGEX REPLACE \".gpl$\" \"\" TMPFILE ${TMPFILE})\n  STRING(REGEX REPLACE \".com$\" \"\" DESTFILE ${TMPFILE})\n  CONFIGURE_FILE(\"${DEB_ROOT}/${SOURCEFILE}\"\n    \"${CMAKE_BINARY_DIR}/debian/${DESTFILE}\" @ONLY)\nENDFOREACH()\nEXECUTE_PROCESS(\n  COMMAND chmod +x ${CMAKE_BINARY_DIR}/debian/rules\n)\n```\n\n----------------------------------------\n\nTITLE: Adding kqueue Timers Support\nDESCRIPTION: Includes kqueue timers implementation if the platform supports it (typically BSDs).\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/mysys/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HAVE_KQUEUE_TIMERS)\n  LIST(APPEND MYSYS_SOURCES kqueue_timers.cc)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Add Custom Targets CMake\nDESCRIPTION: This snippet defines custom targets for copying, linting, generating HTML, generating partial HTML, and gzipping man pages. These targets depend on the generated files from the custom commands.\nSOURCE: https://github.com/mysql/mysql-server/blob/trunk/extra/libfido2/libfido2-1.15.0/man/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(man_copy DEPENDS ${COPY_FILES})\nadd_custom_target(man_lint DEPENDS ${LINT_FILES})\nadd_custom_target(man_html DEPENDS ${HTML_FILES})\nadd_custom_target(man_html_partial DEPENDS ${HTML_PARTIAL_FILES})\nadd_custom_target(man_gzip DEPENDS ${GZ_FILES})\n```"
  }
]