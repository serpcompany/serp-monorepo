[
  {
    "owner": "keycloak",
    "repo": "keycloak",
    "content": "TITLE: Starting Keycloak in Development Mode\nDESCRIPTION: Command to start Keycloak in development mode after downloading and extracting the distribution package. This command initializes the server with development settings for testing and exploration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/kc.[sh|bat] start-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak HTTP/HTTPS Settings\nDESCRIPTION: Configuration options for HTTP and HTTPS server settings including ports, SSL/TLS certificates, authentication, and performance tuning parameters.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n--http-enabled <true|false>\n--http-host <host>\n--http-port <port>\n--https-port <port>\n--https-certificate-file <file>\n--https-certificate-key-file <file>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-protocols <protocols>\n```\n\n----------------------------------------\n\nTITLE: Configuring i18next for Keycloak translations\nDESCRIPTION: Configuration for setting up i18next with fetch backend to load Keycloak translations. This allows accessing the built-in translation files provided by Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nbackend: {\n  loadPath: `http://localhost:8180/resources/master/admin/{{lng}}`,\n  parse: (data: string) => {\n    const messages = JSON.parse(data);\n\n    return Object.fromEntries(\n      messages.map(({ key, value }) => [key, value])\n    );\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Client Roles API Endpoints\nDESCRIPTION: API endpoints for managing client-specific roles in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /{realm}/clients/{id}/roles\nGET /{realm}/clients/{id}/roles\nGET /{realm}/clients/{id}/roles/{role-name}\nPUT /{realm}/clients/{id}/roles/{role-name}\nDELETE /{realm}/clients/{id}/roles/{role-name}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Security Configuration Options\nDESCRIPTION: HTTPS security settings including certificate configuration, key stores, and protocol settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--https-certificate-file <file>\n--https-certificate-key-file <file>\n--https-certificates-reload-period <reload period>\n--https-cipher-suites <ciphers>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-key-store-type <type>\n--https-port <port>\n--https-protocols <protocols>\n--https-trust-store-file <file>\n--https-trust-store-password <password>\n--https-trust-store-type <type>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Development Mode\nDESCRIPTION: Command to start the Keycloak server in development mode with optional parameters. This mode is intended for local development or testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start-dev [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Production Mode\nDESCRIPTION: This command is used to start the Keycloak server in production mode. It supports various options for configuring the server, including cache settings, database configuration, and feature toggles.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Keycloak HTTP Configuration Parameters\nDESCRIPTION: Command-line options for configuring HTTP server settings including port, host, threading, and path configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-enabled <true|false>\n--http-host <host>\n--http-max-queued-requests <requests>\n--http-pool-max-threads <threads>\n--http-port <port>\n--http-relative-path <path>\n```\n\n----------------------------------------\n\nTITLE: Setting up KeycloakProvider in React application\nDESCRIPTION: Example of how to initialize the KeycloakProvider component in your React application hierarchy to configure the client, realm, and server URL for Keycloak integration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { KeycloakProvider } from \"@keycloak/keycloak-ui-shared\";\n\n//...\n\n<KeycloakProvider environment={{\n      authServerUrl: \"http://localhost:8080\",\n      realm: \"master\",\n      clientId: \"security-admin-console\"\n  }}>\n  {/* rest of you application */}\n</KeycloakProvider>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Production\nDESCRIPTION: Command to start the Keycloak server in production mode with optional parameters for customization.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Command-Line Usage in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the Keycloak command-line tool. It shows how to run the kc.sh script with options and commands.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testDefaultToHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh [OPTIONS] [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Production Mode\nDESCRIPTION: Example of how to start the Keycloak server in production mode. This command is used for deploying Keycloak in a production environment.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testDefaultToHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Hostname Settings\nDESCRIPTION: Configuration options for setting up server hostname, admin console access, and hostname-related security settings. Includes options for dynamic hostname resolution and debugging.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n--hostname <hostname|URL>\n--hostname-admin <URL>\n--hostname-backchannel-dynamic <true|false>\n--hostname-debug <true|false>\n--hostname-strict <true|false>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak in Development Mode\nDESCRIPTION: Command to start Keycloak in development mode using Java with an H2 database and HTTP enabled.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -jar server/target/lib/quarkus-run.jar start-dev\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Admin Client Usage\nDESCRIPTION: Demonstrates initialization, authentication, and basic operations with the Keycloak Admin Client including user management and realm configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport KcAdminClient from '@keycloak/keycloak-admin-client';\n\n// To configure the client, pass an object to override any of these  options:\n// {\n//   baseUrl: 'http://127.0.0.1:8080',\n//   realmName: 'master',\n//   requestOptions: {\n//     /* Fetch request options https://developer.mozilla.org/en-US/docs/Web/API/fetch#options */\n//   },\n// }\nconst kcAdminClient = new KcAdminClient();\n\n// Authorize with username / password\nawait kcAdminClient.auth({\n  username: 'admin',\n  password: 'admin',\n  grantType: 'password',\n  clientId: 'admin-cli',\n  totp: '123456', // optional Time-based One-time Password if OTP is required in authentication flow\n});\n\n// List first page of users\nconst users = await kcAdminClient.users.find({ first: 0, max: 10 });\n\n// find users by attributes\nconst users = await kcAdminClient.users.find({ q: \"phone:123\" });\n\n// Override client configuration for all further requests:\nkcAdminClient.setConfig({\n  realmName: 'another-realm',\n});\n\n// This operation will now be performed in 'another-realm' if the user has access.\nconst groups = await kcAdminClient.groups.find();\n\n// Set a `realm` property to override the realm for only a single operation.\n// For example, creating a user in another realm:\nawait kcAdminClient.users.create({\n  realm: 'a-third-realm',\n  username: 'username',\n  email: 'user@example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server\nDESCRIPTION: Basic command to start the Keycloak server with optional configuration parameters. Supports production deployment with various cache, database, and hostname configuration options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Development Mode\nDESCRIPTION: Command to start the Keycloak server in development mode with optional parameters. This is used for local development or testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start-dev [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Health and Metrics\nDESCRIPTION: Settings for enabling and configuring health check endpoints and metrics collection.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n--health-enabled <true|false>\n--metrics-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Admin Configuration\nDESCRIPTION: Options for setting up the initial admin account and client credentials during master realm creation. Includes temporary admin username/password and client id/secret settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n                     Client id for the temporary bootstrap admin service account. Used only when\n                       the master realm is created. Available only when bootstrap admin client\n                       secret is set. Default: temp-admin.\n--bootstrap-admin-client-secret <client secret>\n                     Client secret for the temporary bootstrap admin service account. Used only\n                       when the master realm is created. Use a non-CLI configuration option for\n                       this option if possible.\n--bootstrap-admin-password <password>\n                     Temporary bootstrap admin password. Used only when the master realm is\n                       created. Use a non-CLI configuration option for this option if possible.\n--bootstrap-admin-username <username>\n                     Temporary bootstrap admin username. Used only when the master realm is\n                       created. Available only when bootstrap admin password is set. Default:\n                       temp-admin.\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Keycloak Server Runtime\nDESCRIPTION: Command for building an optimized server runtime for Keycloak. This process creates a new and optimized server image with specified options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testDefaultToHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Settings for Keycloak Server\nDESCRIPTION: Detailed options for setting up HTTP and HTTPS listeners, including ports, SSL/TLS configurations, thread pools, and metrics. These settings control how the Keycloak server handles incoming connections and secures communication.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-enabled <true|false>\n                     Enables the HTTP listener. Enabled by default in development mode. Typically\n                       not enabled in production unless the server is fronted by a TLS termination\n                       proxy. Default: false.\n--http-host <host>   The HTTP Host. Default: 0.0.0.0.\n--http-max-queued-requests <requests>\n                     Maximum number of queued HTTP requests. Use this to shed load in an overload\n                       situation. Excess requests will return a \"503 Server not Available\" response.\n--http-metrics-histograms-enabled <true|false>\n                     Enables a histogram with default buckets for the duration of HTTP server\n                       requests. Default: false. Available only when metrics are enabled.\n--http-metrics-slos <list of buckets>\n                     Service level objectives for HTTP server requests. Use this instead of the\n                       default histogram, or use it in combination to add additional buckets.\n                       Specify a list of comma-separated values defined in milliseconds. Example\n                       with buckets from 5ms to 10s: 5,10,25,50,250,500,1000,2500,5000,10000\n                       Available only when metrics are enabled.\n--http-pool-max-threads <threads>\n                     The maximum number of threads. If this is not specified then it will be\n                       automatically sized to the greater of 4 * the number of available processors\n                       and 50. For example if there are 4 processors the max threads will be 50. If\n                       there are 48 processors it will be 192.\n--http-port <port>   The used HTTP port. Default: 8080.\n--http-relative-path <path>\n                     Set the path relative to '/' for serving resources. The path must start with a\n                       '/'. Default: /.\n--https-certificate-file <file>\n                     The file path to a server certificate or certificate chain in PEM format.\n--https-certificate-key-file <file>\n                     The file path to a private key in PEM format.\n--https-certificates-reload-period <reload period>\n                     Interval on which to reload key store, trust store, and certificate files\n                       referenced by https-* options. May be a java.time.Duration value, an integer\n                       number of seconds, or an integer followed by one of [ms, h, m, s, d]. Must\n                       be greater than 30 seconds. Use -1 to disable. Default: 1h.\n--https-cipher-suites <ciphers>\n                     The cipher suites to use. If none is given, a reasonable default is selected.\n--https-client-auth <auth>\n                     Configures the server to require/request client authentication. Possible\n                       values are: none, request, required. Default: none.\n--https-key-store-file <file>\n                     The key store which holds the certificate information instead of specifying\n                       separate files.\n--https-key-store-password <password>\n                     The password of the key store file. Default: password.\n--https-key-store-type <type>\n                     The type of the key store file. If not given, the type is automatically\n                       detected based on the file extension. If 'fips-mode' is set to 'strict' and\n                       no value is set, it defaults to 'BCFKS'.\n--https-port <port>  The used HTTPS port. Default: 8443.\n--https-protocols <protocols>\n                     The list of protocols to explicitly enable. Default: TLSv1.3,TLSv1.2.\n--https-trust-store-file <file>\n                     The trust store which holds the certificate information of the certificates to\n                       trust.\n--https-trust-store-password <password>\n                     The password of the trust store file.\n--https-trust-store-type <type>\n                     The type of the trust store file. If not given, the type is automatically\n                       detected based on the file extension. If 'fips-mode' is set to 'strict' and\n                       no value is set, it defaults to 'BCFKS'.\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak in Development Mode on Windows\nDESCRIPTION: Command to start Keycloak in development mode on Windows systems. This is useful for trying out Keycloak during development.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n$ bin\\kc.bat start-dev\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak with Docker\nDESCRIPTION: Command to start Keycloak in development mode using the official Docker image. This approach avoids the need to download and set up Keycloak directly on the host system.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run quay.io/keycloak/keycloak start-dev\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Server with Database Configuration (Bash)\nDESCRIPTION: This snippet demonstrates how to use the 'kc.sh build' command to create a Keycloak server image with a specific database vendor. It changes the database to PostgreSQL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --db=postgres\n```\n\n----------------------------------------\n\nTITLE: Using OAuth Client in Keycloak Tests\nDESCRIPTION: Demonstrates how to use the OAuth Client for testing OAuth flows in Keycloak. This example performs a client credentials grant and asserts the response.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@InjectOAuthClient\nOAuthClient oAuthClient;\n\n@Test\npublic void testClientCredentials() throws Exception {\n    TokenResponse tokenResponse = oAuthClient.clientCredentialGrant();\n    Assertions.assertTrue(tokenResponse.indicatesSuccess());\n    Assertions.assertNotNull(tokenResponse.toSuccessResponse().getTokens().getAccessToken());\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Security Configuration Options\nDESCRIPTION: Command-line options for configuring HTTPS security settings including certificates, key stores, and encryption protocols.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--https-certificate-file <file>\n--https-certificate-key-file <file>\n--https-certificates-reload-period <reload period>\n--https-cipher-suites <ciphers>\n--https-client-auth <auth>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-key-store-type <type>\n--https-port <port>\n--https-protocols <protocols>\n--https-trust-store-file <file>\n--https-trust-store-password <password>\n--https-trust-store-type <type>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Complete SPI Declaration in Keycloak Subsystem XML\nDESCRIPTION: This example shows a full SPI declaration with multiple providers. It demonstrates how to set a default provider and configure properties for each provider in the keycloak-subsystem configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/updating-server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<spi name=\"example\">\n     <default-provider>myprovider</default-provider>\n     <provider name=\"myprovider\" enabled=\"true\">\n         <properties>\n             <property name=\"key\" value=\"value\"/>\n         </properties>\n     </provider>\n     <provider name=\"mypotherrovider\" enabled=\"true\">\n         <properties>\n             <property name=\"key\" value=\"value2\"/>\n         </properties>\n     </provider>\n</spi>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Database Configuration Options\nDESCRIPTION: Database connection and pool configuration options including vendor selection, credentials, connection URLs, and pool sizing parameters.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityMetadataHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n--db <vendor>\\n--db-driver <driver>\\n--db-password <password>\\n--db-pool-initial-size <size>\\n--db-pool-max-size <size>\\n--db-url <jdbc-url>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Production Mode\nDESCRIPTION: This command is used to start the Keycloak server in production mode. It supports various options for customizing the server configuration, including cache settings, database configurations, and feature flags.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Importing Realm on Keycloak Test Server Startup\nDESCRIPTION: This command starts the Keycloak test server and imports a realm from a JSON file during startup.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server -Dimport=testrealm.json\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak with IPA-Tuura Federation Feature\nDESCRIPTION: Command to start Keycloak with the IPA-Tuura federation feature enabled and the necessary truststore configuration to communicate securely with the bridge service.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ ./kc.sh start-dev --features=ipa-tuura-federation --spi-truststore-file-file=/opt/keycloak/keystore.jks --spi-truststore-file-password=redhat --spi-truststore-file-hostname-verification-policy=ANY\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Authentication\nDESCRIPTION: Example of using client credentials flow for authentication when refresh tokens are not available.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst credentials = {\n  grantType: 'client_credentials',\n  clientId: 'clientId',\n  clientSecret: 'some-client-secret-uuid',\n};\nawait kcAdminClient.auth(credentials);\n\nsetInterval(() => kcAdminClient.auth(credentials), 58 * 1000); // 58 seconds\n```\n\n----------------------------------------\n\nTITLE: Import Configuration Options\nDESCRIPTION: Settings for importing data into Keycloak including directory and file paths, and data override controls.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--dir <dir>          Set the path to a directory where files will be read from.\n--file <file>        Set the path to a file that will be read.\n--override <true|false>\n                     Set if existing data should be overwritten. If set to false, data will be\n                       ignored. Default: true.\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Configuration Options\nDESCRIPTION: Basic HTTP server configuration parameters including host, port, and thread settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-enabled <true|false>\n--http-host <host>\n--http-max-queued-requests <requests>\n--http-metrics-histograms-enabled <true|false>\n--http-metrics-slos <list of buckets>\n--http-pool-max-threads <threads>\n--http-port <port>\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Completion for Keycloak CLI in Bash/Zsh\nDESCRIPTION: Command to enable auto-completion for the Keycloak CLI tool in Bash or Zsh shells, improving usability and efficiency.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ source <(kc.sh tools completion)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Standalone Keycloak\nDESCRIPTION: These environment variables configure Keycloak to run standalone against the Vite development server, specifying URLs and features.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nKC_ACCOUNT_VITE_URL=http://localhost:5173\nKC_ADMIN_VITE_URL=http://localhost:5174\nKC_FEATURES=login:v2,account:v3,admin-fine-grained-authz,transient-users,oid4vc-vci\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Logging Options\nDESCRIPTION: Configuration parameters for Keycloak's logging system, including console, file, and syslog handlers. Includes options for log levels, formats, async logging, and output types.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n--log-console-output <output>\n--log-file <file>\n--log-file-async <true|false>\n--log-file-format <format>\n--log-level <category:level>\n--log-syslog-endpoint <host:port>\n--log-syslog-format <format>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Command Line Configuration Options\nDESCRIPTION: Complete list of command-line configuration options for Keycloak server covering metrics, proxy settings, vault configuration, and logging parameters. Each option includes its possible values and default settings where applicable.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n--log-console-async-queue-length <queue-length>\n--log-console-color <true|false>\n--log-console-format <format>\n--log-console-include-trace <true|false>\n--log-console-json-format <format>\n--log-console-level <level>\n--log-console-output <output>\n--log-file <file>\n--log-file-async <true|false>\n--log-file-async-queue-length <queue-length>\n--log-file-format <format>\n--log-file-include-trace <true|false>\n--log-file-json-format <format>\n--log-file-level <level>\n--log-file-output <output>\n--log-level <category:level>\n--log-level-<category> <level>\n--log-syslog-app-name <name>\n--log-syslog-async <true|false>\n--log-syslog-async-queue-length <queue-length>\n--log-syslog-endpoint <host:port>\n--log-syslog-format <format>\n--log-syslog-include-trace <true|false>\n--log-syslog-json-format <format>\n--log-syslog-level <level>\n--log-syslog-max-length <max-length>\n```\n\n----------------------------------------\n\nTITLE: Setting up KeycloakProvider in React\nDESCRIPTION: Example of how to set up the KeycloakProvider component in a React application. This provider is crucial for configuring the client, realm, and server URL for Keycloak integration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/account-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { KeycloakProvider } from \"@keycloak/keycloak-ui-shared\";\n\n//...\n\n<KeycloakProvider environment={{\n      serverBaseUrl: \"http://localhost:8080\",\n      realm: \"master\",\n      clientId: \"security-admin-console\"\n  }}>\n  {/* rest of you application */}\n</KeycloakProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options in Keycloak\nDESCRIPTION: These options control the export functionality in Keycloak. They allow specifying the export directory, file, realm, user export strategy, and the number of users per file. The user export strategy can be set to skip, realm_file, same_file, or different_files.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--dir <dir>          Set the path to a directory where files will be created with the exported data.\n--file <file>        Set the path to a file that will be created with the exported data. To export\n                       more than 500 users, export to a directory with different files instead.\n--realm <realm>      Set the name of the realm to export. If not set, all realms are going to be\n                       exported.\n--users <strategy>   Set how users should be exported. Possible values are: skip, realm_file,\n                       same_file, different_files. Default: different_files.\n--users-per-file <number>\n                     Set the number of users per file. It is used only if 'users' is set to\n                       'different_files'. Increasing this number leads to exponentially increasing\n                       export times. Default: 50.\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Test Server with Java\nDESCRIPTION: This command starts a basic Keycloak server for testing purposes using Maven. It can be run from the testsuite/utils directory.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Admin Client Secret for Keycloak\nDESCRIPTION: Sets the client secret for the temporary bootstrap admin service account. Used only when creating the master realm. It's recommended to use a non-CLI configuration option for this setting if possible.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-secret <client secret>\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration Options\nDESCRIPTION: Settings for configuring proxy behavior including headers and trusted addresses.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Export Command\nDESCRIPTION: Basic command syntax for exporting data from Keycloak realms to a file or directory. Includes base command and options for help, optimization, and verbose output.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh export [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Group Role Mapping API Endpoints\nDESCRIPTION: API endpoints for managing group role mappings in Keycloak, including realm-level and client-level role operations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /{realm}/groups/{id}/role-mappings\nPOST /{realm}/groups/{id}/role-mappings/realm\nGET /{realm}/groups/{id}/role-mappings/realm\nDELETE /{realm}/groups/{id}/role-mappings/realm\nGET /{realm}/groups/{id}/role-mappings/realm/available\nGET /{realm}/groups/{id}/role-mappings/realm/composite\n```\n\n----------------------------------------\n\nTITLE: Keycloak FIPS Mode Configuration\nDESCRIPTION: Parameter for setting FIPS compliance mode to either non-strict or strict approved mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\n--fips-mode <mode>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with Optimized Configuration\nDESCRIPTION: Command to start the Keycloak server with optimized settings, skipping the default build step for faster startup.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh start '--optimized'\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Import Command in Bash\nDESCRIPTION: Basic usage of the Keycloak import command with options. This command is used to import data from a directory or file into Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh import [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak TLS and Truststore Settings\nDESCRIPTION: Configuration options for TLS hostname verification and truststore paths. Allows setting the verification policy for HTTPS/SMTP requests and specifying paths to PKC12/PEM certificates.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n--truststore-paths <truststore-paths>\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Docker Image from URL Distribution\nDESCRIPTION: This command builds a Docker image for Keycloak by downloading the distribution from a specified URL. It uses the KEYCLOAK_DIST build argument to provide the full URL of the distribution package.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg KEYCLOAK_DIST=http://<HOST>:<PORT>/keycloak-<VERSION>.tar.gz -t <YOUR_TAG> .\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Options for Keycloak Testing\nDESCRIPTION: Configuration options for specifying the database type to use in testing environment. Includes options for H2, MariaDB, Microsoft SQL Server, MySQL, and PostgreSQL databases, along with database reuse configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Value    | Description                             |\n|----------|-----------------------------------------|\n| dev-file | H2 database with a file for persistence |\n| dev-mem  | In-memory H2 database                   |\n| mariadb  | MariaDB test container                  |\n| mssql    | Microsoft SQL Server test container     |\n| mysql    | MySQL test container                    |\n| postgres | PostgreSQL test container               |\n```\n\n----------------------------------------\n\nTITLE: Setting Bootstrap Admin Password for Keycloak\nDESCRIPTION: Specifies the temporary bootstrap admin password. Used only when creating the master realm. It's recommended to use a non-CLI configuration option for this setting if possible.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-password <password>\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Tracing Configuration Options\nDESCRIPTION: Configuration settings for OpenTelemetry tracing including compression method, endpoint specification, JDBC tracing, and sampling parameters.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--tracing-compression <method>\n--tracing-enabled <true|false>\n--tracing-endpoint <url>\n--tracing-jdbc-enabled <true|false>\n--tracing-protocol <protocol>\n--tracing-resource-attributes <attributes>\n--tracing-sampler-ratio <ratio>\n--tracing-sampler-type <type>\n--tracing-service-name <name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Admin Options in Keycloak\nDESCRIPTION: These options are used for setting up a temporary bootstrap admin account when creating the master realm in Keycloak. They allow specifying the admin client ID, client secret, username, and password. It's recommended to use non-CLI configuration options for sensitive information when possible.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n                     Client id for the temporary bootstrap admin service account. Used only when\n                       the master realm is created. Available only when bootstrap admin client\n                       secret is set. Default: temp-admin.\n--bootstrap-admin-client-secret <client secret>\n                     Client secret for the temporary bootstrap admin service account. Used only\n                       when the master realm is created. Use a non-CLI configuration option for\n                       this option if possible.\n--bootstrap-admin-password <password>\n                     Temporary bootstrap admin password. Used only when the master realm is\n                       created. Use a non-CLI configuration option for this option if possible.\n--bootstrap-admin-username <username>\n                     Temporary bootstrap admin username. Used only when the master realm is\n                       created. Available only when bootstrap admin password is set. Default:\n                       temp-admin.\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Tracing in Keycloak\nDESCRIPTION: This option enables OpenTelemetry tracing in Keycloak. It's only available when the 'opentelemetry' feature is enabled. The default value is false.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminUser.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--tracing-enabled <true|false>\n                     Enables the OpenTelemetry tracing. Default: false. Available only when\n                       'opentelemetry' feature is enabled.\n```\n\n----------------------------------------\n\nTITLE: Setting Bootstrap Admin Client ID for Keycloak\nDESCRIPTION: Specifies the client ID for the temporary bootstrap admin service account. Used only when creating the master realm and when the bootstrap admin client secret is set. Default value is 'temp-admin'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in Keycloak\nDESCRIPTION: These options allow setting the log level globally or for specific categories in Keycloak. The log levels range from 'off' to 'all', with 'info' being the default.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminUser.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--log-level-<category> <level>\n                     The log level of a category. Takes precedence over the 'log-level' option.\n                       Possible values are (case insensitive): off, fatal, error, warn, info,\n                       debug, trace, all.\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Operator in Default Namespace\nDESCRIPTION: This command applies the Kubernetes manifests to install the Keycloak Operator in the default namespace.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k overlays/default-namespace\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Development Server\nDESCRIPTION: Command to start Keycloak server in development mode for local development and testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelpShort.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start-dev\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Update Compatibility Check\nDESCRIPTION: This command checks if the metadata is compatible with the current configuration. It returns a zero exit code if a rolling update is possible between the old and current metadata.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh update-compatibility check [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS and Truststore Settings\nDESCRIPTION: Configuration options for TLS hostname verification policy and truststore paths. Includes settings for HTTPS and SMTP requests verification modes and paths to certificate files.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--truststore-paths <truststore-paths>\n                     List of pkcs12 (p12, pfx, or pkcs12 file extensions), PEM files, or\n                       directories containing those files that will be used as a system truststore.\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Operator Docker Image with Maven\nDESCRIPTION: This command builds a Docker image for the Keycloak Operator using Maven. It cleans the project, packages it, and enables the Quarkus container image build feature.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -Dquarkus.container-image.build=true\n```\n\n----------------------------------------\n\nTITLE: FIPS Mode Configuration\nDESCRIPTION: FIPS mode configuration options for enabling strict or non-strict FIPS compliance.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n--fips-mode <mode>\n```\n\n----------------------------------------\n\nTITLE: Setting Truststore Paths for Keycloak\nDESCRIPTION: Specifies a list of pkcs12, PEM files, or directories containing those files to be used as a system truststore for Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n--truststore-paths <truststore-paths>\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Tests with Docker Distribution\nDESCRIPTION: This Maven command demonstrates how to run Keycloak tests using a Docker distribution instead of the raw distribution. It sets the 'kc.quarkus.tests.dist' property to 'docker'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean install -Dkc.quarkus.tests.dist=docker\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Base Testsuite with Quarkus\nDESCRIPTION: This Maven command demonstrates how to run tests from the Keycloak base testsuite using the Quarkus distribution. It specifies the testsuite pom.xml, activates the 'auth-server-quarkus' profile, and runs a specific test class.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml clean install -Pauth-server-quarkus -Dtest=OIDCProtocolMappersTest\n```\n\n----------------------------------------\n\nTITLE: Setting Truststore Paths in Keycloak\nDESCRIPTION: This option allows specifying a list of pkcs12, PEM files, or directories containing these files to be used as the system truststore in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminUser.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--truststore-paths <truststore-paths>\n                     List of pkcs12 (p12, pfx, or pkcs12 file extensions), PEM files, or\n                       directories containing those files that will be used as a system truststore.\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Import Settings\nDESCRIPTION: Options for importing data into Keycloak, including directory and file path specifications and override behavior control.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n--dir <dir>\n--file <file>\n--override <true|false>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Admin Username for Keycloak\nDESCRIPTION: Sets the temporary bootstrap admin username. Used only when creating the master realm and when the bootstrap admin password is set. Default value is 'temp-admin'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-username <username>\n```\n\n----------------------------------------\n\nTITLE: Basic Export Command Usage in Keycloak\nDESCRIPTION: Basic command syntax for exporting data from Keycloak realms using the command line interface. Supports various options for customization and configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh export [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Options for Keycloak Server\nDESCRIPTION: These options control the hostname settings for the Keycloak server, including debug page access and hostname resolution behavior.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--hostname-debug <true|false>\n--hostname-strict <true|false>\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Docker Image from GitHub Distribution\nDESCRIPTION: This command builds a Docker image for Keycloak by downloading the distribution from GitHub. It uses the KEYCLOAK_VERSION build argument to specify the version to download.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg KEYCLOAK_VERSION=<VERSION> -t <YOUR_TAG> .\n```\n\n----------------------------------------\n\nTITLE: Keycloak Server Configuration Options\nDESCRIPTION: Command-line configuration parameters for Keycloak server covering metrics, proxy settings, vault configuration, and logging options. Includes detailed parameters for console, file, and syslog logging with customization options for formats, levels, and output types.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--metrics-enabled <true|false>\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n--log-console-async-queue-length <queue-length>\n--log-console-color <true|false>\n--log-console-format <format>\n--log-console-include-trace <true|false>\n--log-console-json-format <format>\n--log-console-level <level>\n--log-console-output <output>\n--log-file <file>\n--log-file-async <true|false>\n--log-file-async-queue-length <queue-length>\n--log-file-format <format>\n--log-file-include-trace <true|false>\n--log-file-json-format <format>\n--log-file-level <level>\n--log-file-output <output>\n--log-level <category:level>\n--log-level-<category> <level>\n--log-syslog-app-name <name>\n--log-syslog-async <true|false>\n--log-syslog-async-queue-length <queue-length>\n--log-syslog-endpoint <host:port>\n--log-syslog-format <format>\n--log-syslog-include-trace <true|false>\n--log-syslog-json-format <format>\n--log-syslog-level <level>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Embedded Quarkus Server\nDESCRIPTION: Command to run tests with Keycloak on embedded Quarkus server for test-driven development.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml -Pauth-server-quarkus-embedded clean install -Dtest=LoginTest\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Production Mode\nDESCRIPTION: Command to run tests in production mode with Keycloak on Quarkus server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml -Pauth-server-quarkus clean install\n```\n\n----------------------------------------\n\nTITLE: Enabling Health Endpoints in Keycloak (Bash)\nDESCRIPTION: This snippet shows how to enable health check endpoints in Keycloak during the build process. When enabled, health checks will be available at '/health', '/health/ready', and '/health/live' endpoints.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --health-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Keycloak Cache Configuration Options\nDESCRIPTION: Configuration options for Keycloak's cache mechanism including clustering, security, and storage parameters for high-availability setups.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityMetadataHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n--cache <type>\\n--cache-config-file <file>\\n--cache-embedded-authorization-max-count <max-count>\\n--cache-embedded-mtls-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Server with Admin or Account Development Mode\nDESCRIPTION: These commands start the Keycloak server and connect it to a local Vite development server for either the admin or account interfaces.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm start --admin-dev\npnpm start --account-dev\n```\n\n----------------------------------------\n\nTITLE: Using Keycloak Bootstrap Admin Command\nDESCRIPTION: Basic command structure for creating an admin user in Keycloak using the bootstrap-admin command. The command supports various options for configuration including username, password, and non-interactive mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminUser.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh bootstrap-admin user [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Keycloak Admin Bootstrap Command Usage\nDESCRIPTION: Command syntax for bootstrapping admin access in Keycloak. Provides options for creating admin users and service accounts with configurable parameters including non-interactive mode and verbose error output.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdmin.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh bootstrap-admin [OPTIONS] [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Admin UI as a library\nDESCRIPTION: Command to build the Keycloak Admin UI as a library instead of an application. This requires setting the LIB environment variable to true when running the build script.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLIB=true pnpm run build\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Admin Configuration\nDESCRIPTION: Configuration options for setting up temporary bootstrap admin credentials and client settings during master realm creation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n--bootstrap-admin-client-secret <client secret>\n--bootstrap-admin-password <password>\n--bootstrap-admin-username <username>\n```\n\n----------------------------------------\n\nTITLE: Running Single Test in Development Mode\nDESCRIPTION: Example command to run a single test (LoginTest) in development mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml clean install -Dtest=LoginTest\n```\n\n----------------------------------------\n\nTITLE: Keycloak Quarkus Configuration Example\nDESCRIPTION: Example configuration for HA setup using PostgreSQL in Keycloak Quarkus mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\n# HA using PostgreSQL\n%ha.datasource.dialect=org.hibernate.dialect.PostgreSQLDialect\n%ha.datasource.driver = org.postgresql.xa.PGXADataSource\n%ha.datasource.url = jdbc:postgresql://localhost/keycloak\n%ha.datasource.username = keycloak\n%ha.datasource.password = password\n```\n\n----------------------------------------\n\nTITLE: Running Local Build After Version Update\nDESCRIPTION: Maven command to perform a clean build and run tests after updating Quarkus version to verify compatibility.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Keycloak Server Runtime\nDESCRIPTION: Example command to build an optimized server runtime for Keycloak. Additional options can be specified as needed.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Keycloak Test Server\nDESCRIPTION: This command starts the Keycloak test server with HTTPS configuration, including keystore and truststore settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server \\\n    -Djavax.net.ssl.trustStore=/path/to/truststore.jks \\\n    -Djavax.net.ssl.keyStore=/path/to/keystore.jks \\\n    -Djavax.net.ssl.keyStorePassword=CHANGEME \\\n    -Dkeycloak.port.https=8443\n```\n\n----------------------------------------\n\nTITLE: Using Keycloak Import Command\nDESCRIPTION: Basic command syntax for importing data into Keycloak using the command-line interface. The command supports various options for customizing the import process.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh import [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Production Mode\nDESCRIPTION: Example command to start the Keycloak server in production mode. Additional options can be specified for configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Realm Instances in Keycloak Tests\nDESCRIPTION: Shows how to use multiple realm instances within a single test class by setting references and using them for child resources.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@InjectRealm\nManagedRealm realmA;\n\n@InjectUser\nManagedUser userA;\n\n@InjectRealm(ref = \"realmB\")\nManagedRealm realmB;\n\n@InjectUser(realmRef = \"realmB\")\nManagedUser userB;\n```\n\n----------------------------------------\n\nTITLE: Using savePersonalInfo function in React component\nDESCRIPTION: Example of how to use the savePersonalInfo function within a React component. It demonstrates error handling and accessing the Keycloak environment context.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/account-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { savePersonalInfo, useEnvironment } from \"@keycloak/keycloak-account-ui\";\n\n//...\nfunction App() {\n  // the save function also needs to have the context so that it knows where to POST\n  // this hook gives us access to the `KeycloakProvider` context\n  const context = useEnvironment();\n  const submit = async (data) => {\n    try {\n      await savePersonalInfo(context, data);\n    } catch (error) {\n      // Error contains `name` and `value` of the server side errors\n      // and your app will have better error handling ;)\n      console.error(error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Completion for Keycloak CLI in Bash/Zsh\nDESCRIPTION: Command to enable auto-completion for the Keycloak command-line tool in Bash or Zsh shells. This improves the usability of the CLI by providing command suggestions.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testDefaultToHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ source <(kc.sh tools completion)\n```\n\n----------------------------------------\n\nTITLE: Updating Keycloak Distribution with New Artifacts\nDESCRIPTION: These Bash commands demonstrate how to update the Keycloak distribution with newly built artifacts. It involves copying the lib directory from the server target to the distribution home directory.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmvn -DskipTests clean install\ncp -r server/target/lib ${KC_HOME_DIR}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Keycloak Server Development\nDESCRIPTION: This command installs all necessary dependencies for the Keycloak server using PNPM package manager.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Keycloak Server\nDESCRIPTION: Command to build an optimized server runtime with custom options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelpShort.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh build <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP(S) Options for Keycloak Server\nDESCRIPTION: These options configure the HTTP and HTTPS listeners, including ports, SSL/TLS settings, and thread pool configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-enabled <true|false>\n--http-host <host>\n--http-max-queued-requests <requests>\n--http-pool-max-threads <threads>\n--http-port <port>\n--http-relative-path <path>\n--https-certificate-file <file>\n--https-certificate-key-file <file>\n--https-certificates-reload-period <reload period>\n--https-cipher-suites <ciphers>\n--https-client-auth <auth>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-key-store-type <type>\n--https-port <port>\n--https-protocols <protocols>\n--https-trust-store-file <file>\n--https-trust-store-password <password>\n--https-trust-store-type <type>\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Production Server\nDESCRIPTION: Command to start Keycloak server in production mode with specified options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelpShort.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh start <OPTIONS>\n```\n\n----------------------------------------\n\nTITLE: HTTPS Configuration Parameters\nDESCRIPTION: Configuration options for HTTPS settings including ports, certificates, keystores, and client authentication.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n--https-client-auth <auth>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-key-store-type <type>\n--https-port <port>\n--https-protocols <protocols>\n--https-trust-store-file <file>\n--https-trust-store-password <password>\n--https-trust-store-type <type>\n```\n\n----------------------------------------\n\nTITLE: Changing HTTP Relative Path in Keycloak (Bash)\nDESCRIPTION: This example shows how to change the relative path for serving resources in Keycloak. It sets the HTTP relative path to '/auth'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --http-relative-path=/auth\n```\n\n----------------------------------------\n\nTITLE: Browser Configuration Options for Keycloak Testing\nDESCRIPTION: Configuration options for specifying the browser type to use in WebDriver testing. Includes options for Chrome and Firefox browsers, with both regular and headless modes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Value            | Description                  |\n|------------------|------------------------------|\n| chrome           | Chrome WebDriver             |\n| chrome-headless  | Chrome WebDriver without UI  |\n| firefox          | Firefox WebDriver            |\n| firefox-headless | Firefox WebDriver without UI |\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Hostname Verification for Keycloak\nDESCRIPTION: Sets the TLS hostname verification policy for outgoing HTTPS and SMTP requests. Options include ANY, WILDCARD, STRICT, and DEFAULT, with DEFAULT being the default value.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for PNPM Package Management in Shell\nDESCRIPTION: Command to enable Corepack, which ensures the correct version of PNPM is used for package management in the Keycloak project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook with Declarative Syntax in React TypeScript\nDESCRIPTION: Example of using the useState hook with declarative syntax for complex types in React with TypeScript, including null handling.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [user, setUser] = useState<IUser | null>(null);\n\n...\n\nsetUser(newUser);\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Icons with Utility Classes in React\nDESCRIPTION: This snippet demonstrates how to render InfoCircleIcon components with different colors based on a 'titleStatus' prop. It uses utility classes for margin and inline styles for colors.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nswitch (titleStatus) {\n  case \"success\":\n    return (\n      <>\n        <InfoCircleIcon\n          className=\"pf-v5-u-mr-sm\" // utility class\n          color=\"var(--pf-v5-global--info-color--100)\"\n        />{\" \"}\n        {titleText}\n      </>\n    );\n  case \"failure\":\n    return (\n      <>\n        <InfoCircleIcon\n          className=\"pf-v5-u-mr-sm\"\n          color=\"var(--pf-v5-global--danger-color--100)\"\n        />{\" \"}\n        {titleText}\n      </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with Optimized Configuration\nDESCRIPTION: This command starts the Keycloak server using the '--optimized' option, which skips the default 'build' step and starts the server faster based on previous configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ kc.sh start '--optimized'\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak with Transient Users Feature\nDESCRIPTION: Command to start Keycloak server with the transient-users feature enabled, which is required to use transient users functionality with identity providers.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/transient-users.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--features=transient-users\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Docker Image from Local Distribution\nDESCRIPTION: These commands build a Docker image for Keycloak using a locally built distribution. First, it copies the local distribution to the current directory, then uses the KEYCLOAK_DIST build argument to specify the local file.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp $KEYCLOAK_SOURCE/quarkus/dist/target/keycloak-<VERSION>.tar.gz .\ndocker build --build-arg KEYCLOAK_DIST=keycloak-<VERSION>.tar.gz -t <YOUR_TAG> .\n```\n\n----------------------------------------\n\nTITLE: Configuring Features in Keycloak Server\nDESCRIPTION: Command-line options for enabling or disabling specific features in Keycloak server. These options allow fine-tuning of server functionality.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--features <feature> Enables a set of one or more features. Possible values are: <...>.\n--features-disabled <feature>\n                     Disables a set of one or more features. Possible values are: <...>.\n```\n\n----------------------------------------\n\nTITLE: Starting the Keycloak Server\nDESCRIPTION: This command starts the Keycloak server in development mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Tests with PostgreSQL Connection\nDESCRIPTION: This Maven command runs Keycloak tests using the PostgreSQL database connection. It dynamically retrieves the PostgreSQL container's IP address.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn install -Dkeycloak.connectionsJpa.url=jdbc:postgresql://`docker inspect --format '{{ .NetworkSettings.IPAddress }}' postgres`:5432/keycloak -Dkeycloak.connectionsJpa.driver=org.postgresql.Driver -Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak\n```\n\n----------------------------------------\n\nTITLE: Configuring Features and Hostname Settings\nDESCRIPTION: Command-line options for enabling/disabling features and configuring hostname-related settings in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--features <feature>\n--features-disabled <feature>\n--hostname <hostname|URL>\n--hostname-admin <URL>\n--hostname-backchannel-dynamic <true|false>\n--hostname-debug <true|false>\n--hostname-strict <true|false>\n```\n\n----------------------------------------\n\nTITLE: Restarting Keycloak Server on OpenShift\nDESCRIPTION: Commands to replace the JAR file and restart the Keycloak server on OpenShift with specific binding parameters\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-oidc-conformance.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp /tmp/keycloak-server-spi-2.1.0-SNAPSHOT.jar /var/lib/openshift/51122e382d5271c5ca0000bc/wildfly/modules/system/add-ons/keycloak/org/keycloak/keycloak-server-spi/main/\nps aux | grep java\nkill -9 <PID>\ncd /var/lib/openshift/51122e382d5271c5ca0000bc/wildfly/bin\n./standalone.sh -b 127.3.168.129 -bmanagement=127.3.168.129 -Dh2.bindAddress=127.3.168.129\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kerberos Ticket\nDESCRIPTION: This command retrieves a Kerberos ticket for testing Kerberos integration with Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkinit hnelson@KEYCLOAK.ORG\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Admin Service Bootstrap Command\nDESCRIPTION: The basic command syntax for bootstrapping an admin service account in Keycloak. The command supports optional client ID configuration and environment variable settings for credentials.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminService.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh bootstrap-admin service [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS and Truststore Options in Keycloak\nDESCRIPTION: These options allow configuring TLS hostname verification and truststore paths for Keycloak. The TLS hostname verifier can be set to ANY, WILDCARD, STRICT, or DEFAULT. Truststore paths can include pkcs12, PEM files, or directories containing these files.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n                     The TLS hostname verification policy for out-going HTTPS and SMTP requests.\n                       Possible values are: ANY, WILDCARD (deprecated), STRICT (deprecated),\n                       DEFAULT. Default: DEFAULT.\n--truststore-paths <truststore-paths>\n                     List of pkcs12 (p12, pfx, or pkcs12 file extensions), PEM files, or\n                       directories containing those files that will be used as a system truststore.\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Server in Quarkus Dev Mode\nDESCRIPTION: This Bash command demonstrates how to run the Keycloak server module in Quarkus development mode. It uses Maven to clean the project, start Quarkus in dev mode, and pass the 'start-dev' argument to the server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd server\nmvn clean quarkus:dev -Dquarkus.args=\"start-dev\"\n```\n\n----------------------------------------\n\nTITLE: Hostname Configuration Options\nDESCRIPTION: Configuration parameters for controlling hostname resolution and backchannel URLs in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--hostname-backchannel-dynamic <true|false>\n--hostname-debug <true|false>\n--hostname-strict <true|false>\n```\n\n----------------------------------------\n\nTITLE: Tracing Configuration\nDESCRIPTION: Options for enabling OpenTelemetry tracing functionality.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\n--tracing-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Tests with Quarkus Auth Server\nDESCRIPTION: This Maven command runs Keycloak tests using MySQL and the Quarkus auth server with JPA profile.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian clean verify -Pdb-mysql,jpa,auth-server-quarkus\n```\n\n----------------------------------------\n\nTITLE: Keycloak Data Export Configuration\nDESCRIPTION: Configuration parameters for exporting Keycloak data, including options for directory, file paths, realm selection, and user export strategies\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--dir <dir>          Set the path to a directory where files will be created with the exported data.\n--file <file>        Set the path to a file that will be created with the exported data. To export\n                       more than 500 users, export to a directory with different files instead.\n--realm <realm>      Set the name of the realm to export. If not set, all realms are going to be\n                       exported.\n--users <strategy>   Set how users should be exported. Possible values are: skip, realm_file,\n                       same_file, different_files. Default: different_files.\n--users-per-file <number>\n                     Set the number of users per file. It is used only if 'users' is set to\n                       'different_files'. Increasing this number leads to exponentially increasing\n                       export times. Default: 50.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bridge Service Certificate for Keycloak\nDESCRIPTION: Commands to retrieve the SSL certificate from the IPA-Tuura bridge service and add it to a Java keystore for use by Keycloak. This establishes secure communication between Keycloak and the bridge.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl s_client -connect bridge.ipa.test:443 2>/dev/null </dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /opt/keycloak/bridge.crt\n\n$ keytool -importcert -alias bridge -file /opt/keycloak/bridge.crt -keystore /opt/keycloak/keystore.jks -trustcacerts -storepass redhat -noprompt\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Keycloak App Server Testing\nDESCRIPTION: Documentation covering the configuration of JBoss-based application servers (Wildfly 9, 10, and 11) with Keycloak adapters for integration testing. Includes information about adapter configuration locations and SSL setup.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/app-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Keycloak Arquillian Integration TestSuite - Test Servers - App Servers\n\n- [Keycloak Arquillian Integration TestSuite](../../README.md)\n- [Keycloak Arquillian Integration TestSuite - Test Servers](../README.md)\n- [Keycloak Arquillian Integration TestSuite - Test Servers - Auth Server](../auth-server/README.md)\n- Keycloak Arquillian Integration TestSuite - Test Servers - App Servers\n\n## App Server - JBoss\n\nJBoss-based container with installed and configured Keycloak adapter.\n\nSubmodules are enabled with profiles: `-Papp-server-MODULE`\n\n### Modules\n\n* __`wildfly9` Wildfly 9__\n* __`wildfly10` Wildfly 10__\n* __`wildfly` Wildfly 11__\n\n### Adapter Configs Location\n\n* __Provided__ (in standalone.xml as secure-deployment) WIP\n* __Bundled__ (in war) - Default.\n\n### SSL\n\nConfigures SSL in `standalone.xml`. See profile `ssl`.\n```\n\n----------------------------------------\n\nTITLE: Using Selenium in Keycloak Tests\nDESCRIPTION: Shows how to use Selenium for browser automation in Keycloak tests by injecting a Java Page representation or a WebDriver directly.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@InjectPage\nLoginPage loginPage;\n\n@Test\npublic void testLogin() {\n    // Do something to open the login page\n    loginPage.fillLogin(..);\n    loginPage.submit();\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@InjectWebDriver\nWebDriver webDriver;\n\n@Test\npublic void test() {\n    webDriver.switchTo().newWindow(WindowType.TAB);\n}\n```\n\n----------------------------------------\n\nTITLE: Keycloak Admin Bootstrap Subcommands\nDESCRIPTION: Available subcommands for creating different types of admin accounts: user-based admin accounts with passwords and service-based admin accounts.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdmin.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nuser     Add an admin user with a password\nservice  Add an admin service account\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Interface for Keycloak Server\nDESCRIPTION: Options for setting up the management interface in Keycloak server. These settings control the port, path, and security configurations for the management interface, which is used for server administration and monitoring.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-management-port <port>\n                     Port of the management interface. Relevant only when something is exposed on\n                       the management interface - see the guide for details. Default: 9000.\n--http-management-relative-path <path>\n                     Set the path relative to '/' for serving resources from management interface.\n                       The path must start with a '/'. If not given, the value is inherited from\n                       HTTP options. Relevant only when something is exposed on the management\n                       interface - see the guide for details. Default: /.\n--https-management-certificate-file <file>\n                     The file path to a server certificate or certificate chain in PEM format for\n                       the management server. If not given, the value is inherited from HTTP\n                       options. Relevant only when something is exposed on the management interface\n                       - see the guide for details.\n--https-management-certificate-key-file <file>\n                     The file path to a private key in PEM format for the management server. If not\n                       given, the value is inherited from HTTP options. Relevant only when\n                       something is exposed on the management interface - see the guide for details.\n--https-management-certificates-reload-period <reload period>\n                     Interval on which to reload key store, trust store, and certificate files\n                       referenced by https-management-* options for the management server. May be a\n                       java.time.Duration value, an integer number of seconds, or an integer\n                       followed by one of [ms, h, m, s, d]. Must be greater than 30 seconds. Use -1\n                       to disable. If not given, the value is inherited from HTTP options. Relevant\n                       only when something is exposed on the management interface - see the guide\n                       for details. Default: 1h.\n--https-management-client-auth <auth>\n                     Configures the management interface to require/request client authentication.\n                       If not given, the value is inherited from HTTP options. Relevant only when\n                       something is exposed on the management interface - see the guide for\n                       details. Possible values are: none, request, required. Default: none.\n--https-management-key-store-file <file>\n                     The key store which holds the certificate information instead of specifying\n                       separate files for the management server. If not given, the value is\n                       inherited from HTTP options. Relevant only when something is exposed on the\n                       management interface - see the guide for details.\n--https-management-key-store-password <password>\n                     The password of the key store file for the management server. If not given,\n                       the value is inherited from HTTP options. Relevant only when something is\n                       exposed on the management interface - see the guide for details. Default:\n                       password.\n--legacy-observability-interface <true|false>\n                     DEPRECATED. If metrics/health endpoints should be exposed on the main HTTP\n                       server (not recommended). If set to true, the management interface is\n```\n\n----------------------------------------\n\nTITLE: Debugging Keycloak Server Distribution\nDESCRIPTION: This Bash command shows how to start the Keycloak server in debug mode using the kc.sh script. It enables remote debugging on port 8787 by default.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nkc.sh --debug start-dev\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak with Custom Providers\nDESCRIPTION: Command to build Keycloak after adding custom provider JAR files. This command must be run from the Keycloak home directory to incorporate the custom providers into the installation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/content/providers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n${kc.home.dir}/bin/kc.sh build\n```\n\n----------------------------------------\n\nTITLE: Metrics Configuration\nDESCRIPTION: Settings for enabling and exposing metrics endpoints.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n--metrics-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Operator Docker Image with JIB\nDESCRIPTION: This Maven command builds the project, generates a Docker image using JIB, and sets the image pull policy to 'IfNotPresent'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -Dquarkus.kubernetes.image-pull-policy=IfNotPresent -Dquarkus.container-image.build=true\n```\n\n----------------------------------------\n\nTITLE: Configuring FIPS Mode for Keycloak\nDESCRIPTION: Sets the FIPS (Federal Information Processing Standards) mode for Keycloak. Options are 'non-strict' for enabled but non-approved mode, 'strict' for full FIPS compliance, and 'disabled' by default.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n--fips-mode <mode>\n```\n\n----------------------------------------\n\nTITLE: Starting Dockerized PostgreSQL for Keycloak Tests\nDESCRIPTION: This command starts a Docker container running PostgreSQL configured for Keycloak performance testing. It sets up the necessary password for the default 'postgres' user.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/other/jpa-performance/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name postgres-keycloak -e POSTGRES_PASSWORD=keycloak -d -p 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Settings for Keycloak Server\nDESCRIPTION: Options for setting up hostname-related configurations in Keycloak server. These settings are available when the hostname:v2 feature is enabled and control how the server is exposed and accessed.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--hostname <hostname|URL>\n                     Address at which is the server exposed. Can be a full URL, or just a hostname.\n                       When only hostname is provided, scheme, port and context path are resolved\n                       from the request. Available only when hostname:v2 feature is enabled.\n--hostname-admin <URL>\n                     Address for accessing the administration console. Use this option if you are\n                       exposing the administration console using a reverse proxy on a different\n                       address than specified in the 'hostname' option. Available only when\n                       hostname:v2 feature is enabled.\n--hostname-backchannel-dynamic <true|false>\n                     Enables dynamic resolving of backchannel URLs, including hostname, scheme,\n                       port and context path. Set to true if your application accesses Keycloak via\n                       a private network. If set to true, 'hostname' option needs to be specified\n                       as a full URL. Default: false. Available only when hostname:v2 feature is\n                       enabled.\n--hostname-debug <true|false>\n                     Toggles the hostname debug page that is accessible at\n                       /realms/master/hostname-debug. Default: false. Available only when hostname:\n                       v2 feature is enabled.\n--hostname-strict <true|false>\n                     Disables dynamically resolving the hostname from request headers. Should\n                       always be set to true in production, unless your reverse proxy overwrites\n                       the Host header. If enabled, the 'hostname' option needs to be specified.\n                       Default: true. Available only when hostname:v2 feature is enabled.\n```\n\n----------------------------------------\n\nTITLE: Client Management API Endpoints\nDESCRIPTION: Core API endpoints for managing clients in Keycloak, including CRUD operations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /{realm}/clients\nGET /{realm}/clients\nGET /{realm}/clients/{id}\nPUT /{realm}/clients/{id}\nDELETE /{realm}/clients/{id}\n```\n\n----------------------------------------\n\nTITLE: Running WebAuthN Tests with Maven\nDESCRIPTION: Command to execute WebAuthN tests using Chrome browser with the webauthn profile enabled.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmvn -f testsuite/integration-arquillian/tests/other/pom.xml clean test \\\n    -Dbrowser=chrome -Pwebauthn\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm\nDESCRIPTION: Command to start the development server for the Admin UI. This enables rapid iteration with Hot Module Replacement and Fast Refresh features.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Development Mode\nDESCRIPTION: Example command for starting the Keycloak server in development mode, which is suitable for local development or testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testDefaultToHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Event Metrics\nDESCRIPTION: Configuration options for user event metrics collection and monitoring, including event types and tag specifications.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n--event-metrics-user-enabled <true|false>\n--event-metrics-user-events <events>\n--event-metrics-user-tags <tags>\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Keycloak Account UI Project\nDESCRIPTION: This example demonstrates creating a new Keycloak account UI project named 'my-project' using the npm create command.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/create-keycloak-theme/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create keycloak-theme my-project -t account\n```\n\n----------------------------------------\n\nTITLE: Keycloak HTTPS Configuration Parameters\nDESCRIPTION: Command-line options for configuring HTTPS settings including certificates, key stores, protocols, and cipher suites.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--https-certificate-file <file>\n--https-certificate-key-file <file>\n--https-certificates-reload-period <reload period>\n--https-cipher-suites <ciphers>\n--https-client-auth <auth>\n--https-key-store-file <file>\n--https-key-store-password <password>\n--https-key-store-type <type>\n--https-port <port>\n--https-protocols <protocols>\n--https-trust-store-file <file>\n--https-trust-store-password <password>\n--https-trust-store-type <type>\n```\n\n----------------------------------------\n\nTITLE: Configuring List-Type Properties in Keycloak Subsystem XML\nDESCRIPTION: This example demonstrates how to configure a property with a list value in the Keycloak subsystem configuration. It shows the JPA provider for the eventsStore SPI with the exclude-events property containing a list of values.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/updating-server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<spi name=\"eventsStore\">\n     <provider name=\"jpa\" enabled=\"true\">\n         <properties>\n             <property name=\"exclude-events\" value=\"[&quot;EVENT1&quot;,&quot;EVENT2&quot;]\"/>\n         </properties>\n     </provider>\n</spi>\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Commands\nDESCRIPTION: Commands for building the source code and running tests for the Keycloak Admin Client.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\npnpm server:start\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Keycloak Logging Configuration Parameters\nDESCRIPTION: Configuration parameters for controlling Keycloak's logging behavior including async logging, console output formatting, log levels and categories.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n--log-console-async <true|false>\n--log-console-color <true|false>\n--log-console-format <format>\n--log-console-level <level>\n--log-console-output <output>\n--log-level <category:level>\n--log-level-<category> <level>\n```\n\n----------------------------------------\n\nTITLE: Identity Provider API Endpoints\nDESCRIPTION: API endpoints for managing identity providers and their mappers in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /{realm}/identity-provider/instances\nGET /{realm}/identity-provider/instances\nGET /{realm}/identity-provider/instances/{alias}\nPUT /{realm}/identity-provider/instances/{alias}\nDELETE /{realm}/identity-provider/instances/{alias}\n```\n\n----------------------------------------\n\nTITLE: Running DB Migration Test\nDESCRIPTION: Commands to run the DB migration test from Keycloak 19.0.3 to the latest version.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport OLD_KEYCLOAK_VERSION=19.0.3\nexport DATABASE=mariadb\n\nmvn -B -f testsuite/integration-arquillian/pom.xml \\\n  clean install \\\n  -Pjpa,auth-server-quarkus,db-$DATABASE,auth-server-migration \\\n  -Dtest=MigrationTest \\\n  -Dmigration.mode=auto \\\n  -Dmigrated.auth.server.version=$OLD_KEYCLOAK_VERSION \\\n  -Dmigration.import.file.name=migration-realm-$OLD_KEYCLOAK_VERSION.json \\\n  -Dauth.server.ssl.required=false \\\n  -Dauth.server.db.host=localhost\n```\n\n----------------------------------------\n\nTITLE: Basic Keycloak Integration Test in Java\nDESCRIPTION: Demonstrates a simple Keycloak integration test using the @KeycloakIntegrationTest annotation and injecting a managed realm. The test asserts the realm name and checks for the absence of users.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@KeycloakIntegrationTest\npublic class BasicTest {\n\n    @InjectRealm\n    ManagedRealm realm;\n\n    @Test\n    public void test() {\n        Assertions.assertEquals(\"default\", realm.getName());\n        Assertions.assertEquals(0, realm.admin().users().list().size());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container for Keycloak Testing\nDESCRIPTION: This command starts a MySQL Docker container with the necessary environment variables for Keycloak testing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mysql -e MYSQL_DATABASE=keycloak -e MYSQL_USER=keycloak -e MYSQL_PASSWORD=keycloak -e MYSQL_ROOT_PASSWORD=keycloak -d mysql\n```\n\n----------------------------------------\n\nTITLE: Integration Domain Configuration JSON\nDESCRIPTION: JSON configuration for the integration domain in the IPA-Tuura bridge. This defines connection details for Active Directory including LDAP URL, credentials, and user attribute mappings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": \"1\",\n   \"name\": \"keycloak.org\",\n   \"description\": \"AD Integration Domain\",\n   \"integration_domain_url\": \"ldap://DC1.keycloak.org\",\n   \"client_id\": \"Administrator@KEYCLOAK.ORG\",\n   \"client_secret\": \"Passw0rd\",\n   \"id_provider\": \"ad\",\n   \"user_extra_attrs\": \"mail:mail, sn:sn, givenname:givenname\",\n   \"user_object_classes\": \"user,organizationalPerson,person,top\",\n   \"users_dn\": \"CN=Users,DC=keycloak,DC=org\",\n   \"ldap_tls_cacert\": \"/etc/openldap/certs/cacert.pem\",\n   \"keycloak_hostname\": \"keycloak.ipa.test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Keycloak UI Development Server\nDESCRIPTION: These commands navigate to the project directory and start the development server for the Keycloak UI project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/create-keycloak-theme/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-project\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Interface for Keycloak Server\nDESCRIPTION: These options set up the management interface, including port, path, and SSL/TLS settings specific to the management server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-management-port <port>\n--http-management-relative-path <path>\n--https-management-certificate-file <file>\n--https-management-certificate-key-file <file>\n--https-management-certificates-reload-period <reload period>\n--https-management-client-auth <auth>\n--https-management-key-store-file <file>\n--https-management-key-store-password <password>\n--legacy-observability-interface <true|false>\n```\n\n----------------------------------------\n\nTITLE: Removing Keycloak Operator Resources\nDESCRIPTION: This command removes the Kubernetes resources created for the Keycloak Operator.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -k <previously-used-folder>\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Details\nDESCRIPTION: Displays certificate information in human-readable format\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -noout -text -in certs/clients/test-user@localhost.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak in Development Mode on Linux/Unix\nDESCRIPTION: Command to start Keycloak in development mode on Linux or Unix systems. This is useful for trying out Keycloak during development.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kc.sh start-dev\n```\n\n----------------------------------------\n\nTITLE: Testing Keycloak Connectivity from Bridge Service\nDESCRIPTION: Testing the connectivity between the IPA-Tuura bridge service and Keycloak by sending a GET request to the Keycloak master realm. This verifies network communication is properly set up.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl keycloak.ipa.test:8080/realms/master\n{\"realm\":\"master\",\"public_key\":\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwjhMTETlWs96eAuy5vYkXfImXXtocYf7EFL84tbuCCLCoWsBrRmFyd8LiixyHPOdQ/9gWlK2TualDF4lXx21zuS6L35u5rPvC6FodGEs6haOYsXmnznDsAOBDqs7XUgWQ0+Mei1ukLU1+UBFjbXTJrKlfffKZ3cZptkFgzPqZXGgKfmkOPf0sVv2RqoGTtlgYgZd3MEdqaQ14qHZIPpycOMnSRZ5S6MgE9+0Iv6v+wYMMhP8vsFcELaHOaBlOW1nLGemHLDDxgoF5C932zkZ0V61Cn4cNvJWKl7ypEKudH0X41SK8yP0I5KXijbClvo8gRoQT1aLKLqB42yH0BGYFQIDAQAB\",\"token-service\":\"http://keycloak.ipa.test:8080/realms/master/protocol/openid-connect\",\"account-service\":\"http://keycloak.ipa.test:8080/realms/master/account\",\"tokens-not-before\":0}[root@ipa-bridge ipa-tuura]#\n```\n\n----------------------------------------\n\nTITLE: Keycloak Bootstrap Admin Configuration\nDESCRIPTION: Configuration options for setting up initial bootstrap admin credentials and client settings during master realm creation\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n                     Client id for the temporary bootstrap admin service account. Used only when\n                       the master realm is created. Available only when bootstrap admin client\n                       secret is set. Default: temp-admin.\n--bootstrap-admin-client-secret <client secret>\n                     Client secret for the temporary bootstrap admin service account. Used only\n                       when the master realm is created. Use a non-CLI configuration option for\n                       this option if possible.\n--bootstrap-admin-password <password>\n                     Temporary bootstrap admin password. Used only when the master realm is\n                       created. Use a non-CLI configuration option for this option if possible.\n--bootstrap-admin-username <username>\n                     Temporary bootstrap admin username. Used only when the master realm is\n                       created. Available only when bootstrap admin password is set. Default:\n                       temp-admin.\n```\n\n----------------------------------------\n\nTITLE: Running Quarkus Server Tests with Maven\nDESCRIPTION: Maven command to run tests against a Quarkus Server with SSL disabled. This is necessary as the Quarkus server does not currently support SSL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Pauth-server-quarkus -Dauth.server.ssl.required=false clean verify\n```\n\n----------------------------------------\n\nTITLE: Health Check Configuration\nDESCRIPTION: Options for enabling and configuring health check endpoints.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n--health-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Running FIPS Integration Tests with Quarkus\nDESCRIPTION: Maven command to run integration tests against a Keycloak server on Quarkus with FIPS 140-2 integration enabled. The tests run with FIPS disabled but target a FIPS-enabled Keycloak instance.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmvn -B -f testsuite/integration-arquillian/pom.xml \\\n  clean install \\\n  -Pauth-server-quarkus,auth-server-fips140-2 \\\n  -Dcom.redhat.fips=false\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with Optimized Option\nDESCRIPTION: Command to start the Keycloak server with the '--optimized' option, which disables the automatic configuration update and build process for faster startup based on previous configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start '--optimized'\n```\n\n----------------------------------------\n\nTITLE: Keycloak Transaction Configuration\nDESCRIPTION: Transaction handling configuration for enabling XA datasources in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityMetadataHelpAll.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n--transaction-xa-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Documenting Non-Maven Dependencies in XML License File\nDESCRIPTION: Example of how to document non-Maven dependencies (like JavaScript libraries) in the licenses.xml file, including description, file locations, and license information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/dependency-license-information.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <other>\n      <description>jQuery</description>\n      <locations>\n        <file>themes/keycloak/common/resources/lib/jquery/jquery-1.10.2.js</file>\n      </locations>\n      <licenses>\n        <license>\n          <name>MIT License</name>\n          <url>https://raw.githubusercontent.com/jquery/jquery/1.10.2/MIT-LICENSE.txt</url>\n        </license>\n      </licenses>\n    </other>\n    <other>\n      <description>AngularJS</description>\n      <locations>\n        <directory>themes/keycloak/common/resources/lib/angular</directory>\n      </locations>\n      <licenses>\n        <license>\n          <name>MIT License</name>\n          <url>https://raw.githubusercontent.com/angular/angular.js/v1.4.4/LICENSE</url>\n        </license>\n      </licenses>\n    </other>\n```\n\n----------------------------------------\n\nTITLE: WebAuthN Chrome Driver Error Example\nDESCRIPTION: Example of a runtime error when Chrome driver version is incompatible with the installed Chrome browser.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nCaused by: java.lang.RuntimeException: Unable to instantiate Drone via org.openqa.selenium.chrome.ChromeDriver(Capabilities):\n  org.openqa.selenium.SessionNotCreatedException: session not created: This version of ChromeDriver only supports Chrome version 78\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak in the Background\nDESCRIPTION: This command starts Keycloak in the background, which is necessary for the UI to function properly during development.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/create-keycloak-theme/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-keycloak\n```\n\n----------------------------------------\n\nTITLE: Injecting Keycloak Admin Client in Tests\nDESCRIPTION: Demonstrates how to inject and use the Keycloak admin client in tests, which is automatically connected to the test server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@InjectAdminClient\norg.keycloak.admin.client.Keycloak keycloak;\n\n@Test\npublic void testAdminClient() {\n    keycloak.realms().findAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration\nDESCRIPTION: Configuration options for proxy settings including headers and trusted addresses.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Tests with MySQL Connection\nDESCRIPTION: This Maven command runs Keycloak tests using the MySQL database connection. It dynamically retrieves the MySQL container's IP address.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn install -Dkeycloak.connectionsJpa.url=jdbc:mysql://`docker inspect --format '{{ .NetworkSettings.IPAddress }}' mysql`/keycloak -Dkeycloak.connectionsJpa.driver=com.mysql.jdbc.Driver -Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Header and Payload Example in JSON\nDESCRIPTION: A complete SD-JWT example showing the header and payload with selective disclosure claims. The payload contains hashed disclosures (_sd array), issuer information, timestamps, and subject identifier. It also includes array-based disclosable claims and configuration for key binding.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-is-not-jwk.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7ImtpZCI6ImRmZDFhYTk3LTZkOGQtNDU3NS1hMGZlLTM0Yjk2ZGUyYmZhZCJ9fQ.BLt9LcdgL-0HM1TV2OLLuJq9U1f8vlqha8I-WlcA-Je6e5U84HmWhYEgaBHOtt4NNrzAC-dk2xSxXjjr8aemTw\n```\n\n----------------------------------------\n\nTITLE: Running Base Testsuite in Development Mode\nDESCRIPTION: Command to run the base testsuite in development mode with Keycloak on embedded Undertow server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml clean install\n```\n\n----------------------------------------\n\nTITLE: Using Keycloak CLI Tool in Bash\nDESCRIPTION: The main command structure for using the Keycloak CLI tool. It accepts various options and commands to manage a Keycloak cluster.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh [OPTIONS] [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Running SAML Adapter Tests on Wildfly\nDESCRIPTION: Commands to build app servers and run SAML adapter tests on Wildfly.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -DskipTests -Pbuild-app-servers -f testsuite/integration-arquillian/servers/app-server/pom.xml\n\nmvn -f testsuite/integration-arquillian/tests/base/pom.xml \\\n   clean install \\\n   -Papp-server-wildfly \\\n   -Dtest=org.keycloak.testsuite.adapter.**\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Sources and Distribution\nDESCRIPTION: Commands to build Keycloak sources and distribution. This is a recommended step before running tests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $KEYCLOAK_SOURCES\nmvn clean install -DskipTests=true\ncd distribution\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Options\nDESCRIPTION: Logging configuration parameters including handlers and console logging settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n--log-console-async-queue-length <queue-length>\n--log-console-color <true|false>\n--log-console-format <format>\n```\n\n----------------------------------------\n\nTITLE: Vault Configuration\nDESCRIPTION: Settings for configuring vault providers and related security options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Checks for Keycloak Server\nDESCRIPTION: Option to enable health check endpoints in Keycloak server. When enabled, health checks are available at specific endpoints for monitoring server health.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--health-enabled <true|false>\n                     If the server should expose health check endpoints. If enabled, health checks\n                       are available at the '/health', '/health/ready' and '/health/live'\n                       endpoints. Default: false.\n```\n\n----------------------------------------\n\nTITLE: Debugging Quarkus Server with Maven\nDESCRIPTION: Maven command to run tests against a Quarkus Server with debugging enabled. The default debug port is 5005, which can be changed using the auth.server.debug.port system property.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Pauth-server-quarkus -Dauth.server.ssl.required=false -Dauth.server.debug=true clean verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Test Framework Log Levels for Specific Categories\nDESCRIPTION: This snippet shows how to set log levels for specific categories using both properties file syntax and environment variable syntax. It sets the log level for the 'org.keycloak' category to INFO.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nkc.test.log.category.\"org.keycloak\".level=INFO\nKC_TEST_LOG_CATEGORY__ORG_KEYCLOAK__LEVEL=INFO\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with Optimized Configuration in Bash\nDESCRIPTION: This command starts the Keycloak server using an optimized configuration, skipping the default build step. It results in faster startup times based on previously set configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start '--optimized'\n```\n\n----------------------------------------\n\nTITLE: Running Cluster Tests with Embedded Undertow in Java\nDESCRIPTION: System properties configuration for running cluster tests from IDE using embedded Undertow servers. This setup uses a MySQL database and configures Infinispan for clustering.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n-Dauth.server.undertow=false -Dauth.server.undertow.cluster=true -Dauth.server.cluster=true\n-Dkeycloak.connectionsJpa.url=jdbc:mysql://localhost/keycloak -Dkeycloak.connectionsJpa.driver=com.mysql.jdbc.Driver\n-Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak -Dkeycloak.connectionsInfinispan.clustered=true -Dresources\n-Dkeycloak.connectionsInfinispan.sessionsOwners=2 -Dsession.cache.owners=2\n```\n\n----------------------------------------\n\nTITLE: Keycloak Proxy Configuration Parameters\nDESCRIPTION: Command-line options for configuring proxy settings including headers, protocol, and trusted addresses.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration\nDESCRIPTION: Comprehensive logging configuration including handlers, formats, and log levels.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n--log-console-color <true|false>\n--log-console-format <format>\n--log-console-level <level>\n--log-console-output <output>\n--log-level <category:level>\n--log-level-<category> <level>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Server Configuration Parameters\nDESCRIPTION: Configuration parameters for Keycloak server covering metrics exposure, proxy settings, vault configuration, and logging options. Includes detailed settings for console, file, and syslog logging handlers with their respective formatting and behavior options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityMetadataHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n--log-console-async-queue-length <queue-length>\n--log-console-color <true|false>\n--log-console-format <format>\n--log-console-include-trace <true|false>\n--log-console-json-format <format>\n--log-console-level <level>\n--log-console-output <output>\n--log-file <file>\n--log-file-async <true|false>\n--log-file-async-queue-length <queue-length>\n--log-file-format <format>\n--log-file-include-trace <true|false>\n--log-file-json-format <format>\n--log-file-level <level>\n--log-file-output <output>\n--log-level <category:level>\n--log-level-<category> <level>\n--log-syslog-app-name <name>\n--log-syslog-async <true|false>\n--log-syslog-async-queue-length <queue-length>\n--log-syslog-endpoint <host:port>\n--log-syslog-format <format>\n--log-syslog-include-trace <true|false>\n--log-syslog-json-format <format>\n--log-syslog-level <level>\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Trusted Host\nDESCRIPTION: Adding the OIDC conformance testing host to trusted hosts for allowing anonymous client registration\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-oidc-conformance.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nop.certification.openid.net\n```\n\n----------------------------------------\n\nTITLE: Enabling Log Filtering for Keycloak Test Framework via Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable log filtering using an environment variable when running tests, which can be useful in CI environments.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nKC_TEST_LOG_FILTER=true mvn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Keycloak Server\nDESCRIPTION: These options configure proxy-related settings, including headers, protocol, and trusted addresses.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--proxy-headers <headers>\n--proxy-protocol-enabled <true|false>\n--proxy-trusted-addresses <trusted proxies>\n```\n\n----------------------------------------\n\nTITLE: Running Cluster Tests on Undertow\nDESCRIPTION: Command to run cluster tests using embedded Undertow with MySQL database and specific cache configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nmvn -f testsuite/integration-arquillian/tests/base/pom.xml \\\n    -Pauth-server-cluster-undertow,db-mysql \\\n    -Dsession.cache.owners=2 \\\n    -Dkeycloak.connectionsInfinispan.sessionsOwners=2 \\\n    -Dbackends.console.output=true \\\n    -Dauth.server.log.check=false \\\n    -Dfrontend.console.output=true \\\n    -Dtest=org.keycloak.testsuite.cluster.**.*Test clean install\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Update Compatibility Command - Shell\nDESCRIPTION: Command syntax for running the Keycloak update-compatibility tool with available options and commands. The script provides functionality to check configuration compatibility and manage metadata for rolling updates.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh update-compatibility [OPTIONS] [COMMAND]\n```\n\n----------------------------------------\n\nTITLE: Executing Keycloak Update Compatibility Check\nDESCRIPTION: This command checks if the metadata is compatible with the current configuration. A zero exit code indicates that a rolling update is possible between the old and current metadata.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkc.sh update-compatibility check [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker Container for Keycloak Testing\nDESCRIPTION: This command starts a PostgreSQL Docker container with the necessary environment variables for Keycloak testing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name postgres -e POSTGRES_DATABASE=keycloak -e POSTGRES_USER=keycloak -e POSTGRES_PASSWORD=keycloak -e POSTGRES_ROOT_PASSWORD=keycloak -d postgres\n```\n\n----------------------------------------\n\nTITLE: Running IPA-Tuura Bridge Service Container\nDESCRIPTION: Docker command to start the IPA-Tuura bridge service container. This bridge service acts as the intermediary between Keycloak and the directory service using the SCIMv2 API.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name=ipa-bridge -d --privileged --dns 192.168.15.23 --add-host ipa-bridge.keycloak.org:192.168.15.23 -p 8000:8000 -p 3500:3500 -p 81:81 -p 443:443 --hostname ipa-bridge.keycloak.org quay.io/freeipa/ipa-tuura\n```\n\n----------------------------------------\n\nTITLE: Keycloak Tracing Configuration\nDESCRIPTION: Parameter for enabling OpenTelemetry tracing functionality in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\n--tracing-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Running Social Login Tests\nDESCRIPTION: Command to execute social login tests with Chrome browser and custom configuration file.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml \\\n          clean install \\\n          -Pauth-server-wildfly \\\n          -Dtest=SocialLoginTest \\\n          -Dbrowser=chrome \\\n          -Dsocial.config=/path/to/social.properties\n```\n\n----------------------------------------\n\nTITLE: Running Samba AD container for Keycloak Federation\nDESCRIPTION: Docker command to start a Samba AD container that creates a directory service for the KEYCLOAK.ORG realm. This creates the Active Directory service that will be used as the identity provider.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --privileged  --restart=unless-stopped --network=host -e REALM='KEYCLOAK.ORG' -e DOMAIN='KEYCLOAK' -e ADMIN_PASS='Passw0rd' -e DNS_FORWARDER='8.8.8.8' -v dc1_etc:/usr/local/samba/etc -v dc1_private:/usr/local/samba/private -v dc1_var:/usr/local/samba/var --name dc1 --hostname DC1 diegogslomp/samba-ad-dc\n```\n\n----------------------------------------\n\nTITLE: Keycloak Bootstrap Admin Configuration\nDESCRIPTION: Parameters for configuring temporary bootstrap admin account credentials and client settings during master realm creation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n--bootstrap-admin-client-secret <client secret>\n--bootstrap-admin-password <password>\n--bootstrap-admin-username <username>\n```\n\n----------------------------------------\n\nTITLE: Starting MariaDB Docker Container for Keycloak Testing\nDESCRIPTION: This command starts a MariaDB Docker container with the necessary environment variables for Keycloak testing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mariadb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=keycloak -e MYSQL_USER=keycloak -e MYSQL_PASSWORD=keycloak -d mariadb:10.1\n```\n\n----------------------------------------\n\nTITLE: JWT Header and Payload with Selective Disclosure\nDESCRIPTION: Example of a JWT token that includes selective disclosure (_sd) claims and cryptographic parameters\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-hmac.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJvY3QiLCJrIjoiR0F3ZXkwSlh6U0kzTUlPLS03eUt2b2R5ZC1Yam5XR2M2OWtNT1NXZ2RoNUtQeVlPdmNCQzJNa18zZndjcEFmWGVqZEQ4TVpNUE0yY2JVdWc0RERZZGQzb1ZnVjNmYlRnRnlEdDZpYTQ3SExoeUkybFNDOXJIQ1Foa0NrczRDejNyTFBtbjhGcU1BenFFQmRxQmpmTTdxOVBvTVBvRHl3cS1iU3FpcTBnQVhrbG9nMlA2OXVpa2MxX0F3dDJRdk14ZC12SGVxVGVOb2RKVGlKUllDOTQwcW5HTXNzdlhodTVsU0tKQVNuLWRzamhaX25FQlhhbmUxZGlSZFlFY2daWDJJa196amhIa044dTBJMTNDd2Y2MS1fdHJjVFRkZG9Oal9KZkVMNGpuRHJTdVBNWFFXYzNYUFBXN193U1pGMGFEdndpWnV4YnpXVjRiVVdjS1Q1Nlh3IiwiYWxnIjoiSFMyNTYifX19\n```\n\n----------------------------------------\n\nTITLE: IDE Debug Configuration Properties\nDESCRIPTION: JVM arguments required for debugging Keycloak in an IDE environment, including logging manager and thread factory settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n-Djava.util.logging.manager=org.jboss.logmanager.LogManager\n-Djava.util.concurrent.ForkJoinPool.common.threadFactory=io.quarkus.bootstrap.forkjoin.QuarkusForkJoinWorkerThreadFactory\n```\n\n----------------------------------------\n\nTITLE: TLS and Truststore Configuration\nDESCRIPTION: Configuration options for TLS hostname verification and truststore path specification for HTTPS and SMTP requests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n--truststore-paths <truststore-paths>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Disabled Feature\nDESCRIPTION: Example command to run tests with the authorization feature disabled.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/tests/base/pom.xml clean test -Pauth-server-wildfly -Dauth.server.feature=-Dkeycloak.profile.feature.authorization=disabled\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Cluster Nodes in Java\nDESCRIPTION: System properties and arguments for running individual Keycloak server nodes in a cluster environment. This configuration is used for manual testing of clustering features.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n-Dkeycloak.connectionsJpa.url=jdbc:mysql://localhost/keycloak -Dkeycloak.connectionsJpa.driver=com.mysql.jdbc.Driver\n-Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak -Dkeycloak.connectionsInfinispan.clustered=true\n-Dkeycloak.connectionsInfinispan.sessionsOwners=2 -Dresources\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Management Interface\nDESCRIPTION: Configuration options for the management interface including port settings, SSL/TLS certificates, and authentication options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n--http-management-port <port>\n--http-management-relative-path <path>\n--https-management-certificate-file <file>\n--https-management-key-store-file <file>\n--legacy-observability-interface <true|false>\n```\n\n----------------------------------------\n\nTITLE: Management Interface Configuration\nDESCRIPTION: Configuration options for Keycloak's management interface including ports and certificate settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-management-port <port>\n--https-management-certificate-file <file>\n--https-management-certificate-key-file <file>\n--https-management-certificates-reload-period <reload period>\n--https-management-key-store-file <file>\n--https-management-key-store-password <password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Docker Authentication in YAML\nDESCRIPTION: This YAML snippet defines the authentication configuration for a Docker client using Keycloak. It specifies the realm URL for token authentication, the client service name, and the issuer URL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/resources/dockerClientTest/registry-config.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  token:\n    realm: http://localhost:8080/auth/auth/realms/docker-test-realm/protocol/docker-v2/auth\n    service: docker-test-client\n    issuer: http://localhost:8080/auth/auth/realms/docker-test-realm\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Server Distribution in Bash\nDESCRIPTION: Maven command to build the Keycloak server distribution for Docker authentication tests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -f distribution\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Endpoint for Keycloak Server\nDESCRIPTION: This option enables the metrics endpoint for the Keycloak server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--metrics-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Running Broker Tests with Firefox Strict Cookies in Bash\nDESCRIPTION: Maven command to run broker tests with Firefox strict cookies configuration for testing specific cookie behaviors.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -f testsuite/integration-arquillian/tests/base \\\n                  -Pfirefox-strict-cookies \\\n                  -Dtest=**.broker.** \\\n                  -Dauth.server.host=[some_host] -Dauth.server.host2=[some_other_host]\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Account UI as a library\nDESCRIPTION: Command to build the Keycloak Account UI as a library instead of an app. This is useful when integrating the UI components into another project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/account-ui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nLIB=true pnpm run build\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Configuration Options\nDESCRIPTION: Command-line options for configuring HTTP server settings including ports, threads, and metrics.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-enabled <true|false>\n--http-host <host>\n--http-max-queued-requests <requests>\n--http-metrics-histograms-enabled <true|false>\n--http-metrics-slos <list of buckets>\n--http-pool-max-threads <threads>\n--http-port <port>\n--http-relative-path <path>\n```\n\n----------------------------------------\n\nTITLE: Token Refresh with OpenID Client\nDESCRIPTION: Example of implementing token refresh using the node-openid-client library with Keycloak Admin Client.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Issuer} from 'openid-client';\n\nconst keycloakIssuer = await Issuer.discover(\n  'http://localhost:8080/realms/master',\n);\n\nconst client = new keycloakIssuer.Client({\n  client_id: 'admin-cli', // Same as `clientId` passed to client.auth()\n  token_endpoint_auth_method: 'none', // to send only client_id in the header\n});\n\n// Use the grant type 'password'\nlet tokenSet = await client.grant({\n  grant_type: 'password',\n  username: 'admin',\n  password: 'admin',\n});\n\n// Periodically using refresh_token grant flow to get new access token here\nsetInterval(async () => {\n  const refreshToken = tokenSet.refresh_token;\n  tokenSet = await client.refresh(refreshToken);\n  kcAdminClient.setAccessToken(tokenSet.access_token);\n}, 58 * 1000); // 58 seconds\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with MySQL and TestsuiteCLI\nDESCRIPTION: This command starts the Keycloak server with MySQL database configuration and the TestsuiteCLI.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server -Dkeycloak.connectionsJpa.url=jdbc:mysql://localhost/keycloak -Dkeycloak.connectionsJpa.driver=com.mysql.jdbc.Driver -Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak -DstartTestsuiteCLI\n```\n\n----------------------------------------\n\nTITLE: Client Scopes API Endpoints\nDESCRIPTION: API endpoints for managing client scopes at realm and client levels in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /{realm}/client-scopes\nGET /{realm}/client-scopes\nGET /{realm}/client-scopes/{id}\nPUT /{realm}/client-scopes/{id}\nDELETE /{realm}/client-scopes/{id}\n```\n\n----------------------------------------\n\nTITLE: Keycloak Vault Configuration Parameters\nDESCRIPTION: Command-line options for configuring vault providers and related settings for secret management.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Project with Quarkus Profile in Bash\nDESCRIPTION: Maven command to build the Keycloak project using the Quarkus profile for distribution.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Pdistribution,quarkus clean install\n```\n\n----------------------------------------\n\nTITLE: Verifying Realm Discovery\nDESCRIPTION: Command to check if the Kerberos realm discovery is working correctly. This verifies the connection to the Active Directory domain controller.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ realm discover -v DC1.keycloak.org\n* Resolving: _ldap._tcp.dc1.keycloak.org\n* Resolving: dc1.keycloak.org\n* Performing LDAP DSE lookup on: 192.168.15.23\n* Successfully discovered: keycloak.org\n  keycloak.org\n  type: kerberos\n  realm-name: KEYCLOAK.ORG\n  domain-name: keycloak.org\n  configured: kerberos-member\n  server-software: active-directory\n  client-software: sssd\n  required-package: oddjob\n  required-package: oddjob-mkhomedir\n  required-package: sssd\n  required-package: adcli\n  required-package: samba-common-tools\n  login-formats: %U\n  login-policy: allow-realm-logins\n```\n\n----------------------------------------\n\nTITLE: Management Interface Configuration\nDESCRIPTION: Command-line options for configuring the management interface including ports, paths, and security settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-management-port <port>\n--http-management-relative-path <path>\n--https-management-certificate-file <file>\n--https-management-certificate-key-file <file>\n--https-management-certificates-reload-period <reload period>\n--https-management-client-auth <auth>\n--https-management-key-store-file <file>\n--https-management-key-store-password <password>\n--legacy-observability-interface <true|false>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Health and Metrics Configuration\nDESCRIPTION: Command-line options for enabling and configuring health check endpoints and metrics monitoring.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--health-enabled <true|false>\n--metrics-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Aurora DB Integration Tests Execution\nDESCRIPTION: Maven command for running store integration tests against Aurora DB, including database connection configuration and test suite selection.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nTESTS=`testsuite/integration-arquillian/tests/base/testsuites/suite.sh database`\nmvn test -Pauth-server-quarkus -Pdb-aurora-postgres -Dtest=$TESTS  -Dauth.server.db.host=$AURORA_ENDPOINT -Dkeycloak.connectionsJpa.password=$AURORA_PASSWORD -pl testsuite/integration-arquillian/tests/base\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Admin UI package\nDESCRIPTION: Command to install the Keycloak Admin UI package via npm. This is the first step to integrate the Admin UI into your project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @keycloak/keycloak-admin-ui\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Header and Payload Structure in JSON\nDESCRIPTION: A complete SD-JWT example showing the header, payload with encrypted claims (marked with _sd array), and signature components. It contains identity information with selectively disclosable fields using the SD-JWT format.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps512.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJSU0EiLCJlIjoiQVFBQiIsImFsZyI6IlBTNTEyIiwibiI6InVycnl3WlUzVTUwWWJBbDgxY2dnNnNYMkVQRk5JeFFEVkJWYU5pR2NkRVYzbGdBTVl6a3NJYi1UdGZXSVpKMG9VZnBieF9lV1Y3Znd4blZYUHBFRkdPcGNuZUlKLXBPdV9CV1dMTi1PMl9BNFRudHctUnNzNk5RTFZDdmFvSW05YlZYbDZocWNwbDI1dFNJRlExb0w4Y1hxdXUzcDQxUlZJYXVZSC1PNnRZVndQdEwxeEg5WEp2Ym1OM2ZXMjZNdEpVYVIxZWpicVp1UE9xM1hBMXkwRmU5NkJqYXdRYXRCelprekxoMDhCWHdzTkpCbFA2a2F1aTRVU3F4QkdwWVczOElQTjNQOVdSMEo4akNtVEl1d2dwQmVOUFhQSFA1U2FPdEhtUE1KeEZxNUtIY3lWN0s3OHI4LXFZRFlWSHJieGVHZ01GanFZZXRVZ3A4UHVQbGsxdyJ9fX0.LLARtgBTQPHJynt_of4J7Api8YBM_YtA8EJpF1_ZYu72BGINv5vQjPjX4ZAVzOsNZS5E4uv4RfS0q4Wxl6BNwQ\n```\n\n----------------------------------------\n\nTITLE: Verifying User Creation with TestsuiteCLI\nDESCRIPTION: This command uses the TestsuiteCLI to verify if a specific user was created in a specified realm.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngetUser demo test499\n```\n\n----------------------------------------\n\nTITLE: Vault Configuration Options\nDESCRIPTION: Configuration settings for Keycloak's vault functionality including directory and keystore settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartOptimizedHelpAll.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vault for Keycloak Server\nDESCRIPTION: These options configure the vault provider and related settings for secure storage of secrets.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--vault <provider>\n--vault-dir <dir>\n--vault-file <file>\n--vault-pass <pass>\n--vault-type <type>\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak with Local Quarkus Distribution\nDESCRIPTION: This command starts the Keycloak server using a local Quarkus distribution for development purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm start --local\n```\n\n----------------------------------------\n\nTITLE: FIPS Integration Log Output Example\nDESCRIPTION: Example log output showing successful FIPS integration with Keycloak, including crypto provider details and Java security providers configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_32\n\nLANGUAGE: log\nCODE:\n```\n2022-10-11 19:34:29,521 DEBUG [org.keycloak.common.crypto.CryptoIntegration] (main) Using the crypto provider: org.keycloak.crypto.fips.FIPS1402Provider\n2022-10-11 19:34:31,072 TRACE [org.keycloak.common.crypto.CryptoIntegration] (main) Java security providers: [ \n KC(BCFIPS version 1.000203, FIPS-JVM: enabled) version 1.0 - class org.keycloak.crypto.fips.KeycloakFipsSecurityProvider, \n BCFIPS version 1.000203 - class org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider, \n BCJSSE version 1.001202 - class org.bouncycastle.jsse.provider.BouncyCastleJsseProvider,\n]\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Disclosures Format in JSON\nDESCRIPTION: Example of SD-JWT disclosures that reveal selective claims. The format uses the tilde character as a delimiter between disclosures. Each disclosure contains a salt value, claim name, and claim value which could be a simple string or a complex structure.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-is-not-jwk.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak to Use Test Mail Server\nDESCRIPTION: This command starts the Keycloak test server with configuration to use the test mail server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server -Dkeycloak.mail.smtp.from=auto@keycloak.org -Dkeycloak.mail.smtp.host=localhost -Dkeycloak.mail.smtp.port=3025\n```\n\n----------------------------------------\n\nTITLE: Social Login Configuration Example\nDESCRIPTION: Example configuration file for social login providers showing common properties and provider-specific settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_17\n\nLANGUAGE: properties\nCODE:\n```\ncommon.username=sampleuser@example.org\ncommon.password=commonpassword\ncommon.profile.firstName=Foo\ncommon.profile.lastName=Bar\ncommon.profile.email=sampleuser@example.org\n\ngoogle.clientId=asdfasdfasdfasdfsadf\ngoogle.clientSecret=zxcvzxcvzxcvzxcv\n\nfacebook.clientId=asdfasdfasdfasdfsadf\nfacebook.clientSecret=zxcvzxcvzxcvzxcv\nfacebook.profile.lastName=Test\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server with TestsuiteCLI\nDESCRIPTION: This command starts the Keycloak server with the TestsuiteCLI for creating users and offline sessions.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkeycloak-server -DstartTestsuiteCLI\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Main Codebase Command\nDESCRIPTION: Maven command to build the main Keycloak codebase while skipping test suites and examples. Required before building the Quarkus distribution.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n../mvnw -f ../pom.xml clean install -DskipTestsuite -DskipExamples -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Local Environment Configuration for Keycloak Test Framework Logging\nDESCRIPTION: This snippet shows an example .env file for personal developer configuration. It enables console colors and sets debug log levels for specific categories.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nKC_TEST_CONSOLE_COLOR=true\nKC_TEST_LOG_LEVEL=WARN\n\nKC_TEST_LOG_CATEGORY__TESTINFO__LEVEL=DEBUG\nKC_TEST_LOG_CATEGORY__ORG_KEYCLOAK___LEVEL=DEBUG\nKC_TEST_LOG_CATEGORY__ORG_KEYCLOAK_TEST__LEVEL=DEBUG\nKC_TEST_LOG_CATEGORY__MANAGED_KEYCLOAK__LEVEL=DEBUG\nKC_TEST_LOG_CATEGORY__MANAGED_DB__LEVEL=DEBUG\n```\n\n----------------------------------------\n\nTITLE: BCFIPS Approved Mode Configuration\nDESCRIPTION: Additional Maven properties required for running tests with BCFIPS in approved mode, including keystore type and RSA key size configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n-Dauth.server.fips.mode=strict \\\n-Dauth.server.supported.keystore.types=BCFKS \\\n-Dauth.server.keystore.type=bcfks \\\n-Dauth.server.supported.rsa.key.sizes=2048,4096\n```\n\n----------------------------------------\n\nTITLE: Quarkus Development Mode with Database Test\nDESCRIPTION: Maven command to run database tests with MariaDB in Quarkus development mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n../mvnw clean install -Dkc.test.storage.database=true -Dtest=MariaDBStartDatabaseTest\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Database Tests with Docker Profile\nDESCRIPTION: This Maven command runs Keycloak tests using the MySQL database profile with Docker containers.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian clean verify -Pdb-mysql\n```\n\n----------------------------------------\n\nTITLE: Running Docker Authentication Test on macOS in Bash\nDESCRIPTION: Maven command to run Docker authentication test on macOS. This command includes macOS-specific system properties and test configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/tests/base/pom.xml \\\n    clean test \\\n    -Dtest=DockerClientTest \\\n    -Dkeycloak.profile.feature.docker=enabled \\\n    -Dhost.ip=10.200.10.1\n```\n\n----------------------------------------\n\nTITLE: Starting Test Mail Server\nDESCRIPTION: This command starts a test mail server for testing email sending functionality in Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pmail-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Realm Resources in Keycloak Tests\nDESCRIPTION: Demonstrates how to configure a realm resource using a custom configuration class. This example creates a realm with a specific name and groups.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@InjectRealm(config = MyRealmConfig.class)\nManagedRealm realm;\n\nstatic class MyRealmConfig implements RealmConfig {\n\n    @Override\n    public RealmRepresentation getRepresentation() {\n        return builder()\n                .name(\"myrealm\")\n                .groups(\"group-a\", \"group-b\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Hostname Verification in Keycloak\nDESCRIPTION: This option sets the TLS hostname verification policy for outgoing HTTPS and SMTP requests in Keycloak. Available values include ANY, WILDCARD, STRICT, and DEFAULT, with DEFAULT being the default setting.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdminUser.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n                     The TLS hostname verification policy for out-going HTTPS and SMTP requests.\n                       Possible values are: ANY, WILDCARD (deprecated), STRICT (deprecated),\n                       DEFAULT. Default: DEFAULT.\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version with Bash\nDESCRIPTION: Command to verify the installed Node.js version. The project requires Node.js version 18 or later.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Operator Tests\nDESCRIPTION: This Maven command runs the tests for the Keycloak Operator, building a container image and deploying it remotely in the cluster.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify \\\n  -Dquarkus.container-image.build=true \\\n  -Dquarkus.container-image.tag=test \\\n  -Dquarkus.kubernetes.image-pull-policy=IfNotPresent \\\n  -Dtest.operator.deployment=remote\n```\n\n----------------------------------------\n\nTITLE: Starting Dockerized MySQL for Keycloak Tests\nDESCRIPTION: This command starts a Docker container running MySQL configured for Keycloak performance testing. It sets up the necessary database, user, and password.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/other/jpa-performance/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mysql-keycloak -e MYSQL_ROOT_PASSWORD=keycloak -e MYSQL_DATABASE=keycloak -e MYSQL_USER=keycloak -e MYSQL_PASSWORD=keycloak -d -p 3306:3306 mysql\n```\n\n----------------------------------------\n\nTITLE: Running FIPS 140-2 Unit Tests in Bash\nDESCRIPTION: Maven commands to run FIPS 140-2 unit tests, including an option for BouncyCastle approved mode.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -f crypto/fips1402\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -f crypto/fips1402 -Dorg.bouncycastle.fips.approved_only=true\n```\n\n----------------------------------------\n\nTITLE: Starting Kerberos Test Server\nDESCRIPTION: This command starts an ApacheDS-based Kerberos server for testing Kerberos and LDAP integration with Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkerberos\n```\n\n----------------------------------------\n\nTITLE: Enabling All Tech Preview Features in Keycloak (Bash)\nDESCRIPTION: This command demonstrates how to enable all tech preview features in Keycloak during the build process using the 'preview' option.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --features=preview\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keycloak Server for Docker Tests in Bash\nDESCRIPTION: Maven command to set up the Keycloak server distribution for Docker authentication tests using the Quarkus profile.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/servers/pom.xml \\\n    clean install \\\n    -Pauth-server-quarkus\n```\n\n----------------------------------------\n\nTITLE: Running Linting with pnpm\nDESCRIPTION: Command to manually trigger code linting. Linting and formatting are automatically performed on commit.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Building Custom Keycloak Testing Images\nDESCRIPTION: This script builds custom Keycloak images for testing purposes, requiring the source Keycloak image tag and image as parameters.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./build-testing-docker-images.sh [SOURCE KEYCLOAK IMAGE TAG] [SOURCE KEYCLOAK IMAGE]\n```\n\n----------------------------------------\n\nTITLE: Enabling Minikube Docker Daemon\nDESCRIPTION: This command enables the Minikube Docker daemon for building images within the Minikube environment.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neval $(minikube -p minikube docker-env)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Keycloak Theme Project with NPM\nDESCRIPTION: This command creates a new Keycloak theme project using npm. It allows specifying the project name and type (account or admin).\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/create-keycloak-theme/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create keycloak-theme <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Checking Total Session Count in Keycloak\nDESCRIPTION: This command is used after restarting Keycloak to verify the total count of sessions in Infinispan. The result will be twice the number of user sessions created, as there is also one client session per user session.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nsize\n```\n\n----------------------------------------\n\nTITLE: Running JaCoCo Test Coverage in Keycloak Model Tests\nDESCRIPTION: Command to run a specific test with JaCoCo coverage enabled. Uses JPA profile and targets ClientModelTest with coverage tracking enabled.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/model/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn test -Pjpa -Dtest=ClientModelTest -Djacoco.skip=false\n```\n\n----------------------------------------\n\nTITLE: Starting LDAP Test Server\nDESCRIPTION: This command starts an ApacheDS-based LDAP server for testing LDAP integration with Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pldap\n```\n\n----------------------------------------\n\nTITLE: Running SSSD Integration Tests for Keycloak\nDESCRIPTION: This command executes the SSSD integration tests for Keycloak. It uses the auth-server-wildfly and sssd-testing profiles, and specifies the test directory for SSSD tests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/other/sssd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn test -f testsuite/integration-arquillian/tests/other/sssd/ -Pauth-server-wildfly -Psssd-testing\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Storage Tests\nDESCRIPTION: This Maven command shows how to run Keycloak storage tests, which are disabled by default. It activates the 'test-database' profile and specifies a particular test class to run.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean install -Ptest-database -Dtest=PostgreSQLDistTest\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube with Ingress and Cilium CNI\nDESCRIPTION: This command starts Minikube with the ingress addon and Cilium as the Container Network Interface (CNI) to support Network Policies.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube start --addons ingress --cni cilium\n```\n\n----------------------------------------\n\nTITLE: Creating Offline Sessions in Keycloak\nDESCRIPTION: This command creates 50,000 offline sessions in Keycloak, processing them in batches of 500 per transaction. It's used to test the system's performance and behavior with a large number of sessions.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\npersistSessions 50000 500\n```\n\n----------------------------------------\n\nTITLE: Setting Quarkus Version in Keycloak\nDESCRIPTION: Command to set a specific Quarkus version using the provided script. The version parameter should point to a branch or tag from the Quarkus repository.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./set-quarkus-version.sh <version>\n```\n\n----------------------------------------\n\nTITLE: Generating JaCoCo Coverage Report for Keycloak Tests\nDESCRIPTION: Command to generate a JaCoCo coverage report from previously collected test execution data. Specifies the data file location and generates an HTML report.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/model/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn org.jacoco:jacoco-maven-plugin:0.8.7:report \\\n    -Djacoco.skip=false -Djacoco.dataFile=target/jacoco.exec\n```\n\n----------------------------------------\n\nTITLE: Key Binding JWT for SD-JWT Authentication\nDESCRIPTION: A key binding JWT (kb+jwt) that authenticates the holder of the SD-JWT. It contains a reference to the selective disclosure hash, proving the holder possesses the original credentials without revealing all claims.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps512.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n~eyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJQUzUxMiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiSHBaVTZDLTVSZGhEdUkwckJUTGxvQU9ZcWI4MzRScHpwYVpNQ2c3Qm03WSJ9.X5fd-bLsd_tGP83pfiS4KCCnNgO4WGfB7Sa7339RdmvbzDFPYiwFuyBq_ROAzqBU_B9NDRbRxPQGHNV_I2hYUHj-zIwIYLwS5-VkKPTWunEaL19KGLqi4uPI4ZX_1n4al5PyupDWY2EXt90Xf35KOHpVtaupYz7Z7ZWPi2uG338FD-BXiPgsBCloABdvkdq8EGx6XleBev3S43cW33f-Zozw75L1-WgF_cnObVnFT_7_nOk4N8InGU46SyL_CyeCo-_LXdKN_tDZ2Mi6AEBKwJoD3WY6sf_uI49d1o1USs4AR9PcedbwQKDV-RzF_XQRqD6TZfOEvT6KJtyVUOU2DQ\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Distribution for SSSD Testing\nDESCRIPTION: This command builds the distribution of Keycloak, which is a prerequisite for running the SSSD integration tests. It skips tests and uses the distribution profile.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/other/sssd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -B -DskipTests -Pdistribution\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak CLI on Linux/Unix\nDESCRIPTION: Command to run the Keycloak CLI on Linux or Unix systems. This provides help for configuring Keycloak via the command line interface.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kc.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Operator in Kubernetes Cluster\nDESCRIPTION: These commands create a 'keycloak' namespace and apply the Kubernetes manifests to install the Keycloak Operator.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace keycloak\nkubectl apply -k target\n```\n\n----------------------------------------\n\nTITLE: Logging into Local Docker Registry\nDESCRIPTION: Command to log into the local Docker registry running on port 5000. It uses username and password variables for authentication, which should be replaced with actual credentials.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/services/src/main/resources/DockerComposeYamlReadme.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker login -u $username -p $password localhost:5000\n```\n\n----------------------------------------\n\nTITLE: Injecting Realm in New Keycloak Test Framework\nDESCRIPTION: Shows how to inject a managed realm into a test class using the new framework's annotation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/tests/MIGRATING_TESTS.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@InjectRealm\nManagedRealm realm;\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Lifecycle in Keycloak Tests\nDESCRIPTION: Shows how to configure the lifecycle of injected resources in Keycloak tests. This example sets the realm lifecycle to METHOD, demonstrating how the realm is recreated for each test method.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@InjectRealm(lifecycle = LifeCycle.METHOD)\nManagedRealm realm;\n\n@Test\npublic void test() {\n    realm.admin().users().create(...);\n}\n\n@Test\npublic void test2() {\n    Assertions.assertEquals(0, realm.admin().users().list().size());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Integration Domain Configuration to Bridge Service\nDESCRIPTION: CURL command to send the integration domain configuration to the IPA-Tuura bridge service. This defines how the bridge connects to the Active Directory and Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -v -k -X POST \"https://ipa-bridge.keycloak.org/domains/v1/domain/\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -H \"X-CSRFToken: x1yU9RGPKs4mJdWIOzEc7wKbwbnJ0B6iTHuW6ja0gdBpEOBVacK1vIhSSYlfsnRw\" -d @integrationdomain.json\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Key Binding JWT\nDESCRIPTION: A key binding JWT that provides cryptographic binding between the SD-JWT and the holder's key. Uses ES256 signing algorithm and includes nonce and audience claims.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-jwk-is-malformed.txt#2025-04-22_snippet_2\n\nLANGUAGE: jwt\nCODE:\n```\n~eyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiWDlScnJmV3RfNzBnSHpPY292R1NJdDRGbXM5VGYyZzJoamxXVklfY3haZyJ9.PWBfgGGWj5uAejIoPs4qRxCKeDyGV_Jv7jnqIylUHXiCx0qptjyxp8hHjtATQj-F9RPLuz63YEchq_yueslBeA\n```\n\n----------------------------------------\n\nTITLE: Adding Keycloak Quarkus Server Dependency in XML\nDESCRIPTION: This XML snippet shows how to add the Keycloak Quarkus Server dependency to a project's pom.xml file. It's used to embed the Keycloak server in any Quarkus application.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.keycloak</groupId>\n        <artifactId>keycloak-quarkus-server</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Getting Host IP Address\nDESCRIPTION: Command to retrieve the host's IP address which will be used to configure network communication between components in the setup.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hostname -I\n192.168.15.23 172.17.0.1 172.18.0.1 2804:1b3:a541:3308:ed48:33d3:7038:a0d2\n```\n\n----------------------------------------\n\nTITLE: Opening the Keycloak UI in a Browser\nDESCRIPTION: This command opens the Keycloak UI in the default browser, assuming it's running on localhost:8080.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/create-keycloak-theme/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pre-built Operator Image\nDESCRIPTION: This Maven command runs the testsuite using a pre-built operator image from a remote registry, specifying the image to use.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/operator/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify \\\n     -Dquarkus.container-image.build=false \\\n     -Dquarkus.container-image.image=quay.io/keycloak/keycloak-operator:nightly \\\n     -Dtest.operator.deployment=remote\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Account UI package with npm\nDESCRIPTION: Command to install the Keycloak Account UI package using npm. This is the first step to integrate the UI components into your project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/account-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @keycloak/keycloak-account-ui\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Tests with Async Profiler\nDESCRIPTION: Command to execute tests with Async Profiler integration for flame graph generation. Specifies the test class and path to the async profiler library.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/model/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn test -Pjpa -Dtest=ClientModelTest \\\n    -DlibasyncProfilerPath=/usr/local/async-profiler/build/libasyncProfiler.so\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Base Token with Disclosure Claims\nDESCRIPTION: An SD-JWT token containing selective disclosure claims including nationality, name and address information. The token uses ES256 signing algorithm and includes disclosure references.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-jwk-is-malformed.txt#2025-04-22_snippet_0\n\nLANGUAGE: jwt\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQ1oiLCJjcnYiOiJQLTI1NiIsIngiOiJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwieSI6Ilp4amlXV2JaTVFHSFZXS1ZRNGhiU0lpcnNWZnVlY0NFNnQ0alQ5RjJIWlEifX19.MfjyETGLaL8zJ7xYiWsfhFhvEFCA2Epj7BMsZKboOtBdHw-_ap1bjUnVY_3IDvoRLmyDzb6_AUj-OJ1IQS9_Lw\n```\n\n----------------------------------------\n\nTITLE: Starting Kerberos Test Server with Custom Realm\nDESCRIPTION: This command starts a Kerberos server with a custom realm (KC2.COM) and shifted ports for parallel testing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Pkerberos -Dkeycloak.kerberos.realm=KC2.COM\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Admin Client\nDESCRIPTION: Command to install the Keycloak Admin Client package via npm.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/libs/keycloak-admin-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @keycloak/keycloak-admin-client\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional Icons with Custom Classes in React\nDESCRIPTION: This snippet shows an improved approach to rendering InfoCircleIcon components using a custom Keycloak class. It demonstrates how to use a single class for consistent styling across different status cases.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nswitch (titleStatus) {\n  case \"success\":\n    return (\n      <>\n        <InfoCircleIcon\n          className=\"keycloak-admin--icon--info\" // use a new keycloak class\n        />{\" \"}\n        {titleText}{\" \"}\n      </>\n    );\n  case \"failure\":\n    return (\n      <>\n        <InfoCircleIcon className=\"keycloak-admin--icon--info\" /> {titleText}{\" \"}\n      </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Authentication Test on Fedora in Bash\nDESCRIPTION: Maven command to run Docker authentication test on Fedora. This command includes specific Docker-related system properties and test configurations.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/tests/base/pom.xml \\\n    clean test \\\n    -Dtest=DockerClientTest \\\n    -Dkeycloak.profile.feature.docker=enabled \\\n    -Ddocker.io-prefix-explicit=true\n```\n\n----------------------------------------\n\nTITLE: Building Wildfly Auth Server Artifact for SSSD Testing\nDESCRIPTION: This command builds the integration-arquillian-servers-auth-server-wildfly artifact, which is required for running the SSSD integration tests. It uses the auth-server-wildfly profile.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/other/sssd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -B -Pauth-server-wildfly -f testsuite/integration-arquillian/servers/pom.xml\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Keycloak-Quarkus Project\nDESCRIPTION: Tree structure showing the main directories and their purposes in the Keycloak Quarkus module, including container, deployment, dist, runtime, server and tests directories.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── container\n│   ├── Dockerfile, e.g. used by the Testsuite\n│\n├── deployment\n│   ├── Build-time codebase with all the necessary steps to build and configure the server\n│\n├── dist\n│   ├── Packaging the quarkus distribution\n│\n├── runtime\n│   ├── Runtime codebase with all the runtime code\n│\n├── server\n│   ├── The server itself, only responsible for generating the server artifacts\n│\n└── tests\n    ├── Integration tests for the quarkus distribution\n```\n\n----------------------------------------\n\nTITLE: Examining SD-JWT Format with Encrypted Claims\nDESCRIPTION: A sample SD-JWT (Selective Disclosure JWT) containing encrypted claims and selectively disclosable attributes. The token includes a header, payload with encrypted selective disclosure fields (_sd array), and signature. The payload includes issuer information, timestamps, and nationality data.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es384.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImQiOiJDNnJDUnJSUmM3Z3ZtUFU4S3pOVTEweXRIRW1oRVFhaTY5SkxBeDU3U0FrcHlsNlpxazVXV2FlcUFUNVdDajV0IiwiY3J2IjoiUC0zODQiLCJ4IjoiS2EyazVKRjBSZkVQMFlVU2lFODNmZ1VVS3VIRC16bWQtdXlkYXJMN1JKVjFtdGd3MkhjNU80d0ZJQm85Zk9KOSIsInkiOiJFdEIwSGV1dTlubmZjcDlCLXdGaUdWN3dCT1plTUpMTGVPaHpfUFRiUUxhdUgyTEcwQ25fRlFYajJRZURGOGwxIn19fQ.udOcVKk1WTxg5XldomVczJY2Dptiz4sFf8OQADUC0PaYzOwIl5CjMuTHhs1K-tORGfIO7nPAe_VCLC0jXaSzgQ\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Integration Tests Headlessly\nDESCRIPTION: Command to execute the Playwright integration tests in headless mode. Tests require both Keycloak and development servers to be running.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:integration\n```\n\n----------------------------------------\n\nTITLE: Aurora DB Provisioning Script\nDESCRIPTION: Shell commands to set up Aurora DB cluster for testing, including cluster name, region, and password configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nAURORA_CLUSTER=\"example-cluster\"\nAURORA_REGION=eu-west-1\nAURORA_PASSWORD=TODO\nsource ./.github/scripts/aws/rds/aurora_create.sh\n```\n\n----------------------------------------\n\nTITLE: Converting to PKCS12 Format\nDESCRIPTION: Exports certificate and private key to PKCS12 format with CA chain inclusion\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -in certs/clients/test-user@localhost.cert.pem -inkey certs/clients/test-user@localhost.key.pem -out certs/clients/test-user@localhost.p12 -name test-user -CAfile intermediate/certs/ca-chain.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Wildfly Server\nDESCRIPTION: System properties to enable debug logging for specific packages in Wildfly/EAP server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-Dinfinispan.logging.level=DEBUG\n-Dorg.keycloak.services.scheduled=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Testing AD Integration with Kerberos Authentication\nDESCRIPTION: Commands to test the Active Directory integration in the bridge service using Kerberos authentication. This verifies the bridge can authenticate against the Samba AD service.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kinit Administrator@KEYCLOAK.ORG\nPassword for Administrator@KEYCLOAK.ORG:\nWarning: Your password will expire in 36 days on Wed Jan  8 15:24:44 2025\n```\n\n----------------------------------------\n\nTITLE: Increasing Log Level for Specific Category in Keycloak Test Framework\nDESCRIPTION: This example shows how to increase the log level for a specific category when running a particular test using an environment variable.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nKC_TEST_LOG_CATEGORY__ORG_KEYCLOAK__LEVEL=DEBUG mvn test -Dtest=ProblematicTest\n```\n\n----------------------------------------\n\nTITLE: Encoded JWT Token with SD-JWT Claims\nDESCRIPTION: A JSON Web Token using the ES256 algorithm with selective disclosure claims. The token contains personal identity information including name, email, phone, address and age verification claims. The data is structured using the SD-JWT format with cryptographic digests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s3.3-unsecured-sd-jwt.txt#2025-04-22_snippet_0\n\nLANGUAGE: JWT\nCODE:\n```\neyJhbGciOiAiRVMyNTYiLCAia2lkIjogImRvYy1zaWduZXItMDUtMjUtMjAyMiIsICJ0eXAiOiAidmMrc2Qtand0In0.eyJfc2QiOiBbIjA5dktySk1PbHlUV00wc2pwdV9wZE9CVkJRMk0xeTNLaHBINTE1blhrcFkiLCAiMnJzakdiYUMwa3k4bVQwcEpyUGlvV1RxMF9kYXcxc1g3NnBvVWxnQ3diSSIsICJFa084ZGhXMGRIRUpidlVIbEVfVkNldUM5dVJFTE9pZUxaaGg3WGJVVHRBIiwgIklsRHpJS2VpWmREd3BxcEs2WmZieXBoRnZ6NUZnbldhLXNONndxUVhDaXciLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiamRyVEU4WWNiWTRFaWZ1Z2loaUFlX0JQZWt4SlFaSUNlaVVRd1k5UXF4SSIsICJqc3U5eVZ1bHdRUWxoRmxNXzNKbHpNYVNGemdsaFFHMERwZmF5UXdMVUs0Il0sICJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1ZXIiLCAiaWF0IjogMTY4MzAwMDAwMCwgImV4cCI6IDE4ODMwMDAwMDAsICJ2Y3QiOiAiaHR0cHM6Ly9jcmVkZW50aWFscy5leGFtcGxlLmNvbS9pZGVudGl0eV9jcmVkZW50aWFsIiwgIl9zZF9hbGciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydiI6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIn19fQ.YHjaSwaBy-6hBYBre1F1ehiHNp69F9jnP2Hve3g0gNTzG_6GxV-E9rPR5m_CCo1SgDk0GaE5SII6FBprkwDP-Q~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImVtYWlsIiwgImpvaG5kb2VAZXhhbXBsZS5jb20iXQ~WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgInBob25lX251bWJlciIsICIrMS0yMDItNTU1LTAxMDEiXQ~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImJpcnRoZGF0ZSIsICIxOTQwLTAxLTAxIl0~WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImlzX292ZXJfMTgiLCB0cnVlXQ~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImlzX292ZXJfMjEiLCB0cnVlXQ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImlzX292ZXJfNjUiLCB0cnVlXQ\n```\n\n----------------------------------------\n\nTITLE: Clearing Keycloak Server Data\nDESCRIPTION: This command clears the existing data from the Keycloak server without re-downloading the server itself.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm delete-data\n```\n\n----------------------------------------\n\nTITLE: Creating CSR with Extensions\nDESCRIPTION: Generates a CSR with Subject Alternative Names (SAN) using custom configuration\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -config intermediate/openssl-san.cnf -key certs/clients/test-user@localhost.key.pem -new -sha256 -out certs/clients/test-user@localhost.csr.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Signing Request (CSR)\nDESCRIPTION: Generates a CSR using SHA-256 hashing algorithm with standard configuration\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -config intermediate/openssl.cnf -key certs/clients/test-user@localhost.key.pem -new -sha256 -out certs/clients/test-user@localhost.csr.pem\n```\n\n----------------------------------------\n\nTITLE: Overriding Keycloak Test Framework Logging Configuration via Environment Variables\nDESCRIPTION: This example demonstrates how to override default logging settings using environment variables when running tests from the command line. It disables log filtering and sets the log level to INFO.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nKC_TEST_LOG_FILTER=FALSE KC_TEST_LOG_LEVEL=INFO mvn test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Quarkus Distribution in Bash\nDESCRIPTION: Maven command to run tests using the Quarkus distribution of Keycloak.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f testsuite/integration-arquillian/pom.xml clean install -Pauth-server-quarkus\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak Tests with MariaDB Connection\nDESCRIPTION: This Maven command runs Keycloak tests using the MariaDB database connection. It dynamically retrieves the MariaDB container's IP address.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-db.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn install -Dkeycloak.connectionsJpa.url=jdbc:mariadb://`docker inspect --format '{{ .NetworkSettings.IPAddress }}' mariadb`/keycloak -Dkeycloak.connectionsJpa.driver=org.mariadb.jdbc.Driver -Dkeycloak.connectionsJpa.user=keycloak -Dkeycloak.connectionsJpa.password=keycloak\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Options for Keycloak\nDESCRIPTION: Configuration parameters for Syslog output formatting, protocol selection, and message type specification. Includes options for maximum message length and output format selection.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--log-syslog-output <output>\n--log-syslog-protocol <protocol>\n--log-syslog-type <type>\n```\n\n----------------------------------------\n\nTITLE: Verifying Kerberos Ticket Cache\nDESCRIPTION: Command to verify the Kerberos ticket cache which confirms successful authentication with the Active Directory service through the bridge.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ klist\nTicket cache: KEYRING:persistent:0:0\nDefault principal: Administrator@KEYCLOAK.ORG\n\nValid starting     Expires            Service principal\n12/02/24 20:01:56  12/03/24 06:01:56  krbtgt/KEYCLOAK.ORG@KEYCLOAK.ORG\nrenew until 12/09/24 20:01:54\n```\n\n----------------------------------------\n\nTITLE: Validating Certificate Chain\nDESCRIPTION: Verifies the certificate's chain of trust against the CA chain\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl verify -CAfile intermediate/certs/ca-chain.cert.pem certs/clients/test-user@localhost.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling Arquillian Debugging\nDESCRIPTION: System property to enable detailed Arquillian debugging information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-Darquillian.debug=true\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Default Logging Configuration for Keycloak Test Framework\nDESCRIPTION: This example provides a more complete default logging configuration in a keycloak-test.properties file. It sets various log levels for different categories and enables log filtering.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nkc.test.log.level=WARN\n\nkc.test.log.filter=true\n\nkc.test.log.category.\"testinfo\".level=INFO\nkc.test.log.category.\"org.keycloak.testframework\".level=INFO\nkc.test.log.category.\"org.keycloak\".level=WARN\nkc.test.log.category.\"managed.keycloak\".level=WARN\nkc.test.log.category.\"managed.db\".level=WARN\n```\n\n----------------------------------------\n\nTITLE: Configuring Testsuite Logging\nDESCRIPTION: Example of setting Keycloak logging level to debug for both IDE and Maven runs.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-Dkeycloak.logging.level=debug\n```\n\n----------------------------------------\n\nTITLE: Running Chrome with Kerberos Authentication\nDESCRIPTION: This command starts Google Chrome with configuration to allow SPNEGO/Kerberos login from localhost.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/google-chrome-stable --auth-server-whitelist=\"localhost\"\n```\n\n----------------------------------------\n\nTITLE: Management Interface Configuration\nDESCRIPTION: Configuration options for the management interface including ports, paths, and HTTPS settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n--http-management-port <port>\n--http-management-relative-path <path>\n--https-management-certificate-file <file>\n--https-management-certificate-key-file <file>\n--https-management-certificates-reload-period <reload period>\n--https-management-client-auth <auth>\n--https-management-key-store-file <file>\n--https-management-key-store-password <password>\n--legacy-observability-interface <true|false>\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Documentation with Maven\nDESCRIPTION: Command to build the Keycloak documentation guides. This Maven command processes the FreeMarker-enabled AsciiDoc files and generates pure AsciiDoc and HTML output.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/guides/GENERATE-DOCS.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd docs\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key with OpenSSL\nDESCRIPTION: Creates a 4096-bit RSA private key encrypted with AES-256 and sets appropriate permissions\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -aes256 -out certs/clients/test-user@localhost.key.pem 4096\nchmod 400 certs/clients/test-user@localhost.key.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling Surefire Debugging\nDESCRIPTION: System property to enable Surefire debugging for remote debugging attachment.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-Dmaven.surefire.debug=true\n```\n\n----------------------------------------\n\nTITLE: Monitoring HTTP Error Logs for Bridge Service\nDESCRIPTION: Command to monitor the Apache HTTP server error logs in the IPA-Tuura bridge service, useful for troubleshooting during the integration domain setup.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ tail -f /var/log/httpd/error_log\n```\n\n----------------------------------------\n\nTITLE: Database Reuse Configuration for Keycloak Testing\nDESCRIPTION: Configuration option for enabling database reuse in testing environment, which requires additional Testcontainers configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/README.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Value                                               | Description                                                                                                                                                                 |\n|-----------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Setting Latest Snapshot Quarkus Version\nDESCRIPTION: Command to update Keycloak to use the latest snapshot version of Quarkus.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./set-quarkus-version.sh\n```\n\n----------------------------------------\n\nTITLE: Keycloak Management Interface Configuration\nDESCRIPTION: Command-line options for setting up the management interface including ports, paths, and security settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-management-port <port>\n--http-management-relative-path <path>\n--https-management-certificate-file <file>\n--https-management-certificate-key-file <file>\n--https-management-certificates-reload-period <reload period>\n--https-management-client-auth <auth>\n--https-management-key-store-file <file>\n--https-management-key-store-password <password>\n```\n\n----------------------------------------\n\nTITLE: Running License File Download Script\nDESCRIPTION: Command for running the download-license-files.sh script to update individual license files based on the XML license configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/dependency-license-information.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ distribution/licenses-common/download-license-files.sh distribution/feature-packs/server-feature-pack/src/main/resources/licenses/rh-sso/licenses.xml\n```\n\n----------------------------------------\n\nTITLE: Encoding Selective Disclosure JWT for Keycloak Authentication\nDESCRIPTION: This code snippet represents a complete Selective Disclosure JWT. It includes the header, payload, and signature parts, separated by periods. The token contains various claims including issuer, subject, expiration, and custom fields like nationalities and contact information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s6.1-issued-payload.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\neyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBbIkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tBTmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFrb2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpnbGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUuY29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjogInVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSJ9fX0.TpMrn_a_ZSedw-jC2XAD74GBXhB5t35pQK1-MYiYnibXr-O4sumCK-BKwIseZm6maVGhglKOs6nwN5ooUF3uiQ~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImVtYWlsIiwgImpvaG5kb2VAZXhhbXBsZS5jb20iXQ~WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgInBob25lX251bWJlciIsICIrMS0yMDItNTU1LTAxMDEiXQ~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgInBob25lX251bWJlcl92ZXJpZmllZCIsIHRydWVd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImJpcnRoZGF0ZSIsICIxOTQwLTAxLTAxIl0~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgInVwZGF0ZWRfYXQiLCAxNTcwMDAwMDAwXQ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0~WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgIkRFIl0~\n```\n\n----------------------------------------\n\nTITLE: Configuring i18next for Keycloak translations\nDESCRIPTION: Configuration snippet for setting up i18next with a custom backend to fetch Keycloak-specific translations. This enables localization support in the account UI.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/account-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbackend: {\n  loadPath: `http://localhost:8180/resources/master/account/{{lng}}`,\n  parse: (data: string) => {\n    const messages = JSON.parse(data);\n\n    return Object.fromEntries(\n      messages.map(({ key, value }) => [key, value])\n    );\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Keycloak Server\nDESCRIPTION: This command removes the existing Keycloak server installation, allowing for a fresh download of the latest Nightly version.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/keycloak-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm delete-server\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Specific Module\nDESCRIPTION: Command to rebuild a specific module (services) after making changes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn -f services/pom.xml clean install\n```\n\n----------------------------------------\n\nTITLE: Keycloak Logging Configuration Parameters\nDESCRIPTION: Command-line options for configuring logging handlers and asynchronous logging behavior.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartHelp.approved.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--log <handler>\n--log-async <true|false>\n--log-console-async <true|false>\n```\n\n----------------------------------------\n\nTITLE: Encoding Holder Binding JWT Header and Payload in JSON\nDESCRIPTION: This snippet shows the header and payload of a Holder Binding JWT encoded in JSON format. It includes claims for key binding and a hash of the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es512.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kid\": \"holder\",\n  \"typ\": \"kb+jwt\",\n  \"alg\": \"ES512\"\n}\n{\n  \"nonce\": \"1234567890\",\n  \"aud\": \"https://verifier.example.org\",\n  \"iat\": 1702315679,\n  \"sd_hash\": \"Zc8hcoVPo7EPNKPg4cwNUu1W0kbyap8-srNqXJrRHs8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing JWT Token with Selective Disclosure Claims\nDESCRIPTION: A JWT token containing selectively disclosable claims including personal information like address, name, email, phone number and birthdate. The token uses ES256 signing algorithm and includes both Japanese and English character data.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/a1.example2-sdjwt.txt#2025-04-22_snippet_0\n\nLANGUAGE: JWT\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCIgOiAidmMrc2Qtand0Iiwia2lkIiA6ICJkb2Mtc2lnbmVyLTA1LTI1LTIwMjIifQ.eyJfc2QiOlsiOWhmNW5pVWRlV3JQbWFVNW16NzI3T0VMb0tIWDVURFpqckJWSENWenFjZyIsIktmdjhVWFROREcyTldQdjZDdFQ1UUFhLXc1LXVnT2ZJQ2FvYXA0NzRjcmsiLCJLdWV0MXlBYTBISVF2WW5PVmQ1OWhjVmlPOVVnNkoya1NmcVlSQmVvd3ZFIiwiTU1sZE9GRnpCMmQwdW1sbXBUSWFHZXJoV2RVX1BwWWZMdktoaF9mXzlhWSIsIlg2WkFZT0lJMnZQTjQwVjd4RXhad1Z3ejd5Um1MTmNWd3Q1REw4Ukx2NGciLCJpaER4UDFwSjU5LWlSYi1hZnQyNWozY3FDMVNoQ2hoT19zV0MwMmdWVUd3IiwiczBCS1lzTFd4UVFlVTh0VmxsdE03TUtzSVJUckVJYTFQa0ptcXhCQmY1VSIsInZnNzBnZnpYTzhIUjdFUkRrTDQ2UzZJb3IxZXkwRHZab0VVSHVwSndveGMiXSwiX3NkX2FsZyI6InNoYS0yNTYiLCJhZGRyZXNzIjp7Il9zZCI6WyJJWk95Sm4wRDE3YUs4NDVpWjhpNWhEbG9Ta2FydGlVbHZwX2hLak5iQXQ4IiwiTHN4X3R3LVV3RVpfSHNLOFFjSURrQ241V3ZmZTVCbXZjbldRQjZpa3FxbyIsIlFOUWQzX3k4bzZxdGRKZ3VRRHVBM3pkZmRZei1XZ0xTYWplMDZzMlVtV00iLCJVV3p2Q0JVUll4NGRTa2VCQ3B0Z0x0dWRGYkxnbkpvQmdtYUhCLTc2bE9nIiwiY3g0dG9FYjFxQVJrQWY4TnVEMEFUazNvTTZtOGEwcThuQVZGRHRCZGZvbyIsIm9VdUU5MERVQ3gzWHVfSDV6UU1CRXFBZGJNcmxBWjdRb0s1eklKX0IxbUEiLCJxZDJHNVRHSC02TTFxTnk4b3VoWGZzRTdVNnZXRE9ucDJGVXZvdkFhVzc0IiwidU5Ib1dZaFhzWmhWSkNORTJEcXktenF0N3Q2OWdKS3k1UWFGdjdHck1YNCJdfSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMH0.MEQCIDiR0hG5E-jCC6YEr1nrTJSOwIn7FL8FmQWhJfFgkjRrAiAPPnEfgnBRiad2RyfNjIx6UzGV2TP0SYLhNTm6syGMjw~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgInN0cmVldF9hZGRyZXNzIiwgIuadseS6rOmDvea4r-WMuuiKneWFrOWcku-8lOS4geebru-8kuKIku-8mCJd~WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImxvY2FsaXR5IiwgIuadseS6rOmDvSJd~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgInJlZ2lvbiIsICLmuK_ljLoiXQ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImNvdW50cnkiLCAiSlAiXQ~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN1YiIsICI2YzVjMGE0OS1iNTg5LTQzMWQtYmFlNy0yMTkxMjJhOWVjMmMiXQ~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuX25hbWUiLCAi5aSq6YOOIl0~WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1lIiwgIuWxseeUsCJd~WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgImVtYWlsIiwgIlwidW51c3VhbCBlbWFpbCBhZGRyZXNzXCJAZXhhbXBsZS5qcCJd~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgInBob25lX251bWJlciIsICIrODEtODAtMTIzNC01Njc4Il0~WyJ5eXRWYmRBUEdjZ2wyckk0QzlHU29nIiwgImJpcnRoZGF0ZSIsICIxOTQwLTAxLTAxIl0\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties for Keycloak Admin UI\nDESCRIPTION: Example of defining and using CSS custom properties (variables) for the Keycloak Admin UI, following PatternFly conventions with Keycloak-specific namespacing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--keycloak-admin--brand--Height: var(--pf-v5-global--spacer--xl);\n```\n\n----------------------------------------\n\nTITLE: Running TOTP Code Generator\nDESCRIPTION: This command starts a TOTP code generator utility for testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java -Ptotp\n```\n\n----------------------------------------\n\nTITLE: Enabling Multicast for Cluster Setup in Bash\nDESCRIPTION: Commands to enable MULTICAST on the machine's loopback network interface, required for clustering tests. These commands must be run with root privileges.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nroute add -net 224.0.0.0 netmask 240.0.0.0 dev lo\nifconfig lo multicast\n```\n\n----------------------------------------\n\nTITLE: Keycloak Admin Bootstrap Command Options\nDESCRIPTION: Available command line options for the bootstrap-admin command including help display, non-interactive mode, and verbose error output options.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBootstrapAdmin.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help           This help message.\n--no-prompt          Run non-interactive without prompting\n-v, --verbose        Print out error details when running this command.\n```\n\n----------------------------------------\n\nTITLE: Example of using action commands in GitHub issue comments\nDESCRIPTION: Demonstrates how to append an action command (~missing-info) to a comment to trigger the missing information workflow for an issue that lacks sufficient details.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/bug-triage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThere is not enough information here, and I'm not following the steps-to-reproduce.\n\n~missing-info\n```\n\n----------------------------------------\n\nTITLE: Generating Selective Disclosure JWT (SD-JWT) in JSON\nDESCRIPTION: This snippet shows an example of a Selective Disclosure JWT (SD-JWT). It includes a header, payload with selective disclosure claims, and a signature. The token contains various claims including issuer, subject, expiration, and nationality information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb--explicit-kid.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0Iiwia2lkIjoiZG9jLXNpZ25lci0wNS0yNS0yMDIyIn0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCJ5IjoiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSJ9fX0.N0xUjkyxK6q-uvDF0bLpOSq8XI-QXZ9iI5U4w4GSx9NwDZQfg4P9SffgjQ11LwZKKfLprNernp53-oRBWaOuDA\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits for Keycloak Contributions\nDESCRIPTION: Example of how to sign off Git commits when contributing to Keycloak, which is required to comply with the Developer's Certificate of Origin.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --signoff --message \"This is the commit message\"\n```\n\n----------------------------------------\n\nTITLE: Checking User Count with TestsuiteCLI\nDESCRIPTION: This command uses the TestsuiteCLI to check the count of users in a specified realm.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngetUsersCount demo\n```\n\n----------------------------------------\n\nTITLE: Admin Events Handling - New Framework Example\nDESCRIPTION: Shows the updated approach for handling admin events in the new test framework using AdminEvents injection.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/tests/MIGRATING_TESTS.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@InjectAdminEvents\npublic AdminEvents adminEvents;\n\npublic void myTest() {\n    AdminEventAssertion.assertEvent(adminEvents.poll(), OperationType.CREATE, ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Endpoints in Keycloak (Bash)\nDESCRIPTION: This command demonstrates how to enable metrics endpoints in Keycloak during the build process. When enabled, metrics will be available at the '/metrics' endpoint.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --metrics-enabled=true\n```\n\n----------------------------------------\n\nTITLE: Event Metrics Configuration Options\nDESCRIPTION: Settings for user event metrics collection and monitoring, including event type selection and tag configuration.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testStartDevHelpAll.approved.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n--event-metrics-user-enabled <true|false>\n--event-metrics-user-events <events>\n--event-metrics-user-tags <tags>\n```\n\n----------------------------------------\n\nTITLE: JWT Key Binding Token in JSON\nDESCRIPTION: This snippet shows a JWT key binding token. It includes a key ID, token type, and algorithm (ES256). The payload contains a nonce, audience, issued at time, and a hash of the selective disclosure claims.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kid\": \"holder\",\n  \"typ\": \"kb+jwt\",\n  \"alg\": \"ES256\"\n}.{\n  \"nonce\": \"1234567890\",\n  \"aud\": \"https://verifier.example.org\",\n  \"iat\": 1702315679,\n  \"sd_hash\": \"X9RrrfWt_70gHzOcovGSIt4Fms9Tf2g2hjlWVI_cxZg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Public Key Storage XML\nDESCRIPTION: XML configuration to disable the minimum time between public key requests by setting minTimeBetweenRequests to -1. This is needed for the OP-Rotation-RP-Sig test to pass.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-oidc-conformance.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<spi name=\"publicKeyStorage\">\n    <provider name=\"infinispan\" enabled=\"true\">\n        <properties>\n            <property name=\"minTimeBetweenRequests\" value=\"-1\"/>\n        </properties>\n    </provider>\n</spi>\n```\n\n----------------------------------------\n\nTITLE: Increasing WebDriver Timeout\nDESCRIPTION: System property to increase WebDriver page load timeout to 1 hour.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-Dpageload.timeout=3600000\n```\n\n----------------------------------------\n\nTITLE: Key Binding JWT\nDESCRIPTION: RS256 signed Key Binding JWT containing holder verification data with nonce and SD hash values.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-rs256.txt#2025-04-22_snippet_2\n\nLANGUAGE: jwt\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJSUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiRWRER05ldkJ5YlVCMnpSYnpBZXl1Z2hHa2l3UG5tZVRCQS10QlhGVHpocyJ9.Bhec_71SLidxezU4HqkvrtWPF16pHkrPos3OL9y1rOR0ACgZ2KEigFr7pIn59_be60xi-EeNvAo1zt0N5uILBd3jkKjRmpC2MO2ZkIgKterJN_MEcCXlOQZc48QoDJIBuvmXq5wmIZMVfUJTw9i2PhtfaX49K5Fpmf3s9Iv4WnJLY7wVswiIYNFckKxal9agTCKNxZ5SAyz_3mZ3VJYeSG7d9IjhQ3w7w19jcsdaL635qt_Vf75dDodLZjlh1N0VhRqxbQj2sl4NbrC3Ezr7JXcSdUipn5vjRSgV4g8-ws-EF2NMhwPR4Ut_HSXNpge2NMqJcaTjXnmmX6RQesdGyA\n```\n\n----------------------------------------\n\nTITLE: Enabling Keycloak Features (Bash)\nDESCRIPTION: This example shows how to enable a specific feature in Keycloak during the build process. It uses the '--features' flag to specify the feature name.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testBuildHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh build --features=<feature_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Tracing Settings\nDESCRIPTION: OpenTelemetry tracing configuration options including compression, endpoints, protocols, and sampling settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelpAll.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n--tracing-enabled <true|false>\n--tracing-compression <method>\n--tracing-endpoint <url>\n--tracing-jdbc-enabled <true|false>\n--tracing-protocol <protocol>\n--tracing-sampler-ratio <ratio>\n--tracing-service-name <name>\n```\n\n----------------------------------------\n\nTITLE: Disclosures for SD-JWT Claims\nDESCRIPTION: A series of tilde-separated encoded disclosures that represent claims that can be selectively revealed from the SD-JWT. Each disclosure contains encrypted claim data that can be individually shared with verifiers.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps512.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Keycloak Truststore Configuration\nDESCRIPTION: Parameters for configuring TLS hostname verification and system truststore paths for HTTPS and SMTP connections.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n--truststore-paths <truststore-paths>\n```\n\n----------------------------------------\n\nTITLE: Verifying Integration Domain Configuration\nDESCRIPTION: CURL command to verify that the integration domain was correctly added to the IPA-Tuura bridge service.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -k -X GET \"https://ipa-bridge.keycloak.org/domains/v1/domain/\" -H \"accept:application/json\" -H \"X-CSRFToken: x1yU9RGPKs4mJdWIOzEc7wKbwbnJ0B6iTHuW6ja0gdBpEOBVacK1vIhSSYlfsnRw\"\n```\n\n----------------------------------------\n\nTITLE: Keycloak OpenTelemetry Configuration\nDESCRIPTION: Configuration option for enabling OpenTelemetry tracing feature in Keycloak\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nEnables the OpenTelemetry tracing. Default: false. Available only when 'opentelemetry' feature is enabled.\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Keycloak Server\nDESCRIPTION: These options control the logging behavior of the Keycloak server, including log handlers and asynchronous logging.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n--log <handler>\n--log-async <true|false>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Linking to Keycloak Contribution Guidelines\nDESCRIPTION: This HTML comment provides a reference to the Keycloak project's contribution guidelines document, directing contributors to read the guidelines before contributing to the project.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/pull_request_template.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!---\nPlease read https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md and follow these guidelines when contributing to Keycloak\n-->\n```\n\n----------------------------------------\n\nTITLE: Running WebAuthN Tests with Specific Chrome Driver\nDESCRIPTION: Command to run WebAuthN tests with a specified Chrome driver version.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n-DchromeDriverVersion=77.0.3865.40\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Header and Payload\nDESCRIPTION: Example of an SD-JWT with ES256 signature algorithm, containing selective disclosure claims for personal information and nationality data. Includes holder binding with RSA key confirmation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-rs256.txt#2025-04-22_snippet_0\n\nLANGUAGE: jwt\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJSU0EiLCJlIjoiQVFBQiIsIm4iOiJpWGtzVXQ5ZXY2NFdRdmdmM3llM0VTWXZFcGxkWkNkNGlBNUgwbVBzLUkyRjNmUjNLd1E2M0dWd2FuTDdHNlk3Z1REZ2YyZzE3SjhpVHVic210WGttUnFHdzNNb0JoLVVLYncwYjUyZTZtZm0wbG5wT24yMElXamxKcXpaVDROUTZ2eFpqMkdXbEx0bUhvUTBpM0JTQTliMW5CVDBkMHVNYk9kZHlRS0plOEtRTGJIZUoyOXF3UEFzQWl5X3R5czBkd3d2R1dmV2VKUHVvTTNfY2pxcTRXQ0Z3ZDllNXlXejU2VFFXZFljSDZ3dFB6RzM4R0JPc3hOdmtTSW53NXhyWXZlOHZzcjNLY0tISjYySDE2NHhZU2ZNQ3BiYXVhSkFTY3hrcnUwRUwwUXVxVzB6dzZKdjRiZVZITUtqSXo1NWxHYTV4QmFybWxxSkZBRnl5MWwwclEifX19\n```\n\n----------------------------------------\n\nTITLE: Converting PKCS12 Keystore to BCFKS Format using Keytool\nDESCRIPTION: Command for importing a PKCS12 keystore to BCFKS format using Bouncy Castle FIPS provider. Requires bc-fips JAR in Maven repository and custom Java security properties. Uses default password 'passwordpassword'.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/fips/README-keystores-format-conversion.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -importkeystore -srckeystore keycloak-fips.keystore.pkcs12 -destkeystore keycloak-fips.keystore.bcfks \\\n    -srcstoretype PKCS12 -deststoretype BCFKS -deststorepass passwordpassword \\\n    -providername BCFIPS \\\n    -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \\\n    -provider org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \\\n    -providerpath $MAVEN_REPO_HOME/org/bouncycastle/bc-fips/1.0.2.5/bc-fips-1.0.2.5.jar \\\n    -J-Djava.security.properties=$KEYCLOAK_SOURCES/testsuite/integration-arquillian/servers/auth-server/common/fips/kc.keystore-create.java.security\n```\n\n----------------------------------------\n\nTITLE: Signing Certificate with CA\nDESCRIPTION: Creates a signed certificate from CSR using intermediate CA with user certificate extensions and 375-day validity\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ca -config intermediate/openssl.cnf -extensions usr_cert -days 375 -notext -md sha256 -in certs/clients/test-user@localhost.csr.pem -out certs/clients/test-user@localhost.cert.pem\n\nchmod 444 certs/clients/test-user@localhost.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak CLI on Windows\nDESCRIPTION: Command to run the Keycloak CLI on Windows systems. This provides help for configuring Keycloak via the command line interface.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n$ bin\\kc.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This configuration allows all web crawlers (User-agent: *) to access the entire website without any restrictions (Disallow: empty). It follows the standard format as described in the robotstxt.org specification.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/apps/admin-ui/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Viewing SD-JWT Disclosure Example\nDESCRIPTION: Example of SD-JWT disclosures that contain selectively revealed claims. These disclosures are base64url-encoded objects that can be presented to a verifier to reveal specific claims without exposing the entire credential.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es384.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Using PatternFly Variables in Keycloak Admin UI CSS\nDESCRIPTION: Demonstration of using PatternFly global variables for spacing in Keycloak Admin UI custom CSS, promoting consistency and maintainability.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.keycloak-admin--manage-columns__dropdown {\n  margin-bottom: var(--pf-v5-global--spacer--xl);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Maven Dependencies in XML License File\nDESCRIPTION: Example of how to document Maven dependencies in the licenses.xml file, including groupId, artifactId, version, and license information with name and URL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/dependency-license-information.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n      <groupId>org.sonatype.plexus</groupId>\n      <artifactId>plexus-sec-dispatcher</artifactId>\n      <version>1.3</version>\n      <licenses>\n        <license>\n          <name>Apache Software License 2.0</name>\n          <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url> <!-- Source repo contains no license file -->\n        </license>\n      </licenses>\n    </dependency>\n    <dependency>\n      <groupId>org.antlr</groupId>\n      <artifactId>antlr-runtime</artifactId>\n      <version>3.5</version>\n      <licenses>\n        <license>\n          <name>BSD 3-clause New or Revised License</name>\n          <url>https://raw.githubusercontent.com/antlr/antlr3/antlr-3.5/runtime/Python/LICENSE</url>\n        </license>\n      </licenses>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Health Check Endpoints for Keycloak Server\nDESCRIPTION: This option enables health check endpoints for the Keycloak server.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--health-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Encoding SD-JWT Disclosures in Base64URL\nDESCRIPTION: This snippet shows the Base64URL-encoded disclosures for the SD-JWT. Each disclosure contains a salt, claim name, and claim value.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es512.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd\nWyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0\nWyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd\nWyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook with Inference in React TypeScript\nDESCRIPTION: Demonstration of using the useState hook with type inference for primitive types in React with TypeScript.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [isEnabled, setIsEnabled] = useState(false);\n```\n\n----------------------------------------\n\nTITLE: Decoding Keycloak JWT Token in JSON\nDESCRIPTION: This code snippet represents a decoded JWT token used in Keycloak. It includes the header, payload, and signature sections. The token contains claims like subject, issuer, issued at, and expiration time, along with selective disclosure data.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s7.3-sdjwt+ghost.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"alg\": \"ES256\",\n  \"typ\": \"vc+sd-jwt\",\n  \"kid\": \"doc-signer-05-25-2022\"\n}.{\n  \"_sd\": [\n    \"HvrKX6fPV0v9K_yCVFBiLFHsMaxcD_114Em6VT8x1lg\"\n  ],\n  \"_sd_alg\": \"sha-256\",\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\n  \"iss\": \"https://issuer.example.com\",\n  \"iat\": 1683000000,\n  \"exp\": 1883000000\n}.MEQCICde3GkeuNWixUiD3zk5F9OMGD2HJW6Lmo4waWkVXDddAiByEPMrOn8aE9Tf33_J3SIiVBEhQNthU58O7D0Y1Xywcg\n```\n\n----------------------------------------\n\nTITLE: Specifying SQL Server 2022 Docker Image\nDESCRIPTION: Docker image reference for Microsoft SQL Server 2022 latest version from Microsoft Container Registry (MCR).\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/container-license-acceptance.txt#2025-04-22_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nmcr.microsoft.com/mssql/server:2022-latest\n```\n\n----------------------------------------\n\nTITLE: Keycloak TLS and Truststore Configuration\nDESCRIPTION: Configuration options for TLS hostname verification and truststore paths setup for HTTPS and SMTP requests\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testExportHelp.approved.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--tls-hostname-verifier <tls-hostname-verifier>\n                     The TLS hostname verification policy for out-going HTTPS and SMTP requests.\n                       Possible values are: ANY, WILDCARD (deprecated), STRICT (deprecated),\n                       DEFAULT. Default: DEFAULT.\n--truststore-paths <truststore-paths>\n                     List of pkcs12 (p12, pfx, or pkcs12 file extensions), PEM files, or\n                       directories containing those files that will be used as a system truststore.\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Disclosures\nDESCRIPTION: Encoded disclosures containing selectively disclosable claims including name, address and nationality information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps256.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Key Binding JWT Example\nDESCRIPTION: This snippet shows a key binding JWT (kb+jwt) that's used in conjunction with the SD-JWT to cryptographically bind the token to a holder's key. It includes a nonce, audience, issuance time, and a hash of the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb--wrong-kb-signature.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiWDlScnJmV3RfNzBnSHpPY292R1NJdDRGbXM5VGYyZzJoamxXVklfY3haZyJ9.PWBfgGGWj5uAejIoPs4qRxCKeDyGV_Jv7jnqIylUHXiCx0qptjyxp8hHjtATQj-F9RPLuz63YEchq_yueslB00\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Class Names for Keycloak Admin UI\nDESCRIPTION: Examples of CSS class naming conventions for the Keycloak Admin UI, following a modified BEM naming convention with namespacing.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.keycloak-admin--data-table {\n...\n}\n\n.keycloak-admin--data-table--compact {\n...\n}\n\n.keycloak-admin--data-table__data-table-item--compact {\n...\n}\n\n.keycloak-admin--data-table--compact--lg {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Aurora DB Cleanup\nDESCRIPTION: Command to tear down and clean up the Aurora DB instance after testing is complete.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/HOW-TO-RUN.md#2025-04-22_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n./.github/scripts/aws/rds/aurora_delete.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry Environment Variables for Keycloak Authentication\nDESCRIPTION: This snippet sets up environment variables for a Docker registry to use Keycloak for authentication. It defines the token realm URL, client service name, and token issuer URL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/resources/dockerClientTest/variable-override.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n-e REGISTRY_AUTH_TOKEN_REALM=http://localhost:8080/auth/auth/realms/docker-test-realm/protocol/docker-v2/auth \\\n-e REGISTRY_AUTH_TOKEN_SERVICE: docker-test-client \\\n-e REGISTRY_AUTH_TOKEN_ISSUER: http://localhost:8080/auth/auth/realms/docker-test-realm \\\n```\n\n----------------------------------------\n\nTITLE: Using Non-null Assertion Operator in TypeScript\nDESCRIPTION: Example of using the non-null assertion operator (!) in TypeScript, which is used sparingly and mainly for types provided by the Admin API client.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/CODING_GUIDELINES.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage of non-null assertion operator\nconst value = someFunction()!;\n```\n\n----------------------------------------\n\nTITLE: Generating Key-Bound JWT (kb-jwt) in JSON\nDESCRIPTION: This snippet demonstrates a key-bound JWT (kb-jwt). It includes a header with key ID and algorithm information, and a payload with claims such as nonce, audience, issued at time, and a selective disclosure hash.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb--explicit-kid.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiSEtwV1JKMmtqaXluSjBBbDlNTFJ5dmFjSS1HSVpmMHN5SUVvUnB2VktESSJ9.YFBWGvdAq8UIz7Y3b2lVMaQAFCkS02qkClGOPsn9qE-xDOgqT6VYx2D9-nSAU69dvkTdq6ynPMutlCYNtvtZ6w\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos for Active Directory in krb5.conf\nDESCRIPTION: Configuration for the Kerberos setup in the IPA-Tuura bridge to enable authentication with the Active Directory service. This defines the KEYCLOAK.ORG realm and related settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/federation/ipatuura/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nincludedir /etc/krb5.conf.d/\n\n[logging]\n   default = FILE:/var/log/krb5libs.log\n   kdc = FILE:/var/log/krb5kdc.log\n   admin_server = FILE:/var/log/kadmind.log\n\n[libdefaults]\n   dns_lookup_realm = false\n   dns_lookup_kdc = false\n   ticket_lifetime = 24h\n   renew_lifetime = 7d\n   forwardable = true\n   rdns = false\n   pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt\n   spake_preauth_groups = edwards25519\n   dns_canonicalize_hostname = fallback\n   qualify_shortname = \"\"\n   default_ccache_name = KEYRING:persistent:%{uid}\n   udp_preference_limit = 0\n   default_realm = KEYCLOAK.ORG\n\n[realms]\n   KEYCLOAK.ORG = {\n   kdc = DC1.keycloak.org\n}\n\n[domain_realm]\n   .keycloak.org = KEYCLOAK.ORG\n   keycloak.org = KEYCLOAK.ORG\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the boilerplate notice that should be included at the top of files to apply the Apache License 2.0. The template includes placeholders for copyright year and owner, along with standard license text and reference to the license URL.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Disclosures\nDESCRIPTION: Base64-encoded SD-JWT disclosures containing personal information including name, address, and nationality details.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-rs256.txt#2025-04-22_snippet_1\n\nLANGUAGE: base64\nCODE:\n```\nWyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Encoding Selective Disclosure JWT in JSON for Keycloak\nDESCRIPTION: This snippet shows the complete structure of a Selective Disclosure JWT (SD-JWT) used in the Keycloak project. It includes the header, payload with selectively disclosable claims, and the signature. The JWT uses the ES256 algorithm and contains various claims including nationalities, personal information, and a key binding.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.7-sdjwt+kb--invalid-array-elt-disclosure.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifSx7Ii4uLiI6Im5vZkFmeDhTcWV2d3EwYWJWalJrV3BOai01NjBkU3dUUzdMbUJLR3FrZ2MifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCJ5IjoiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSJ9fX0.sMAP6gUt1TLwdNtT-U06qbC4qZWB8i0gadzAHA5fvB-LpXTccHPZTsG9TIlgh8-vgYOnqr6t36XaHnU4217LpQ\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Token with Selective Disclosure Claims in JSON\nDESCRIPTION: This code snippet shows a decoded JWT token with selective disclosure claims. It includes encrypted personal information and uses the ES256 algorithm for signing. The token contains fields for issuer, subject, expiration, and nationality, along with selectively disclosable claims.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"ES256\",\n  \"typ\": \"example+sd-jwt\"\n}.{\n  \"_sd\": [\n    \"CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI\",\n    \"JzYjH4svliH0R3PYEMfeZu6Jt69u5qehZo7F7EPYlSE\",\n    \"PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI\",\n    \"TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo\",\n    \"XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM\",\n    \"XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE\",\n    \"gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM\",\n    \"jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4\"\n  ],\n  \"iss\": \"https://issuer.example.com\",\n  \"iat\": 1683000000,\n  \"exp\": 1883000000,\n  \"sub\": \"user_42\",\n  \"nationalities\": [\n    {\"...\": \"pFndjkZ_VCzmyTa6UjlZo3dh-ko8aIKQc9DlGzhaVYo\"},\n    {\"...\": \"7Cf6JkPudry3lcbwHgeZ8khAv1U1OSlerP0VkBJrWZ0\"}\n  ],\n  \"_sd_alg\": \"sha-256\",\n  \"cnf\": {\n    \"jwk\": {\n      \"kty\": \"EC\",\n      \"crv\": \"P-256\",\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blacklist Terms Configuration\nDESCRIPTION: Text file containing two blacklisted entries that are used to define restricted or prohibited values.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/tests/base/src/test/resources/password-blacklists/test-password-blacklist.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblacklisted1\\nblacklisted2\n```\n\n----------------------------------------\n\nTITLE: Displaying Keycloak Test User Certificate Information\nDESCRIPTION: This snippet displays the certificate details for a Keycloak test user, including its validity period, serial number, and subject information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/root/ca/index.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nV\t461031135353Z\t\t1001\tunknown\t/C=US/ST=MA/O=Red Hat/OU=Keycloak/CN=test-user/emailAddress=test-user@localhost\n```\n\n----------------------------------------\n\nTITLE: Encoding SD-JWT Header and Payload in JSON\nDESCRIPTION: This snippet shows the header and payload of a Selective Disclosure JWT (SD-JWT) encoded in JSON format. It includes various claims and selective disclosure hashes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es512.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"ES256\",\n  \"typ\": \"example+sd-jwt\"\n}\n{\n  \"_sd\": [\n    \"CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI\",\n    \"JzYjH4svliH0R3PyEMfeZu6Jt69u5qehZo7F7EPYlSE\",\n    \"PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI\",\n    \"TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo\",\n    \"XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM\",\n    \"XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE\",\n    \"gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM\",\n    \"jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4\"\n  ],\n  \"iss\": \"https://issuer.example.com\",\n  \"iat\": 1683000000,\n  \"exp\": 1883000000,\n  \"sub\": \"user_42\",\n  \"nationalities\": [\n    {\n      \"...\": \"pFndjkZ_VCzmyTa6UjlZo3dh-ko8aIKQc9DlGzhaVYo\"\n    },\n    {\n      \"...\": \"7Cf6JkPudry3lcbwHgeZ8khAv1U1OSlerP0VkBJrWZ0\"\n    }\n  ],\n  \"_sd_alg\": \"sha-256\",\n  \"cnf\": {\n    \"jwk\": {\n      \"kty\": \"EC\",\n      \"d\": \"ABm1beWClSKfpE0pbOxhejwmWzHcvek0j77tkYi1aFmrY--KqqlCWqeBviqL3iNYrqKLLxdlN9-g5yGf6cPyu1EH\",\n      \"crv\": \"P-521\",\n      \"x\": \"AMncpum0fgn4Wh_eK0m1a5gs_c2zZUohF-IoA6u9HFz9reYq_w8wULdVZ5wrHzv0ar8ox2dWejuX23kAKVo0uFIE\",\n      \"y\": \"AbWe9PNwEERSkSJYErAzKMycUs00-peeYv2UEwQXfS9dVyeRF0lbSa9ZV-g5eXbnEznRNlklKpuZy7gqZiPCODi2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Holder Binding JWT in JSON\nDESCRIPTION: This snippet shows the structure of a holder binding JWT, which is used for verification purposes. It includes a key ID, unexpected type, ES256 algorithm, and verification-related claims such as nonce, audience, and SD hash.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.3-sdjwt+kb--wrong-kb-typ.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kid\": \"holder\",\n  \"typ\": \"unexpected\",\n  \"alg\": \"ES256\"\n}.{\n  \"nonce\": \"1234567890\",\n  \"aud\": \"https://verifier.example.org\",\n  \"iat\": 1702315679,\n  \"sd_hash\": \"X9RrrfWt_70gHzOcovGSIt4Fms9Tf2g2hjlWVI_cxZg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Disclosure Claims\nDESCRIPTION: Base64 encoded selective disclosure claims containing personal information like name and address\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-hmac.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Users with TestsuiteCLI\nDESCRIPTION: This command uses the TestsuiteCLI to create multiple users in a specified realm with assigned roles.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncreateUsers test test demo 0 500 100 user,admin\n```\n\n----------------------------------------\n\nTITLE: Verification JWT Token\nDESCRIPTION: ES256 signed JWT token used for verification purposes containing nonce and audience claims\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-hmac.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiWDlScnJmV3RfNzBnSHpPY292R1NJdDRGbXM5VGYyZzJoamxXVklfY3haZyJ9.PWBfgGGWj5uAejIoPs4qRxCKeDyGV_Jv7jnqIylUHXiCx0qptjyxp8hHjtATQj-F9RPLuz63YEchq_yueslBeA\n```\n\n----------------------------------------\n\nTITLE: Encoding Selective Disclosure Claim in Base64URL\nDESCRIPTION: This snippet shows a Base64URL-encoded selective disclosure claim. It represents a specific piece of information that can be selectively disclosed from the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb--explicit-kid.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Parsing Certificate Revocation Entry\nDESCRIPTION: Certificate revocation record containing revocation timestamp (30160303203843Z), expiration date (161031204252Z), serial number (1000), and subject DN details for a Keycloak test user certificate.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/quarkus/src/main/content/conf/ocsp/index.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nR\t30160303203843Z\t161031204252Z\t1000\tunknown\t/C=US/ST=MA/L=Westwood/O=Red Hat/OU=Keycloak/CN=test-user@localhost/emailAddress=test-user@localhost\n```\n\n----------------------------------------\n\nTITLE: Generating SD-JWT Payload in JSON\nDESCRIPTION: This snippet demonstrates the structure of an SD-JWT payload, including encrypted claims, selective disclosure hashes, and issuer information. It uses the ES256 algorithm and includes nationality information as selectively disclosable claims.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.3-sdjwt+kb--wrong-kb-typ.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"ES256\",\n  \"typ\": \"example+sd-jwt\"\n}.{\n  \"_sd\": [\n    \"CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI\",\n    \"JzYjH4svliH0R3PYEMfeZu6Jt69u5qehZo7F7EPYlSE\",\n    \"PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI\",\n    \"TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo\",\n    \"XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM\",\n    \"XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE\",\n    \"gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM\",\n    \"jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4\"\n  ],\n  \"iss\": \"https://issuer.example.com\",\n  \"iat\": 1683000000,\n  \"exp\": 1883000000,\n  \"sub\": \"user_42\",\n  \"nationalities\": [\n    {\"...\": \"pFndjkZ_VCzmyTa6UjlZo3dh-ko8aIKQc9DlGzhaVYo\"},\n    {\"...\": \"7Cf6JkPudry3lcbwHgeZ8khAv1U1OSlerP0VkBJrWZ0\"}\n  ],\n  \"_sd_alg\": \"sha-256\",\n  \"cnf\": {\n    \"jwk\": {\n      \"kty\": \"EC\",\n      \"crv\": \"P-256\",\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Selectively Disclosable Claims for Keycloak SD-JWT\nDESCRIPTION: This snippet shows the encoding of individual selectively disclosable claims used in the Keycloak SD-JWT. Each claim is base64url-encoded and represents different pieces of information such as country, name, and address.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.7-sdjwt+kb--invalid-array-elt-disclosure.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImNvdW50cnkiLCAiQ00iXQ\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd\n~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0\n~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd\n~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Key Binding JWT Example in JSON\nDESCRIPTION: An example of the key binding JWT used in SD-JWT to cryptographically bind the credential to the holder's key. It includes a header with key ID and algorithm, and a payload with nonce, audience, timestamp, and hash of the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-is-not-jwk.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiWDlScnJmV3RfNzBnSHpPY292R1NJdDRGbXM5VGYyZzJoamxXVklfY3haZyJ9.PWBfgGGWj5uAejIoPs4qRxCKeDyGV_Jv7jnqIylUHXiCx0qptjyxp8hHjtATQj-F9RPLuz63YEchq_yueslBeA\n```\n\n----------------------------------------\n\nTITLE: Displaying Keycloak Intermediate CA Certificate Information\nDESCRIPTION: This snippet shows the certificate details for the Keycloak Intermediate CA, including its validity period, serial number, and subject information.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/testsuite/integration-arquillian/servers/auth-server/common/pki/root/ca/index.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nV\t450708195701Z\t\t1000\tunknown\t/C=US/ST=MA/O=Red Hat/OU=Keycloak/CN=Keycloak Intermediate CA/emailAddress=contact@keycloak.org\n```\n\n----------------------------------------\n\nTITLE: Sample JWT Token with ES256 Algorithm\nDESCRIPTION: A complete JWT token example using ES256 signing algorithm with base64url encoded header, payload and signature. Includes claims for user information, nationality, and key configuration using ES256 elliptic curve.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s6.2-presented-sdjwtvp.txt#2025-04-22_snippet_0\n\nLANGUAGE: JWT\nCODE:\n```\neyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBbIkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tBTmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFrb2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpnbGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUuY29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjogInVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSJ9fX0.TpMrn_a_ZSedw-jC2XAD74GBXhB5t35pQK1-MYiYnibXr-O4sumCK-BKwIseZm6maVGhglKOs6nwN5ooUF3uiQ~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0~\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Header and Payload with RSA Binding\nDESCRIPTION: An SD-JWT containing selectively disclosable claims about nationality and personal information. Uses RSA key binding and SHA-256 hashing for disclosures.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps256.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6ImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOlsiQ3JRZTdTNWtxQkFIdC1uTVlYZ2M2YmR0MlNINWFUWTFzVV9NLVBna2pQSSIsIkp6WWpINHN2bGlIMFIzUHlFTWZlWnU2SnQ2OXU1cWVoWm83RjdFUFlsU0UiLCJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwiVEdmNG9MYmd3ZDVKUWFIeUtWUVpVOVVkR0UwdzVydERzclp6ZlVhb21MbyIsIlhRXzNrUEt0MVh5WDdLQU5rcVZSNnlaMlZhNU5yUEl2UFlieU12UktCTU0iLCJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwiZ2JPc0k0RWRxMngyS3ctdzV3UEV6YWtvYjloVjFjUkQwQVROM29RTDlKTSIsImpzdTl5VnVsd1FRbGhGbE1fM0psek1hU0Z6Z2xoUUcwRHBmYXlRd0xVSzQiXSwiaXNzIjoiaHR0cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCJpYXQiOjE2ODMwMDAwMDAsImV4cCI6MTg4MzAwMDAwMCwic3ViIjoidXNlcl80MiIsIm5hdGlvbmFsaXRpZXMiOlt7Ii4uLiI6InBGbmRqa1pfVkN6bXlUYTZVamxabzNkaC1rbzhhSUtRYzlEbEd6aGFWWW8ifSx7Ii4uLiI6IjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sIl9zZF9hbGciOiJzaGEtMjU2IiwiY25mIjp7Imp3ayI6eyJrdHkiOiJSU0EiLCJlIjoiQVFBQiIsImFsZyI6IlBTMjU2IiwibiI6ImdnUE91THM4R3U5WWVObmpfazZMQmFnOV9zNFNjdk1QRjZ4Z2t2M2ZnQnhQNVo5VWNBWUJ5Z09YczQ4UnRabzlCczhvS1NlQndXMWdHUDN2Szl1Q09iZ1cyd0JfSDQ0WG1qVk1MZnRsYnlTVzA0aHpmU3lzQWlBQ0tkdzJLZHFncEJEVDQyWHd1bEVBMV9KM3NGcWZRNkdacUwzUWRUaUpDNFZuSllSTERES0UwY2otWXlTVTZCcktfUG9WYWxqLWdOR2ZvYkRRaVJzeU0wSTVlVWpvTlM2SmxPYjlSTDlkdUh5SUdER3FrVE5kblFiaVI4Wm1NQVpyOHBPaS03WUU1dGVMVmpJUXRlOHdVcERWdk9MVXA5eVdZOE1RbjNLMUk5UTdBMGZ2bEVveTFnd1FMMkV3U29Oc1NEUDkzS1ZJdnVyYlQ1ZzVuakttZHRnZTBXSll6USJ9fX0\n```\n\n----------------------------------------\n\nTITLE: Holder Binding JWT\nDESCRIPTION: A holder binding JWT using PS256 algorithm that binds the SD-JWT to a specific holder key. Contains nonce and audience claims with a hash of the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-rsa-ps256.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJQUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoia2ItODdTMFlERGZUX2V5Z0pIenNyZERkZzE0dUJqXzh2MnhHa2E4WGlIMCJ9.bQXPEjBuN8I803XvX1ZK4F6FakaAb6tCo4Km5xfLXIV9ukCHySwUMRrLoP5XPVcVxBytJEJpkQ997ahs2ux3b-UN-yoBOOR6Kwc31hV7BdWU8GnSbH-6gxmB0WJPvh3fBfNfQzfTfIsTLjS9becnPoIt-1PIBQzJXGG0SHut4hjdnHEOtvnbaVwhN6Facil7A5xXoLhNsk-WBKmdBL89aFlLfpO7i1I_87uCnZXspcQ6c7kETaQReZQtJNitQrYLiFwgIv8cyiFbwPQVKwJ4XAQpt9N2I50XwTE6dhUbdAxdjRzqgoxZ-gWXMWksouyH3wrN2nKAJEs3Ya-uz1JYBQ\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Token Example with Selective Disclosure Claims\nDESCRIPTION: This is an example of a complete SD-JWT token which includes the JWT header, payload with selective disclosure hashes, and signature, followed by disclosure records. The token contains selectively disclosable claims like family_name, address, given_name, and nationality.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.1-sdjwt+kb--wrong-kb-signature.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\neyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBbIkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tBTmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFrb2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpnbGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUuY29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjogInVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlGMkhaUSJ9fX0.TpMrn_a_ZSedw-jC2XAD74GBXhB5t35pQK1-MYiYnibXr-O4sumCK-BKwIseZm6maVGhglKOs6nwN5ooUF3uiQ~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Examining Key Binding JWT Example\nDESCRIPTION: An example of a key binding JWT (kb+jwt) that cryptographically binds the holder's key to the SD-JWT. This JWT contains a header with key information, a payload with nonce, audience, timestamp, and a hash of the selective disclosure components.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--es384.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzM4NCJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiaFN3cXVsbDJ4VWMtNDQwdkhLX0RUdnVXZWxDUDBlSVo0d0JOcXNOeVAySSJ9.TA93w_A3IBornn6Gu81oNjT2M-evVz6_TyCWTX-ZfL9uXkeiP44hRn0irCwCy0krtHrq49EyZxXLM2o9qRGYw1cDi68u2gYMEHLiXZzXu51q0ckQ2pjsTYDE2pqrSOZT\n```\n\n----------------------------------------\n\nTITLE: Encoding Key Binding JWT for Keycloak SD-JWT\nDESCRIPTION: This snippet demonstrates the encoding of a key binding JWT used in conjunction with the Keycloak SD-JWT. It includes a header with key information, and a payload with nonce, audience, issuance time, and a hash of the SD-JWT.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.7-sdjwt+kb--invalid-array-elt-disclosure.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\neyJraWQiOiJob2xkZXIiLCJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJub25jZSI6IjEyMzQ1Njc4OTAiLCJhdWQiOiJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwiaWF0IjoxNzAyMzE1Njc5LCJzZF9oYXNoIjoiWDlScnJmV3RfNzBnSHpPY292R1NJdDRGbXM5VGYyZzJoamxXVklfY3haZyJ9.PWBfgGGWj5uAejIoPs4qRxCKeDyGV_Jv7jnqIylUHXiCx0qptjyxp8hHjtATQj-F9RPLuz63YEchq_yueslBeA\n```\n\n----------------------------------------\n\nTITLE: Password Pattern Examples in Plaintext\nDESCRIPTION: Example password strings using common patterns like initial/final exclamation marks, numbers, and word variations. These appear to be test cases or examples of password formats.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/server-spi-private/src/test/java/org/keycloak/policy/short_blacklist.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npass1!word\n1Password!\nPassword1!\n!Password1\n```\n\n----------------------------------------\n\nTITLE: SD-JWT Disclosure Values\nDESCRIPTION: Contains the disclosure values for the SD-JWT including personal information like name and address. These values can be selectively disclosed based on requirements.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/core/src/test/resources/sdjwt/s20.8-sdjwt+kb--cnf-jwk-is-malformed.txt#2025-04-22_snippet_1\n\nLANGUAGE: jwt\nCODE:\n```\n~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0\n```\n\n----------------------------------------\n\nTITLE: Disabling NPM Build Processing in Keycloak\nDESCRIPTION: Maven build flag to skip processing of NPM modules during the build process to improve build speed.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-Dskip.npm\n```\n\n----------------------------------------\n\nTITLE: Updating Keycloak Services Dependency\nDESCRIPTION: This Bash command shows how to update a specific Keycloak dependency (in this case, keycloak-services) in the distribution by copying the jar file to the appropriate location in the lib directory.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncp services/target/keycloak-services-${KC_VERSION}.jar ${KC_HOME_DIR}/lib/lib/main/org.keycloak.keycloak-services-${KC_VERSION}.jar\n```\n\n----------------------------------------\n\nTITLE: Updating Keycloak on OpenShift via SSH\nDESCRIPTION: Bash commands for updating Keycloak JARs on OpenShift cartridge and restarting the server to test with latest changes\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/tests-oidc-conformance.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $KEYCLOAK_SOURCES\ncd services\nmvn clean install\nscp target/keycloak-server-spi-2.1.0-SNAPSHOT.jar 51122e382d5271c5ca0000bc@keycloak-mposolda.rhcloud.com:/tmp/\nssh 51122e382d5271c5ca0000bc@keycloak-mposolda.rhcloud.com\n```\n\n----------------------------------------\n\nTITLE: Using the PR backport script\nDESCRIPTION: Reference to a shell script that helps create backport PRs when fixes need to be applied to release branches.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/docs/bug-triage.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.github/scripts/pr-backport.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Logging Properties for Keycloak Test Framework\nDESCRIPTION: This snippet shows how to set up default logging configuration in a keycloak-test.properties file. It sets the default log level, enables log filtering, and configures a specific category's log level.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkc.test.log.level=WARN\nkc.test.log.filter=true\nkc.test.log.category.\"testinfo\".level=INFO\n```\n\n----------------------------------------\n\nTITLE: Docker Image Operations on Local Registry\nDESCRIPTION: Series of Docker commands demonstrating how to pull, tag, and push an image to the local registry. This example uses a CentOS 7 image.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/services/src/main/resources/DockerComposeYamlReadme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull centos:7\ndocker tag centos:7 localhost:5000/centos:7\ndocker push localhost:5000/centos:7\n```\n\n----------------------------------------\n\nTITLE: Formatting Multi-line Git Commit Messages for Keycloak\nDESCRIPTION: Examples of how to create multi-line Git commit messages that include a summary, optional description, and issue link for Keycloak contributions.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Summary\" -m \"Optional description\" -m \"Closes #1234\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"Summary\n\nOptional description\n\nCloses #1234\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Keycloak Version in Plaintext\nDESCRIPTION: This snippet shows how the Keycloak version is referenced using a variable placeholder. It's likely used in a template or configuration file to dynamically insert the current project version.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/dist/src/main/version.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nKeycloak - Version ${project.version}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Bootstrap Admin Settings\nDESCRIPTION: Configuration options for setting up the initial bootstrap admin account and client credentials during master realm creation.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testImportHelp.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n--bootstrap-admin-client-id <client id>\n--bootstrap-admin-client-secret <client secret>\n--bootstrap-admin-password <password>\n--bootstrap-admin-username <username>\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Registry\nDESCRIPTION: Command to spin up a fully functional Docker registry using Docker Compose. This sets up the entire environment as defined in the docker-compose.yml file.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/services/src/main/resources/DockerComposeYamlReadme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Admin Events Handling - Old Framework Example\nDESCRIPTION: Demonstrates how admin events were handled in the old test framework using AssertAdminEvents rule.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/tests/MIGRATING_TESTS.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Rule\npublic AssertAdminEvents assertAdminEvents = new AssertAdminEvents(this);\n\npublic void myTest() {\n    assertAdminEvents.assertEvent(realmId, OperationType.CREATE, ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Colors for Keycloak Test Framework via Environment Variable\nDESCRIPTION: This example shows how to disable console colors using an environment variable when running tests.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/test-framework/LOGGING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nKC_TEST_CONSOLE_COLOR=false mvn test\n```\n\n----------------------------------------\n\nTITLE: Keycloak Update Compatibility Command\nDESCRIPTION: Command usage pattern for updating compatibility metadata in Keycloak with available options for file storage and optimization settings.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityMetadataHelpAll.approved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkc.sh update-compatibility metadata [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Server in Development Mode\nDESCRIPTION: Example command to start the Keycloak server in development mode for local development or testing purposes.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelp.approved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kc.sh start-dev\n```\n\n----------------------------------------\n\nTITLE: Health Check Configuration\nDESCRIPTION: Command-line options for enabling and configuring health check endpoints.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testUpdateCompatibilityCheckHelpAll.approved.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--health-enabled <true|false>\n```\n\n----------------------------------------\n\nTITLE: Enabling Keycloak CLI Auto-completion\nDESCRIPTION: Command to enable bash/zsh shell auto-completion for Keycloak CLI commands.\nSOURCE: https://github.com/keycloak/keycloak/blob/main/quarkus/tests/integration/src/test/resources/org/keycloak/it/cli/dist/approvals/cli/help/HelpCommandDistTest.testHelpShort.approved.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource <(kc.sh tools completion)\n```"
  }
]