[
  {
    "owner": "arco-design",
    "repo": "arco-design",
    "content": "TITLE: Implementing User Avatar Upload with Arco Design\nDESCRIPTION: React component that implements avatar upload functionality using Arco Design's Upload component. Features include image preview, upload progress indication with a circular progress bar, and status handling for uploaded files. The component switches between an upload trigger view and an image preview with edit overlay.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/avatar.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Upload, Progress } from '@arco-design/web-react';\nimport { IconPlus, IconEdit } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [file, setFile] = React.useState();\n  const cs = `arco-upload-list-item${file && file.status === 'error' ? ' is-error' : ''}`;\n  return (\n    <div>\n      <Upload\n        action=\"/\"\n        fileList={file ? [file] : []}\n        showUploadList={false}\n        onChange={(_, currentFile) => {\n          setFile({\n            ...currentFile,\n            url: URL.createObjectURL(currentFile.originFile),\n          });\n        }}\n        onProgress={(currentFile) => {\n          setFile(currentFile);\n        }}\n      >\n        <div className={cs}>\n          {file && file.url ? (\n            <div className=\"arco-upload-list-item-picture custom-upload-avatar\">\n              <img src={file.url} />\n              <div className=\"arco-upload-list-item-picture-mask\">\n                <IconEdit />\n              </div>\n              {file.status === 'uploading' && file.percent < 100 && (\n                <Progress\n                  percent={file.percent}\n                  type=\"circle\"\n                  size=\"mini\"\n                  style={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '50%',\n                    transform: 'translateX(-50%) translateY(-50%)',\n                  }}\n                />\n              )}\n            </div>\n          ) : (\n            <div className=\"arco-upload-trigger-picture\">\n              <div className=\"arco-upload-trigger-picture-text\">\n                <IconPlus />\n                <div style={{ marginTop: 10, fontWeight: 600 }}>Upload</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Upload>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Main App Component\nDESCRIPTION: The App component sets up the main structure of the application, including forms for input, a modal for adding entries, and a table for displaying data. It uses Form.Provider to manage form value changes and submissions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-provider.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\\\n  const [visible, setVisible] = React.useState(false);\\\n  return (\\\n    <div>\\\n      <Form.Provider\\\n        onFormValuesChange={(name, changedValues, info) => {\\\n          console.log('onFormValuesChange: ', name, changedValues, info);\\\n        }}\\\n        onFormSubmit={(name, values, info) => {\\\n          console.log('onFormSubmit: ', name, values, info);\\\n          if (name === 'modalForm') {\\\n            info.forms.searchForm.setFieldsValue({\\\n              email: values.email,\\\n            });\\\n            setVisible(false);\\\n          }\\\n          Message.info({\\\n            icon: <span></span>,\\\n            content: (\\\n              <div style={{ textAlign: 'left' }}>\\\n                <span>form values:</span>\\\n                <pre>{JSON.stringify(\\\n                  {\\\n                    ...info.forms.searchForm.getFieldsValue(),\\\n                    ...info.forms.refreshForm.getFieldsValue(),\\\n                  },\\\n                  null,\\\n                  2\\\n                )}</pre>\\\n              </div>\\\n            ),\\\n          });\\\n        }}\\\n      >\\\n        <Form id=\"searchForm\" layout=\"vertical\">\\\n          <Grid.Row gutter={24}>\\\n            <Grid.Col span={8}>\\\n              <Form.Item label=\"Name\" field=\"name\">\\\n                <Input placeholder=\"enter name\" />\\\n              </Form.Item>\\\n            </Grid.Col>\\\n            <Grid.Col span={8}>\\\n              <Form.Item label=\"Gender\" field=\"gender\">\\\n                <Select\\\n                  placeholder=\"select gender\"\\\n                  options={['All', 'Female', 'Male', 'Unknown']}\\\n                />\\\n              </Form.Item>\\\n            </Grid.Col>\\\n            <Grid.Col span={8}>\\\n              <Form.Item label=\"Age\" field=\"age\">\\\n                <InputNumber placeholder=\"enter age\" />\\\n              </Form.Item>\\\n            </Grid.Col>\\\n          </Grid.Row>\\\n          <Space>\\\n            <Form.Item field=\"email\" shouldUpdate noStyle>\\\n              {(values) => {\\\n                return <Tag color=\"arcoblue\">email: {values.email || 'null'}</Tag>;\\\n              }}\\\n            </Form.Item>\\\n            <Button htmlType=\"submit\" type=\"primary\">\\\n              Search\\\n            </Button>\\\n            <Button\\\n              onClick={() => {\\\n                setVisible(true);\\\n              }}\\\n            >\\\n              Add filter\\\n            </Button>\\\n          </Space>\\\n        </Form>\\\n\\\n        <br />\\\n        <br />\\\n        <Grid.Row justify=\"space-between\" align=\"center\">\\\n          <Typography.Text style={{ fontSize: 18 }} bold>\\\n            Result\\\n          </Typography.Text>\\\n          <RefreshForm />\\\n        </Grid.Row>\\\n        <br />\\\n        {visible && (\\\n          <ModalForm\\\n            onCancel={() => {\\\n              setVisible(false);\\\n            }}\\\n          />\\\n        )}lets a users set multiple forms and submit them collectively.\\\n      </Form.Provider>\\\n      <Table\\\n        columns={[\\\n          {\\\n            title: 'Name',\\\n            dataIndex: 'name',\\\n          },\\\n          {\\\n            title: 'Salary',\\\n            dataIndex: 'salary',\\\n          },\\\n          {\\\n            title: 'Gender',\\\n            dataIndex: 'gender',\\\n          },\\\n          {\\\n            title: 'Age',\\\n            dataIndex: 'age',\\\n          },\\\n          {\\\n            title: 'Email',\\\n            dataIndex: 'email',\\\n          },\\\n        ]}\\\n        data={defaultData}\\\n      />\\\n    </div>\\\n  );\\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeUpload Validation in Arco Design Upload Component\nDESCRIPTION: Example shows how to use the beforeUpload prop to validate files before upload, using a Modal confirmation dialog. The upload will only proceed if the user confirms in the modal, otherwise it will be cancelled. The component supports multiple file uploads and makes API calls to the root endpoint.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/beforeUpload.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Modal } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <div>\n      <Upload\n        multiple\n        action=\"/\"\n        beforeUpload={(file) => {\n          return new Promise((resolve, reject) => {\n            Modal.confirm({\n              title: 'beforeUpload',\n              content: `确认上传 ${file.name}`,\n              onConfirm: () => resolve(true),\n              onCancel: () => reject('cancel'),\n            });\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Searchable Tree Component with Arco Design in React\nDESCRIPTION: This code example demonstrates how to create a searchable tree component with text highlighting using Arco Design's Tree and Input components. It includes functionality to filter tree data based on search input and highlight matching text portions in the tree nodes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/search.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { Tree, Input } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Branch 0-0-1',\n        key: '0-0-1',\n        children: [\n          {\n            title: 'Leaf 0-0-1-1',\n            key: '0-0-1-1',\n          },\n          {\n            title: 'Leaf 0-0-1-2',\n            key: '0-0-1-2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf 0-1-1-0',\n            key: '0-1-1-0',\n          },\n        ],\n      },\n      {\n        title: 'Branch 0-1-2',\n        key: '0-1-2',\n        children: [\n          {\n            title: 'Leaf 0-1-2-0',\n            key: '0-1-2-0',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction searchData(inputValue) {\n  const loop = (data) => {\n    const result = [];\n    data.forEach((item) => {\n      if (item.title.toLowerCase().indexOf(inputValue.toLowerCase()) > -1) {\n        result.push({ ...item });\n      } else if (item.children) {\n        const filterData = loop(item.children);\n\n        if (filterData.length) {\n          result.push({ ...item, children: filterData });\n        }\n      }\n    });\n    return result;\n  };\n\n  return loop(TreeData);\n}\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  const [inputValue, setInputValue] = useState('');\n  useEffect(() => {\n    if (!inputValue) {\n      setTreeData(TreeData);\n    } else {\n      const result = searchData(inputValue);\n      setTreeData(result);\n    }\n  }, [inputValue]);\n  return (\n    <div>\n      <Input.Search\n        style={{\n          marginBottom: 8,\n          maxWidth: 240,\n        }}\n        onChange={setInputValue}\n      />\n\n      <Tree\n        treeData={treeData}\n        renderTitle={({ title }) => {\n          if (inputValue) {\n            const index = title.toLowerCase().indexOf(inputValue.toLowerCase());\n\n            if (index === -1) {\n              return title;\n            }\n\n            const prefix = title.substr(0, index);\n            const suffix = title.substr(index + inputValue.length);\n            return (\n              <span>\n                {prefix}\n                <span style={{ color: 'var(--color-primary-light-4)' }}>\n                  {title.substr(index, inputValue.length)}\n                </span>\n                {suffix}\n              </span>\n            );\n          }\n\n          return title;\n        }}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload with Cropping using React and Arco Design\nDESCRIPTION: React component implementation that combines Upload component with a custom cropping interface. Uses EasyCropper for image manipulation and includes rotation and zoom functionality. The component leverages Arco Design's Modal, Button, and Slider components for the UI.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/crop.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, CSSProperties } from 'react';\nimport { Upload, Button, Message, Modal, Grid, Slider } from '@arco-design/web-react';\nimport { IconMinus, IconPlus, IconRotateLeft, IconUpload } from '@arco-design/web-react/icon';\nimport EasyCropper from 'react-easy-crop';\n\nasync function _getCroppedImg(url, pixelCrop, rotation = 0) {\n  const image = await new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', (error) => reject(error));\n    image.src = url;\n  });\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx || !image) {\n    return null;\n  }\n\n  const imageSize = 2 * ((Math.max(image.width, image.height) / 2) * Math.sqrt(2));\n  canvas.width = imageSize;\n  canvas.height = imageSize;\n\n  if (rotation) {\n    ctx.translate(imageSize / 2, imageSize / 2);\n    ctx.rotate((rotation * Math.PI) / 180);\n    ctx.translate(-imageSize / 2, -imageSize / 2);\n  }\n\n  ctx.drawImage(image, imageSize / 2 - image.width / 2, imageSize / 2 - image.height / 2);\n  const data = ctx.getImageData(0, 0, imageSize, imageSize);\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  ctx.putImageData(\n    data,\n    Math.round(0 - imageSize / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - imageSize / 2 + image.height * 0.5 - pixelCrop.y)\n  );\n  return new Promise((resolve) => {\n    canvas.toBlob((blob) => {\n      resolve(blob);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with Custom Messages in React using @arco-design/web-react\nDESCRIPTION: This code snippet illustrates how to create a form in a React application utilizing the '@arco-design/web-react' library. It demonstrates setting custom validation messages for required fields and defining rules for different input types such as strings and numbers. The form includes fields for username and age, each with its respective validation logic. The Form component utilizes the 'validateMessages' property to customize feedback based on validation results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/validate-messages.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Input, Button, Message, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form\n      form={form}\n      autoComplete=\"off\"\n      style={{ width: 600 }}\n      validateMessages={{\n        required: (_, { label }) => `必须填写 ${label}`,\n        string: {\n          length: `字符数必须是 #{length}`,\n          match: `不匹配正则 #{pattern}`,\n        },\n        number: {\n          min: `最小值为 #{min}`,\n          max: `最大值为 #{max}`,\n        },\n      }}\n    >\n      <FormItem\n        label=\"Username\"\n        field=\"name\"\n        required\n        rules={[\n          {\n            type: 'string',\n            required: true,\n            length: 3,\n            match: /abc/, \n          },\n        ]}\n      >\n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[\n          {\n            required: true,\n            type: 'number',\n            min: 0,\n            max: 99,\n          },\n        ]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 24 }}>\n          Validate\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Sortable Table Component in JavaScript\nDESCRIPTION: This snippet creates a sortable table component using the Table component from @arco-design/web-react and the react-sortable-hoc library. It defines the structure of the table, including its columns and initial data. Users can drag and drop rows to reorder them, utilizing the SortableContainer and SortableElement components for the drag-and-drop functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst initialData = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\nconst SortableWrapper = SortableContainer((props) => {\n  return <tbody {...props} />;\n});\nconst SortableItem = SortableElement((props) => {\n  return (\n    <tr\n      style={{\n        cursor: 'move',\n      }}\n      {...props}\n    />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Form.useFormState in React with Arco Design\nDESCRIPTION: This snippet sets up a form using Arco Design's Form components and monitors the state of the 'age' field using Form.useFormState. It includes validation logic and displays error messages. The form also allows submission and resetting of fields with buttons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/useFormState.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Typography, Input, InputNumber, Space, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [form] = Form.useForm();\n  const ageState = Form.useFormState('age', form) || {};\n\n  console.log(ageState)\n\n  return (\n    <div>\n      <Form form={form} autoComplete=\"off\">\n\n        <Form.Item label=\"Age\" field=\"age\" rules={[\n          {required: true},\n          {\n            validator: async (value, callback) => {\n              return new Promise((resolve) => {\n                if (value !== 20) {\n                  setTimeout(() => {\n                    callback('Age must be 20');\n                    resolve();\n                  }, 1000);\n                } else {\n                  resolve();\n                }\n              });\n            },\n          },]}> \n          <InputNumber placeholder=\"enter age\" />\n        </Form.Item>\n        <Form.Item label=\" \">\n          <div>\n            表单提交中:\n            <Typography.Text code>\n              {JSON.stringify(ageState.isSubmitting)}\n            </Typography.Text>\n          </div>\n          <div>\n            校验状态:\n            <Typography.Text code>\n              {ageState.validateStatus}\n            </Typography.Text>\n          </div>\n          <div>\n            错误信息:\n            <Typography.Text code>\n              {JSON.stringify(ageState.errors, null, 2)}\n            </Typography.Text>\n          </div>\n          <div>\n            警告信息:\n            <Typography.Text code>\n              {JSON.stringify(ageState.warnings, null, 2)}\n            </Typography.Text>\n          </div>\n        </Form.Item>\n\n        <Form.Item label=\" \">\n          <Space>\n            <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n            <Button onClick={() => form.resetFields()}>Reset</Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Rules Interface in TypeScript\nDESCRIPTION: This interface outlines the validation rules utilized within the form framework, providing various properties to manage validation triggers, levels, and custom messages within forms effectively.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RulesProps {\n  // 触发校验的时机\n  validateTrigger?: string | string[];\n  // 校验失败时候以 `error` 或 `warning` 形式展示错误信息。当设置为 `warning` 时不会阻塞表单提交\n  validateLevel?: 'error' | 'warning';\n  required?: boolean;\n  type?: string;\n  length?: number;\n  // Array\n  maxLength?: number;\n  minLength?: number;\n  includes?: boolean;\n  deepEqual?: any;\n  empty?: boolean;\n  // Number\n  min?: number;\n  max?: number;\n  equal?: number;\n  positive?: boolean;\n  negative?: boolean;\n  // Object\n  hasKeys?: string[];\n  // String\n  match?: RegExp;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  // Boolean\n  true?: boolean;\n  false?: boolean;\n  // custom\n  validator?: (value, callback: (error?: ReactNode) => void) => void;\n  message?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Form.useFormContext in React Components\nDESCRIPTION: The snippet demonstrates how to use `Form.useFormContext` from Arco Design to manage form state within a React functional component. Key components include form submission handling, field validation, form resetting, and messaging feedback using Arco's Message component. Dependencies include React and @arco-design/web-react. The input parameters are form values, and the output is form submission status displayed as success or error messages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-context.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useEffect, useRef } from 'react';\nimport { Form, Input, Button, Switch, InputNumber, Message } from '@arco-design/web-react';\n\nconst FormItem = Form.Item;\n\nfunction DemoButton() {\n  const { form, disabled, isSubmitting } = Form.useFormContext();\n  const messageRef = useRef(null)\n\n  useEffect(() => {\n    if (isSubmitting) {\n      messageRef.current = 'id-' + Date.now()\n      Message.loading({\n        id: messageRef.current,\n        content: 'submitting',\n        duration: 0\n      });\n    } else {\n      if (messageRef.current) {\n        const isError = Object.keys(form.getFieldsError()).length > 0;\n\n        Message[isError ? 'error' : 'success']({\n          id: messageRef.current,\n          content: isError ? 'validate failed' : 'submitted',\n          duration: 3000\n        });\n      }\n      messageRef.current = null\n    }\n  }, [isSubmitting])\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        htmlType=\"submit\"\n        disabled={disabled}\n        loading={isSubmitting}\n        style={{ marginRight: 24 }}\n      >\n        Submit\n      </Button>\n      <Button\n        disabled={disabled}\n        style={{ marginRight: 24 }}\n        onClick={() => {\n          form.resetFields();\n        }}\n      >\n        Reset\n      </Button>\n    </>\n  );\n}\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [disabled, setDisabled] = React.useState(false);\n\n  return (\n    <Form\n      form={form}\n      autoComplete=\"off\"\n      style={{ width: 600 }}\n      initialValues={{ name: 'admin' }}\n      disabled={disabled}\n      onValuesChange={(v, vs) => {\n        console.log(v, vs);\n      }}\n      onSubmit={(v) => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(1)\n          }, 3000)\n        })\n      }}\n    >\n      <FormItem label=\"Disabled\" disabled={false}>\n        <Switch onChange={setDisabled}></Switch>\n      </FormItem>\n      <FormItem label=\"Username\" field=\"name\" rules={[{ required: true }]}>\\n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[{ required: true, type: 'number', min: 0, max: 99 }]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <DemoButton />\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Validation with Arco Design React\nDESCRIPTION: This code snippet shows how to create a form with asynchronous validation for a username input field using Arco Design's components. It utilizes a custom validator that mimics an asynchronous check by using a Promise, which resolves or rejects based on the username provided. Required dependencies are '@arco-design/web-react' for the form elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/async-validate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Input, Button, Message, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form\n      form={form}\n      autoComplete=\"off\"\n      style={{\n        width: 600,\n      }}\n    >\n      <FormItem\n        label=\"Username\"\n        field=\"name\"\n        required\n        hasFeedback\n        rules={[\n          {\n            validator: async (value, callback) => {\n              return new Promise((resolve) => {\n                if (value !== 'admin') {\n                  setTimeout(() => {\n                    callback('Name must be admin');\n                    resolve();\n                  }, 1000);\n                } else {\n                  resolve();\n                }\n              });\n            },\n          },\n        ]}\n      >\n        <Input placeholder=\"please enter your username\"  />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          style={{ marginRight: 24 }}\n        >\n          Submit\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Arco Design React Components\nDESCRIPTION: Demonstrates how to import and use Arco Design React components in a basic React application. This example imports the Button component and CSS styles, then renders a secondary button with 'Hello World' text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from '@arco-design/web-react';\nimport '@arco-design/web-react/dist/css/arco.css';\n\nfunction App() {\n  return (\n    <Button type='secondary'>\n      Hello World\n    </Button>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Aware Messages with useMessage Hook in React\nDESCRIPTION: This snippet demonstrates how to use Message.useMessage() hook to create message notifications that can read from React context. The example creates messages that display the current user from context, with different message types (info, success, warning, error, normal) triggered by buttons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/useMessage.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { createContext } from 'react';\nimport { Message, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  const [message, contextHolder] = Message.useMessage();\n  const ConfigContext = createContext({});\n\n  const config = {\n    content: <ConfigContext.Consumer>{(name) => `Current user: ${name}`}</ConfigContext.Consumer>,\n  };\n\n  return (\n    <ConfigContext.Provider value=\"PJY\">\n      <div className=\"demo-holder-wrapper\">\n        {/* message 挂载在此容器内 */}\n        {contextHolder}\n      </div>\n      <Space size=\"large\">\n        <Button onClick={() => message.info?.(config)} type=\"primary\">\n          Info\n        </Button>\n        <Button onClick={() => message.success?.(config)} type=\"primary\" status=\"success\">\n          Success\n        </Button>\n        <Button onClick={() => message.warning?.(config)} type=\"primary\" status=\"warning\">\n          Warning\n        </Button>\n        <Button onClick={() => message.error?.(config)} type=\"primary\" status=\"danger\">\n          Error\n        </Button>\n        <Button onClick={() => message.normal?.(config)} type=\"secondary\">\n          Normal\n        </Button>\n      </Space>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Form Fields Using Form.List - React\nDESCRIPTION: This snippet implements a React functional component that utilizes the Arco Design library's Form and Form.List components to create a dynamic form. It manages an array of user posts with validation rules ensuring that a minimum number of posts are provided. Users can add, remove, and reorder posts seamlessly. The form also captures user data and handles state changes effectively.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/list.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState } from 'react';\nimport { Form, Input, Button, Grid, Space } from '@arco-design/web-react';\nimport { IconArrowRise, IconArrowFall, IconDelete } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [form] = Form.useForm();\n  const postsState = Form.useFormState('posts', form) || {};\n\n  console.log(postsState, '____');\n\n  return (\n    <div>\n      <Form\n        form={form}\n        style={{ width: 600 }}\n        autoComplete=\"off\"\n        initialValues={{\n          users: ['Username'],\n          posts: ['post1'],\n        }}\n        onSubmit={(v) => {\n          console.log(v);\n        }}\n        onValuesChange={(_, v) => {\n          console.log(_, v);\n        }}\n      >\n        <Form.Item label=\"Username\" field=\"username\" style={{ width: 370 }}>\n          <Input />\n        </Form.Item>\n        <Form.Item>\n          <Form.List\n            rules={[\n              {\n                validator(v, cb) {\n                  if (v?.length < 2) {\n                    return cb('必须超过两条');\n                  }\n                  return cb();\n                },\n              },\n            ]}\n            field=\"posts\"\n          >\n            {(fields, { add, remove, move }) => {\n              return (\n                <div>\n                  {fields.map((item, index) => {\n                    return (\n                      <Grid.Row key={item.key}>\n                        <Form.Item\n                          field={item.field}\n                          label={'Post-' + index}\n                          style={{\n                            width: 370,\n                          }}\n                          rules={[\n                            {\n                              required: true,\n                            },\n                          ]}\n                        >\n                          <Input />\n                        </Form.Item>\n\n                        <Button\n                          icon={<IconDelete />}\n                          shape=\"circle\"\n                          status=\"danger\"\n                          style={{\n                            margin: '0 20px',\n                          }}\n                          onClick={() => remove(index)}\n                        ></Button>\n                        <Button\n                          shape=\"circle\"\n                          onClick={() => move(index, index > 0 ? index - 1 : index + 1)}\n                        >\n                          {index > 0 ? <IconArrowRise /> : <IconArrowFall />}\n                        </Button>\n                      </Grid.Row>\n                    );\n                  })}\n                  <Space size={20}>\n                    <Button\n                      onClick={() => {\n                        add();\n                      }}\n                    >\n                      Add post\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        add('new 2', 1);\n                      }}\n                    >\n                      Add post to the second slot\n                    </Button>\n                  </Space>\n                </div>\n              );\n            }}\n          </Form.List>\n        </Form.Item>\n        <Form.Item style={{ marginTop: 20 }}>\n          <Space size={20}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n            <Button\n              onClick={() => {\n                form.resetFields()\n              }}\n            >\n              Reset\n            </Button>\n            <Button\n              status=\"danger\"\n              onClick={() => {\n                form.setFields({\n                  'posts[0]': {\n                    error: {\n                      message: 'error',\n                    },\n                  },\n                });\n              }}\n            >\n              Set `Post-0` to error state\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Validating Form with React and Arco Design\nDESCRIPTION: This snippet demonstrates how to implement a form in a React application using Arco Design components. It includes validation rules for the fields 'name' and 'age', handling user input and displaying success or error messages based on validation results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/validate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Input, Button, Message, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} autoComplete=\"off\" style={{ width: 600 }}>\n      <FormItem\n        label=\"Username\"\n        field=\"name\"\n        required\n        rules={[\n          {\n            validator(value, cb) {\n              if (value !== 'hahaha') {\n                return cb('必须填写hahaha');\n              }\n\n              return cb();\n            },\n          },\n        ]}\n      >\n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[{ required: true, type: 'number', min: 0, max: 99 }]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button\n          type=\"primary\"\n          onClick={async () => {\n            try {\n              await form.validate();\n              Message.success('校验通过');\n            } catch (e) {\n              Message.error('校验失败');\n            }\n          }}\n          style={{ marginRight: 24 }}\n        >\n          Validate Form\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={async () => {\n            try {\n              await form.validate(['name']);\n              Message.success('Username 校验通过');\n            } catch (e) {\n              Message.error('Username 校验失败');\n            }\n          }}\n          style={{ marginRight: 24 }}\n        >\n          Validate Username\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Forms with shouldUpdate in React\nDESCRIPTION: This code defines a React functional component that manages a dynamic form using Arco Design components and implements conditional rendering of form elements based on user input through the `shouldUpdate` property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/update.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState, useEffect } from 'react';\nimport { Form, Input, Message, Radio, Button, Select } from '@arco-design/web-react';\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <div>\n      <Form\n        form={form}\n        autoComplete=\"off\"\n        style={{ maxWidth: 650 }}\n        onValuesChange={(_, vs) => {\n          console.log(vs);\n        }}\n      >\n        <Form.Item field=\"type\" label=\"Type\">\n          <Radio.Group options={['A', 'B']}></Radio.Group>\n        </Form.Item>\n        <Form.Item shouldUpdate noStyle>\n          {(values) => {\n            return values.type === 'A' ? (\n              <Form.Item field=\"Name A\" label=\"Select A\">\n                <Input placeholder=\"Please enter name A\" />\n              </Form.Item>\n            ) : (\n              values.type === 'B' && (\n                <Form.Item field=\"B\" label=\"Name B\">\n                  <Select options={['B1', 'B2', 'B3']} placeholder=\"Please select name B\" />\n                </Form.Item>\n              )\n            );\n          }}\n        </Form.Item>\n        <Form.Item noStyle shouldUpdate={(prev, next) => prev.type !== next.type}>\n          {(values) => {\n            return values.type ? (\n              <Form.Item field=\"remark\" label=\"Remark\">\n                <Input.TextArea placeholder={values.type + ' remark'} />\n              </Form.Item>\n            ) : null;\n          }}\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ span: 17, offset: 5 }}>\n          <Button\n            onClick={() => {\n              console.log(form.getFieldsValue());\n            }}\n          >\n            OK\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining RulesProps for Arco Design Form Validation\nDESCRIPTION: This interface defines the properties for validation rules used within the Arco Design Form component. These rules are based on the b-validate library and include options for specifying validation triggers, levels (error/warning), and various validation constraints like required, type, length, and custom validators.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface RulesProps {\n  // when to validate\n  validateTrigger?: string | string[];\n  // When the verification fails, the error message will be displayed in the form of `error` or `warning`. Will not block form submission when set to `warning`\n  validateLevel?: 'error' | 'warning';\n  required?: boolean;\n  type?: string;\n  length?: number;\n  // Array\n  maxLength?: number;\n  minLength?: number;\n  includes?: boolean;\n  deepEqual?: any;\n  empty?: boolean;\n  // Number\n  min?: number;\n  max?: number;\n  equal?: number;\n  positive?: boolean;\n  negative?: boolean;\n  // Object\n  hasKeys?: string[];\n  // String\n  match?: RegExp;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  // Boolean\n  true?: boolean;\n  false?: boolean;\n  // custom\n  validator?: (value, callback: (error?: ReactNode) => void) => void;\n  message?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Code Input Component with React and Arco Design\nDESCRIPTION: Creates a verification code input component using useVerificationCode hook from Arco Design. The component renders multiple input fields for entering verification code digits, with controlled input handling and completion callbacks.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/hook.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Space } from \"@arco-design/web-react\";\nimport { useVerificationCode } from \"@arco-design/web-react/hooks\";\n\n\nconst App = () => {\n\n  const inputRefList = React.useRef([]);\n\n  const { filledValue, getInputProps } = useVerificationCode({\n    getInputRefList: () => inputRefList.current || [],\n    onFinish: (value) => {\n      console.log(value);\n    },\n    onChange: (value) => {\n      console.log(value);\n    }\n  });\n\n  return (\n    <div>\n       <Space size=\"large\">\n        {filledValue.map((v, index) => {\n          const inputProps = { ...getInputProps(index) };\n          return (\n            <input\n              className=\"custom-code-input\"\n              ref={(node) => {\n                inputRefList.current[index] = node;\n              }}\n              {...inputProps}\n              onChange={(e) => {\n                inputProps.onChange?.(e.target.value);\n              }}\n            />\n          );\n        })}\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Form using Arco-design with React\nDESCRIPTION: This code snippet demonstrates the creation of a controlled form in a React application using components from the Arco-design component library. Dependencies include React hooks such as useRef and useState, and various Arco-design components like Form, Input, Select, and more. Key parameters include field labels, field properties, and onChange handlers. Inputs consist of user interactions with form fields, and outputs are actions such as submission or reset triggers. Constraints include form validation rules and structural layout properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport {\n  Form,\n  AutoComplete,\n  Input,\n  Select,\n  TreeSelect,\n  Button,\n  Checkbox,\n  Switch,\n  Radio,\n  Cascader,\n  Message,\n  InputNumber,\n  Rate,\n  Slider,\n  Upload,\n  DatePicker,\n  Modal,\n} from '@arco-design/web-react';\nconst FormItem = Form.Item;\nconst cascaderOptions = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'beijingshi',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\nconst formItemLayout = {\n  labelCol: {\n    span: 7,\n  },\n  wrapperCol: {\n    span: 17,\n  },\n};\nconst noLabelLayout = {\n  wrapperCol: {\n    span: 17,\n    offset: 7,\n  },\n};\n\nfunction App() {\n  const formRef = useRef();\n  const [size, setSize] = useState('default');\n  useEffect(() => {\n    formRef.current.setFieldsValue({\n      rate: 5,\n    });\n  }, []);\n\n  const onValuesChange = (changeValue, values) => {\n    console.log('onValuesChange: ', changeValue, values);\n  };\n\n  return (\n    <div style={{ maxWidth: 650 }}>\n      <Form\n        ref={formRef}\n        autoComplete=\"off\"\n        {...formItemLayout}\n        size={size}\n        initialValues={{\n          slider: 20,\n          'a.b[0].c': ['b'],\n        }}\n        onValuesChange={onValuesChange}\n        scrollToFirstError\n      >\n        <FormItem label=\"Form size\">\n          <Radio.Group type=\"button\" value={size} onChange={setSize}>\n            <Radio value=\"mini\">mini</Radio>\n            <Radio value=\"small\">small</Radio>\n            <Radio value=\"default\">default</Radio>\n            <Radio value=\"large\">large</Radio>\n          </Radio.Group>\n        </FormItem>\n        <FormItem label=\"Username\" field=\"name\" rules={[{ required: true }]}>  \n          <Input placeholder=\"please enter...\" />\n        </FormItem>\n        <FormItem label=\"Age\" field=\"age\" rules={[{ type: 'number', required: true }]}>  \n          <InputNumber placeholder=\"please enter\" />\n        </FormItem>\n        <FormItem\n          label=\"Province\"\n          field=\"province\"\n          rules={[\n            {    \n              type: 'array',\n              required: true,\n            },\n            {\n              type: 'array',\n              length: 4,\n            },\n          ]}\n        >  \n          <Cascader showSearch placeholder=\"please select\" allowClear options={cascaderOptions} />  \n        </FormItem>\n        <FormItem label=\"Auto-complete\" field=\"autocomplete\" rules={[{ required: true }]}>  \n          <AutoComplete placeholder=\"please enter\" data={[\"123\", \"234\", \"345\", \"456\"]} />  \n        </FormItem>\n        <FormItem label=\"Post\" field=\"post\" rules={[{ required: true }]}>  \n          <Select  \n            placeholder=\"please select\"  \n            options={[  \n              {  \n                label: \"one\",  \n                value: 0,  \n              },  \n              {  \n                label: \"two\",  \n                value: 1,  \n              },  \n              {  \n                label: \"three\",  \n                value: 2,  \n              },  \n            ]}  \n            allowClear  \n          />  \n        </FormItem>\n        <FormItem\n          label=\"Multiple Choice\"\n          required\n          field=\"a.b[0].c\"\n          rules={[{ type: 'array', minLength: 1 }]}\n        >  \n          <Select  \n            mode=\"multiple\"  \n            allowCreate  \n            placeholder=\"please select\"  \n            options={['a', 'b', 'c', 'd', 'e']}  \n          />  \n        </FormItem>\n        <FormItem label=\"TreeSelect\" field=\"treenode\" rules={[{ required: true }]}>  \n          <TreeSelect allowClear placeholder=\"please select\">  \n            <TreeSelect.Node key=\"node1\" title=\"Trunk(node1)\">  \n              <TreeSelect.Node key=\"node2\" title=\"Leaf(node2)\" />  \n            </TreeSelect.Node>  \n            <TreeSelect.Node key=\"node3\" title=\"Trunk2(node3)\">  \n              <TreeSelect.Node key=\"node4\" title=\"Leaf(node4)\" />  \n              <TreeSelect.Node key=\"node5\" title=\"Leaf(node5)\" />  \n            </TreeSelect.Node>  \n          </TreeSelect>  \n        </FormItem>\n        <FormItem label=\"Score\" field=\"score\" rules={[{ required: true, type: 'number' }]}>  \n          <Rate />  \n        </FormItem>\n        <FormItem label=\"Date\" field=\"date\" rules={[{ required: true }]}>  \n          <DatePicker showTime />  \n        </FormItem>\n        <FormItem\n          label=\"Switch\"\n          field=\"switch\"\n          triggerPropName=\"checked\"\n          rules={[{ type: 'boolean', true: true }]}\n        >  \n          <Switch />  \n        </FormItem>\n        <FormItem\n          label=\"Radio\"\n          field=\"radio\"\n          rules={[  \n            {  \n              validator: (value, callback) => {  \n                if (value !== 'b') {  \n                  callback('you can only choose b');  \n                }  \n              },  \n            },  \n          ]}\n        >  \n          <Radio.Group>  \n            <Radio value=\"a\">A</Radio>  \n            <Radio value=\"b\">B</Radio>  \n            <Radio disabled value=\"c\">  \n              C\n            </Radio>  \n            <Radio value=\"d\"> D </Radio>  \n          </Radio.Group>  \n        </FormItem>  \n        <FormItem\n          label=\"Slide\"\n          field=\"slider\"\n          rules={[  \n            {  \n              validator: (value, callback) => {  \n                if (value < 50) {  \n                  callback('must be greater than 50!');  \n                }  \n              },  \n            },  \n          ]}\n        >  \n          <Slider></Slider>\n        </FormItem>  \n        <Form.Item\n          label=\"Upload\"\n          field=\"upload\"\n          triggerPropName=\"fileList\"\n          initialValue={[  \n            {  \n              uid: '-1',  \n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',  \n              name: '20200717',  \n            },  \n          ]}  \n        >  \n          <Upload  \n            listType=\"picture-card\"  \n            multiple  \n            name=\"files\"  \n            action=\"/\"  \n            onPreview={(file) => {  \n              Modal.info({\n                title: 'Preview',\n                content: (\n                  <img\n                    src={file.url || URL.createObjectURL(file.originFile)}\n                    style={{\n                      maxWidth: '100%',\n                    }}\n                  ></img>\n                ),\n              });\n            }}\n          />\n        </Form.Item>\n        <FormItem\n          {...noLabelLayout}\n          field=\"readme\"\n          triggerPropName=\"checked\"\n          rules={[{ type: 'boolean', true: true }]}  \n        >  \n          <Checkbox>I haved read the employee manual</Checkbox>  \n        </FormItem>  \n        <FormItem {...noLabelLayout}>  \n          <Button  \n            onClick={async () => {  \n              if (formRef.current) {  \n                try {  \n                  await formRef.current.validate();  \n                  Message.info('校验通过，提交成功!');  \n                } catch (_) {  \n                  console.log(formRef.current.getFieldsError());  \n                  Message.error('校验失败，请检查字段！');  \n                }  \n              }  \n            }}\n            type=\"primary\"\n            style={{ marginRight: 24 }}\n          >\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              formRef.current.resetFields();\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"text\"\n            onClick={() => {\n              Message.info(`fields: ${formRef.current.getTouchedFields().join(',')}`);\n            }}\n          >\n            Get touched fields\n          </Button>\n        </FormItem>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Setting Field Values and Errors\nDESCRIPTION: Demonstrates how to set form field values, errors, and warnings using the `setFields` method.  This allows for programmatic control over form state, including displaying validation messages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nthis.form.setFields({\n  name: {\n    value: 'pjy',\n    error: {\n      message: 'Yes, I know!'\n    },\n    warning: 'warning...'\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Form Fields with Error and Warning States\nDESCRIPTION: Shows how to use the setFields method to set a form field's value along with custom error and warning messages, useful for form validation feedback.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nthis.form.setFields({\n  name: {\n    value: 'pjy',\n    error: {\n      message: 'Yes, I know!'\n    },\n    warning: 'warning...'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Controlled Form with Validation - React\nDESCRIPTION: This snippet demonstrates a React class component that implements controlled form functionality using Arco Design's form components. It features error handling, validation, and submission logic. It utilizes 'Form.Control' to manage form state, trigger validation, and display messages. Required dependencies include React and '@arco-design/web-react'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/control-below.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Form, Input, InputNumber, Message } from '@arco-design/web-react';\n\nconst FormItem = Form.Item;\nconst FormControl = Form.Control;\n\nclass App extends React.Component {\n  onSubmit = () => {\n    this.form\n      .validate()\n      .then((values) => {\n        Message.info('提交成功！');\n        console.log('Values: ', values);\n      })\n      .catch((error) => {\n        console.log(error.message);\n        console.log(error.errors);\n      });\n  };\n  onValuesChange = (value, allValues) => {\n    console.log(value, allValues);\n  };\n\n  render() {\n    return (\n      <Form\n        ref={(ref) => (this.form = ref)}\n        autoComplete=\"off\"\n        style={{ maxWidth: 650 }}\n        onValuesChange={this.onValuesChange}\n      >\n        <FormItem label=\"姓名\" required extra=\"请输入长度在 1 - 10 的名字，注意不要使用特殊符号。\">\n          <FormControl\n            field=\"name\"\n            rules={[\n              {\n                required: true,\n              },\n              {\n                maxLength: 10,\n                message: '最多可以输入十个字!',\n              },\n            ]}\n          >\n            <Input placeholder=\"please enter...\" />\n          </FormControl>\n        </FormItem>\n        <FormItem label=\"数字\" required>\n          <FormControl field=\"number\" rules={[{ type: 'number', required: true }]}> \n            <InputNumber placeholder=\"请输入数字\" />\n          </FormControl>\n        </FormItem>\n      </Form>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Notification API Methods\nDESCRIPTION: Core notification methods for displaying different types of notifications and managing notification state. Includes info, success, warning, error, normal display methods and remove/clear utilities.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNotification.info(config)\nNotification.success(config)\nNotification.warning(config)\nNotification.error(config)\nNotification.normal(config)\nNotification.remove(id)\nNotification.clear()\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to import and use the Button component from the Arco Design React library. It also imports the necessary CSS file for styling. The component is then rendered within a React application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button } from \"@arco-design/web-react\";\nimport \"@arco-design/web-react/dist/css/arco.css\";\n\nReactDOM.render(\n  <Button type=\"primary\">Hello Arco</Button>,\n  document.querySelector(\"#root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Register Form Creation with Arco Design in JavaScript\nDESCRIPTION: This snippet showcases a user registration form implemented in a React application using the Arco Design library. Dependencies include the '@arco-design/web-react' package. The form validates fields like username, password, and confirm password, and provides user feedback on successful submission via the Message component. Key inputs include 'name', 'password', and 'confirm_password', with on-change and on-submit event handling. The form requires valid username and matching passwords.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/register.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, Message } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form\n      form={form}\n      style={{ width: 320 }}\n      wrapperCol={{ span: 24 }}\n      autoComplete=\"off\"\n      onValuesChange={(v, vs) => {\n        console.log(v, vs);\n      }}\n      onSubmit={(v) => {\n        console.log(v);\n        Message.success('success');\n      }}\n    >\n      <FormItem field=\"name\" rules={[{ required: true, message: 'username is required' }]}>        \n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem field=\"password\" rules={[{ required: true, message: 'password is required' }]}>      \n        <Input placeholder=\"please enter your password\" />\n      </FormItem>\n      <FormItem\n        field=\"confirm_password\"\n        dependencies={['password']}\n        rules={[{\n          validator: (v, cb) => {\n            if (!v) {\n              return cb('confirm_password is required')\n            } else if (form.getFieldValue('password') !== v) {\n              return cb('confirm_password must be equal with password')\n            }\n            cb(null)\n          }\n        }]}\n      >\n        <Input placeholder=\"please confirm your password\" />\n      </FormItem>\n      <FormItem>\n        <Button type=\"primary\" htmlType=\"submit\" long>\n          Register\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Trigger Elements for DatePicker in React\nDESCRIPTION: This code demonstrates how to create DatePicker and DatePicker.RangePicker components with custom button triggers in React using Arco Design. It uses useState for state management and displays selected dates or default text on the buttons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/triggerElement.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState();\n  const [rangeValue, setRangeValue] = useState();\n  return (\n    <Space>\n      <DatePicker\n        triggerElement={<Button>{value || '请选择日期'}</Button>}\n        style={{ width: 268 }}\n        value={value}\n        onChange={(v) => setValue(v)}\n      />\n      <DatePicker.RangePicker\n        triggerElement={\n          <Button>{(rangeValue && rangeValue.join(' - ')) || '请选择日期范围'}</Button>\n        }\n        style={{ width: 268 }}\n        value={rangeValue}\n        onChange={(v) => setRangeValue(v)}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: FormInstance Type Definition\nDESCRIPTION: This code snippet defines the `FormInstance` type in TypeScript, which represents the interface for interacting with a Form component. It includes methods for getting and setting field values, validating the form, resetting fields, and scrolling to specific fields.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport type FormInstance<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = Pick<\n  Store<FormData, FieldValue, FieldKey>,\n  | \"getFieldsValue\"\n  | \"getFieldValue\"\n  | \"getFieldError\"\n  | \"getFieldsError\"\n  | \"getTouchedFields\"\n  | \"getFields\"\n  | \"setFieldValue\"\n  | \"setFieldsValue\"\n  | \"setFields\"\n  | \"resetFields\"\n  | \"clearFields\"\n  | \"submit\"\n  | \"validate\"\n  | \"getFieldsState\"\n> & {\n  scrollToField: (field: FieldKey, options?: ScrollIntoViewOptions) => void;\n  // arco 内部使用，业务万不可调用\n  getInnerMethods: (\n    inner?: boolean\n  ) => InnerMethodsReturnType<FormData, FieldValue, FieldKey>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Monitoring Form Field Changes with Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet presents a React component that utilizes Arco Design's Form.useWatch function to track changes in form fields. It imports necessary components from the '@arco-design/web-react' library, initializes a form instance, and uses useWatch to monitor the 'name' and 'age' fields. The watched values are displayed dynamically within Typography.Text components. Dependencies include React and '@arco-design/web-react'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/useWatch.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Typography, Input, InputNumber } from '@arco-design/web-react';\n\nfunction App() {\n  const [form] = Form.useForm();\n  const name = Form.useWatch('name', form);\n  const age = Form.useWatch('age', form);\n  return (\n    <div>\n      <Form form={form} autoComplete=\"off\">\n        <Form.Item label=\"Name\" field=\"name\">\n          <Input placeholder=\"enter name\" />\n        </Form.Item>\n\n        <Form.Item label=\"Age\" field=\"age\">\n          <InputNumber placeholder=\"enter age\" />\n        </Form.Item>\n        <Form.Item label=\" \">\n          <Typography.Text code>\n            Name: {name}; Age: {age}\n          </Typography.Text>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance via Ref in Arco Design\nDESCRIPTION: This code snippet demonstrates how to access the Form instance in Arco Design using a ref. By assigning the ref to `this.form`, you can access form methods like `validate`, `setFieldValue`, and `getFieldValue` within the component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Form ref={(ref) => (this.form = ref)}>\n  <FormItem>...</FormItem>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable Tabs with React and react-dnd\nDESCRIPTION: Creates a draggable tab interface using React hooks, react-dnd, and Arco Design Tabs component. Allows users to reorder tabs by dragging and dropping them dynamically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/drag.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useRef, useState } from 'react';\nimport { Tabs } from '@arco-design/web-react';\nimport { TabPaneProps } from '@arco-design/web-react/es/Tabs';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport type { Identifier, XYCoord } from 'dnd-core';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Table Component in React with Arco Design\nDESCRIPTION: This code demonstrates the basic implementation of the Arco Design Table component in a React application. It defines the table columns using the `TableColumnProps` interface and populates the table with static data. The `Table` component is then rendered with the defined columns and data, showcasing a simple table setup.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Table, TableColumnProps } from \"@arco-design/web-react\";\n\nconst columns: TableColumnProps[] = [\n  {\n    title: \"Name\",\n    dataIndex: \"name\",\n  },\n  {\n    title: \"Salary\",\n    dataIndex: \"salary\",\n  },\n  {\n    title: \"Address\",\n    dataIndex: \"address\",\n  },\n  {\n    title: \"Email\",\n    dataIndex: \"email\",\n  },\n];\nconst data = [\n  {\n    key: \"1\",\n    name: \"Jane Doe\",\n    salary: 23000,\n    address: \"32 Park Road, London\",\n    email: \"jane.doe@example.com\",\n  },\n  {\n    key: \"2\",\n    name: \"Alisa Ross\",\n    salary: 25000,\n    address: \"35 Park Road, London\",\n    email: \"alisa.ross@example.com\",\n  },\n  {\n    key: \"3\",\n    name: \"Kevin Sandra\",\n    salary: 22000,\n    address: \"31 Park Road, London\",\n    email: \"kevin.sandra@example.com\",\n  },\n  {\n    key: \"4\",\n    name: \"Ed Hellen\",\n    salary: 17000,\n    address: \"42 Park Road, London\",\n    email: \"ed.hellen@example.com\",\n  },\n  {\n    key: \"5\",\n    name: \"William Smith\",\n    salary: 27000,\n    address: \"62 Park Road, London\",\n    email: \"william.smith@example.com\",\n  },\n];\n\nconst App = () => {\n  return <Table columns={columns} data={data} />;\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Row with React and Arco Design\nDESCRIPTION: This code defines an `EditableRow` component that wraps each table row with an Arco Design `Form` component.  It uses React's `useRef` to hold a reference to the form instance and provides a `getForm` function within the `EditableContext` so that `EditableCell` components can access and interact with the form. The form is styled to appear as a table row.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/table-edit.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction EditableRow(props) {\n  const { children, record, className, ...rest } = props;\n  const refForm = useRef(null);\n\n  const getForm = () => refForm.current;\n\n  return (\n    <EditableContext.Provider\n      value={{\n        getForm,\n      }}\n    >\n      <Form\n        style={{ display: 'table-row' }}\n        children={children}\n        ref={refForm}\n        wrapper=\"tr\"\n        wrapperProps={rest}\n        className={`${className} editable-row`}\n      />\n    </EditableContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Form Items in React with Arco Design\nDESCRIPTION: This code snippet defines a `React` component that renders a form using the `@arco-design/web-react` library. It showcases nested form items, dynamic selection of cities based on the chosen province, and validation rules for user input fields like username, age, gender, and province. The form manages its state using hooks and includes submission and reset functionalities.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/nest-form-item.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, Grid, Select, InputNumber, Tooltip, Space } from '@arco-design/web-react';\nimport { IconExclamationCircle } from '@arco-design/web-react/icon';\nimport { useRef, useState } from 'react';\n\nfunction App() {\n  const formRef = useRef();\n  const [values, setValues] = useState({});\n  return (\n    <div>\n      <Form\n        ref={formRef}\n        style={{ maxWidth: 500 }}\n        initialValues={{ city: 'Beijing' }}\n        autoComplete=\"off\"\n        onSubmit={(values) => {\n          console.log(values);\n        }}\n        onValuesChange={(_, values) => {\n          console.log(values);\n        }}\n      >\n        <Form.Item label=\"User\" required style={{ marginBottom: 0 }}>\n          <Grid.Row gutter={8}>\n            <Grid.Col span={12}>\n              <Form.Item field=\"name\" rules={[{ required: true }]}> \n                <Input placeholder=\"please enter you username\" />\n              </Form.Item>\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <Form.Item field=\"age\" rules={[{ required: true }]}> \n                <Input placeholder=\"please enter your age\" />\n              </Form.Item>\n            </Grid.Col>\n          </Grid.Row>\n        </Form.Item>\n        <Form.Item label=\"Gender\" required>\n          <Grid.Row align=\"center\">\n            <Form.Item field=\"gender\" noStyle={{ showErrorTip: true }} rules={[{ required: true }]}> \n              <Select\n                options={['male', 'female', 'other']}\n                placeholder=\"please enter you gender\"\n                style={{ flex: 1 }}\n              />\n            </Form.Item>\n            <Tooltip content=\"必须填写哦\">\n              <IconExclamationCircle style={{ margin: '0 8px', color: 'rgb(var(--arcoblue-6))' }} />\n            </Tooltip>\n          </Grid.Row>\n        </Form.Item>\n        <Form.Item label=\"Province\" field=\"province\" rules={[{ required: true }]}> \n          <Select allowClear placeholder=\"please select\" options={['Beijing', 'Shanghai']}></Select>\n        </Form.Item>\n        <Form.Item noStyle shouldUpdate>\n          {(values) => {\n            return values.province ? (\n              <Form.Item field=\"city\" key=\"city\" label=\"City\">\n                <Select allowClear placeholder=\"please select\" options={[values.province]}></Select>\n              </Form.Item>\n            ) : null;\n          }}\n        </Form.Item>\n        <Form.Item label=\" \">\n          <Space size={24}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n            <Button\n              onClick={() => {\n                formRef.current.resetFields();\n              }}\n            >\n              Reset\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization with Arco Design Components in React\nDESCRIPTION: A React component that demonstrates internationalization using Arco Design's ConfigProvider. It supports multiple languages including Chinese, English, Japanese, Korean, and others. The example showcases language switching and its effect on various components like Pagination, DatePicker, TimePicker, Popconfirm, and Modal.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport {\n  ConfigProvider,\n  Radio,\n  Pagination,\n  DatePicker,\n  TimePicker,\n  Popconfirm,\n  Button,\n  Modal,\n} from '@arco-design/web-react';\nimport zhCN from '@arco-design/web-react/es/locale/zh-CN';\nimport enUS from '@arco-design/web-react/es/locale/en-US';\nimport jaJP from '@arco-design/web-react/es/locale/ja-JP';\nimport koKR from '@arco-design/web-react/es/locale/ko-KR';\nimport idID from '@arco-design/web-react/es/locale/id-ID';\nimport thTH from '@arco-design/web-react/es/locale/th-TH';\nimport zhHK from '@arco-design/web-react/es/locale/zh-HK';\nimport frFR from '@arco-design/web-react/es/locale/fr-FR';\nimport esES from '@arco-design/web-react/es/locale/es-ES';\nimport deDE from '@arco-design/web-react/es/locale/de-DE';\nimport itIT from '@arco-design/web-react/es/locale/it-IT';\nimport viVN from '@arco-design/web-react/es/locale/vi-VN';\n\nfunction App() {\n  const [locale, setLocale] = useState('zh-CN');\n\n  function getLocale() {\n    switch (locale) {\n      case 'zh-CN':\n        return zhCN;\n\n      case 'en-US':\n        return enUS;\n\n      case 'ja-JP':\n        return jaJP;\n\n      case 'ko-KR':\n        return koKR;\n\n      case 'id-ID':\n        return idID;\n\n      case 'th-TH':\n        return thTH;\n\n      case 'zh-HK':\n        return zhHK;\n\n      case 'fr-FR':\n        return frFR;\n\n      case 'es-ES':\n        return esES;\n\n      case 'de-DE':\n        return deDE;\n\n      case 'it-IT':\n        return itIT;\n\n      case 'vi-VN':\n        return viVN;\n\n      default:\n        return zhCN;\n    }\n  }\n\n  return (\n    <ConfigProvider locale={getLocale()}>\n      <Radio.Group\n        value={locale}\n        options={[\n          'zh-CN',\n          'en-US',\n          'zh-HK',\n          'ja-JP',\n          'ko-KR',\n          'id-ID',\n          'th-TH',\n          'fr-FR',\n          'es-ES',\n          'de-DE',\n          'it-IT',\n          'vi-VN',\n        ]}\n        name=\"locale\"\n        type=\"button\"\n        mode=\"fill\"\n        onChange={setLocale}\n        style={{ marginBottom: 40 }}\n      />\n      <br />\n      <Pagination\n        total={200}\n        showTotal\n        sizeCanChange\n        style={{ marginBottom: 20, marginRight: 40, minWidth: 550 }}\n      />\n      <DatePicker.RangePicker style={{ marginBottom: 20, marginRight: 40, width: 300 }} />\n      <TimePicker.RangePicker style={{ marginBottom: 20, marginRight: 40, width: 300 }} />\n      <Popconfirm title=\"Click to confirm!\">\n        <Button style={{ marginBottom: 20, marginRight: 20 }} type=\"primary\">\n          Popconfirm\n        </Button>\n      </Popconfirm>\n      <Button\n        onClick={() =>\n          Modal.confirm({\n            title: 'Title',\n            content: 'Content',\n          })\n        }\n      >\n        Modal confirm\n      </Button>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing InputTag with Basic Features in React\nDESCRIPTION: This snippet showcases the implementation of the InputTag component from the '@arco-design/web-react' package within a functional React component. It demonstrates various configurations such as allowing clear input, disabled states, read-only attributes, and custom status indicators like error and warning. The component is styled to have a width of 350px and uses the Space component for layout adjustments.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Space style={{marginBottom: 20}}>\n        <InputTag\n          allowClear\n          placeholder=\"Input and press Enter\"\n          style={{ width: 350 }}\n        />\n        <InputTag allowClear placeholder=\"Disabled\" disabled style={{ width: 350 }}/>\n      </Space>\n      <Space style={{marginBottom: 20}}>\n        <InputTag\n          allowClear\n          placeholder=\"Readonly\"\n          readOnly\n          style={{ width: 350 }}\n        />\n        <InputTag allowClear placeholder=\"Error\" status=\"error\" style={{ width: 350 }}/>\n      </Space>\n      <InputTag allowClear placeholder=\"Warning\" status=\"warning\" style={{ width: 350 }}/>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Typography Ellipsis Controlled Demo\nDESCRIPTION: This code snippet showcases a controlled example of the `ellipsis` property within Arco Design's `Typography.Paragraph` component. It allows users to dynamically configure ellipsis settings such as the number of rows, whether the text is expandable, the ellipsis string, and a suffix. The demo features a form for controlling these properties and updates the `Typography.Paragraph` component accordingly, demonstrating how to manage ellipsis behavior through state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/ellipsis-controlled.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport {\n  Typography,\n  Button,\n  Switch,\n  Input,\n  Form,\n  Descriptions,\n  Space,\n} from '@arco-design/web-react';\nconst defaultText = `A design is a plan or specification for the construction of an object or system or for the\nimplementation of an activity or process. A design is a plan or specification for the\nconstruction of an object or system or for the implementation of an activity or process. `;\nconst defaultConfig = {\n  ellipsisStr: '...',\n};\n\nconst App = () => {\n  const [config, setConfig] = useState(defaultConfig);\n  const [rows, setRows] = useState(1);\n  const [text, setText] = useState(defaultText);\n  const { ellipsis, ellipsisStr, expandable, suffix } = config;\n  return (\n    <div>\n      <Space align=\"start\" size={120}>\n        <Form\n          onValuesChange={(_, values) => setConfig(values)}\n          style={{ width: '400px', }}\n          labelCol={{ span: 6, }}\n          wrapperCol={{ span: 18, }}\n          size=\"small\"\n        >\n          <Form.Item label=\"超出省略\" field=\"ellipsis\" triggerPropName=\"checked\">\n            <Switch />\n          </Form.Item>\n          <Form.Item label=\"展开/折叠\" field=\"expandable\" triggerPropName=\"checked\">\n            <Switch />\n          </Form.Item>\n          <Form.Item label=\"省略号\" field=\"ellipsisStr\" initialValue={defaultConfig.ellipsisStr}>\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"suffix\" field=\"suffix\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"省略展示\">\n            <Space size=\"medium\">\n              <Button onClick={() => setRows(Math.max(1, rows - 1))}> row- </Button>\n              <Button onClick={() => setRows(rows + 1)}> row+ </Button>\n            </Space>\n          </Form.Item>\n          <Form.Item label=\"文字操作\">\n            <Button onClick={() => setText(text + defaultText)} type=\"primary\">\n              addText\n            </Button>\n          </Form.Item>\n        </Form>\n        <Descriptions\n          column={1}\n          title=\"当前配置\"\n          data={[\n            ...Object.entries(config).map(([label, value]) => ({\n              label,\n              value: String(value),\n            })),\n            {\n              label: 'rows',\n              value: rows,\n            },\n          ]}\n          style={{ marginBottom: 20, }}\n          labelStyle={{ paddingRight: 36, }}\n        />\n      </Space>\n\n      <div>\n        <Typography.Paragraph\n          ellipsis={\n            ellipsis\n              ? {\n                  rows: rows,\n                  expandable,\n                  suffix,\n                  ellipsisStr,\n                  wrapper: \"div\"\n                }\n              : undefined\n          }\n        >\n          {text}\n        </Typography.Paragraph>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Using Form Validation in React Forms\nDESCRIPTION: Demonstrates different ways to use the form validation method, including callback approach, promise-based approach, and async/await syntax for form validation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nthis.form.validate((errors, values) => {\n  console.log(errors, values);\n});\n// 或者\nthis.form.validate().then((values) => {\n  console.log(values);\n}).catch((error) => {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n});\n// 或者 (注意要在 async 方法中使用)\ntry {\n  const values = await this.form.validate();\n} catch (error) {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Dates and Times in Arco Design DatePicker\nDESCRIPTION: This snippet demonstrates how to use the DatePicker and RangePicker components from Arco Design with disabled dates and times. It includes helper functions for generating disabled time ranges and showcases different configurations for single date and date range selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/disabled-date.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\nconst { RangePicker } = DatePicker;\n\nfunction range(start, end) {\n  const result = [];\n\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n}\n\nfunction getDisabledTime(date) {\n  return {\n    disabledHours: () => range(6, 24),\n    disabledMinutes: () => range(30, 60),\n    disabledSeconds: () => range(30, 60),\n  };\n}\n\nfunction getDisabledRangeTime(date, type) {\n  return {\n    disabledHours: () => (type === 'start' ? range(0, 6) : range(6, 24)),\n    disabledMinutes: () => (type === 'end' ? range(0, 30) : [31, 60]),\n    disabledSeconds: () => range(30, 60),\n  };\n}\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker\n        style={{ width: 200, marginRight: 24, marginBottom: 24 }}\n        disabledDate={(current) => current.isBefore(dayjs()) || current.isAfter(dayjs().add(7, 'day'))}\n      />\n      <RangePicker\n        style={{ width: 300, marginRight: 24, marginBottom: 24 }}\n        disabledDate={(current) => current.isBefore(dayjs())}\n      />\n      <DatePicker\n        style={{ width: 200, marginRight: 24, marginBottom: 24 }}\n        showTime\n        disabledDate={(current) => current.isBefore(dayjs())}\n        disabledTime={getDisabledTime}\n      />\n      <RangePicker\n        style={{ width: 380, marginBottom: 24 }}\n        showTime={{\n          hideDisabledOptions: true,\n        }}\n        disabledDate={(current) => current.isBefore(dayjs())}\n        disabledTime={getDisabledRangeTime}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Scroll to Field with Arco Design Form in React\nDESCRIPTION: This snippet shows how to implement the scrollToField method of the Form component from Arco Design.  It defines a functional component App that includes a Form with dynamically generated input fields using Form.List.  A button triggers the scrollToField method, scrolling the form to the specified field ('users[9]').\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/scrollToField.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState } from 'react';\nimport { Form, Input, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const formRef = useRef();\n  return (\n    <div>\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          formRef.current && formRef.current.scrollToField('users[9]');\n        }}\n      >\n        Scroll to the last field\n      </Button>\n      <Form\n        ref={formRef}\n        style={{\n          maxWidth: 500,\n          marginTop: 20,\n          paddingRight: 16,\n          height: 300,\n          overflow: 'auto',\n        }}\n        autoComplete=\"off\"\n        initialValues={{ users: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] }}\n      >\n        <Form.List field=\"users\">\n          {(fields, { add, remove }) => {\n            return fields.map((field, index) => {\n              return (\n                <Form.Item label={'user' + index} key={field.key} field={field.field}>\n                  <Input placeholder=\"user\" />\n                </Form.Item>\n              );\n            });\n          }}\n        </Form.List>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkable Tree Component with React and Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a tree component with checkboxes using Arco Design. It includes example data structure with nested nodes, disabled items, and a toggle to switch between parent-child dependent and independent checking modes with the `checkStrictly` property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/checkboxTree.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Checkbox } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        disabled: true,\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-0-2-1',\n          },\n          {\n            title: 'Leaf',\n            key: '0-0-2-2',\n            disableCheckbox: true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf ',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf ',\n            key: '0-1-1-2',\n          },\n        ],\n      },\n      {\n        title: 'Leaf',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [checkedKeys, setCheckedKeys] = useState(['0-0', '0-1']);\n  const [checkStrictly, setCheckStrictly] = useState(false);\n  return (\n    <div>\n      <Checkbox\n        style={{ marginBottom: 24 }}\n        onChange={(value) => {\n          setCheckStrictly(value);\n          setCheckedKeys([]);\n        }}\n      >\n        checkStrictly\n      </Checkbox>\n\n      <Tree\n        checkStrictly={checkStrictly}\n        checkable\n        checkedKeys={checkedKeys}\n        onCheck={(value, extra) => {\n          setCheckedKeys(value);\n        }}\n        treeData={TreeData}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Routing Table Configuration\nDESCRIPTION: Defines the structure of the routing table, which includes the menu name, key (used as the path), and optional children routes. The `name` property is used for internationalization, `key` for routing and component loading, and `children` to define sub-menus. The `breadcrumb` property indicates whether to display breadcrumbs on the current page.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes.ts\nexport const routes = [\n  {\n    name:'menu.dashboard', // Menu name, locale['menu.dashboard']\n    key:'dashboard', // menu item key, also menu path\n    children: [\n      {\n        name:'menu.dashboard.workplace', // Menu name, locale['menu.dashboard.workplace']\n        key:'dashboard/workplace', // menu item key, also menu path\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Loading with Arco Design List Component\nDESCRIPTION: This example demonstrates how to create a scrollable list with dynamic data loading using the Arco Design List component. The code fetches user data from the Random User API when the user scrolls to the bottom of the list, showing a loading spinner during data fetch and a message when no more data is available.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/scrollLoad.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { List, Avatar, Spin } from '@arco-design/web-react';\n\nfunction App() {\n  const [mockData, setMockData] = useState([]);\n  const [scrollLoading, setScrollLoading] = useState(<Spin loading={true} />);\n\n  const fetchData = (currentPage) => {\n    if (currentPage > 10) {\n      setScrollLoading('No more data');\n    } else {\n      fetch('https://randomuser.me/api/?results=10')\n        .then((res) => res.json())\n        .then((data) => {\n          setMockData((mockData) => mockData.concat(...data.results));\n        })\n        .catch((error) => console.error(error));\n    }\n  };\n\n  useEffect(() => {\n    fetchData(1);\n  }, []);\n  return (\n    <List\n      style={{ width: 600, maxHeight: 320 }}\n      scrollLoading={scrollLoading}\n      onReachBottom={(currentPage) => fetchData(currentPage)}\n      dataSource={mockData}\n      render={(item, index) => (\n        <List.Item key={index}>\n          <List.Item.Meta\n            avatar={\n              <Avatar shape=\"square\">\n                <img alt=\"avatar\" src={item.picture.thumbnail} />\n              </Avatar>\n            }\n            title={`${item.name.first} ${item.name.last}`}\n            description={item.email}\n          />\n        </List.Item>\n      )}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Validation Example\nDESCRIPTION: Illustrates different ways to trigger form validation and handle the results using callbacks, promises, or async/await.  It shows how to access validation errors and the validated form values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nthis.form.validate((errors, values) => {\n  console.log(errors, values);\n});\n// 或者\nthis.form.validate().then((values) => {\n  console.log(values);\n}).catch((error) => {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n});\n// 或者 (注意要在 async 方法中使用)\ntry {\n  const values = await this.form.validate();\n} catch (error) {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Transfer Component in React with Arco Design\nDESCRIPTION: This code creates a TableTransfer component that combines the Transfer and Table components from Arco Design. It provides a more sophisticated data transfer interface with sortable columns and custom rendering. The example transfers company data between two tables with features like selection, sorting, and custom data formatting.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/with-table.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Transfer, Table } from '@arco-design/web-react';\n\nconst TableTransfer = ({ sourceColumns, targetColumns, ...restProps }) => (\n  <Transfer {...restProps}>\n    {({\n      listType,\n      filteredItems,\n      onItemSelect,\n      onItemSelectAll,\n      selectedKeys: listSelectedKeys,\n      disabled: listDisabled,\n    }) => {\n      const columns = listType === 'source' ? sourceColumns : targetColumns;\n      return (\n        <Table\n          style={{\n            pointerEvents: listDisabled ? 'none' : null,\n            borderRadius: 0,\n          }}\n          pagination={false}\n          data={filteredItems}\n          columns={columns}\n          rowSelection={{\n            checkCrossPage: true,\n            selectedRowKeys: listSelectedKeys,\n            checkboxProps: (item) => {\n              return {\n                disabled: listDisabled || item.disabled,\n                // Avoid triggering onRow.onClick\n                onClick: (e) => e.stopPropagation(),\n              };\n            },\n\n            onChange(selectedRowKeys) {\n              onItemSelectAll(selectedRowKeys, true);\n            },\n          }}\n          onRow={({ key, disabled: itemDisabled }) => ({\n            onClick: (e) => {\n              !itemDisabled && !listDisabled && onItemSelect(key, !listSelectedKeys.includes(key));\n            },\n          })}\n        />\n      );\n    }}\n  </Transfer>\n);\n\nconst dataSource = [\n  {\n    key: '0',\n    company: 'Bytedance Technology Co., Ltd.',\n    headcount: 3000000,\n    industry: 'Technology',\n  },\n  {\n    key: '1',\n    company: 'Toutiao Co., Ltd.',\n    headcount: 40000,\n    industry: 'AI',\n  },\n  {\n    key: '2',\n    company: 'Beijing Toutiao Technology Co., Ltd.',\n    headcount: 500000,\n    industry: 'Technology',\n  },\n  {\n    key: '3',\n    company: 'Beijing Volcengine Technology...',\n    headcount: 6000000,\n    industry: 'Technology',\n  },\n];\nconst tableColumns = [\n  {\n    dataIndex: 'company',\n    title: 'Company',\n  },\n  {\n    dataIndex: 'headcount',\n    title: 'Headcount',\n    sorter: (a, b) => a.headcount - b.headcount,\n    render: (_, item) => `${item.headcount}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n  },\n  {\n    dataIndex: 'industry',\n    title: 'Industry',\n    sorter: (a, b) => (a.industry.toUpperCase() > b.industry.toUpperCase() ? 1 : -1),\n  },\n];\n\nfunction App() {\n  const [targetKeys, setTargetKeys] = useState([]);\n  return (\n    <TableTransfer\n      className=\"transfer-demo-with-table\"\n      listStyle={{\n        width: 540,\n        height: 240,\n      }}\n      dataSource={dataSource}\n      targetKeys={targetKeys}\n      sourceColumns={tableColumns}\n      targetColumns={tableColumns}\n      onChange={(keys) => setTargetKeys(keys)}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Modal with Context via useModal Hook in JavaScript\nDESCRIPTION: Example demonstrating how to use Modal.useModal hook to create modal dialogs that have access to React Context. This approach is necessary when modals need to access context values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [modal, contextHolder] = Modal.useModal();\n\n<Context.Provider>\n   {contextHolder}\n   <Button onClick={() => modal.warning({ title:'Title', content:'content' })}>Open</Button>\n</Context.Provider>\n```\n\n----------------------------------------\n\nTITLE: Tree Transfer Component with Arco Design and React\nDESCRIPTION: This code defines a TreeTransfer component that utilizes the Arco Design Transfer and Tree components. It includes functions for generating tree data, transfer data, and manages the state of the transfer using React hooks. The Tree component is used for the source list, allowing users to select nodes for transfer.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/with-tree.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Transfer, Tree } from '@arco-design/web-react';\n\nconst TreeTransfer = ({ dataSource, targetKeys, ...restProps }) => {\n  const generateTreeData = (treeNodes = [], checkedKeys = []) => {\n    return treeNodes.map(({ children, ...props }) => ({\n      ...props,\n      disabled: checkedKeys.includes(props.key),\n      children: generateTreeData(children, checkedKeys),\n    }));\n  };\n\n  const generateTransferData = (list = [], transferDataSource = []) => {\n    list.forEach((item) => {\n      transferDataSource.push(item);\n      generateTransferData(item.children, transferDataSource);\n    });\n    return transferDataSource;\n  };\n\n  const transferDataSource = generateTransferData(dataSource);\n  const treeData = generateTreeData(dataSource, targetKeys);\n  return (\n    <Transfer\n      targetKeys={targetKeys}\n      dataSource={transferDataSource}\n      render={(item) => item.title}\n      {...restProps}\n    >\n      {({ listType, onItemSelect, selectedKeys }) => {\n        if (listType === 'source') {\n          const checkedKeys = [...selectedKeys, ...targetKeys];\n          return (\n            <Tree\n              style={{\n                padding: '0 14px',\n              }}\n              blockNode\n              checkable\n              checkStrictly\n              treeData={treeData}\n              checkedKeys={checkedKeys}\n              onCheck={(_, { node: { key } }) => {\n                onItemSelect(key, checkedKeys.indexOf(key) === -1);\n              }}\n              onSelect={(_, { node: { key } }) => {\n                onItemSelect(key, checkedKeys.indexOf(key) === -1);\n              }}\n            />\n          );\n        }\n      }}\n    </Transfer>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Form Instance with Arco Design - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a form instance using `Form.useForm` from the Arco Design library in a functional React component. It shows how to set initial values, handle value changes, and implement validation and submission functionality for the form.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/methods.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form\n      form={form}\n      style={{ width: 600 }}\n      initialValues={{ name: 'admin' }}\n      autoComplete=\"off\"\n      onValuesChange={(v, vs) => {\n        console.log(v, vs);\n      }}\n      onSubmit={(v) => {\n        console.log(v);\n      }}\n    >\n      <FormItem label=\"Username\" field=\"name\" rules={[{ required: true }]}>  \n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[{ required: true, type: 'number', min: 0, max: 99 }]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 24 }}>\n          Submit\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n        <Button\n          type=\"text\"\n          onClick={() => {\n            form.setFieldsValue({\n              name: 'admin',\n              age: 11,\n            });\n          }}\n        >\n          Fill Form\n        </Button>\n\n\n        <Button\n          type=\"text\"\n          onClick={() => {\n            // 仅校验值，不会有 UI 表现\n            form.validate({validateOnly: true}).then(() => {\n              console.log('pass');\n            }).catch(e => {\n              \n              console.log(e.errors)\n            });\n\n          }}\n        >\n          validateOnly\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting and Filtering in Table using Arco Design - JavaScript\nDESCRIPTION: This snippet configures the columns of a table with sorting and filtering options. Each column can be customized with a sorter function and associated filters. The snippet also includes default filter settings and onFilter method implementations for dynamic filtering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/sorter.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.length - b.name.length,\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    sorter: (a, b) => a.salary - b.salary,\n    filters: [\n      {\n        text: '> 20000',\n        value: '20000',\n      },\n      {\n        text: '> 30000',\n        value: '30000',\n      },\n    ],\n    defaultFilters: ['20000'],\n    onFilter: (value, row) => row.salary > value,\n    sortDirections: ['ascend'],\n    defaultSortOrder: 'ascend',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    filters: [\n      {\n        text: 'London',\n        value: 'London',\n      },\n      {\n        text: 'Paris',\n        value: 'Paris',\n      },\n    ],\n    onFilter: (value, row) => row.address.indexOf(value) > -1,\n    filterMultiple: false,\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    sorter: (a, b) => a.email.length - b.email.length,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, Paris',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, Paris',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nconst App = () => {\n  return <Table columns={columns} data={data} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Upload with XMLHttpRequest in React\nDESCRIPTION: Example of implementing a custom file upload handler using XMLHttpRequest. The implementation includes progress tracking, error handling, and success callbacks. It uses FormData to send the file and returns an abort controller for canceling uploads.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/customRequest.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Upload } from '@arco-design/web-react';\n\nfunction App() {\n  const [fileList, setFileList] = useState([]);\n  return (\n    <Upload\n      fileList={fileList}\n      onChange={setFileList}\n      customRequest={(option) => {\n        const { onProgress, onError, onSuccess, file } = option;\n        const xhr = new XMLHttpRequest();\n\n        if (xhr.upload) {\n          xhr.upload.onprogress = function (event) {\n            let percent;\n\n            if (event.total > 0) {\n              percent = (event.loaded / event.total) * 100;\n            }\n\n            onProgress(parseInt(percent, 10), event);\n          };\n        }\n\n        xhr.onerror = function error(e) {\n          onError(e);\n        };\n\n        xhr.onload = function onload() {\n          if (xhr.status < 200 || xhr.status >= 300) {\n            return onError(xhr.responseText);\n          }\n\n          onSuccess(xhr.responseText, xhr);\n        };\n\n        const formData = new FormData();\n        formData.append(name || 'file', file);\n        xhr.open('post', '//upload-z2.qbox.me/', true);\n        xhr.send(formData);\n        return {\n          abort() {\n            xhr.abort();\n          },\n        };\n      }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Step Bar with React and Arco Design\nDESCRIPTION: This code snippet defines a functional component that implements a vertical step navigation system using React Hooks. The component manages the current step state and provides buttons to navigate between steps, rendering specific content for each step. It uses the Steps component from the Arco Design library to display the steps vertically, complete with a divider and customizable styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/vertical.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { Steps, Button, Divider } from '@arco-design/web-react';\nimport { IconLeft, IconRight } from '@arco-design/web-react/icon';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [current, setCurrent] = useState(1);\n\n  function renderContent(step) {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: 272,\n          textAlign: 'center',\n          background: 'var(--color-bg-2)',\n          color: '#C2C7CC',\n        }}\n      >\n        <div style={{ lineHeight: '200px' }}>Step{step} Content</div>\n\n        <div>\n          <Button\n            type=\"secondary\"\n            disabled={current <= 1}\n            onClick={() => setCurrent(current - 1)}\n            style={{ paddingLeft: 8 }}\n          >\n            <IconLeft />\n            Back\n          </Button>\n          <Button\n            disabled={current >= 3}\n            onClick={() => setCurrent(current + 1)}\n            style={{ marginLeft: 20, paddingRight: 8 }}\n            type=\"primary\"\n          >\n            Next\n            <IconRight />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        maxWidth: 780,\n        padding: 40,\n        background: 'var(--color-fill-2)',\n      }}\n    >\n      <div\n        style={{\n          background: 'var(--color-bg-2)',\n          padding: 24,\n          height: 272,\n          boxSizing: 'border-box',\n        }}\n      >\n        <Steps direction=\"vertical\" current={current} style={{ width: 170 }}>\n          <Step title=\"Succeeded\" description=\"This is a description\" />\n          <Step title=\"Processing\" description=\"This is a description\" />\n          <Step title=\"Pending\" description=\"This is a description\" />\n        </Steps>\n      </div>\n      <Divider type=\"vertical\" style={{ display: \"block\", height: \"auto\" }} />\n      {renderContent(current)}\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Grouped Columns using Arco Design Table in JavaScript\nDESCRIPTION: This snippet utilizes the Arco Design Table component to define a table with nested columns, demonstrating how child columns can be organized under parent columns. Dependencies include the '@arco-design/web-react' package. Key parameters within this snippet are `columns` and `data`, which hold the table structure and the data to be displayed, respectively. The component expects structured data input matching the defined columns and returns a rendered table within the React app.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/group-columns.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    fixed: 'left',\n    width: 140,\n  },\n  {\n    title: 'User Info',\n    children: [\n      {\n        title: 'Birthday',\n        dataIndex: 'birthday',\n      },\n      {\n        title: 'Address',\n        children: [\n          {\n            title: 'City',\n            dataIndex: 'city',\n          },\n          {\n            title: 'Road',\n            dataIndex: 'road',\n          },\n          {\n            title: 'No.',\n            dataIndex: 'no',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Information',\n    children: [\n      {\n        title: 'Email',\n        dataIndex: 'email',\n      },\n      {\n        title: 'Phone',\n        dataIndex: 'phone',\n      },\n    ],\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    fixed: 'right',\n    width: 120,\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    fixed: 'right',\n    width: 110,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    birthday: '1994-04-21',\n    city: 'London',\n    road: 'Park',\n    no: '34',\n    phone: '12345678',\n    email: 'jane.doe@example.com',\n    gender: 'female',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    birthday: '1994-05-21',\n    city: 'London',\n    road: 'Park',\n    no: '37',\n    phone: '12345678',\n    email: 'alisa.ross@example.com',\n    gender: 'female',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    birthday: '1992-02-11',\n    city: 'Paris',\n    road: 'Arco',\n    no: '67',\n    phone: '12345678',\n    email: 'kevin.sandra@example.com',\n    gender: 'male',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    birthday: '1991-06-21',\n    city: 'London',\n    road: 'Park',\n    no: '317',\n    phone: '12345678',\n    email: 'ed.hellen@example.com',\n    gender: 'female',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    birthday: '1996-08-21',\n    city: 'Paris',\n    road: 'Park',\n    no: '114',\n    phone: '12345678',\n    email: 'william.smith@example.com',\n    gender: 'male',\n  },\n];\n\nconst App = () => {\n  return (\n    <Table\n      scroll={{\n        x: 1200,\n      }}\n      border={{\n        wrapper: true,\n        cell: true,\n      }}\n      columns={columns}\n      data={data}\n    />\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Skeleton Loading in Arco Design Cards\nDESCRIPTION: A React component that demonstrates the use of Skeleton loading states within Card components. It includes examples of skeleton loading for images, avatars, titles, and text content with configurable loading states controlled by a Switch component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/with-skeleton.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Card, Switch, Skeleton, Avatar, Link, Typography, Space } from '@arco-design/web-react';\nconst { Meta } = Card;\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  return (\n    <>\n      <Switch\n        style={{ display: 'block', marginBottom: 10 }}\n        checked={!loading}\n        onChange={(checked) => setLoading(!checked)}\n      />\n      <Space align=\"start\" size=\"large\">\n        <Card\n          style={{ width: 384 }}\n          cover={\n            <Skeleton\n              loading={loading}\n              text={{ rows: 0 }}\n              image={{\n                style: {\n                  width: 352,\n                  height: 188,\n                  margin: '16px 16px 0 16px',\n                },\n              }}\n            >\n              <div style={{ height: 204, overflow: 'hidden' }}>\n                <img\n                  style={{ width: '100%', transform: 'translateY(-20px)' }}\n                  alt=\"dessert\"\n                  src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp\"\n                />\n              </div>\n            </Skeleton>\n          }\n        >\n          <Meta\n            avatar={\n              <Skeleton\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  marginTop: 4,\n                }}\n                loading={loading}\n                text={{ rows: 1, width: 64 }}\n                image={{\n                  shape: 'circle',\n                  style: {\n                    width: 24,\n                    height: 24,\n                  },\n                }}\n              >\n                <Space>\n                  <Avatar size={24}>\n                    A\n                  </Avatar>\n                  <Typography.Text>Username</Typography.Text>\n                </Space>\n              </Skeleton>\n            }\n            title={\n              <Skeleton\n                loading={loading}\n                style={{ marginTop: 0 }}\n                text={{\n                  rows: 1,\n                  width: 72,\n                }}\n              >\n                Card title\n              </Skeleton>\n            }\n            description={\n              <Skeleton\n                loading={loading}\n                text={{ rows: 1, width: 150 }}\n              >\n                This is the description\n              </Skeleton>\n            }\n          />\n        </Card>\n        <Card\n          style={{ width: 384 }}\n          title={\n            <Skeleton\n              loading={loading}\n              text={{ rows: 1, width: 72 }}\n            >\n              Arco Card\n            </Skeleton>\n          }\n          extra={\n            <Skeleton\n              loading={loading}\n              text={{\n                rows: 1,\n                width: '100%',\n                style: {\n                  width: 30,\n                  float: 'right',\n                },\n              }}\n            >\n              <Link>More</Link>\n            </Skeleton>\n          }\n        >\n          <Skeleton\n            loading={loading}\n            text={{ rows: 2, width: ['100%', '80%'] }}\n          >\n            ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n            the world.\n          </Skeleton>\n\n          <Meta\n            avatar={\n              <Skeleton\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  marginTop: 4,\n                }}\n                loading={loading}\n                text={{ rows: 1, width: 64 }}\n                image={{\n                  shape: 'circle',\n                  style: {\n                    width: 24,\n                    height: 24,\n                  },\n                }}\n              >\n                <Space>\n                  <Avatar\n                    size={24}\n                  >\n                    A\n                  </Avatar>\n                  <Typography.Text>Username</Typography.Text>\n                </Space>\n              </Skeleton>\n            }\n          />\n        </Card>\n      </Space>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dropdown Button Component Example\nDESCRIPTION: This React component demonstrates how to use the `<Dropdown.Button>` component from Arco Design. It shows different button types (secondary, primary), disabled states, adding icons, and customizing the rendering of the buttons with a tooltip and a loading indicator on the dropdown icon. The component utilizes `Dropdown`, `Menu`, `Tooltip`, `Space`, and `IconDown` from the `@arco-design/web-react` library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/dropdown-button.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Dropdown, Menu, Tooltip, Space } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\n\nconst dropList = (\n  <Menu>\n    <Menu.Item key=\"1\">Save now</Menu.Item>\n    <Menu.Item key=\"2\">Save and Publish</Menu.Item>\n  </Menu>\n);\n\nconst App = () => {\n  return (\n    <Space size=\"large\" className=\"dropdown-demo\">\n      <Dropdown.Button type=\"secondary\" droplist={dropList}>\n        Publish\n      </Dropdown.Button>\n      <Dropdown.Button type=\"secondary\" droplist={dropList} disabled>\n        Disabled\n      </Dropdown.Button>\n      <Dropdown.Button type=\"primary\" droplist={dropList} icon={<IconDown />}>\n        Publish\n      </Dropdown.Button>\n      <Dropdown.Button\n        type=\"primary\"\n        droplist={dropList}\n        buttonsRender={([leftButton, rightButton]) => [\n          <Tooltip content=\"Tooltip\">{leftButton}</Tooltip>,\n          React.cloneElement(rightButton, {\n            loading: true,\n          }),\n        ]}\n      >\n        With Tooltip\n      </Dropdown.Button>\n    </Space>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Arco Design Components with ConfigProvider in React\nDESCRIPTION: Shows how to use ConfigProvider to set default configurations for multiple Arco Design components. The example includes configuration for buttons, date pickers, input numbers, radio groups, tables, and tags, demonstrating how to apply consistent styling and behavior across components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/component-config.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport {\n  ConfigProvider,\n  Button,\n  DatePicker,\n  Space,\n  InputNumber,\n  Radio,\n  Table,\n  Tag,\n} from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\n\nfunction App() {\n  const componentConfig = {\n    Button: {\n      type: 'primary',\n      shape: 'round',\n    },\n    DatePicker: {\n      dayStartOfWeek: 2,\n      utcOffset: 0,\n    },\n    InputNumber: {\n      mode: 'button',\n    },\n    'Radio.Group': {\n      type: 'button',\n    },\n    Space: {\n      size: 'large',\n    },\n    Table: {\n      border: false,\n      noDataElement: 'Oops, no data ~',\n    },\n    Tag: {\n      color: 'arcoblue',\n      size: 'large',\n    },\n  };\n  return (\n    <ConfigProvider componentConfig={componentConfig}>\n      <Space direction=\"vertical\">\n        <Space>\n          <Button>Button 1</Button>\n          <Button status=\"success\">Button 2</Button>\n          <Button type=\"secondary\">Button 2</Button>\n        </Space>\n        <Space>\n          <Radio.Group options={['JavaScript', 'CSS', 'React', 'Vue']} defaultValue=\"JavaScript\" />\n          <Radio.Group options={['Light', 'Dark']} defaultValue=\"Light\" />\n        </Space>\n        <Space>\n          <DatePicker showTime />\n          <DatePicker.RangePicker />\n        </Space>\n        <Space>\n          <InputNumber defaultValue={2} />\n          <InputNumber defaultValue={3} />\n        </Space>\n        <Space>\n          <Tag>ArcoDesign</Tag>\n          <Tag>Design System</Tag>\n          <Tag>Component</Tag>\n          <Tag>Design Lab</Tag>\n        </Space>\n        <Table columns={columns} data={[]} />\n      </Space>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Form in Drawer using Arco Design and React\nDESCRIPTION: This snippet creates a React component that displays a button to open a drawer containing a form. The form includes various input fields such as text input, URL input, select dropdown, date picker, and text area. It demonstrates form validation and loading state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/drawer_form.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Button, Form, Input, Select, DatePicker } from '@arco-design/web-react';\nconst formItemLayout = {\n  wrapperCol: {\n    span: 24,\n  },\n};\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [form] = Form.useForm();\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={314}\n        title={<span>Basic Information </span>}\n        visible={visible}\n        confirmLoading={confirmLoading}\n        onOk={() => {\n          form.validate().then((res) => {\n            setConfirmLoading(true);\n            setTimeout(() => {\n              setVisible(false);\n              setConfirmLoading(false);\n            }, 1500);\n          });\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <Form {...formItemLayout} form={form} layout=\"vertical\">\n          <Form.Item label=\"Name\" field=\"name\" rules={[{ required: true }]}>\n            <Input placeholder=\"Plear enter\" />\n          </Form.Item>\n          <Form.Item label=\"URL\" required field=\"url\" rules={[{ required: true }]}>\n            <Input placeholder=\"Plear enter\" prefix=\"http://\" suffix=\".com\" />\n          </Form.Item>\n          <Form.Item label=\"Hometown\" field=\"hometown\" rules={[{ required: true }]}>\n            <Select placeholder=\"Plear select\" options={['Beijing', 'Shanghai']} />\n          </Form.Item>\n          <Form.Item label=\"Date of Birth\" field=\"birthday\" rules={[{ required: true }]}>\n            <DatePicker placeholder=\"Plear select\" />\n          </Form.Item>\n          <Form.Item\n            label=\"Self Introduction\"\n            required\n            field=\"introduction\"\n            rules={[{ required: true }]}\n          >\n            <Input.TextArea placeholder=\"Plear enter\" />\n          </Form.Item>\n        </Form>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization with ConfigProvider in React\nDESCRIPTION: This code snippet demonstrates how to use the ConfigProvider component from Arco Design to set the language for the entire application. It imports the English language pack and wraps the main app component with ConfigProvider.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/i18n.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ConfigProvider } from '@arco-design/web-react';\nimport enUS from '@arco-design/web-react/es/locale/en-US';\n\nReactDOM.render(\n  <ConfigProvider locale={enUS}>\n    <YourApp />\n  </ConfigProvider>,\n  CONTAINER\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Search-based AutoComplete Component with Dynamic Results\nDESCRIPTION: This snippet demonstrates how to create an autocomplete component that generates search results based on user input. It uses React's useState hook to manage data state, creates a search handler function that generates mock results, and renders the AutoComplete component with Input.Search as its trigger element.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/without-group.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete, Input } from '@arco-design/web-react';\nconst { Option } = AutoComplete;\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    if (inputValue) {\n      setData(\n        new Array(3).fill(null).map((_, index) => {\n          const value = `${inputValue}-${index + 1}`;\n          return (\n            <Option key={index} value={value}>\n              <span>{value}</span>\n              <span\n                style={{\n                  float: 'right',\n                }}\n              >{`${~~(Math.random() * 1000)} results`}</span>\n            </Option>\n          );\n        })\n      );\n    } else {\n      setData([]);\n    }\n  };\n\n  return (\n    <div>\n      <AutoComplete\n        style={{ width: 320 }}\n        data={data}\n        placeholder=\"Please Enter\"\n        triggerElement={<Input.Search />}\n        onSearch={handleSearch}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable and Collapsible Sidebar with Arco Design\nDESCRIPTION: This React component creates a sidebar that can be both resized by dragging and collapsed by clicking. It uses useState hooks to manage the sidebar's collapsed state and width, with the resizeBoxProps.onMoving method handling the resize behavior. The sidebar contains a menu with various items and a submenu.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/resizeProps.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Layout, Menu } from '@arco-design/web-react';\nimport { IconHome, IconCalendar } from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\nconst Sider = Layout.Sider;\nconst Content = Layout.Content;\nconst collapsedWidth = 60;\nconst normalWidth = 220;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [siderWidth, setSiderWidth] = useState(normalWidth);\n\n  const onCollapse = (collapsed) => {\n    setCollapsed(collapsed);\n    setSiderWidth(collapsed ? collapsedWidth : normalWidth);\n  };\n\n  const handleMoving = (_, { width }) => {\n    if (width > collapsedWidth) {\n      setSiderWidth(width);\n      setCollapsed(!(width > collapsedWidth + 20));\n    } else {\n      setSiderWidth(collapsedWidth);\n      setCollapsed(true);\n    }\n  };\n\n  return (\n    <Layout className=\"byte-layout-collapse-demo\">\n      <Sider\n        collapsible\n        theme=\"dark\"\n        onCollapse={onCollapse}\n        collapsed={collapsed}\n        width={siderWidth}\n        resizeBoxProps={{\n          directions: ['right'],\n          onMoving: handleMoving,\n        }}\n      >\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" autoOpen style={{ width: '100%' }}>\n          <MenuItem key=\"1\" disabled>\n            <IconHome />\n            设计指南\n          </MenuItem>\n          <MenuItem key=\"2\">\n            <IconCalendar />\n            区块\n          </MenuItem>\n          <MenuItem key=\"3\">\n            <IconCalendar />\n            模块\n          </MenuItem>\n          <SubMenu\n            key=\"layout\"\n            title={\n              <span>\n                <IconCalendar /> 布局组件\n              </span>\n            }\n          >\n            <MenuItem key=\"11\">栅格</MenuItem>\n            <MenuItem key=\"12\">分隔符</MenuItem>\n            <MenuItem key=\"13\">布局</MenuItem>\n          </SubMenu>\n        </Menu>\n      </Sider>\n      <Content style={{ background: 'rgb(240,255,255)', textAlign: 'center', padding: '30px' }}>\n        <div style={{ width: '100%', height: '100%' }}>Content</div>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with Arco Design in JavaScript\nDESCRIPTION: This code snippet demonstrates how to integrate form validation using the Arco Design library in a React application. The form is designed to handle validation using warning levels without blocking submission. Dependencies include Arco Design components such as Form, Input, and Button, along with utility components like Message. Key inputs include 'email' and 'age', both with specific validation rules. On submission, the form attempts to validate fields, displaying success or error messages based on the outcome.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/validateLevel.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, Message, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} autoComplete=\"off\" style={{ width: 600 }}>\n      <Form.Item\n        field=\"email\"\n        label=\"Email\"\n        rules={[\n          {\n            type: 'email',\n            validateLevel: 'warning',\n          },\n          {\n            required: true,\n            type: 'string',\n            minLength: 6,\n          },\n        ]}\n      >\n        <Input placeholder=\"input placeholder\" />\n      </Form.Item>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[\n          {\n            required: true,\n            type: 'number',\n            min: 0,\n            max: 99,\n          },\n        ]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button\n          type=\"primary\"\n          onClick={async () => {\n            try {\n              await form.validate();\n              Message.success('校验通过');\n            } catch (e) {\n              Message.error('校验失败');\n            }\n          }}\n          style={{ marginRight: 24 }}\n        >\n          Validate Form\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={async () => {\n            try {\n              await form.validate(['email']);\n              Message.success('Email 校验通过');\n            } catch (e) {\n              Message.error('Email 校验失败');\n            }\n          }}\n          style={{ marginRight: 24 }}\n        >\n          Validate Email\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop Upload with File Type Validation in React\nDESCRIPTION: Demonstrates how to create a drag and drop upload component with file type validation. The code includes a utility function isAcceptFile that checks if uploaded files match specified accept patterns (file extensions or MIME types), and a React component using Arco Design's Upload component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/drag.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Message } from '@arco-design/web-react';\n\nconst isAcceptFile = (file, accept) => {\n  if (accept && file) {\n    const accepts = Array.isArray(accept)\n      ? accept\n      : accept\n          .split(',')\n          .map((x) => x.trim())\n          .filter((x) => x);\n    const fileExtension = file.name.indexOf('.') > -1 ? file.name.split('.').pop() : '';\n    return accepts.some((type) => {\n      const text = type && type.toLowerCase();\n      const fileType = (file.type || '').toLowerCase();\n      if (text === fileType) {\n        return true;\n      }\n      if (new RegExp('\\/\\*').test(text)) {\n        const regExp = new RegExp('\\/.*$')\n        return fileType.replace(regExp, '') === text.replace(regExp, '');\n      }\n      if (new RegExp('\\..*').test(text)) {\n        return text === `.${fileExtension && fileExtension.toLowerCase()}`;\n      }\n      return false;\n    });\n  }\n  return !!file;\n}\n\nconst App = () => {\n  return (\n    <Upload\n      drag\n      multiple\n      accept=\"image/*\"\n      action=\"/\"\n      onDrop={(e) => {\n        let uploadFile = e.dataTransfer.files[0]\n        if (isAcceptFile(uploadFile, \"image/*\")) {\n          return\n        } else {\n           Message.info('不接受的文件类型，请重新上传指定文件类型~');\n        }\n      }}\n      tip=\"Only pictures can be uploaded\"\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Component with Dynamic Step Switching\nDESCRIPTION: This code snippet showcases the implementation of an Arco Design Steps component with dynamic step switching using React. The `useState` hook is used to manage the `current` step, and buttons are provided to navigate between steps. The `renderContent` function displays content specific to each step.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/change_step.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Steps, Button } from '@arco-design/web-react';\nimport { IconLeft, IconRight } from '@arco-design/web-react/icon';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [current, setCurrent] = useState(1);\n\n  function renderContent(step) {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: 200,\n          textAlign: 'center',\n          background: 'var(--color-bg-2)',\n          color: '#C2C7CC',\n        }}\n      >\n        <div style={{ lineHeight: '160px' }}>Step{step} Content</div>\n\n        <div>\n          <Button\n            type=\"secondary\"\n            disabled={current <= 1}\n            onClick={() => setCurrent(current - 1)}\n            style={{ paddingLeft: 8 }}\n          >\n            <IconLeft />\n            Back\n          </Button>\n          <Button\n            disabled={current >= 3}\n            onClick={() => setCurrent(current + 1)}\n            style={{ marginLeft: 20, paddingRight: 8 }}\n            type=\"primary\"\n          >\n            Next\n            <IconRight />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        maxWidth: 780,\n      }}\n    >\n      <Steps current={current}>\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      {renderContent(current)}\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form Using Arco Design - React\nDESCRIPTION: This code snippet outlines the creation of a basic form interface using Arco Design's web components in React. It includes fields for username and post, as well as a checkbox for user acknowledgment and a submit button. The form is styled with a specified width and uses 'autoComplete' set to 'off'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Input, Button, Checkbox } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nconst App = () => {\n  return (\n    <Form style={{ width: 600 }} autoComplete=\"off\">\n      <FormItem label=\"Username\">\n        <Input placeholder=\"please enter your username...\" />\n      </FormItem>\n      <FormItem label=\"Post\">\n        <Input placeholder=\"please enter your post...\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Checkbox>I have read the manual</Checkbox>\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button type=\"primary\">Submit</Button>\n      </FormItem>\n    </Form>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AutoComplete Filter in React\nDESCRIPTION: Demonstrates implementing a custom filter for AutoComplete component by disabling the default filterOption and dynamically updating options based on user input. Uses useState hook to manage options data and includes a search handler that generates random numbers as options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/custom-search.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete } from '@arco-design/web-react';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    // or fetch options from server\n    setData(inputValue ? new Array(5).fill(null).map(() => Math.random().toFixed(10).slice(2)) : []);\n  };\n\n  return (\n    <AutoComplete\n      placeholder=\"Please Enter\"\n      onSearch={handleSearch}\n      data={data}\n      filterOption={false}\n      style={{ width: 154, marginRight: 20 }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection Render in Arco Design Select Component\nDESCRIPTION: This code snippet demonstrates how to use the renderFormat prop to customize the display of selected options in the Arco Design Select component. It includes examples for both single and multiple selection modes, and shows how to handle cases where the selected option may not be available.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/render-format.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, Space } from '@arco-design/web-react';\nimport { IconStar, IconDelete } from '@arco-design/web-react/icon';\nconst Option = Select.Option;\n\nfunction App() {\n  const data = ['Beijing', 'Guangzhou', 'Shanghai', 'Shenzhen'];\n  return (\n    <Space size=\"large\">\n      <Select\n        placeholder=\"Select city\"\n        style={{ width: 345, }}\n        renderFormat={(option, value) => {\n          return option ? (\n            <span>\n              <IconStar style={{ color: '#f7ba1e', }} />\n              {` ${option.value} `}\n            </span>\n          ) : (\n            value\n          );\n        }}\n      >\n        {data.map((item, index) => (\n          <Option value={item} key={index}>\n            {item}\n          </Option>\n        ))}\n      </Select>\n\n      <Select\n        placeholder=\"Select city\"\n        style={{ width: 345, }}\n        mode=\"multiple\"\n        removeIcon={<IconDelete />}\n        defaultValue={['Beijing', 'Shenzhen']}\n        renderFormat={(option, value) => {\n          // When labelInValue is true, the value is an object\n          return option ? (\n            <span>\n              <IconStar\n                style={{\n                  color: '#f7ba1e',\n                }}\n              />\n              {` ${option.value} City `}\n            </span>\n          ) : (\n            value\n          );\n        }}\n      >\n        {data.map((item, index) => (\n          <Option value={item} key={index}>\n            {item}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Configurable React Drawer\nDESCRIPTION: Implements a Drawer with dynamic visibility for header, footer, and close icon using React state management\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/nofooter.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Button, Checkbox } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [hasHeader, setHeader] = useState(true);\n  const [hasFooter, setFooter] = useState(true);\n  const [hasClose, setClose] = useState(true);\n  return (\n    <div>\n      <Checkbox\n        onChange={(value) => {\n          setHeader(!value);\n        }}\n        style={{ marginRight: 20 }}\n      >\n        Hide title\n      </Checkbox>\n      <Checkbox\n        onChange={(value) => {\n          setFooter(!value);\n        }}\n        style={{ marginRight: 20 }}\n      >\n        Hide footer\n      </Checkbox>\n      <Checkbox\n        onChange={(value) => {\n          setClose(!value);\n        }}\n      >\n        Hide close icon\n      </Checkbox>\n      <br />\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n        style={{ marginTop: 20 }}\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={320}\n        title={hasHeader ? 'Basic Information' : null}\n        footer={hasFooter ? <span>footer</span> : null}\n        closable={hasClose}\n        visible={visible}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <div>Here is an example text.</div>\n\n        <div>Here is an example text.</div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rules Props Interface\nDESCRIPTION: This TypeScript interface defines the structure for validation rules used within the Arco Design Form component. It includes properties for specifying validation triggers, levels, and various validation criteria like required, type, length, and custom validators.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport interface RulesProps {\n  // when to validate\n  validateTrigger?: string | string[];\n  // When the verification fails, the error message will be displayed in the form of `error` or `warning`. Will not block form submission when set to `warning`\n  validateLevel?: 'error' | 'warning';\n  required?: boolean;\n  type?: string;\n  length?: number;\n  // Array\n  maxLength?: number;\n  minLength?: number;\n  includes?: boolean;\n  deepEqual?: any;\n  empty?: boolean;\n  // Number\n  min?: number;\n  max?: number;\n  equal?: number;\n  positive?: boolean;\n  negative?: boolean;\n  // Object\n  hasKeys?: string[];\n  // String\n  match?: RegExp;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  // Boolean\n  true?: boolean;\n  false?: boolean;\n  // custom\n  validator?: (value, callback: (error?: ReactNode) => void) => void;\n  message?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled DatePicker with React and Arco Design\nDESCRIPTION: This snippet demonstrates how to create controlled DatePicker and RangePicker components in a React application. The use of hooks like useState and useEffect allows for managing the state of the selected dates effectively. The parameters include 'value' for the date and 'onChange' for handling date changes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { DatePicker, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState();\n  const [valueRange, setValueRange] = useState();\n  useEffect(() => {\n    setValue(Date.now());\n    setValueRange([Date.now(), Date.now()]);\n  }, []);\n  return (\n    <Space>\n      <DatePicker\n        showTime\n        value={value}\n        onChange={(v) => setValue(v)}\n        style={{ width: 200 }}\n      />\n      <DatePicker.RangePicker\n        showTime\n        value={valueRange}\n        onChange={(v) => setValueRange(v)}\n        style={{ width: 380 }}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Modal Form Component\nDESCRIPTION: The ModalForm component presents a modal dialog containing a form for adding new data, specifically an email input field, and action buttons for submission and cancellation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-provider.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ModalForm(props) {\\\n  return (\\\n    <div>\\\n      <Modal visible title=\"Add\" footer={null} onCancel={props.onCancel}>\\\n        <Form id=\"modalForm\" autoComplete=\"off\">\\\n          <Form.Item field=\"email\" label=\"Email\">\\\n            <Input />\\\n          </Form.Item>\\\n          <Form.Item wrapperCol={{ offset: 5 }} label=\"\">\\\n            <Space>\\\n              <Button onClick={props.onCancel}>Cancel</Button>\\\n              <Button htmlType=\"submit\" type=\"primary\">\\\n                Submit\\\n              </Button>\\\n            </Space>\\\n          </Form.Item>\\\n        </Form>\\\n      </Modal>\\\n    </div>\\\n  );\\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Modal with Arco Design in JavaScript\nDESCRIPTION: This React component uses the Arco Design framework to render a modal dialog with draggable capabilities. It leverages the `modalRender` property and the third-party `react-draggable` library to achieve the drag-and-drop functionality. The component toggles the modal visibility and enables/disables dragging based on mouse interaction. React, `@arco-design/web-react`, and `react-draggable` are essential dependencies for this snippet.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/modal_render.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@arco-design/web-react';\nimport Draggable from 'react-draggable';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [disabled, setDisabled] = React.useState(true);\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Open Draggable Modal\n      </Button>\n      <Modal\n        style={{ cursor: 'move' }}\n        title=\"Modal Title\"\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        autoFocus={false}\n        onMouseOver={() => {\n          disabled && setDisabled(false);\n        }}\n        onMouseOut={() => {\n          !disabled && setDisabled(true);\n        }}\n        modalRender={(modal) => <Draggable disabled={disabled}>{modal}</Draggable>}\n      >\n        <p>\n          You can customize modal body text by the current situation. This modal will be closed\n          immediately once you press the OK button.\n        </p>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Alignment Methods in React using Arco Design\nDESCRIPTION: This code snippet defines a React component that allows users to select different alignment options (start, center, end, baseline) for a set of UI elements using Radio buttons. The state 'align' is used to manage the selected alignment option, and the 'Space' component utilizes the selected alignment to arrange child components visually. All necessary Arco Design components are imported at the beginning.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Space/__demo__/align.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Space, Button, Radio, Typography, Card } from '@arco-design/web-react';\n\nfunction App() {\n  const [align, setAlign] = useState('center');\n  return (\n    <div>\n      <div style={{ marginBottom: 20, }} >\n        <Radio.Group\n          options={['start', 'center', 'end', 'baseline']}\n          value={align}\n          onChange={(value) => setAlign(value)}\n          type=\"button\"\n        />\n      </div>\n      <Space\n        align={align}\n        style={{ backgroundColor: 'var(--color-fill-2)', padding: 10, }}\n      >\n        <Typography.Text>Space:</Typography.Text>\n        <Button type=\"primary\">Item2</Button>\n        <Card title=\"Card\">Card content</Card>\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Nested Object Values in React\nDESCRIPTION: This JavaScript snippet uses React and @arco-design/web-react to create a form where input fields map to a nested object structure using 'field' attributes. It requires @arco-design/web-react and React. The form handles user input changes, updating and logging the form values. Inputs include username, post, and volunteers, and the output is nested JSON displaying these fields.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/nest.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Form, Input, Button, Modal } from '@arco-design/web-react';\n\nfunction App() {\n  const [values, setValues] = React.useState();\n  return (\n    <div>\n      <Form\n        style={{ maxWidth: 650 }}\n        labelCol={{ span: 6 }}\n        wrapperCol={{ span: 18 }}\n        autoComplete=\"off\"\n        onValuesChange={(_, values) => {\n          console.log(values);\n          setValues(values);\n        }}\n      >\n        <Form.Item label=\"Username\" field=\"user.username\" rules={[{ required: true }]}>          \n          <Input placeholder=\"please enter your username\" />\n        </Form.Item>\n        <Form.Item label=\"Post\" field=\"user.post\" rules={[{ required: true }]}>\n          <Input placeholder=\"please enter your post\" />\n        </Form.Item>\n\n        <Form.Item label=\"Volunteers\">\n          <Form.Item label=\"Volunteer1\" field=\"user.volunteers[0]\" rules={[{ required: true }]}>            \n            <Input placeholder=\"please enter your post\" />\n          </Form.Item>\n\n          <Form.Item label=\"Volunteer2\" field=\"user.volunteers[1]\" rules={[{ required: true }]}>            \n            <Input placeholder=\"please enter your post\" />\n          </Form.Item>\n        </Form.Item>\n      </Form>\n      <div style={{ color: 'var(--color-text-2)' }}>\n        <p>Form data:</p>\n        <pre>{JSON.stringify(values, null, 2)}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: App Component: Drag and Drop Table\nDESCRIPTION: This component implements a sortable table using Arco Design and `react-sortable-hoc`. It initializes state with sample data, defines sorting logic, and configures the table's components to enable drag and drop row reordering. The `onSortEnd` function updates the table data when a row is dragged to a new position.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Table } from '@arco-design/web-react';\nimport { IconDragDotVertical } from '@arco-design/web-react/icon';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\n\nconst arrayMoveMutate = (array, from, to) => {\n  const startIndex = to < 0 ? array.length + to : to;\n\n  if (startIndex >= 0 && startIndex < array.length) {\n    const item = array.splice(from, 1)[0];\n    array.splice(startIndex, 0, item);\n  }\n};\n\nconst arrayMove = (array, from, to) => {\n  array = [...array];\n  arrayMoveMutate(array, from, to);\n  return array;\n};\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst initialData = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\nconst DragHandle = SortableHandle(() => (\n  <IconDragDotVertical\n    style={{\n      cursor: 'move',\n      color: '#555',\n    }}\n  />\n));\nconst SortableWrapper = SortableContainer((props) => {\n  return <tbody {...props} />;\n});\nconst SortableItem = SortableElement((props) => {\n  return <tr {...props} />;\n});\n\nfunction App() {\n  const [data, setData] = useState(initialData);\n\n  function onSortEnd({ oldIndex, newIndex }) {\n    if (oldIndex !== newIndex) {\n      const newData = arrayMove([].concat(data), oldIndex, newIndex).filter((el) => !!el);\n      console.log('New Data: ', newData);\n      setData(newData);\n    }\n  }\n\n  const DraggableContainer = (props) => (\n    <SortableWrapper\n      useDragHandle\n      onSortEnd={onSortEnd}\n      helperContainer={() => document.querySelector('.arco-drag-table-container-2 table tbody')}\n      updateBeforeSortStart={({ node }) => {\n        const tds = node.querySelectorAll('td');\n        tds.forEach((td) => {\n          td.style.width = td.clientWidth + 'px';\n        });\n      }}\n      {...props}\n    />\n  );\n\n  const DraggableRow = (props) => {\n    const { record, index, ...rest } = props;\n    return <SortableItem index={index} {...rest} />;\n  };\n\n  const components = {\n    header: {\n      operations: ({ selectionNode, expandNode }) => [\n        {\n          node: <th />,\n          width: 40,\n        },\n        {\n          name: 'expandNode',\n          node: expandNode,\n        },\n        {\n          name: 'selectionNode',\n          node: selectionNode,\n        },\n      ],\n    },\n    body: {\n      operations: ({ selectionNode, expandNode }) => [\n        {\n          node: (\n            <td>\n              <div className=\"arco-table-cell\">\n                <DragHandle />\n              </div>\n            </td>\n          ),\n          width: 40,\n        },\n        {\n          name: 'expandNode',\n          node: expandNode,\n        },\n        {\n          name: 'selectionNode',\n          node: selectionNode,\n        },\n      ],\n      tbody: DraggableContainer,\n      row: DraggableRow,\n    },\n  };\n  return (\n    <Table\n      className=\"arco-drag-table-container-2\"\n      components={components}\n      columns={columns}\n      data={data}\n      rowSelection={{\n        type: 'checkbox',\n      }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Automatically Switching Arco Design Theme with System Preference\nDESCRIPTION: This code snippet demonstrates how to automatically switch between light and dark themes based on the user's system preference. It uses `window.matchMedia` to listen for changes in the `prefers-color-scheme` media query and updates the `arco-theme` attribute accordingly. The `addEventListener` is used to bind the `change` event to a callback function.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/dark/md/header.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\ndarkThemeMq.addEventListener('change', e => {\n  if (e.matches) {\n    document.body.setAttribute('arco-theme', 'dark');\n  } else {\n    document.body.removeAttribute('arco-theme');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Scrolling in Select Component with React\nDESCRIPTION: This code snippet demonstrates how to create a Select component with 10,000 options using virtual scrolling. It utilizes the @arco-design/web-react library and creates a multiple-select dropdown with the ability to create new options and clear selections.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/virtual-list.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Select, Typography } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = new Array(10000).fill(null).map((value, index) => `Item ${index}`);\n\nconst App = () => {\n  return (\n    <>\n      <Typography.Title heading={6}>10000 items</Typography.Title>\n      <Select\n        mode=\"multiple\"\n        allowCreate\n        placeholder=\"Select a tag\"\n        allowClear\n        style={{ width: 345 }}\n      >\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Layouts with Arco Design Layout Components\nDESCRIPTION: Demonstrates four different layout patterns using Arco Design's Layout component, including header-content-footer structure and various sidebar arrangements. The example creates responsive page layouts with configurable dimensions and positioning.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Layout } from '@arco-design/web-react';\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nconst App = () => {\n  return (\n    <div className=\"layout-basic-demo\">\n      <Layout style={{ height: '400px' }}>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Footer>Footer</Footer>\n      </Layout>\n      <br />\n      <Layout style={{ height: '400px' }}>\n        <Header>Header</Header>\n        <Layout>\n          <Sider>Sider</Sider>\n          <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n      </Layout>\n      <br />\n      <Layout style={{ height: '400px' }}>\n        <Header>Header</Header>\n        <Layout>\n          <Content>Content</Content>\n          <Sider>Sider</Sider>\n        </Layout>\n        <Footer>Footer</Footer>\n      </Layout>\n      <br />\n      <Layout style={{ height: '400px' }}>\n        <Header>Header</Header>\n        <Layout>\n          <Sider style={{ width: '64px' }}>Sider</Sider>\n          <Sider style={{ width: '206px', marginLeft: '1px' }}>Sider</Sider>\n          <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search in Arco Design Cascader\nDESCRIPTION: Example showing how to implement custom search functionality in Cascader components using filterOption. Demonstrates both single and multiple selection modes with a hierarchical location-based data structure. The search logic checks both value and label fields for matches.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/filter_option.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n          {\n            value: 'fengtai',\n            label: 'fengtai',\n          },\n          {\n            value: 'shijingshan',\n            label: 'Shijingshan',\n          },\n          {\n            value: 'mentougou',\n            label: 'Mentougou',\n          },\n          {\n            value: 'fangshan',\n            label: 'Fangshan',\n          },\n          {\n            value: 'tongzhou',\n            label: 'Tongzhou',\n          },\n          {\n            value: 'shunyi',\n            label: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n        filterOption={(input, node) => {\n          return node.value.indexOf(input) > -1 || node.label.indexOf(input) > -1;\n        }}\n        showSearch\n        allowClear\n      />\n      <Cascader\n        mode=\"multiple\"\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        filterOption={(input, node) => {\n          return node.value.indexOf(input) > -1 || node.label.indexOf(input) > -1;\n        }}\n        showSearch\n        allowClear\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Message Animation with transitionClassNames in React\nDESCRIPTION: This JavaScript code demonstrates how to use the transitionClassNames and transitionTimeout properties of the Message component to apply custom animation effects. It creates a button that, when clicked, shows a message with custom enter and exit animations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/transition.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Message, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Button\n      onClick={() => {\n        Message.info({\n          content: 'This is an info message!',\n          transitionClassNames: 'my-animation',\n          transitionTimeout: {\n            enter: 1000,\n            exit: 500,\n          },\n        });\n      }}\n      type=\"primary\"\n    >\n      Open Message\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualized Table with Arco Design in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a virtualized table using the Arco Design library in a React component. It initializes a table with a large dataset, using virtual scrolling to improve performance. The table includes columns for name, salary, address, and email, with specific configurations for each column. A button allows users to scroll to a specified row. Dependencies include React, useRef, and Arco Design's Table and Button components. The table's adaptivity, particularly the avoidance of fixed widths for all columns except one, is essential for correct visual alignment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/virtualized.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useRef } from 'react';\nimport { Table, Button, TableInstance } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 140,\n    fixed: 'left' as const,\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    width: 100,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = Array(100000)\n  .fill('')\n  .map((_, index) => ({\n    key: `${index}`,\n    name: `Kevin ${index}`,\n    salary: 22000,\n    address: `${index} Park Road, London`,\n    email: `kevin.sandra_${index}@example.com`,\n  }));\n\nconst App = () => {\n  const table = useRef<TableInstance>(null);\n  return (\n    <div>\n      <Button\n        type=\"primary\"\n        onClick={() => table.current.scrollIntoView('500')}\n        style={{ marginBottom: 10 }}\n      >\n        滚动到第 500 条\n      </Button>\n      <Table\n        ref={table}\n        virtualized\n        scroll={{\n          y: 500,\n          x: 1000,\n        }}\n        border\n        columns={columns}\n        data={data}\n        pagination={false}\n        rowSelection={{}}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient ColorPicker in React with Arco Design\nDESCRIPTION: This snippet demonstrates how to use the ColorPicker component from Arco Design in a React application. It shows two instances of ColorPicker: one with both single and gradient modes, and another with only gradient mode. The component is initialized with a default gradient value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/mode.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, ColorPicker } from '@arco-design/web-react';\nimport { useState } from 'react';\n\nconst App = () => {\n  const defaultValue = [\n    {\n      color: '#165DFFAA',\n      percent: 0,\n    },\n    {\n      color: '#00B42AFF',\n      percent: 100,\n    },\n  ]\n  return (\n    <div>\n      <ColorPicker defaultValue={defaultValue} mode={['single', 'gradient']} showText />\n       <br />\n      <ColorPicker defaultValue={defaultValue} mode=\"gradient\" showText />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search in Arco Design Select Component with React\nDESCRIPTION: This code demonstrates how to create a Select component with remote search functionality. It uses the useState and useRef hooks for state management, debounce for optimizing API calls, and fetches user data from the randomuser.me API. The component displays user avatars and names in the dropdown options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/async-data.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef, useCallback } from 'react';\nimport { Select, Spin, Avatar } from '@arco-design/web-react';\nimport debounce from 'lodash/debounce';\n\nfunction App() {\n  const [options, setOptions] = useState([]);\n  const [fetching, setFetching] = useState(false);\n  const refFetchId = useRef(null);\n  const debouncedFetchUser = useCallback(\n    debounce((inputValue) => {\n      refFetchId.current = Date.now();\n      const fetchId = refFetchId.current;\n      setFetching(true);\n      setOptions([]);\n      fetch('https://randomuser.me/api/?results=5')\n        .then((response) => response.json())\n        .then((body) => {\n          if (refFetchId.current === fetchId) {\n            const options = body.results.map((user) => ({\n              label: (\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                  <Avatar size={24} style={{ marginLeft: 6, marginRight: 12 }}>\n                    <img alt=\"avatar\" src={user.picture.thumbnail} />\n                  </Avatar>\n                  {`${user.name.first} ${user.name.last}`}\n                </div>\n              ),\n              value: user.email,\n            }));\n            setFetching(false);\n            setOptions(options);\n          }\n        });\n    }, 500),\n    []\n  );\n  return (\n    <Select\n      style={{ width: 345 }}\n      showSearch\n      mode=\"multiple\"\n      options={options}\n      placeholder=\"Search by name\"\n      filterOption={false}\n      renderFormat={(option) => {\n        return option.children.props.children[1];\n      }}\n      notFoundContent={\n        fetching ? (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Spin style={{ margin: 12 }} />\n          </div>\n        ) : null\n      }\n      onSearch={debouncedFetchUser}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Button Types with Arco Design React\nDESCRIPTION: Creates a React component that displays five different button types from the Arco Design library. Uses the Space component to maintain consistent spacing between buttons. Imports necessary components from @arco-design/web-react.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button type=\"primary\">Primary</Button>\n      <Button type=\"secondary\">Secondary</Button>\n      <Button type=\"dashed\">Dashed</Button>\n      <Button type=\"outline\">Outline</Button>\n      <Button type=\"text\">Text</Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Box Component using React and Arco Design\nDESCRIPTION: This snippet implements a search box component utilizing the Input and Space components from the Arco Design web library. It includes three instances of the search input with different configurations, allowing users to enter keywords and retrieve content. The component accepts props such as 'allowClear' and 'searchButton' for enhanced functionality and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/search.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\nconst InputSearch = Input.Search;\n\nconst App = () => {\n  return (\n    <Space wrap>\n      <InputSearch allowClear placeholder=\"Enter keyword to search\" style={{ width: 350 }} />\n      <InputSearch\n        searchButton\n        defaultValue=\"Search content\"\n        placeholder=\"Enter keyword to search\"\n        style={{ width: 350 }}\n      />\n      <InputSearch\n        searchButton=\"Search\"\n        defaultValue=\"Search content\"\n        placeholder=\"Enter keyword to search\"\n        style={{ width: 350 }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Types of Messages with Arco Design\nDESCRIPTION: This code showcases how to use the Message component from Arco Design to display different types of notification messages. It demonstrates all five available types (info, success, warning, error, and normal) through buttons that trigger the corresponding message when clicked.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/type.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Message, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button onClick={() => Message.info('This is an info message!')} type=\"primary\">\n        Info\n      </Button>\n      <Button\n        onClick={() => Message.success('This is a success message!')}\n        type=\"primary\"\n        status=\"success\"\n      >\n        Success\n      </Button>\n      <Button\n        onClick={() => Message.warning('This is a warning message!')}\n        type=\"primary\"\n        status=\"warning\"\n      >\n        Warning\n      </Button>\n      <Button\n        onClick={() => Message.error('This is an error message!')}\n        type=\"primary\"\n        status=\"danger\"\n      >\n        Error\n      </Button>\n      <Button type=\"secondary\" onClick={() => Message.normal('This is a message!')}>\n        Normal\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType for Tag Rendering in TypeScript\nDESCRIPTION: Defines the ObjectValueType used for custom tag rendering in the TreeSelect component, containing value, label, and closable properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Sidebar Layout with Arco Design in React\nDESCRIPTION: This code demonstrates a responsive layout with a collapsible sidebar using Arco Design components. The sidebar can collapse automatically at specific breakpoints or manually through user interaction, with notification messages for each state change. The layout includes a header with horizontal menu, breadcrumb navigation, content area, and footer.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/breakpoint.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Layout, Menu, Breadcrumb, Message } from '@arco-design/web-react';\nimport { IconHome, IconCalendar } from '@arco-design/web-react/icon';\n\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nfunction BaseMenu(props) {\n  return (\n    <Menu defaultOpenKeys={['1']} defaultSelectedKeys={['0_2']} {...props}>\n      <MenuItem key=\"0_1\" disabled>\n        <IconHome />\n        Menu 1\n      </MenuItem>\n      <MenuItem key=\"0_2\">\n        <IconCalendar />\n        Menu 2\n      </MenuItem>\n      <SubMenu\n        key=\"1\"\n        title={\n          <span>\n            <IconCalendar />\n            Navigation 1\n          </span>\n        }\n      >\n        <MenuItem key=\"1_1\">Menu 1</MenuItem>\n        <MenuItem key=\"1_2\">Menu 2</MenuItem>\n        <SubMenu key=\"2\" title=\"Navigation 2\">\n          <MenuItem key=\"2_1\">Menu 1</MenuItem>\n          <MenuItem key=\"2_2\">Menu 2</MenuItem>\n        </SubMenu>\n        <SubMenu key=\"3\" title=\"Navigation 3\">\n          <MenuItem key=\"3_1\">Menu 1</MenuItem>\n          <MenuItem key=\"3_2\">Menu 2</MenuItem>\n          <MenuItem key=\"3_3\">Menu 3</MenuItem>\n        </SubMenu>\n      </SubMenu>\n      <SubMenu\n        key=\"4\"\n        title={\n          <span>\n            <IconCalendar />\n            Navigation 4\n          </span>\n        }\n      >\n        <MenuItem key=\"4_1\">Menu 1</MenuItem>\n        <MenuItem key=\"4_2\">Menu 2</MenuItem>\n        <MenuItem key=\"4_3\">Menu 3</MenuItem>\n      </SubMenu>\n    </Menu>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  onCollapse = (collapsed, type) => {\n    const content = type === 'responsive' ? '触发响应式收缩' : '点击触发收缩';\n    Message.info({\n      content,\n      duration: 2000,\n    });\n    this.setState({\n      collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <Layout className=\"layout-collapse-demo\">\n        <Sider\n          theme=\"dark\"\n          breakpoint=\"lg\"\n          onCollapse={this.onCollapse}\n          collapsed={this.state.collapsed}\n          width={220}\n          collapsible\n        >\n          <div className=\"logo\" />\n          <BaseMenu\n            onClickMenuItem={(key) =>\n              Message.info({\n                content: `You select ${key}`,\n                showIcon: true,\n              })\n            }\n            theme=\"dark\"\n            style={{ width: '100%' }}\n          />\n        </Sider>\n        <Layout>\n          <Header>\n            <BaseMenu mode=\"horizontal\" />\n          </Header>\n          <Layout style={{ padding: '0 24px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>List</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Upload Component in React\nDESCRIPTION: Creates a custom upload component using Arco Design's Upload component with a customized trigger element. The component includes a drag-and-drop area with styled text and handles file change events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload } from '@arco-design/web-react';\nimport { IconLink } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div className=\"upload-demo-trigger\">\n      <Upload\n        action=\"/\"\n        onChange={(fileList, file) => {\n          console.log(fileList, file);\n        }}\n      >\n        <div className=\"trigger\">\n          <div>\n            Drag the file here or\n            <span style={{ color: '#3370FF', padding:\"0 4px\" }} >\n              Click to upload\n            </span>\n          </div>\n        </div>\n      </Upload>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with Dynamic Suggestions in React\nDESCRIPTION: This snippet demonstrates how to create an AutoComplete component that generates suggestions based on user input. It uses React hooks to manage state and updates the suggestion list dynamically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete } from '@arco-design/web-react';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    setData(inputValue ? new Array(5).fill(null).map((_, index) => `${inputValue}_${index}`) : []);\n  };\n\n  return (\n    <AutoComplete\n      placeholder=\"Please Enter\"\n      onSearch={handleSearch}\n      data={data}\n      style={{ width: 154, marginRight: 20 }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Footer in Arco Design with React\nDESCRIPTION: This example demonstrates three different methods for customizing Modal footers: using okButtonProps/cancelButtonProps to customize button properties, creating a completely custom footer with custom buttons and loading states, and removing the footer entirely by setting footer to null.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/footer.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, Space} from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [visible1, setVisible1] = React.useState(false);\n  const [loading1, setLoading1] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  return (\n    <Space size=\"large\">\n      <Button\n        onClick={() => setVisible(true)}\n        type=\"primary\"\n      >\n        Open Modal with customized button props\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible}\n        okButtonProps={{\n          disabled: true,\n        }}\n        cancelButtonProps={{\n          disabled: true,\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n        onOk={() => {\n          setVisible(false);\n        }}\n      >\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n      </Modal>\n\n      <Button\n        onClick={() => {\n          setVisible1(true);\n        }}\n        type=\"primary\"\n      >\n        Open Modal with customized footer\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible1}\n        footer={\n          <>\n            <Button\n              onClick={() => {\n                setVisible1(false);\n              }}\n            >\n              Return\n            </Button>\n            <Button\n              loading={loading1}\n              onClick={() => {\n                setLoading1(true);\n                setTimeout(() => {\n                  setLoading1(false);\n                  setVisible1(false);\n                }, 1500);\n              }}\n              type=\"primary\"\n            >\n              Submit\n            </Button>\n          </>\n        }\n        onCancel={() => {\n          setVisible1(false);\n        }}\n      >\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n      </Modal>\n\n      <Button\n        onClick={() => {\n          setVisible2(true);\n        }}\n        type=\"primary\"\n      >\n        Open Modal without footer\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible2}\n        footer={null}\n        onCancel={() => {\n          setVisible2(false);\n        }}\n      >\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n      </Modal>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search Cascader in React with ArcoDesign\nDESCRIPTION: A React component that implements a Cascader with remote search functionality. Features include dynamic option loading, loading states with spinner, support for both single and multiple selection modes, and configurable search panel display. Uses setTimeout to simulate API calls and includes custom dropdown rendering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/onSearch.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Checkbox, Divider, Spin, Space } from '@arco-design/web-react';\n\nconst genOptions = (keyword) => {\n  return !keyword\n    ? []\n    : [\n        {\n          label: keyword,\n          value: keyword + '-value',\n          children: [\n            {\n              label: `${keyword}-1`,\n              value: `${keyword}-value-1`,\n            },\n            {\n              label: `${keyword}-2`,\n              value: `${keyword}-value-2`,\n            },\n          ],\n        },\n      ];\n};\n\nfunction CascaderDemo(props) {\n  const [options, setOptions] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const handleSearch = (inputValue) => {\n    setLoading(true);\n    setTimeout(() => {\n      setOptions(genOptions(inputValue));\n      setLoading(false);\n    }, 200);\n  };\n\n  return (\n      <Cascader\n        placeholder=\"Please enter ...\"\n        showSearch\n        style={{ width: 300 }}\n        options={options}\n        onSearch={handleSearch}\n        onChange={(_, a) => {\n          console.log(a);\n        }}\n        loading={loading}\n        dropdownRender={(menu) => {\n          return loading ? (\n            <div\n              style={{\n                height: 100,\n                width: 300,\n                textAlign: 'center',\n                lineHeight: '100px',\n              }}\n            >\n              <Spin />\n            </div>\n          ) : (\n            menu\n          );\n        }}\n        {...props}\n      />\n  );\n}\n\nfunction App () {\n  const [showSearchPanel, setShowSearchPanel] = React.useState(false);\n\n  return <div>\n    <div style={{marginBottom: 20}}>\n      <Checkbox checked={showSearchPanel} onChange={setShowSearchPanel}>是否以搜索面板展示可选项</Checkbox>\n    </div>\n    <Space size=\"large\">\n      <CascaderDemo showSearch={{ panelMode: showSearchPanel ? 'select' : 'cascader' }} />\n      <CascaderDemo  showSearch={{ panelMode: showSearchPanel ? 'select' : 'cascader'}} mode=\"multiple\" />\n    </Space>\n  </div>\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Modals with Customizable Titles in React using Arco Design\nDESCRIPTION: This code snippet demonstrates the creation of a React component that uses the Modal component from the Arco Design library. It allows customization of modal titles by passing either text or React nodes, providing flexibility in the title bar design. Buttons are used to trigger modal visibility, and the modals can be dismissed by user actions. The snippet requires the Arco Design library and React as dependencies. Key features include the `visible` state management for modals and text alignment styling for titles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/header.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, Space} from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [visible1, setVisible1] = React.useState(false);\n  return (\n    <Space>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Left align title\n      </Button>\n      <Modal\n        title={\n          <div style={{ textAlign: 'left' }}>\n            Modal Title\n          </div>\n        }\n        visible={visible}\n        onCancel={() => {\n          setVisible(false);\n        }}\n        onOk={() => {\n          setVisible(false);\n        }}\n      >\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n      </Modal>\n\n      <Button\n        onClick={() => setVisible1(true)}\n        type=\"primary\"\n      >\n        Center align title\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible1}\n        onCancel={() => {\n          setVisible1(false);\n        }}\n        onOk={() => {\n          setVisible1(false);\n        }}\n      >\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n        <p>Some content...</p>\n      </Modal>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tree Component with Node Selection and Expansion\nDESCRIPTION: This code demonstrates how to create a hierarchical tree structure using the Tree component from Arco Design. Each TreeNode requires a unique key attribute and displays the content specified in the title prop. The example shows event handling for node selection and expansion, along with disabled nodes and default states for expanded and selected nodes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tree } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\n\nconst App = () => {\n  return (\n    <Tree\n      defaultExpandedKeys={['0-0-0']}\n      defaultSelectedKeys={['0-0-0', '0-0-1']}\n      onSelect={(value, info) => {\n        console.log(value, info);\n      }}\n      onExpand={(keys, info) => {\n        console.log(keys, info);\n      }}\n    >\n      <TreeNode title=\"Trunk\" key=\"0-0\">\n        <TreeNode title=\"Branch 0-0-0\" key=\"0-0-0\" disabled>\n          <TreeNode title=\"Leaf\" key=\"0-0-0-0\" />\n          <TreeNode title=\"Leaf\" key=\"0-0-0-1\" />\n        </TreeNode>\n        <TreeNode title=\"Branch 0-0-1\" key=\"0-0-1\">\n          <TreeNode title=\"Leaf\" key=\"0-0-1-0\" />\n        </TreeNode>\n      </TreeNode>\n    </Tree>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Ellipsis with Arco Design in JavaScript\nDESCRIPTION: The code creates a React application component that imports and uses various components from the Arco Design library to manage text display including ellipses. It sets up a form to control display settings such as expandability and tooltip visibility for when text content exceeds container limits. The main dependencies are React and Arco Design for web-react, and the code supports adjusting display properties via form controls. Input text can be edited, and the display options include expanding single or multiple rows while maintaining a minimum visible row. The component also showcases a resizable typography element using a ResizeBox component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/ellipsis-basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  Typography,\n  Button,\n  Switch,\n  Input,\n  Form,\n  Descriptions,\n  Space, ResizeBox\n} from '@arco-design/web-react';\nimport { useState } from 'react';\n\nconst defaultText = 'A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design. A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design.';\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [config, setConfig] = useState({\n    disabled: false,\n    expandable: true,\n    expandableSingle: false,\n    expanded: false,\n    showTooltip: false\n  });\n  const [text, setText] = useState(defaultText);\n  const [rows, setRows] = useState(1);\n\n  return (\n    <div>\n      <Space align=\"start\" size={120}>\n        <Form\n          form={form}\n          initialValues={config}\n          onValuesChange={(_, values) => setConfig(values)}\n          style={{ width: '400px', }}\n          labelCol={{ span: 6, }}\n          wrapperCol={{ span: 18, }}\n          size=\"small\"\n        >\n          <Form.Item label=\"展开\\u002F折叠\" field=\"expanded\" triggerPropName=\"checked\">\n            <Switch/>\n          </Form.Item>\n          <Form.Item label=\"省略提示\" field=\"showTooltip\" triggerPropName=\"checked\">\n            <Switch/>\n          </Form.Item>\n          <Form.Item label=\"展示操作按钮\" field=\"expandable\" triggerPropName=\"checked\">\n            <Switch/>\n          </Form.Item>\n          <Form.Item label=\"展示操作按钮（单行）\" field=\"expandableSingle\" triggerPropName=\"checked\">\n            <Switch/>\n          </Form.Item>\n          <Form.Item label=\"禁用省略\" field=\"disabled\" triggerPropName=\"checked\">\n            <Switch/>\n          </Form.Item>\n          <Form.Item label=\"省略展示\">\n            <Space size=\"medium\">\n              <Button onClick={() => setRows(Math.max(1, rows - 1))}>row-</Button>\n              <Button onClick={() => setRows(rows + 1)}>row+</Button>\n            </Space>\n          </Form.Item>\n          <Form.Item label=\"文字操作\">\n            <Input.TextArea value={text} onChange={setText}/>\n          </Form.Item>\n        </Form>\n        <Descriptions\n          column={1}\n          title=\"当前配置\"\n          data={[\n            ...Object.entries(config).map(([label, value]) => ({\n              label,\n              value: String(value),\n            })),\n            {\n              label: 'rows',\n              value: rows,\n            },\n          ]}\n          style={{ marginBottom: 20, }}\n          labelStyle={{ paddingRight: 36, }}\n        />\n      </Space>\n\n      <ResizeBox\n        directions={['right']}\n        style={{\n          width: 500,\n          minWidth: 100,\n        }}\n      >\n        <Typography.Ellipsis\n          rows={rows} {...config}\n          expandable={config.expandableSingle ? { single: true } : config.expandable}\n          onExpand={(v) => form.setFieldsValue({\n            expanded: v\n          })}>{text}</Typography.Ellipsis>\n      </ResizeBox>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlled Dropdown Menu with Popup Visibility\nDESCRIPTION: Demonstrates managing dropdown visibility using state and preventing automatic menu closure based on menu item click\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { Dropdown, Menu, Button, Space } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\n\nfunction DemoWithPopupVisible() {\n  const [popupVisible, setPopupVisible] = useState(false);\n  const refMenuItemClicked = useRef(null);\n  const dropList = (\n    <Menu\n      onClickMenuItem={(key) => {\n        refMenuItemClicked.current = key;\n      }}\n    >\n      <Menu.Item key=\"1\">Won't close the menu</Menu.Item>\n      <Menu.Item key=\"2\">Will close the menu</Menu.Item>\n    </Menu>\n  );\n  return (\n    <Dropdown\n      droplist={dropList}\n      trigger=\"click\"\n      position=\"bl\"\n      popupVisible={popupVisible}\n      onVisibleChange={(visible) => {\n        if (refMenuItemClicked.current === null || refMenuItemClicked.current === '2') {\n          setPopupVisible(visible);\n        }\n\n        refMenuItemClicked.current = null;\n      }}\n    >\n      <Button type=\"text\">\n        Click\n        <IconDown />\n      </Button>\n    </Dropdown>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Columns in Arco Design Table with React\nDESCRIPTION: This JavaScript snippet demonstrates creating a table with resizable columns using the '@arco-design/web-react' Table component and the 'react-resizable' package. The columns are initially defined with specific widths, and resizing functionality is added by mapping over the columns and applying the 'onHeaderCell' property. Key functions include 'handleResize', which updates the column widths in response to resize events. Required dependencies are '@arco-design/web-react' and 'react-resizable'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/resizable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState, forwardRef } from 'react';\nimport { Table } from '@arco-design/web-react';\nimport { Resizable } from 'react-resizable';\nconst originColumns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 120,\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    width: 100,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    width: 180,\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\nconst CustomResizeHandle = forwardRef((props, ref) => {\n  const { handleAxis, ...restProps } = props;\n  return (\n    <span\n      ref={ref}\n      className={`react-resizable-handle react-resizable-handle-${handleAxis}`}\n      {...restProps}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n    />\n  );\n});\n\nconst ResizableTitle = (props) => {\n  const { onResize, width, ...restProps } = props;\n\n  if (!width) {\n    return <th {...restProps} />;\n  }\n\n  return (\n    <Resizable\n      width={width}\n      height={0}\n      handle={<CustomResizeHandle />}\n      onResize={onResize}\n      draggableOpts={{\n        enableUserSelectHack: false,\n      }}\n    >\n      <th {...restProps} />\n    </Resizable>\n  );\n};\n\nfunction App() {\n  const [columns, setColumns] = useState(\n    originColumns.map((column, index) => {\n      if (column.width) {\n        return {\n          ...column,\n          onHeaderCell: (col) => ({\n            width: col.width,\n            onResize: handleResize(index),\n          }),\n        };\n      }\n\n      return column;\n    })\n  );\n\n  function handleResize(index) {\n    return (e, { size }) => {\n      setColumns((prevColumns) => {\n        const nextColumns = [...prevColumns];\n        nextColumns[index] = { ...nextColumns[index], width: size.width };\n        return nextColumns;\n      });\n    };\n  }\n\n  const components = {\n    header: {\n      th: ResizableTitle,\n    },\n  };\n  return (\n    <Table\n      className=\"table-demo-resizable-column\"\n      components={components}\n      border\n      borderCell\n      columns={columns}\n      data={data}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Editable Table Cells with CSS\nDESCRIPTION: This CSS code provides styling for the editable table cells. It adds padding to the cells and a hover effect to indicate that a cell is editable.  The hover effect includes a border and adjusted padding to create a visual highlight.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/table-edit.md#2025-04-14_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.table-demo-editable-cell .editable-row .editable-cell {\n  display: inline-block;\n  padding: 5px 11px;\n}\n\n.table-demo-editable-cell .editable-row .editable-cell:hover {\n  border-radius: 4px;\n  border: 1px solid var(--color-border);\n  padding: 4px 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Input Groups in React with Arco Design\nDESCRIPTION: This code snippet sets up a React component that integrates various input types from the Arco Design library, including select boxes, date pickers, and search inputs within grouped layouts. It requires the '@arco-design/web-react' package and demonstrates how to use these components to create a user-friendly input interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/group.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Grid, Select, DatePicker } from '@arco-design/web-react';\nimport { IconMinus } from '@arco-design/web-react/icon';\nconst InputSearch = Input.Search;\n\nconst App = () => {\n  return (\n    <div>\n      <Grid.Row>\n        <div\n          style={{\n            marginRight: 24,\n            width: 360,\n            display: 'inline-block',\n            marginBottom: 24,\n          }}\n        >\n          <Input.Group compact>\n            <Select defaultValue=\"Beijing\" showSearch style={{ width: '25%' }}>\n              <Select.Option value=\"Beijing\">Beijing</Select.Option>\n              <Select.Option value=\"Tianjin\">Tianjin</Select.Option>\n              <Select.Option value=\"Shanghai\">Shanghai</Select.Option>\n            </Select>\n            <Input style={{ width: '75%' }} placeholder=\"Enter an address\" />\n          </Input.Group>\n        </div>\n        <div\n          style={{\n            marginRight: 24,\n            width: 360,\n            display: 'inline-block',\n            marginBottom: 24,\n          }}\n        >\n          <Input.Group compact>\n            <Select defaultValue=\"Beijing\" showSearch style={{ width: '25%' }}>\n              <Select.Option value=\"Beijing\">Beijing</Select.Option>\n              <Select.Option value=\"Tianjin\">Tianjin</Select.Option>\n              <Select.Option value=\"Shanghai\">Shanghai</Select.Option>\n            </Select>\n            <DatePicker style={{ width: '75%' }} />\n          </Input.Group>\n        </div>\n        <div\n          style={{\n            marginRight: 24,\n            width: 360,\n            display: 'inline-block',\n            marginBottom: 24,\n          }}\n        >\n          <Input.Group compact>\n            <Select defaultValue=\"Beijing\" showSearch style={{ width: '25%' }}>\n              <Select.Option value=\"Beijing\">Beijing</Select.Option>\n              <Select.Option value=\"Tianjin\">Tianjin</Select.Option>\n              <Select.Option value=\"Shanghai\">Shanghai</Select.Option>\n            </Select>\n            <InputSearch placeholder=\"Search\" style={{ width: '75%' }} />\n          </Input.Group>\n        </div>\n      </Grid.Row>\n      <Grid.Row>\n        <div\n          style={{\n            marginRight: 24,\n            width: 360,\n            display: 'inline-block',\n            marginBottom: 24,\n          }}\n        >\n          <Input.Group>\n            <Input style={{ width: '24%', marginRight: 8 }} value=\"010\" readOnly />\n            <Input style={{ width: '60%' }} placeholder=\"Phone number\" />\n          </Input.Group>\n        </div>\n        <div\n          style={{\n            marginRight: 24,\n            width: 360,\n            display: 'inline-block',\n            marginBottom: 24,\n          }}\n        >\n          <Input.Group>\n            <Input style={{ width: '24%', marginRight: 8 }} value=\"010\" readOnly />\n            <IconMinus style={{ color: 'var(--color-text-1)' }} />\n            <Input\n              style={{ width: '60%', marginLeft: 8 }}\n              defaultValue=\"8899887\"\n              placeholder=\"Phone number\"\n            />\n          </Input.Group>\n        </div>\n      </Grid.Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Editable Context with React\nDESCRIPTION: This snippet creates a React context to manage the form instance within editable rows. It allows child components (like EditableCell) to access the form instance using the useContext hook, enabling form validation and submission.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/table-edit.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useRef, useEffect, useContext, useCallback } from 'react';\nimport { Button, Table, Input, Select, Form, FormInstance } from '@arco-design/web-react';\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext<{ getForm?: () => FormInstance }>({});\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Search with TreeSelect in React\nDESCRIPTION: This React code snippet uses the TreeSelect component from Arco Design's web-react library to provide search functionality for hierarchical data. The 'onSearch' handler triggers a data filtering operation based on user input, leveraging the 'searchData' function to filter tree nodes. Dependencies include React and Arco Design's TreeSelect and Spin components. Key parameters include 'treeData' for data management and 'onSearch' for executing the search logic. Expected inputs are user search terms, and outputs are filtered tree nodes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/onSearch.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\\nimport { TreeSelect, Spin } from '@arco-design/web-react';\\nimport { IconCalendar } from '@arco-design/web-react/icon';\\n\\nconst TreeData = [\\n  {\\n    title: 'Trunk 0-0',\\n    key: '0-0',\\n    children: [\\n      {\\n        title: 'Branch 0-0-1',\\n        key: '0-0-1',\\n        children: [\\n          {\\n            title: 'Leaf 0-0-1-1',\\n            key: '0-0-1-1',\\n          },\\n          {\\n            title: 'Leaf 0-0-1-2',\\n            key: '0-0-1-2',\\n          },\\n        ],\\n      },\\n    ],\\n  },\\n  {\\n    title: 'Trunk 0-1',\\n    key: '0-1',\\n    children: [\\n      {\\n        title: 'Branch 0-1-1',\\n        key: '0-1-1',\\n        children: [\\n          {\\n            title: 'Leaf 0-1-1-0',\\n            key: '0-1-1-0',\\n          },\\n        ],\\n      },\\n      {\\n        title: 'Branch 0-1-2',\\n        key: '0-1-2',\\n        children: [\\n          {\\n            title: 'Leaf 0-1-2-0',\\n            key: '0-1-2-0',\\n          },\\n        ],\\n      },\\n    ],\\n  },\\n];\\n\\nfunction searchData(inputValue) {\\n  const loop = (data) => {\\n    const result = [];\\n    data.forEach((item) => {\\n      if (item.title.toLowerCase().indexOf(inputValue.toLowerCase()) > -1) {\\n        result.push({ ...item });\\n      } else if (item.children) {\\n        const filterData = loop(item.children);\\n\\n        if (filterData.length) {\\n          result.push({ ...item, children: filterData });\\n        }\\n      }\\n    });\\n    return result;\\n  };\\n\\n  return loop(TreeData);\\n}\\n\\nfunction App() {\\n  const [treeData, setTreeData] = React.useState(TreeData);\\n  const [loading, setLoading] = React.useState(false);\\n  const [value, setValue] = React.useState([]);\\n  return (\\n    <TreeSelect\\n      treeCheckable\\n      value={value}\\n      onChange={setValue}\\n      showSearch={true}\\n      allowClear={true}\\n      notFoundContent={loading ? <Spin /> : undefined}\\n      placeholder=\"please select...\"\\n      treeData={loading ? [] : treeData}\\n      onSearch={(inputValue) => {\\n        setLoading(true);\\n        setTimeout(() => {\\n          setLoading(false);\\n          setTreeData(searchData(inputValue));\\n        }, 200);\\n      }}\\n      style={{ width: 300 }}\\n    />\\n  );\\n}\\n\\nexport default App;\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Modal with Context Consumer using Hooks\nDESCRIPTION: Demonstrates creating a modal that can access React context using useModal hook and rendering different modal types with context\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/useModal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\nimport { Modal, Button, Space } from '@arco-design/web-react';\n\nconst ConfigContext = createContext({});\n\nfunction App() {\n  const [modal, contextHolder] = Modal.useModal();\n\n  const config = {\n    title: 'Profile',\n    content: <ConfigContext.Consumer>{(name) => `Current user: ${name}`}</ConfigContext.Consumer>,\n  };\n  return (\n    <ConfigContext.Provider value=\"PJY\">\n      {contextHolder}\n      <Space>\n        <Button onClick={() => modal.confirm(config)} type=\"secondary\">\n          Confirm\n        </Button>\n        <Button onClick={() => modal.info(config)} type=\"secondary\">\n          Info\n        </Button>\n        <Button onClick={() => modal.success(config)} type=\"secondary\">\n          Success\n        </Button>\n        <Button onClick={() => modal.warning(config)} type=\"secondary\">\n          Warning\n        </Button>\n        <Button onClick={() => modal.error(config)} type=\"secondary\">\n          Error\n        </Button>\n        <Button onClick={() => Modal.confirm(config)} type=\"outline\" status=\"danger\">\n          Can't get context\n        </Button>\n      </Space>\n    </ConfigContext.Provider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Scrollable Tabs with Arco Design in React\nDESCRIPTION: This code snippet sets up a scrollable tab interface using React and the Arco Design web-react library. It imports necessary components and defines a state for tab direction. The App component renders radio buttons to select orientation and dynamically creates a list of tabs, each with a unique key and content. The implementation allows switching tab orientation between horizontal and vertical, using the styling and layout features provided by the Arco Design library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/scroll.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Radio } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst paneStyle = {\n  width: '100%',\n  height: 50,\n  padding: '24px 0',\n  color: '#939aa3',\n};\nconst tabs = [...new Array(30)].map((x, i) => ({\n  title: `标签${i + 1}`,\n  key: `key${i + 1}`,\n  content: `标签${i + 1}内容`,\n}));\n\nfunction App() {\n  const [direction, setDirection] = useState('horizontal');\n  return (\n    <div>\n      <Radio.Group\n        type=\"button\"\n        name=\"direction\"\n        value={direction}\n        onChange={setDirection}\n        style={{ marginBottom: 40 }}\n        options={['horizontal', 'vertical']}\n      ></Radio.Group>\n      <Tabs defaultActiveTab=\"key1\" direction={direction} style={{ height: 200 }}>\n        {tabs.map((x, i) => (\n          <TabPane destroyOnHide key={x.key} title={x.title}>\n            <div style={paneStyle}>{`这里是${x.content}`}</div>\n          </TabPane>\n        ))}\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Modal with Alert Component - React\nDESCRIPTION: This React component demonstrates how to integrate an Alert component within an Arco Design Modal. It includes state management for modal visibility, table configuration with sorting, and rendering a modal with a button to toggle its visibility. The Modal includes an Alert component and a Table component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/with_alert.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, Table, Alert } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false); // table\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    {\n      title: 'Version',\n      dataIndex: 'version',\n      sorter: (a, b) => {\n        const aVersion = a.version.split('.');\n        const bVersion = b.version.split('.');\n\n        for (let i = 0; i < aVersion.length; i++) {\n          if (aVersion[i] === bVersion[i]) continue;\n          return aVersion[i] - bVersion[i];\n        }\n\n        return 1;\n      },\n    },\n    {\n      title: 'Author',\n      dataIndex: 'author',\n      sorter: (a, b) => a.author.length - b.author.length,\n    },\n  ];\n  const data = [\n    {\n      id: '1',\n      name: 'EduTools',\n      version: '12.18.1',\n      author: 'Dickens',\n    },\n  ];\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Open Modal\n      </Button>\n      <Modal\n        title=\"Manage Plugins\"\n        visible={visible}\n        className=\"modal-demo-without-content-spacing\"\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n      >\n        <Alert closable type=\"info\" content=\"This message displays only once.\" />\n        <div style={{ padding: 20 }}>\n          <p>\n            You can select multiple plugins for the current project so that our app will verify that\n            the plugins are installed and enabled.\n          </p>\n          <p style={{ marginTop: 20, marginBottom: 8, fontWeight: 600 }}>List of plugins</p>\n          <Table\n            columns={columns}\n            data={data}\n            pagination={false}\n            border={{ headerCell: true, wrapper: true }}\n            rowKey=\"id\"\n            rowSelection={{ type: 'checkbox', checkAll: true }}\n          ></Table>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Manual Upload Component Implementation in React\nDESCRIPTION: React component implementation showing manual file upload control using Arco Design's Upload component. Features include selecting multiple files, tracking upload progress, managing file states, and providing options for uploading all files or just the first one. Uses refs for upload control and maintains file list state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/manully.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const uploadRef = React.useRef();\n  const [disabled, setDisabled] = React.useState(false);\n  const [fileList, setFileList] = React.useState([]);\n\n  const onSubmit = (e, isFirst) => {\n    e.stopPropagation();\n    const file = isFirst ? fileList.filter((x) => x.status === 'init')[0] : null;\n    uploadRef.current && uploadRef.current.submit(file);\n  };\n\n  const onChange = (files) => {\n    setFileList(files);\n    setDisabled(!files.some((x) => x.status === 'init'));\n  };\n\n  const onProgress = (file) => {\n    setFileList((files) => {\n      return files.map((x) => (x.uid === file.uid ? file : x));\n    });\n  };\n\n  return (\n    <Upload\n      ref={uploadRef}\n      multiple\n      autoUpload={false}\n      action=\"/\"\n      onChange={onChange}\n      onProgress={onProgress}\n      fileList={fileList}\n    >\n      <Space size=\"large\">\n        <Button>Select file</Button>\n        <Button type=\"primary\" onClick={onSubmit} disabled={disabled}>\n          Start upload\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={(e) => {\n            onSubmit(e, true);\n          }}\n          disabled={disabled}\n        >\n          Only upload one\n        </Button>\n      </Space>\n    </Upload>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirmation Dialog with Modal.confirm() in Arco Design React\nDESCRIPTION: This snippet demonstrates how to create a confirmation modal dialog using Modal.confirm() from Arco Design. It includes customization of the modal's appearance, handling asynchronous operations with promises, and displaying error messages when the operation fails.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/confirm.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Modal, Message, Button } from '@arco-design/web-react';\n\nfunction confirm() {\n  Modal.confirm({\n    title: 'Confirm deletion',\n    content:\n      'Are you sure you want to delete the 3 selected items? Once you press the delete button, the items will be deleted immediately. You can\\'t undo this action.',\n    okButtonProps: {\n      status: 'danger',\n    },\n    onOk: () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n      }).catch((e) => {\n        Message.error({\n          content: 'Error occurs!',\n        });\n        throw e;\n      });\n    },\n  });\n}\n\nconst App = () => {\n  return (\n    <Button type=\"primary\" onClick={confirm}>\n      Confirm\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection Cascader with Arco Design\nDESCRIPTION: Example implementation of a multiple selection Cascader component using Arco Design. Shows configuration of options with nested hierarchical data, disabled checkboxes, and different checkedStrategy modes. Demonstrates both default value setting and parent selection strategy.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/multiple.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            disableCheckbox: true,\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space>\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{\n          width: 300,\n        }}\n        options={options}\n        mode=\"multiple\"\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n      />\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300 }}\n        options={options}\n        mode=\"multiple\"\n        checkedStrategy=\"parent\"\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Components with Arco Design in React\nDESCRIPTION: This code snippet demonstrates the usage of the Select component from Arco Design. It includes examples of standard selects, disabled selects, and selects with error and warning statuses. The component also showcases the use of Space for layout and Message for user feedback.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, Message, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Disabled'];\n\nconst App = () => {\n  return (\n    <div>\n    <Space size=\"large\">\n      <Select\n        placeholder=\"Select city\"\n        style={{ width: 154 }}\n        onChange={(value) =>\n          Message.info({\n            content: `You select ${value}.`,\n            showIcon: true,\n          })\n        }\n      >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 3} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n      <Select placeholder=\"Select city\" style={{ width: 154 }} defaultValue=\"Beijing\" disabled>\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 4} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n    <br/>\n    <br/>\n    <Space size=\"large\">\n      <Select\n        status=\"error\"\n        placeholder=\"Select city\"\n        style={{ width: 154 }}\n        onChange={(value) =>\n          Message.info({\n            content: `You select ${value}.`,\n            showIcon: true,\n          })\n        }\n      >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 3} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n      <Select status=\"warning\" placeholder=\"Select city\" style={{ width: 154 }} defaultValue=\"Beijing\" >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 4} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Arco Design Table with Row Selection and Expansion\nDESCRIPTION: Creates a React Table component with advanced configuration including row selection, row expansion, scroll settings, and custom row key handling. Supports disabling specific rows and tracking selected rows.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/operations.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [selectedRowKeys, setSelectedRowKeys] = useState(['4']);\n  return (\n    <Table\n      components={components}\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => {\n        if (record.key !== '4') {\n          return record.email;\n        }\n        return null;\n      }}\n      rowSelection={{\n        type: 'checkbox',\n        selectedRowKeys,\n        onChange: (selectedRowKeys, selectedRows) => {\n          console.log(selectedRowKeys, selectedRows);\n          setSelectedRowKeys(selectedRowKeys);\n        },\n        checkboxProps: (record) => {\n          return {\n            disabled: record.id === 4,\n          };\n        },\n      }}\n      scroll={{\n        x: 1200,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modal with Context\nDESCRIPTION: Illustrates how to use the `Modal.useModal` hook to access context within a modal. It provides a `contextHolder` which is rendered within a context provider to allow the modal to access context values. Enables using context dependent logic inside Modals.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__template__/index.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [modal, contextHolder] = Modal.useModal();\n\n<Context.Provider>\n   {contextHolder}\n   <Button onClick={() => modal.warning({ title:'Title', content:'content' })}>Open</Button>\n</Context.Provider>\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering Items in Arco Design Transfer Component\nDESCRIPTION: This example demonstrates how to use the render prop in the Transfer component to customize the appearance of transfer items. It conditionally applies blue styling to certain items and adds a star icon to a specific item with key '7'. The component is initialized with default target keys and selected keys.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/render.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\nimport { IconStar } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const dataSource = new Array(8).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      render={(item) => (\n        <span\n          style={\n            +item.key % 5 === 1\n              ? {\n                  color: '#165DFF',\n                }\n              : {}\n          }\n        >\n          {item.value}\n          {+item.key === 7 ? (\n            <IconStar\n              style={{\n                marginLeft: 4,\n                color: 'rgb(var(--gold-6))',\n              }}\n            />\n          ) : null}\n        </span>\n      )}\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader Component with Click and Hover Triggers in React\nDESCRIPTION: This code snippet demonstrates the basic usage of the Cascader component from Arco Design. It shows how to create cascading options, set up click and hover triggers for expanding options, and apply different status states like error and warning. The component is rendered with various configurations to showcase its flexibility.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Space size=\"large\">\n        <Cascader\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n        />\n        <Cascader\n          placeholder=\"Hover to expand\"\n          expandTrigger=\"hover\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n        />\n      </Space>\n      <br/>\n      <Space size=\"large\">\n        <Cascader\n          status=\"error\"\n          allowClear\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n        />\n        <Cascader\n          status=\"warning\"\n          allowClear\n          placeholder=\"Hover to expand\"\n          expandTrigger=\"hover\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n        />\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Transfer Component with Drag and Drop\nDESCRIPTION: This code snippet demonstrates a React component using the Arco Design's Transfer component with drag-and-drop functionality enabled.  It initializes a stateful data source and defines a `swapArrayItem` function to reorder items in the data source based on drag and drop events. The component's `onDrop` handler updates the data source state with the new order.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/drag-sort.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const swapArrayItem = (arr, index1, index2) => {\n    arr = [...arr];\n    arr.splice(index1, 1, ...arr.splice(index2, 1, arr[index1]));\n    return arr;\n  };\n\n  const [dataSource, setDataSource] = useState(\n    new Array(8).fill(null).map((_, index) => ({\n      key: `${index + 1}`,\n      value: `Option ${index + 1}`,\n    }))\n  );\n  return (\n    <Transfer\n      draggable\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n      onDrop={({ dragItem, dropItem }) => {\n        const indexDragItem = dataSource.indexOf(dragItem);\n        const indexDropItem = dataSource.indexOf(dropItem);\n        setDataSource(swapArrayItem(dataSource, indexDragItem, indexDropItem));\n      }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining React Component with Arco Design\nDESCRIPTION: This JavaScript snippet defines a React component using the Arco Design library. It includes image actions with tooltips and handling for a preview feature. Dependencies include React and @arco-design/web-react. The component, `DemoImage`, allows specifying custom properties and integrates with the rest of the application inside the `App` component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/extra-actions.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Image, Tooltip, Space} from '@arco-design/web-react';\nimport { IconEye, IconDownload, IconInfoCircle } from '@arco-design/web-react/icon';\n\nfunction DemoImage(props) {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <Image\n      src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp\"\n      title=\"A user’s avatar\"\n      description=\"Present by Arco Design\"\n      actions={[\n        <button\n          key=\"1\"\n          className=\"image-demo-action-item\"\n          onClick={(e) => {\n            setVisible(true);\n          }}\n        >\n          <IconEye />\n        </button>,\n        <button\n          key=\"2\"\n          className=\"image-demo-action-item\"\n          onClick={(e) => {\n            console.log('download');\n          }}\n        >\n          <IconDownload />\n        </button>,\n        <Tooltip key=\"3\" content=\"A user’s avatar\">\n          <button className=\"image-demo-action-item\">\n            <IconInfoCircle />\n          </button>\n        </Tooltip>,\n      ]}\n      previewProps={{\n        visible,\n        onVisibleChange: (e) => {\n          setVisible(false);\n        },\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <Space size={20} align=\"start\">\n        <DemoImage width={300} alt=\"lamp1\" />\n        <DemoImage\n          width={200}\n          simple={true}\n          alt=\"lamp2\"\n          style={{\n            verticalAlign: 'top',\n          }}\n        />\n      </Space>\n      <Space\n        size={20}\n        align=\"start\"\n        style={{\n          marginTop: 67,\n        }}\n      >\n        <DemoImage width={300} footerPosition=\"outer\" alt=\"lamp3\" />\n        <DemoImage\n          width={200}\n          simple={true}\n          footerPosition=\"outer\"\n          alt=\"lamp4\"\n          style={{\n            verticalAlign: 'top',\n          }}\n        />\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Select Options with Arco Design in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Select component with grouped options using Arco Design. It utilizes Select.Group to organize drink options into categories and implements features like search, clear, and placeholder.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst groups = [\n  ['Black tea latte', 'Green tea latte'],\n  ['Vanilla Frappuccino', 'Matcha Frappuccino'],\n  ['Chocolate milk', 'Banana milk'],\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Select showSearch allowClear placeholder=\"Select drink\" style={{ width: 154 }}>\n        {groups.map((options, index) => {\n          return (\n            <Select.OptGroup label={`Group-${index}`} key={index}>\n              {options.map((option, index) => (\n                <Option key={option} value={option}>\n                  {option}\n                </Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form List using Arco Design\nDESCRIPTION: This code snippet demonstrates the implementation of a dynamic form list using Arco Design's `Form` and `Form.List` components. It allows adding and removing nested form items for user data (username and address). The `Form.List` component manages the array structure, and the `add` and `remove` functions are used to dynamically update the form.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/list-nest.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useState } from 'react';\nimport { Form, Space, Input, Button, Grid } from '@arco-design/web-react';\nimport { IconArrowRise, IconArrowFall, IconDelete } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const formRef = useRef();\n  return (\n    <div>\n      <Form\n        ref={formRef}\n        style={{ width: 600 }}\n        autoComplete=\"off\"\n        initialValues={{\n          users: [\n            {\n              username: 'aaa',\n              address: 'bbb',\n            },\n          ],\n        }}\n        onValuesChange={(_, v) => {\n          console.log(_, v);\n        }}\n      >\n        <Form.List field=\"users\">\n          {(fields, { add, remove, move }) => {\n            return (\n              <div>\n                {fields.map((item, index) => {\n                  return (\n                    <div key={item.key}>\n                      <Form.Item label={'User ' + index}>\n                        <Space>\n                          <Form.Item\n                            field={item.field + '.username'}\n                            rules={[{ required: true }]}\n                            noStyle\n                          >\n                            <Input />\n                          </Form.Item>\n                          <Form.Item\n                            field={item.field + '.address'}\n                            rules={[{ required: true }]}\n                            noStyle\n                          >\n                            <Input />\n                          </Form.Item>\n                          <Button\n                            icon={<IconDelete />}\n                            shape=\"circle\"\n                            status=\"danger\"\n                            onClick={() => remove(index)}\n                          ></Button>\n                        </Space>\n                      </Form.Item>\n                    </div>\n                  );\n                })}\n                <Form.Item wrapperCol={{ offset: 5 }}>\n                  <Button\n                    onClick={() => {\n                      add();\n                    }}\n                  >\n                    Add User\n                  </Button>\n                </Form.Item>\n              </div>\n            );\n          }}\n        </Form.List>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Steps Component with Icons in React\nDESCRIPTION: This snippet demonstrates how to use the Steps component from the @arco-design/web-react library to create a multi-step interface with custom icons for each step. The icons used are imported from the @arco-design/web-react/icon library. This implementation requires the Arco Design React components and their respective icons as dependencies.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nimport { IconHome, IconLoading, IconThumbUp } from '@arco-design/web-react/icon';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <Steps current={2}>\n      <Step icon={<IconHome />} title=\"Succeeded\" description=\"This is a description\" />\n      <Step icon={<IconLoading />} title=\"Processing\" description=\"This is a description\" />\n      <Step icon={<IconThumbUp />} title=\"Pending\" description=\"This is a description\" />\n    </Steps>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Nested Subtable Implementation with Arco Design Table in React\nDESCRIPTION: This code defines a React component that utilizes the Arco Design Table to create a table with nested subtables. The `expandedRowRender` function defines the subtable to be rendered when a row is expanded. The main table then uses this function to render the subtable within the expanded row.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/expand-sub-table.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nfunction expandedRowRender() {\n  return <Table columns={columns} data={data} pagination={false} />;\n}\n\nconst App = () => {\n  return (\n    <Table indentSize={60} expandedRowRender={expandedRowRender} columns={columns} data={data} />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drawer Functionality with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create a basic drawer using the Arco Design library in a React application. It uses the useState hook to manage the visibility state of the drawer and includes a button to trigger the drawer's appearance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={332}\n        title={<span>Basic Information </span>}\n        visible={visible}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <div>Here is an example text.</div>\n\n        <div>Here is an example text.</div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Tags with Arco Design in JavaScript\nDESCRIPTION: This snippet illustrates how to use the Arco Design library's `InputTag` and `Tag` components in a React application to render custom tags. The `renderTag` function customizes the appearance of each tag based on its value, with a fallback color of 'gray' if the value is not within the predefined options. Dependencies include '@arco-design/web-react'. The component accepts inputs such as tag labels and values, and outputs the corresponding custom styled `Tag` components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/render-tag.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InputTag, Tag } from '@arco-design/web-react';\nconst options = ['arcoblue', 'orange', 'lime'];\n\nfunction tagRender(props) {\n  const { label, value, closable, onClose } = props;\n  return (\n    <Tag\n      color={options.indexOf(value) > -1 ? value : 'gray'}\n      closable={closable}\n      onClose={onClose}\n      style={{ margin: '2px 6px 2px 0' }}\n    >\n      {label}\n    </Tag>\n  );\n}\n\nconst App = () => {\n  return (\n    <InputTag\n      allowClear\n      placeholder=\"Please input\"\n      defaultValue={options}\n      renderTag={tagRender}\n      style={{ maxWidth: 350 }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with Grouped Options in React\nDESCRIPTION: This code demonstrates how to use the AutoComplete component from Arco Design with grouped options. It dynamically generates suggestion groups based on user input, organizing suggestions into three labeled categories. The component renders search results in a hierarchical structure with OptGroup for categories and Options for individual items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/with-group.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete, Input } from '@arco-design/web-react';\nconst { OptGroup, Option } = AutoComplete;\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    if (inputValue) {\n      setData(\n        ['Group-1', 'Group-2', 'Group-3'].map((groupName, outerIndex) => (\n          <OptGroup key={outerIndex} label={groupName}>\n            {new Array(3).fill(null).map((_, innerIndex) => {\n              const value = `${inputValue}-${outerIndex + 1}-${innerIndex + 1}`;\n              return (\n                <Option key={`${outerIndex}_${innerIndex}`} value={value}>\n                  {value}\n                </Option>\n              );\n            })}\n          </OptGroup>\n        ))\n      );\n    } else {\n      setData([]);\n    }\n  };\n\n  return (\n    <div>\n      <AutoComplete\n        style={{ width: 320 }}\n        data={data}\n        placeholder=\"Please Enter\"\n        triggerElement={<Input.Search />}\n        onSearch={handleSearch}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tabs in React with Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a dynamic tab interface using Arco Design's Tabs component in a React application. It initializes a set of tabs, provides functions for adding and deleting tabs dynamically, and updates the active tab accordingly.  The component uses state variables to manage the tabs and the active tab.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/delete.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nlet count = 5;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\nconst initTabs = [...new Array(count)].map((x, i) => ({\n  title: `Tab ${i + 1}`,\n  key: `key${i + 1}`,\n  content: `${i + 1}`,\n}));\n\nfunction App() {\n  const [tabs, setTabs] = useState(initTabs);\n  const [activeTab, setActiveTab] = useState('key2');\n\n  const handleAddTab = () => {\n    const newTab = {\n      title: `New Tab${++count}`,\n      key: `new key${count}`,\n      content: `${count}`,\n    };\n    setTabs([...tabs, newTab]);\n    setActiveTab(newTab.key);\n  };\n\n  const handleDeleteTab = (key) => {\n    const index = tabs.findIndex((x) => x.key === key);\n    const newTabs = tabs.slice(0, index).concat(tabs.slice(index + 1));\n\n    if (key === activeTab && index > -1 && newTabs.length) {\n      setActiveTab(newTabs[index] ? newTabs[index].key : newTabs[index - 1].key);\n    }\n\n    if (index > -1) {\n      setTabs(newTabs);\n    }\n  };\n\n  return (\n    <Tabs\n      editable\n      type=\"card-gutter\"\n      activeTab={activeTab}\n      onAddTab={handleAddTab}\n      onDeleteTab={handleDeleteTab}\n      onChange={setActiveTab}\n    >\n      {tabs.map((x, i) => (\n        <TabPane destroyOnHide key={x.key} title={x.title}>\n          <Typography.Paragraph\n            style={style}\n          >{`Content of Tab Panel ${x.content}`}</Typography.Paragraph>\n        </TabPane>\n      ))}\n    </Tabs>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a List with Arco Design in React\nDESCRIPTION: This JavaScript code snippet showcases the implementation of a vertical list using the Arco Design library for React. It utilizes the `List` and `List.Item` components to display data with avatars, titles, and descriptions, alongside action icons such as hearts, stars, and message replies. The list supports pagination to display items in batches of three, leveraging Avatars and Images provided by ByteDance as example data. Requires 'arco-design/web-react' and 'arco-design/web-react/icon' dependencies.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/action-layout.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { List, Avatar } from '@arco-design/web-react';\nimport { IconHeart, IconMessage, IconStar } from '@arco-design/web-react/icon';\nconst names = ['Socrates', 'Balzac', 'Plato'];\nconst avatarSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/9eeb1800d9b78349b24682c3518ac4a3.png~tplv-uwbnlip3yd-webp.webp',\n];\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/29c1f9d7d17c503c5d7bf4e538cb7c4f.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/04d7bc31dd67dcdf380bc3f6aa07599f.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/1f61854a849a076318ed527c8fca1bbf.png~tplv-uwbnlip3yd-webp.webp',\n];\nconst dataSource = new Array(15).fill(null).map((_, index) => {\n  return {\n    index: index,\n    avatar: avatarSrc[index % avatarSrc.length],\n    title: names[index % names.length],\n    description:\n      'Beijing ByteDance Technology Co., Ltd. is an enterprise located in China. ByteDance has products such as TikTok, Toutiao, volcano video and Douyin (the Chinese version of TikTok).',\n    imageSrc: imageSrc[index % imageSrc.length],\n  };\n});\n\nconst App = () => {\n  return (\n    <List\n      className=\"list-demo-action-layout\"\n      wrapperStyle={{ maxWidth: 830 }}\n      bordered={false}\n      pagination={{ pageSize: 3 }}\n      dataSource={dataSource}\n      render={(item, index) => (\n        <List.Item\n          key={index}\n          style={{ padding: '20px 0', borderBottom: '1px solid var(--color-fill-3)' }}\n          actionLayout=\"vertical\"\n          actions=[\n            <span key={1}>\n              <IconHeart />\n              {83}\n            </span>,\n            <span key={2}>\n              <IconStar />\n              {item.index}\n            </span>,\n            <span key={3}>\n              <IconMessage />\n              Reply\n            </span>,\n          ]\n          extra={\n            <div className=\"image-area\">\n              <img alt=\"arcodesign\" src={item.imageSrc} />\n            </div>\n          }\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar shape=\"square\">\n                <img alt=\"avatar\" src={`${item.avatar}`} />\n              </Avatar>\n            }\n            title={item.title}\n            description={item.description}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Columns and Data in React\nDESCRIPTION: Defines the table columns and generates sample data for 200 rows with unique identifiers and sample information\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/pagination.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  }\n];\n\nconst allData = Array(200)\n  .fill('')\n  .map((_, index) => ({\n    key: `${index}`,\n    name: `Kevin Sandra ${index}`,\n    salary: 22000,\n    address: `${index} Park Road, London`,\n    email: `kevin.sandra_${index}@example.com`,\n  }));\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu with Arco Design React\nDESCRIPTION: This snippet sets up a context menu that triggers on right-click using React and Arco Design components. It imports necessary components from React and Arco Design libraries, defines an App component, and configures the Dropdown and Menu elements to display location options. The component style ensures a visually appealing layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/right-click.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Dropdown, Menu, Grid } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Dropdown\n      trigger=\"contextMenu\"\n      position=\"bl\"\n      droplist={\n        <Menu>\n          <Menu.Item key=\"1\">Haidian</Menu.Item>\n          <Menu.Item key=\"2\">Chaoyang</Menu.Item>\n          <Menu.Item key=\"3\">Daxing</Menu.Item>\n        </Menu>\n      }\n    >\n      <Grid.Row\n        align=\"center\"\n        justify=\"center\"\n        style={{\n          width: 320,\n          height: 160,\n          backgroundColor: 'var(--color-fill-2)',\n          color: 'var(--color-text-1)',\n        }}\n      >\n        <span>Right-click</span>\n      </Grid.Row>\n    </Dropdown>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual List with 10000 Items in Arco Design\nDESCRIPTION: This code demonstrates how to create a high-performance virtualized list that can handle 10,000 items efficiently using Arco Design's List component. It sets up the virtual list with a fixed height of 560px and generates mock data with sequential numbering for each list item. Each item includes an avatar, title, and description.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/virtual-list.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { List, Avatar } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <>\n      <h3 style={{ color: 'var(--color-text-2)' }}>10000 items</h3>\n      <List\n        style={{ width: 600 }}\n        virtualListProps={{\n          height: 560,\n        }}\n        dataSource={new Array(10000).fill(null).map((_, index) => {\n          const prefix = `0000${index}`.slice(-5);\n          return {\n            title: 'Beijing Bytedance Technology Co., Ltd.',\n            description: `(${prefix}) Beijing ByteDance Technology Co., Ltd. is an enterprise located in China.`,\n          };\n        })}\n        render={(item, index) => (\n          <List.Item key={index}>\n            <List.Item.Meta\n              avatar={<Avatar shape=\"square\">A</Avatar>}\n              title={item.title}\n              description={item.description}\n            />\n          </List.Item>\n        )}\n      />\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Modal Dialogs in Arco Design\nDESCRIPTION: This code demonstrates how to create four types of message modal dialogs (info, success, warning, error) using Arco Design's Modal component. Each function creates a specific type of modal with customized styling and content, and the buttons are rendered in a Space component for proper spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/confirm_type.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Modal, Button, Space } from '@arco-design/web-react';\n\nfunction info() {\n  Modal.info({\n    title: 'Info Notification',\n    content:\n      'This is an info description which directly indicates a neutral informative change or action. (e.g., \"We are providing new services for all developers.\") ',\n  });\n}\n\nfunction success() {\n  Modal.success({\n    title: 'This is a success notification',\n  });\n}\n\nfunction warning() {\n  Modal.warning({\n    title: 'Warning Notification',\n    content:\n      'This is a warning description which directly indicates a warning that might need attention. (e.g., \"Invalid request, please contact admininstration.\")',\n  });\n}\n\nfunction error() {\n  Modal.error({\n    title: 'Error Notification',\n    content:\n      'This is an error description which directly indicates a dangerous or potentially negative action. (e.g., \"It's a invalid request.\")',\n  });\n}\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button type=\"primary\" onClick={info}>\n        Info\n      </Button>\n      <Button type=\"primary\" status=\"success\" onClick={success}>\n        Success\n      </Button>\n      <Button type=\"primary\" status=\"warning\" onClick={warning}>\n        Warning\n      </Button>\n      <Button type=\"primary\" status=\"danger\" onClick={error}>\n        Error\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon Types in Upload Component\nDESCRIPTION: TypeScript interface definition for customizing icons and rendering functions in the Upload component. Includes options for preview, remove, file, reupload, cancel, start, and error icons, as well as custom rendering for file names, progress, and images.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Custom icons\ntype CustomIconType = {\n  previewIcon?: ReactNode;\n  removeIcon?: ReactNode;\n  fileIcon?: ReactNode;\n  reuploadIcon?: ReactNode;\n  cancelIcon?: ReactNode;\n  startIcon?: ReactNode;\n  errorIcon?: ReactNode;\n  fileName?: (file: UploadItem) => ReactNode;\n  progressRender?: (file: UploadItem, originDom: ReactNode) => ReactElement; // 2.34.0\n  imageRender?: (file: UploadItem) => ReactNode; // 2.34.0\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Disabled Options in React\nDESCRIPTION: This code snippet demonstrates how to create a Cascader component with disabled options using Arco Design's React library. It includes a complex options structure with nested levels and shows both single and multiple selection modes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n            disabled: true,\n            children: [\n              {\n                value: 'chaoyangmen',\n                label: 'Chaoyangmen',\n              },\n              {\n                value: 'jianguo',\n                label: 'Jianguomen',\n              },\n            ],\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\" align=\"start\">\n      <Cascader\n        allowClear\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={['beijing', 'Beijing', 'dongcheng', 'chaoyangmen']}\n        placeholder=\"Please select ...\"\n        showSearch\n      />\n      <Cascader\n        allowClear\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={[\n          ['beijing', 'Beijing', 'dongcheng', 'chaoyangmen'],\n          ['beijing', 'Beijing', 'dongcheng', 'jianguo'],\n        ]}\n        placeholder=\"Please select ...\"\n        mode=\"multiple\"\n        showSearch\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: TimePicker Disable Confirmation in React\nDESCRIPTION: This code snippet demonstrates how to use the `disableConfirm` property in Arco Design's `TimePicker` and `TimePicker.RangePicker` components. The `disableConfirm` property skips the confirmation step, allowing users to directly select a time. `onSelect` and `onChange` handlers are included for demonstration purposes.  The `style` object defines common styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/disableConfirm.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\nconst style = {\n  width: 194,\n  margin: '0 24px 24px 0',\n};\n\nfunction onSelect(valueString, value) {\n  console.log('onSelect', valueString, value);\n}\n\nfunction onChange(valueString, value) {\n  console.log('onChange', valueString, value);\n}\n\nconst App = () => {\n  return (\n    <div>\n      <TimePicker disableConfirm style={style} onSelect={onSelect} onChange={onChange} />\n      <TimePicker.RangePicker\n        disableConfirm\n        style={{ ...style, width: 252 }}\n        onSelect={onSelect}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Dynamic Size Configuration\nDESCRIPTION: Creates a React form component with dynamic size selection using Radio.Group, allowing users to change form element sizes in real-time\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport {\n  Form,\n  AutoComplete,\n  Input,\n  Select,\n  TreeSelect,\n  Button,\n  Radio,\n  Cascader,\n  Message,\n  InputNumber,\n  DatePicker,\n} from '@arco-design/web-react';\n```\n\n----------------------------------------\n\nTITLE: Customizing Steps with Popover in Arco Design React\nDESCRIPTION: This JavaScript snippet defines a React component that uses Arco Design's Steps component, enabling the customization of step nodes through the `customDot` function. It imports necessary components from '@arco-design/web-react', including Steps and Popover, and utilizes useState from React to manage the index of the current step. The customDot function is used to display a Popover when a node is active, and buttons allow navigational control over the steps. Dependencies include React, '@arco-design/web-react', and '@arco-design/web-react/icon'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/customDot.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Steps, Popover } from '@arco-design/web-react';\nimport { IconLeft, IconRight } from '@arco-design/web-react/icon';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [current, setCurrent] = useState(2);\n\n  const customDot = (dot, { status, index, title, description }) => {\n    const visible = index === current;\n    return (\n      <Popover popupVisible={visible} content={<span>Step: {index}</span>}>\n        {dot}\n      </Popover>\n    );\n    return dot;\n  };\n\n  return (\n    <div style={{ overflow: 'hidden', textAlign: 'center' }}>\n      <Steps type=\"dot\" current={current} customDot={customDot} style={{ marginTop: 20 }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n      <div style={{ marginTop: 40 }}>\n        <Button\n          type=\"secondary\"\n          disabled={current <= 1}\n          onClick={() => setCurrent(current - 1)}\n          style={{ paddingLeft: 8 }}\n        >\n          <IconLeft />\n          Back\n        </Button>\n        <Button\n          disabled={current >= 3}\n          onClick={() => setCurrent(current + 1)}\n          style={{ marginLeft: 20, paddingRight: 8 }}\n          type=\"primary\"\n        >\n          Next\n          <IconRight />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Picture Wall Upload with Preview in Arco Design React\nDESCRIPTION: Demonstrates how to create a picture wall upload component with built-in image preview functionality. Uses the imagePreview property (introduced in version 2.41.0) and handles preview events through onPreview callback. Includes configuration for multiple file uploads and custom preview handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/preview.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Message } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Upload\n        multiple\n        imagePreview\n        defaultFileList={[\n          {\n            uid: '-2',\n            name: '20200717-103937.png',\n            url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n          },\n          {\n            uid: '-1',\n            name: 'hahhahahahaha.png',\n            url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n          },\n        ]}\n        action=\"/\"\n        listType=\"picture-card\"\n        onPreview={(file) => {\n          Message.info('click preview icon')\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Row Selection with Arco Design in JavaScript\nDESCRIPTION: This code snippet sets up a table with row selection capabilities using the `Arco Design` library in JavaScript. It initializes state hooks to manage the type of selection ('checkbox' or 'radio') and the selected row keys. The table is configured with columns and data, allowing users to select rows, and logs changes to the console. Key dependencies include `@arco-design/web-react` for UI components and React hooks for state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/selection.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Table, Radio } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    id: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    id: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    id: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    id: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    id: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nfunction App() {\n  const [type, setType] = useState('checkbox');\n  const [selectedRowKeys, setSelectedRowKeys] = useState(['4']);\n  return (\n    <div>\n      <Radio.Group\n        style={{\n          marginBottom: 20,\n        }}\n        type=\"button\"\n        options={['checkbox', 'radio']}\n        value={type}\n        onChange={(v) => setType(v)}\n      />\n      <Table\n        rowKey=\"id\"\n        columns={columns}\n        data={data}\n        rowSelection={{\n          type,\n          selectedRowKeys,\n          onChange: (selectedRowKeys, selectedRows) => {\n            console.log('onChange:', selectedRowKeys, selectedRows);\n            setSelectedRowKeys(selectedRowKeys);\n          },\n          onSelect: (selected, record, selectedRows) => {\n            console.log('onSelect:', selected, record, selectedRows);\n          },\n          checkboxProps: (record) => {\n            return {\n              disabled: record.id === '4',\n            };\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Loading with TreeSelect Component in React\nDESCRIPTION: This code demonstrates how to implement dynamic loading in a TreeSelect component using Arco Design. It initializes a tree structure with some nodes marked as leaf nodes, and implements a loadMore function that asynchronously loads child nodes when a parent node is expanded.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/loadmore.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\nconst defaultData = [\n  {\n    key: 'node1',\n    value: 'node1',\n    title: 'node1',\n    children: [\n      {\n        key: 'node2',\n        value: 'node2',\n        title: 'node2',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    value: 'node3',\n    title: 'node3',\n    children: [\n      {\n        key: 'node4',\n        value: 'node4',\n        title: 'node4',\n        isLeaf: true,\n      },\n      {\n        key: 'node5',\n        value: 'node5',\n        title: 'node5',\n        isLeaf: true,\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(defaultData);\n  const [value, setValue] = useState('node2');\n\n  const loadMore = (node, dataRef) => {\n    const { title, _key: key } = node.props;\n    const children = [\n      {\n        title: `${title}-0`,\n        value: `${title}-0`,\n        key: `${key}-0`,\n      },\n      {\n        title: `${title}-1`,\n        value: `${title}-1`,\n        key: `${key}-1`,\n      },\n    ];\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dataRef.children = children;\n        setTreeData([...treeData]);\n        resolve();\n      }, 1000);\n    });\n  };\n\n  return (\n    <TreeSelect\n      showSearch\n      placeholder=\"请选择...\"\n      treeData={treeData}\n      value={value}\n      onChange={setValue}\n      loadMore={loadMore}\n      triggerProps={{\n        popupStyle: {\n          maxHeight: 300,\n        },\n      }}\n      style={{ width: 300 }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Table Attributes with React and Arco Design (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a React component that manages table attributes using Arco Design components. It allows users to toggle settings like table borders, loading state, and pagination position. Dependencies include React and Arco Design components such as Table, Grid, Switch, Form, and Radio. The component maintains its state for each switchable property and renders a form and a table with dynamic attributes. Inputs are user actions on form controls, and outputs are the updated table presentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/attribution.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Table, Grid, Switch, Form, Radio } from '@arco-design/web-react';\n\nconst FormItem = Form.Item;\nconst { Row, Col } = Grid;\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst defaultData = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\nlet data = defaultData;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkbox: true,\n      checkAll: true,\n      border: true,\n      borderCell: false,\n      hover: true,\n      stripe: false,\n      loading: false,\n      showHeader: true,\n      fixedHeader: false,\n      no_data: false,\n      size: 'default',\n      pagePosition: 'br',\n    };\n  }\n\n  onChange = (type, checked) => {\n    if (type === 'no_data') {\n      data = checked ? [] : defaultData;\n    }\n\n    this.setState({\n      [type]: checked,\n    });\n  };\n\n  render() {\n    const {\n      checkbox,\n      borderCell,\n      checkAll,\n      border,\n      hover,\n      stripe,\n      loading,\n      showHeader,\n      fixedHeader,\n      no_data,\n      size,\n      pagePosition,\n    } = this.state;\n    return (\n      <div>\n        <div>\n          <Form layout=\"inline\">\n            <FormItem label=\"Border\" colon={false}>\n              <Switch size=\"small\" onChange={this.onChange.bind(this, 'border')} checked={border} />\n            </FormItem>\n            <FormItem label=\"Border Cell\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'borderCell')}\n                checked={borderCell}\n              />\n            </FormItem>\n            <FormItem label=\"Hover\" colon={false}>\n              <Switch size=\"small\" onChange={this.onChange.bind(this, 'hover')} checked={hover} />\n            </FormItem>\n            <FormItem label=\"Stripe\" colon={false}>\n              <Switch size=\"small\" onChange={this.onChange.bind(this, 'stripe')} checked={stripe} />\n            </FormItem>\n            <FormItem label=\"Checkbox\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'checkbox')}\n                checked={checkbox}\n              />\n            </FormItem>\n            <FormItem label=\"Check All\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'checkAll')}\n                checked={checkAll}\n              />\n            </FormItem>\n            <FormItem label=\"Loading\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'loading')}\n                checked={loading}\n              />\n            </FormItem>\n            <FormItem label=\"Table Header\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'showHeader')}\n                checked={showHeader}\n              />\n            </FormItem>\n            <FormItem label=\"Header fixed\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'fixedHeader')}\n                checked={fixedHeader}\n              />\n            </FormItem>\n            <FormItem label=\"No data\" colon={false}>\n              <Switch\n                size=\"small\"\n                onChange={this.onChange.bind(this, 'no_data')}\n                checked={no_data}\n              />\n            </FormItem>\n            <FormItem label=\"Size\" colon={false}>\n              <Radio.Group\n                type=\"button\"\n                options={['default', 'middle', 'small', 'mini']}\n                value={size}\n                onChange={this.onChange.bind(this, 'size')}\n              />\n            </FormItem>\n            <FormItem label=\"Pagination position\" colon={false}>\n              <Radio.Group\n                type=\"button\"\n                options=[{\n                  label: 'BottomRight',\n                  value: 'br',\n                },\n                {\n                  label: 'BottomLeft',\n                  value: 'bl',\n                },\n                {\n                  label: 'TopRight',\n                  value: 'tr',\n                },\n                {\n                  label: 'TopLeft',\n                  value: 'tl',\n                },\n                {\n                  label: 'TopCenter',\n                  value: 'topCenter',\n                },\n                {\n                  label: 'BottomCenter',\n                  value: 'bottomCenter',\n                }]\n                value={pagePosition}\n                onChange={this.onChange.bind(this, 'pagePosition')}\n              />\n            </FormItem>\n          </Form>\n        </div>\n        <div>\n          <Table\n            columns={columns}\n            data={data}\n            {...this.state}\n            rowSelection={\n              checkbox && {\n                type: 'checkbox',\n                checkAll: checkAll,\n              }\n            }\n            scroll={fixedHeader ? { y: 120 } : {}}\n            style={{ marginTop: 10, }}\n            pagination={{ pageSize: 5, }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Form SetFields Usage\nDESCRIPTION: This code snippet illustrates how to use the `setFields` method to set the value and error state of a specific field in the form.  It allows setting a value, an error message, and a warning message for a given field.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nthis.form.setFields({\n  name: {\n    value: 'pjy',\n    error: {\n      message: 'Yes, I know!'\n    },\n    warning: 'warning...'\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modal Dialog with Steps in React\nDESCRIPTION: This JavaScript code snippet shows how to create a modal dialog in a React component, incorporating a horizontal step bar and a plugin list using Arco Design components. The React state is used to manage the modal visibility. The code includes the setup of columns for the table with sortable functionalities and defines sample data for plugins. The dialog provides functionalities to manage plugins, including modal opening/closing actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/with_step.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, Table, Alert, Steps, Divider } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false); // table\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    {\n      title: 'Version',\n      dataIndex: 'version',\n      sorter: (a, b) => {\n        const aVersion = a.version.split('.');\n        const bVersion = b.version.split('.');\n\n        for (let i = 0; i < aVersion.length; i++) {\n          if (aVersion[i] === bVersion[i]) continue;\n          return aVersion[i] - bVersion[i];\n        }\n\n        return 1;\n      },\n    },\n    {\n      title: 'Author',\n      dataIndex: 'author',\n      sorter: (a, b) => a.author.length - b.author.length,\n    },\n  ];\n  const data = [\n    {\n      id: '1',\n      name: 'EduTools',\n      version: '12.18.1',\n      author: 'Dickens',\n    },\n    {\n      id: '2',\n      name: 'BashSupport',\n      version: '12.19.2',\n      author: 'Aristotle',\n    },\n    {\n      id: '3',\n      name: 'GitToolBox',\n      version: '12.20.3',\n      author: 'Hemingway',\n    },\n  ];\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Open Modal\n      </Button>\n      <Modal\n        title=\"Manage Plugins\"\n        visible={visible}\n        className=\"modal-demo-without-content-spacing\"\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n      >\n        <div style={{ padding: '16px 0' }}>\n          <Steps size=\"small\" lineless current={2} style={{ maxWidth: 375, margin: '0 auto' }}>\n            <Step title=\"Succeeded\" />\n            <Step title=\"Processing\" />\n            <Step title=\"Pending\" />\n          </Steps>\n        </div>\n        <Divider style={{ margin: 0 }} />\n        <div style={{ padding: '24px 20px' }}>\n          <p>\n            You can select multiple plugins for the current project so that our app will verify that\n            the plugins are installed and enabled.\n          </p>\n          <p style={{ marginTop: 20, marginBottom: 8, fontWeight: 600 }}>List of plugins</p>\n          <Table\n            columns={columns}\n            data={data}\n            pagination={false}\n            border={{\n              headerCell: true,\n              wrapper: true,\n            }}\n            rowKey=\"id\"\n            rowSelection={{\n              type: 'checkbox',\n              checkAll: true,\n            }}\n          ></Table>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Sidebar with Arco Design Layout in JavaScript\nDESCRIPTION: A React component demonstrating a basic layout with a resizable sidebar. The sidebar can be resized by dragging its right edge, with constraints on minimum and maximum width set to 150px and 500px respectively.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/resize.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Layout } from '@arco-design/web-react';\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nconst App = () => {\n  return (\n    <div className=\"layout-basic-demo\">\n      <Layout>\n        <Header>Header</Header>\n        <Layout>\n          <Sider\n            resizeDirections={['right']}\n            style={{\n              minWidth: 150,\n              maxWidth: 500,\n              height: 200,\n            }}\n          >\n            Sider\n          </Sider>\n          <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Grid Layout in React\nDESCRIPTION: Implements a responsive Grid component with dynamic column configurations for different screen sizes using Arco Design library\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/grid-responsive.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Grid, Switch, Typography } from '@arco-design/web-react';\n\nconst { GridItem } = Grid;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n        <Grid cols={{ xs: 1, sm: 2, md: 3, lg: 4, xl: 5, xxl: 6 }} colGap={12} rowGap={16} className=\"grid-responsive-demo\">\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\" span={{ xl: 4, xxl: 6 }} suffix>\n                suffix\n            </GridItem>\n        </Grid>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Mode in ArcoDesign Tree Component\nDESCRIPTION: This example demonstrates how to implement a controlled Tree component in ArcoDesign. It uses React state to manage selectedKeys, checkedKeys, and expandedKeys, with callback handlers that update the state when tree interactions occur. The example also includes buttons to toggle between selecting/deselecting all items and expanding/collapsing the tree.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/controled.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Button } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf 0-0-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'Leaf 0-0-2-1',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Leaf 0-1-1',\n        key: '0-1-1',\n      },\n      {\n        title: 'Leaf 0-1-2',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const allCheckedKeys = ['0-0', '0-0-1', '0-0-2', '0-0-2-1', '0-1', '0-1-1', '0-1-2'];\n  const allExpandedKeys = ['0-0', '0-1', '0-0-2'];\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [checkedKeys, setCheckedKeys] = useState([]);\n  const [expandedKeys, setExpandedKeys] = useState(allExpandedKeys);\n  return (\n    <div>\n      <Button.Group style={{ marginBottom: 20 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => setCheckedKeys(checkedKeys.length ? [] : allCheckedKeys)}\n        >\n          {checkedKeys.length ? 'deselect all' : 'select all'}\n        </Button>\n        <Button\n          type=\"primary\"\n          onClick={() => setExpandedKeys(expandedKeys.length ? [] : allExpandedKeys)}\n        >\n          {expandedKeys.length ? 'fold' : 'unfold'}\n        </Button>\n      </Button.Group>\n      <Tree\n        checkable\n        checkedKeys={checkedKeys}\n        selectedKeys={selectedKeys}\n        expandedKeys={expandedKeys}\n        onSelect={(keys, extra) => {\n          console.log(keys, extra);\n          setSelectedKeys(keys);\n        }}\n        onCheck={(keys, extra) => {\n          console.log(keys, extra);\n          setCheckedKeys(keys);\n        }}\n        onExpand={(keys, extra) => {\n          console.log(keys, extra);\n          setExpandedKeys(keys);\n        }}\n        treeData={TreeData}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Upload List with Preview in React\nDESCRIPTION: Creates a custom file upload list display using Arco Design components. Implements a card-based layout with image preview and delete functionality for each uploaded file. Uses Modal for image preview and supports both URL and Blob-based file display.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/renderUploadList.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Card, Modal } from '@arco-design/web-react';\nimport { IconEye, IconDelete } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const renderUploadList = (filesList, props) => (\n    <div style={{ display: 'flex', marginTop: 20, }} >\n      {filesList.map((file) => {\n        const url = file.url || URL.createObjectURL(file.originFile);\n        return (\n          <Card\n            key={file.uid}\n            hoverable\n            style={{\n              width: 140,\n              marginRight: 10,\n            }}\n            bodyStyle={{ padding: '4px 8px', }}\n            cover={\n              <img\n                src={url}\n                style={{ width: '100%', }}\n              />\n            }\n            actions={[\n              <div\n                onClick={() => {\n                  Modal.info({\n                    title: '预览',\n                    content: <img src={url || file.url} width=\"100%\" />,\n                  });\n                }}\n              >\n                <IconEye style={{ fontSize: 12, }} />\n              </div>,\n              <div>\n                <IconDelete\n                  style={{ fontSize: 12, }}\n                  onClick={() => {\n                    props.onRemove(file);\n                  }}\n                />\n              </div>,\n            ]}\n          >\n            <Card.Meta description={file.name.split('.')[0]} />\n          </Card>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <div>\n      <Upload\n        action=\"/\"\n        defaultFileList={[\n          {\n            uid: '-2',\n            name: 'light.png',\n            url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n          },\n          {\n            uid: '-1',\n            name: 'ice.png',\n            url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n          },\n        ]}\n        renderUploadList={renderUploadList}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Watermark Component with useWatermark Hook\nDESCRIPTION: Creates a custom watermark component using the useWatermark hook from Arco Design. The component allows setting custom content and styling for the watermark, with the watermark being applied to a container referenced using useRef. The example includes both the custom component implementation and its usage.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useWatermark/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useWatermark } from '@arco-design/web-react/hooks';\n\nconst CustomWatermark = (props) => {\n  const { setWatermark } = useWatermark({});\n\n  const containerRef = React.useRef();\n\n  React.useEffect(() => {\n    setWatermark({\n      content: props.content,\n      fontStyle: { color: 'pink' },\n      getContainer: () => containerRef.current,\n    });\n  }, [containerRef.current]);\n\n  return <div ref={containerRef} style={{position: 'relative'}}>{props.children}</div>;\n};\n\nconst App = () => {\n  return (\n    <CustomWatermark content=\"CustomWatermark\">\n      <div style={{ height: 200, background: 'var(--color-primary-light-1)' }}></div>\n    </CustomWatermark>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Form Layout in React\nDESCRIPTION: Creates a form with configurable layout options using Arco Design's Form component, allowing users to switch between horizontal, vertical, and inline layouts dynamically\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/layout.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Form, Input, Checkbox, Button, Radio } from '@arco-design/web-react';\n\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [layout, setLayout] = React.useState('horizontal');\n  return (\n    <Form\n      style={\n        layout === 'inline'\n          ? {\n              width: '100%',\n            }\n          : {\n              maxWidth: 600,\n            }\n      }\n      autoComplete=\"off\"\n      layout={layout}\n    >\n      <FormItem label=\"Layout\" >\n        <RadioGroup onChange={setLayout} type=\"button\" name=\"layout\" value={layout}>\n          <Radio value=\"horizontal\">horizontal</Radio>\n          <Radio value=\"vertical\">vertical</Radio>\n          <Radio value=\"inline\">inline</Radio>\n        </RadioGroup>\n      </FormItem>\n      <FormItem label=\"Username\" field=\"username\" tooltip={<div>Username is required </div>} rules={[{ required: true }]}>\n        <Input style={{ width: 270 }} placeholder=\"please enter your name\" />\n      </FormItem>\n      <FormItem label=\"Post\">\n        <Input style={{ width: 270 }} placeholder=\"please enter your post\" />\n      </FormItem>\n      <FormItem\n        wrapperCol={\n          layout === 'horizontal'\n            ? {\n                offset: 5,\n              }\n            : {}\n        }\n      >\n        <Checkbox>I have read the manual</Checkbox>\n      </FormItem>\n      <FormItem\n        wrapperCol={\n          layout === 'horizontal'\n            ? {\n                offset: 5,\n              }\n            : {}\n        }\n      >\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Lazy Loading with Arco Design\nDESCRIPTION: This JavaScript code demonstrates how to implement image lazy loading using the Arco Design Image component.  It imports the necessary components and defines an array of image sources. The Image component is then used to display each image with the lazyload property set to true, loading the image only when it is visible in the viewport. A custom loader with a Skeleton component indicates when an image is still being loaded.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/lazyload.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image, Space, Skeleton } from '@arco-design/web-react';\nconst imageSize = { width: 380, height: 150 };\nconst srcList = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/volcengine-solutions-medical.png~tplv-uwbnlip3yd-png.png',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/volcengine-solutions-automotive.png~tplv-uwbnlip3yd-png.png',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/volcengine-solutions-tourism.png~tplv-uwbnlip3yd-png.png',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/volcengine-solutions-finance.png~tplv-uwbnlip3yd-png.png',\n ];\n\nfunction App() {\n  return (\n     <Space direction=\"vertical\" size={50} className=\"image-demo-wrapper\">\n       {srcList.map((src, key) => (\n        <Image\n          key={key}\n          {...imageSize}\n          src={src}\n          alt=\"lamp\"\n          lazyload={{ threshold: 0.5 }}\n          loader={<Skeleton image={{ style: imageSize }} text={false} animation />} \n        />\n      ))}\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeBox SplitGroup with React\nDESCRIPTION: Creates a complex panel layout system using ResizeBox.SplitGroup with both horizontal and vertical splits. Features include custom collapse triggers, size constraints, and nested split groups with state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/splitGroup.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { ResizeBox, Typography } from '@arco-design/web-react';\nimport { IconDoubleLeft, IconDoubleRight } from '@arco-design/web-react/icon';\nconst { Paragraph, Text } = Typography;\nconst panes = [\n  {\n    size: 0.2,\n    collapsible: {\n      prev: true,\n    },\n  },\n  {\n    size: 0.4,\n    min: '50px',\n  },\n  {\n    resizable: false,\n    collapsible: {\n      prev: {\n        // 自定义伸缩杆向前快速收缩触发器\n        icon: <IconDoubleLeft />,\n        onClick: (_, collapsed, status, activeIndex) => {\n          console.log('快速收缩：', collapsed, status, activeIndex);\n        },\n      },\n      next: {\n        icon: <IconDoubleRight />,\n        onClick: (_, collapsed, status, activeIndex) => {\n          console.log('快速收缩：', collapsed, status, activeIndex);\n        },\n      },\n    },\n    // 自定义伸缩杆\n    trigger: (prev, resize, next) => {\n      return (\n        <div className=\"resizebox-split-group-demo-trigger\">\n          {prev}\n          {resize}\n          {next}\n        </div>\n      );\n    },\n  },\n  {},\n];\nconst verticalPanes = [\n  {\n    collapsible: true,\n  },\n  {\n    min: 0.1,\n    collapsible: {\n      next: true,\n    },\n  },\n  {},\n];\n\nconst HorizontalSplitGroup = () => {\n  const [offsets, setOffsets] = useState([]);\n  return (\n    <ResizeBox.SplitGroup\n      onMoving={(_, sizes) => setOffsets(sizes)}\n      className=\"resizebox-split-group-demo-horizontal\"\n      panes={panes.map((obj, index) => ({\n        content: (\n          <div className=\"resizebox-split-group-demo-content\">\n            <Paragraph>\n              <Paragraph>\n                <Text mark>pane {index}</Text>\n                <br />\n                <Text code>min：{obj.min || 0}</Text>\n                <br />\n                <Text code>size： {obj.size || 'not set'}</Text>\n                <br />\n                <Text code>offset：{offsets[index] || 'initial'}</Text>\n              </Paragraph>\n            </Paragraph>\n          </div>\n        ),\n        ...obj,\n      }))}\n    />\n  );\n};\n\nconst VerticalSplitGroup = () => {\n  return (\n    <ResizeBox.SplitGroup\n      className=\"resizebox-split-group-demo-vertical\"\n      direction=\"vertical\"\n      panes={verticalPanes.map((obj, index) => ({\n        content: (\n          <div className=\"resizebox-split-group-demo-content\">\n            <Text mark>pane {index}</Text>\n          </div>\n        ),\n        ...obj,\n      }))}\n    />\n  );\n};\n\nfunction App() {\n  return (\n    <ResizeBox.SplitGroup\n      direction=\"vertical\"\n      className=\"resizebox-split-group-demo\"\n      panes={[\n        {\n          content: <HorizontalSplitGroup />,\n          size: 0.4,\n        },\n        {\n          content: <VerticalSplitGroup />,\n        },\n      ]}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Progress Bars with React and Arco Design\nDESCRIPTION: This code snippet demonstrates how to create circular progress bars using the Progress component from Arco Design. It also includes a Slider component to dynamically update the progress value. The example showcases progress bars with different statuses: default, warning, error, and success.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/circle.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress, Slider } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = React.useState(20);\n  return (\n    <div>\n      <Progress type=\"circle\" percent={value} style={{ marginRight: 80 }} />\n      <Progress type=\"circle\" percent={value} status=\"warning\" style={{ marginRight: 80 }} />\n      <Progress type=\"circle\" percent={value} status=\"error\" style={{ marginRight: 80 }} />\n      <Progress type=\"circle\" percent={value} status=\"success\" style={{ marginRight: 80 }} />\n      <div style={{ marginTop: 40 }}>\n        <Slider value={value} onChange={setValue} style={{ width: 100 }}></Slider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Components with Arco Design in JavaScript\nDESCRIPTION: This snippet creates a React component using the Arco Design library. It demonstrates how to nest tab panels within tabs using the 'Tabs' and 'Typography' components from '@arco-design/web-react'. The example sets up a tab interface with tabs positioned to the left and includes a nested tab structure. Key properties used include 'tabPosition' for the main tabs and nested 'TabPane' components inside additional 'Tabs'. The styling is handled using a simple text alignment and margin style. Output consists of a structured tab layout with nested content panels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/inline.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tabs, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nconst App = () => {\n  return (\n    <Tabs tabPosition=\"left\">\n      <TabPane key=\"tab1\" title=\"Tab 1\">\n        <div>\n          <Tabs>\n            <TabPane key=\"tab1\" title=\"Tab 1\">\n              <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n            </TabPane>\n            <TabPane key=\"tab2\" title=\"Tab 2\">\n              <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n            </TabPane>\n            <TabPane key=\"tab3\" title=\"Tab 3\">\n              <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n            </TabPane>\n          </Tabs>\n        </div>\n      </TabPane>\n      <TabPane key=\"tab2\" title=\"Tab 2\">\n        <Typography.Paragraph>Content of Tab Panel 2</Typography.Paragraph>\n      </TabPane>\n      <TabPane key=\"tab3\" title=\"Tab 3\">\n        <Typography.Paragraph>Content of Tab Panel 3</Typography.Paragraph>\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Cells in React\nDESCRIPTION: Demonstrates how to highlight specific dates using the `dateRender` prop in the Arco Design DatePicker component. The example shows how to conditionally apply a custom style to certain dates based on their day of the month.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/dateRender.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nconst highlightStyle = {\n  border: '1px solid rgb(var(--arcoblue-6))',\n};\n\nconst App = () => {\n  return (\n    <DatePicker\n      dateRender={(current) => {\n        const date = current.date();\n        const highlightDates = [6, 14, 22];\n        return (\n          <div className=\"arco-picker-date\">\n            <div\n              className=\"arco-picker-date-value\"\n              style={highlightDates.indexOf(date) > -1 ? highlightStyle : {}}\n            >\n              {current.date()}\n            </div>\n          </div>\n        );\n      }}\n      style={{ width: 200 }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom SVG Icons\nDESCRIPTION: Method to import and render custom SVG icons with Arco Design styling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport IconIronMan from './Iron Man.svg';\n\n<IconIronMan className=\"arco-icon\" style={{ fontSize: '50px' }} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex PageHeader with ArcoDesign Components in React\nDESCRIPTION: Creates a PageHeader component with breadcrumb navigation, title, subtitle with tag, back button functionality, action buttons, and typography content. The component demonstrates the integration of multiple ArcoDesign components including Button, Tag, Message, and Typography.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__demo__/conplex.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PageHeader, Button, Tag, Message, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ background: 'var(--color-fill-2)', padding: 40 }}>\n      <PageHeader\n        style={{ background: 'var(--color-bg-2)' }}\n        title=\"ArcoDesign\"\n        subTitle={\n          <>\n            This is a description\n            <Tag color=\"red\" size=\"small\" style={{ marginLeft: 8 }}>\n              Default\n            </Tag>\n          </>\n        }\n        backIcon\n        onBack={() => Message.info('点击了返回按钮')}\n        breadcrumb={{\n          routes: [\n            {\n              path: '/',\n              breadcrumbName: 'Home',\n            },\n            {\n              path: '/channel',\n              breadcrumbName: 'Channel',\n            },\n            {\n              path: '/news',\n              breadcrumbName: 'News',\n            },\n          ],\n        }}\n        extra={\n          <div>\n            <Button type=\"secondary\" style={{ marginRight: 12 }}>\n              Cancel\n            </Button>\n            <Button type=\"primary\">Save</Button>\n          </div>\n        }\n      >\n        <Typography.Paragraph\n          style={{\n            fontSize: 16,\n            fontWeight: 600,\n            marginTop: 0,\n            marginBottom: 20,\n          }}\n        >\n          For other uses, see Design\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          A design is a plan or specification for the construction of an object or system or for the\n          implementation of an activity or process, or the result of that plan or specification in\n          the form of a prototype, product or process. The verb to design expresses the process of\n          developing a design. In some cases, the direct construction of an object without an\n          explicit prior plan (such as in craftwork, some engineering, coding, and graphic design)\n          may also be considered to be a design activity. The design usually has to satisfy certain\n          goals and constraints, may take into account aesthetic, functional, economic, or\n          socio-political considerations, and is expected to interact with a certain environment.\n          Major examples of designs include architectural blueprints,engineering drawings, business\n          processes, circuit diagrams, and sewing patterns.Major examples of designs include\n          architectural blueprints,engineering drawings, business processes, circuit diagrams, and\n          sewing patterns.\n        </Typography.Paragraph>\n      </PageHeader>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker Components with Default Values in React\nDESCRIPTION: This code snippet demonstrates the usage of various DatePicker components from Arco Design with default values. It includes examples of single date selection, year, month, and week pickers, as well as date range selection. The code also shows how to handle onSelect and onChange events, and how to apply custom formatting.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/defaultValue.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\nconst { YearPicker, MonthPicker, WeekPicker, RangePicker } = DatePicker;\n\nfunction onSelect(dateString, date) {\n  console.log('onSelect', dateString, date);\n}\n\nfunction onChange(dateString, date) {\n  console.log('onChange: ', dateString, date);\n}\n\nconst style = {\n  width: 220,\n  marginBottom: 24,\n  marginRight: 24,\n};\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker defaultValue=\"2019-06-03\" onSelect={onSelect} onChange={onChange} style={style} />\n      <DatePicker\n        defaultValue=\"2019-06-03\"\n        format={(value) => `custom format: ${value.format('YYYY-MM-DD')}`}\n        onSelect={onSelect}\n        onChange={onChange}\n        style={{ ...style, width: 240 }}\n      />\n      <DatePicker\n        showTime\n        defaultValue=\"2019-06-03 08:00:00\"\n        onSelect={onSelect}\n        onChange={onChange}\n        style={style}\n      />\n      <YearPicker defaultValue=\"2019\" onSelect={onSelect} onChange={onChange} style={style} />\n      <MonthPicker defaultValue=\"2019-06\" onSelect={onSelect} onChange={onChange} style={style} />\n      <WeekPicker\n        defaultValue={dayjs('2019-08-02')}\n        onSelect={onSelect}\n        onChange={onChange}\n        style={style}\n      />\n      <RangePicker\n        showTime\n        defaultValue={['2019-08-08 00:00:00', '2019-08-18 09:09:06']}\n        onSelect={onSelect}\n        onChange={onChange}\n        style={{ ...style, width: 360 }}\n      />\n      <RangePicker\n        mode=\"month\"\n        defaultValue={['2019-08', '2020-06']}\n        onSelect={onSelect}\n        onChange={onChange}\n        style={{ width: 300, marginBottom: 24 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Extra Node in Tree Component with React and Arco Design\nDESCRIPTION: This code demonstrates how to customize a Tree component with extra nodes using Arco Design. It uses the renderExtra property to add a plus icon to each node, which when clicked adds a new child node to the tree. The component maintains its state using React hooks and updates the tree data dynamically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/renderTreeNode.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Checkbox } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\n\nconst TreeNode = Tree.Node; // 从treedata 生成 treenode\n\nconst generatorTreeNodes = (treeData) => {\n  return treeData.map((item) => {\n    const { children, key, ...rest } = item;\n    return (\n      <Tree.Node key={key} {...rest} dataRef={item}>\n        {children ? generatorTreeNodes(item.children) : null}\n      </Tree.Node>\n    );\n  });\n};\n\nconst TreeData = [\n  {\n    title: 'Trunk',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf',\n            key: '0-1-1-2',\n          },\n        ],\n      },\n      {\n        title: 'Leaf',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  return (\n    <div style={{ width: 500, padding: 2, overflow: 'auto' }}>\n      <Tree\n        blockNode\n        checkable\n        renderExtra={(node) => {\n          return (\n            <IconPlus\n              style={{\n                position: 'absolute',\n                right: 8,\n                fontSize: 12,\n                top: 10,\n                color: '#3370ff',\n              }}\n              onClick={() => {\n                const dataChildren = node.dataRef.children || [];\n                dataChildren.push({\n                  title: 'new tree node',\n                  key: node._key + '-' + (dataChildren.length + 1),\n                });\n                node.dataRef.children = dataChildren;\n                setTreeData([...treeData]);\n              }}\n            />\n          );\n        }}\n      >\n        {generatorTreeNodes(treeData)}\n      </Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Adjustable Tree Component in React with Arco Design\nDESCRIPTION: This React component demonstrates how to create a tree structure with adjustable sizes using Arco Design's Tree component. It includes a Radio button group that allows users to switch between mini, small, default, and large sizes, affecting the display of the nested tree structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Tree, Radio } from '@arco-design/web-react';\n\nconst TreeNode = Tree.Node;\n\nfunction App() {\n  const [size, setSize] = React.useState('default');\n  return (\n    <div>\n      <Radio.Group\n        options={['mini', 'small', 'default', 'large']}\n        type=\"button\"\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 20 }}\n      ></Radio.Group>\n      <Tree blockNode style={{ marginRight: 20 }} checkable size={size}>\n        <TreeNode title=\"Trunk 0-0\" key=\"0-0\">\n          <TreeNode title=\"Branch 0-0-0\" key=\"0-0-0\" disabled>\n            <TreeNode title=\"Leaf\" key=\"0-0-0-0\" />\n            <TreeNode title=\"Leaf\" key=\"0-0-0-1\" />\n          </TreeNode>\n          <TreeNode title=\"Branch 0-0-1\" key=\"0-0-1\">\n            <TreeNode title=\"Leaf\" key=\"0-0-1-0\" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Slider with Marks in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the `Slider` component from `@arco-design/web-react` to create a slider with custom marks. The `marks` property is used to define the labels that appear at specific values along the slider. The `onlyMarkValue` property is also showcased, restricting the slider to only select marked values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/marks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@arco-design/web-react';\nimport { IconClockCircle } from '@arco-design/web-react/icon';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div style={{ width: 240 }}>\n        <Slider\n          defaultValue={5}\n          max={15}\n          marks={{\n            0: '0km',\n            5: '5km',\n            10: '10km',\n            15: '15km',\n          }}\n          style={{ marginBottom: 80 }}\n        />\n        <Slider\n          onlyMarkValue\n          defaultValue={10}\n          max={15}\n          marks={{\n            0: '0km',\n            5: '5km',\n            10: '10km',\n            15: '15km',\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu with Popup Positions - React\nDESCRIPTION: This snippet imports components from the Arco Design library to create a dropdown menu that supports six different popup positions. The dropdown items are rendered based on an array of positions and descriptions. Each position corresponds to a button that, when clicked, displays the dropdown menu.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dropdown, Menu, Button, Space } from '@arco-design/web-react';\nconst positions = ['bl', 'bottom', 'br', 'tl', 'top', 'tr'];\nconst descriptions = ['BottomLeft', 'BottomCenter', 'BottomRight', 'TopLeft', 'Top', 'TopRight'];\nconst App = () => {\n  return (\n    <Space size=\"large\" className=\"dropdown-demo\">\n      {positions.map((position, index) => (\n        <Dropdown\n          key={index}\n          position={position}\n          droplist={\n            <Menu>\n              <Menu.Item key=\"1\">Menu Item 1</Menu.Item>\n              <Menu.Item key=\"2\">Menu Item 2</Menu.Item>\n              <Menu.Item key=\"3\">Menu Item 3</Menu.Item>\n            </Menu>\n          }\n        >\n          <Button type=\"secondary\">{descriptions[index]}</Button>\n        </Dropdown>\n      ))}\n    </Space>\n  );\n};\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Removal Confirmation in React\nDESCRIPTION: This code snippet demonstrates how to create a file upload component using @arco-design/web-react with a custom onRemove function that displays a confirmation modal before deleting a file. It also includes default file list initialization.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/onRemove.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Upload, Modal } from '@arco-design/web-react';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Upload\n          multiple\n          action=\"/\"\n          onRemove={(file) => {\n            return new Promise((resolve, reject) => {\n              Modal.confirm({\n                title: 'onRemove',\n                content: `确认删除 ${file.name}`,\n                onConfirm: () => resolve(true),\n                onCancel: () => reject('cancel'),\n              });\n            });\n          }}\n          defaultFileList={[\n            {\n              uid: '-2',\n              name: 'light.png',\n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n            },\n            {\n              uid: '-1',\n              name: 'ice.png',\n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n            },\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Arco Design Select with Dynamic Options\nDESCRIPTION: Creates a select component with dynamically generated options and allows creating new options not in the original list\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/allow-create.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Select, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = [];\n\nfor (let i = 10; i < 24; i++) {\n  options.push(i.toString(36) + i);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Async Close in React using Arco Design\nDESCRIPTION: This code demonstrates a React implementation of a modal dialog with an asynchronous closing mechanism. It uses Arco Design components to create a form inside a modal, validates the form on submission, shows a loading state, and closes the modal after a simulated async operation completes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/async_close.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Modal, Button, Form, Input, Select, Message } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const [form] = Form.useForm();\n\n  function onOk() {\n    form.validate().then((res) => {\n      setConfirmLoading(true);\n      setTimeout(() => {\n        Message.success('Success !');\n        setVisible(false);\n        setConfirmLoading(false);\n      }, 1500);\n    });\n  }\n\n  const formItemLayout = {\n    labelCol: {\n      span: 4,\n    },\n    wrapperCol: {\n      span: 20,\n    },\n  };\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Open Modal with async logic\n      </Button>\n      <Modal\n        title=\"Add User\"\n        visible={visible}\n        onOk={onOk}\n        confirmLoading={confirmLoading}\n        onCancel={() => setVisible(false)}\n      >\n        <Form\n          {...formItemLayout}\n          form={form}\n          labelCol={{\n            style: { flexBasis: 90 },\n          }}\n          wrapperCol={{\n            style: { flexBasis: 'calc(100% - 90px)' },\n          }}\n        >\n          <FormItem label=\"Name\" field=\"name\" rules={[{ required: true }]}>\n            <Input placeholder=\"\" />\n          </FormItem>\n          <FormItem label=\"Gender\" required field=\"sex\" rules={[{ required: true }]}>\n            <Select options={['男', '女']} />\n          </FormItem>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with Preset and History Colors in React\nDESCRIPTION: Creates a color picker component with preset colors and history tracking functionality. Uses React hooks for state management to maintain the current color and a history of selected colors. The history is updated whenever the color picker modal is closed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/colors.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { ColorPicker } from '@arco-design/web-react';\n\nconst App = () => {\n  const [color, setColor] = useState('#165DFF')\n  const [history, setHistory] = useState([]);\n\n  const addHistory = (visible) => {\n    if (!visible) {\n      const newHistory = [...history.slice(-10), color];\n      setHistory(newHistory)\n    }\n  }\n\n  return (\n    <div>\n      <div>Preset: </div>\n      <ColorPicker defaultValue={'#165DFF'} showPreset showText />\n      <div style={{ marginTop: 10 }} />\n      <div>History & Preset: </div>\n      <ColorPicker value={color} historyColors={history} showPreset showHistory showText onChange={setColor}\n                   onVisibleChange={addHistory} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in TreeSelect Component with React\nDESCRIPTION: This code demonstrates how to implement multiple selection in the TreeSelect component from Arco Design. The example includes a tree structure with icons, state management for selected values, and two variants of the TreeSelect component - one standard and one with maximum tag count display limited to 2 tags.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/multiple.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Space } from '@arco-design/web-react';\nimport { IconCalendar } from '@arco-design/web-react/icon';\n\nconst treeData = [\n  {\n    key: 'node1',\n    icon: <IconCalendar />,\n    title: 'Trunk',\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    icon: <IconCalendar />,\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    value: [],\n  };\n  handleChange = (value) => {\n    console.log(value);\n    this.setState({\n      value,\n    });\n  };\n\n  render() {\n    return (\n      <Space size=\"large\">\n        <TreeSelect\n          allowClear\n          placeholder=\"Please select ...\"\n          multiple\n          showSearch\n          treeData={treeData}\n          value={this.state.value}\n          onChange={this.handleChange}\n          style={{ width: 300 }}\n        />\n        <TreeSelect\n          allowClear\n          placeholder=\"Max display 2 tags\"\n          multiple\n          showSearch\n          maxTagCount={2}\n          treeData={treeData}\n          value={this.state.value}\n          onChange={this.handleChange}\n          style={{ width: 300 }}\n        />\n      </Space>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cascader Component with Search\nDESCRIPTION: React component implementation showing a customized Cascader with a searchable dropdown menu for city selection. Uses Arco Design components and maintains selected city state with custom rendering of the trigger element.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/custom_children.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Link, Typography, Input, Divider } from '@arco-design/web-react';\n\nconst options = [\n  {\n    value: 'Beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'Chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'Datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'Dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'Xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'Haidian',\n            label: 'Haidian',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'Shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'Shanghai',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'Huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    text: ['Shanghai', 'Shanghai', 'Huangpu'].join(', '),\n    inputValue: '',\n  };\n  onChange = (value, selectedOptions) => {\n    this.setState({\n      text: selectedOptions.map((a) => a.label).join(', '),\n    });\n  };\n  onInputValueChange = (inputValue) => {\n    this.setState({\n      inputValue,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Typography.Text>City</Typography.Text>\n        <Cascader\n          defaultValue={['Shanghai', 'Shanghai', 'Huangpu']}\n          placeholder=\"Please select ...\"\n          inputValue={this.state.inputValue}\n          style={{ width: 300 }}\n          options={options}\n          onChange={this.onChange}\n          dropdownRender={(menu) => {\n            return (\n              <div\n                style={{ maxWidth: 'fit-content', minWidth: 120 }}\n              >\n                <div\n                  style={{ padding: '6px 8px' }}\n                >\n                  <Input.Search\n                    placeholder=\"Please select ...\"\n                    allowClear\n                    onChange={this.onInputValueChange}\n                    value={this.state.inputValue}\n                  />\n                </div>\n\n                <Divider\n                  style={{ margin: 0 }}\n                />\n                {menu}\n              </div>\n            );\n          }}\n        >\n          <Link className=\"trigger-element\" role=\"button\" tabIndex={0}>{this.state.text}</Link>\n        </Cascader>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cell Merge in Arco Design Table in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a table with cell merging capabilities using Arco Design's web-react Table component. The snippet includes a configuration where headers and specific cells can span multiple columns or rows based on their index values. The dependencies required are the Arco Design web-react library. The inputs include column definitions with custom render functions to apply cell spans and a dataset to populate the table. The table renders with merged cells for specific indices, depending on their position.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/rowspan.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    render: (col, item, index) => {\n      const obj = {\n        children: col,\n        props: {},\n      };\n\n      if (index > 3) {\n        obj.props.colSpan = 2;\n      }\n\n      return obj;\n    },\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    render: (col, item, index) => {\n      const obj = {\n        children: col,\n        props: {},\n      };\n\n      if (index > 3) {\n        obj.props.colSpan = 0;\n      }\n\n      return obj;\n    },\n  },\n  {\n    title: 'Detail',\n    dataIndex: 'address',\n    colSpan: 2,\n    render: (col, item, index) => {\n      const obj = {\n        children: col,\n        props: {},\n      };\n\n      if (index === 0) {\n        obj.props.rowSpan = 3;\n      }\n\n      if (index === 1 || index === 2) {\n        obj.props.rowSpan = 0;\n      }\n\n      return obj;\n    },\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    colSpan: 0,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nconst App = () => {\n  return <Table border borderCell hover columns={columns} data={data} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Input with different sizes in React\nDESCRIPTION: This React component (`App`) demonstrates how to use the `Input` component from `@arco-design/web-react` with different sizes and customized height. The component utilizes a RadioGroup to control the size and a Slider to control the height of the Input. Props are dynamically set based on the selected size and height and passed to multiple Input components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Input, Radio, Select, Slider, Typography } from '@arco-design/web-react';\nimport { IconClockCircle, IconSearch, IconInfoCircle } from '@arco-design/web-react/icon';\n\nconst RadioGroup = Radio.Group;\nconst InputSearch = Input.Search;\n\nclass App extends React.Component {\n  state = {\n    size: 'default',\n    height: 0,\n  };\n  handleHeightChange = (height) => {\n    this.setState({\n      height,\n    });\n  };\n  handleChange = (size) => {\n    this.setState({\n      height: undefined,\n      size,\n    });\n  };\n\n  render() {\n    const { size, height } = this.state;\n    const props = {\n      size,\n    };\n\n    if (height) {\n      props.height = height;\n    }\n\n    return (\n      <div>\n        <RadioGroup\n          type=\"button\"\n          mode=\"fill\"\n          name=\"size\"\n          value={this.state.size}\n          onChange={this.handleChange}\n          style={{ marginBottom: 24 }}\n        >\n          {['mini', 'small', 'default', 'large'].map((x) => {\n            return (\n              <Radio key={x} value={x}>\n                {x}\n              </Radio>\n            );\n          })}\n        </RadioGroup>\n        <br />\n        <Typography.Text>Custom height</Typography.Text>\n        <Slider\n          value={this.state.height}\n          onChange={this.handleHeightChange}\n          max={60}\n          min={24}\n          style={{ width: 180, margin: '0 0 20px 20px' }}\n        />\n        <div>\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            prefix={<IconClockCircle />}\n            placeholder=\"Enter something\"\n          />\n          <Input\n            {...props}\n             style={{ width: 350, margin: 12 }}\n            suffix={<IconInfoCircle />}\n            placeholder=\"Enter something\"\n          />\n        </div>\n        <div>\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            addAfter=\"KG\"\n            placeholder=\"Enter something\"\n          />\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            addBefore=\"+86\"\n            placeholder=\"Enter phone number\"\n          />\n        </div>\n        <div>\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            addBefore=\"+86\"\n            addAfter={<IconSearch />}\n            prefix={<IconClockCircle />}\n            suffix={<IconInfoCircle />}\n            allowClear\n            placeholder=\"Enter phone number\"\n          />\n          <InputSearch\n            {...props}\n            placeholder=\"Enter something\"\n            style={{ width: 350, margin: 12 }}\n            searchButton={true}\n          />\n        </div>\n        <div>\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            addBefore={\n              <Select size={size} placeholder=\"Select protocol\" style={{ width: 100 }}>\n                <Select.Option value=\"http://\">http://</Select.Option>\n                <Select.Option value=\"https://\">https://</Select.Option>\n              </Select>\n            }\n            allowClear={true}\n            placeholder=\"Enter something\"\n          />\n          <Input\n            {...props}\n            style={{ width: 350, margin: 12 }}\n            allowClear={true}\n            placeholder=\"Enter something\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Permissions in Routes TypeScript File\nDESCRIPTION: This snippet demonstrates how to add permission requirements to menu items in the routes configuration file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst routes = [\n  {\n    name: 'menu.visualization',\n    key: 'visualization',\n    children: [\n      {\n        name: 'menu.visualization.dataAnalysis',\n        key: 'visualization/data-analysis',\n        requiredPermissions: [\n          { resource: 'menu.visualization.dataAnalysis', actions: ['read'] },\n        ],\n      },\n      {\n        name: 'menu.visualization.multiDimensionDataAnalysis',\n        key: 'visualization/multi-dimension-data-analysis',\n        requiredPermissions: [\n          {\n            resource: 'menu.visualization.dataAnalysis',\n            actions: ['read', 'write'],\n          },\n          {\n            resource: 'menu.visualization.multiDimensionDataAnalysis',\n            actions: ['write'],\n          },\n        ],\n        oneOfPerm: true,\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Grid Layout with React and Arco Design\nDESCRIPTION: This React component demonstrates the usage of the Arco Design Grid component to create a grid layout with configurable columns, column gap, and row gap. It also demonstrates the collapse property and how to add a suffix to a grid item.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/grid.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Grid, Switch, Typography } from '@arco-design/web-react';\n\nconst { GridItem } = Grid;\n\nconst App = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  return (\n    <div style={{ width: '100%' }}>\n        <div style={{ marginBottom: '20px' }}>\n            <Typography.Text>折叠：</Typography.Text>\n            <Switch checked={collapsed} onChange={setCollapsed}  />\n        </div>\n        <Grid collapsed={collapsed} cols={3} colGap={12} rowGap={16} className=\"grid-demo-grid\">\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\" offset={1}>item | offset - 1</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\" span={3}>item | span - 3</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\">item</GridItem>\n            <GridItem className=\"demo-item\" suffix>{{\n              overflow\n            } => `suffix | overflow: ${!!overflow}`\n            }</GridItem>\n        </Grid>\n    </div>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Floating Menu with Arco Design\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a floating menu using Arco Design's `Menu` component with `mode=\"pop\"`. It includes several `MenuItem` and `SubMenu` components with icons and text. The component imports necessary modules from `@arco-design/web-react` and `@arco-design/web-react/icon`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/pop.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@arco-design/web-react';\nimport { IconApps, IconSafe, IconBulb, IconRobot, IconFire } from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\n\nconst App = () => {\n  return (\n    <div className=\"menu-demo-round\" style={{ height: 600 }}>\n      <Menu style={{ width: 200 }} mode=\"pop\" hasCollapseButton>\n        <MenuItem key=\"0\">\n          <IconApps />\n          Navigation 1\n        </MenuItem>\n        <SubMenu\n          key=\"1\"\n          title={\n            <>\n              <IconRobot />\n              Navigation 2\n            </>\n          }\n        >\n          <MenuItem key=\"1_0\">Beijing</MenuItem>\n          <MenuItem key=\"1_1\">Shanghai</MenuItem>\n          <MenuItem key=\"1_2\">Guangzhou</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"2\"\n          title={\n            <>\n              <IconBulb />\n              Navigation 3\n            </>\n          }\n        >\n          <MenuItem key=\"2_0\">Wuhan</MenuItem>\n          <MenuItem key=\"2_1\">Chengdu</MenuItem>\n        </SubMenu>\n        <MenuItem key=\"3\">\n          <IconSafe />\n          Navigation 4\n        </MenuItem>\n        <MenuItem key=\"4\">\n          <IconFire />\n          Navigation 5\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Cascader Components in React\nDESCRIPTION: Example showing controlled Cascader components with single and multiple selection modes. The component uses a hierarchical data structure of locations (Beijing, Shanghai) and demonstrates value management through state, search functionality, and change handlers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Space } from '@arco-design/web-react';\n\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    value: undefined,\n    value1: undefined,\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        value: [['beijing', 'Beijing', 'chaoyang', 'datunli']],\n      });\n    }, 200);\n  }\n\n  render() {\n    return (\n      <Space size=\"large\">\n        <Cascader\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n          showSearch\n          value={this.state.value1}\n          onChange={(value, option) => {\n            console.log(option);\n            this.setState({\n              value1: value,\n            });\n          }}\n        ></Cascader>\n        <Cascader\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n          showSearch\n          mode=\"multiple\"\n          value={this.state.value}\n          onChange={(value, options) => {\n            console.log(value, options);\n            this.setState({\n              value,\n            });\n          }}\n        />\n      </Space>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting up Multiple Column Sorter in React using Arco Design\nDESCRIPTION: This snippet defines a React functional component that integrates a table with multiple sortable columns. Each column can define its sorting mechanism and priority using the `sorter` property. The component ensures consistent state handling through the `sortOrder` property across specified sortable columns.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/multiple-sorter.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Table } from '@arco-design/web-react';\n\nconst App = () => {\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: (a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n        return 0;\n      },\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      sorter: (a, b) => a.age - b.age,\n    },\n    {\n      title: 'Score A',\n      dataIndex: 'scoreA',\n      defaultSortOrder: 'descend',\n      sorter: {\n        compare: (a, b) => a.scoreA - b.scoreA,\n        multiple: 3,\n      },\n    },\n    {\n      title: 'Score B',\n      dataIndex: 'scoreB',\n      defaultSortOrder: 'ascend',\n      sorter: {\n        compare: (a, b) => a.scoreB - b.scoreB,\n        multiple: 2,\n      },\n    },\n    {\n      title: 'Score C',\n      dataIndex: 'scoreC',\n      sorter: {\n        compare: (a, b) => a.scoreC - b.scoreC,\n        multiple: 1,\n      },\n    },\n  ];\n  const data = [\n    {\n      key: '1',\n      name: 'A',\n      age: 18,\n      scoreA: 100,\n      scoreB: 60,\n      scoreC: 70,\n    },\n    {\n      key: '2',\n      name: 'B',\n      age: 17,\n      scoreA: 100,\n      scoreB: 90,\n      scoreC: 80,\n    },\n    {\n      key: '3',\n      name: 'C',\n      age: 19,\n      scoreA: 100,\n      scoreB: 70,\n      scoreC: 60,\n    },\n    {\n      key: '4',\n      name: 'D',\n      age: 15,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 100,\n    },\n    {\n      key: '5',\n      name: 'E',\n      age: 20,\n      scoreA: 80,\n      scoreB: 70,\n      scoreC: 90,\n    },\n  ];\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      onChange={(pagination, changedSorter) => {\n        console.log(changedSorter);\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Validating Form Status with Arco Design in React - JavaScript\nDESCRIPTION: The code snippet provides an example of how to use Arco Design's form components to create a form with customizable validation statuses and feedback messages in a React application. It imports necessary components from '@arco-design/web-react' and demonstrates their usage with the 'Form.Item' component. Key components include Input, AutoComplete, and DatePicker, among others. Status changes are managed via two Radio.Group elements, allowing for dynamic adjustment of the form's appearance based on validation status and size.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/validate-status.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport {\n  Form,\n  AutoComplete,\n  Input,\n  Select,\n  Cascader,\n  InputNumber,\n  Grid,\n  DatePicker,\n  TreeSelect,\n  TimePicker,\n  Radio,\n} from '@arco-design/web-react';\n\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [status, setStatus] = React.useState('error');\n  const [size, setSize] = React.useState('default');\n  return (\n    <div style={{ maxWidth: 650 }}>\n      <Form labelCol={{ span: 8 }} autoComplete=\"off\" wrapperCol={{ span: 16 }} size={size}>\n        <div>\n          <Radio.Group\n            value={status}\n            type=\"button\"\n            onChange={setStatus}\n            options={['validating', 'success', 'error', 'warning']}\n          ></Radio.Group>\n          <br />\n          <br />\n\n          <Radio.Group\n            type=\"button\"\n            onChange={setSize}\n            options={['mini', 'small', 'default', 'large']}\n          ></Radio.Group>\n        </div>\n        <br />\n        <FormItem\n          hasFeedback\n          validateStatus={status}\n          help=\"This is custom message\"\n          extra=\"This is extra text\"\n        >\n          <Input placeholder=\"Input... \" />\n        </FormItem>\n        <FormItem\n          hasFeedback\n          validateStatus={status}\n          help=\"This is custom message\"\n          extra=\"This is extra text\"\n        >\n          <div>\n            <Input placeholder=\"Input... \" allowClear />\n          </div>\n        </FormItem>\n        <FormItem hasFeedback validateStatus={status} help=\"Choose at least one\">\n          <AutoComplete\n            style={{ width: '100%' }}\n            placeholder=\"AutoComplete...\"\n            data={['123', '234', '345', '456']}\n          />\n        </FormItem>\n        <FormItem hasFeedback validateStatus={status}>\n          <DatePicker.RangePicker\n            style={{ width: '100%' }}\n            showTime\n            onChange={(a) => {\n              console.log(a);\n            }}\n            placeholder={['Start Time', 'End Time']}\n          />\n        </FormItem>\n        <FormItem help=\"Please select date\" validateStatus={status} hasFeedback>\n          <Input.Group>\n            <DatePicker style={{ width: '48%' }} placeholder=\"Select date\" />\n            <span\n              style={{\n                width: '4%',\n                display: 'inline-block',\n                textAlign: 'center',\n              }}\n            >\n              -\n            </span>\n            <TimePicker placeholder=\"Select time\" style={{ width: '48%' }}  />\n          </Input.Group>\n        </FormItem>\n        <FormItem hasFeedback validateStatus={status} help=\"Choose at least one\">\n          <Cascader placeholder=\"Cascader...\" allowClear options={[]} />\n        </FormItem>\n        <FormItem hasFeedback validateStatus={status}>\n          <Select\n            mode=\"multiple\"\n            allowCreate\n            placeholder=\"Select...\"\n            options={['a', 'b', 'c', 'd', 'e']}\n          />\n        </FormItem>\n        <FormItem hasFeedback validateStatus={status} help=\"This is InputNumber\">\n          <InputNumber placeholder=\"InputNumber...\" />\n        </FormItem>\n        <FormItem help=\"Select tree node\" hasFeedback validateStatus={status}>\n          <TreeSelect placeholder=\"TreeSelect...\">\n            <TreeSelect.Node key=\"node1\" title=\"Node 1\">\n              <TreeSelect.Node key=\"node2\" title=\"Node 2\" />\n            </TreeSelect.Node>\n          </TreeSelect>\n        </FormItem>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Shortcuts in Arco Design DatePicker using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Arco Design DatePicker, MonthPicker, and RangePicker components with shortcut options, allowing users to quickly select common date ranges. It requires `@arco-design/web-react` for UI components and `dayjs` for date manipulation. The code includes setting up JSX components with predefined shortcuts using `dayjs` to calculate relative dates such as 'next 7 days' or 'next 12 months'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/shortcuts.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\\nimport dayjs from 'dayjs';\\nconst { MonthPicker, RangePicker } = DatePicker;\\n\\nconst App = () => {\\n  return (\\n    <div>\\n      <DatePicker\\n        style={{ width: 200, marginBottom: 24, marginRight: 24 }}\\n        shortcuts={[\\n          {\\n            text: 'a month later',\\n            value: () => dayjs().add(1, 'month'),\\n          },\\n        ]}\\n        showTime\\n      />\\n      <MonthPicker\\n        style={{ width: 200, marginBottom: 24, marginRight: 24 }}\\n        shortcuts={[\\n          {\\n            text: 'last month',\\n            value: () => dayjs().subtract(1, 'month'),\\n          },\\n          {\\n            text: 'six months later',\\n            value: () => dayjs().add(6, 'month'),\\n          },\\n          {\\n            text: 'two years later',\\n            value: () => dayjs().add(2, 'year'),\\n          },\\n        ]}\\n      />\\n      <RangePicker\\n        style={{ width: 280, marginBottom: 24, marginRight: 24 }}\\n        shortcuts={[\\n          {\\n            text: 'next 7 days',\\n            value: () => [dayjs(), dayjs().add(1, 'week')],\\n          },\\n          {\\n            text: 'next 30 days',\\n            value: () => [dayjs(), dayjs().add(1, 'month')],\\n          },\\n          {\\n            text: 'next 365 days',\\n            value: () => [dayjs(), dayjs().add(1, 'year')],\\n          },\\n        ]}\\n      />\\n      <RangePicker\\n        style={{ width: 240, marginBottom: 24 }}\\n        mode=\\\"month\\\"\\n        shortcuts={[\\n          {\\n            text: 'next 6 months',\\n            value: () => [dayjs(), dayjs().add(6, 'month')],\\n          },\\n          {\\n            text: 'next 12 months',\\n            value: () => [dayjs(), dayjs().add(1, 'year')],\\n          },\\n          {\\n            text: 'next 10 years',\\n            value: () => [dayjs(), dayjs().add(10, 'year')],\\n          },\\n        ]}\\n      />\\n    </div>\\n  );\\n};\\n\\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Time Selection in React\nDESCRIPTION: This code snippet demonstrates how to use the DatePicker and RangePicker components from Arco Design with time selection enabled. It shows different configurations for time formats, default values, and event handling for onChange, onSelect, and onOk events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/showtime.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nconst { RangePicker } = DatePicker;\nconst style = {\n  width: 220,\n  margin: '0 24px 24px 0',\n};\n\nfunction onSelect(dateString, date) {\n  console.log('onSelect', dateString, date);\n}\n\nfunction onChange(dateString, date) {\n  console.log('onChange: ', dateString, date);\n}\n\nfunction onOk(dateString, date) {\n  console.log('onOk: ', dateString, date);\n}\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker\n        style={style}\n        showTime={{\n          defaultValue: '04:05:06',\n        }}\n        format=\"YYYY-MM-DD HH:mm:ss\"\n        onChange={onChange}\n        onSelect={onSelect}\n        onOk={onOk}\n      />\n      <DatePicker\n        style={style}\n        showTime\n        format=\"YYYY-MM-DD hh:mm A\"\n        onChange={onChange}\n        onSelect={onSelect}\n        onOk={onOk}\n      />\n      <RangePicker\n        style={{ ...style, width: 360 }}\n        showTime={{\n          defaultValue: ['00:00', '04:05'],\n          format: 'HH:mm',\n        }}\n        format=\"YYYY-MM-DD HH:mm\"\n        onChange={onChange}\n        onSelect={onSelect}\n        onOk={onOk}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Extending TreeSelect Dropdown Menu in React with Custom Elements\nDESCRIPTION: This code demonstrates how to customize the TreeSelect dropdown menu by adding an input field and button to create new tree items. It uses the dropdownRender prop to wrap the original menu with additional components and manages the tree data with React state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/dropdownRender.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect, Divider, Input, Button } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\n\nconst defaultTreeData = [\n  {\n    key: 'node1',\n    title: 'Trunk',\n    disabled: true,\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(defaultTreeData);\n  const [inputValue, setInputValue] = useState('');\n\n  const addItem = () => {\n    setTreeData([\n      ...treeData,\n      {\n        key: inputValue,\n        title: inputValue,\n      },\n    ]);\n  };\n\n  return (\n    <TreeSelect\n      placeholder=\"Please select ...\"\n      treeData={treeData}\n      style={{ width: 300 }}\n      allowClear\n      dropdownMenuStyle={{\n        maxHeight: 250,\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n      dropdownRender={(menu) => (\n        <>\n          <div style={{ flex: 1, overflow: 'auto' }}>{menu}</div>\n          <div>\n            <Divider style={{ margin: 0 }} />\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '10px 12px',\n              }}\n            >\n              <Input\n                size=\"small\"\n                style={{ marginRight: 18 }}\n                value={inputValue}\n                onChange={(value) => setInputValue(value)}\n              />\n              <Button\n                style={{ fontSize: 14, padding: '0 6px' }}\n                type=\"text\"\n                size=\"mini\"\n                onClick={addItem}\n              >\n                <IconPlus />\n                Add item\n              </Button>\n            </div>\n          </div>\n        </>\n      )}\n    ></TreeSelect>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced AutoComplete with Tooltip in React\nDESCRIPTION: This snippet demonstrates an advanced implementation of the AutoComplete component from Arco Design. It includes a Tooltip for user guidance, custom data structure for suggestions, and conditional value setting based on user input and blur events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/advance.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete, Tooltip } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState('Beijing');\n  return (\n    <Tooltip trigger=\"focus\" content=\"只有当选中或者输入Beijing的时候才改变值，不然重置为空\">\n      <AutoComplete\n        placeholder=\"请输入...\"\n        data={[\n          {\n            name: '北京',\n            value: 'Beijing',\n            other: 'other custom data',\n          },\n        ]}\n        value={value}\n        onChange={(value) => {\n          setValue(value);\n        }}\n        onBlur={() => {\n          setValue((value) => (value === 'Beijing' ? value : ''));\n        }}\n        style={{ width: 154 }}\n      />\n    </Tooltip>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Affix in Scrollable Container with React and Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the Affix component from Arco Design within a custom scrollable container. It sets up a container with a fixed height and overflow, and places an Affix component inside it. The Affix is configured with a target prop to listen to the container's scroll events and a targetContainer prop to handle outer scrolling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/__demo__/container.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Affix, Button } from '@arco-design/web-react';\n\nclass App extends React.Component {\n  container = null;\n\n  render() {\n    return (\n      <div\n        id=\"container\"\n        style={{ height: 200, overflow: 'auto' }}\n        ref={(node) => { this.container = node }}\n      >\n        <div\n          style={{\n            height: 400,\n            backgroundColor: 'var(--color-fill-2)',\n            backgroundImage: `\n            linear-gradient(45deg, var(--color-bg-2) 25%, transparent 0, transparent 75%, var(--color-bg-2) 0),\n            linear-gradient(45deg, var(--color-bg-2) 25%, transparent 0, transparent 75%, var(--color-bg-2) 0)`,\n            backgroundPosition: `0 0, 15px 15px`,\n            backgroundSize: `30px 30px`,\n            overflow: 'hidden',\n          }}\n        >\n          <Affix\n            ref={(ref) => (this.affixRef = ref)}\n            target={() => this.container}\n            offsetTop={20}\n            style={{ margin: 40 }}\n            targetContainer={() => window}\n          >\n            <Button type=\"primary\">Affix in scrolling container</Button>\n          </Affix>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Arco Design Tags in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Arco Design library to create checkable tags in a React application. It imports 'Tag' and 'Space' components from '@arco-design/web-react' and sets up a simple React component that renders checkable tags. Tags can have different colors and can be set as checked by default. The 'checkable' prop is key to enabling the click-to-select functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/check.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tag, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Tag checkable>Awesome</Tag>\n      <Tag checkable color=\"red\" defaultChecked>\n        Toutiao\n      </Tag>\n      <Tag checkable color=\"arcoblue\" defaultChecked>\n        Lark\n      </Tag>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with Format Selection in React\nDESCRIPTION: This code demonstrates how to create a color picker with selectable color formats using Arco Design components. It uses React hooks to manage state and renders a radio group for format selection and a ColorPicker component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/format.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker, Radio } from '@arco-design/web-react';\nimport { useState } from 'react';\n\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  const [format, setFormat] = useState('hex')\n\n  return (\n    <div>\n      <RadioGroup\n        type=\"button\"\n        mode=\"fill\"\n        name=\"size\"\n        value={format}\n        onChange={setFormat}\n        style={{ marginBottom: 24 }}\n      >\n        {['hex', 'rgb'].map((x) => {\n          return (\n            <Radio key={x} value={x}>\n              {x}\n            </Radio>\n          );\n        })}\n      </RadioGroup>\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker defaultValue={'#165DFF'} showText format={format} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icons for Collapsible Sidebar in ArcoDesign\nDESCRIPTION: This React component demonstrates how to customize the trigger icon for a collapsible sidebar in ArcoDesign using the Menu.Sider component's 'trigger' property. The example creates a layout with a sidebar that can be collapsed, using different caret icons based on its state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/customIcon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Layout, Menu, Breadcrumb, Button, Message } from '@arco-design/web-react';\nimport { IconHome, IconCalendar, IconCaretRight, IconCaretLeft } from '@arco-design/web-react/icon';\n\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  handleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <Layout className=\"layout-collapse-demo\">\n        <Sider\n          collapsed={this.state.collapsed}\n          onCollapse={this.handleCollapsed}\n          collapsible\n          trigger={this.state.collapsed ? <IconCaretRight /> : <IconCaretLeft />}\n          breakpoint=\"xl\"\n        >\n          <div className=\"logo\" />\n          <Menu\n            defaultOpenKeys={['1']}\n            defaultSelectedKeys={['0_3']}\n            onClickMenuItem={(key) =>\n              Message.info({\n                content: `You select ${key}`,\n                showIcon: true,\n              })\n            }\n            style={{ width: '100%' }}\n          >\n            <MenuItem key=\"0_1\" disabled>\n              <IconHome />\n              Menu 1\n            </MenuItem>\n            <MenuItem key=\"0_2\">\n              <IconCalendar />\n              Menu 2\n            </MenuItem>\n            <MenuItem key=\"0_3\">\n              <IconCalendar />\n              Menu 3\n            </MenuItem>\n            <SubMenu\n              key=\"1\"\n              title={\n                <span>\n                  <IconCalendar />\n                  Navigation 1\n                </span>\n              }\n            >\n              <MenuItem key=\"1_1\">Menu 1</MenuItem>\n              <MenuItem key=\"1_2\">Menu 2</MenuItem>\n              <SubMenu key=\"2\" title=\"Navigation 2\">\n                <MenuItem key=\"2_1\">Menu 1</MenuItem>\n                <MenuItem key=\"2_2\">Menu 2</MenuItem>\n              </SubMenu>\n              <SubMenu key=\"3\" title=\"Navigation 3\">\n                <MenuItem key=\"3_1\">Menu 1</MenuItem>\n                <MenuItem key=\"3_2\">Menu 2</MenuItem>\n                <MenuItem key=\"3_3\">Menu 3</MenuItem>\n              </SubMenu>\n            </SubMenu>\n            <SubMenu\n              key=\"4\"\n              title={\n                <span>\n                  <IconCalendar />\n                  Navigation 4\n                </span>\n              }\n            >\n              <MenuItem key=\"4_1\">Menu 1</MenuItem>\n              <MenuItem key=\"4_2\">Menu 2</MenuItem>\n              <MenuItem key=\"4_3\">Menu 3</MenuItem>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ paddingLeft: 20 }}>Header</Header>\n          <Layout style={{ padding: '0 24px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>List</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Comments with Arco Design React\nDESCRIPTION: Creates a nested comment thread structure using Arco Design's Comment component. Demonstrates how to configure avatars, authors, content, timestamps, and action buttons for multiple levels of nested comments.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/inline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Comment, Avatar } from '@arco-design/web-react';\nimport { IconHeart, IconMessage, IconStar } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  const actions = (\n    <span className=\"custom-comment-action\">\n      <IconMessage /> Reply\n    </span>\n  );\n  return (\n    <Comment\n      actions={actions}\n      author={'Socrates'}\n      avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp\"\n      content={<div>Comment body content.</div>}\n      datetime=\"1 hour\"\n    >\n      <Comment\n        actions={actions}\n        author=\"Balzac\"\n        avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/9eeb1800d9b78349b24682c3518ac4a3.png~tplv-uwbnlip3yd-webp.webp\"\n        content={<div>Comment body content.</div>}\n        datetime=\"1 hour\"\n      >\n        <Comment\n          actions={actions}\n          author=\"Austen\"\n          avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/8361eeb82904210b4f55fab888fe8416.png~tplv-uwbnlip3yd-webp.webp\"\n          content={<div> Reply content </div>}\n          datetime=\"1 hour\"\n        />\n        <Comment\n          actions={actions}\n          author=\"Plato\"\n          avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp\"\n          content={<div> Reply content </div>}\n          datetime=\"1 hour\"\n        />\n      </Comment>\n    </Comment>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing Arco Design React UI Library\nDESCRIPTION: Shows how to install the Arco Design React UI library using npm or yarn package managers. The installation gives access to all the components provided by the library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// with npm\nnpm install @arco-design/web-react\n\n// with yarn\nyarn add @arco-design/web-react\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Ellipsis with Typography Component in React\nDESCRIPTION: Demonstrates three different use cases of Typography ellipsis: single-line title ellipsis, multi-line paragraph with expandable tooltip, and single-line paragraph with custom suffix. Includes workaround for flex container and Google Translate issues using wrapper property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/ellipsis.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Typography } from '@arco-design/web-react';\n\nconst mockText =\n  'A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design. A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design.';\nconst mockTitle =\n  ' A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process.';\n\nconst App = () => {\n  return (\n    <div>\n      <Typography.Title heading={4} ellipsis={{ wrapper: 'span' }}>\n        {mockTitle}\n      </Typography.Title>\n      <Typography.Paragraph ellipsis={{ rows: 2, showTooltip: true, expandable: true, wrapper: 'span' }}>\n        {mockText}\n      </Typography.Paragraph>\n      <Typography.Paragraph ellipsis={{ suffix: '---width: 100%', wrapper: 'span' }}>\n        {mockTitle}\n      </Typography.Paragraph>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining FormInstance Type in TypeScript\nDESCRIPTION: This code defines the FormInstance type in TypeScript, encapsulating various methods to manage form states, validations, and value retrieval. It ensures that FormData is flexible and can accommodate different types.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormInstance<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = Pick<\n  Store<FormData, FieldValue, FieldKey>,\n  | \"getFieldsValue\"\n  | \"getFieldValue\"\n  | \"getFieldError\"\n  | \"getFieldsError\"\n  | \"getTouchedFields\"\n  | \"getFields\"\n  | \"setFieldValue\"\n  | \"setFieldsValue\"\n  | \"setFields\"\n  | \"resetFields\"\n  | \"clearFields\"\n  | \"submit\"\n  | \"validate\"\n  | \"getFieldsState\"\n> & {\n  scrollToField: (field: FieldKey, options?: ScrollIntoViewOptions) => void;\n  // arco 内部使用，业务万不可调用\n  getInnerMethods: (\n    inner?: boolean\n  ) => InnerMethodsReturnType<FormData, FieldValue, FieldKey>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Icons in Arco Design - JavaScript\nDESCRIPTION: This snippet illustrates how to import required components from the Arco Design library and set up customized icons using a specific icon font URL. The customized icons are used in a series of buttons that trigger various types of notifications (info, success, warning, error).\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, Button, Icon, Space } from '@arco-design/web-react';\nimport { IconFaceSmileFill } from '@arco-design/web-react/icon';\nconst IconFont = Icon.addFromIconFontCn({\n  src: '//at.alicdn.com/t/font_180975_26f1p759rvn.js',\n});\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button\n        onClick={() =>\n          Notification.info({\n            icon: <IconFont type=\"icon-info\" />, \n            title: 'Upgrade',\n            content: 'Ready to upgrade ArcoDesign 2.0',\n          })\n        }\n        type=\"primary\"\n        style={{ marginBottom: 20 }}\n      >\n        Info (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.success({\n            icon: <IconFont type=\"icon-success\" />, \n            title: 'Success',\n            content: 'ArcoDesign 2.0 upgrade completed!',\n          })\n        }\n        type=\"primary\"\n        status=\"success\"\n        style={{ marginBottom: 24 }}\n      >\n        Success (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.warning({\n            icon: <IconFont type=\"icon-warning\" />, \n            title: 'Warning',\n            content: 'Current version is at risk!',\n          })\n        }\n        type=\"primary\"\n        status=\"warning\"\n        style={{ marginBottom: 24 }}\n      >\n        Warning (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.error({\n            icon: <IconFont type=\"icon-error\" />, \n            title: 'Error',\n            content: 'Failed to upgrade ArcoDesign 2.0!',\n          })\n        }\n        type=\"primary\"\n        status=\"danger\"\n        style={{ marginBottom: 24 }}\n      >\n        Error (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.info({\n            icon: <IconFaceSmileFill />, \n            title: 'Upgrade',\n            content: 'Ready to upgrade ArcoDesign 2.0!',\n          })\n        }\n        type=\"secondary\"\n        style={{ marginBottom: 24 }}\n      >\n        Smile\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix using Arco Design in React\nDESCRIPTION: This snippet showcases how to use Arco Design's `InputNumber` component to add prefixes and suffixes to input fields in a React application. It involves setting properties such as `prefix`, `suffix`, `min`, `step`, and inline `style` to customize the input number component. Dependencies include the Arco Design library and React. Inputs include a minimum value of 0, step values of 1 and 100, and default values of 50 and 500. The outputs are styled input fields with specified prefixes and suffixes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/suffix.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputNumber } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <div>\n      <InputNumber\n        min={0}\n        defaultValue={50}\n        suffix=\"%\"\n        step={1}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n      <InputNumber\n        min={0}\n        defaultValue={500}\n        prefix=\"\\u00a5\"\n        step={100}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n      <InputNumber\n        mode=\"button\"\n        min={0}\n        defaultValue={500}\n        prefix=\"\\u00a5\"\n        step={100}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Date Range Control in React DatePicker\nDESCRIPTION: This code snippet demonstrates how to dynamically control the selectable date range in a DatePicker component using React hooks and the Arco Design library. It includes examples for both date-only and date-time selection, with a 7-day range limit.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/disabled-date-advance.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Space } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\nconst { RangePicker } = DatePicker;\n\nfunction App() {\n  const [dates, setDates] = useState([]);\n  const [timeDates, setTimeDates] = useState([]);\n\n  return (\n    <Space size={24} direction=\"vertical\">\n      <RangePicker\n        style={{ width: 300 }}\n        onSelect={(valueString, value) => {\n          setDates(value);\n        }}\n        onVisibleChange={(visible) => {\n          if (!visible) {\n            setDates([]);\n          }\n        }}\n        disabledDate={(current) => {\n          if (dates && dates.length) {\n            const tooLate = dates[0] && Math.abs(current.diff(dates[0], 'day')) > 7;\n            const tooEarly = dates[1] && Math.abs(dates[1].diff(current, 'day')) > 7;\n            return tooEarly || tooLate;\n          }\n\n          return false;\n        }}\n        clearRangeOnReselect\n      />\n\n      <RangePicker\n        showTime\n        style={{ width: 400 }}\n        onSelect={(valueString, value) => {\n          setTimeDates(value);\n        }}\n        onVisibleChange={(visible) => {\n          if (!visible) {\n            setTimeDates([]);\n          }\n        }}\n        disabledDate={(current) => {\n          if (timeDates && timeDates.length) {\n            const tooLate =\n              timeDates[0] && Math.abs(current.diff(timeDates[0].startOf('day'), 'day')) > 7;\n            const tooEarly =\n              timeDates[1] && Math.abs(timeDates[1].endOf('day').diff(current, 'day')) > 7;\n            return tooEarly || tooLate;\n          }\n          return false;\n        }}\n        clearRangeOnReselect\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Adjustable Split Panels with ResizeBox.Split in React\nDESCRIPTION: This snippet demonstrates how to use the ResizeBox.Split component from Arco Design to create adjustable split panels. It allows users to change the split direction and includes customizable styling. The component uses React hooks for state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/split.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ResizeBox, Tag, Space, Radio } from '@arco-design/web-react';\n\nfunction App() {\n  const [direction, setDirection] = useState('horizontal');\n  return (\n    <Space direction=\"vertical\" size={20}>\n      <Radio.Group\n        type=\"button\"\n        value={direction}\n        onChange={setDirection}\n        options={['horizontal', 'vertical', 'horizontal-reverse', 'vertical-reverse']}\n      />\n      <ResizeBox.Split\n        direction={direction}\n        style={{\n          height: 300,\n          width: 300,\n          border: '1px solid var(--color-border)',\n        }}\n        max={0.8}\n        min={0.2}\n        panes={[\n          <Tag key=\"first\" color=\"arcoblue\">\n            Fist\n          </Tag>,\n          <Tag key=\"second\" color=\"green\">\n            Second\n          </Tag>,\n        ]}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Component Icons in Arco Design with React\nDESCRIPTION: This code demonstrates how to customize various icons in the Arco Design Tree component. It shows setting the switcherIcon and dragIcon at the Tree level, and also customizing the switcherIcon for specific TreeNode elements. The example includes a draggable tree with visible connecting lines.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/icons.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tree } from '@arco-design/web-react';\nimport { IconDown, IconDragArrow, IconDriveFile } from '@arco-design/web-react/icon';\nconst TreeNode = Tree.Node;\n\nfunction App() {\n  return (\n    <Tree\n      icons={{\n        switcherIcon: <IconDown />,\n        dragIcon: <IconDragArrow />,\n      }}\n      showLine\n      draggable\n    >\n      <TreeNode key=\"node1\" title=\"Trunk\">\n        <TreeNode key=\"node2\" title=\"Leaf\" />\n      </TreeNode>\n      <TreeNode key=\"node3\" title=\"Trunk\">\n        <TreeNode\n          key=\"node4\"\n          icons={{\n            switcherIcon: <IconDriveFile />,\n          }}\n          title=\"Leaf\"\n        />\n        <TreeNode\n          key=\"node5\"\n          icons={{\n            switcherIcon: <IconDriveFile />,\n          }}\n          title=\"Leaf\"\n        />\n      </TreeNode>\n    </Tree>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Radio Buttons with React and Arco Design\nDESCRIPTION: Creates a custom radio group implementation using Arco Design components. Features two styles: button-style radios for city selection and card-style radios with custom content. Uses render props pattern to customize radio appearance based on checked state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/custom_render.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio, Button, Space, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <div style={{ marginBottom: 20 }}>\n        <Radio.Group defaultValue={'Beijing'} name=\"button-radio-group\">\n          {['Beijing', 'Shanghai', 'Guangzhou'].map((item) => {\n            return (\n              <Radio key={item} value={item}>\n                {({ checked }) => {\n                  return (\n                    <Button tabIndex={-1} key={item} shape=\"round\" type={checked ? 'primary' : 'default'}>\n                      {item}\n                    </Button>\n                  );\n                }}\n              </Radio>\n            );\n          })}\n        </Radio.Group>\n      </div>\n      <Radio.Group name=\"card-radio-group\">\n        {[1, 2].map((item) => {\n          return (\n            <Radio key={item} value={item}>\n              {({ checked }) => {\n                return (\n                  <Space\n                    align=\"start\"\n                    className={`custom-radio-card ${checked ? 'custom-radio-card-checked' : ''}`}\n                  >\n                    <div className=\"custom-radio-card-mask\">\n                      <div className=\"custom-radio-card-mask-dot\"></div>\n                    </div>\n                    <div>\n                      <div className=\"custom-radio-card-title\">Radio Card {item}</div>\n                      <Typography.Text type=\"secondary\">this is a text</Typography.Text>\n                    </div>\n                  </Space>\n                );\n              }}\n            </Radio>\n          );\n        })}\n      </Radio.Group>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using PermissionWrapper for Button Permissions in TypeScript\nDESCRIPTION: Demonstrates how to use the PermissionWrapper component to manage permissions for individual buttons or UI elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport PermissionWrapper from '@/components/permissionWrapper';\n\nreturn (\n  <PermissionWrapper\n    requiredPermissions={[{ resource: /^menu.list.*/, actions: ['write'] }]}\n  >\n    <Button loading={loading}>删除</Button>\n  </PermissionWrapper>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Comment List with Arco Design Components\nDESCRIPTION: React component that implements a comment list with like, star, and reply actions using Arco Design's Comment and List components. The component manages like and star states for each comment and includes interactive buttons with icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/list.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Comment, List } from '@arco-design/web-react';\nimport {\n  IconHeart,\n  IconMessage,\n  IconHeartFill,\n  IconStarFill,\n  IconStar,\n} from '@arco-design/web-react/icon';\n\nconst App = () => {\n  const [likes, setLikes] = React.useState([]);\n  const [stars, setStars] = React.useState([]);\n  const data = [\n    {\n      id: 1,\n      author: 'Socrates',\n      like: 13,\n      star: 3,\n      avatar:\n        '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n      content: 'Comment body content.',\n      datetime: '1 hour',\n    },\n    {\n      id: 2,\n      author: 'Balzac',\n      like: 12,\n      star: 1,\n      avatar:\n        '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/9eeb1800d9b78349b24682c3518ac4a3.png~tplv-uwbnlip3yd-webp.webp',\n      content: 'Comment body content.',\n      datetime: '2 hour',\n    },\n  ];\n  return (\n    <List bordered={false} header={<span>2 comments</span>}>\n      {data.map((item, index) => {\n        const like = likes.indexOf(item.id) > -1;\n        const star = stars.indexOf(item.id) > -1;\n        return (\n          <List.Item key={item.id}>\n            <Comment\n              author={item.author}\n              avatar={item.avatar}\n              content={item.content}\n              datetime={item.datetime}\n              actions={[\n                <button\n                  className=\"custom-comment-action\"\n                  key=\"heart\"\n                  onClick={() =>\n                    setLikes(like ? likes.filter((x) => x !== item.id) : [...likes, item.id])\n                  }\n                >\n                  {like ? (\n                    <IconHeartFill style={{ color: '#f53f3f' }}/>\n                  ) : (\n                    <IconHeart />\n                  )}\n                  {item.like + (like ? 1 : 0)}\n                </button>,\n                <button\n                  className=\"custom-comment-action\"\n                  key=\"star\"\n                  onClick={() =>\n                    setStars(star ? stars.filter((x) => x !== item.id) : [...stars, item.id])\n                  }\n                >\n                  {star ? (\n                    <IconStarFill style={{ color: '#ffb400' }}/>\n                  ) : (\n                    <IconStar />\n                  )}\n                  {item.star + (star ? 1 : 0)}\n                </button>,\n                <button className=\"custom-comment-action\" key=\"reply\">\n                  <IconMessage /> Reply\n                </button>,\n              ]}\n            />\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Input with Prefix and Suffix using Arco Design\nDESCRIPTION: This code demonstrates how to add prefix and suffix elements to an Input component using Arco Design. It imports the necessary components from `@arco-design/web-react` and `@arco-design/web-react/icon`.  The `Input` component is configured with `prefix` and `suffix` properties to display icons before and after the input field.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/prefix_suffix.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\nimport { IconUser, IconSearch, IconInfoCircle } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space direction=\"vertical\">\n      <Space wrap>\n        <Input style={{ width: 350 }} prefix={<IconUser />} placeholder=\"Enter something\" />\n        <Input\n          allowClear\n          style={{ width: 350 }}\n          suffix={<IconInfoCircle />}\n          placeholder=\"Enter something\"\n        />\n      </Space>\n      <Space wrap>\n        <Input\n          style={{ width: 350 }}\n          prefix={<IconUser />}\n          suffix={<IconInfoCircle />}\n          placeholder=\"Enter something\"\n        />\n        <Input\n          style={{ width: 350 }}\n          addBefore=\"+86\"\n          addAfter={<IconSearch />}\n          prefix={<IconUser />}\n          suffix={<IconInfoCircle />}\n          allowClear\n          placeholder=\"Enter something\"\n        />\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Value Normalization and Formatting\nDESCRIPTION: Creates a form with two input fields demonstrating value normalization and formatting techniques using Arco Design's Form components. Includes input validation, number formatting, and date range processing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/normalize.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, DatePicker, Input, Button } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nconst App = () => {\n  return (\n    <Form style={{ width: 600 }}>\n      <FormItem\n        label=\"Number\"\n        extra=\"Please enter number\"\n        field=\"number\"\n        autoComplete=\"off\"\n        rules={[{ required: true, message: 'Please enter number' }]}\n        normalize={(value) => {\n          if (value) {\n            const val = value.replace(/[^\\d]/g, '');\n            return `$ ${val}`;\n          }\n\n          return value;\n        }}\n      >\n        <Input placeholder=\"please enter...\" />\n      </FormItem>\n      <FormItem\n        label=\"Date\"\n        extra=\"Please enter number\"\n        field=\"date\"\n        rules={[{ required: true, message: 'Please enter number' }]}\n        normalize={(value) => {\n          return {\n            begin: value && value[0],\n            end: value && value[1],\n          };\n        }}\n        formatter={(value) => {\n          return value && value.begin ? [value.begin, value.end] : [];\n        }}\n      >\n        <DatePicker.RangePicker placeholder=\"please enter...\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          OK\n        </Button>\n      </FormItem>\n      <FormItem shouldUpdate>\n        {(value) => {\n          return <pre>{JSON.stringify(value, null, 2)}</pre>;\n        }}\n      </FormItem>\n    </Form>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Color Tag Variants with Preset and Custom Colors\nDESCRIPTION: Renders multiple tags with predefined color options and custom hexadecimal color values using React and Arco Design Tag component\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/color.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag } from '@arco-design/web-react';\nconst COLORS = [\n  'red',\n  'orangered',\n  'orange',\n  'gold',\n  'lime',\n  'green',\n  'cyan',\n  'blue',\n  'arcoblue',\n  'purple',\n  'pinkpurple',\n  'magenta',\n  'gray',\n];\nconst COLORS_CUSTOM = [\n  '#f53f3f',\n  '#7816ff',\n  '#00b42a',\n  '#165dff',\n  '#ff7d00',\n  '#eb0aa4',\n  '#7bc616',\n  '#86909c',\n  '#b71de8',\n  '#0fc6c2',\n  '#ffb400',\n  '#168cff',\n  '#ff5722',\n];\n\nconst App = () => {\n  return (\n    <div>\n      {COLORS.map((color, i) => (\n        <Tag key={i} closable color={color} style={{ margin: '0 16px 16px 0 ' }}>\n          {color}\n        </Tag>\n      ))}\n      <h3 style={{ color: 'var(--color-text-2)' }}>Custom Color</h3>\n      {COLORS_CUSTOM.map((color, i) => (\n        <Tag key={i} closable color={color} style={{ margin: '0 16px 16px 0 ' }}>\n          {color}\n        </Tag>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Progressive Image Loading in React\nDESCRIPTION: This React component uses Arco Design's Image and Button components to demonstrate progressive image loading. The Button triggers a reload by updating the timestamp in the image URL as a cache-busting mechanism. The Image component utilizes a smaller, blurred version of the image as a loader. Dependencies include React and the '@arco-design/web-react' package for UI components. The expected input is a defined source URL for both the main and loader images, which display conditionally based on the loading state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/progressive-loader.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Image, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [timestamp, setTimestamp] = React.useState('');\n  return (\n    <div>\n      <div>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            setTimestamp(Date.now());\n          }}\n          style={{ marginBottom: 20 }}\n        >\n          reload\n        </Button>\n      </div>\n      <Image\n        width={200}\n        src={`//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp?timestamp=${timestamp}`}\n        loader={\n          <img\n            width={200}\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp\"\n            style={{\n              filter: 'blur(5px)',\n            }}\n          />\n        }\n        alt=\"lamp\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Modal Settings in JavaScript\nDESCRIPTION: Example of the Modal.config method to set global properties for all modal confirmation dialogs, including custom prefix and simple style display.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nModal.config({\n  // 自定义前缀\n  prefixCls: 'arco',\n  // 是否静态方法以简洁样式展示信息\n  simple: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Information Preview Drawer with React and Arco Design\nDESCRIPTION: Implements a drawer component that displays user information with personal and contact details. Uses React state management to control drawer visibility and renders detailed information using Descriptions component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/preview.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Button, Divider, Link, Descriptions } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={350}\n        title={<span>User Information </span>}\n        visible={visible}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n        footer={null}\n      >\n        <Descriptions\n          colon=\"\"\n          title=\"Personal Information\"\n          column={1}\n          labelStyle={{ width: 100 }}\n          data={[\n            {\n              label: 'Name',\n              value: 'Orwell',\n            },\n            {\n              label: 'Date of birth',\n              value: '1995.01.01',\n            },\n            {\n              label: 'City',\n              value: 'Beijing',\n            },\n            {\n              label: 'To work',\n              value: '2017.07',\n            },\n          ]}\n        />\n        <Divider />\n        <Descriptions\n          colon=\"\"\n          title=\"Contact Information\"\n          column={1}\n          labelStyle={{ width: 100 }}\n          data={[\n            {\n              label: 'Telephone',\n              value: '+86 136-6333-2888',\n            },\n            {\n              label: 'Email',\n              value: '123456789@163.com',\n            },\n            {\n              label: 'Website',\n              value: <Link to=\"/\">https://123456789/design.com/</Link>,\n            },\n          ]}\n        />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled TreeSelect Component in React with Arco Design\nDESCRIPTION: This example demonstrates a controlled TreeSelect component where the selected value is managed in React state. It creates a hierarchical tree structure with Trunk and Leaf nodes, some with icons. The component's value is controlled through state and the onChange handler.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/controled.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\nimport { IconCalendar } from '@arco-design/web-react/icon';\n\nconst treeData = [\n  {\n    key: 'node1',\n    icon: <IconCalendar />,\n    title: 'Trunk',\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    icon: <IconCalendar />,\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    value: 'node2',\n  };\n  handleChange = (value) => {\n    console.log(value);\n    this.setState({\n      value,\n    });\n  };\n\n  render() {\n    return (\n      <TreeSelect\n        treeData={treeData}\n        value={this.state.value}\n        onChange={this.handleChange}\n        style={{ width: 300 }}\n      />\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Panel Implementation using Arco Design React\nDESCRIPTION: Demonstrates the implementation of a collapsible panel system using Arco Design's Collapse component. The example shows how to create multiple collapsible sections with headers, set default active panels, and include disabled states. It also showcases content formatting with dividers and different content types.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse, Divider } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem header=\"Introduce\" name=\"2\" disabled>\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem header=\"The Underlying AI Technology\" name=\"3\">\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Buttons with Arco Design React\nDESCRIPTION: Example showing how to create buttons with different status states (warning, danger, success) combined with various button types (primary, default, outline, text). The buttons are arranged in a grid layout with consistent spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Switch } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 100px)',\n        gridRowGap: 24,\n        gridColumnGap: 24,\n      }}\n    >\n      <Button type=\"primary\" status=\"warning\">\n        Warning\n      </Button>\n      <Button status=\"warning\">Warning</Button>\n      <Button type=\"outline\" status=\"warning\">\n        Warning\n      </Button>\n      <Button type=\"text\" status=\"warning\">\n        Warning\n      </Button>\n\n      <Button type=\"primary\" status=\"danger\">\n        Danger\n      </Button>\n      <Button status=\"danger\">Danger</Button>\n      <Button type=\"outline\" status=\"danger\">\n        Danger\n      </Button>\n      <Button type=\"text\" status=\"danger\">\n        Danger\n      </Button>\n\n      <Button type=\"primary\" status=\"success\">\n        Success\n      </Button>\n      <Button status=\"success\">Success</Button>\n      <Button type=\"outline\" status=\"success\">\n        Success\n      </Button>\n      <Button type=\"text\" status=\"success\">\n        Success\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Menu with React and Arco Design\nDESCRIPTION: This snippet demonstrates how to create a dropdown menu using Arco Design components in a React application. It imports necessary components and sets up a menu with items for location options. The dropdown supports hover functionality and can be rendered in a disabled state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dropdown, Menu, Button, Space } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst dropList = (\n  <Menu>\n    <Menu.Item key=\"1\">Beijing</Menu.Item>\n    <Menu.Item key=\"2\">Shanghai</Menu.Item>\n    <Menu.Item key=\"3\">Guangzhou</Menu.Item>\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <Space className=\"dropdown-demo\">\n      <Dropdown droplist={dropList} position=\"bl\">\n        <Button type=\"text\">\n          Hover me <IconDown />\n        </Button>\n      </Dropdown>\n\n      <Dropdown droplist={dropList} position=\"bl\" disabled>\n        <Button type=\"text\">\n          Hover me <IconDown />\n        </Button>\n      </Dropdown>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Error States in Arco Design Form using JavaScript\nDESCRIPTION: This snippet demonstrates how to control form item error states externally in an Arco Design form using the setFields method in React. It requires the Arco Design web-react library. The form accepts a username and age with validation rules, and provides a button to manually set an error state on the 'age' field. Default initial values are provided, and the form supports reset and on-change functionality. The output is logged to the console. Limitations include the constraint that age should be between 0 and 99.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/setFields.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, InputNumber } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const [form] = Form.useForm();\n  return (\n    <Form\n      form={form}\n      style={{ width: 600 }}\n      initialValues={{ name: 'admin' }}\n      autoComplete=\"off\"\n      onValuesChange={(v, vs) => {\n        console.log(v, vs);\n      }}\n      onSubmit={(v) => {\n        console.log(v);\n      }}\n    >\n      <FormItem label=\"Username\" field=\"name\" rules={[{ required: true }]}>\\n        <Input placeholder=\"please enter your username\" />\n      </FormItem>\n      <FormItem\n        label=\"Age\"\n        field=\"age\"\n        rules={[{ required: true, type: 'number', min: 0, max: 99 }]}\n      >\n        <InputNumber placeholder=\"please enter your age\" />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 24 }}>\n          Submit\n        </Button>\n        <Button\n          style={{ marginRight: 24 }}\n          onClick={() => {\n            form.resetFields();\n          }}\n        >\n          Reset\n        </Button>\n        <Button\n          type=\"text\"\n          onClick={() => {\n            form.setFields({\n              age: {\n                value: 200,\n                error: {\n                  message: 'Maximum is 200',\n                },\n                warning: <div>warning info ...</div>,\n              },\n            });\n          }}\n        >\n          Set Error Age\n        </Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Validate Usage\nDESCRIPTION: This example showcases different ways to use the `validate` method of the Arco Design Form. It demonstrates both the callback and promise-based approaches for handling form validation results, including error and value retrieval.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nthis.form.validate((errors, values) => {\n  console.log(errors, values);\n});\n// Or\nthis.form.validate().then((values) => {\n  console.log(values);\n}).catch((error) => {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n});\n// Or (Note to use in the async method)\ntry {\n  const values = await this.form.validate();\n} catch (error) {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Cell with React and Arco Design\nDESCRIPTION: This code defines the `EditableCell` component, which handles the editing logic for individual table cells. It uses `useState` to manage the editing state and `useRef` to focus the input when editing starts. It dynamically renders either an Arco Design `Input` or `Select` component based on the column's `dataIndex` and handles saving the cell value upon changes or pressing Enter.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/table-edit.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction EditableCell(props) {\n  const { children, className, rowData, column, onHandleSave } = props;\n  const ref = useRef(null);\n  const refInput = useRef(null);\n  const { getForm } = useContext(EditableContext);\n  const [editing, setEditing] = useState(false);\n  const handleClick = useCallback(\n    (e) => {\n      if (\n        editing &&\n        column.editable &&\n        ref.current &&\n        !ref.current.contains(e.target) &&\n        !e.target.classList.contains('js-demo-select-option')\n      ) {\n        cellValueChangeHandler(rowData[column.dataIndex]);\n      }\n    },\n    [editing, rowData, column]\n  );\n  useEffect(() => {\n    editing && refInput.current && refInput.current.focus();\n  }, [editing]);\n  useEffect(() => {\n    document.addEventListener('click', handleClick, true);\n    return () => {\n      document.removeEventListener('click', handleClick, true);\n    };\n  }, [handleClick]);\n\n  const cellValueChangeHandler = (value) => {\n    if (column.dataIndex === 'salary') {\n      const values = {\n        [column.dataIndex]: value,\n      };\n      onHandleSave && onHandleSave({ ...rowData, ...values });\n      setTimeout(() => setEditing(!editing), 300);\n    } else {\n      const form = getForm();\n      form.validate([column.dataIndex], (errors, values) => {\n        if (!errors || !errors[column.dataIndex]) {\n          setEditing(!editing);\n          onHandleSave && onHandleSave({ ...rowData, ...values });\n        }\n      });\n    }\n  };\n\n  if (editing) {\n    return (\n      <div ref={ref}>\n        {column.dataIndex === 'salary' ? (\n          <Select\n            onChange={cellValueChangeHandler}\n            defaultValue={rowData[column.dataIndex]}\n            options={[2000, 5000, 10000, 20000]}\n          />\n        ) : (\n          <FormItem\n            style={{ marginBottom: 0 }}\n            labelCol={{ span: 0 }}\n            wrapperCol={{ span: 24 }}\n            initialValue={rowData[column.dataIndex]}\n            field={column.dataIndex}\n            rules={[{ required: true }]}\n          >\n            <Input ref={refInput} onPressEnter={cellValueChangeHandler} />\n          </FormItem>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={column.editable ? `editable-cell ${className}` : className}\n      onClick={() => column.editable && setEditing(!editing)}\n    >\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Dynamic Scroll Position - React\nDESCRIPTION: This snippet creates a React component that renders a set of tabs with options to configure their scrolling behavior. It uses the Arco Design Tabs component and React's useState for state management. The component allows users to change the direction of the tabs (horizontal or vertical) and the position of the scroll (auto, start, end, center). Dependencies required include 'react' and '@arco-design/web-react'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/scrollPosition.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Radio, Space } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst paneStyle = {\n  width: '100%',\n  height: 50,\n  padding: '24px 0',\n  color: '#939aa3',\n};\nconst tabs = [...new Array(30)].map((x, i) => ({\n  title: `标签${i + 1}`,\n  key: `key${i + 1}`,\n  content: `标签${i + 1}内容`,\n}));\n\nfunction App() {\n  const [direction, setDirection] = useState('horizontal');\n  const [position, setPosition] = useState('auto');\n  return (\n    <div>\n      <Space direction=\"vertical\" style={{ marginBottom: 40 }}>\n        <Radio.Group\n          type=\"button\"\n          name=\"direction\"\n          value={direction}\n          onChange={setDirection}\n          options={['horizontal', 'vertical']}\n        ></Radio.Group>\n        <Radio.Group\n          type=\"button\"\n          name=\"direction\"\n          value={position}\n          onChange={setPosition}\n          options={['auto', 'start', 'end', 'center']}\n        ></Radio.Group>\n      </Space>\n\n      <Tabs\n        defaultActiveTab=\"key1\"\n        direction={direction}\n        style={{ height: 200 }}\n        scrollPosition={position}\n      >\n        {tabs.map((x, i) => (\n          <TabPane destroyOnHide key={x.key} title={x.title}>\n            <div style={paneStyle}>{`这里是${x.content}`}</div>\n          </TabPane>\n        ))}\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay with Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet creates a React function component named `App` that utilizes the Arco Design UI components `Spin`, `Card`, and `Button` to demonstrate delayed loading. It employs the `useState` hook to manage loading state and uses the `Spin` component's delay feature to defer loading status changes, preventing screen flicker caused by rapid state toggling. The `Button` allows toggling the loading state, and the `Card` displays sample content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__demo__/delay.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Spin, Card, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  return (\n    <>\n      <Button style={{ display: 'block', marginBottom: 24 }} onClick={() => setLoading(!loading)}>\n        {`Loading: ${loading}`}\n      </Button>\n      <Spin delay={500} loading={loading}>\n        <Card\n          style={{ width: 360 }}\n          title=\"Delay 500ms\"\n          extra={\n            <a href=\"#\" style={{ color: '#165DFF', textDecoration: 'none' }}>\n              More\n            </a>\n          }\n        >\n          ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n          the world. Toutiao started out as a news recommendation engine and gradually evolved into\n          a platform delivering content in various formats.\n        </Card>\n      </Spin>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Pagination with Dynamic Total in React\nDESCRIPTION: React component that implements a pagination system where the total count changes dynamically based on user interaction. Uses Arco Design's Pagination component with state management for current page, total items, and show more functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/show-more.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Pagination } from '@arco-design/web-react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 1,\n      showMore: true,\n      total: 20,\n    };\n  }\n\n  handeChange = (pageNum) => {\n    if (pageNum > 20) {\n      this.setState({\n        showMore: false,\n        current: pageNum,\n      });\n      return;\n    }\n\n    this.setState({\n      total: Math.max((pageNum + 1) * 10, this.state.total),\n      showMore: true,\n      current: pageNum,\n    });\n  };\n\n  render() {\n    return (\n      <Pagination\n        current={this.state.current}\n        total={this.state.total}\n        onChange={this.handeChange}\n        showMore={this.state.showMore}\n      />\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Sub Menus with Arco Design Menu Component in JavaScript\nDESCRIPTION: This code demonstrates how to create a nested menu structure using Arco Design's Menu component with SubMenu, MenuItem, and MenuItemGroup. It includes multiple navigation levels with icons, default open keys, and disabled items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/sub-menu.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@arco-design/web-react';\nimport { IconApps, IconBug, IconBulb } from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nconst App = () => {\n  return (\n    <div className=\"menu-demo\" style={{ height: 600 }}>\n      <Menu\n        style={{ width: 200, height: '100%' }}\n        hasCollapseButton\n        defaultOpenKeys={['0']}\n        defaultSelectedKeys={['0_1']}\n      >\n        <SubMenu\n          key=\"0\"\n          title={\n            <>\n              <IconApps /> Navigation 1\n            </>\n          }\n        >\n          <MenuItem key=\"0_0\">Menu 1</MenuItem>\n          <MenuItem key=\"0_1\">Menu 2</MenuItem>\n          <MenuItem key=\"0_2\" disabled>\n            Menu 3\n          </MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"1\"\n          title={\n            <>\n              <IconBug /> Navigation 2\n            </>\n          }\n        >\n          <MenuItem key=\"1_0\">Menu 1</MenuItem>\n          <MenuItem key=\"1_1\">Menu 2</MenuItem>\n          <MenuItem key=\"1_2\">Menu 3</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"2\"\n          title={\n            <>\n              <IconBulb /> Navigation 3\n            </>\n          }\n        >\n          <MenuItemGroup key=\"2_0\" title=\"Menu Group 1\">\n            <MenuItem key=\"2_0_0\">Menu 1</MenuItem>\n            <MenuItem key=\"2_0_1\">Menu 2</MenuItem>\n          </MenuItemGroup>\n          <MenuItemGroup key=\"2_1\" title=\"Menu Group 1\">\n            <MenuItem key=\"2_1_0\">Menu 3</MenuItem>\n            <MenuItem key=\"2_1_1\">Menu 4</MenuItem>\n          </MenuItemGroup>\n        </SubMenu>\n      </Menu>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating and Closing Modals in Arco Design using JavaScript\nDESCRIPTION: This React component utilizes the Arco Design library to demonstrate the creation of a modal with update and close functionality. The modal displays an initial state with informational content, updates to a success state after a 1.5-second delay, and finally closes after another 1.5-second delay. Key dependencies include `@arco-design/web-react` for the Modal and Spin components, as well as icon imports for visual indicators. Expected input is a user click event that triggers the modal, with no direct outputs beyond UI changes. This implementation assumes familiarity with React and asynchronous JavaScript.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/update.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Modal, Button, Spin } from '@arco-design/web-react';\nimport { IconCheckCircleFill, IconInfoCircleFill } from '@arco-design/web-react/icon';\n\nconst sleep = async (time) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n};\n\nfunction App() {\n  return (\n    <div>\n      <Button\n        type=\"primary\"\n        onClick={async () => {\n          const modalIns = Modal.confirm({\n            title: 'Submiting...',\n            icon: <IconInfoCircleFill />,\n            content: (\n              <span>\n                This modal will be successful after 1.5s. <Spin size={14} />\n              </span>\n            ),\n            footer: null,\n          });\n          await sleep(1500);\n          modalIns.update({\n            icon: <IconCheckCircleFill />,\n            title: 'Success',\n            content: 'This modal will be closed after 1.5s.',\n          });\n          await sleep(1500);\n          modalIns.close();\n        }}\n      >\n        Open Modal\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip with Multiple Positions in React\nDESCRIPTION: This code demonstrates how to use the Tooltip component from Arco Design with 12 different positioning options. It creates a layout with buttons arranged in strategic positions, each having a tooltip that appears on hover with a specified position property. A helper function getStyle() is used to position buttons within the container.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tooltip/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tooltip, Button } from '@arco-design/web-react';\n\nfunction getStyle(top, left) {\n  return {\n    position: 'absolute',\n    width: 80,\n    top,\n    left,\n  };\n}\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: 440,\n        height: 280,\n      }}\n    >\n      <Tooltip position=\"tl\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(0, 70)}>TL</Button>\n      </Tooltip>\n      <Tooltip position=\"top\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(0, 180)}>Top</Button>\n      </Tooltip>\n      <Tooltip position=\"tr\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(0, 290)}>TR</Button>\n      </Tooltip>\n      <Tooltip position=\"lt\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(60, 10)}>LT</Button>\n      </Tooltip>\n      <Tooltip position=\"left\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(120, 10)}>Left</Button>\n      </Tooltip>\n      <Tooltip position=\"lb\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(180, 10)}>LB</Button>\n      </Tooltip>\n      <Tooltip position=\"rt\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(60, 350)}>RT</Button>\n      </Tooltip>\n      <Tooltip position=\"right\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(120, 350)}>Right</Button>\n      </Tooltip>\n      <Tooltip position=\"rb\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(180, 350)}>RB</Button>\n      </Tooltip>\n      <Tooltip position=\"bl\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(240, 70)}>BL</Button>\n      </Tooltip>\n      <Tooltip position=\"bottom\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(240, 180)}>Bottom</Button>\n      </Tooltip>\n      <Tooltip position=\"br\" trigger=\"hover\" content=\"This is a Tooltip\">\n        <Button style={getStyle(240, 290)}>BR</Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Styles Using Arco Design - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Arco Design framework to customize the styles of table headers and data rows within a React application. It requires @arco-design/web-react as a dependency to import the Table component and apply styles on table columns using headerCellStyle. The snippet sets up columns with customized background colors and displays data in a styled table layout within a React functional component. The table styles focus primarily on header cells while ensuring that row styles can be altered using rowClassName, among other style customizations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/style.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    headerCellStyle: {\n      backgroundColor: 'var(--color-bg-2)',\n    },\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    headerCellStyle: {\n      backgroundColor: 'var(--color-bg-2)',\n    },\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    headerCellStyle: {\n      backgroundColor: 'var(--color-bg-2)',\n    },\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    headerCellStyle: {\n      backgroundColor: 'var(--color-bg-2)',\n    },\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nconst App = () => {\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      border={{\n        wrapper: true,\n        headerCell: true,\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Arco Design Pagination with All Features\nDESCRIPTION: Creates two pagination components using @arco-design/web-react - one with all features enabled and another in disabled state. Features include total count display, page jumper, size selector, and custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/all-options.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Pagination\n        showTotal\n        total={200}\n        showJumper\n        sizeCanChange\n        style={{ width: 800, marginBottom: 20 }}\n      />\n      <Pagination disabled showTotal total={200} showJumper sizeCanChange style={{ width: 800 }} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Tooltips with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to implement tooltips with custom background colors using the Tooltip component from Arco Design. It maps through an array of color values and creates a Button wrapped in a Tooltip for each color, where both the tooltip background and button background share the same color.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tooltip/__demo__/color.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tooltip, Button } from '@arco-design/web-react';\nconst colors = ['#3491FA', '#165DFF', '#722ED1'];\n\nconst App = () => {\n  return (\n    <div>\n      {colors.map((color) => {\n        return (\n          <Tooltip key={color} color={color} content=\"tooltip text\">\n            <Button\n              style={{\n                marginRight: 20,\n                background: color,\n                color: '#fff',\n              }}\n            >\n              {color}\n            </Button>\n          </Tooltip>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Methods for Message Component\nDESCRIPTION: Shows the different methods available for triggering message notifications including info, success, warning, error, normal and loading variants with both string content and object configuration options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.info(content: String) / Message.info(config: Object)\nMessage.success(content: String) / Message.success(config: Object)\nMessage.warning(content: String) / Message.warning(config: Object)\nMessage.error(content: String) / Message.error(config: Object)\nMessage.normal(content: String) / Message.normal(config: Object)\nMessage.loading(content: String) / Message.loading(config: Object)\nMessage.clear()\n```\n\n----------------------------------------\n\nTITLE: Implementing Expandable Rows in a React Table Component\nDESCRIPTION: This snippet shows the main functionality of a React component that renders a table with expandable rows. It configures properties such as the expanded row render function and event handlers for expanding/collapsing rows. The implementation allows for user interaction to view additional details about each record.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/expandable.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => {\n        return `This is No.${record.key} description.`;\n      }}\n      onExpand={(detail, expanded) => {\n        console.log(detail, expanded);\n      }}\n      onExpandedRowsChange={(expandedRows) => {\n        console.log(expandedRows);\n      }}\n      expandProps={{\n        expandRowByClick: true,\n        rowExpandable: (record) => record.key !== '4',\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Groups with Arco Design in React\nDESCRIPTION: This snippet demonstrates various ways to use Button.Group to combine related buttons. It showcases different configurations including basic groups, primary button groups, shaped buttons with icons, and icon-only button groups.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/button-group.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Button, Space } from '@arco-design/web-react';\nimport {\n  IconLeft,\n  IconRight,\n  IconMore,\n  IconStar,\n  IconSettings,\n  IconMessage,\n  IconDown,\n} from '@arco-design/web-react/icon';\nconst ButtonGroup = Button.Group;\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Space size=\"large\">\n        <ButtonGroup>\n          <Button>Publish</Button>\n          <Button icon={<IconDown />} />\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button type=\"secondary\">Publish</Button>\n          <Button type=\"secondary\" icon={<IconMore />} />\n        </ButtonGroup>\n      </Space>\n      <ButtonGroup>\n        <Button type=\"primary\">Publish</Button>\n        <Button type=\"primary\" icon={<IconDown />} />\n      </ButtonGroup>\n      <Space size=\"large\">\n        <ButtonGroup>\n          <Button\n            type=\"primary\"\n            icon={<IconLeft />}\n            shape=\"round\"\n            style={{ padding: '0 8px' }}\n          >\n            Prev\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            style={{ padding: '0 8px' }}\n          >\n            Next\n            <IconRight />\n          </Button>\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button type=\"primary\" icon={<IconStar />} />\n          <Button type=\"primary\" icon={<IconMessage />} />\n          <Button type=\"primary\" icon={<IconSettings />} />\n        </ButtonGroup>\n        <ButtonGroup>\n          <Button type=\"primary\" icon={<IconStar />}>\n            Favorite\n          </Button>\n          <Button type=\"primary\" icon={<IconSettings />}>\n            Setting\n          </Button>\n        </ButtonGroup>\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Modal Configuration in React with Arco Design\nDESCRIPTION: This React component demonstrates how to use ConfigProvider to set local RTL view and disable global effects on Modal and Notice components. It includes a confirm modal and tabs to showcase the local configuration. The component uses various Arco Design components such as Button, Space, ConfigProvider, Modal, Typography, and Tabs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/modal-setting.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Space, ConfigProvider, Modal, Typography,Tabs } from '@arco-design/web-react';\n\nfunction App() {\n  const confirm = () => {\n    Modal.confirm({\n      title: 'Confirm deletion',\n      content: 'Are you sure you want to delete the 3 selected items? Once you press the delete button, the items will be deleted immediately. You can't undo this action.',\n      okButtonProps: {\n        status: 'danger',\n      },\n      onOk: () => {\n        return new Promise((resolve, reject) => {\n          setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n        }).catch((e) => {\n          Message.error({\n            content: 'Error occurs!',\n          });\n          throw e;\n        });\n      },\n    });\n  };\n\n  return (\n    <Space direction=\"vertical\" size={20}>\n      <ConfigProvider rtl effectGlobalNotice={false} effectGlobalModal={false}>\n        <Typography.Title heading={6}>局部 RTL 视图</Typography.Title>\n        <Tabs defaultActiveTab='1' style={{ marginBottom: 20 }}>\n          <Tabs.TabPane key='1' title='Tab 1' />\n          <Tabs.TabPane key='2' title='Tab 2' />\n          <Tabs.TabPane key='3' title='Tab 3' />\n        </Tabs>\n        <Space>\n          <Button type='primary' onClick={confirm}>\n            Confirm\n          </Button>\n        </Space>\n      </ConfigProvider>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Color Picker in React with Arco Design\nDESCRIPTION: This snippet demonstrates a controlled color picker component using Arco Design's React library. It uses useState hook to manage the color value and provides buttons to change the color. The ColorPicker component is controlled by the state value and updates it on change.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, ColorPicker } from '@arco-design/web-react';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [value, setValue] = useState('#165DFF');\n\n  return (\n    <div>\n      <div>\n        <Button onClick={() => setValue('#165DFF')}>#165DFF</Button>\n        <Button onClick={() => setValue('#165DFF88')}>#165DFF88</Button>\n      </div>\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker value={value} onChange={(value)=>setValue(value)} showText />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Positioned Popovers with Arco Design in React\nDESCRIPTION: A React component demonstrating all 12 possible positions for the Popover component from Arco Design. Each Popover is positioned absolutely within a container and includes a title and content. The example uses buttons as triggers positioned in a grid layout to show different popover positions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popover, Button } from '@arco-design/web-react';\nconst style = {\n  margin: 0,\n};\n\nfunction getStyle(top, left) {\n  return {\n    position: 'absolute',\n    width: 80,\n    top,\n    left,\n  };\n}\n\nconst content = (\n  <span>\n    <p style={style}>Here is the text content</p>\n    <p style={style}>Here is the text content</p>\n  </span>\n);\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: 440,\n        height: 280,\n      }}\n    >\n      <Popover position=\"tl\" title=\"Title\" content={content}>\n        <Button style={getStyle(0, 70)}>TL</Button>\n      </Popover>\n      <Popover position=\"top\" title=\"Title\" content={content}>\n        <Button style={getStyle(0, 180)}>Top</Button>\n      </Popover>\n      <Popover position=\"tr\" title=\"Title\" content={content}>\n        <Button style={getStyle(0, 290)}>TR</Button>\n      </Popover>\n      <Popover position=\"lt\" title=\"Title\" content={content}>\n        <Button style={getStyle(60, 10)}>LT</Button>\n      </Popover>\n      <Popover position=\"left\" title=\"Title\" content={content}>\n        <Button style={getStyle(120, 10)}>Left</Button>\n      </Popover>\n      <Popover position=\"lb\" title=\"Title\" content={content}>\n        <Button style={getStyle(180, 10)}>LB</Button>\n      </Popover>\n      <Popover position=\"rt\" title=\"Title\" content={content}>\n        <Button style={getStyle(60, 350)}>RT</Button>\n      </Popover>\n      <Popover position=\"right\" title=\"Title\" content={content}>\n        <Button style={getStyle(120, 350)}>Right</Button>\n      </Popover>\n      <Popover position=\"rb\" title=\"Title\" content={content}>\n        <Button style={getStyle(180, 350)}>RB</Button>\n      </Popover>\n      <Popover position=\"bl\" title=\"Title\" content={content}>\n        <Button style={getStyle(240, 70)}>BL</Button>\n      </Popover>\n      <Popover position=\"bottom\" title=\"Title\" content={content}>\n        <Button style={getStyle(240, 180)}>Bottom</Button>\n      </Popover>\n      <Popover position=\"br\" title=\"Title\" content={content}>\n        <Button style={getStyle(240, 290)}>BR</Button>\n      </Popover>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Checkbox with Arco Design\nDESCRIPTION: Demonstrates a controlled checkbox implementation using React and Arco Design components. The checkbox state is managed through React useState hook and can be toggled via a button. Includes both regular and disabled checkbox variants.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Checkbox, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [checked, setChecked] = React.useState(false);\n  return (\n    <div>\n      <Space size={40}>\n        <Checkbox\n          checked={checked}\n        >\n          Checkbox\n        </Checkbox>\n        <Checkbox checked={checked} disabled>\n          disabled Checkbox\n        </Checkbox>\n      </Space>\n      <div style={{ marginTop: 30 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            setChecked(!checked);\n          }}\n        >\n          {checked ? 'unCheck' : 'Check'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with Disabled Alpha Channel in React\nDESCRIPTION: This snippet shows how to use the ColorPicker component from Arco Design with the alpha channel disabled. It demonstrates two instances: one with a solid color default value and another with an initial alpha value that gets reset on user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/disabledAlpha.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ColorPicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <ColorPicker defaultValue={'#165DFF'} disabledAlpha />\n      <br />\n      <ColorPicker defaultValue={'#165DFF80'} disabledAlpha />\n    </div>\n  ) ;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Autosizing Textarea with Arco Design in React\nDESCRIPTION: This code snippet demonstrates the implementation of autosizing textareas using the Arco Design library in a React application. It showcases the basic `autoSize` property for automatic height adjustment and the `autoSize` property with `minRows` and `maxRows` configurations for defining height boundaries. The snippet relies on the Arco Design `Input` and `Space` components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/textarea_autosize.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\nconst TextArea = Input.TextArea;\n\nconst App = () => {\n  return (\n    <Space wrap align=\"top\">\n      <TextArea\n        placeholder=\"Enter something\"\n        defaultValue=\"This is the contents of the textarea. \"\n        autoSize\n        style={{ width: 350 }}\n      />\n      <TextArea\n        placeholder=\"Enter something\"\n        autoSize={{ minRows: 2, maxRows: 6 }}\n        style={{ width: 350 }}\n        defaultValue=\"This is the contents of the textarea. This is the contents of the textarea. This is the contents of the textarea. \"\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Trigger for Select Component in React\nDESCRIPTION: This snippet demonstrates how to create a Select component with a custom trigger element using Arco Design and React. It uses hooks like useState and useRef, and implements custom keyboard event handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/custom-trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { Select, Typography, Link } from '@arco-design/web-react';\nconst Option = Select.Option;\n\nconst DemoSelect = () => {\n  const refSelect = useRef(null);\n  const [text, setText] = useState('None');\n  return (\n    <div>\n      <Select\n        ref={refSelect}\n        mode=\"multiple\"\n        onChange={(_, option) => {\n          const array = option.map((item) => item.children);\n          setText(array.join('，') || 'None');\n        }}\n        triggerElement={\n          <Typography.Paragraph\n            style={{\n              width: 300,\n            }}\n            className=\"trigger-element\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              refSelect.current && refSelect.current.hotkeyHandler(e);\n            }}\n          >\n            Favorite Cities：<Link>{text}</Link>\n          </Typography.Paragraph>\n        }\n      >\n        <Option value=\"1\">Beijing</Option>\n        <Option disabled value=\"2\">\n          Shanghai\n        </Option>\n        <Option value=\"3\">Shenzhen</Option>\n        <Option value=\"4\">Wuhan</Option>\n      </Select>\n    </div>\n  );\n};\n\nconst App = () => {\n  return <DemoSelect />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Flex Layout with Arco Design in JavaScript\nDESCRIPTION: This snippet showcases a React component implementation utilizing the 'Grid' component from '@arco-design/web-react'. It demonstrates setting the 'flex' property on 'Col' components to achieve custom grid layouts, such as fixed-width, auto-adjusting, and proportional columns. Dependencies include React and the Arco Design library. Three different row layouts are illustrated, featuring varied applications of 'flex' for the 'Col' components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/flex.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col flex=\"100px\">\n          <div>100px</div>\n        </Col>\n        <Col flex=\"auto\">\n          <div>auto</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col flex=\"100px\">\n          <div>100px</div>\n        </Col>\n        <Col flex=\"auto\">\n          <div>auto</div>\n        </Col>\n        <Col flex=\"100px\">\n          <div>100px</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col flex={3}>\n          <div>3 / 12</div>\n        </Col>\n        <Col flex={4}>\n          <div>4 / 12</div>\n        </Col>\n        <Col flex={5}>\n          <div>5 / 12</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Timezone-aware DatePicker and RangePicker in React\nDESCRIPTION: This code snippet demonstrates how to create a React component that uses DatePicker and RangePicker components with timezone support. It allows users to select a timezone and displays the selected dates in different formats including locale string, ISO string, and timestamp.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/timezone.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Space, Select, Typography, Alert, Tag } from '@arco-design/web-react';\nconst zoneList = ['America/Los_Angeles', 'Europe/London', 'Africa/Cairo', 'Asia/Shanghai'];\nconst defaultValue = new Date('2022-02-22');\nconst defaultRangeValue = [new Date(2022, 1, 22, 8), new Date(2022, 2, 22, 10)];\n\nfunction App() {\n  const [timezone, setTimezone] = useState('Asia/Shanghai');\n  const [value, setValue] = useState(defaultValue);\n  const [rangeValue, setRangeValue] = useState(defaultRangeValue);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Select\n          defaultValue={timezone}\n          options={zoneList}\n          onChange={(tz) => setTimezone(tz)}\n          triggerProps={{\n            autoAlignPopupWidth: false,\n            position: 'bl',\n          }}\n        />\n        <DatePicker\n          showTime\n          timezone={timezone}\n          value={value}\n          onChange={(v, vd) => setValue(vd && vd.toDate())}\n        />\n        <DatePicker.RangePicker\n          showTime\n          timezone={timezone}\n          value={rangeValue}\n          onChange={(v, vd) => setRangeValue(vd && vd.map((d) => d.toDate()))}\n        />\n      </Space>\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <Tag bordered color=\"gray\">\n              DatePicker\n            </Tag>\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text>\n              {value ? value.toLocaleString('en-US') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text>\n              {value ? value.toISOString() : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text>\n              {value ? value.valueOf() : '-'}\n            </div>\n          </Space>\n        }\n      />\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <Tag bordered color=\"gray\">\n              RangePicker\n            </Tag>\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.toLocaleString('en-US')).join(' --- ') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.toISOString()).join(' --- ') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.valueOf()).join(' --- ') : '-'}\n            </div>\n          </Space>\n        }\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Timeline with Multiple Alignment Modes in Arco Design React\nDESCRIPTION: This code creates a vertical timeline component that displays company founding information with three switchable alignment modes (left, right, and alternate). It uses Arco Design's Timeline, Grid, Radio, and Typography components, and includes images and descriptive text for each timeline item.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/vertical.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Timeline, Grid, Radio, Typography } from '@arco-design/web-react';\n\nconst TimelineItem = Timeline.Item;\nconst { Row, Col } = Grid;\n\nconst imageStyle = {\n  margin: '0 12px 12px 12px'\n}\n\nfunction App() {\n  const [mode, setMode] = React.useState('left');\n  return (\n    <div>\n      <Row align=\"center\" style={{ marginBottom: 24 }}>\n        <Typography.Text>mode: &nbsp; &nbsp;</Typography.Text>\n        <Radio.Group\n          value={mode}\n          onChange={setMode}\n          options={[\n            {\n              label: 'left',\n              value: 'left',\n            },\n            {\n              label: 'right',\n              value: 'right',\n            },\n            {\n              label: 'alternate',\n              value: 'alternate',\n            },\n          ]}\n        />\n      </Row>\n      <Timeline mode={mode} labelPosition=\"relative\">\n        <TimelineItem label=\"2012-08\">\n          <Row style={{ display: 'inline-flex', alignItems: 'center' }}>\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/b5d834b83708a269b4562924436eac48.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12 }}>\n              Toutiao\n              <div style={{ fontSize: 12, color: '#4E5969' }}>Founded in 2012</div>\n            </div>\n          </Row>\n        </TimelineItem>\n        <TimelineItem label=\"2017-05\">\n          <Row style={{ display: 'inline-flex', alignItems: 'center' }}>\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/385ed540c359ec8a9b9ce2b5fe89b098.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12 }}>\n              Xigua Video\n              <div style={{ fontSize: 12, color: '#4E5969' }}>Founded in 2017</div>\n            </div>\n          </Row>\n        </TimelineItem>\n        <TimelineItem label=\"2018-07\">\n          <Row style={{ display: 'inline-flex', alignItems: 'center' }}>\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/73a34d47f2885cf5182d755aa0c8a7d4.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12 }}>\n              Pipidance\n              <div\n                style={{\n                  fontSize: 12,\n                  color: '#4E5969',\n                }}\n              >\n                Founded in 2018\n              </div>\n            </div>\n          </Row>\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Message Component\nDESCRIPTION: Shows how to configure global settings for the Message component including maximum notification count, container element, notification duration, and CSS class prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__template__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.config(options)\n```\n\n----------------------------------------\n\nTITLE: Defining Tab Drag and Drop Logic with React Hooks\nDESCRIPTION: Implements a WrapTabNode component that enables drag and drop functionality for tabs using useDrag and useDrop hooks. Manages tab reordering by tracking mouse position and index.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/drag.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst WrapTabNode = (props: WrapTabNodeProps) => {\n    const { index, moveTabNode, children, ...elseProps } = props;\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ handlerId }, drop] = useDrop({\n        accept: 'DND_NODE',\n        collect(monitor) {\n            return { handlerId: monitor.getHandlerId() };\n        },\n        hover(item, monitor) {\n            // Complex drag and drop positioning logic\n        }\n    });\n\n    const [, drag] = useDrag({\n        type: 'DND_NODE',\n        item: () => ({ index })\n    });\n\n    drag(drop(ref));\n\n    return (\n        <div ref={ref} data-handler-id={handlerId} {...elseProps}>\n            {children}\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Resizable Columns for Arco Design Table\nDESCRIPTION: This CSS snippet provides styles for the Arco Design Table component's resizable columns. It sets the position, dimensions, and cursor for the resizable handle to ensure a proper user interface for resizing. The '.react-resizable' class applies positioning rules, while '.react-resizable-handle' specifies the handle's size and position.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/resizable.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.table-demo-resizable-column .react-resizable {\n  position: relative;\n  background-clip: padding-box;\n}\n\n.table-demo-resizable-column .react-resizable-handle {\n  position: absolute;\n  width: 10px;\n  height: 100%;\n  bottom: 0;\n  right: -5px;\n  cursor: col-resize;\n  z-index: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeBox Component with React in Arco Design\nDESCRIPTION: This snippet demonstrates the basic usage of the ResizeBox component from Arco Design. It creates a resizable container with content, allowing resizing from the right and bottom edges. The component includes Typography and Divider elements for formatting the content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ResizeBox, Divider, Typography } from '@arco-design/web-react';\nconst { Paragraph } = Typography;\n\nconst App = () => {\n  return (\n    <div>\n      <ResizeBox\n        directions={['right', 'bottom']}\n        style={{\n          width: 500,\n          minWidth: 100,\n          maxWidth: '100%',\n          height: 200,\n          textAlign: 'center',\n        }}\n      >\n        <Paragraph>We are building the future of content discovery and creation.</Paragraph>\n        <Divider />\n        <Paragraph>\n          ByteDance's content platforms enable people to enjoy content powered by AI technology. We\n          inform, entertain, and inspire people across language, culture and geography.\n        </Paragraph>\n        <Divider>ByteDance</Divider>\n        <Paragraph>Yiming Zhang is the founder and CEO of ByteDance.</Paragraph>\n      </ResizeBox>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading Cascader in React\nDESCRIPTION: Example shows how to implement a Cascader component with lazy loading functionality using Arco Design. The component includes both single and multiple selection modes, with search capability and dynamic data loading through the loadMore prop. The loadMore function simulates an API call with a 500ms delay.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/loadmore.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Space } from '@arco-design/web-react';\n\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  loadMore = (pathValue, level) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        const nodes = pathValue.map((x, i) => ({\n          label: `Option ${i + 1}`,\n          value: i,\n          isLeaf: level >= 2,\n        }));\n        resolve(nodes);\n      }, 500);\n    });\n\n  render() {\n    return (\n      <Space size=\"large\">\n        <Cascader\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n          loadMore={this.loadMore}\n          showSearch\n          allowClear\n        />\n        <Cascader\n          placeholder=\"Please select ...\"\n          style={{ width: 300, marginBottom: 20 }}\n          options={options}\n          loadMore={this.loadMore}\n          showSearch\n          allowClear\n          mode=\"multiple\"\n        />\n      </Space>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Sidebar in Layout with ResizeBox\nDESCRIPTION: This code snippet demonstrates how to create a layout with a resizable sidebar using Arco Design's Layout and ResizeBox components. The Sider component is configured with resizeDirections prop to allow resizing from the right edge, and min/max width constraints are set.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/layout.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Layout } from '@arco-design/web-react';\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nconst App = () => {\n  return (\n    <div className=\"layout-basic-demo\">\n      <Layout>\n        <Header>Header</Header>\n        <Layout>\n          <Sider\n            resizeDirections={['right']}\n            style={{\n              minWidth: 150,\n              maxWidth: 500,\n              height: 200,\n            }}\n          >\n            Sider\n          </Sider>\n          <Content>Content</Content>\n        </Layout>\n        <Footer>Footer</Footer>\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Bordered Descriptions Component in React\nDESCRIPTION: This code snippet demonstrates how to use the Descriptions component from Arco Design to create a bordered list with background color. It defines a data array with various fields and renders them using the Descriptions component with the 'border' prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/border.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Date of Birth',\n    value: '2020-05-15',\n    span: 2,\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return <Descriptions border data={data} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu with Icons using Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet imports necessary components from Arco Design and defines a dropdown menu with items that include icons. The 'Menu' and 'Dropdown' components are used alongside custom styles to integrate icons from 'IconLocation' and control layout with 'iconStyle'. The 'App' function returns the dropdown configured with a button trigger.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/item-icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Dropdown, Menu, Button } from '@arco-design/web-react';\nimport { IconDown, IconLocation } from '@arco-design/web-react/icon';\nconst iconStyle = {\n  marginRight: 8,\n  fontSize: 16,\n  transform: 'translateY(1px)',\n};\nconst dropList = (\n  <Menu>\n    <Menu.Item key=\"1\">\n      <IconLocation style={iconStyle} />\n      Beijing\n    </Menu.Item>\n    <Menu.Item key=\"2\">\n      <IconLocation style={iconStyle} />\n      Shanghai\n    </Menu.Item>\n    <Menu.Item key=\"3\">\n      <IconLocation style={iconStyle} />\n      Guangzhou\n    </Menu.Item>\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <div className=\"dropdown-demo\">\n      <Dropdown droplist={dropList} trigger=\"click\" position=\"bl\">\n        <Button type=\"text\">\n          Click me <IconDown />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing TimePicker and RangePicker with Default Values in React\nDESCRIPTION: This snippet illustrates the implementation of TimePicker and RangePicker from the Arco Design library, with predefined default value properties to display specific times when the components are rendered. It requires React and the Arco Design web-react package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/defaultValue.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\nconst { RangePicker } = TimePicker;\n\nconst App = () => {\n  return (\n    <div>\n      <TimePicker\n        defaultValue=\"18:24:23\"\n        style={{\n          width: 194,\n          marginRight: 24,\n          marginBottom: 24,\n        }}\n      />\n      <RangePicker\n        defaultValue={['09:24:53', '18:44:33']}\n        style={{ width: 252, marginBottom: 24 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Header with React Sticky in JavaScript\nDESCRIPTION: This code snippet shows how to use the react-sticky library to fix a Tabs header to the top of the viewport when scrolling. It incorporates Arco Design's Tabs and Typography components. The snippet demonstrates setting a default active tab and customizing the tab header rendering for a sticky effect. It requires Arco Design components and react-sticky to be installed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/renderTabbar.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tabs, Typography } from '@arco-design/web-react';\nimport { StickyContainer, Sticky } from 'react-sticky';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nconst App = () => {\n  return (\n    <StickyContainer>\n      <Tabs\n        defaultActiveTab=\"3\"\n        renderTabHeader={(props, DefaultTabHeader) => {\n          return (\n            <Sticky topOffset={-52}>\n              {({ style, isSticky }) => (\n                <DefaultTabHeader\n                  {...props}\n                  style={{\n                    ...style,\n                    top: isSticky ? 52 : 0,\n                    background: 'var(--color-bg-2)',\n                  }}\n                />\n              )}\n            </Sticky>\n          );\n        }}\n      >\n        <TabPane key=\"1\" title=\"Tab 1\" style={{ height: 300 }}>\n          <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"2\" title=\"Tab 2\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"3\" title=\"Tab 3\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n        </TabPane>\n      </Tabs>\n    </StickyContainer>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Code Input with Validation in React\nDESCRIPTION: Demonstrates two validation scenarios for VerificationCode component: numbers-only input and lowercase alphabetic characters. Uses regex validation and includes formatting logic to transform input. Component uses Arco Design's web components with custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/validate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid, VerificationCode, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n\n  return (\n    <div>\n      <div style={{width: 200}}>\n        <Typography.Paragraph>Only numbers can be entered: </Typography.Paragraph>\n      </div>\n      <VerificationCode\n        style={{ width: 300 }}\n        defaultValue=\"123456\"\n        validate={({ inputValue }) => {\n          return /^\\d*$/.test(inputValue) ? inputValue : false;\n        }}\n      />\n      <br />\n      <br />\n\n      <div style={{width: 200}}>\n        <Typography.Paragraph>Only `a-z` can be entered: </Typography.Paragraph>\n      </div>\n\n      <VerificationCode\n        style={{ width: 300 }}\n        defaultValue=\"abcdef\"\n        validate={({ inputValue }) => {\n          return /^[a-zA-Z]*$/.test(inputValue) ? inputValue.toLowerCase() : false;\n        }}\n        />\n\n\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Popup Visibility with Arco Design in React\nDESCRIPTION: This JavaScript code demonstrates how to control the visibility of popups by using the Trigger component from Arco Design within a React application. It manages state changes via hooks and handles visibility toggles through click and focus events. Dependencies include React and Arco Design components (Trigger, Button, Input, Skeleton, and Space). Inputs include user interactions that trigger visibility changes, with expected outputs being the display of a popup component when conditions are met.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Trigger, Button, Input, Skeleton,Space } from '@arco-design/web-react';\n\nfunction Popup() {\n  return (\n    <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n      <Skeleton />\n    </div>\n  );\n}\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  const [visible3, setVisible3] = React.useState(false);\n  return (\n    <Space size={40}>\n      <Trigger\n        popupVisible={visible}\n        popup={() => <Popup />}\n        trigger=\"click\"\n        classNames=\"zoomInTop\"\n        onVisibleChange={(visible) => {\n          setVisible(visible);\n        }}\n      >\n        <Button >Click Me (controlled)</Button>\n      </Trigger>\n      <Trigger\n        popupVisible={visible3}\n        popup={() => <Popup />}\n        trigger=\"click\"\n        classNames=\"zoomInTop\" // Trigger 组件在弹出层显示时监听了`getDocument()` 返回元素的 mousedown 事件。如果触发 mousedown 的元素不存在于触发节点和弹出层，则触发 `props.onClickOutside` 回调函数\n        onClickOutside={() => {\n          setVisible3(false);\n        }}\n      >\n        <Button\n          onClick={() => {\n            setVisible3(!visible3);\n          }}\n        >\n          no onVisibleChange (controlled)\n        </Button>\n      </Trigger>\n      <Trigger\n        blurToHide={false}\n        popupVisible={visible2}\n        popup={() => <Popup />}\n        trigger=\"focus\"\n        classNames=\"zoomInTop\"\n        onClickOutside={() => {\n          setVisible2(false);\n        }}\n        onVisibleChange={(visible) => {\n          setVisible2(visible);\n        }}\n      >\n        <Input style={{ width: 200 }} placeholder=\"Focus Me (controlled)\"></Input>\n      </Trigger>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Input Fields with Arco Design in React\nDESCRIPTION: This code snippet utilizes Arco Design components to create input fields that have additional elements like currency indicators or domain selectors added before and after the input text. It uses the `Space` component for layout and manages multiple input configurations, enhancing user experience.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/addon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Select, Space } from '@arco-design/web-react';\nimport { IconClockCircle, IconSearch, IconInfoCircle } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space direction=\"vertical\">\n      <Space wrap>\n        <Input style={{ width: 350 }} addAfter=\"RMB\" placeholder=\"Enter amount\" />\n        <Input style={{ width: 350 }} addBefore=\"+86\" placeholder=\"Enter phone number\" />\n      </Space>\n      <Space wrap>\n        <Input\n          style={{ width: 350 }}\n          addBefore=\"http://\"\n          addAfter={\n            <Select defaultValue=\".com\" showSearch style={{ width: 80 }}>\n              <Select.Option value=\".com\">.com</Select.Option>\n              <Select.Option value=\".cn\">.cn</Select.Option>\n              <Select.Option value=\".net\">.net</Select.Option>\n              <Select.Option value=\".org\">.org</Select.Option>\n            </Select>\n          }\n          allowClear\n          placeholder=\"Enter host\"\n        />\n        <Input style={{ width: 350 }} addBefore=\"www.\" addAfter=\".com\" placeholder=\"Enter host\" />\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-image Preview with Arco Design in React\nDESCRIPTION: This code snippet sets up a simple React application that utilizes the `<Image.PreviewGroup>` component from Arco Design to display multiple images in a preview format. It imports necessary components from the '@arco-design/web-react' library and maps through an array of image sources to render them in a visually appealing layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/preview-group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Image, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const srcList = [\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/8361eeb82904210b4f55fab888fe8416.png~tplv-uwbnlip3yd-webp.webp',\n  ];\n  return (\n    <div>\n      <Space direction=\"vertical\">\n        <Image.PreviewGroup infinite>\n          <Space>\n            {srcList.map((src, index) => (\n              <Image key={index} src={src} width={200} alt={`lamp${index + 1}`} />\n            ))}\n          </Space>\n        </Image.PreviewGroup>\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Table State and Pagination in React\nDESCRIPTION: Implements state management for table data, pagination, loading, and row selection using React hooks\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/pagination.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [data, setData] = useState(allData);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [pagination, setPagination] = useState({\n    sizeCanChange: true,\n    showTotal: true,\n    total: 96,\n    pageSize: 10,\n    current: 1,\n    pageSizeChangeResetCurrent: true,\n  });\n  const [loading, setLoading] = useState(false);\n\n  function onChangeTable(pagination) {\n    const { current, pageSize } = pagination;\n    setLoading(true);\n    setTimeout(() => {\n      setData(allData.slice((current - 1) * pageSize, current * pageSize));\n      setPagination((pagination) => ({ ...pagination, current, pageSize }));\n      setLoading(false);\n    }, 1000);\n  }\n\n  return (\n    <Table\n      loading={loading}\n      columns={columns}\n      data={data}\n      pagination={pagination}\n      onChange={onChangeTable}\n      rowSelection={{\n        selectedRowKeys,\n        onChange: (selectedRowKeys, selectedRows) => {\n          console.log('selectedRowKeys', selectedRowKeys);\n          console.log('selectedRows', selectedRows);\n          setSelectedRowKeys(selectedRowKeys);\n        },\n      }}\n      renderPagination={(paginationNode) => (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginTop: 10,\n          }}\n        >\n          <Space>\n            <span>Selected {selectedRowKeys.length}</span>\n            <Button size=\"mini\">Save</Button>\n            <Button size=\"mini\">Delete</Button>\n          </Space>\n          {paginationNode}\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Arco Design Table with Fixed Columns in JavaScript\nDESCRIPTION: This snippet demonstrates configuring a table with columns that are fixed to the left and right using the Arco Design library with React. The table requires specifying the 'fixed' attribute in the column definition and ensuring a width is set on fixed columns. The 'scroll' attribute is necessary to handle overflowing table content. Dependencies include React and the '@arco-design/web-react' package. Main parameters include 'columns' and 'data'. Inputs are the 'columns' and 'data' arrays, while the output is a rendered table component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/fixed-column.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    fixed: 'left',\n    width: 140,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n  {\n    title: 'Other',\n    dataIndex: 'other',\n    render: () => 'Other',\n  },\n  {\n    title: 'Other 1',\n    dataIndex: 'other1',\n    render: () => 'Other 1',\n  },\n  {\n    title: 'Other 2',\n    dataIndex: 'other2',\n    render: () => 'Other 2',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    fixed: 'right',\n    width: 120,\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nconst App = () => {\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => `${record.name}'s address is ${record.address}`}\n      rowSelection={{}}\n      scroll={{\n        x: 1600,\n        y: 400,\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Upload List with Arco Design\nDESCRIPTION: Sets up a file upload component with a pre-populated list of files. Demonstrates handling of different file states including successful uploads and error states, with image URLs and status indicators.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/uploadList.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Radio, Modal } from '@arco-design/web-react';\nconst defaultFileList = [\n  {\n    uid: '-1',\n    name: 'ice.png',\n    url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n  },\n  {\n    status: 'error',\n    uid: '-2',\n    percent: 0,\n    response: '上传错误提示',\n    name: 'cat.png',\n    url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n  },\n  {\n    uid: '-3',\n    name: 'light.png',\n    url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Upload action=\"/\" multiple defaultFileList={defaultFileList}></Upload>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AutoComplete Options with React and Arco Design\nDESCRIPTION: This snippet demonstrates how to create a custom AutoComplete component using Arco Design and React hooks. It generates dynamic options based on user input and renders them as AutoComplete.Option components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/options.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete } from '@arco-design/web-react';\nconst { Option } = AutoComplete;\n\nfunction App() {\n  const [options, setOptions] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    setOptions(\n      inputValue ? new Array(5).fill(null).map((_, index) => `${inputValue}_${index}`) : []\n    );\n  };\n\n  return (\n    <AutoComplete\n      placeholder=\"Please Enter\"\n      style={{ width: 154 }}\n      onSearch={handleSearch}\n    >\n      {options.map((option) => (\n        <Option key={option} value={option}>\n          {option}\n        </Option>\n      ))}\n    </AutoComplete>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Half-Star Rating with Arco Design Rate Component\nDESCRIPTION: Demonstrates how to create a rating component that allows half-star selections using the Rate component from Arco Design. Sets a default value of 2.5 stars and enables half-star selection through the allowHalf prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/allowHalf.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Rate allowHalf defaultValue={2.5} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card with Tabs using Arco Design\nDESCRIPTION: Creates a card component with embedded tabs using Arco Design components. The example shows how to create multiple tab panes dynamically, configure tab styling, and handle content display. Each tab contains repeating content with dynamic indexing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/with-tab.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Tabs, Link } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\n\nconst App = () => {\n  return (\n    <Card\n      title=\"Card with Tab\"\n      extra={<Link>More</Link>}\n      style={{\n        width: '100%',\n      }}\n    >\n      <Tabs\n        style={{\n          maxWidth: 350,\n          margin: -15,\n        }}\n      >\n        {new Array(4).fill(null).map((_, index) => {\n          return (\n            <TabPane destroyOnHide key={index} title={`Tab ${index}`}>\n              <div\n                style={{\n                  margin: '0px 16px 16px 16px',\n                }}\n              >\n                {`Content ${index}`}\n                <br />\n                {`Content ${index}`}\n                <br />\n                {`Content ${index}`}\n              </div>\n            </TabPane>\n          );\n        })}\n      </Tabs>\n    </Card>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Message Component Methods in JavaScript\nDESCRIPTION: Methods available on the Message component for displaying different types of notifications (info, success, warning, error, normal, loading) and clearing all messages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.info(content: String) / Message.info(config: Object)\nMessage.success(content: String) / Message.success(config: Object)\nMessage.warning(content: String) / Message.warning(config: Object)\nMessage.error(content: String) / Message.error(config: Object)\nMessage.normal(content: String) / Message.normal(config: Object)\nMessage.loading(content: String) / Message.loading(config: Object)\nMessage.clear()\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Component Icons in Arco Design with React\nDESCRIPTION: This example demonstrates how to customize the icons in Message notifications using Arco Design. It shows how to use both icon fonts loaded from a CDN and imported SVG icons for different message types including info, success, warning, and error notifications.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Message, Button, Icon, Space } from '@arco-design/web-react';\nimport { IconFaceSmileFill } from '@arco-design/web-react/icon';\nconst IconFont = Icon.addFromIconFontCn({\n  src: '//at.alicdn.com/t/font_180975_26f1p759rvn.js',\n});\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button\n        onClick={() =>\n          Message.info({\n            icon: <IconFont type=\"icon-info\" />,\n            content: 'This is an info message!',\n          })\n        }\n        type=\"primary\"\n      >\n        Info (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Message.success({\n            icon: <IconFont type=\"icon-success\" />,\n            content: 'This is a primary message!',\n          })\n        }\n        type=\"primary\"\n        status=\"success\"\n      >\n        Success (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Message.warning({\n            icon: <IconFont type=\"icon-warning\" />,\n            content: 'This is a warning message!',\n          })\n        }\n        type=\"primary\"\n        status=\"warning\"\n      >\n        Warning (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Message.error({\n            icon: <IconFont type=\"icon-error\" />,\n            content: 'This is an error message!',\n          })\n        }\n        type=\"primary\"\n        status=\"danger\"\n      >\n        Error (Light)\n      </Button>\n      <Button\n        onClick={() =>\n          Message.info({\n            icon: <IconFaceSmileFill />,\n            content: 'This is a message!',\n          })\n        }\n        type=\"secondary\"\n      >\n        Smile\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Context in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a notification system in a React application using Arco Design's notifications. It utilizes the `useNotification` hook to manage notifications and displays them in response to button clicks. The `ConfigContext` is used to pass context data to the notifications.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/useNotification.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { createContext } from 'react';\nimport { Notification, Button, Space, ConfigProvider } from '@arco-design/web-react';\n\nconst ConfigContext = createContext({});\n\nconst App = () => {\n  const [notification, contextHolder] = Notification.useNotification();\n\n  const config = {\n    title: 'Profile',\n    content: <ConfigContext.Consumer>{(name) => `Current user: ${name}`}</ConfigContext.Consumer>,\n  };\n  return (\n    <ConfigContext.Provider value=\"PJY\">\n      {contextHolder}\n\n      <Space size=\"large\">\n        <Button onClick={() => notification.info?.(config)} type=\"primary\">\n          Info\n        </Button>\n        <Button onClick={() => notification.success?.(config)} type=\"primary\" status=\"success\">\n          Success\n        </Button>\n        <Button onClick={() => notification.warning?.(config)} type=\"primary\" status=\"warning\">\n          Warning\n        </Button>\n        <Button onClick={() => notification.error?.(config)} type=\"primary\" status=\"danger\">\n          Error\n        </Button>\n        <Button onClick={() => notification.normal?.(config)} type=\"secondary\">\n          Normal\n        </Button>\n      </Space>\n    </ConfigContext.Provider>\n  )\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing onRow and onHeaderRow Event Handling\nDESCRIPTION: Demonstrates how to use onRow and onHeaderRow callbacks to attach event listeners to table rows, supporting various interaction events like click, double-click, and mouse events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Table\n  onRow={(record, index) => {\n    return {\n      onClick: (event) => {}, // 点击表身行\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n  onHeaderRow={(column, index) => {\n    return {\n      onClick: (event) => {}, // 点击表头行\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Loading in React with Arco Design\nDESCRIPTION: This snippet demonstrates how to utilize React hooks and the Arco Design Select component to create an infinite scrolling dropdown that fetches user data from an external API based on the scroll position. It features debounce functionality for efficient data loading and proper handling of the fetching state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/on-popup-scroll.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useCallback, useState } from 'react';\nimport { Select, Spin, Avatar } from '@arco-design/web-react';\nimport debounce from 'lodash/debounce';\n\nfunction App() {\n  const [options, setOptions] = useState([]);\n  const [fetching, setFetching] = useState(false);\n  const refFetchId = useRef(null);\n  const refCanTriggerLoadMore = useRef(true);\n  const debouncedFetchUser = useCallback(\n    debounce((inputValue) => {\n      refFetchId.current = Date.now();\n      const fetchId = refFetchId.current;\n      setFetching(true);\n      setOptions([]);\n      fetch('https://randomuser.me/api/?results=10')\n        .then((response) => response.json())\n        .then((body) => {\n          if (refFetchId.current === fetchId) {\n            const newOptions = body.results.map((user) => ({\n              label: (\n                <div\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                >\n                  <Avatar\n                    size={24}\n                    style={{\n                      marginLeft: 6,\n                      marginRight: 12,\n                    }}\n                  >\n                    <img alt=\"avatar\" src={user.picture.thumbnail} />\n                  </Avatar>\n                  {`${user.name.first} ${user.name.last}`}\n                </div>\n              ),\n              value: user.email,\n            }));\n            setFetching(false);\n            setOptions(newOptions);\n          }\n        });\n    }, 500),\n    [options]\n  );\n\n  const popupScrollHandler = (element) => {\n    const { scrollTop, scrollHeight, clientHeight } = element;\n    const scrollBottom = scrollHeight - (scrollTop + clientHeight);\n\n    if (scrollBottom < 10) {\n      if (!fetching && refCanTriggerLoadMore.current) {\n        debouncedFetchUser();\n        refCanTriggerLoadMore.current = false;\n      }\n    } else {\n      refCanTriggerLoadMore.current = true;\n    }\n  };\n\n  return (\n    <Select\n      style={{ width: 345 }}\n      mode=\"multiple\"\n      options={options}\n      placeholder=\"Search by name\"\n      filterOption={false}\n      renderFormat={(option) => {\n        return option.children.props.children[1];\n      }}\n      notFoundContent={\n        fetching ? (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Spin style={{ margin: 12 }} />\n          </div>\n        ) : null\n      }\n      onSearch={debouncedFetchUser}\n      onPopupScroll={popupScrollHandler}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Cards with Arco Design Components in JavaScript\nDESCRIPTION: This snippet demonstrates how to create two types of simple cards using Arco Design components. It includes a reusable Content component and showcases cards with different interactive elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/only-content.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Avatar, Link, Typography, Space } from '@arco-design/web-react';\nimport { IconArrowRight } from '@arco-design/web-react/icon';\n\nconst Content = ({ children }) => {\n  return (\n    <Space\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Space>\n        <Avatar\n          style={{\n            backgroundColor: '#165DFF',\n          }}\n          size={28}\n        >\n          A\n        </Avatar>\n        <Typography.Text>Username</Typography.Text>\n      </Space>\n      {children}\n    </Space>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <Card\n        hoverable\n        style={{ width: 360, marginBottom: 20 }}\n      >\n        <Content>\n          <Link>More</Link>\n        </Content>\n      </Card>\n      <Card\n        className=\"card-with-icon-hover\"\n        hoverable\n        style={{ width: 360 }}\n      >\n        <Content>\n          <span className=\"icon-hover\">\n            <IconArrowRight\n              style={{\n                cursor: 'pointer',\n              }}\n            />\n          </span>\n        </Content>\n      </Card>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ACCard Component in React\nDESCRIPTION: This code snippet demonstrates how to import the ACCard component from the Arco Design library and render it within a React application. The ACCard component is configured with properties such as title, description, link, icon, and buttonText to display a card with specific content and actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: js:react\nCODE:\n```\nimport ACCard from '../src/widget/Card';\n\n<ACCard\n  title=\"ArcoPro\"\n  description=\"Use ArcoPro to quickly build modern web pages.\"\n  link=\"https://pro.arco.design\"\n  icon=\"ArcoPro\"\n  buttonText=\"Goto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Tree Structure with TreeSelect in React\nDESCRIPTION: This code snippet demonstrates how to create a tree structure using the `TreeSelect` component from the `@arco-design/web-react` library. It defines a `treeData` array containing objects that represent the nodes in the tree, including properties like `key`, `icon`, `title`, `disabled`, and `children`. The TreeSelect component is then rendered, passing the treeData as a prop and configuring other properties like placeholder and width.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/treeData.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TreeSelect } from '@arco-design/web-react';\nimport { IconCalendar } from '@arco-design/web-react/icon';\nconst treeData = [\n  {\n    key: 'node1',\n    icon: <IconCalendar />,\n    title: 'Trunk',\n    disabled: true,\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    icon: <IconCalendar />,\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return <TreeSelect treeData={treeData} placeholder=\"请选择...\" style={{ width: 300 }} />;\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: AvailableVirtualListProps Type for Virtual Scrolling Configuration\nDESCRIPTION: Type definition that selects specific properties from VirtualListProps for configuring virtual scrolling in the List component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Multi-Select Dropdown in React\nDESCRIPTION: This snippet demonstrates how to create a draggable multi-select dropdown using Arco Design's Select component. It allows users to select multiple cities and rearrange them by dragging. The component is configured with a placeholder, custom width, and a maximum tag count.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/darggable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Message, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen','a', 'b'];\n\nconst App = () => {\n  return (\n    <Select\n      placeholder=\"Select city\"\n      style={{ width: 345 }}\n      mode=\"multiple\"\n      dragToSort\n      defaultValue={options.slice(0, 3)}\n      maxTagCount={3}\n    >\n      {options.map((option, index) => (\n        <Option key={option} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component with Dropdown Menu in React\nDESCRIPTION: This code demonstrates how to combine Link components with Dropdown menus to create selectable navigation links. It shows both an enabled and disabled dropdown with a list of cities as menu items, utilizing Arco Design components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Link/__demo__/dropdown.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link, Dropdown, Menu, Divider } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst Droplist = (\n  <Menu>\n    <Menu.Item key=\"1\">Beijing</Menu.Item>\n    <Menu.Item key=\"2\">Shanghai</Menu.Item>\n    <Menu.Item key=\"3\">Guangzhou</Menu.Item>\n    <Menu.Item disabled key=\"4\">\n      <Link disabled>Shenzhen</Link>\n    </Menu.Item>\n  </Menu>\n);\n\nconst App = () => {\n  return (\n    <div>\n      <Dropdown droplist={Droplist} position=\"bl\">\n        <Link style={{ marginRight: 40 }}>\n          City\n          <IconDown style={{ fontSize: 12, marginLeft: 6 }} />\n        </Link>\n      </Dropdown>\n\n      <Dropdown\n        droplist={Droplist}\n        position=\"bl\"\n        disabled\n      >\n        <Link>\n          City\n          <IconDown style={{ fontSize: 12, marginLeft: 6 }} />\n        </Link>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsed Menu Component in React with Arco Design\nDESCRIPTION: This snippet demonstrates the creation of a collapsible menu within a React component. It utilizes state management to toggle the collapse state of the menu. Key dependencies include React, Arco Design's Menu, Button, and Icon components. The component handles button click events to change the collapsed state and conditionally renders tooltip content for menu items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/collapse-control.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Menu, Button } from '@arco-design/web-react';\nimport {\n  IconMenuFold,\n  IconMenuUnfold,\n  IconApps,\n  IconBug,\n  IconBulb,\n  IconBook,\n} from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\n\nfunction App() {\n  const [collapse, setCollapse] = useState(false);\n  return (\n    <div className=\"menu-demo\">\n      <Button\n        style={{\n          padding: '0 12px',\n          height: 30,\n          lineHeight: '30px',\n          marginBottom: 4,\n        }}\n        type=\"primary\"\n        onClick={() => setCollapse(!collapse)}\n      >\n        {collapse ? <IconMenuUnfold /> : <IconMenuFold />}\n      </Button>\n      <Menu\n        style={{ width: 200, borderRadius: 4 }}\n        theme=\"dark\"\n        collapse={collapse}\n        defaultOpenKeys={['0']}\n        defaultSelectedKeys={['0_2']}\n      >\n        <SubMenu\n          key=\"0\"\n          title={\n            <>\n              <IconApps /> Navigation 1\n            </>\n          }\n        >\n          <MenuItem key=\"0_0\">Menu 1</MenuItem>\n          <MenuItem key=\"0_1\">Menu 2</MenuItem>\n          <MenuItem key=\"0_2\">Menu 3</MenuItem>\n          <MenuItem key=\"0_3\">Menu 4</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"1\"\n          title={\n            <>\n              <IconBug /> Navigation 2\n            </>\n          }\n        >\n          <MenuItem key=\"1_0\">Menu 1</MenuItem>\n          <MenuItem key=\"1_1\">Menu 2</MenuItem>\n          <MenuItem key=\"1_2\">Menu 3</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"2\"\n          title={\n            <>\n              <IconBulb /> Navigation 3\n            </>\n          }\n        >\n          <MenuItem key=\"2_0\">Menu 1</MenuItem>\n          <MenuItem key=\"2_1\">Menu 2</MenuItem>\n        </SubMenu>\n        <MenuItem renderItemInTooltip={() => 'NAVIGATION-4'}>\n          <IconBook /> Navigation 4\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Group with Check All in React\nDESCRIPTION: This snippet creates a React component that renders a checkbox group with a 'Check All' option. It uses the Arco Design library's Checkbox component and manages the state of individual checkboxes and the 'Check All' checkbox, including indeterminate states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/check_all.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Checkbox } from '@arco-design/web-react';\nconst CheckboxGroup = Checkbox.Group;\nconst options = ['Option 1', 'Option 2', 'Option 3'];\n\nfunction App() {\n  const [indeterminate, setIndeterminate] = useState(true);\n  const [checkAll, setCheckAll] = useState(false);\n  const [value, setValue] = useState([0, 1]);\n\n  function onChangeAll(checked) {\n    if (checked) {\n      setIndeterminate(false);\n      setCheckAll(true);\n      setValue([0, 1, 2]);\n    } else {\n      setIndeterminate(false);\n      setCheckAll(false);\n      setValue([]);\n    }\n  }\n\n  function onChange(checkList) {\n    setIndeterminate(!!(checkList.length && checkList.length !== options.length));\n    setCheckAll(!!(checkList.length === options.length));\n    setValue(checkList);\n  }\n\n  return (\n    <div>\n      <div style={{ marginBottom: 16 }}>\n        <Checkbox onChange={onChangeAll} checked={checkAll} indeterminate={indeterminate}>\n          {checkAll ? 'unCheck All' : 'Check All'}\n        </Checkbox>\n      </div>\n      <CheckboxGroup\n        value={value}\n        options={options.map((x, i) => ({\n          label: x,\n          value: i,\n        }))}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Components with Front Labels in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to create Select components with front labels using the addBefore prop in Arco Design. It includes examples of both single and multiple selection modes, along with handling selection changes and displaying messages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/addbefore.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Message, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Tianjin'];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Select\n        addBefore=\"Select city\"\n        placeholder=\"Select city\"\n        style={{ width: 300 }}\n        onChange={(value) =>\n          Message.info({\n            content: `You select ${value}.`,\n            showIcon: true,\n          })\n        }\n      >\n        {options.map((option, index) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n      <Select\n        addBefore=\"Select city\"\n        placeholder=\"Select city\"\n        style={{ width: 300 }}\n        mode=\"multiple\"\n      >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 4} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Typography with Arco Design React\nDESCRIPTION: Example showcasing interactive typography features including copyable text and editable content using Arco Design's Typography component. Demonstrates implementation of editable headings from H1 to H6 and a paragraph with copy functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/operations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Typography, Divider } from '@arco-design/web-react';\n\nfunction App() {\n  const [str, setStr] = useState('Click the icon to edit this text.');\n  return (\n    <Typography>\n      <Typography.Paragraph copyable>Click the icon to copy this text.</Typography.Paragraph>\n      <Typography.Paragraph\n        editable={{\n          onChange: setStr,\n        }}\n      >\n        {str}\n      </Typography.Paragraph>\n      {\n        [...new Array(6)].map((_, index) => {\n          return <Typography.Title\n            editable\n            heading={index + 1}\n            style={{margin: 0}}\n          >\n            H{index+1}. The Pragmatic Romanticism\n          </Typography.Title>\n        })\n      }\n    </Typography>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Grid Gutter Implementation with Arco Design\nDESCRIPTION: This JavaScript code demonstrates the use of the `gutter` property within Arco Design's Grid component to manage spacing between columns. The example showcases the implementation of horizontal, responsive, and combined horizontal/vertical gutters by adjusting the `gutter` property with different values. The component imports `Grid` and `Divider` from `@arco-design/web-react`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/gutter.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid, Divider } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Divider orientation=\"left\">Horizontal</Divider>\n      <Row className=\"grid-gutter-demo\" gutter={24}>\n        <Col span={12}>\n          <div>col - 12</div>\n        </Col>\n        <Col span={12}>\n          <div>col - 12</div>\n        </Col>\n      </Row>\n      <Divider orientation=\"left\">Responsive</Divider>\n      <Row className=\"grid-gutter-demo\" gutter={{ md: 8, lg: 24, xl: 32 }}>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n      </Row>\n      <Divider orientation=\"left\">Horizontal and Vertical</Divider>\n      <Row className=\"grid-gutter-demo\" gutter={[24, 12]}>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n        <Col span={6}>\n          <div>col - 6</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dropdown in Select Component with React and Arco Design\nDESCRIPTION: This snippet shows how to use the dropdownRender prop of the Select component to add a custom input and button for adding new options. It uses React hooks for state management and Arco Design components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/dropdown-render.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Select, Divider, Input, Button } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\nconst Option = Select.Option;\n\nfunction App() {\n  const [options, setOptions] = useState(['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen']);\n  const [inputValue, setInputValue] = useState('');\n\n  const addItem = () => {\n    if (inputValue && options.indexOf(inputValue) === -1) {\n      setOptions(options.concat([inputValue]));\n      setInputValue('');\n    }\n  };\n\n  return (\n    <Select\n      style={{ width: 240 }}\n      placeholder=\"Select city\"\n      dropdownRender={(menu) => (\n        <div>\n          {menu}\n          <Divider style={{ margin: 0 }} />\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              padding: '10px 12px',\n            }}\n          >\n            <Input\n              size=\"small\"\n              style={{ marginRight: 18 }}\n              value={inputValue}\n              onChange={(value) => setInputValue(value)}\n            />\n            <Button\n              style={{ fontSize: 14, padding: '0 6px' }}\n              type=\"text\"\n              size=\"mini\"\n              onClick={addItem}\n            >\n              <IconPlus />\n              Add item\n            </Button>\n          </div>\n        </div>\n      )}\n      dropdownMenuStyle={{ maxHeight: 100 }}\n    >\n      {options.map((option) => (\n        <Option key={option} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing React Image Loading Component\nDESCRIPTION: React component demonstrating image loading with dynamic timestamp and loading states using Arco Design Image component\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/loader.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Image, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [timestamp, setTimestamp] = React.useState('');\n  return (\n    <div>\n      <div>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            setTimestamp(Date.now());\n          }}\n          style={{ marginBottom: 20 }}\n        >\n          reload\n        </Button>\n      </div>\n      <Space size={20}>\n        <Image\n          width={200}\n          height={200}\n          src={`//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp?timestamp=${timestamp}`}\n          loader={true}\n          alt=\"lamp1\"\n        />\n        <Image\n          width={200}\n          height={200}\n          src={`//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp?timestamp=${timestamp}`}\n          loaderClassName=\"image-demo-loader-animate\"\n          alt=\"lamp2\"\n          style={{ marginLeft: 67 }}\n        />\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Normalizing Input Values on Blur and Enter in Arco Design React Components\nDESCRIPTION: This JavaScript snippet demonstrates how to use Arco Design's Input component to normalize whitespace in user inputs. The normalization occurs when the input loses focus or the enter key is pressed. Key dependencies include React and @arco-design/web-react. The component renders inputs that automatically trim whitespace based on specified triggers, logging the normalized values. Required stylesheet width is set through the style attribute.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/normalize.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input, Space,Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space wrap size={20}>\n      <div>\n        <Typography.Paragraph>trim whitespace when out of focus：</Typography.Paragraph>\n        <Input\n          placeholder=\"Enter something\"\n          onChange={v => { console.log('current value: ', v); }}\n          normalizeTrigger={['onBlur']}\n          normalize={v => v ? v.trim() : v}\n          style={{ width: 350 }}\n        />\n      </div>\n      <div>\n\n        <Typography.Paragraph>trim whitespace when press enter：</Typography.Paragraph>\n        <Input\n          placeholder=\"Enter something\"\n          onChange={v => { console.log('current value: ', v); }}\n          normalize={v => v ? v.trim() : v}\n          normalizeTrigger={['onPressEnter']}\n          style={{ width: 350 }}\n        />\n      </div>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Anchor Components with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create horizontal Anchor components using Arco Design in a React application. It includes both a default version and a lineless mode version, showcasing various anchor links and their styling options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/horizontal.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Anchor,Typography } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <div>\n      <Typography.Paragraph>Default</Typography.Paragraph>\n      <Anchor\n        affix={false}\n        direction=\"horizontal\"\n      >\n        <AnchorLink href=\"#Basic\" title=\"Basic\" />\n        <AnchorLink href=\"#Static\" title=\"Static\" />\n        <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n        <AnchorLink href=\"#Affix\" title=\"Affix\" />\n        <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n        <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n      </Anchor>\n\n      <Typography.Paragraph style={{marginTop: 32}}>Lineless mode</Typography.Paragraph>\n      <Anchor\n        affix={false}\n        direction=\"horizontal\"\n        lineless\n      >\n        <AnchorLink href=\"#Basic\" title=\"Basic\" />\n        <AnchorLink href=\"#Static\" title=\"Static\" />\n        <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n        <AnchorLink href=\"#Affix\" title=\"Affix\" />\n        <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n        <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n      </Anchor>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Popup with Arco Design Components in JavaScript\nDESCRIPTION: This snippet demonstrates using the Arco Design library to create popup elements with different trigger actions: hover, click, and focus. The necessary dependencies include the '@arco-design/web-react' package. Key parameters in the Trigger component include mouseEnterDelay, mouseLeaveDelay, position, and classNames, which control the behavior and positioning of popups. The inputs and outputs involve DOM elements, and the popup layer is styled via CSS.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Trigger, Button, Tooltip, Input, Skeleton, Typography, Space } from '@arco-design/web-react';\n\nfunction Popup() {\n  return (\n    <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n      <Tooltip content=\"123\" defaultPopupVisible>\n        <span>123123</span>\n      </Tooltip>\n      <Skeleton />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Space style={{ width: 1000, overflow: 'auto' }} size={40}>\n      <Trigger\n        popup={() => <Popup />}\n        mouseEnterDelay={400}\n        mouseLeaveDelay={400}\n        position=\"bottom\"\n      >\n        <Typography.Text style={{ marginRight: 20 }}>\n          Hover me\n        </Typography.Text>\n      </Trigger>\n      <Trigger  popup={() => <Popup />} trigger=\"click\" position=\"bottom\" classNames=\"zoomInTop\">\n        <Button>Click me</Button>\n      </Trigger>\n      <Trigger popup={() => <Popup />} trigger=\"focus\" position=\"top\" classNames=\"zoomInBottom\">\n        <Input style={{ width: 200 }} placeholder=\"Focus on me\" />\n      </Trigger>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Card-Style Carousel with Arco Design\nDESCRIPTION: Implementation of a card-style carousel using Arco Design's Carousel component. The carousel features automatic playback, card animation, hidden arrows, and outer indicators. It displays a series of images with responsive width handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/animation-card.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nfunction App() {\n  return (\n    <Carousel\n      autoPlay\n      animation=\"card\"\n      showArrow=\"never\"\n      indicatorPosition=\"outer\"\n      style={{ width: '100%', height: 240 }}\n    >\n      {imageSrc.map((src, index) => (\n        <div\n          key={index}\n          style={{ width: '60%' }}\n        >\n          <img\n            src={src}\n            style={{ width: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Clickable Steps with onChange in React\nDESCRIPTION: This React code snippet demonstrates how to use the `onChange` event handler in the Arco Design `Steps` component to enable clickable step switching. It initializes a state variable `current` to track the active step and updates it using `setCurrent` within the `onChange` handler. The component renders both horizontal (arrow type) and vertical `Steps` components, both utilizing clickable steps.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/onchange.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [current, setCurrent] = useState(1);\n  return (\n    <div>\n      <Steps type=\"arrow\" current={current} onChange={setCurrent} style={{ marginBottom: 20 }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n      <Steps current={current} onChange={setCurrent} direction=\"vertical\">\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeSelect with Checkable Tree Nodes in React using Arco Design\nDESCRIPTION: This code demonstrates how to create a TreeSelect component with checkable tree nodes using Arco Design. It includes a sample tree data structure with parent-child relationships, and showcases the treeCheckStrictly option to toggle between dependent and independent checkbox selection modes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/checkable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TreeSelect, Checkbox } from '@arco-design/web-react';\nimport { useState } from 'react';\nconst treeData = [\n  {\n    title: 'Trunk 0-0',\n    value: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf 0-0-1',\n        value: 'Leaf 0-0-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        value: 'Branch 0-0-2',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'Leaf 0-0-2-1',\n            value: 'Leaf 0-0-2-1',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    value: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        value: 'Branch 0-1-1',\n        key: '0-1-1',\n        checkable: false,\n        children: [\n          {\n            title: 'Leaf 0-1-1-1',\n            value: 'Leaf 0-1-1-1',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf 0-1-1-2',\n            value: 'Leaf 0-1-1-2',\n            key: '0-1-1-2',\n            disabled: true,\n          },\n        ],\n      },\n      {\n        title: 'Leaf 0-1-2',\n        value: 'Leaf 0-1-2',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeCheckStrictly, setTreeCheckStrictly] = useState(false);\n  const [value, setValue] = useState(['0-1']);\n  return (\n    <div>\n      <div style={{ marginBottom: 20 }} >\n        <Checkbox checked={treeCheckStrictly} onChange={setTreeCheckStrictly}>\n          treeCheckStrictly\n        </Checkbox>\n      </div>\n      <TreeSelect\n        showSearch\n        allowClear\n        treeCheckable\n        treeData={treeData}\n        value={value}\n        treeCheckStrictly={treeCheckStrictly}\n        onChange={(value) => {\n          console.log(value);\n          setValue(value);\n        }}\n        style={{ width: 300, }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled ResizeBox with React\nDESCRIPTION: Creates a resizable container with controlled dimensions using ResizeBox component from @arco-design/web-react. The component uses React state to manage width and height, allowing for dynamic resizing within specified constraints (minimum width 100px, maximum width 100%).\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ResizeBox, Divider, Typography } from '@arco-design/web-react';\n\nconst { Paragraph } = Typography;\n\nfunction App() {\n  const [width, setWidth] = React.useState(500);\n  const [height, setHeight] = React.useState(200);\n  return (\n    <div>\n      <ResizeBox\n        directions={['right', 'bottom']}\n        style={{\n          minWidth: 100,\n          maxWidth: '100%',\n          textAlign: 'center',\n        }}\n        width={width}\n        height={height}\n        onMoving={(e, { width, height }) => {\n          setWidth(width);\n          setHeight(height);\n        }}\n      >\n        <Paragraph>We are building the future of content discovery and creation.</Paragraph>\n        <Divider />\n        <Paragraph>\n          ByteDance's content platforms enable people to enjoy content powered by AI technology. We\n          inform, entertain, and inspire people across language, culture and geography.\n        </Paragraph>\n        <Divider>ByteDance</Divider>\n        <Paragraph>Yiming Zhang is the founder and CEO of ByteDance.</Paragraph>\n      </ResizeBox>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering the Complete Table with Drag-and-Drop in JavaScript\nDESCRIPTION: This snippet constructs the Table component and integrates it with the sortable functionality using Arco Design's Table. It defines the components used for the table body and rows, making them draggable. The sortable table utilizes the defined columns and initial data, allowing for a dynamic table where users can reorder rows through drag-and-drop interactions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst components = {\n  body: {\n    tbody: DraggableContainer,\n    row: DraggableRow,\n  },\n};\nreturn (\n  <Table\n    className=\"arco-drag-table-container\"\n    components={components}\n    columns={columns}\n    data={data}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Utilizing Arco Design Components for Input Customization in JavaScript\nDESCRIPTION: This JavaScript code snippet defines a React component that uses Arco Design's InputTag and Grid components to demonstrate the use of prefix, addBefore, and addAfter properties. It highlights the ability to add customizable tags and prefixes like a currency symbol or an icon to input fields. The snippet requires the '@arco-design/web-react' package and '@arco-design/web-react/icon' to function correctly. Inputs are clearable, and they are displayed within a specified grid layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/prefix.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag, Grid } from '@arco-design/web-react';\nimport { IconUser } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div>\n      <Grid cols={2} colGap={12} rowGap={12} style={{maxWidth: 600}}>\n        <Grid.GridItem>\n          <InputTag\n            prefix=\"¥\"\n            allowClear\n          />\n        </Grid.GridItem>\n        <Grid.GridItem>\n          <InputTag\n            addBefore={<IconUser/>}\n            allowClear\n          />\n        </Grid.GridItem>\n\n        <Grid.GridItem>\n          <InputTag\n            prefix=\"¥\"\n            addBefore={<IconUser/>}\n            allowClear\n          />\n        </Grid.GridItem>\n\n        <Grid.GridItem>\n          <InputTag\n            addBefore={'www.'}\n            addAfter={'.com'}\n            allowClear\n          />\n        </Grid.GridItem>\n\n\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Cascader Dropdown with React\nDESCRIPTION: Demonstrates how to implement a controlled Cascader dropdown menu using Arco Design components. The example shows visibility control through state management, custom trigger behavior, and a custom footer with close functionality. The component uses a nested options structure for location selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/visible.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Message, Link, Button } from '@arco-design/web-react';\n\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n          {\n            value: 'fengtai',\n            label: 'fengtai',\n          },\n          {\n            value: 'shijingshan',\n            label: 'Shijingshan',\n          },\n          {\n            value: 'mentougou',\n            label: 'Mentougou',\n          },\n          {\n            value: 'fangshan',\n            label: 'Fangshan',\n          },\n          {\n            value: 'tongzhou',\n            label: 'Tongzhou',\n          },\n          {\n            value: 'shunyi',\n            label: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'guangzhou',\n    label: 'guangzhou',\n  },\n  {\n    value: 'shenzhen',\n    label: 'Shenzhen',\n  },\n  {\n    value: 'hangzhou',\n    label: '杭州',\n  },\n];\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div>\n      <p>\n        <Button\n          style={{ marginRight: 20 }}\n          onClick={() => {\n            setVisible(!visible);\n          }}\n        >\n          Show Menu\n        </Button>\n      </p>\n      <Cascader\n        style={{ width: 300, marginTop: 20 }}\n        placeholder=\"Please select ...\"\n        popupVisible={visible}\n        trigger={[]} // 具体触发时机可查看Trigger组件文档\n        onVisibleChange={setVisible}\n        triggerProps={{\n          clickOutsideToClose: false,\n        }}\n        allowClear\n        options={options}\n        renderFooter={() => {\n          return (\n            <Link\n              onClick={() => {\n                setVisible(false);\n              }}\n            >\n              Close\n            </Link>\n          );\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic BackTop Button with Arco Design\nDESCRIPTION: Example showing how to implement a BackTop button that appears when scrolling past 30px height. The component is configured to work within a specific target div and includes sample scrollable content using Typography components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/BackTop/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BackTop, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ position: 'relative', padding: '8px 12px' }}>\n      <BackTop\n        visibleHeight={30}\n        style={{ position: 'absolute' }}\n        target={() => document.getElementById('custom_backtop0')}\n      />\n      <Typography.Paragraph>\n        The button will appear in the bottom corner of the scrolling area\n      </Typography.Paragraph>\n      <div\n        id=\"custom_backtop0\"\n        style={{ height: 300, overflow: 'auto' }}\n      >\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n        <Typography.Paragraph>This is the content</Typography.Paragraph>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Groups with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to create radio groups using Arco Design's Radio component in React. It shows three different methods: using child Radio components, using a simple array of options, and using an array of option objects with custom properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/radio_group.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <RadioGroup defaultValue=\"a\" style={{ marginBottom: 20 }}>\n        <Radio value=\"a\">A</Radio>\n        <Radio value=\"b\">B</Radio>\n        <Radio value=\"c\">C</Radio>\n        <Radio disabled value=\"d\">\n          D\n        </Radio>\n      </RadioGroup>\n      <br />\n      <RadioGroup options={['A', 'B', 'C', 'D']} style={{ marginBottom: 20 }} />\n      <br />\n      <RadioGroup\n        options={[\n          {\n            label: 'A',\n            value: 'a',\n          },\n          {\n            label: 'B',\n            value: 'b',\n          },\n          {\n            label: 'C',\n            value: 'c',\n          },\n          {\n            label: 'D',\n            value: 'd',\n            disabled: true,\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Case-Sensitive AutoComplete in React with Arco Design\nDESCRIPTION: Shows how to create an AutoComplete component with case-sensitive matching using the strict property. The component is configured with a placeholder and sample data array containing city names.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/strict.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AutoComplete } from '@arco-design/web-react';\nconst data = ['beijing', 'beihai', 'baoding'];\n\nconst App = () => {\n  return (\n    <div>\n      <AutoComplete\n        placeholder=\"Input `B`\"\n        strict\n        data={data}\n        style={{ width: 154 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Progress Component API Specification\nDESCRIPTION: API table defining all available properties for the Progress component including required props, types, default values and version information. Covers functionality like animation, buffer, text display, percentage, steps and styling options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|Version|\n|---|---|---|---|---|\n|animation|Whether show animation, Only available when `type=\"line\"`|boolean |`-`|-|\n|buffer|Whether the Progress show buffer. Only available when `type=line`|boolean |`-`|-|\n|showText|Whether display text|boolean |`true`|-|\n|percent|percent|number  **(Required)**|`0`|-|\n|steps|Show step progress|number |`-`|2.10.0|\n|strokeWidth|The stroke width of Progress|number |`-`|-|\n|trailColor|The rest of progress bar color.|string |`-`|-|\n|size|The size of Progress|'small' \\| 'default' \\| 'mini' \\| 'large' |`default`|-|\n|status|Progress status.|'success' \\| 'error' \\| 'normal' \\| 'warning' |`-`|2.16.0|\n|type|The type of Progress|'line' \\| 'circle' |`line`|-|\n|bufferColor|Buffer color|string \\| object |`-`|-|\n|className|Additional css class|string \\| string[] |`-`|-|\n|color|Progress color, priority is higher than `status`|string \\| { [key: string]: string } |`-`|2.10.0|\n|style|Additional style|CSSProperties |`-`|-|\n|width|The Progress width. The `circle` type Progress only supports the number type `width`|string \\| number |`-`|-|\n|formatText|Progress text function|(percent: number) => ReactNode |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Managing InputTag Size with Arco Design in React\nDESCRIPTION: This React component allows users to select different sizes for an InputTag element using a RadioGroup. It uses the Arco Design library for UI components. The component maintains state for the selected size, updating it based on user interaction with the RadioGroup. It is configured to accept default values and allows clearing of input. The layout and styles are managed inline.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag, Radio } from '@arco-design/web-react';\nimport { useState } from 'react';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        style={{ marginBottom: 20, borderRadius: 4 }}\n        type=\"button\"\n        name=\"size\"\n        value={size}\n        onChange={(value) => setSize(value)}\n      >\n        <Radio value=\"mini\">mini</Radio>\n        <Radio value=\"small\">small</Radio>\n        <Radio value=\"default\">default</Radio>\n        <Radio value=\"large\">large</Radio>\n      </RadioGroup>\n      <br />\n      <InputTag\n        allowClear\n        size={size}\n        defaultValue={['Beijing', 'Shanghai']}\n        placeholder=\"Please input\"\n        style={{ maxWidth: 350, marginRight: 20 }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tag Rendering in Arco Design Select Component\nDESCRIPTION: This snippet demonstrates how to use the renderTag prop to customize the appearance of tags in a Select component. It creates color-coded tags for selected options using the Arco Design Tag component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/render-tag.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Tag } from '@arco-design/web-react';\nconst options = [\n  'red',\n  'orangered',\n  'orange',\n  'gold',\n  'lime',\n  'green',\n  'cyan',\n  'blue',\n  'arcoblue',\n  'purple',\n  'magenta',\n];\n\nfunction tagRender(props) {\n  const { label, value, closable, onClose } = props;\n  return (\n    <Tag\n      color={options.indexOf(value) > -1 ? value : 'gray'}\n      closable={closable}\n      onClose={onClose}\n      style={{ margin: '2px 6px 2px 0' }}\n    >\n      {label}\n    </Tag>\n  );\n}\n\nconst App = () => {\n  return (\n    <div>\n      <div style={{ marginBottom: 20 }}>\n        <Select\n          style={{ maxWidth: 350, marginRight: 20 }}\n          allowClear\n          placeholder=\"Select color\"\n          mode={'multiple'}\n          defaultValue={options.slice(0, 2)}\n          options={options}\n          renderTag={tagRender}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeline Nodes with dotColor, dotType and Custom React Nodes in Arco Design\nDESCRIPTION: This example demonstrates different ways to customize Timeline nodes in Arco Design. It shows how to change node colors using dotColor, modify node types with dotType, and pass custom React nodes through the dot property. The example includes three different Timeline instances with various customization approaches.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/dot.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Timeline, Space } from '@arco-design/web-react';\nimport { IconClockCircle, IconCheck, IconExclamationCircleFill } from '@arco-design/web-react/icon';\nconst TimelineItem = Timeline.Item;\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Timeline>\n        <TimelineItem label=\"2020-04-12\" dotColor=\"#00B42A\">\n          The first milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-05-17\">The second milestone</TimelineItem>\n        <TimelineItem\n          label=\"2020-06-22\"\n          dot={<IconClockCircle style={{ fontSize: 12, color: '#F53F3F' }} />}\n        >\n          The third milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-06-22\" dotColor=\"var(--color-fill-4)\">\n          The third milestone\n        </TimelineItem>\n      </Timeline>\n\n      <Timeline\n      >\n        <TimelineItem\n          label=\"2020-04-12\"\n          dot={\n            <IconCheck\n              style={{\n                fontSize: 12,\n                padding: 2,\n                boxSizing: 'border-box',\n                borderRadius: '50%',\n                backgroundColor: 'var(--color-primary-light-1)',\n              }}\n            />\n          }\n        >\n          The first milestone\n        </TimelineItem>\n        <TimelineItem\n          label=\"2020-05-17\"\n          dot={\n            <IconCheck\n              style={{\n                fontSize: 12,\n                padding: 2,\n                boxSizing: 'border-box',\n                borderRadius: '50%',\n                backgroundColor: 'var(--color-primary-light-1)',\n              }}\n            />\n          }\n        >\n          The second milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-06-22\">The third milestone</TimelineItem>\n        <TimelineItem label=\"2020-06-22\" dotColor=\"var(--color-fill-4)\">\n          The third milestone\n        </TimelineItem>\n      </Timeline>\n\n      <Timeline>\n        <TimelineItem label=\"2020-04-12\">The first milestone</TimelineItem>\n        <TimelineItem label=\"2020-05-17\" dotColor=\"var(--color-fill-4)\">\n          The second milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-06-22\" dotColor=\"var(--color-fill-4)\">\n          The third milestone\n        </TimelineItem>\n      </Timeline>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Resizable Menu with Slider Control in React\nDESCRIPTION: This snippet demonstrates how to create a customizable menu with adjustable width using Arco Design components. It uses a Slider component to control the width of a Menu component, with nested SubMenu and MenuItem elements organized in a hierarchical structure with icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Menu, Slider } from '@arco-design/web-react';\nimport { IconApps, IconBug, IconBulb } from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\n\nfunction App() {\n  const [width, setWidth] = useState(240);\n  return (\n    <div className=\"menu-demo\" style={{ height: 600 }}>\n      <Slider\n        style={{ width: 320, marginBottom: 24 }}\n        value={width}\n        onChange={(value) => setWidth(value)}\n        step={10}\n        min={160}\n        max={400}\n      />\n      <Menu\n        style={{ width: width, height: 'calc(100% - 28px)' }}\n        hasCollapseButton\n        defaultOpenKeys={['0']}\n        defaultSelectedKeys={['0_1']}\n      >\n        <SubMenu\n          key=\"0\"\n          title={\n            <>\n              <IconApps /> Navigation 1\n            </>\n          }\n        >\n          <MenuItem key=\"0_0\">Menu 1</MenuItem>\n          <MenuItem key=\"0_1\">Menu 2</MenuItem>\n          <MenuItem key=\"0_2\" disabled>\n            Menu 3\n          </MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"1\"\n          title={\n            <>\n              <IconBug /> Navigation 2\n            </>\n          }\n        >\n          <MenuItem key=\"1_0\">Menu 1</MenuItem>\n          <MenuItem key=\"1_1\">Menu 2</MenuItem>\n          <MenuItem key=\"1_2\">Menu 3</MenuItem>\n        </SubMenu>\n        <SubMenu\n          key=\"2\"\n          title={\n            <>\n              <IconBulb /> Navigation 3\n            </>\n          }\n        >\n          <MenuItem key=\"2_0\">Menu 1</MenuItem>\n          <MenuItem key=\"2_1\">Menu 2</MenuItem>\n          <MenuItem key=\"2_2\">Menu 3</MenuItem>\n        </SubMenu>\n      </Menu>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collapse Button with Arco Design Layout in React\nDESCRIPTION: This component demonstrates how to create a layout with a collapsible sidebar using Arco Design, where the default trigger is replaced by a custom button in the header. The sidebar contains a nested menu structure with icons and the collapse state is managed through component state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/collapsed.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport { Layout, Menu, Breadcrumb, Button, Message } from '@arco-design/web-react';\nimport { IconHome, IconCalendar, IconCaretRight, IconCaretLeft } from '@arco-design/web-react/icon';\n\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\nconst Sider = Layout.Sider;\nconst Header = Layout.Header;\nconst Footer = Layout.Footer;\nconst Content = Layout.Content;\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  };\n  handleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <Layout className=\"layout-collapse-demo\">\n        <Sider collapsed={this.state.collapsed} collapsible trigger={null} breakpoint=\"xl\">\n          <div className=\"logo\" />\n          <Menu\n            defaultOpenKeys={['1']}\n            defaultSelectedKeys={['0_3']}\n            onClickMenuItem={(key) =>\n              Message.info({\n                content: `You select ${key}`,\n                showIcon: true,\n              })\n            }\n            style={{ width: '100%' }}\n          >\n            <MenuItem key=\"0_1\" disabled>\n              <IconHome />\n              Menu 1\n            </MenuItem>\n            <MenuItem key=\"0_2\">\n              <IconCalendar />\n              Menu 2\n            </MenuItem>\n            <MenuItem key=\"0_3\">\n              <IconCalendar />\n              Menu 3\n            </MenuItem>\n            <SubMenu\n              key=\"1\"\n              title={\n                <span>\n                  <IconCalendar />\n                  Navigation 1\n                </span>\n              }\n            >\n              <MenuItem key=\"1_1\">Menu 1</MenuItem>\n              <MenuItem key=\"1_2\">Menu 2</MenuItem>\n              <SubMenu key=\"2\" title=\"Navigation 2\">\n                <MenuItem key=\"2_1\">Menu 1</MenuItem>\n                <MenuItem key=\"2_2\">Menu 2</MenuItem>\n              </SubMenu>\n              <SubMenu key=\"3\" title=\"Navigation 3\">\n                <MenuItem key=\"3_1\">Menu 1</MenuItem>\n                <MenuItem key=\"3_2\">Menu 2</MenuItem>\n                <MenuItem key=\"3_3\">Menu 3</MenuItem>\n              </SubMenu>\n            </SubMenu>\n            <SubMenu\n              key=\"4\"\n              title={\n                <span>\n                  <IconCalendar />\n                  Navigation 4\n                </span>\n              }\n            >\n              <MenuItem key=\"4_1\">Menu 1</MenuItem>\n              <MenuItem key=\"4_2\">Menu 2</MenuItem>\n              <MenuItem key=\"4_3\">Menu 3</MenuItem>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header>\n            <Button shape=\"round\" className=\"trigger\" onClick={this.handleCollapsed}>\n              {this.state.collapsed ? <IconCaretRight /> : <IconCaretLeft />}\n            </Button>\n          </Header>\n          <Layout style={{ padding: '0 24px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>Home</Breadcrumb.Item>\n              <Breadcrumb.Item>List</Breadcrumb.Item>\n              <Breadcrumb.Item>App</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content>Content</Content>\n            <Footer>Footer</Footer>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Button Menu with Arco Design in JavaScript\nDESCRIPTION: This React component creates floating button menus using Arco Design's Menu and Trigger components. It demonstrates how to set up popButton mode menus that display when buttons are clicked or hovered. The component shows two different styled menu triggers that toggle between message and close icons based on visibility state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/button.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Menu, Trigger } from '@arco-design/web-react';\nimport { IconMessage, IconClose, IconBug, IconBulb } from '@arco-design/web-react/icon';\nconst MenuItem = Menu.Item;\n\nfunction App() {\n  const renderMenu = () => {\n    return (\n      <Menu\n        style={{ marginBottom: -4 }}\n        mode=\"popButton\"\n        tooltipProps={{ position: 'left' }}\n        hasCollapseButton\n      >\n        <MenuItem key=\"1\">\n          <IconBug />\n          Bugs\n        </MenuItem>\n        <MenuItem key=\"2\">\n          <IconBulb />\n          Ideas\n        </MenuItem>\n      </Menu>\n    );\n  };\n\n  const [popupVisibleOne, setPopupVisibleOne] = useState(false);\n  const [popupVisibleTwo, setPopupVisibleTwo] = useState(false);\n  return (\n    <div className=\"menu-demo menu-demo-button\">\n      <Trigger\n        popup={renderMenu}\n        trigger={['click', 'hover']}\n        clickToClose\n        position=\"top\"\n        onVisibleChange={(v) => setPopupVisibleOne(v)}\n      >\n        <div className={`button-trigger ${popupVisibleOne ? 'button-trigger-active' : ''}`}>\n          {popupVisibleOne ? <IconClose /> : <IconMessage />}\n        </div>\n      </Trigger>\n\n      <Trigger\n        popup={renderMenu}\n        trigger={['click', 'hover']}\n        clickToClose\n        position=\"top\"\n        onVisibleChange={(v) => setPopupVisibleTwo(v)}\n      >\n        <div className={`button-trigger ${popupVisibleTwo ? 'button-trigger-active' : ''}`}>\n          {popupVisibleTwo ? <IconClose /> : <IconMessage />}\n        </div>\n      </Trigger>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TimePickerProps Type in TypeScript\nDESCRIPTION: Combines BaseTimePickerProps and PickerProps to create the TimePickerProps type for use in DatePicker components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TimePickerProps = BaseTimePickerProps & PickerProps;\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Tree Select in React with Arco Design\nDESCRIPTION: Example of using the TreeSelect component with the dragToSort property to enable drag-and-drop sorting of selected values. The component is set up with example tree data containing trunks and leaves, with multiple selection enabled.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/draggable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TreeSelect } from '@arco-design/web-react';\n\nconst treeData = [\n  {\n    key: 'node1',\n    title: 'Trunk1',\n    disabled: true,\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf1',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf2',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf3',\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <TreeSelect treeData={treeData} multiple dragToSort placeholder='请选择...' style={{ width: 300 }} />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Text Variants with Arco Design in React\nDESCRIPTION: Demonstrates different text styling variants using Typography.Text component from Arco Design. Shows how to apply different types (secondary, primary, success, warning, error), states (disabled, mark), and decorations (bold, underline, delete, code). Includes a Layout wrapper component for consistent spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/text.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Typography, Divider } from '@arco-design/web-react';\n\nfunction Layout(props) {\n  return React.Children.map(props.children, (child) => {\n    return (\n      <div style={{ marginBottom: 10, }} >\n        {child}\n      </div>\n    );\n  });\n}\n\nconst App = () => {\n  return (\n    <Layout>\n      <Typography.Text>Arco Design</Typography.Text>\n      <Typography.Text type=\"secondary\">Secondary</Typography.Text>\n      <Typography.Text type=\"primary\">Primary</Typography.Text>\n      <Typography.Text type=\"success\">Success</Typography.Text>\n      <Typography.Text type=\"warning\">Warning</Typography.Text>\n      <Typography.Text type=\"error\">Error</Typography.Text>\n      <Typography.Text bold>Bold</Typography.Text>\n      <Typography.Text disabled>Disabled</Typography.Text>\n      <Typography.Text mark>Mark</Typography.Text>\n      <Typography.Text underline>Underline</Typography.Text>\n      <Typography.Text delete>Line through</Typography.Text>\n      <Typography.Text code>Code snippet</Typography.Text>\n    </Layout>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing RangePicker with Dynamic Modes in React\nDESCRIPTION: This snippet demonstrates how to use the RangePicker component from Arco Design's DatePicker. It includes a radio button group for selecting different modes, and dynamically adjusts the RangePicker's properties based on the selected mode. The component handles onSelect and onChange events, and adjusts its style based on the chosen mode.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/range.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Radio, Space } from '@arco-design/web-react';\nconst { RangePicker } = DatePicker;\n\nfunction onSelect(dateString, date) {\n  console.log('onSelect', dateString, date);\n}\n\nfunction onChange(dateString, date) {\n  console.log('onChange: ', dateString, date);\n}\n\nfunction App() {\n  const [value, setValue] = useState('date');\n  const mode = value === 'date time' ? 'date' : value;\n  const style =\n    value === 'date time'\n      ? {\n          width: 380,\n        }\n      : {\n          width: 254,\n          marginBottom: 20,\n        };\n  return (\n    <Space direction=\"vertical\">\n      <Radio.Group\n        options={['date', 'week', 'month', 'year', 'quarter', 'date time']}\n        value={value}\n        onChange={(v) => setValue(v)}\n        type=\"button\"\n      />\n      <RangePicker\n        mode={mode}\n        onChange={onChange}\n        onSelect={onSelect}\n        style={style}\n        showTime={value === 'date time'}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Positions in React\nDESCRIPTION: Demonstrates how to create buttons that trigger notifications at different screen positions using Arco Design's Notification component. Supports top-left, top-right, bottom-left, and bottom-right positioning.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button\n        onClick={() =>\n          Notification.success({\n            title: 'Title',\n            content: 'This is a Notification!',\n            showIcon: true,\n            position: 'topLeft',\n          })\n        }\n        type=\"primary\"\n      >\n        Top Left\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.success({\n            title: 'Title',\n            content: 'This is a Notification!',\n            showIcon: true,\n            position: 'topRight',\n          })\n        }\n        type=\"primary\"\n      >\n        Top Right\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.success({\n            title: 'Title',\n            content: 'This is a Notification!',\n            showIcon: true,\n            position: 'bottomLeft',\n          })\n        }\n        type=\"primary\"\n      >\n        Bottom Left\n      </Button>\n      <Button\n        onClick={() =>\n          Notification.success({\n            title: 'Title',\n            content: 'This is a Notification!',\n            showIcon: true,\n            position: 'bottomRight',\n          })\n        }\n        type=\"primary\"\n      >\n        Bottom Right\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing TreeData Field Names in React TreeSelect Component\nDESCRIPTION: This React component demonstrates how to use the fieldNames property to customize the field mapping in a TreeSelect component. It maps custom field names (label, value, items) to the expected TreeSelect fields (title, key, children) to display hierarchical data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/fieldnames.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\nconst TreeNode = TreeSelect.Node;\nconst TreeData = [\n  {\n    label: 'Trunk 0-0',\n    value: '0-0',\n    items: [\n      {\n        label: 'Branch 0-0-2',\n        value: '0-0-2',\n        selectable: false,\n        items: [\n          {\n            label: 'Leaf',\n            value: '0-0-2-1',\n            items: [\n              {\n                label: 'Leaf 0-0-2',\n                value: '0-0-2-1-0',\n                items: [\n                  {\n                    label: 'Leaf',\n                    value: '0-0-2-1-0-0',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: 'Trunk 0-1',\n    value: '0-1',\n    items: [\n      {\n        label: 'Branch 0-1-1',\n        value: '0-1-1',\n        items: [\n          {\n            label: 'Leaf',\n            value: '0-1-1-0',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  return (\n    <div>\n      <TreeSelect\n        style={{ width: 300 }}\n        defaultValue={['0-1-1']}\n        treeData={treeData}\n        fieldNames={{\n          key: 'value',\n          title: 'label',\n          children: 'items',\n        }}\n      ></TreeSelect>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Searchable Cascader Components in React with Arco Design\nDESCRIPTION: This snippet demonstrates the implementation of searchable Cascader components using Arco Design's React library. It includes both single-select and multi-select versions with custom options and field mappings. The components allow searching, clearing, and have default values set.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/search.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    id: 'beijing',\n    name: 'Beijing',\n    child: [\n      {\n        id: 'Beijing',\n        name: 'Beijing',\n        child: [\n          {\n            id: 'chaoyang',\n            name: 'Chaoyang',\n            child: [\n              {\n                id: 'datunli',\n                name: 'Datunli',\n              },\n            ],\n          },\n          {\n            id: 'dongcheng',\n            name: 'Dongcheng',\n          },\n          {\n            id: 'xicheng',\n            name: 'Xicheng',\n          },\n          {\n            id: 'haidian',\n            name: 'Haidian',\n          },\n          {\n            id: 'fengtai',\n            name: 'fengtai',\n          },\n          {\n            id: 'shijingshan',\n            name: 'Shijingshan',\n          },\n          {\n            id: 'mentougou',\n            name: 'Mentougou',\n          },\n          {\n            id: 'fangshan',\n            name: 'Fangshan',\n          },\n          {\n            id: 'tongzhou',\n            name: 'Tongzhou',\n          },\n          {\n            id: 'shunyi',\n            name: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'shanghai',\n    name: 'Shanghai',\n    child: [\n      {\n        id: 'shanghaishi',\n        name: 'Shanghai',\n        child: [\n          {\n            id: 'huangpu',\n            name: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n        showSearch\n        allowClear\n        fieldNames={{\n          children: 'child',\n          label: 'name',\n          value: 'id',\n        }}\n      />\n      <Cascader\n        mode=\"multiple\"\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        onChange={(x, y) => {\n          console.log(x, y);\n        }}\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        showSearch={{ retainInputValueWhileSelect: false }}\n        allowClear\n        fieldNames={{\n          children: 'child',\n          label: 'name',\n          value: 'id',\n        }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone Selection in React\nDESCRIPTION: Implements a timezone selection interface with dynamic TimePicker and Select components, allowing users to choose different timezones and display time information\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/timezone.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TimePicker, Space, Select, Typography, Alert } from '@arco-design/web-react';\nconst zoneList = ['America/Los_Angeles', 'Europe/London', 'Africa/Cairo', 'Asia/Shanghai'];\nconst defaultValue = new Date('2022-02-22');\n\nfunction App() {\n  const [timezone, setTimezone] = useState('Asia/Shanghai');\n  const [value, setValue] = useState(defaultValue);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Select\n          defaultValue={timezone}\n          options={zoneList}\n          onChange={(tz) => setTimezone(tz)}\n          triggerProps={{\n            autoAlignPopupWidth: false,\n            position: 'bl',\n          }}\n        />\n        <TimePicker\n          timezone={timezone}\n          defaultValue={defaultValue}\n          onChange={(v, vd) => setValue(vd && vd.toDate())}\n        />\n      </Space>\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text> {value.toLocaleString('en-US')}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text> {value.toISOString()}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text> {value.valueOf()}\n            </div>\n          </Space>\n        }\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Extra Footer in React\nDESCRIPTION: This snippet demonstrates how to use the DatePicker component from Arco Design with an extra footer. It includes examples of both single date selection and date range selection with time. The extra footer is added using the 'extra' prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/extra.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker\n        extra=\"Extra footer\"\n        style={{ width: 200, marginBottom: 20 }}\n      />\n      <br />\n      <DatePicker.RangePicker\n        showTime\n        extra=\"Extra footer\"\n        style={{ width: 380 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Cell Content with Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet uses the Arco Design table component to demonstrate how cell content can be customized using the 'render' field within the columns definition. It requires the '@arco-design/web-react' library as a dependency. The snippet defines columns with a custom render function for the 'salary' field, and an array of data objects to populate the table. The table component is rendered using React, and the example illustrates how to visually differentiate salary values by adding a styled dollar sign prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/render.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Table, Tag } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    render: (col, record, index) => (\n      <span>\n        <span\n          style={{\n            color: '#FF7D00',\n            fontWeight: 600,\n          }}\n        >\n          $\n        </span>\n        {record.salary}\n      </span>\n    ),\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nconst App = () => {\n  return <Table columns={columns} data={data} />;\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Transfer Component Header in React with Arco Design\nDESCRIPTION: Example showing how to use the titleTexts prop to create custom headers for a Transfer component. The custom headers display counts of selected and total items, maintain the checkbox functionality for the source list, and add a clear button (using IconDelete) for the target list.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/custom-header.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\nimport { IconDelete } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const dataSource = new Array(8).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  const styleHeader = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  return (\n    <Transfer\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={[\n        ({ countTotal, countSelected, checkbox }) => {\n          return (\n            <div style={styleHeader}>\n              {`LEFT ${countSelected}-${countTotal}`}\n              {checkbox}\n            </div>\n          );\n        },\n        ({ countTotal, countSelected, clear }) => {\n          return (\n            <div style={styleHeader}>\n              {`RIGHT ${countSelected}-${countTotal}`}\n              <IconDelete\n                style={{ cursor: 'pointer', }}\n                onClick={clear}\n              />\n            </div>\n          );\n        },\n      ]}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading State Buttons with Arco Design in React\nDESCRIPTION: This example demonstrates how to implement buttons with loading states using Arco Design React components. It showcases static loading buttons of different types and shapes, buttons that enter loading state on click with timeout-based state reset, and a button with fixed width during loading transitions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/loading.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Divider } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [loading1, setLoading1] = useState(false);\n  const [loading2, setLoading2] = useState(false);\n  const [loading3, setLoading3] = useState(false);\n\n  function onClickBtn1() {\n    setLoading1(true);\n    setTimeout(() => {\n      setLoading1(false);\n    }, 4000);\n  }\n\n  function onClickBtn2() {\n    setLoading2(true);\n    setTimeout(() => {\n      setLoading2(false);\n    }, 4000);\n  }\n\n  function onClickBtn3() {\n    setLoading3(true);\n    setTimeout(() => {\n      setLoading3(false);\n    }, 4000);\n  }\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 100px)',\n          rowGap: 24,\n          columnGap: 24,\n          marginLeft: 24,\n        }}\n      >\n        <Button type=\"primary\" loading>\n          Loading\n        </Button>\n        <Button type=\"secondary\" loading>\n          Loading\n        </Button>\n        <Button type=\"dashed\" loading>\n          Loading\n        </Button>\n        <Button type=\"primary\" shape=\"circle\" loading />\n        <Button type=\"secondary\" shape=\"circle\" loading />\n        <Button type=\"dashed\" shape=\"circle\" loading />\n      </div>\n      <Button\n        type=\"primary\"\n        loading={loading1}\n        onClick={onClickBtn1}\n        style={{ margin: 24 }}\n      >\n        Click Me\n      </Button>\n      <Button\n        type=\"primary\"\n        loading={loading2}\n        onClick={onClickBtn2}\n        style={{ margin: 24 }}\n      >\n        {!loading2 && <IconPlus />}Click Me\n      </Button>\n      <Divider style={{ width: 440, minWidth: 440 }}>\n        loading fixed width\n      </Divider>\n      <Button\n        type=\"primary\"\n        loadingFixedWidth\n        loading={loading3}\n        onClick={onClickBtn3}\n        style={{ margin: 24 }}\n      >\n        Search\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Customized Arco Design Table Components\nDESCRIPTION: Defines custom table header and body operation columns with flexible node rendering and width configuration. Supports adding index columns, selection nodes, and expand nodes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/operations.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst components = {\n  header: {\n    operations: ({ selectionNode, expandNode }) => [\n      {\n        node: (\n          <th>\n            <div className=\"arco-table-th-item\">Index</div>\n          </th>\n        ),\n        width: 40,\n      },\n      {\n        name: 'selectionNode',\n        node: selectionNode,\n      },\n      {\n        name: 'expandNode',\n        node: expandNode,\n      },\n    ],\n  },\n  body: {\n    operations: ({ selectionNode, expandNode }) => [\n      {\n        node: (record) => <td>{record.key}</td>,\n        width: 40,\n      },\n      {\n        name: 'selectionNode',\n        node: selectionNode,\n      },\n      {\n        name: 'expandNode',\n        node: expandNode,\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modal with Context Access in React\nDESCRIPTION: Example demonstrating Modal.useModal hook to create modal dialogs that have access to the React context, unlike directly calling Modal methods.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [modal, contextHolder] = Modal.useModal();\n\n<Context.Provider>\n  {contextHolder}\n  <Button onClick={() => modal.warning({ title: 'Title', content: 'content' })}>Open</Button>\n</Context.Provider>\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Action Items in React using Arco Design\nDESCRIPTION: This code demonstrates how to implement lists with action items using Arco Design's List component. It features two different styled lists with edit and delete actions, a loading state toggle in the footer, and keyboard accessibility. The example creates a sample dataset and renders lists with different action styles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/actions.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { List, Avatar } from '@arco-design/web-react';\nimport { IconEdit, IconDelete, IconDown, IconLoading } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const dataSource = new Array(4).fill({\n    title: 'Beijing Bytedance Technology Co., Ltd.',\n    description: 'Beijing ByteDance Technology Co., Ltd. is an enterprise located in China.',\n  });\n  const [loading, setLoading] = useState(false);\n\n  const render = (actions, item, index) => (\n    <List.Item key={index} actions={actions}>\n      <List.Item.Meta\n        avatar={<Avatar shape=\"square\">A</Avatar>}\n        title={item.title}\n        description={item.description}\n      />\n    </List.Item>\n  );\n\n  const footer = (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n      }}\n      onClick={() => setLoading(!loading)}\n      onKeyDown={e => {\n        const keyCode = e.keyCode || e.which;\n        if (keyCode === 13) { // enter\n          setLoading(!loading)\n        }\n      }}\n    >\n      {loading ? (\n        <span style={{ color: 'var(--color-text-3)' }}>\n          <IconLoading style={{ marginRight: 8, color: 'rgb(var(--arcoblue-6))' }} />\n          loading...\n        </span>\n      ) : (\n        <span className=\"list-demo-actions-button\" tabIndex={0} >\n          More\n          <IconDown style={{ marginLeft: 8 }} />\n        </span>\n      )}\n    </div>\n  );\n  return (\n    <>\n      <List\n        className=\"list-demo-actions\"\n        style={{ width: 700, marginBottom: 48 }}\n        dataSource={dataSource}\n        render={render.bind(null, [\n          <span className=\"list-demo-actions-icon\">\n            <IconEdit />\n          </span>,\n          <span className=\"list-demo-actions-icon\">\n            <IconDelete />\n          </span>,\n        ])}\n        footer={footer}\n      />\n      <List\n        className=\"list-demo-actions\"\n        style={{ width: 700 }}\n        dataSource={dataSource}\n        render={render.bind(null, [\n          <span className=\"list-demo-actions-button\">Edit</span>,\n          <span className=\"list-demo-actions-button\">Delete</span>,\n        ])}\n      />\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Tokenization in Arco Design Select Component\nDESCRIPTION: This code creates a Select component with automatic tokenization feature. It uses tokenSeparators to split input, allows creation of new options, and supports multiple selections. The component is populated with predefined city options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/token-separators.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Wuhan'];\n\nconst App = () => {\n  return (\n    <Select\n      mode=\"multiple\"\n      placeholder=\"Select cities\"\n      tokenSeparators={[',', '|', '/']}\n      allowCreate\n      allowClear\n      style={{ width: 345 }}\n    >\n      {options.map((option) => (\n        <Option key={option} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Preview Container in React\nDESCRIPTION: Demonstrates how to use getPopupContainer to specify a custom mounting node for image preview, with custom styling and positioning\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/preview-get-popup-container.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Image } from '@arco-design/web-react';\n\nconst wrapperStyle = {\n  width: '100%',\n  height: 400,\n  backgroundColor: 'var(--color-fill-2)',\n  position: 'relative',\n  overflow: 'hidden',\n  lineHeight: '400px',\n  textAlign: 'center',\n};\n\nfunction App() {\n  const ref = React.useRef();\n  return (\n    <div style={wrapperStyle} ref={ref}>\n      <Image\n        width={200}\n        previewProps={{\n          getPopupContainer: () => ref.current,\n          closable: false,\n        }}\n        src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp\"\n        alt=\"lamp\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb Navigation with Custom Icons in Arco Design\nDESCRIPTION: This example demonstrates how to create breadcrumb navigation with custom icons using the Arco Design library. It shows two implementations: a standard breadcrumb with a home icon and a smaller version with custom font size, both using the Space component for layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/with-icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Breadcrumb, Space } from '@arco-design/web-react';\nimport { IconHome } from '@arco-design/web-react/icon';\nconst BreadcrumbItem = Breadcrumb.Item;\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <IconHome />\n        </BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n      <Breadcrumb style={{ fontSize: 12 }}>\n        <BreadcrumbItem>\n          <IconHome />\n        </BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Button Groups with Different Sizes in Arco Design\nDESCRIPTION: Creates a React component that displays four Radio Button Groups with different sizes using Arco Design components. The example includes options for cities with one disabled option, and demonstrates size variants mini, small, default, and large with consistent styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\nconst options = [\n  {\n    value: 'Beijing',\n    label: 'Beijing',\n  },\n  {\n    value: 'Shanghai',\n    label: 'Shanghai',\n  },\n  {\n    value: 'Guangzhou',\n    label: 'Guangzhou',\n    disabled: true,\n  },\n  {\n    value: 'Shenzhen',\n    label: 'Shenzhen',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <RadioGroup\n        options={options}\n        size=\"mini\"\n        type=\"button\"\n        defaultValue=\"Beijing\"\n        style={{ marginBottom: 20 }}\n      />\n      <br />\n      <RadioGroup\n        options={options}\n        size=\"small\"\n        type=\"button\"\n        defaultValue=\"Beijing\"\n        style={{ marginBottom: 20 }}\n      />\n      <br />\n      <RadioGroup\n        options={options}\n        size=\"default\"\n        type=\"button\"\n        defaultValue=\"Beijing\"\n        style={{ marginBottom: 20 }}\n      />\n      <br />\n      <RadioGroup\n        options={options}\n        size=\"large\"\n        type=\"button\"\n        defaultValue=\"Beijing\"\n        style={{ marginBottom: 20 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Disabling Time Options in TimePicker using React\nDESCRIPTION: This code snippet defines a React component that utilizes the TimePicker and RangePicker from the @arco-design/web-react library. By utilizing the properties 'disabledHours', 'disabledMinutes', and 'disabledSeconds', users can customize which hours, minutes, and seconds are selectable in the TimePicker. Key parameters include style for layout and the functions returning arrays of disabled values for hours, minutes, and seconds. The expected inputs are none for the functions while outputs modify the available time options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/disabledTime.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\nconst style = {\n  width: 194,\n  margin: '0 24px 24px 0',\n};\n\nconst App = () => {\n  return (\n    <div>\n      <TimePicker\n        style={style}\n        disabledHours={() => [1, 2, 4, 14]}\n        disabledMinutes={() => [1, 2, 3, 4, 14, 15, 16, 20, 50]}\n        disabledSeconds={() => [1, 2, 3, 4, 5, 6, 7, 10, 14, 60]}\n      />\n      <TimePicker.RangePicker\n        style={{ ...style, width: 252 }}\n        disabledHours={() => [1, 2, 4, 14]}\n        disabledMinutes={() => [1, 2, 3, 4, 14, 15, 16, 20, 50]}\n        disabledSeconds={() => [1, 2, 3, 4, 5, 6, 7, 10, 14, 60]}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Transfer Component with Custom Text and Dimensions in React\nDESCRIPTION: This code demonstrates how to create an advanced Transfer component with customized operation text, titles, and dimensions. It creates a shuttle interface with two lists, allowing items to be transferred between them. The component includes custom width and height settings and pre-selected items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/more.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const dataSource = new Array(10).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      showFooter\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '3', '4']}\n      defaultSelectedKeys={['2', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n      operationTexts={['To right', 'To left']}\n      listStyle={{\n        width: 220,\n        height: 316,\n      }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Menu using Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet uses the Arco Design library to implement a dropdown menu in a React application. Menu items are grouped under 'Menu.ItemGroup' with each group labeled accordingly. Required dependencies include React and Arco Design components. The main parameters include menu items and title, and it outputs a styled dropdown. Ensure appropriate styles are applied for correct appearance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Dropdown, Menu, Button } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst dropList = (\n  <Menu>\n    <Menu.ItemGroup title=\"Beijing\">\n      <Menu.Item>Haidian</Menu.Item>\n      <Menu.Item>Chaoyang</Menu.Item>\n      <Menu.Item>Shunyi</Menu.Item>\n    </Menu.ItemGroup>\n    <Menu.ItemGroup title=\"Hebei Province\">\n      <Menu.Item>Tangshan</Menu.Item>\n      <Menu.Item>Baoding</Menu.Item>\n    </Menu.ItemGroup>\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <div className=\"dropdown-demo\">\n      <Dropdown\n        trigger=\"click\"\n        position=\"bl\"\n        droplist={dropList}\n        triggerProps={{ autoAlignPopupWidth: true }}\n      >\n        <Button type=\"text\">\n          Group Menu <IconDown />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs in React with Arco Design\nDESCRIPTION: This code snippet showcases how to create a tabbed interface using Tabs from Arco Design web framework. It includes multiple TabPane components where the second tab is disabled. The component is structured to return a styled tab layout that allows users to switch between different content panels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Tabs, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nconst App = () => {\n  return (\n    <Tabs defaultActiveTab=\"1\">\n      <TabPane key=\"1\" title=\"Tab 1\">\n        <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n      </TabPane>\n      <TabPane key=\"2\" title=\"Tab 2\" disabled>\n        <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n      </TabPane>\n      <TabPane key=\"3\" title=\"Tab 3\">\n        <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual List in React Tree Component\nDESCRIPTION: This code demonstrates how to implement a virtual list in the Tree component from Arco Design to handle large amounts of data efficiently. It creates a nested tree structure with recursive functions and implements a scroll functionality to navigate to specific nodes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/virtual.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Tree, Button } from '@arco-design/web-react';\n\nfunction loop(path = '0', level = 2) {\n  const list = [];\n\n  for (let i = 0; i < 10; i += 1) {\n    const key = `${path}-${i}`;\n    const treeNode = {\n      title: key,\n      key,\n    };\n\n    if (level > 0) {\n      treeNode.children = loop(key, level - 1);\n    }\n\n    list.push(treeNode);\n  }\n\n  return list;\n}\n\nconst treeData = loop();\n\nfunction App() {\n  const treeRef = React.useRef();\n  return (\n    <div>\n      <Button\n        type=\"primary\"\n        style={{ marginBottom: 20 }}\n        onClick={() => {\n          treeRef.current && treeRef.current.scrollIntoView('0-0-2-2');\n        }}\n      >\n        Scroll to 0-0-2-2, i.e. the 26th.\n      </Button>\n      <Tree\n        ref={treeRef}\n        blockNode\n        checkable\n        treeData={treeData}\n        virtualListProps={{ height: 200 }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Province and City Selection React Component\nDESCRIPTION: Creates a coordinated selection interface for provinces and cities using React hooks and Arco Design components. Dynamically updates city options based on selected province.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/relative.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Select, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst data = {\n  Beijing: ['Haidian', 'Chaoyang', 'Changping'],\n  Sichuan: ['Chengdu', 'Mianyang', 'Aba'],\n  Guangdong: ['Guangzhou', 'Shenzhen', 'Shantou'],\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const provinces = Object.keys(data);\n  const defaultProvince = provinces[0];\n  const [province, setProvince] = useState(defaultProvince);\n  const [cities, setCities] = useState([]);\n  const [city, setCity] = useState('');\n  useEffect(() => {\n    const cities = data[province] || [];\n    setCities(cities);\n    setCity(cities[0]);\n  }, [province]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <Space size=\"large\">\n    <Select\n      placeholder=\"Select Province\"\n      style={{ width: 154 }}\n      onChange={(value) => setProvince(value)}\n      defaultValue={province}\n    >\n      {provinces.map((option, index) => (\n        <Option key={index} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n    <Select\n      placeholder=\"Select city\"\n      style={{ width: 154 }}\n      onChange={(value) => setCity(value)}\n      value={city}\n    >\n      {cities.map((option, index) => (\n        <Option key={index} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  </Space>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Descriptions Component in React\nDESCRIPTION: This snippet demonstrates how to use the Descriptions component from Arco Design to display user information. It imports the component, defines a data array with label-value pairs, and renders the component with specific props.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return <Descriptions colon=\" :\" layout=\"inline-horizontal\" title=\"User Info\" data={data} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Badge Component with React in Arco Design\nDESCRIPTION: This code demonstrates three variations of the Badge component from Arco Design: a numeric badge, a dot badge with custom styling, and a badge with a clock icon. Each badge is wrapped around an Avatar component and arranged in a Space container for proper spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, Avatar, Space } from '@arco-design/web-react';\nimport { IconClockCircle } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Badge count={9}>\n        <Avatar shape=\"square\" />\n      </Badge>\n      <Badge\n        count={9}\n        dot\n        dotStyle={{ width: 10, height: 10 }}\n      >\n        <Avatar shape=\"square\" />\n      </Badge>\n      <Badge\n        count={\n          <IconClockCircle\n            style={{ verticalAlign: 'middle', color: 'var(--color-text-2)' }}\n          />\n        }\n        dotStyle={{\n          height: 16,\n          width: 16,\n          fontSize: 14,\n        }}\n      >\n        <Avatar shape=\"square\" />\n      </Badge>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigation Steps with Arco Design\nDESCRIPTION: Creates a React component that renders multiple navigation step bars with different configurations using the Steps component from Arco Design library\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/navigation.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nfunction App() {\n  const [current, setCurrent] = useState(1);\n  return (\n    <div>\n      <Steps\n        type=\"navigation\"\n        current={current}\n        onChange={setCurrent}\n        style={{ width: 780, marginBottom: 60 }}\n      >\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      <Steps\n        type=\"navigation\"\n        size=\"small\"\n        current={current}\n        onChange={setCurrent}\n        style={{ width: 780, marginBottom: 60 }}\n      >\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      <Steps type=\"navigation\" current={current} onChange={setCurrent} style={{ width: 780 }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing UTC-aware DatePicker and RangePicker in React\nDESCRIPTION: This code snippet demonstrates how to create a React component that uses Arco Design's DatePicker and DatePicker.RangePicker with UTC offset support. It includes a UTC offset selector and displays the selected dates in different formats.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/utcOffset.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Space, Select, Typography, Alert, Tag } from '@arco-design/web-react';\nconst utcList = [];\nconst utcLength = 25;\nlet uo = -12;\n\nfor (let i = 0; i < 25; i++) {\n  utcList[i] = {\n    label: `UTC ${uo ? (uo > 0 ? `+${uo}` : uo) : ''}`,\n    value: uo++,\n  };\n}\n\nconst defaultValue = new Date('2022-02-22');\nconst defaultRangeValue = [new Date(2022, 1, 22, 8), new Date(2022, 2, 22, 10)];\n\nfunction App() {\n  const [utcOffset, setUtcOffset] = useState(0);\n  const [value, setValue] = useState(defaultValue);\n  const [rangeValue, setRangeValue] = useState(defaultRangeValue);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Select\n          defaultValue={utcOffset}\n          options={utcList}\n          onChange={(offset) => setUtcOffset(offset)}\n          triggerProps={{\n            autoAlignPopupWidth: false,\n            position: 'bl',\n          }}\n        />\n        <DatePicker\n          showTime\n          utcOffset={utcOffset}\n          value={value}\n          onChange={(v, vd) => setValue(vd && vd.toDate())}\n        />\n        <DatePicker.RangePicker\n          showTime\n          utcOffset={utcOffset}\n          value={rangeValue}\n          onChange={(v, vd) => setRangeValue(vd && vd.map((d) => d.toDate()))}\n        />\n      </Space>\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <Tag bordered color=\"gray\">\n              DatePicker\n            </Tag>\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text>\n              {value ? value.toLocaleString('en-US') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text>\n              {value ? value.toISOString() : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text>\n              {value ? value.valueOf() : '-'}\n            </div>\n          </Space>\n        }\n      />\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <Tag bordered color=\"gray\">\n              RangePicker\n            </Tag>\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.toLocaleString('en-US')).join(' --- ') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.toISOString()).join(' --- ') : '-'}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text>\n              {rangeValue ? rangeValue.map((v) => v.valueOf()).join(' --- ') : '-'}\n            </div>\n          </Space>\n        }\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Tabs Type Example in React\nDESCRIPTION: This code demonstrates how to create different types of tabs using the `type` property of the Arco Design Tabs component. It uses React's `useState` hook to manage the selected tab type, which is controlled by a Radio Group. The TabPane component is used to define the content of each tab.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/type.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Radio, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nfunction App() {\n  const [type, setType] = useState('line');\n  return (\n    <div>\n      <Radio.Group name=\"type\" value={type} onChange={setType} style={{ marginBottom: 40 }}>\n        <Radio value=\"line\">line</Radio>\n        <Radio value=\"card\">card</Radio>\n        <Radio value=\"card-gutter\">card-gutter</Radio>\n        <Radio value=\"text\">text</Radio>\n        <Radio value=\"rounded\">rounded</Radio>\n        <Radio value=\"capsule\">capsule</Radio>\n      </Radio.Group>\n\n      <Tabs type={type}>\n        <TabPane key=\"1\" title=\"Tab 1\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"2\" title=\"Tab 2\" disabled>\n          <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"3\" title=\"Tab 3\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"4\" title=\"Tab 4\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 4</Typography.Paragraph>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Close Popovers with Arco Design React\nDESCRIPTION: Example showing two popover implementations: one that closes on hover out and another that stays open until manually closed. Uses Arco Design's Popover, Button, Link, and Space components with state management for visibility control.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/__demo__/popupVisible.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Popover, Button, Link,Space } from '@arco-design/web-react';\n\nconst style = {\n  margin: 0,\n};\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [visible2, setVisible2] = React.useState(false);\n  return (\n    <Space size={40}>\n      <Popover\n        title=\"Title\"\n        popupVisible={visible}\n        onVisibleChange={setVisible}\n        content={\n          <span>\n            <p style={style}>Here is the text content</p>\n            <p style={style}>Here is the text content</p>\n            <p style={{ ...style, textAlign: 'right', marginTop: 4 }}>\n              <Link onClick={() => setVisible(false)}>Close</Link>\n            </p>\n          </span>\n        }\n      >\n        <Button type=\"primary\">\n          Hover\n        </Button>\n      </Popover>\n      <Popover\n        title=\"Title\"\n        popupVisible={visible2}\n        onVisibleChange={(visible) => {\n          if (visible) {\n            setVisible2(true);\n          }\n        }}\n        content={\n          <span>\n            <p style={style}>Here is the text content</p>\n            <p style={style}>Here is the text content</p>\n            <p style={{ ...style, textAlign: 'right', marginTop: 4 }}>\n              <Link onClick={() => setVisible2(false)}>Close</Link>\n            </p>\n          </span>\n        }\n      >\n        <Button type=\"primary\">Will not close when moved out</Button>\n      </Popover>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Tree Nodes with Arco Design in React\nDESCRIPTION: This code snippet demonstrates a draggable tree component using Arco Design. It features nodes that can be dragged and dropped, with visual feedback on drop operations. The component includes a checkbox to toggle whether nodes are checkable, and handles the restructuring of tree data during drag operations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/drag.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Checkbox } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf 0-0-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        disableCheckbox: true,\n        children: [\n          {\n            draggable: false,\n            title: 'Leaf 0-0-2-1 (Drag disabled)',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        checkable: false,\n        children: [\n          {\n            title: 'Leaf 0-1-1-1',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf 0-1-1-2',\n            key: '0-1-1-2',\n          },\n        ],\n      },\n      {\n        title: 'Leaf 0-1-2',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  const [checkedKeys, setCheckedKeys] = useState([]);\n  const [checked, setChecked] = useState(false);\n  return (\n    <div>\n      <Checkbox\n        checked={checked}\n        onChange={setChecked}\n        style={{ marginBottom: 20 }}\n      >\n        checkable\n      </Checkbox>\n      <Tree\n        draggable\n        blockNode\n        checkable={checked}\n        onDrop={({ dragNode, dropNode, dropPosition }) => {\n          const loop = (data, key, callback) => {\n            data.some((item, index, arr) => {\n              if (item.key === key) {\n                callback(item, index, arr);\n                return true;\n              }\n\n              if (item.children) {\n                return loop(item.children, key, callback);\n              }\n            });\n          };\n\n          const data = [...treeData];\n          let dragItem;\n          loop(data, dragNode.props._key, (item, index, arr) => {\n            arr.splice(index, 1);\n            dragItem = item;\n            dragItem.className = 'tree-node-dropover';\n          });\n\n          if (dropPosition === 0) {\n            loop(data, dropNode.props._key, (item, index, arr) => {\n              item.children = item.children || [];\n              item.children.push(dragItem);\n            });\n          } else {\n            loop(data, dropNode.props._key, (item, index, arr) => {\n              arr.splice(dropPosition < 0 ? index : index + 1, 0, dragItem);\n            });\n          }\n\n          setTreeData([...data]);\n          setTimeout(() => {\n            dragItem.className = '';\n            setTreeData([...data]);\n          }, 1000);\n        }}\n        treeData={treeData}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Arco Grid: Horizontal Layout with JavaScript\nDESCRIPTION: This code demonstrates how to create horizontal layouts using the Arco Design Grid component in a React application. It imports necessary components from `@arco-design/web-react` and defines a functional component `App` that renders a series of rows with different `justify` values to control horizontal alignment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/flex-justify.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid, Typography } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\nconst rowStyle = {\n  marginBottom: 40,\n  background: 'var(--color-fill-2)',\n};\nconst titleStyle = {\n  fontSize: 12,\n  color: '#141f33',\n};\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <p style={titleStyle}>\n        <Typography.Text>容器左排列</Typography.Text>\n      </p>\n      <Row className=\"grid-demo\" justify=\"start\" style={rowStyle}>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n      </Row>\n      <p style={titleStyle}>\n        <Typography.Text>容器居中排列</Typography.Text>\n      </p>\n      <Row className=\"grid-demo\" justify=\"center\" style={rowStyle}>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n      </Row>\n      <p style={titleStyle}>\n        <Typography.Text>容器右排列</Typography.Text>\n      </p>\n      <Row className=\"grid-demo\" justify=\"end\" style={rowStyle}>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n      </Row>\n      <p style={titleStyle}>\n        <Typography.Text>容器分散排列</Typography.Text>\n      </p>\n      <Row className=\"grid-demo\" justify=\"space-around\" style={rowStyle}>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n      </Row>\n      <p style={titleStyle}>\n        <Typography.Text>容器等距排列</Typography.Text>\n      </p>\n      <Row className=\"grid-demo\" justify=\"space-between\" style={rowStyle}>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n        <Col span={4}>\n          <div>col - 4</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Width for Input Component using React and Arco Design\nDESCRIPTION: This code snippet demonstrates how to import and use the `Input` component with the `autoWidth` property from the Arco Design library in a React application. The code imports `Input`, `Divider`, `Space`, `Typography`, and `Popover` from `@arco-design/web-react`, and uses them to construct an application that features input fields with flexible width configurations. The purpose of this setup is to adapt the input width dynamically based on the content length, constrained within specified `minWidth` and `maxWidth` boundaries.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/autoWidth.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input, Divider, Space,Typography, Popover } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Divider>\n        <Typography.Text code>{JSON.stringify({minWidth: 0, maxWidth: 500})}</Typography.Text>\n      </Divider>\n\n      <Input\n        placeholder=\"Enter something\"\n        autoWidth={{ maxWidth: 500}}\n      />\n\n      <Divider>\n        <Typography.Text code>{JSON.stringify({minWidth: 300, maxWidth: 500})}</Typography.Text>\n      </Divider>\n\n      <Input autoWidth={{minWidth: 300, maxWidth: 500}} placeholder=\"Enter something\" />\n      <br/><br/>\n      <Input\n        placeholder=\"Enter something\"\n        prefix=\"Prefix\"\n        autoWidth={{minWidth: 300, maxWidth: 500}}\n      />\n      <br/><br/>\n      <Input\n        placeholder=\"Enter something\"\n        addBefore=\"Before\"\n        prefix=\"Prefix\"\n        autoWidth={{minWidth: 300, maxWidth: 500}}\n      />\n      </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Buttons with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to create buttons with icons using Arco Design components in a React application. It shows two examples: a button with only an icon and a button with both an icon and text. The code uses the Button and Space components from Arco Design, along with specific icons from the icon package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\nimport { IconPlus, IconDelete } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button type=\"primary\" icon={<IconPlus />} />\n      <Button type=\"primary\" icon={<IconDelete />}>\n        Delete\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Drawers with React and Arco Design\nDESCRIPTION: This snippet demonstrates the implementation of nested drawers in a React application using the Arco Design framework. The component maintains two separate states for managing the visibility of the two drawers. It imports necessary components from React and Arco Design, and sets up button interactions to open and close the drawers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/nest.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [visible2, setVisible2] = useState(false);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={500}\n        title={<span>First Drawer </span>}\n        visible={visible}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <Button\n          onClick={() => {\n            setVisible2(true);\n          }}\n          type=\"primary\"\n          style={{ marginTop: 20 }}\n        >\n          Open Drawer\n        </Button>\n      </Drawer>\n      <Drawer\n        width={332}\n        title={<span>Second Drawer </span>}\n        visible={visible2}\n        onOk={() => {\n          setVisible2(false);\n        }}\n        onCancel={() => {\n          setVisible2(false);\n        }}\n      >\n        <div>Here is an example text.</div>\n\n        <div>Here is an example text.</div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Carousel with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create a vertical carousel using the Carousel component from Arco Design. It sets up the carousel with custom styling, vertical direction, and loads images from an array of URLs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/vertical.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nconst App = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 240 }}\n      showArrow=\"never\"\n      direction=\"vertical\"\n      indicatorPosition=\"right\"\n    >\n      {imageSrc.map((src, index) => (\n        <div key={index}>\n          <img\n            src={src}\n            style={{ width: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Arco Design Card in React\nDESCRIPTION: This snippet demonstrates how to use the Card component from Arco Design to create a basic card with a title, extra link, and content. It imports necessary components, sets up a functional component, and renders a card with custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Link } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ display: 'flex' }} >\n      <Card style={{ width: 360 }}\n        title=\"Arco Card\"\n        extra={<Link>More</Link>}\n      >\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats.\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component Implementation in React\nDESCRIPTION: This code snippet demonstrates the basic usage of the Avatar component from Arco Design. It shows multiple avatar types including text character, icon, words, and image-based avatars. The example illustrates how text content automatically adjusts to fit the avatar container size.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar, Typography, Space } from '@arco-design/web-react';\nimport { IconUser } from '@arco-design/web-react/icon';\nconst { Text } = Typography;\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Avatar>A</Avatar>\n      <Avatar style={{ backgroundColor: '#3370ff' }}>\n        <IconUser />\n      </Avatar>\n      <Avatar style={{ backgroundColor: '#14a9f8' }}>\n        Arco\n      </Avatar>\n      <Avatar style={{ backgroundColor: '#00d0b6' }}>\n        Design\n      </Avatar>\n      <Avatar>\n        <img\n          alt=\"avatar\"\n          src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp\"\n        />\n      </Avatar>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering 500 Error Page with Arco Design Result Component in React\nDESCRIPTION: This snippet demonstrates how to create a 500 error page using the Result component from Arco Design. It displays a '500' status, a subtitle indicating server error, and a 'Back' button as an extra element.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/500.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"500\"\n        subTitle=\"This page isn't working.\"\n        extra={<Button type=\"primary\">Back</Button>}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Data with Mock.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Mock.js to create mock data for a chat list API. It defines a mock rule that intercepts requests to '/api/chatList' and returns simulated chat data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mock from'mockjs';\n\nMock.mock(new RegExp('/api/chatList'), () => {\n  const data = Mock.mock({\n    'data|4-6': [\n      {\n        'id|+1': 1,\n        username:'User 7352772',\n        content:'It will start soon, so excited! ',\n        time: '13:09:12',\n        'isCollect|2': true,\n      },\n    ],\n  });\n\n  return data.data;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Range Slider in Arco Design with React\nDESCRIPTION: This React component demonstrates creating a slider with multiple dot selection capability using Arco Design's Slider component. It utilizes React's useState hook to manage the slider's values, allowing users to visually select multiple points. The component includes basic dependencies such as the Slider and Typography modules from '@arco-design/web-react'. The App component, exported by default, initially sets the slider to three points at positions 0, 20, and 50, which are dynamically displayed as selected values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/range-multi.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, Typography } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState([0, 20, 50]);\n  return (\n    <div style={{ width: 200 }}>\n      <Slider range value={value} onChange={setValue} />\n      <br/>\n      <Typography.Text code>value: {JSON.stringify(value)}</Typography.Text>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Cascader in React\nDESCRIPTION: Demonstrates the implementation of a Cascader component with draggable sorting functionality. The component is configured with multiple selection mode, search capability, and custom field mappings. It uses a nested data structure representing locations in Beijing and Shanghai.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/draggable.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader } from '@arco-design/web-react';\nconst options = [\n  {\n    id: 'beijing',\n    name: 'Beijing',\n    child: [\n      {\n        id: 'Beijing',\n        name: 'Beijing',\n        child: [\n          {\n            id: 'chaoyang',\n            name: 'Chaoyang',\n            child: [\n              {\n                id: 'datunli',\n                name: 'Datunli',\n              },\n            ],\n          },\n          {\n            id: 'dongcheng',\n            name: 'Dongcheng',\n          },\n          {\n            id: 'xicheng',\n            name: 'Xicheng',\n          },\n          {\n            id: 'haidian',\n            name: 'Haidian',\n          },\n          {\n            id: 'fengtai',\n            name: 'fengtai',\n          },\n          {\n            id: 'shijingshan',\n            name: 'Shijingshan',\n          },\n          {\n            id: 'mentougou',\n            name: 'Mentougou',\n          },\n          {\n            id: 'fangshan',\n            name: 'Fangshan',\n          },\n          {\n            id: 'tongzhou',\n            name: 'Tongzhou',\n          },\n          {\n            id: 'shunyi',\n            name: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'shanghai',\n    name: 'Shanghai',\n    child: [\n      {\n        id: 'shanghaishi',\n        name: 'Shanghai',\n        child: [\n          {\n            id: 'huangpu',\n            name: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Cascader\n        mode='multiple'\n        placeholder='Please select ...'\n        style={{ width: 600 }}\n        onChange={(x, y) => {\n          console.log(x, y);\n        }}\n        dragToSort\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        showSearch\n        allowClear\n        fieldNames={{\n          children: 'child',\n          label: 'name',\n          value: 'id',\n        }}\n      />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Data using Arco Design Table in JavaScript\nDESCRIPTION: This code snippet illustrates how to render hierarchical tree data using the Arco Design framework's Table component in a React application. It imports necessary components and sets up table columns and data, including a nested 'children' field to demonstrate tree data representation. The implementation provides a switch to toggle strict row selection mode, allowing users to control selection behavior. The dependencies include the '@arco-design/web-react' package and React core functionalities.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/data-children.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Table, Switch, Space } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n    children: [\n      {\n        key: '1-1',\n        name: 'Christina',\n        address: '332 Park Road, London',\n        email: 'christina@example.com',\n      },\n    ],\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n    children: [\n      {\n        key: '2-1',\n        name: 'Ed Hellen',\n        salary: 17000,\n        address: '42 Park Road, London',\n        email: 'ed.hellen@example.com',\n        children: [\n          {\n            key: '2-1-1',\n            name: 'Eric Miller',\n            salary: 23000,\n            address: '67 Park Road, London',\n            email: 'eric.miller@example.com',\n          },\n          {\n            key: '2-1-2',\n            name: 'Tom Jerry',\n            salary: 666,\n            address: '67 Park Road, London',\n            email: 'tom.jerry@example.com',\n          },\n        ],\n      },\n      {\n        key: '2-2',\n        name: 'William Smith',\n        salary: 27000,\n        address: '62 Park Road, London',\n        email: 'william.smith@example.com',\n      },\n      {\n        key: '2-3',\n        name: 'George Bush',\n        salary: 24000,\n        address: '62 Park Road, London',\n        email: 'george.bush@example.com',\n      },\n    ],\n  },\n  {\n    key: '7',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n];\n\nfunction App() {\n  const [checkStrictly, setCheckStrictly] = useState(true);\n  return (\n    <div>\n      <Space style={{ marginBottom: 16 }}>\n        checkStrictly:\n        <Switch onChange={(checked) => setCheckStrictly(checked)} checked={checkStrictly} />\n      </Space>\n      <Table\n        rowSelection={{\n          type: 'checkbox',\n          onChange: (selectedRowKeys, selectedRows) => {\n            console.log(selectedRowKeys, selectedRows);\n          },\n          checkStrictly,\n        }}\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Mini Progress Bars with Arco Design React Components\nDESCRIPTION: Demonstrates implementation of mini-sized progress bars using Arco Design's Progress component. Shows both linear and circular progress indicators with various states (default, error, success) and different completion percentages (0%, 40%, 70%, 100%).\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/mini.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Progress, Slider } from '@arco-design/web-react';\n\nfunction Demo() {\n  return (\n    <div>\n      <div>\n        <Progress\n          size=\"mini\"\n          percent={0}\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          percent={40}\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          percent={70}\n          status=\"error\"\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          percent={100}\n          status=\"success\"\n          style={{\n            marginRight: 80,\n          }}\n        />\n      </div>\n      <div\n        style={{\n          marginTop: 20,\n        }}\n      >\n        <Progress\n          size=\"mini\"\n          type=\"circle\"\n          percent={0}\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          type=\"circle\"\n          percent={40}\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          type=\"circle\"\n          percent={70}\n          status=\"error\"\n          style={{\n            marginRight: 80,\n          }}\n        />\n        <Progress\n          size=\"mini\"\n          type=\"circle\"\n          percent={100}\n          status=\"success\"\n          style={{\n            marginRight: 80,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return <Demo />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using TimePicker with Prefix in Arco Design (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of the 'prefix' property for the TimePicker and RangePicker components from Arco Design. The prefix is an icon component that appears alongside the time selection input. In this case, the 'IconInfoCircle' is used as the prefix. The snippet assumes that the '@arco-design/web-react' package is installed and imported correctly.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/prefix.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TimePicker, Space } from '@arco-design/web-react';\nimport { IconInfoCircle } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space>\n      <TimePicker prefix={<IconInfoCircle/>} style={{ width: 200, }} />\n      <TimePicker.RangePicker prefix={<IconInfoCircle/>} style={{ width: 250, }} />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Text Modal Dialog with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to implement a basic text modal dialog using Arco Design's Modal component. It shows state management for visibility, open/close functionality, and configuring modal properties like title, focus lock, and handlers for OK and Cancel actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Open Modal\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        autoFocus={false}\n        focusLock={true}\n      >\n        <p>\n          You can customize modal body text by the current situation. This modal will be closed\n          immediately once you press the OK button.\n        </p>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Dropdown in Arco Table (React)\nDESCRIPTION: This React component implements a custom filter dropdown for the 'Name' column in an Arco Design table. It utilizes `useState` and `useRef` hooks, along with Arco Design's `Table`, `Input`, and `Button` components. The `filterDropdown` prop allows rendering a custom search input, and the `onFilter` prop handles the filtering logic based on the input value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/filter-dropdown.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { Table, Input, Button } from '@arco-design/web-react';\nimport { IconSearch } from '@arco-design/web-react/icon';\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n\nfunction App() {\n  const inputRef = useRef(null);\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      filterIcon: <IconSearch />,\n      filterDropdown: ({ filterKeys, setFilterKeys, confirm }) => {\n        return (\n          <div className=\"arco-table-custom-filter\">\n            <Input.Search\n              ref={inputRef}\n              searchButton\n              placeholder=\"Please enter name\"\n              value={filterKeys[0] || ''}\n              onChange={(value) => {\n                setFilterKeys(value ? [value] : []);\n              }}\n              onSearch={() => {\n                confirm();\n              }}\n            />\n          </div>\n        );\n      },\n      onFilter: (value, row) => (value ? row.name.indexOf(value) !== -1 : true),\n      onFilterDropdownVisibleChange: (visible) => {\n        if (visible) {\n          setTimeout(() => inputRef.current.focus(), 150);\n        }\n      },\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n    },\n  ];\n  return <Table columns={columns} data={data} />;\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Buttons with Icons in React\nDESCRIPTION: Creates a radio group with three options, each containing an image icon alongside text. Uses Arco Design's Radio component with custom image styling for visual enhancement. One radio option is disabled to show state handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio } from '@arco-design/web-react';\nimport { IconXiguaColor, IconLarkColor, IconTiktokColor } from '@arco-design/web-react/icon';\nconst RadioGroup = Radio.Group;\nconst imgStyle = {\n  width: 30,\n  height: 30,\n  verticalAlign: 'middle',\n};\n\nconst App = () => {\n  return (\n    <div>\n      <RadioGroup>\n        <Radio value=\"BCY\">\n          <img\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/c621ef94232e4b91917c7d2e5d9eae00~tplv-uwbnlip3yd-image.image\"\n            style={imgStyle}\n          />\n          BCY\n        </Radio>\n        <Radio value=\"pipidance\">\n          <img\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cb76fb049c3c44128b26f02902a0373b~tplv-uwbnlip3yd-image.image\"\n            style={imgStyle}\n          />\n          Pipidance\n        </Radio>\n        <Radio disabled value=\"xigua\">\n          <img\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/74fb860e37aa4840a8eb235e6df6e6e0~tplv-uwbnlip3yd-image.image\"\n            style={imgStyle}\n          />\n          Xigua Video\n        </Radio>\n      </RadioGroup>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Arco Design Dark Theme with JavaScript\nDESCRIPTION: This code snippet demonstrates how to switch between light and dark themes in Arco Design by manipulating the `arco-theme` attribute of the `body` element. Setting the attribute to `dark` enables dark mode, while removing it reverts to the light theme. It is important to note that the page's styles will need to be updated to ensure a coherent theme.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/dark/md/header.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// 设置为暗黑主题\ndocument.body.setAttribute('arco-theme', 'dark');\n\n// 恢复亮色主题\ndocument.body.removeAttribute('arco-theme');\n```\n\n----------------------------------------\n\nTITLE: Customizing TreeData Field Names in Arco Design Tree Component\nDESCRIPTION: This code demonstrates how to customize the field names used in a Tree component's data structure using the fieldNames prop. It creates a nested tree structure with 'label', 'value', and 'items' fields, then maps them to the expected 'title', 'key', and 'children' fields that the Tree component expects.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/fieldnames.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    label: 'Trunk 0-0',\n    value: '0-0',\n    items: [\n      {\n        label: 'Branch 0-0-2',\n        value: '0-0-2',\n        selectable: false,\n        items: [\n          {\n            label: 'Leaf',\n            value: '0-0-2-1',\n            items: [\n              {\n                label: 'Leaf 0-0-2',\n                value: '0-0-2-1-0',\n                items: [\n                  {\n                    label: 'Leaf',\n                    value: '0-0-2-1-0-0',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: 'Trunk 0-1',\n    value: '0-1',\n    items: [\n      {\n        label: 'Branch 0-1-1',\n        value: '0-1-1',\n        items: [\n          {\n            label: 'Leaf',\n            value: '0-1-1-0',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  return (\n    <div>\n      <Tree\n        defaultSelectedKeys={['0-0-1']}\n        treeData={treeData}\n        fieldNames={{\n          key: 'value',\n          title: 'label',\n          children: 'items',\n        }}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled DatePicker Components in React with Arco Design\nDESCRIPTION: This code snippet showcases different implementations of disabled DatePicker components using Arco Design. It includes examples of single date selection, date range selection, and partially disabled date ranges. The component uses defaultValue to set initial dates and the disabled prop to control the disabled state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker\n        defaultValue=\"2020-08-08\"\n        disabled\n        style={{ width: 200, marginBottom: 20 }}\n      />\n      <br />\n      <DatePicker.RangePicker\n        defaultValue={['2020-08-08', '2020-08-18']}\n        disabled\n        style={{ width: 300, marginBottom: 20 }}\n      />\n      <br />\n      <DatePicker.RangePicker\n        defaultValue={[undefined, '2020-08-08']}\n        disabled={[false, true]}\n        style={{ width: 300, marginBottom: 20 }}\n      />\n      <br />\n      <DatePicker.RangePicker\n        showTime\n        defaultValue={['2020-08-08 02:02:02']}\n        disabled={[true, false]}\n        style={{ width: 380 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Adjustable DatePicker in React with Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a React component that allows users to switch between different sizes of the DatePicker component from Arco Design. It uses a RadioGroup for size selection and updates the DatePicker size dynamically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Radio, DatePicker } from '@arco-design/web-react';\n\nconst RadioGroup = Radio.Group;\n\nclass App extends React.Component {\n  state = {\n    size: 'default',\n  };\n  handleChange = (size) => {\n    this.setState({\n      size,\n    });\n  };\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <RadioGroup\n          type=\"button\"\n          mode=\"fill\"\n          name=\"size\"\n          value={this.state.size}\n          onChange={this.handleChange}\n          style={{ marginBottom: 20 }}\n        >\n          {['mini', 'small', 'default', 'large'].map((x) => {\n            return (\n              <Radio key={x} value={x}>\n                {x}\n              </Radio>\n            );\n          })}\n        </RadioGroup>\n        <br />\n        <DatePicker\n          size={size}\n          style={{ width: 254 }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Value After Option Selection - TypeScript\nDESCRIPTION: This snippet addresses a problem where the selected value is not displayed correctly after selecting the label of the Select component's Option when it is a rich text node.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the problem that the selected value is not displayed after selecting the `label` of the `Select` component `Option` as a rich text node.\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Total Count Display in Arco Design React\nDESCRIPTION: Demonstrates two ways to show total count in Pagination: using the simple showTotal boolean prop and using a custom render function to format the total display. The example shows both a basic implementation and a customized format showing range and total items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/show-total.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Pagination\n        showTotal\n        total={50}\n        style={{\n          marginBottom: 20,\n        }}\n      />\n      <Pagination\n        showTotal={(total, range) => <span>{`${range[0]} - ${range[1]} of ${total} items`}</span>}\n        total={200}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar with Multiple States in React\nDESCRIPTION: A React component demonstration using Arco Design's Progress component with different states, colors, and text formatting options. The example includes waiting state, warning state, buffer state, error state, and success state progress bars controlled by a slider.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Progress, Slider, Space } from '@arco-design/web-react';\n\nfunction Demo() {\n  const [value, setValue] = React.useState(30);\n  return (\n    <div>\n      <Space size={20}>\n        <div style={{ width: '300px' }}>\n          <Progress\n            percent={value}\n            color=\"#C9CDD4\"\n            formatText={() => 'Waiting...'}\n            style={{ marginBottom: 20 }}\n          />\n          <br />\n          <Progress\n            percent={value}\n            status=\"warning\"\n            formatText={(val) => `${val} / 100`}\n            style={{ marginBottom: 20 }}\n          />\n          <br />\n          <Progress percent={value} buffer />\n        </div>\n        <div style={{ width: '300px' }}>\n          <Progress percent={value} status=\"error\" style={{ marginBottom: 20 }} />\n          <br />\n          <Progress percent={value} status=\"success\" style={{ marginBottom: 20 }} />\n          <br />\n          <Progress percent={value} showText={false} />\n        </div>\n      </Space>\n      <div style={{ marginTop: 40 }}>\n        <Slider value={value} onChange={setValue} style={{ width: 100 }}></Slider>\n      </div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return <Demo />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading State Switches using Arco Design in JavaScript\nDESCRIPTION: This JavaScript snippet defines a React component named App which uses the Switch component from the Arco Design library. This component demonstrates how to render switches in a loading state with various types and sizes using the Space layout component. No external dependencies other than @arco-design/web-react are required. All the switches are set to a loading state, making them non-interactive. The component renders two groups of switches, each demonstrating different types like default, round, and line, both in large and small sizes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/__demo__/loading.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Switch, Divider, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Space size=\"large\">\n        <Switch loading defaultChecked />\n        <Switch loading />\n        <Switch loading type=\"round\" defaultChecked />\n        <Switch loading type=\"round\" />\n        <Switch loading type=\"line\" defaultChecked />\n        <Switch loading type=\"line\" />\n      </Space>\n      <Space size=\"large\">\n        <Switch loading size=\"small\" defaultChecked />\n        <Switch loading size=\"small\" />\n        <Switch loading size=\"small\" type=\"round\" defaultChecked />\n        <Switch loading size=\"small\" type=\"round\" />\n        <Switch loading size=\"small\" type=\"line\" defaultChecked />\n        <Switch loading size=\"small\" type=\"line\" />\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Arco Grid Layout\nDESCRIPTION: This code snippet demonstrates how to create a basic grid layout using Arco Design's `Grid.Row` and `Grid.Col` components. It imports the necessary components from the `@arco-design/web-react` library and defines a functional component `App` that renders a series of rows and columns with different `span` values. The `span` prop determines the width of each column as a fraction of the 24-column grid.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }} className=\"grid-demo-background\">\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col span={24}>\n          <div>24 - 100%</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col span={12}>\n          <div>12 - 50%</div>\n        </Col>\n        <Col span={12}>\n          <div>12 - 50%</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col span={8}>\n          <div>8 - 33.33%</div>\n        </Col>\n        <Col span={8}>\n          <div>8 - 33.33%</div>\n        </Col>\n        <Col span={8}>\n          <div>8 - 33.33%</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <div>6 - 25%</div>\n        </Col>\n        <Col span={6}>\n          <div>6 - 25%</div>\n        </Col>\n        <Col span={6}>\n          <div>6 - 25%</div>\n        </Col>\n        <Col span={6}>\n          <div>6 - 25%</div>\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\">\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n        <Col span={4}>\n          <div>4 - 16.66%</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications with Custom Buttons in Arco Design React\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `Notification` component from the `@arco-design/web-react` library to create a notification with custom action buttons. It specifies a `btn` field to include 'Cancel' and 'OK' buttons, which remove the notification when clicked. This implementation depends on `@arco-design/web-react` library, and requires an understanding of React components. The `updateNotification` function creates a notification, while the `App` component provides a button to trigger the notification. Inputs include none directly, but a button press triggers the function. Outputs include a user notification element with interactive buttons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/btn.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Notification, Button } from '@arco-design/web-react';\n\nfunction updateNotification() {\n  const id = `${Date.now()}`;\n  Notification.info({\n    id,\n    title: 'Notification',\n    content: 'This is a notification!',\n    duration: 0,\n    btn: (\n      <span>\n        <Button\n          type=\"secondary\"\n          size=\"small\"\n          onClick={() => Notification.remove(id)}\n          style={{ margin: '0 12px' }}\n        >\n          Cancel\n        </Button>\n        <Button type=\"primary\" size=\"small\" onClick={() => Notification.remove(id)}>\n          OK\n        </Button>\n      </span>\n    ),\n  });\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateNotification} type=\"primary\">\n      Open Notification\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing PageHeader with Custom Background in React\nDESCRIPTION: Creates a PageHeader component with a custom dotted background pattern using radial gradients. The component includes a title, subtitle, back button with click handler, and radio button group for size selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__demo__/background.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PageHeader, Radio, Message } from '@arco-design/web-react';\nconst ghostBgStyle = {\n  backgroundImage: 'radial-gradient(var(--color-fill-3) 1px, rgba(0, 0, 0, 0) 1px)',\n  backgroundSize: '16px 16px',\n  padding: 20,\n};\n\nconst App = () => {\n  return (\n    <div style={ghostBgStyle}>\n      <PageHeader\n        title=\"ArcoDesign\"\n        subTitle=\"This is a description\"\n        backIcon\n        onBack={() => Message.info('点击了返回按钮')}\n        extra={\n          <div>\n            <Radio.Group mode=\"fill\" type=\"button\" defaultValue=\"small\">\n              <Radio value=\"large\">Large</Radio>\n              <Radio value=\"medium\">Medium</Radio>\n              <Radio value=\"small\">Small</Radio>\n            </Radio.Group>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Buttons with Various Styles in React\nDESCRIPTION: This code snippet demonstrates how to create disabled buttons with different types and status colors using the Arco Design library in a React application. It showcases primary, secondary, dashed, outline, and text button types with default, danger, warning, and success status variations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Space size=\"large\">\n        <Button disabled type=\"primary\">\n          Primary\n        </Button>\n        <Button disabled type=\"secondary\">\n          Secondary\n        </Button>\n        <Button disabled type=\"dashed\">\n          Dashed\n        </Button>\n        <Button disabled type=\"outline\">\n          Outline\n        </Button>\n        <Button disabled type=\"text\">\n          Text\n        </Button>\n      </Space>\n      <Space size=\"large\">\n        <Button disabled type=\"primary\" status=\"danger\">\n          Primary\n        </Button>\n        <Button disabled type=\"secondary\" status=\"danger\">\n          Secondary\n        </Button>\n        <Button disabled type=\"dashed\" status=\"danger\">\n          Dashed\n        </Button>\n        <Button disabled type=\"outline\" status=\"danger\">\n          Outline\n        </Button>\n        <Button disabled type=\"text\" status=\"danger\">\n          Text\n        </Button>\n      </Space>\n      <Space size=\"large\">\n        <Button disabled type=\"primary\" status=\"warning\">\n          Primary\n        </Button>\n        <Button disabled type=\"secondary\" status=\"warning\">\n          Secondary\n        </Button>\n        <Button disabled type=\"dashed\" status=\"warning\">\n          Dashed\n        </Button>\n        <Button disabled type=\"outline\" status=\"warning\">\n          Outline\n        </Button>\n        <Button disabled type=\"text\" status=\"warning\">\n          Text\n        </Button>\n      </Space>\n      <Space size=\"large\">\n        <Button disabled type=\"primary\" status=\"success\">\n          Primary\n        </Button>\n        <Button disabled type=\"secondary\" status=\"success\">\n          Secondary\n        </Button>\n        <Button disabled type=\"dashed\" status=\"success\">\n          Dashed\n        </Button>\n        <Button disabled type=\"outline\" status=\"success\">\n          Outline\n        </Button>\n        <Button disabled type=\"text\" status=\"success\">\n          Text\n        </Button>\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeSelect with labelInValue in React\nDESCRIPTION: This snippet demonstrates using the TreeSelect component from Arco Design with labelInValue set to true. It shows how to handle and customize the format of the selected value, including adding an icon to the label. The component receives a treeData array for rendering the tree structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/labelInvalue.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\nimport { IconStar  } from '@arco-design/web-react/icon';\n\nconst treeData = [\n  {\n    key: 'node1',\n    title: 'Trunk',\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  const [value, setValue] = React.useState({\n    value: 'node2',\n    label: <span><IconStar/> Leaf</span>,\n  });\n\n  return (\n    <TreeSelect\n      labelInValue={true}\n      treeData={treeData}\n      value={value}\n      onChange={(v) => {\n        setValue(v ? {\n          value: v.value,\n          label: <span><IconStar/> {v.label}</span>\n        } : v)\n      }}\n      style={{ width: 300 }}\n    />\n  )\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Image PreviewGroup with Visibility Control - React\nDESCRIPTION: This snippet shows how to create a simple React component to use the Image.PreviewGroup. It demonstrates controlling the visibility of the image preview with a button, managing the currently displayed image through state management. The component relies on React hooks and the Arco Design library to function correctly.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/component-preview-group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Image, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const srcList = [\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/8361eeb82904210b4f55fab888fe8416.png~tplv-uwbnlip3yd-webp.webp',\n  ];\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setVisible(true)}>\n        Click me to preview multiple image\n      </Button>\n      <Image.PreviewGroup srcList={srcList} visible={visible} onVisibleChange={setVisible} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Mode Select with Various Configurations in React\nDESCRIPTION: This code snippet demonstrates the implementation of multiple selection mode in Arco Design's Select component. It includes examples of basic multiple selection, limiting visible tags, customizing excess tag display, and fully customizing tag rendering. The component uses the Space component for layout and maps over an array of city options to create Select.Option elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/multiple.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, Space, Tag } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Wuhan'];\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Select\n        mode=\"multiple\"\n        placeholder=\"Select cities\"\n        style={{ width: 345 }}\n        defaultValue={['Beijing', 'Shenzhen']}\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n\n      <Select\n        mode=\"multiple\"\n        maxTagCount={2}\n        placeholder=\"Select cities\"\n        style={{ width: 345 }}\n        defaultValue={['Beijing', 'Shenzhen', 'Wuhan']}\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n\n\n      <Select\n        mode=\"multiple\"\n        maxTagCount={{count: 2, render: (invisibleNumber) => `+${invisibleNumber} more`}}\n        placeholder=\"Select cities\"\n        style={{ width: 345 }}\n        defaultValue={['Beijing', 'Shenzhen', 'Wuhan']}\n        allowClear\n      >\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n\n      <Select\n        mode=\"multiple\"\n        placeholder=\"Select\"\n        style={{ width: 345 }}\n        defaultValue={['Beijing', 'Shenzhen', 'Wuhan']}\n        allowClear\n        renderTag={({ label, value, closable, onClose }, index, valueList) => {\n          const tagCount = valueList.length;\n\n          if (tagCount > 2) {\n            return index === 0 ? (\n              <span style={{ marginLeft: 8 }}>{`${tagCount} cities selected`}</span>\n            ) : null;\n          }\n\n          return (\n            <Tag\n              color=\"arcoblue\"\n              closable={closable}\n              onClose={onClose}\n              style={{ margin: '2px 6px 2px 0' }}\n            >\n              {label}\n            </Tag>\n          );\n        }}\n      >\n        {options.map((option) => (\n          <Option key={option} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Mini Arrow Step Bar with Arco Design and React\nDESCRIPTION: This snippet demonstrates the use of Arco Design's Steps component in a React application to create a mini-arrow step bar. The component is configured with 'type:arrow' and 'size:small', supporting only horizontal orientation and ignoring descriptions. It displays a sequence of steps with different statuses. Dependencies include '@arco-design/web-react'. Key parameters are 'type', 'size', 'current', and 'status', with expected inputs being the current step index and step status. The output is a visual step bar rendering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/arrow-mini.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <div>\n      <Steps type=\"arrow\" size=\"small\" current={2} style={{ maxWidth: 780, marginBottom: 20 }}>\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      <Steps type=\"arrow\" size=\"small\" status=\"error\" current={2} style={{ maxWidth: 780 }}>\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Carousel with Customizable Indicators in React\nDESCRIPTION: A React component demonstrating the use of Arco Design's Carousel component with configurable indicator types (dot, line, slider) and positions (left, right, top, bottom, outer). Uses Radio buttons for control options and displays a series of images in the carousel.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/indicator.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel, Radio } from '@arco-design/web-react';\nimport { useState } from 'react';\nconst RadioGroup = Radio.Group;\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nfunction App() {\n  const [indicatorType, setIndicatorType] = useState('dot');\n  const [indicatorPosition, setIndicatorPosition] = useState('bottom');\n  return (\n    <>\n      <RadioGroup\n        type=\"button\"\n        name=\"type\"\n        value={indicatorType}\n        onChange={(value) => { setIndicatorType(value) }}\n        style={{ marginBottom: 10 }}\n      >\n        <Radio value=\"dot\">dot</Radio>\n        <Radio value=\"line\">line</Radio>\n        <Radio value=\"slider\">slider</Radio>\n      </RadioGroup>\n      <br />\n      <RadioGroup\n        type=\"button\"\n        name=\"position\"\n        value={indicatorPosition}\n        onChange={(value) => {\n          setIndicatorPosition(value);\n        }}\n        style={{\n          marginBottom: 20,\n        }}\n      >\n        <Radio value=\"left\">left</Radio>\n        <Radio value=\"right\">right</Radio>\n        <Radio value=\"top\">top</Radio>\n        <Radio value=\"bottom\">bottom</Radio>\n        <Radio value=\"outer\">outer</Radio>\n      </RadioGroup>\n      <Carousel\n        indicatorType={indicatorType}\n        indicatorPosition={indicatorPosition}\n        showArrow=\"never\"\n        style={{ width: 600, height: 240 }}\n      >\n        {imageSrc.map((src, index) => (\n          <div key={index}>\n            <img\n              src={src}\n              style={{ width: '100%' }}\n            />\n          </div>\n        ))}\n      </Carousel>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltips with Arco Design in React\nDESCRIPTION: This example demonstrates how to use the Tooltip component from Arco Design to create tooltips that appear on mouse hover. It shows both a simple one-line tooltip and a longer multi-line tooltip applied to Typography Text components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tooltip/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tooltip, Typography } from '@arco-design/web-react';\nconst { Text } = Typography;\n\nconst App = () => {\n  return (\n    <div>\n      <Tooltip content=\"This is tooltip content\">\n        <Text style={{ marginRight: 20, }} >\n          Mouse over to display tooltip\n        </Text>\n      </Tooltip>\n      <Tooltip content=\"This is a two-line tooltip content.This is a two-line tooltip content.\">\n        <Text>Mouse over to display multiple lines tooltip</Text>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing TimePicker with UTC Offset Selection in React\nDESCRIPTION: This code demonstrates how to implement a TimePicker component with UTC offset functionality using Arco Design UI library. It creates a dropdown to select different UTC offsets (-12 to +12) and displays the selected time in different formats (locale string, ISO string, and timestamp). The example emphasizes using timestamp or Date objects rather than strings when working with UTC times.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/utcOffset.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { TimePicker, Space, Select, Typography, Alert } from '@arco-design/web-react';\nconst utcList = [];\nconst utcLength = 25;\nlet uo = -12;\n\nfor (let i = 0; i < 25; i++) {\n  utcList[i] = {\n    label: `UTC ${uo ? (uo > 0 ? `+${uo}` : uo) : ''}`,\n    value: uo++,\n  };\n}\n\nfunction App() {\n  const [utcOffset, setUtcOffset] = useState(0);\n  const [value, setValue] = useState(new Date('2022-02-22'));\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <Select\n          defaultValue={utcOffset}\n          options={utcList}\n          onChange={(offset) => setUtcOffset(offset)}\n          triggerProps={{\n            autoAlignPopupWidth: false,\n            position: 'bl',\n          }}\n        />\n        <TimePicker\n          utcOffset={utcOffset}\n          value={value}\n          onChange={(v, vd) => setValue(vd && vd.toDate())}\n        />\n      </Space>\n      <Alert\n        showIcon={false}\n        content={\n          <Space direction=\"vertical\">\n            <div>\n              <Typography.Text bold>Locale String:</Typography.Text> {value.toLocaleString('en-US')}\n            </div>\n            <div>\n              <Typography.Text bold>ISO String:</Typography.Text> {value.toISOString()}\n            </div>\n            <div>\n              <Typography.Text bold>Timestamp:</Typography.Text> {value.valueOf()}\n            </div>\n          </Space>\n        }\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb with Custom Separators in Arco Design React\nDESCRIPTION: This example demonstrates how to create breadcrumb navigation with three different separator styles using the Arco Design library. It shows a default breadcrumb, one with an IconRight component as separator, and one with a dot character as separator, all wrapped in a Space component for layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/separator.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Breadcrumb, Space } from '@arco-design/web-react';\nimport { IconRight } from '@arco-design/web-react/icon';\nconst BreadcrumbItem = Breadcrumb.Item;\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Breadcrumb>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n      <Breadcrumb separator={<IconRight />}>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n      <Breadcrumb separator={<span>・</span>}>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Visibility Using React\nDESCRIPTION: This snippet demonstrates how to use the TreeSelect component from the Arco Design library to control the visibility of a dropdown. The visibility is managed by a state variable and can be toggled using mouse events. It requires the React library and the @arco-design/web-react package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/popupVisible.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\n\nconst TreeNode = TreeSelect.Node;\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <TreeSelect\n      placeholder=\"hover to show options\"\n      popupVisible={visible} // 在鼠标移出下拉框和弹出框的时候触发，具体触发时机可查看Trigger组件文档\n      onVisibleChange={setVisible}\n      triggerProps={{\n        trigger: 'hover',\n      }}\n      style={{ width: 300 }}\n      allowClear\n    >\n      <TreeNode key=\"node1\" title=\"Trunk\">\n        <TreeNode key=\"node2\" title=\"Leaf\" />\n      </TreeNode>\n      <TreeNode key=\"node3\" title=\"Trunk2\">\n        <TreeNode key=\"node4\" title=\"Leaf\" />\n        <TreeNode key=\"node5\" title=\"Leaf\" />\n      </TreeNode>\n    </TreeSelect>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Clearable Rate Component in React\nDESCRIPTION: Demonstrates the usage of Rate component with allowClear prop to enable/disable rating clearing functionality. The example shows two instances of Rate component - one with allowClear enabled and another with default behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/allow-clear.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rate, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          marginBottom: 15,\n        }}\n      >\n        <Rate defaultValue={5} allowClear />\n        <Typography.Text style={{ margin: '0 16px' }}>allowClear: true</Typography.Text>\n      </div>\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <Rate defaultValue={5} />\n        <Typography.Text style={{ margin: '0 16px' }}>allowClear: false</Typography.Text>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Component with Reverse Toggle in React\nDESCRIPTION: This example demonstrates how to use the Timeline component from Arco Design with a reverse toggle feature. It includes a Switch component that allows users to change the direction of the timeline from top-to-bottom to bottom-to-top. The timeline displays three milestones with their respective dates.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Switch, Timeline, Typography } from '@arco-design/web-react';\n\nconst TimelineItem = Timeline.Item;\n\nclass App extends React.Component {\n  state = {\n    reverse: false,\n  };\n\n  render() {\n    const { reverse } = this.state;\n    return (\n      <div>\n        <div\n          style={{ marginBottom: 40, }}\n        >\n          <Typography.Text style={{ verticalAlign: 'middle', marginRight: 8, }} >\n            Reverse\n          </Typography.Text>\n          <Switch\n            style={{ verticalAlign: 'middle', }}\n            size=\"small\"\n            checked={reverse}\n            onChange={() => {\n              this.setState({\n                reverse: !this.state.reverse,\n              });\n            }}\n          />\n        </div>\n        <Timeline reverse={this.state.reverse}>\n          <TimelineItem label=\"2017-03-10\">The first milestone</TimelineItem>\n          <TimelineItem label=\"2018-05-12\">The second milestone</TimelineItem>\n          <TimelineItem label=\"2020-09-30\">The third milestone</TimelineItem>\n        </Timeline>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Spacing Components with React - JavaScript\nDESCRIPTION: This code snippet illustrates the basic implementation of spacing components in a React application from the Arco Design system. It includes the usage of 'Space', 'Button', 'Switch', 'Typography', and 'Tag' components. The output displays a flexible layout for UI elements that are visually spaced apart.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Space/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Space, Button, Switch, Typography, Tag } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space>\n      <Typography.Text>Space:</Typography.Text>\n      <Tag color=\"arcoblue\">Tag</Tag>\n      <Button type=\"primary\">Item1</Button>\n      <Button type=\"primary\">Item2</Button>\n      <Switch defaultChecked />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Upload Progress Bar with React\nDESCRIPTION: React component implementing a custom upload progress bar using Arco Design's Upload component. Features customizable progress bar properties, start/cancel/retry buttons, and file upload state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/progress.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Upload, Radio, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [fileList, setFileList] = React.useState([\n    {\n      status: 'init',\n      uid: '-2',\n      percent: 0,\n      name: 'light.png',\n      url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n    },\n    {\n      status: 'error',\n      uid: '-1',\n      percent: 0,\n      name: 'cat.png',\n      url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n    },\n  ]);\n  return (\n    <div className=\"custom-upload-progress\">\n      <Upload\n        showUploadList={{\n          startIcon: (\n            <Button size=\"mini\" type=\"text\">\n              开始上传\n            </Button>\n          ),\n          cancelIcon: (\n            <Button size=\"mini\" type=\"text\">\n              取消上传\n            </Button>\n          ),\n          reuploadIcon: (\n            <Button size=\"mini\" type=\"text\">\n              点击重试\n            </Button>\n          ),\n        }}\n        progressProps={{\n          size: 'small',\n          type: 'line',\n          showText: true,\n          width: '100%',\n        }}\n        multiple\n        fileList={fileList}\n        action=\"/\"\n        onChange={setFileList}\n        onProgress={(file) => {\n          setFileList((v) => {\n            return v.map((x) => {\n              return x.uid === file.uid ? file : x;\n            });\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing RTL View for Arco Design Components in React\nDESCRIPTION: This code snippet demonstrates how to use ConfigProvider to set Arco Design components to RTL mode. It includes a switch to toggle between RTL and LTR views, and showcases various components such as Tabs, Badge, Avatar, Tag, DatePicker, and Pagination in RTL layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/rtl.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport {\n  ConfigProvider,\n  Divider,\n  Switch,\n  Space,\n  Badge,\n  Avatar,\n  Tabs,\n  Tag,\n  DatePicker,\n  Pagination,\n} from '@arco-design/web-react';\n\nconst TabPane = Tabs.TabPane;\n\nfunction App() {\n  const [rtl, setRtl] = useState(true);\n\n  return (\n    <div>\n      <Switch checkedText='RTL' uncheckedText='LTR' checked={rtl} onChange={(checked) => setRtl(checked)} />\n      <Divider />\n      <ConfigProvider rtl={rtl} effectGlobalNotice={false}>\n        <Tabs defaultActiveTab='1' style={{ marginBottom: 20 }}>\n          <TabPane key='1' title='Tab 1' />\n          <TabPane key='2' title='Tab 2' />\n          <TabPane key='3' title='Tab 3' />\n        </Tabs>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          <Space size=\"large\">\n            <Badge count={9}>\n              <Avatar shape='square' />\n            </Badge>\n            <Badge\n              count={9}\n              dot\n              dotStyle={{ width: 10, height: 10 }}\n            >\n              <Avatar shape='square' />\n            </Badge>\n            <Tag color=\"red\" closable>red</Tag>\n            <Tag color=\"arcoblue\" closable>arcoblue</Tag>\n            <Tag color=\"green\" closable>green</Tag>\n          </Space>\n          <Space>\n            <DatePicker />\n            <DatePicker.RangePicker style={{ width: 300 }} />\n          </Space>\n          <Pagination defaultCurrent={5} total={200} sizeCanChange />\n        </Space>\n      </ConfigProvider>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ArcoDesign Select Component with Specified Options in React\nDESCRIPTION: This code snippet demonstrates the usage of the Select component from ArcoDesign. It shows how to create both single and multiple selection dropdowns with specified options. The component uses a predefined array of city names as options and sets default values for both select types.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/options.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Message, Space } from '@arco-design/web-react';\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Wuhan'];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Select\n        options={options}\n        defaultValue=\"Beijing\"\n        placeholder=\"Select city\"\n        style={{ width: 154 }}\n      />\n\n      <Select\n        mode=\"multiple\"\n        options={options}\n        defaultValue={['Beijing', 'Shanghai']}\n        placeholder=\"Select cities\"\n        style={{\n          width: 345,\n        }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Panel-Only DatePicker in React\nDESCRIPTION: Creates a DatePicker component that only shows the selection panel without an input field, using state management for value and picker value\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/panel.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState();\n  const [pickerValue, setPickerValue] = useState();\n  const [rangeValue, setRangeValue] = useState();\n  const [rangePickerValue, setRangePickerValue] = useState();\n  return (\n    <div>\n      <DatePicker\n        triggerElement={null}\n        style={{ width: 268 }}\n        value={value}\n        onChange={(v) => setValue(v)}\n        pickerValue={pickerValue}\n        onPickerValueChange={(v) => setPickerValue(v)}\n      />\n      <DatePicker.RangePicker\n        triggerElement={null}\n        style={{ width: 560, marginTop: 20 }}\n        value={rangeValue}\n        onChange={(v) => setRangeValue(v)}\n        pickerValue={rangePickerValue}\n        onPickerValueChange={(v) => setRangePickerValue(v)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Input with Arco Design in JavaScript\nDESCRIPTION: This React component defines a custom input element using the Arco Design library. The CustomInput component accepts value and onChange properties, manages its value through internal state changes, and includes an Input element with a prepended Select dropdown. The input manages its value through callbacks to a provided onChanged handler, making it compliant with Form.Item requirements for value updates. The form validates the Select input ensuring 'bbb' is chosen, illustrating integration with form validation rules.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/custom.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRef, useState, useEffect } from 'react';\nimport { Form, Input, Select, Typography } from '@arco-design/web-react';\n\nfunction CustomInput(props) {\n  const value = props.value || {};\n\n  const handleChange = (newValue) => {\n    props.onChange && props.onChange(newValue);\n  };\n\n  return (\n    <Input\n      value={value.input}\n      onChange={(v) => {\n        handleChange({ ...value, input: v });\n      }}\n      addBefore={\n        <Select // select component has defined error style\n          error={props.error}\n          placeholder=\"Please select ...\"\n          style={{ width: 100 }}\n          value={value.select}\n          options={['aaa', 'bbb']}\n          onChange={(v) => {\n            handleChange({ ...value, select: v });\n          }}\n        />\n      }\n    />\n  );\n}\n\nfunction App() {\n  const formRef = useRef();\n  const [values, setValues] = useState({});\n  return (\n    <div>\n      <Form ref={formRef} style={{ maxWidth: 650 }} autoComplete=\"off\" onValuesChange={(_, v) => setValues(v)}>\n        <Form.Item\n          rules={[\n            {\n              required: true,\n            },\n            {\n              validator: (val, cb) => {\n                console.log(val);\n\n                if (val.select !== 'bbb') {\n                  cb('Please select bbb');\n                }\n\n                cb();\n              },\n            },\n          ]}\n          label=\"Custom\"\n          field=\"customInput\"\n        >\n          <CustomInput />\n        </Form.Item>\n      </Form>\n      <Typography.Paragraph>\n        <p>Form Data:</p>\n        <pre>{JSON.stringify(values, null, 2)}</pre>\n      </Typography.Paragraph>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb with Dropdown Menu in Arco Design\nDESCRIPTION: This code demonstrates two methods for creating breadcrumb navigation with dropdown menus using Arco Design. The first approach uses the 'droplist' property to assign a Menu component as a dropdown, while the second approach uses a 'routes' configuration object to define a breadcrumb with nested navigation options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/with-dropdown.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Breadcrumb, Menu } from '@arco-design/web-react';\nconst BreadcrumbItem = Breadcrumb.Item;\nconst menu = (\n  <Menu>\n    <Menu.Item>Data</Menu.Item>\n    <Menu.Item>Users</Menu.Item>\n    <Menu.Item>Permission</Menu.Item>\n  </Menu>\n);\nconst routes = [\n  {\n    path: '/',\n    breadcrumbName: 'Home',\n  },\n  {\n    path: '/Channel',\n    breadcrumbName: 'Channel',\n    children: [\n      {\n        path: '/users',\n        breadcrumbName: 'Users',\n      },\n      {\n        path: '/permission',\n        breadcrumbName: 'Permission',\n      },\n    ],\n  },\n  {\n    path: '/news',\n    breadcrumbName: 'News',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Breadcrumb>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem droplist={menu}>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n      <br />\n      <Breadcrumb style={{ marginTop: 20 }} routes={routes}/>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Popup Position with Arco Design in React\nDESCRIPTION: This JavaScript snippet demonstrates the use of React with the Arco Design Trigger component to manage the visibility and position of a popup element. The code utilizes React hooks for state management and refs to update the Trigger position dynamically. The core dependencies are React and @arco-design/web-react library. Key parameters include the 'popupVisible' state to control the pop-up's appearance, and the 'position' attribute to define its alignment. The expected behavior includes toggling visibility and aligned positioning upon user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/mouse.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Trigger, Button, Input, Skeleton, Typography } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const triggerRef = React.useRef();\n  return (\n    <Trigger\n      ref={triggerRef}\n      alignPoint\n      trigger=\"click\"\n      position=\"bl\"\n      popupVisible={visible}\n      onClickOutside={() => {\n        setVisible(false);\n      }}\n      popup={() => (\n        <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n          <Skeleton />\n        </div>\n      )}\n    >\n      <div\n        className=\"demo-trigger-manual\"\n        onClick={() => {\n          if (visible) {\n            triggerRef.current.update();\n          } else {\n            setVisible(true);\n          }\n        }}\n      >\n        <Typography.Text>Click</Typography.Text>\n      </div>\n    </Trigger>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component with Different Status Options in React\nDESCRIPTION: This example shows how to use the Badge component from Arco Design with different status options. It demonstrates both standalone status dots and status dots with text labels. Available statuses include default, processing, success, warning, and error.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Badge, Divider, Space } from '@arco-design/web-react';\nimport { IconMessage } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Space size=\"large\">\n        <Badge status=\"default\" />\n        <Badge status=\"processing\" />\n        <Badge status=\"success\" />\n        <Badge status=\"warning\" />\n        <Badge status=\"error\" />\n      </Space>\n      <Space size=\"large\">\n        <Badge status=\"default\" text=\"Default\" />\n        <Badge status=\"processing\" text=\"Processing\" />\n        <Badge status=\"success\" text=\"Success\" />\n        <Badge status=\"warning\" text=\"Warning\" />\n        <Badge status=\"error\" text=\"Error\" />\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Comment Component with React and Arco Design\nDESCRIPTION: This snippet demonstrates how to create a basic comment component using React and Arco Design. It includes an avatar, author name, content, timestamp, and interactive action buttons for liking, starring, and replying. The component uses state to manage like and star actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Comment, Avatar } from '@arco-design/web-react';\nimport {\n  IconHeart,\n  IconMessage,\n  IconStar,\n  IconStarFill,\n  IconHeartFill,\n} from '@arco-design/web-react/icon';\n\nconst App = () => {\n  const [like, setLike] = React.useState();\n  const [star, setStar] = React.useState();\n  const actions = [\n    <button className=\"custom-comment-action\" key=\"heart\" onClick={() => setLike(!like)}>\n      {like ? (\n        <IconHeartFill style={{ color: '#f53f3f' }}/>\n      ) : (\n        <IconHeart />\n      )}\n      {83 + (like ? 1 : 0)}\n    </button>,\n    <button className=\"custom-comment-action\" key=\"star\" onClick={() => setStar(!star)}>\n      {star ? (\n        <IconStarFill style={{ color: '#ffb400' }}/>\n      ) : (\n        <IconStar />\n      )}\n      {3 + (star ? 1 : 0)}\n    </button>,\n    <button className=\"custom-comment-action\" key=\"reply\">\n      <IconMessage /> Reply\n    </button>,\n  ];\n  return (\n    <Comment\n      actions={actions}\n      author=\"Socrates\"\n      avatar={\n        <Avatar>\n          <img\n            alt=\"avatar\"\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp\"\n          />\n        </Avatar>\n      }\n      content={<div>Comment body content.</div>}\n      datetime=\"1 hour\"\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Validate Usage in Arco Design Form\nDESCRIPTION: This code demonstrates different ways to use the `validate` method in Arco Design Form. It includes examples of using a callback function, a Promise, and async/await to handle validation results and errors.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nthis.form.validate((errors, values) => {\n  console.log(errors, values);\n});\n// Or\nthis.form.validate().then((values) => {\n  console.log(values);\n}).catch((error) => {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n});\n// Or (Note to use in the async method)\ntry {\n  const values = await this.form.validate();\n} catch (error) {\n  console.log(error.name);\n  console.log(error.message);\n  console.log(error.errors);\n}\n```\n\n----------------------------------------\n\nTITLE: Form in Modal Example\nDESCRIPTION: This example demonstrates a common issue where the form methods cannot be called when the Form is nested inside a Modal component. The solution involves setting `mountOnEnter=false` on the Modal component to ensure the form is mounted before the methods are called.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\nconst [form] = Form.useForm();\nuseEffect(() => {\n  form.setFieldsValue({})\n}, [])\nreturn <div>\n  <Modal visible={visible}>\n    <Form form={form}>\n      {/** ... */}\n    </Form>\n  </Modal>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Refresh Form Component\nDESCRIPTION: The RefreshForm component provides a search input for a keyword and a button to trigger a refresh action, allowing users to filter results based on the keyword.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-provider.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction RefreshForm() {\\\n  return (\\\n    <Form id=\"refreshForm\" layout=\"inline\" style={{ width: 'auto' }}>\\\n      <Form.Item field=\"keyword\">\\\n        <Input.Search placeholder=\"enter keyword\" />\\\n      </Form.Item>\\\n      <Button htmlType=\"submit\">Refresh</Button>\\\n    </Form>\\\n  );\\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Alert Types with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to use the Alert component from Arco Design with its four different types: info, success, warning, and error. The alerts are arranged in a responsive grid layout using Row and Col components from the Grid module.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/type.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Alert, Grid } from '@arco-design/web-react';\nconst { Row, Col } = Grid;\n\nconst App = () => {\n  return (\n    <div>\n      <Row gutter={40}>\n        <Col span={12}>\n          <Alert\n            style={{ marginBottom: 20 }}\n            type=\"info\"\n            content=\"Here is an info text\"\n          />\n          <Alert type=\"warning\" content=\"Here is a warning text\" />\n        </Col>\n        <Col span={12}>\n          <Alert\n            style={{ marginBottom: 20 }}\n            type=\"success\"\n            content=\"Here is a success text\"\n          />\n          <Alert type=\"error\" content=\"Here is an error text\" />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Popconfirm Component with Different Positions in React\nDESCRIPTION: A React component that demonstrates 12 different positioning options for Popconfirm component from ArcoDesign. The example includes buttons positioned in a grid layout, each triggering a confirmation popup in different directions (top, bottom, left, right and their combinations). Each Popconfirm includes confirmation handlers that display success or error messages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Popconfirm, Button, Message } from '@arco-design/web-react';\nconst props = {\n  title: 'Are you sure you want to delete? ',\n  onOk: () => {\n    Message.info({\n      content: 'ok',\n    });\n  },\n  onCancel: () => {\n    Message.error({\n      content: 'cancel',\n    });\n  },\n};\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        width: 400,\n        height: 300,\n      }}\n    >\n      <Popconfirm focusLock position=\"tl\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 20,\n            left: 70,\n          }}\n        >\n          TL\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"top\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 20,\n            left: 180,\n          }}\n        >\n          Top\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"tr\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 20,\n            left: 290,\n          }}\n        >\n          TR\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"lt\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 60,\n            left: 10,\n          }}\n        >\n          LT\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"left\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 120,\n            left: 10,\n          }}\n        >\n          Left\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"lb\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 180,\n            left: 10,\n          }}\n        >\n          LB\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"rt\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 60,\n            left: 350,\n          }}\n        >\n          RT\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"right\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 120,\n            left: 350,\n          }}\n        >\n          Right\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"rb\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 180,\n            left: 350,\n          }}\n        >\n          RB\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"bl\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 226,\n            left: 70,\n          }}\n        >\n          BL\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"bottom\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 226,\n            left: 180,\n          }}\n        >\n          Bottom\n        </Button>\n      </Popconfirm>\n      <Popconfirm position=\"br\" {...props}>\n        <Button\n          style={{\n            position: 'absolute',\n            width: 80,\n            top: 226,\n            left: 290,\n          }}\n        >\n          BR\n        </Button>\n      </Popconfirm>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Buttons with Arco Design in React\nDESCRIPTION: This snippet creates a React component that renders a vertical space containing various types of long buttons using Arco Design components. It demonstrates primary, secondary, dashed, default, and text button styles that adapt to the container width.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/long.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\nimport { IconUpload } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space\n      style={{\n        width: 360,\n        border: '1px solid var(--color-border)',\n        borderRadius: 4,\n        padding: 20,\n      }}\n      direction=\"vertical\"\n      size=\"large\"\n    >\n      <Button type=\"primary\" long>\n        Primary\n      </Button>\n      <Button type=\"secondary\" long>\n        Secondary\n      </Button>\n      <Button type=\"dashed\" long>\n        Dashed\n      </Button>\n      <Button type=\"default\" long>\n        Default\n      </Button>\n      <Button type=\"text\" long>\n        Text\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography in ArcoDesign with React JavaScript\nDESCRIPTION: This React component code snippet demonstrates the implementation of typography elements using the ArcoDesign component library. It includes Titles, Paragraphs, and Text components designed to showcase different text formatting capabilities. Dependencies include '@arco-design/web-react' for typography components and React.js for component management. The snippet outputs styled typography content within a styled container.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Typography } from '@arco-design/web-react';\nconst { Title, Paragraph, Text } = Typography;\n\nconst App = () => {\n  return (\n    <Typography style={{ marginTop: -40 }}>\n      <Title>Design system</Title>\n      <Paragraph>\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a prototype, product or process. The verb to design expresses the process of\n        developing a design.\n      </Paragraph>\n      <Paragraph>\n        In some cases, the direct construction of an object without an explicit prior plan (such as\n        in craftwork, some engineering, coding, and graphic design) may also be considered\n        <Text bold>to be a design activity.</Text>\n      </Paragraph>\n      <Title heading={2}>ArcoDesign</Title>\n      <Paragraph>\n        The ArcoDesign component library defines a set of default particle variables, and a custom\n        theme is to <Text mark>customize</Text> and <Text underline>overwrite</Text> this variable\n        list.\n      </Paragraph>\n      <Paragraph blockquote>\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a <Text code>prototype</Text>, <Text code>product</Text> or\n        <Text code>process</Text>. The verb to design expresses the process of developing a design.\n      </Paragraph>\n      <Paragraph mark underline delete>\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process.\n      </Paragraph>\n      <Paragraph>\n        <ul>\n          <li>\n            Architectural blueprints\n            <ul>\n              <li>Architectural blueprints</li>\n            </ul>\n          </li>\n          <li>Engineering drawings</li>\n          <li>Business processes</li>\n        </ul>\n      </Paragraph>\n      <Paragraph>\n        <ol>\n          <li>Architectural blueprints</li>\n          <li>Engineering drawings</li>\n          <li>Business processes</li>\n        </ol>\n      </Paragraph>\n    </Typography>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Closable Alerts with Arco Design React\nDESCRIPTION: Demonstrates creating a grid layout with different types of closable alert components. Shows how to use the Alert component with various types (info, warning, success, error) and customize them with titles and content. Uses Grid component for responsive layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/closable.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert, Grid } from '@arco-design/web-react';\nconst { Row, Col } = Grid;\n\nconst App = () => {\n  return (\n    <div>\n      <Row gutter={40}>\n        <Col span={12}>\n          <Alert\n            closable\n            style={{ marginBottom: 20 }}\n            type=\"info\"\n            content=\"Here is an info text\"\n          />\n          <Alert\n            closable\n            style={{ marginBottom: 20 }}\n            type=\"warning\"\n            title=\"Warning\"\n            content=\"Here is a warning text\"\n          />\n        </Col>\n        <Col span={12}>\n          <Alert\n            closable\n            style={{ marginBottom: 20 }}\n            type=\"success\"\n            content=\"Here is a success text\"\n          />\n          <Alert\n            closable\n            style={{ marginBottom: 20 }}\n            type=\"error\"\n            title=\"Error\"\n            content=\"Here is an error text\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slider Component in React\nDESCRIPTION: This snippet demonstrates how to use the Slider component from Arco Design in a React application. It creates a controlled slider with an initial value of 30 and updates the value using useState hook. The slider's width is set to 200 pixels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState(30);\n  return <Slider value={value} onChange={setValue} style={{ width: 200 }} />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox Groups with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create checkbox groups using the Arco Design library in a React application. It shows three different checkbox group implementations: a simple horizontal group, a group with custom options and default values, and a vertical group.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Checkbox } from '@arco-design/web-react';\nconst CheckboxGroup = Checkbox.Group;\nconst options = [\n  {\n    label: 'Option 1',\n    value: '1',\n  },\n  {\n    label: 'Option 2',\n    value: '2',\n    disabled: true,\n  },\n  {\n    label: 'Option 3',\n    value: '3',\n  },\n  {\n    label: 'Option 4',\n    value: '4',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <CheckboxGroup\n        options={['Option A', 'Option B', 'Option C']}\n        style={{ display: 'block', marginBottom: 16 }}\n      />\n\n      <CheckboxGroup\n        options={options}\n        defaultValue={['1', '3']}\n        style={{ display: 'block', marginBottom: 20 }}\n      />\n\n      <CheckboxGroup direction=\"vertical\" options={['Option A', 'Option B', 'Option C']} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using modifyVars in Less with Webpack\nDESCRIPTION: This code snippet demonstrates how to configure the Webpack to use modifyVars with less-loader to customize Less variables in the Arco Design theme. The snippet includes how to change specific theme variables, such as 'arcoblue-6', by setting it in the less-options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/theme.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  rules: [{\n    test: /\\.less$/,\n    use: [{\n      loader: 'style-loader',\n    }, {\n      loader: 'css-loader',\n    }, {\n      loader: 'less-loader',\n+     options: {\n+       modifyVars: {  // 在less-loader@6 modifyVars 配置被移到 lessOptions 中\n+         'arcoblue-6': '#f85959',\n+       },\n+       javascriptEnabled: true\n+     },\n    }],\n    ...\n  }],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Component Icons with Arco Design in React\nDESCRIPTION: Demonstrates customizing the Upload component's icons and file name display using showUploadList property. Includes a radio group to switch between different list types (text, picture-list, picture-card) and shows implementation of custom icons for various states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Upload, Radio, Typography, Message } from '@arco-design/web-react';\nimport {\n  IconFileAudio,\n  IconClose,\n  IconFaceFrownFill,\n  IconUpload,\n  IconEye,\n} from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [listType, setListtype] = React.useState('text');\n  return (\n    <div>\n      <Typography.Text>Type:</Typography.Text> &emsp;\n      <Radio.Group\n        name=\"listType\"\n        value={listType}\n        onChange={setListtype}\n        style={{ marginLeft: 20, marginBottom: 20 }}\n        options={['text', 'picture-list', 'picture-card']}\n      ></Radio.Group>\n      <div>\n        <Upload\n          showUploadList={{\n            // Please dont remove this comment\n            reuploadIcon: <IconUpload />,\n            cancelIcon: <IconClose />,\n            fileIcon: <IconFileAudio />,\n            removeIcon: <IconClose />,\n            previewIcon: null,\n            errorIcon: <IconFaceFrownFill />,\n            fileName: (file) => {\n              return (\n                <a\n                  onClick={() => {\n                    Message.info('click ' + file.name);\n                  }}\n                >\n                  {file.name}\n                </a>\n              );\n            },\n          }}\n          progressProps={{\n            formatText: (percent) => `${percent}%`,\n          }}\n          multiple\n          defaultFileList={[\n            {\n              uid: '-2',\n              name: 'light.png',\n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n            },\n            {\n              uid: '-1',\n              name: 'ice.png',\n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp',\n            },\n          ]}\n          listType={listType}\n          action=\"/\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Component with Text Labels in React\nDESCRIPTION: Creates a rating component using Arco Design's Rate component with dynamic text descriptions. The component maintains a state for the current rating and displays corresponding text labels from a predefined array of descriptions. The rating can be changed through user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/with-description.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate, Typography } from '@arco-design/web-react';\nimport { useState } from 'react';\n\nfunction App() {\n  const [rate, setRate] = useState(5);\n  const desc = ['Terrible', 'Bad', 'Normal', 'Good', 'Excellent'];\n  return (\n    <div style={{ display: 'flex', alignItems: 'center' }}>\n      <Rate value={rate} onChange={(value) => setRate(value)} />\n      <Typography.Text\n        style={{\n          margin: '0 16px',\n        }}\n      >\n        {desc[rate - 1]}\n      </Typography.Text>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Picture List Upload with Arco Design\nDESCRIPTION: Demonstrates how to set up an Upload component with picture list display style. Uses defaultFileList to show pre-loaded images and enables multiple file upload functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/pictureList.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Radio } from '@arco-design/web-react';\nconst defaultFileList = [\n  {\n    uid: '-3',\n    name: 'light.png',\n    url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Upload\n        listType=\"picture-list\"\n        action=\"/\"\n        multiple\n        defaultFileList={defaultFileList}\n      ></Upload>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Button-Style Radio Group with Arco Design\nDESCRIPTION: Creates a radio group with button styling using the Radio component from Arco Design. The example shows how to set up a group of radio buttons that appear as regular buttons, including disabled state handling and default value setting.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/radio_button.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <RadioGroup\n        type=\"button\"\n        name=\"lang\"\n        defaultValue=\"Guangzhou\"\n        style={{ marginRight: 20, marginBottom: 20 }}\n      >\n        <Radio value=\"Beijing\">Beijing</Radio>\n        <Radio value=\"Shanghai\">Shanghai</Radio>\n        <Radio disabled value=\"Guangzhou\">\n          Guangzhou\n        </Radio>\n        <Radio value=\"Shenzhen\">Shenzhen</Radio>\n      </RadioGroup>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Affixed Anchor Navigation with Arco Design\nDESCRIPTION: Example showing how to create an affixed anchor navigation menu using Arco Design's Anchor component. The component is positioned absolutely on the right side of the page with custom styling through affixStyle prop. Features multiple anchor links with custom positioning and offset settings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/affix.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor\n      offsetBottom={40}\n      affixStyle={{\n        position: 'absolute',\n        right: -170,\n        top: '50%',\n        zIndex: 1,\n      }}\n    >\n      <AnchorLink href=\"#Basic\" title=\"Basic\" />\n      <AnchorLink href=\"#Static\" title=\"Static\" />\n      <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n      <AnchorLink href=\"#Affix\" title=\"Affix\" />\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars with Custom Trail Color in React\nDESCRIPTION: This code snippet demonstrates the usage of the Progress component from Arco Design to create progress bars with customized trail colors. It includes examples of linear and circular progress bars, as well as a stepped progress bar.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/trailColor.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Progress } from '@arco-design/web-react';\n\nfunction Demo() {\n  return (\n    <div>\n      <div style={{ width: '40%', marginBottom: 20 }}>\n        <Progress percent={30} trailColor=\"var(--color-primary-light-1)\" />\n      </div>\n      <div style={{ width: '40%', marginBottom: 20 }}>\n        <Progress steps={4} percent={30} trailColor=\"var(--color-primary-light-1)\" />\n      </div>\n      <Progress percent={30} type=\"circle\" trailColor=\"var(--color-primary-light-1)\" />\n    </div>\n  );\n}\n\nconst App = () => {\n  return <Demo />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: App Component for Rendering Tree Transfer\nDESCRIPTION: This code defines the App component that renders the TreeTransfer component and manages the target keys state. It uses the useState hook to manage the selected keys and the onChange function to update the state when keys are transferred.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/with-tree.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const [targetKeys, setTargetKeys] = useState(['2-1', '2-2', '2-3', '4']);\n\n  const onChange = (keys) => {\n    setTargetKeys(keys);\n  };\n\n  return (\n    <TreeTransfer\n      dataSource={treeData}\n      defaultSelectedKeys={['1-1-1']}\n      targetKeys={targetKeys}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Card with Meta Content in React using Arco Design\nDESCRIPTION: This snippet demonstrates how to use the Card and Card.Meta components from Arco Design to create a hoverable card with a cover image, title, and description. It shows the flexibility in content arrangement within a card component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/meta.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Card } from '@arco-design/web-react';\nconst { Meta } = Card;\n\nconst App = () => {\n  return (\n    <Card\n      hoverable\n      style={{ width: 360 }}\n      cover={\n        <div style={{ height: 204, overflow: 'hidden' }}>\n          <img\n            style={{ width: '100%', transform: 'translateY(-20px)' }}\n            alt=\"dessert\"\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp\"\n          />\n        </div>\n      }\n    >\n      <Meta\n        title=\"Card Title\"\n        description={\n          <>\n            Card content <br /> Card content\n          </>\n        }\n      />\n    </Card>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Spin Icon with Arco Design\nDESCRIPTION: This code snippet shows how to import the `IconSync` component from `@arco-design/web-react/icon` and use the `spin` property to make the icon rotate. The `style` prop is also used to set the `fontSize` of the icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/__demo__/spin.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { IconSync } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return <div style={{ color: 'var(--color-text-1)' }}>\n    <IconSync spin style={{ fontSize: 40 }} />\n  </div>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing VChart Arco Theme in React\nDESCRIPTION: This snippet shows how to initialize the VChart Arco theme within a React application. The `initVChartArcoTheme` method needs to be called once globally, and can be placed in the entry file of a React project to apply the theme.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './app.jsx';\nimport { initVChartArcoTheme } from '@visactor/vchart-arco-theme';\n\n// initialization\ninitVChartArcoTheme();\n\nconst dom = document.querySelector('#root');\nconst root = createRoot(dom);\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Placement in Steps Component React\nDESCRIPTION: This code snippet demonstrates how to use the Arco Design Steps component in a React application, configuring the label placement to be vertical instead of the default horizontal. It uses the labelPlacement property to position labels below icons and manages the UI state with basic inline styling. Required dependency: Arco Design for React. The component expects configuration properties like labelPlacement and current step. Outputs a styled vertical step list.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/label-placement.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Steps, Divider } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <div>\n      <Steps labelPlacement=\"vertical\" current={2} style={{ maxWidth: 780, margin: '0 auto' }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n      <Divider />\n      <div\n        style={{\n          lineHeight: '140px',\n          textAlign: 'center',\n          color: '#C9CDD4',\n        }}\n      >\n        Step 2 Content\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline with Custom Node Content in React\nDESCRIPTION: This code demonstrates how to create a Timeline component with customized node content including custom dot colors and adding an icon to a timeline item. The example uses the Timeline component from Arco Design library with four timeline items showing different milestones.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Switch, Timeline, Grid } from '@arco-design/web-react';\nimport { IconExclamationCircleFill } from '@arco-design/web-react/icon';\nconst TimelineItem = Timeline.Item;\n\nconst App = () => {\n  return (\n    <div>\n      <Timeline>\n        <TimelineItem label=\"2017-03-10\" dotColor=\"#00B42A\">\n          The first milestone\n        </TimelineItem>\n        <TimelineItem label=\"2018-05-22\">The second milestone</TimelineItem>\n        <TimelineItem label=\"2020-06-22\" dotColor=\"#F53F3F\">\n          The third milestone\n          <IconExclamationCircleFill\n            style={{\n              color: 'F53F3F',\n              fontSize: 12,\n              marginLeft: 4,\n            }}\n          />\n        </TimelineItem>\n        <TimelineItem label=\"2020-09-30\" dotColor=\"#C9CDD4\">\n          The fourth milestone\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Popconfirm Dialog in React\nDESCRIPTION: Shows how to create a basic confirmation dialog using Arco Design's Popconfirm component. The example demonstrates a delete confirmation with success and error message feedback using the Message component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popconfirm, Message, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Popconfirm\n        focusLock\n        title=\"Confirm\"\n        content=\"Are you sure you want to delete?\"\n        onOk={() => {\n          Message.info({\n            content: 'ok',\n          });\n        }}\n        onCancel={() => {\n          Message.error({\n            content: 'cancel',\n          });\n        }}\n\n      >\n        <Button>Delete</Button>\n      </Popconfirm>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapse Component Icon Position with React\nDESCRIPTION: A React component demonstrating the usage of Arco Design's Collapse component with customizable expand icon positioning. Uses Radio buttons to toggle the icon position between left, right, and hidden states. Includes multiple collapsible sections with headers and extra icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/iconPosition.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Collapse, Radio, Grid, Typography } from '@arco-design/web-react';\nimport { IconInfoCircle, IconSettings } from '@arco-design/web-react/icon';\n\nconst CollapseItem = Collapse.Item;\n\nfunction App() {\n  const [position, setPosition] = React.useState('left');\n  return (\n    <div>\n      <Grid.Row\n        align=\"center\"\n        style={{ marginBottom: 24 }}\n      >\n        <Typography.Text>Position:</Typography.Text>\n        <Radio.Group\n          style={{ marginLeft: 20 }}\n          value={position}\n          onChange={setPosition}\n          options={[\n            {\n              label: 'hide',\n              value: ''\n            },\n            {\n              label: 'left',\n              value: 'left'\n            },\n            {\n              label: 'right',\n              value: 'right'\n            }\n          ]}\n        />\n      </Grid.Row>\n\n      <Collapse\n        {...(position\n          ? {\n              expandIconPosition: position\n            }\n          : {\n              expandIcon: null\n            })}\n        style={{ maxWidth: 1180 }}\n      >\n        <CollapseItem\n          header=\"Beijing Toutiao Technology Co., Ltd.\"\n          name=\"1\"\n          extra={<IconInfoCircle />}\n        >\n          Beijing Toutiao Technology Co., Ltd.\n        </CollapseItem>\n\n        <CollapseItem header=\"Introduce\" name=\"2\" extra={<IconSettings />}>\n          ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n          the world. Toutiao started out as a news recommendation engine and gradually evolved into\n          a platform delivering content in various formats, such as texts, images,\n          question-and-answer posts, microblogs, and videos.\n        </CollapseItem>\n\n        <CollapseItem header=\"The Underlying AI Technology\" name=\"3\">\n          In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n          artificial intelligence bot that writes news articles. The bot published 450 articles\n          during the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot\n          published stories approximately two seconds after the event ended.\n        </CollapseItem>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Using Arco Design in JavaScript\nDESCRIPTION: This snippet defines a function `updateNotification` that displays a warning notification which then updates to a success notification after a 2-second delay. The notification is identified by the `id` 'need_update', allowing it to be updated. The `App` component includes a button that triggers this function when clicked, showcasing the interactive behavior of the notification.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/update_notification.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Notification, Button } from '@arco-design/web-react';\n\nfunction updateNotification() {\n  Notification.warning({\n    id: 'need_update',\n    title: 'Ready to update',\n    content: 'Will update after 2 seconds...',\n  });\n  setTimeout(() => {\n    Notification.success({\n      id: 'need_update',\n      title: 'Success',\n      content: 'Update success!',\n    });\n  }, 2000);\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateNotification} type=\"primary\">\n      Update Notification\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Closable Tags with Visibility Control using React\nDESCRIPTION: This snippet defines a React functional component that uses the `useState` hook to manage the visibility of closable tags. The `onClose` function toggles the visibility state when the tags are closed or when the switch is toggled. Required dependencies include React and Arco Design components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/close.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tag, Button, Switch, Typography } from '@arco-design/web-react';\nimport { IconStar } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [visible, setVisible] = useState(true);\n\n  function onClose() {\n    setVisible(!visible);\n  }\n\n  return (\n    <div>\n      <Tag\n        closable\n        visible={visible}\n        onClose={onClose}\n        style={{ margin: '0 24px', }}\n      >\n        Tag\n      </Tag>\n      <Tag icon={<IconStar />} closable visible={visible} onClose={onClose}>\n        Tag\n      </Tag>\n      <div\n        style={{ marginTop: 24, }}\n      >\n        <Switch\n          style={{ margin: '0 8px', }}\n          size=\"small\"\n          checked={visible}\n          onChange={onClose}\n        />\n        <Typography.Text>Toggle</Typography.Text>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Closable Message in Arco Design React\nDESCRIPTION: Example of displaying a message notification with a close button using Arco Design's Message component. The message has a 10-second duration and is triggered by clicking a primary button.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/closable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Button\n      onClick={() => {\n        Message.info({\n          content: 'This is a message!',\n          closable: true,\n          duration: 10000,\n        });\n      }}\n      type=\"primary\"\n    >\n      Open Message\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component with Various Status Types in React\nDESCRIPTION: This example demonstrates how to use the Link component from Arco Design with different status types (error, success, warning) in both enabled and disabled states. The links are arranged in a grid layout with two columns.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Link/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(2, 100px)',\n        gridColumnGap: 24,\n      }}\n    >\n      <Link href=\"#\" status=\"error\">\n        Error Link\n      </Link>\n      <Link href=\"#\" status=\"error\" disabled>\n        Error Link\n      </Link>\n      <Link href=\"#\" status=\"success\">\n        Success Link\n      </Link>\n      <Link href=\"#\" status=\"success\" disabled>\n        Success Link\n      </Link>\n      <Link href=\"#\" status=\"warning\">\n        Warning Link\n      </Link>\n      <Link href=\"#\" status=\"warning\" disabled>\n        Warning Link\n      </Link>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Buttons of Different Sizes using Arco Design in React\nDESCRIPTION: This snippet demonstrates how to create buttons of various sizes using the Arco Design library in a React application. It utilizes the Button and Space components to display four buttons with different size props: mini, small, default (medium), and large.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button size=\"mini\" type=\"primary\">\n        Mini\n      </Button>\n      <Button size=\"small\" type=\"primary\">\n        Small\n      </Button>\n      <Button size=\"default\" type=\"primary\">\n        Default\n      </Button>\n      <Button size=\"large\" type=\"primary\">\n        Large\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Icons with Arco Design Link Component in React\nDESCRIPTION: This example demonstrates how to use the Link component from Arco Design with icons. It shows both default icons (when icon prop is set to true) and custom icons (using IconEdit component). The example also includes disabled state variations for both icon types.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Link/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Link, Space } from '@arco-design/web-react';\nimport { IconEdit } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={0} direction=\"vertical\">\n      <Space size=\"large\">\n        <Link href=\"#\" icon>\n          Hyperlinks\n        </Link>\n        <Link href=\"#\" icon disabled>\n          Hyperlinks\n        </Link>\n      </Space>\n      <Space size=\"large\">\n        <Link href=\"#\" icon={<IconEdit />}>\n          Hyperlinks\n        </Link>\n        <Link href=\"#\" icon={<IconEdit />} disabled>\n          Hyperlinks\n        </Link>\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with Meta Items using Arco Design in JavaScript\nDESCRIPTION: This snippet demonstrates how to use List.Item.Meta component from Arco Design to display structured list items with avatars, titles, and descriptions. It creates a sample list with four identical items, each containing a square avatar, title, and descriptive text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/meta.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { List, Avatar } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <List\n      style={{ width: 600 }}\n      dataSource={new Array(4).fill({\n        title: 'Beijing Bytedance Technology Co., Ltd.',\n        description: 'Beijing ByteDance Technology Co., Ltd. is an enterprise located in China.',\n      })}\n      render={(item, index) => (\n        <List.Item key={index}>\n          <List.Item.Meta\n            avatar={<Avatar shape=\"square\">A</Avatar>}\n            title={item.title}\n            description={item.description}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Component with Button in React\nDESCRIPTION: This snippet demonstrates how to create a React component that uses the Result and Button components from Arco Design. It displays a success message and a 'Back' button as extra content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/info.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        title=\"Your operation has been performed.\"\n        extra={<Button type=\"primary\">Back</Button>}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Custom Components Wrapped by Popover\nDESCRIPTION: This code shows how to pass properties to a custom component when it's wrapped by a `Popover` component. The key is to spread the incoming `props` onto the outermost DOM element of the custom component. This ensures that all necessary attributes, including those required by `Popover` (or similar components like `Tooltip` and `Popconfirm`), are correctly applied.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nfunction Demo(props) {\n     // Receive the properties passed in by Popover\n     return <div {...props}>\n\n     </div>\n   }\n\n   <Popover>\n     <Demo />\n   </Popover>\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual List in React with Arco Design\nDESCRIPTION: This JavaScript snippet demonstrates the implementation of a virtual list using the Arco Design React library. It constructs a nested tree data structure and utilizes the TreeSelect component to render it. Necessary dependencies include React, Tree, Button, TreeSelect, and Select from '@arco-design/web-react'. The core functionality revolves around the loop function that generates the tree structure based on specified path and level parameters. The expected output is a select dropdown rendered with optimized performance for large datasets.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/virtual.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Tree, Button, TreeSelect, Select } from '@arco-design/web-react';\n\nfunction loop(path = '0', level = 2) {\n  const list = [];\n\n  for (let i = 0; i < 10; i += 1) {\n    const key = `${path}-${i}`;\n    const treeNode = {\n      title: key,\n      key,\n    };\n\n    if (level > 0) {\n      treeNode.children = loop(key, level - 1);\n    }\n\n    list.push(treeNode);\n  }\n\n  return list;\n}\n\nconst treeData = loop();\n\nfunction App() {\n  const treeRef = React.useRef();\n  return (\n    <div>\n      <TreeSelect\n        treeData={treeData}\n        treeProps={{\n          height: 200,\n          renderTitle: (props) => {\n            return (\n              <span style={{ whiteSpace: 'nowrap', }} >\n                {props.title}\n              </span>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Radio Buttons with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create basic radio buttons using the Arco Design React library. It shows both a standard radio button and a disabled, checked radio button within a Space component for layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Radio, Message, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Radio>Radio</Radio>\n      <Radio checked disabled>\n        Disabled Radio\n      </Radio>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading State in React Search Box\nDESCRIPTION: This snippet demonstrates how to implement a loading indicator in multiple search input components using the Arco Design library in React. It leverages the `Input.Search` component and shows how to set the `loading` property to indicate that a search operation is in progress. The `App` component uses the `Space` component to wrap multiple search inputs, each configured with varying placeholders and default values. Dependencies required include `Input` and `Space` from the `@arco-design/web-react` package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/search_loading.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\nconst InputSearch = Input.Search;\n\nconst App = () => {\n  return (\n    <Space wrap>\n      <InputSearch loading placeholder=\"Enter keyword to search\" style={{ width: 350 }} />\n      <InputSearch\n        searchButton\n        loading\n        defaultValue=\"Search content\"\n        placeholder=\"Enter keyword to search\"\n        style={{ width: 350 }}\n      />\n      <InputSearch\n        searchButton=\"Search\"\n        loading\n        defaultValue=\"Search content\"\n        placeholder=\"Enter keyword to search\"\n        style={{ width: 350 }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Button Shapes with Arco Design in React\nDESCRIPTION: This example demonstrates how to create buttons with different shapes using Arco Design's Button component. It shows square (default), circle, and round shapes with the primary type, including an icon button example.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__demo__/shape.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Space } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button type=\"primary\" icon={<IconPlus />} />\n      <Button shape=\"circle\" type=\"primary\" icon={<IconPlus />} />\n      <Button shape=\"round\" type=\"primary\">\n        Primary\n      </Button>\n      <Button type=\"primary\">Primary</Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Characters in Arco Design Rate Component\nDESCRIPTION: Demonstrates various ways to customize the Rate component's display characters using a TextWrapper component. Shows examples with letters, numbers, Chinese characters, and heart icons, including support for half-ratings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/character.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\nimport { IconHeartFill } from '@arco-design/web-react/icon';\n\nfunction TextWrapper(props) {\n  return (\n    <div\n      style={{\n        width: 24,\n        lineHeight: '24px',\n        textAlign: 'center',\n        fontSize: 16,\n        fontWeight: 'bold',\n      }}\n    >\n      {props.text}\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <div>\n      <Rate\n        style={{ display: 'block', margin: '10px 0' }}\n        defaultValue={3}\n        character={<TextWrapper text=\"A\" />}\n      />\n      <Rate\n        style={{ display: 'block', margin: '10px 0' }}\n        defaultValue={3}\n        character={(index) => <TextWrapper text={index + 1} />}\n      />\n      <Rate\n        style={{ display: 'block', margin: '10px 0' }}\n        defaultValue={2.5}\n        allowHalf\n        character={<TextWrapper text=\"好\" />}\n      />\n      <Rate\n        style={{ display: 'block', margin: '10px 0' }}\n        defaultValue={2.5}\n        allowHalf\n        character={\n          <TextWrapper\n            text={\n              <IconHeartFill\n                style={{\n                  fontSize: 18,\n                }}\n              />\n            }\n          />\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dropdown with SubMenu in Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a Dropdown component with submenus using Arco Design in a React application. It imports necessary components from '@arco-design/web-react' and creates a nested menu structure representing cities and their districts. The Dropdown is triggered by a button click.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/sub-menu.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dropdown, Menu, Button } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst SubMenu = Menu.SubMenu;\nconst MenuItem = Menu.Item;\nconst data = [\n  ['Beijing', ['Haidian', 'Chaoyang', 'Daxing']],\n  ['Shanghai', ['Pudong', 'Huangpu', 'Xuhui']],\n  ['Guangzhou', ['Baiyun', 'Tianhe', 'Fanyu']],\n  ['Shenzhen', ['Futian', 'Luohu', 'Nanshan']],\n];\nconst dropList = (\n  <Menu>\n    {data.map((city, outerIndex) => {\n      if (city.length > 1) {\n        const districts = city[1];\n        return (\n          <SubMenu key={outerIndex} title={<span>{city[0]}</span>}>\n            {districts.map((district, innerIndex) => {\n              return (\n                <MenuItem key={`${outerIndex}_${innerIndex}`}>{districts[innerIndex]}</MenuItem>\n              );\n            })}\n          </SubMenu>\n        );\n      }\n\n      return <MenuItem key={outerIndex}>{city[0]}</MenuItem>;\n    })}\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <div className=\"dropdown-demo\">\n      <Dropdown trigger=\"click\" droplist={dropList} position=\"bl\">\n        <Button type=\"text\">\n          Click\n          <IconDown />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Featured Result Component in React\nDESCRIPTION: Example of implementing a Result component with error state, custom icon, typography content, and action button. Demonstrates handling network error scenarios with styled content and suggested actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/all.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button, Typography } from '@arco-design/web-react';\nimport { IconFaceFrownFill } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"error\"\n        icon={<IconFaceFrownFill />}\n        title=\"No internet\"\n        subTitle=\"DNS_PROBE_FINISHED_NO_INTERNET\"\n        extra={<Button type=\"primary\">Refresh</Button>}\n      >\n        <Typography\n          className=\"result-content\"\n          style={{ background: 'var(--color-fill-2)', padding: 24 }}\n        >\n          <Typography.Paragraph>Try:</Typography.Paragraph>\n          <ul>\n            <li> Checking the network cables, modem, and router </li>\n            <li> Reconnecting to Wi-Fi </li>\n          </ul>\n        </Typography>\n      </Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Node Loading in Arco Design Tree Component\nDESCRIPTION: This code demonstrates how to dynamically load tree nodes on demand using the Tree component from Arco Design. It initializes a tree with default data and implements a loadMore function that simulates an asynchronous API call with a 1-second delay. When a node is expanded, the function adds child nodes to the tree data and updates the state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/loadmore.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Tree } from '@arco-design/web-react';\n\nconst TreeNode = Tree.Node;\nconst defaultTreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = React.useState(defaultTreeData);\n\n  const loadMore = (treeNode) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        treeNode.props.dataRef.children = [\n          {\n            title: `leaf`,\n            key: `${treeNode.props._key}-1`,\n            isLeaf: true,\n          },\n        ];\n        setTreeData([...treeData]);\n        resolve();\n      }, 1000);\n    });\n  };\n\n  return <Tree defaultSelectedKeys={['node1']} loadMore={loadMore} treeData={treeData}></Tree>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in Tree Component with React\nDESCRIPTION: This example demonstrates how to implement multiple selection in the Tree component from Arco Design. It showcases a tree structure with configurable nodes (some with disabled checkboxes), a toggle for multiple selection mode, and displays the currently selected keys.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/multiple.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Checkbox, Typography } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        disableCheckbox: true,\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        checkable: false,\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf',\n            key: '0-1-1-2',\n          },\n        ],\n      },\n      {\n        title: 'Leaf',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [checked, setChecked] = useState(true);\n  return (\n    <div>\n      <Checkbox\n        style={{ marginBottom: 24 }}\n        checked={checked}\n        onChange={(value) => {\n          setChecked(value);\n          setSelectedKeys([]);\n        }}\n      >\n        multiple\n      </Checkbox>\n\n      <br />\n      <Typography.Text>Current: {selectedKeys.join(' , ')}</Typography.Text>\n      <br />\n      <Tree\n        multiple={checked}\n        selectedKeys={selectedKeys}\n        onSelect={(value, extra) => {\n          console.log(value, extra);\n          setSelectedKeys(value);\n        }}\n        treeData={TreeData}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hoverable Cards with Arco Design\nDESCRIPTION: Creates two card components with hover effects - one using the default hoverable prop and another with custom hover animations. Uses Space component for layout and Link component for the 'More' action in card headers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/hoverable.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Link, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space>\n      <Card\n        style={{ width: 360 }}\n        title=\"Arco Card\"\n        hoverable\n        extra={<Link>More</Link>}\n      >\n        Card content\n        <br />\n        Card content\n      </Card>\n      <Card\n        style={{ width: 360 }}\n        className=\"card-custom-hover-style\"\n        title=\"Custom hover style\"\n        hoverable\n        extra={<Link>More</Link>}\n      >\n        Card content <br /> Card content\n      </Card>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions in Arco Design Alert Components\nDESCRIPTION: Demonstrates three different implementations of Alert components with custom action buttons. Shows how to add single and multiple action buttons, use different button types, and arrange buttons vertically using Space component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/action.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Alert\n        content=\"Here is an example text\"\n        action={\n          <Button size=\"mini\" type=\"primary\">\n            Detail\n          </Button>\n        }\n        closable\n      />\n      <Alert\n        title=\"Example\"\n        content=\"Here is an example text\"\n        action={\n          <Button size=\"mini\" type=\"primary\">\n            Detail\n          </Button>\n        }\n        closable\n        style={{ marginTop: 10 }}\n      />\n      <Alert\n        title=\"Example\"\n        content=\"Here is an example text\"\n        action={\n          <Space direction=\"vertical\">\n            <Button size=\"mini\" type=\"primary\">\n              Detail\n            </Button>\n            <Button size=\"mini\" type=\"primary\" status=\"danger\">\n              Close\n            </Button>\n          </Space>\n        }\n        style={{ marginTop: 10 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive List Grid in React with Arco Design\nDESCRIPTION: This code demonstrates how to create a responsive grid layout using Arco Design's List component. It configures different column spans for various screen sizes using the grid property with breakpoints (sm, md, lg, xl). The example creates a nested list structure with multiple categories of items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/responsive-grid.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { List, Card } from '@arco-design/web-react';\nconst data = [\n  {\n    title: 'Platform',\n    data: ['iOS', 'Android', 'Web'],\n  },\n  {\n    title: 'Framework',\n    data: ['Angular', 'Vue', 'React'],\n  },\n  {\n    title: 'Language',\n    data: ['C++', 'JavaScript', 'Python'],\n  },\n  {\n    title: 'Component',\n    data: ['Button', 'Breadcrumb', 'Transfer'],\n  },\n  {\n    title: 'Design',\n    data: ['Figma', 'Sketch', 'Adobe XD'],\n  },\n  {\n    title: 'Plugin',\n    data: ['Edu Tools', 'BashSupport', 'GitToolBox'],\n  },\n  {\n    title: 'Platform',\n    data: ['iOS', 'Android', 'Web'],\n  },\n  {\n    title: 'Framework',\n    data: ['Angular', 'Vue', 'React'],\n  },\n  {\n    title: 'Language',\n    data: ['C++', 'JavaScript', 'Python'],\n  },\n];\n\nconst App = () => {\n  return (\n    <List\n      grid={{\n        sm: 24,\n        md: 12,\n        lg: 8,\n        xl: 6,\n      }}\n      dataSource={data}\n      bordered={false}\n      render={(item, index) => (\n        <List.Item key={index}>\n          <List\n            header={item.title}\n            dataSource={item.data}\n            render={(item, index) => <List.Item key={index}>{item}</List.Item>}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styled Collapse Panels with Arco Design\nDESCRIPTION: Creates a custom styled Collapse component with multiple panels using Arco Design. Demonstrates usage of custom styling through style props, bordered prop, and defaultActiveKey for initial expanded state. Includes implementation of dividers and formatted content within panels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/customStyle.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse, Divider } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\nconst customStyle = {\n  borderRadius: 2,\n  marginBottom: 24,\n  border: 'none',\n  overflow: 'hidden',\n};\n\nconst App = () => {\n  return (\n    <Collapse\n      bordered={false}\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem style={customStyle} header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem style={customStyle} header=\"Introduce\" name=\"2\">\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem style={customStyle} header=\"The Underlying AI Technology\" name=\"3\">\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Change on Select Feature\nDESCRIPTION: Implementation of Cascader component with changeOnSelect enabled, demonstrating both single and multiple selection modes. Uses a hierarchical data structure representing locations in China with multiple levels of nesting. Includes features like search functionality and clear option.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/change_on_select.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        showSearch\n        changeOnSelect\n        allowClear\n      />\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        mode=\"multiple\"\n        changeOnSelect\n        allowClear\n        showSearch\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Visibility with State in React\nDESCRIPTION: This example demonstrates how to control the visibility of a Tooltip component using React state. It uses a Switch component to toggle the tooltip's visibility and the `popupVisible` prop to control its display state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tooltip/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Tooltip, Button, Switch, Typography } from '@arco-design/web-react';\n\nconst { Text } = Typography;\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div>\n      <Text style={{ marginRight: 10, }} >\n        {visible ? 'Hide' : 'Show'} Tooltip\n      </Text>\n      <Switch\n        onChange={() => {\n          setVisible(!visible);\n        }}\n      ></Switch>\n      <br />\n      <br />\n      <Tooltip position=\"bottom\" content=\"Mouse over to display tooltip\" popupVisible={visible}>\n        <Button>Be Controled</Button>\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Pagination Component with Arco Design React\nDESCRIPTION: Shows how to implement a simplified pagination component using Arco Design's Pagination component. The example sets the 'simple' prop to true and uses a small size variant for compact display with a total of 50 items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/simple.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Pagination simple total={50} size=\"small\" />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Small Step Bar with Arco Design in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `Steps` component from the Arco Design library to create a sequenced step bar. The `size` attribute is set to 'small', to ensure a compact display. Prerequisites include having the '@arco-design/web-react' package installed. Inputs involve setting the current step index with `current`, while the output is a JSX structure representing the steps with optional titles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/mini.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps, Divider } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <div>\n      <Steps current={2} style={{ maxWidth: 780, margin: '0 auto' }} size=\"small\">\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      <Divider />\n      <div\n        style={{\n          lineHeight: '140px',\n          textAlign: 'center',\n          color: '#C9CDD4',\n        }}\n      >\n        Step 2 Content\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Image Watermark Using Arco Design React Component\nDESCRIPTION: Demonstrates how to implement an image watermark using the Watermark component from Arco Design's React library. The example shows applying a watermark to a container div with a specified height of 300 pixels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/__demo__/image.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Watermark } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Watermark\n  image=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/unpzlK_vjyH/ljhwZthlaukjlkulzlp/site/arco.png\"\n  >\n   <div style={{height: 300}}></div>\n  </Watermark>\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Paragraphs with ArcoDesign React\nDESCRIPTION: This code demonstrates the implementation of different paragraph styles using ArcoDesign's Typography component. It showcases default and secondary text styles, along with different heading levels and spacing options. The example includes multiple paragraph blocks with different configurations to illustrate various typography options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/paragraph.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Typography, Divider } from '@arco-design/web-react';\nconst { Title, Paragraph } = Typography;\n\nconst App = () => {\n  return (\n    <Typography>\n      <Title heading={5}>Default</Title>\n      <Paragraph>\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a prototype, product or process. The verb to design expresses the process of\n        developing a design. In some cases, the direct construction of an object without an explicit\n        prior plan (such as in craftwork, some engineering, coding, and graphic design) may also be\n        considered to be a design activity.\n      </Paragraph>\n      <Title heading={5}>Secondary</Title>\n      <Paragraph type=\"secondary\">\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a prototype, product or process. The verb to design expresses the process of\n        developing a design. In some cases, the direct construction of an object without an explicit\n        prior plan (such as in craftwork, some engineering, coding, and graphic design) may also be\n        considered to be a design activity.\n      </Paragraph>\n      <Title heading={5}>Spacing default</Title>\n      <Paragraph>\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a prototype, product or process. The verb to design expresses the process of\n        developing a design. In some cases, the direct construction of an object without an explicit\n        prior plan (such as in craftwork, some engineering, coding, and graphic design) may also be\n        considered to be a design activity.\n      </Paragraph>\n      <Title heading={5}>Spacing close</Title>\n      <Paragraph type=\"secondary\" spacing=\"close\">\n        A design is a plan or specification for the construction of an object or system or for the\n        implementation of an activity or process, or the result of that plan or specification in the\n        form of a prototype, product or process. The verb to design expresses the process of\n        developing a design.\n      </Paragraph>\n    </Typography>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Collapse Panels with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create nested collapsible panels using the Collapse component from Arco Design. It showcases the usage of Collapse and CollapseItem components, setting default active keys, and nesting Collapse components within each other to create a hierarchical structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/inline.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        <Collapse defaultActiveKey={'1.1'}>\n          <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1.1\">\n            Beijing Toutiao Technology Co., Ltd.\n          </CollapseItem>\n          <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1.2\">\n            Beijing Toutiao Technology Co., Ltd.\n          </CollapseItem>\n        </Collapse>\n      </CollapseItem>\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"2\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"3\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Duration in Arco Design - JavaScript\nDESCRIPTION: This code snippet updates the duration of an existing notification identified by its ID using the Arco Design Notification component. The function initially displays a warning notification, followed by a success notification after a delay of 2 seconds. It requires Arco Design packages and utilizes a Button component to trigger the update action. Key parameters include 'id' for notification identification, 'title' for notification title, and 'duration' for the display duration in milliseconds. The input is initiated by a Button click, and the output is visual updates in the notification.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/update_duration.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Notification, Button } from '@arco-design/web-react';\n\nfunction updateNotification() {\n  Notification.warning({\n    id: 'need_update_duration',\n    title: 'Ready to update',\n    content: 'Will update after 2 seconds...',\n    duration: 3000,\n  });\n  setTimeout(() => {\n    Notification.success({\n      id: 'need_update_duration',\n      title: 'Success',\n      content: 'Will close after 3 seconds!',\n      duration: 3000,\n    });\n  }, 2000);\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateNotification} type=\"primary\">\n      Update Notification\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Configuration for Arco Design Components in React\nDESCRIPTION: This code snippet demonstrates how to use ConfigProvider to apply different color themes to Arco Design components. It uses useState hook to manage the theme state and includes a radio group for theme selection. The selected theme is applied to a button and an input field.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/theme.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { ConfigProvider, Button, Input, Radio } from '@arco-design/web-react';\nconst themes = {\n  blue: {\n    primaryColor: '#3370ff',\n  },\n  red: {\n    primaryColor: '#ee4d38',\n  },\n  green: {\n    primaryColor: '#0fbf60',\n  },\n  orange: {\n    primaryColor: '#f58505',\n  },\n};\n\nfunction App() {\n  const [theme, setTheme] = useState(null);\n  return (\n    <ConfigProvider theme={theme && themes[theme]}>\n      <Radio.Group\n        name=\"theme\"\n        options={['blue', 'red', 'green', 'orange']}\n        onChange={(theme) => {\n          setTheme(theme);\n        }}\n        style={{ display: 'block', marginBottom: 40 }}\n      />\n      <Button\n        style={{ marginRight: 40 }}\n        type=\"primary\"\n      >\n        Button\n      </Button>\n      <Input\n        style={{ width: 200 }}\n        placeholder=\"Please Enter ...\"\n      />\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Arco Design RangePicker Component\nDESCRIPTION: This snippet demonstrates how to import and use the TimePicker.RangePicker component from '@arco-design/web-react'. It includes setting the width style and implementing the `onSelect` and `onChange` event handlers to log the selected time range values and strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/rangepicker.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <TimePicker.RangePicker\n      style={{ width: 252, }}\n      onSelect={(valueString, value) => console.log('onSelect:', valueString, value)}\n      onChange={(valueString, value) => console.log('onChange:', valueString, value)}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Popup Width for Select Component in React\nDESCRIPTION: This code snippet demonstrates the usage of the Select component from Arco Design with custom popup width settings. It shows two examples: one where the popup width is not aligned with the input, and another where the minimum popup width is set to match the input width.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/custom-popup-width.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Select\n        placeholder=\"Select city\"\n        style={{ width: 154 }}\n        triggerProps={{\n          autoAlignPopupWidth: false,\n          position: 'bl',\n        }}\n      >\n        <Option value=\"1\">Beijing</Option>\n        <Option disabled value=\"2\">\n          Shanghai\n        </Option>\n        <Option value=\"3\">Guangzhou</Option>\n        <Option value=\"4\">Shenzhen</Option>\n      </Select>\n      <Select\n        placeholder=\"Select city\"\n        style={{ width: 154 }}\n        triggerProps={{\n          autoAlignPopupWidth: false,\n          autoAlignPopupMinWidth: true,\n          position: 'bl',\n        }}\n      >\n        <Option value=\"1\">Beijing Beijing Beijing Beijing Beijing</Option>\n        <Option disabled value=\"2\">\n          Shanghai\n        </Option>\n        <Option value=\"3\">Guangzhou</Option>\n        <Option value=\"4\">Shenzhen</Option>\n      </Select>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabs with Size Selection in React\nDESCRIPTION: This code snippet implements a React component that allows users to select the size and type of tabs dynamically. It utilizes hooks from React for state management and Arco Design components for UI. The expected inputs are the selected size and type from radio buttons, which control the rendering of the tabs. The outputs are the rendered tabs with corresponding styles and functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Radio, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nfunction App() {\n  const [type, setType] = useState('line');\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <span style={{ marginRight: 20 }}>Size:</span>\n      <Radio.Group name=\"size\" value={size} onChange={setSize} style={{ marginBottom: 24 }}>\n        <Radio value=\"mini\">mini</Radio>\n        <Radio value=\"small\">small</Radio>\n        <Radio value=\"default\">default</Radio>\n        <Radio value=\"large\">large</Radio>\n      </Radio.Group>\n      <br />\n      <span style={{ marginRight: 20 }}>Type:</span>\n      <Radio.Group name=\"type\" value={type} onChange={setType} style={{ marginBottom: 40 }}>\n        <Radio value=\"line\">line</Radio>\n        <Radio value=\"card\">card</Radio>\n        <Radio value=\"card-gutter\">card-gutter</Radio>\n        <Radio value=\"text\">text</Radio>\n        <Radio value=\"rounded\">rounded</Radio>\n        <Radio value=\"capsule\">capsule</Radio>\n      </Radio.Group>\n\n      <Tabs type={type} size={size}>\n        <TabPane key=\"1\" title=\"Tab 1\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"2\" title=\"Tab 2\" disabled>\n          <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"3\" title=\"Tab 3\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"4\" title=\"Tab 4\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 4</Typography.Paragraph>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Clear Button in React\nDESCRIPTION: This code snippet demonstrates how to create a Select component with a clear button using Arco Design. It imports the Select component, defines options, and renders a dropdown with the ability to clear the selection. The component also includes a disabled option.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/clear.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Disabled'];\n\nconst App = () => {\n  return (\n    <Select placeholder=\"Select\" style={{ width: 154 }} allowClear>\n      {options.map((option, index) => (\n        <Option key={option} disabled={index === 3} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Steps with Descriptions using React\nDESCRIPTION: This snippet demonstrates how to use the Steps component from the '@arco-design/web-react' library to create a series of steps with descriptive information. It defines a functional component 'App' that uses the Step component to display three steps with titles and descriptions. Required dependencies include '@arco-design/web-react'. The component expects 'current' to indicate the active step and renders steps with fixed titles and descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/description.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <Steps current={2} style={{ maxWidth: 780, marginBottom: 40 }}>\n      <Step title=\"Succeeded\" description=\"This is a description\" />\n      <Step title=\"Processing\" description=\"This is a description\" />\n      <Step title=\"Pending\" description=\"This is a description\" />\n    </Steps>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Formatting Input with Arco Design in React\nDESCRIPTION: The React component imports 'useState' from React and 'InputNumber' from '@arco-design/web-react' to create input fields with formatted displays. It defines how numbers are shown using the 'formatter' property to include commas as thousands separators, while 'parser' removes them for internal representation. A custom handler for delaying the formatted view is implemented using the 'userTyping' parameter.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/format.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { InputNumber } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState(12000);\n  const [delayValue, setDelayValue] = useState(12000);\n  return (\n    <div>\n      <InputNumber\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n        min={0}\n        max={1000000000}\n        step={1000}\n        value={value}\n        onChange={setValue}\n        prefix=\"¥\"\n        // 正则表达式：(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        parser={(value) => value.replace(/,/g, '')}\n      />\n      <InputNumber\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n        min={0}\n        max={1000000000}\n        step={1000}\n        value={delayValue}\n        onChange={setDelayValue}\n        prefix=\"¥\"\n        formatter={(value, { userTyping, input }) => userTyping ? input : `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        parser={(value) => value.replace(/,/g, '')}\n      />\n      </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ColorPicker in React\nDESCRIPTION: Shows how to create a disabled ColorPicker component using Arco Design's web-react package. Demonstrates two variations: a basic disabled ColorPicker and one with text display enabled.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ColorPicker, Radio } from '@arco-design/web-react';\n\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <ColorPicker defaultValue={'#165DFF'} disabled />\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker defaultValue={'#165DFF'} showText disabled />\n    </div>\n  ) ;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Configuration with Size and Layout Properties\nDESCRIPTION: Configures form with dynamic size, layout properties, and event handlers for form interactions and value changes\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/size.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst formItemLayout = {\n  labelCol: {\n    span: 7,\n  },\n  wrapperCol: {\n    span: 17,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Component with Connecting Lines in React\nDESCRIPTION: This code demonstrates how to enable connecting lines in a Tree component using the showLine property from Arco Design. The example includes a hierarchical tree structure with multiple levels and a Switch component that toggles the visibility of the connecting lines.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/line.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Switch, Typography } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 1',\n    key: '0-0',\n    children: [\n      {\n        title: 'Trunk 1-0',\n        key: '0-0-0',\n        children: [\n          {\n            title: 'leaf',\n            key: '0-0-0-0',\n          },\n          {\n            title: 'leaf',\n            key: '0-0-0-1',\n            children: [\n              {\n                title: 'leaf',\n                key: '0-0-0-1-0',\n              },\n            ],\n          },\n          {\n            title: 'leaf',\n            key: '0-0-0-2',\n          },\n        ],\n      },\n      {\n        title: 'Trunk 1-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Trunk 1-2',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'leaf',\n            key: '0-0-2-0',\n          },\n          {\n            title: 'leaf',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 2',\n    key: '0-1',\n  },\n  {\n    title: 'Trunk 3',\n    key: '0-2',\n    children: [\n      {\n        title: 'Trunk 3-0',\n        key: '0-2-0',\n        children: [\n          {\n            title: 'leaf',\n            key: '0-2-0-0',\n          },\n          {\n            title: 'leaf',\n            key: '0-2-0-1',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  const [checked, setChecked] = useState(true);\n  return (\n    <div>\n      <div>\n        <Typography.Text>showLine</Typography.Text>\n        <Switch style={{ marginLeft: 12 }} checked={checked} onChange={setChecked}></Switch>\n      </div>\n      <Tree defaultSelectedKeys={['0-0-1']} treeData={treeData} showLine={checked}></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Reply Component with Arco Design\nDESCRIPTION: Creates a nested comment structure with reply functionality using Arco Design components. Includes an avatar, author information, content area, and reply actions with a text input area for responses.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/editor.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Comment, Avatar, Button, Input } from '@arco-design/web-react';\nimport { IconMessage } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Comment\n      align=\"right\"\n      actions={\n        <span className=\"custom-comment-action\">\n          <IconMessage /> Reply\n        </span>\n      }\n      author=\"Balzac\"\n      avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/9eeb1800d9b78349b24682c3518ac4a3.png~tplv-uwbnlip3yd-webp.webp\"\n      content={\n        <div>\n          A design is a plan or specification for the construction of an object or system or for the\n          implementation of an activity or process, or the result of that plan or specification in\n          the form of a prototype, product or process.\n        </div>\n      }\n      datetime=\"1 hour\"\n    >\n      <Comment\n        align=\"right\"\n        actions={[\n          <Button key=\"0\" type=\"secondary\">\n            Cancel\n          </Button>,\n          <Button key=\"1\" type=\"primary\">\n            Reply\n          </Button>,\n        ]}\n        avatar=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp\"\n        content={\n          <div>\n            <Input.TextArea placeholder=\"Here is you content.\" />\n          </div>\n        }\n      ></Comment>\n    </Comment>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Event Trigger with Button\nDESCRIPTION: Demonstrates a Trigger component with a Button that responds to click and hover events, with customized close behavior\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/triggers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trigger, Button, Input, Skeleton, Typography, Space } from '@arco-design/web-react';\n\nfunction Popup() {\n  return (\n    <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n      <Skeleton />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Space size={40}>\n      <Trigger\n        popup={() => <Popup />}\n        trigger={['click', 'hover']}\n        clickToClose={false}\n        classNames=\"zoomInTop\"\n      >\n        <Button>Click/Hover Me</Button>\n      </Trigger>\n      <Trigger\n        popup={() => (\n          <Typography.Paragraph className=\"demo-trigger-popup\">\n            This popup will be hidden when Input triggers the blur or click. If you don't want to\n            hide it when blur, you can set blurToHide=false. If you don't want to hide when you\n            click, you can set clickToClose=false.\n          </Typography.Paragraph>\n        )}\n        trigger={['hover', 'click', 'focus']}\n      >\n        <Input style={{ width: 200 }} placeholder=\"Click/Hover/Focus Me\" />\n      </Trigger>\n      <Trigger popup={() => <Popup />} trigger={['hover', 'focus']} blurToHide={false}>\n        <Input style={{ width: 200 }} placeholder=\"Hover/Focus Me\" />\n      </Trigger>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Step Size in a Slider Component - React\nDESCRIPTION: This snippet defines a React component that allows users to set a step size for a slider. The default step size is 1, and users can adjust this value via an InputNumber. When 'showTicks' is toggled to true, the Slider displays ticks for each step. The component utilizes state hooks to manage step size and visibility of ticks.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/step.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, InputNumber, Switch, Typography, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [step, setStep] = useState(1);\n  const [showTicks, setShowTicks] = useState(true);\n  return (\n    <div style={{ maxWidth: '40%', minWidth: '20%' }}>\n      <Space style={{ marginBottom: 20, lineHeight: '32px' }} size={20}>\n        <div>\n          <Typography.Text style={{ margin: '0 4px' }}>step</Typography.Text>\n          <InputNumber\n            value={step}\n            min={1}\n            max={10}\n            onChange={setStep}\n            style={{ width: 68 }}\n          />\n        </div>\n        <div>\n          <Typography.Text style={{ margin: '0 4px'}}>showTicks</Typography.Text>\n          <Switch checked={showTicks} onChange={setShowTicks} />\n        </div>\n      </Space>\n      <div>\n        <Typography.Text>0</Typography.Text>\n        <Slider\n          defaultValue={5}\n          max={10}\n          step={step}\n          showTicks={showTicks}\n          style={{\n            width: 258,\n            marginLeft:8,\n            marginRight: 8,\n            verticalAlign: 'middle',\n          }}\n        />\n        <Typography.Text>10</Typography.Text>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using PermissionWrapper for Button Permission Control in React TSX\nDESCRIPTION: This example shows how to use the PermissionWrapper component to control the visibility of a button based on user permissions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport PermissionWrapper from '@/components/permissionWrapper';\n\nreturn (\n  <PermissionWrapper\n    requiredPermissions={[{ resource: /^menu.list.*/, actions: ['write'] }]}\n  >\n    <Button loading={loading}>删除</Button>\n  </PermissionWrapper>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Render in Arco Design TreeSelect with renderFormat\nDESCRIPTION: This code snippet demonstrates how to customize the rendering of a TreeSelect component in Arco Design using the `renderFormat` prop. The `renderFormat` function receives `nodeProps` and the current `value` and returns a custom React element to render the selected node, in this case adding a star icon.  It requires `TreeSelect` and `IconStar` from `@arco-design/web-react`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/renderFormat.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect } from '@arco-design/web-react';\nimport { IconStar  } from '@arco-design/web-react/icon';\n\nconst treeData = [\n  {\n    key: 'node1',\n    title: 'Trunk',\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  const [value, setValue] = React.useState('node2');\n\n  return (\n    <TreeSelect\n      renderFormat={(nodeProps, value) => {\n        return <span><IconStar /> {nodeProps.title || value}</span>\n      }}\n      treeData={treeData}\n      value={value}\n      onChange={(v) => {\n        setValue(v)\n      }}\n      style={{ width: 300 }}\n    />\n  )\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic VerificationCode Component in React\nDESCRIPTION: Demonstrates the basic setup of a VerificationCode component with onChange and onFinish event handlers. The component is styled with a fixed width of 300 pixels and includes message feedback on completion.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VerificationCode, Message } from '@arco-design/web-react';\n\nconst App = () => {\n  return <VerificationCode\n    style={{width: 300}}\n    onChange={v => {\n      console.log(v)\n    }}\n    onFinish={v => {\n      Message.info('onFinish: ' + v)\n    }}\n  />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Pagination with React and Arco Design\nDESCRIPTION: Implementation of a configurable table component with pagination controls using Arco Design. The example demonstrates how to use ConfigProvider to set global table pagination parameters, particularly the hideOnSinglePage option, which can be toggled using a switch component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/tablePagination.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { ConfigProvider, Table, Switch, Space, Typography } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n];\n\nfunction App() {\n  const [hideOnSinglePage, setHideOnSinglePage] = useState(true);\n  return (\n    <ConfigProvider\n      tablePagination={{\n        hideOnSinglePage,\n      }}\n    >\n      <Space style={{ marginBottom: 10 }}>\n        <Typography.Text>tablePagination.hideOnSinglePage</Typography.Text>\n        <Switch checked={hideOnSinglePage} onChange={(checked) => setHideOnSinglePage(checked)} />\n      </Space>\n      <Table columns={columns} data={data} />\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layout with Checkbox Group in React\nDESCRIPTION: Implementation of a checkbox group using Arco Design's Grid system for layout. The example uses useState hook to manage checkbox selections and demonstrates how to create a responsive grid layout with different checkbox options. Some options are disabled and the layout includes styling for margin spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/group_jsx.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Checkbox, Grid } from '@arco-design/web-react';\nconst { Col, Row } = Grid;\n\nfunction App() {\n  const [value, setValue] = useState(['Option 1', 'Option 2']);\n  return (\n    <Checkbox.Group value={value} onChange={setValue}>\n      <Row>\n        <Col\n          span={8}\n          style={{ marginBottom: 12 }}\n        >\n          <Checkbox value=\"Option 1\">Option 1</Checkbox>\n        </Col>\n        <Col\n          span={8}\n          style={{ marginBottom: 12 }}\n        >\n          <Checkbox disabled value=\"Option 2\">\n            Option 2\n          </Checkbox>\n        </Col>\n        <Col\n          span={8}\n          style={{ marginBottom: 12 }}\n        >\n          <Checkbox value=\"Option 3\">Option 3</Checkbox>\n        </Col>\n        <Col span={8}>\n          <Checkbox value=\"Option 4\">Option 4</Checkbox>\n        </Col>\n        <Col span={8}>\n          <Checkbox value=\"Option 5\">Option 5</Checkbox>\n        </Col>\n      </Row>\n    </Checkbox.Group>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Descriptions Component with Arco Design in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a responsive Descriptions component using Arco Design. It defines a data array with various fields and configures the component to adjust its column layout based on different screen sizes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/responsive.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Date of Birth',\n    value: '2020-05-15',\n    span: 2,\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return (\n    <Descriptions\n      title=\"Responsive\"\n      data={data}\n      border\n      column={{\n        xs: 1,\n        sm: 2,\n        md: 2,\n        lg: 2,\n        xl: 3,\n        xxl: 4,\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Components Without Icons in React\nDESCRIPTION: Example of creating a grid layout with multiple Alert components where icons are disabled using showIcon=false. Demonstrates different alert types including info, warning, success, and error variants with custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/without-icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert, Grid } from '@arco-design/web-react';\nconst { Row, Col } = Grid;\n\nconst App = () => {\n  return (\n    <Row gutter={40}>\n      <Col span={12}>\n        <Alert\n          style={{ marginBottom: 20 }}\n          showIcon={false}\n          type=\"info\"\n          content=\"Here is an info text\"\n        />\n        <Alert\n          style={{ marginBottom: 20 }}\n          showIcon={false}\n          type=\"warning\"\n          title=\"Warning\"\n          content=\"Here is a warning text\"\n        />\n      </Col>\n      <Col span={12}>\n        <Alert\n          style={{ marginBottom: 20 }}\n          showIcon={false}\n          type=\"success\"\n          content=\"Here is a success text\"\n        />\n        <Alert\n          style={{ marginBottom: 20, color: 'red' }}\n          showIcon={false}\n          type=\"error\"\n          title=\"Error\"\n          content=\"Here is an error text\"\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Adjustable Cascader in React\nDESCRIPTION: This React component demonstrates the use of different sizes for the Cascader component from Arco Design. It includes a radio button group for size selection and displays both single and multiple selection Cascaders. The component uses a predefined options array for location selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Radio } from '@arco-design/web-react';\n\nconst RadioGroup = Radio.Group;\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    value: 'default',\n  };\n\n  render() {\n    return (\n      <div>\n        <RadioGroup\n          type=\"button\"\n          name=\"size\"\n          value={this.state.value}\n          onChange={(value) => {\n            this.setState({\n              value,\n            });\n          }}\n          style={{ marginBottom: 20 }}\n        >\n          <Radio value=\"mini\">mini</Radio>\n          <Radio value=\"small\">small</Radio>\n          <Radio value=\"default\">default</Radio>\n          <Radio value=\"large\">large</Radio>\n        </RadioGroup>\n        <div>\n          <Cascader\n            placeholder=\"Please select ...\"\n            style={{ width: 300, marginBottom: 20 }}\n            options={options}\n            size={this.state.value}\n            allowClear\n          />\n          <br />\n          <Cascader\n            placeholder=\"Please select ...\"\n            style={{ width: 300 }}\n            options={options}\n            mode=\"multiple\"\n            size={this.state.value}\n            allowClear\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Control with Arco Design in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a React application that uses the Slider component from '@arco-design/web-react'. It showcases the control of tooltip visibility for both a single slider and a range slider. The snippet includes event handlers to log the slider's value changes and demonstrates how to apply styles to the Slider and Space components. Ensure that '@arco-design/web-react' is installed to use the components in your React application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/tooltip.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider, Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Space size={60}>\n      <Slider\n        defaultValue={20}\n        tooltipVisible={true}\n        style={{ marginBottom: 80 }}\n        onAfterChange={(value) => {\n          console.log(value);\n        }}\n        style={{ width: 200, marginRight: 100 }}\n      />\n      <Slider\n        range\n        defaultValue={[0, 50]}\n        tooltipVisible={true}\n        onAfterChange={(value) => {\n          console.log(value);\n        }}\n        style={{ width: 200 }}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Modal Position Customization with React and Arco Design\nDESCRIPTION: This code demonstrates how to customize the position of a Modal component from the Arco Design library in a React application.  It includes two examples: one that positions the modal 20px from the top of the viewport and another that vertically centers the modal. The `alignCenter` prop and inline styles are used to achieve the desired positioning.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [visible1, setVisible1] = React.useState(false);\n  return (\n    <div>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Display a modal dialog at 20px to top\n      </Button>\n      <br />\n      <br />\n      <Button onClick={() => setVisible1(true)} type=\"primary\">\n        Vertically centered modal dialog\n      </Button>\n      <Modal\n        alignCenter={false}\n        style={{ top: 20 }}\n        title=\"Modal Title\"\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        autoFocus={false}\n        focusLock={true}\n      >\n        <p>Display a modal dialog at 20px to top</p>\n      </Modal>\n      <Modal\n        title=\"Modal Title\"\n        alignCenter\n        visible={visible1}\n        onOk={() => setVisible1(false)}\n        onCancel={() => setVisible1(false)}\n        autoFocus={false}\n        focusLock={true}\n      >\n        <p>Vertically centered modal dialog</p>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: InputTag Validation with Error Handling\nDESCRIPTION: Validates input length and displays an error message using Message component when input is too short\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/validate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate={(v) => {\n  if (!v || v.length < 3) {\n    Message.error('长度必须大于3');\n    return false;\n  }\n\n  return true;\n}}\n```\n\n----------------------------------------\n\nTITLE: Initializing InputNumber Component in React\nDESCRIPTION: Demonstrates the basic usage of InputNumber with configurable properties such as placeholder, min/max range, and styling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InputNumber } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <InputNumber\n        placeholder=\"Please enter\"\n        min={0}\n        max={15}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n      <InputNumber disabled defaultValue={500} style={{ width: 160, margin: '10px 24px 10px 0' }} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Word Count Limit in Arco Design Input\nDESCRIPTION: This JavaScript snippet uses Arco Design's Input and TextArea components to implement word count limits. Each input field can display the current word count if 'showWordLimit' is enabled. The 'maxLength' property is used to set the limit, and when configured with 'errorOnly', inputs beyond the limit do not immediately restrict entry but show an error status. Ensure '@arco-design/web-react' is installed and imported in your project.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/max-length.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Space direction=\"vertical\">\n      <Space align=\"start\" size={24}>\n        <Input\n          maxLength={10}\n          showWordLimit\n          placeholder=\"Enter no more than 10 letters\"\n          style={{ width: 300 }}\n        />\n        <Input.TextArea\n          maxLength={50}\n          showWordLimit\n          placeholder=\"Enter no more than 50 letters\"\n          wrapperStyle={{ width: 300 }}\n        />\n      </Space>\n\n      <Space align=\"start\" size={24}>\n        <Input\n          maxLength={{ length: 10, errorOnly: true }}\n          showWordLimit\n          defaultValue=\"More than 10 letters will be error\"\n          style={{ width: 300 }}\n        />\n        <Input.TextArea\n          maxLength={{ length: 50, errorOnly: true }}\n          showWordLimit\n          placeholder=\"More than 50 letters will be error\"\n          wrapperStyle={{ width: 300 }}\n        />\n      </Space>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Hoverable Icon in Card with CSS\nDESCRIPTION: This CSS snippet provides styles for the hoverable arrow icon in the second card. It creates a circular hover effect around the icon when the user interacts with it.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/only-content.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.card-with-icon-hover .icon-hover {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  transition: all 0.1s;\n}\n\n.card-with-icon-hover .icon-hover:hover {\n  background-color: rgb(var(--gray-2));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Components with Title in React\nDESCRIPTION: This code snippet shows how to create Alert components with titles using the Arco Design library. It demonstrates four different alert types (info, warning, success, error) arranged in a responsive grid layout. The title property displays as the main heading while content serves as secondary text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/with-title.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert, Grid } from '@arco-design/web-react';\nconst { Row, Col } = Grid;\n\nconst App = () => {\n  return (\n    <div>\n      <Row gutter={40}>\n        <Col span={12}>\n          <Alert\n            style={{ marginBottom: 20 }}\n            type=\"info\"\n            title=\"Info\"\n            content=\"Here is an info text\"\n          />\n          <Alert type=\"warning\" title=\"Warning\" content=\"Here is a warning text\" />\n        </Col>\n        <Col span={12}>\n          <Alert\n            style={{ marginBottom: 20 }}\n            type=\"success\"\n            title=\"Success\"\n            content=\"Here is a success text\"\n          />\n          <Alert type=\"error\" title=\"Error\" content=\"Here is an error text\" />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Sliders in React with Arco Design\nDESCRIPTION: This code snippet demonstrates how to create vertical sliders using the Arco Design library in React. It includes a single-value slider with dynamic icons and a range slider with custom marks. The component uses React hooks for state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/direction.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, Space } from '@arco-design/web-react';\nimport { IconSound, IconMute } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [value, setValue] = useState(10);\n  return (\n    <Space style={{ maxWidth: '60%', minWidth: '20%' }} size={100}>\n      <div\n        style={{\n          width: 22,\n          textAlign: 'center',\n          display: 'inline-block',\n        }}\n      >\n        <Slider value={value} onChange={setValue} vertical />\n        {value ? <IconSound style={{ fontSize: 16, color: 'var(--color-text-1)' }} /> : null}\n        {!value ? <IconMute style={{ fontSize: 16, color: 'var(--color-text-1)' }} /> : null}\n      </div>\n      <Slider\n        range\n        max={20}\n        vertical\n        defaultValue={[5, 10]}\n        marks={{\n          5: '5km',\n          10: '10km',\n        }}\n        style={{ verticalAlign: 'top' }}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom-Sized Breadcrumbs with Arco Design in JavaScript\nDESCRIPTION: Creates two breadcrumb navigation components using Arco Design's Breadcrumb component - one with default sizing and another with custom font size. Uses Space component for layout management and demonstrates how to apply custom styling to breadcrumbs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Breadcrumb, Space } from '@arco-design/web-react';\nconst BreadcrumbItem = Breadcrumb.Item;\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Breadcrumb>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n      <Breadcrumb style={{ fontSize: 12 }}>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Search in Arco Design Select Component with React\nDESCRIPTION: This code snippet demonstrates the usage of the Select component from Arco Design with search functionality. It includes examples of basic search, custom filtering with filterOption, and retaining input value on focus. The component renders three Select elements with different configurations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/show-search.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst cities = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Wuhan'];\nconst foods = [\n  {\n    label: '南非龙虾',\n    value: 'nanfeilongxia',\n  },\n  {\n    label: '新西兰羊排',\n    value: 'xinxilanyangpai',\n  },\n  {\n    label: '海鲜烩意面',\n    value: 'haixianhuiyimian',\n  },\n  {\n    label: '酱烧豆腐',\n    value: 'jiangshaodoufu',\n  },\n  {\n    label: '西红柿炒蛋',\n    value: 'xihongshichaodan',\n  },\n  {\n    label: '提拉米苏',\n    value: 'tilamisu',\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Select placeholder=\"Select city\" style={{ width: 154 }} allowClear showSearch>\n        {cities.map((option, index) => (\n          <Option key={option} disabled={index === 3} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n      <Select\n        style={{ width: 154 }}\n        showSearch\n        allowClear\n        placeholder=\"Filter option\"\n        filterOption={(inputValue, option) =>\n          option.props.value.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0 ||\n          option.props.children.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0\n        }\n      >\n        {foods.map((option) => (\n          <Option key={option.value} value={option.value}>\n            {option.label}\n          </Option>\n        ))}\n      </Select>\n      <Select\n        placeholder=\"Retain input value\"\n        style={{ width: 154 }}\n        allowClear\n        showSearch={{\n          retainInputValue: true,\n        }}\n      >\n        {cities.map((option, index) => (\n          <Option key={option} disabled={index === 3} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Code with useVerificationCode Hook\nDESCRIPTION: Creates a custom verification code input component using React and arco-design's useVerificationCode hook. The component includes input field handling, state management, and callback functions for value changes and completion.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Space } from \"@arco-design/web-react\";\nimport { useVerificationCode } from \"@arco-design/web-react/hooks\";\n\n\nconst App = () => {\n\n  const inputRefList = React.useRef([]);\n\n  const { filledValue, getInputProps } = useVerificationCode({\n    getInputRefList: () => inputRefList.current || [],\n    onFinish: (value) => {\n      console.log(value);\n    },\n    onChange: (value) => {\n      console.log(value);\n    }\n  });\n\n  return (\n    <div>\n       <Space size=\"large\">\n        {filledValue.map((v, index) => {\n          const inputProps = { ...getInputProps(index) };\n          return (\n            <input\n              className=\"custom-code-input\"\n              ref={(node) => {\n                inputRefList.current[index] = node;\n              }}\n              {...inputProps}\n              onChange={(e) => {\n                inputProps.onChange?.(e.target.value);\n              }}\n            />\n          );\n        })}\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid List with Nested Lists in Arco Design\nDESCRIPTION: This code demonstrates creating a grid layout with nested lists using Arco Design components. It uses the grid.span property to define the number of columns per row and implements nested lists where each parent list item contains a child list with a header and items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/grid.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { List, Card } from '@arco-design/web-react';\nconst data = [\n  {\n    title: 'Platform',\n    data: ['iOS', 'Android', 'Web'],\n  },\n  {\n    title: 'Framework',\n    data: ['Angular', 'Vue', 'React'],\n  },\n  {\n    title: 'Language',\n    data: ['C++', 'JavaScript', 'Python'],\n  },\n  {\n    title: 'Component',\n    data: ['Button', 'Breadcrumb', 'Transfer'],\n  },\n];\n\nconst App = () => {\n  return (\n    <List\n      grid={{ gutter: 0, span: 6 }}\n      dataSource={data}\n      bordered={false}\n      render={(item, index) => (\n        <List.Item key={index}>\n          <List\n            size=\"small\"\n            header={item.title}\n            dataSource={item.data}\n            render={(item, index) => <List.Item key={index}>{item}</List.Item>}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Checked Strategy for Arco Design Tree (React)\nDESCRIPTION: This React component demonstrates how to use the `checkedStrategy` prop of the Arco Design Tree component to control how checked keys are returned. It uses a radio group to dynamically change the `checkedStrategy` between `SHOW_ALL`, `SHOW_PARENT`, and `SHOW_CHILD`. The selected keys are displayed using `Typography.Text`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/checkedStrategy.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree, Radio, Typography } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf',\n            key: '0-1-1-2',\n          },\n        ],\n      },\n      {\n        title: 'Leaf',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [checkedKeys, setCheckedKeys] = useState(['0-0', '0-1']);\n  const [checkedStrategy, setCheckedStrategy] = useState(Tree.SHOW_ALL);\n  return (\n    <div>\n      <Radio.Group\n        type=\"button\"\n        value={checkedStrategy}\n        onChange={(value) => {\n          setCheckedStrategy(value);\n          setCheckedKeys([]);\n        }}\n        options=[\n          {\n            value: Tree.SHOW_ALL,\n            label: 'show all',\n          },\n          {\n            value: Tree.SHOW_PARENT,\n            label: 'show parent',\n          },\n          {\n            value: Tree.SHOW_CHILD,\n            label: 'show child',\n          },\n        ]\n      />\n      <div style={{ margin: '20px 0' }}>\n        <Typography.Text>Current: {checkedKeys.join(' , ')}</Typography.Text>\n      </div>\n      <Tree\n        checkedStrategy={checkedStrategy}\n        checkable\n        checkedKeys={checkedKeys}\n        onCheck={(value, extra) => {\n          setCheckedKeys(value);\n        }}\n        treeData={TreeData}\n      ></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Progress Bar with Arco Design in React\nDESCRIPTION: Demonstrates how to create a progress bar with steps using the Progress component from Arco Design. Shows different variations including 3-step and 5-step progress bars with different statuses (warning, success) and sizes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/steps.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Progress } from '@arco-design/web-react';\n\nfunction Demo() {\n  return (\n    <div\n      style={{\n        display: 'inline-block',\n        width: '40%',\n        marginRight: '10%',\n      }}\n    >\n      <Progress steps={3} percent={30} style={{ marginBottom: 20 }} />\n      <Progress steps={5} percent={100} status=\"warning\" style={{ marginBottom: 20 }} />\n      <Progress steps={5} size=\"small\" percent={50} status=\"success\" />\n    </div>\n  );\n}\n\nconst App = () => {\n  return <Demo />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Extra Content in TimePicker - React\nDESCRIPTION: This snippet defines a functional React component that renders a TimePicker with a custom footer. It utilizes the 'extra' prop to display additional content below the main component. The component is styled with a defined width. It requires '@arco-design/web-react' library for the TimePicker functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/extra.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <TimePicker\n      extra=\"Extra Footer\"\n      style={{ width: 194, }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Popup Container CSS Styling\nDESCRIPTION: Defines basic styling for popup container with padding, width, and background properties using CSS variables\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/auto.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ResizeBox Triggers in React\nDESCRIPTION: React component implementation showing how to customize resize triggers using the resizeTriggers prop. Creates a resizable container with custom trigger handles on the right and bottom edges. Includes a TriggerContent component for custom trigger rendering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/custom-triggers.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ResizeBox, Divider, Typography } from '@arco-design/web-react';\nconst { Paragraph } = Typography;\n\nconst TriggerContent = function ({ className }) {\n  return (\n    <div className={`resizebox-demo-custom-trigger ${className}`}>\n      <div className=\"resizebox-demo-custom-trigger-line\" />\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div>\n      <ResizeBox\n        directions={['right', 'bottom']}\n        style={{\n          width: 500,\n          minWidth: 100,\n          maxWidth: '100%',\n          height: 200,\n          textAlign: 'center',\n        }}\n        resizeTriggers={{\n          right: <TriggerContent className=\"resizebox-demo-custom-trigger-vertical\" />,\n          bottom: <TriggerContent className=\"resizebox-demo-custom-trigger-horizontal\" />,\n        }}\n      >\n        <Paragraph>We are building the future of content discovery and creation.</Paragraph>\n        <Divider />\n        <Paragraph>\n          ByteDance's content platforms enable people to enjoy content powered by AI technology. We\n          inform, entertain, and inspire people across language, culture and geography.\n        </Paragraph>\n        <Divider>ByteDance</Divider>\n        <Paragraph>Yiming Zhang is the founder and CEO of ByteDance.</Paragraph>\n      </ResizeBox>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Arco Design Switch Component in React\nDESCRIPTION: Imports and renders a basic Switch component from the Arco Design web React library. Provides a simple boolean toggle switch with default configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Switch />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drawer Positioning with React and Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a customizable drawer component in a React application using radio buttons to set its position. It imports necessary components from the Arco Design library and utilizes React hooks for state management. The snippet allows users to select the drawer's placement (top, bottom, left, right) and toggle its visibility.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Drawer, Trigger, Skeleton, Button, Radio } from '@arco-design/web-react';\nimport { IconExclamationCircleFill } from '@arco-design/web-react/icon';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [visible, setVisible] = useState();\n  const [placement, setPlacement] = useState('right');\n  return (\n    <div>\n      <RadioGroup name=\"placement\" defaultValue={placement} onChange={setPlacement}>\n        <Radio value=\"top\">Top</Radio>\n        <Radio value=\"bottom\">Bottom</Radio>\n        <Radio value=\"left\">Left</Radio>\n        <Radio value=\"right\">Right</Radio>\n      </RadioGroup>\n      <br />\n      <Button\n        onClick={() => {\n          setVisible(true);\n        }}\n        type=\"primary\"\n        style={{ marginTop: 20 }}\n      >\n        Open Drawer\n      </Button>\n      <Drawer\n        width={332}\n        height={332}\n        title={<span>Basic Information </span>}\n        visible={visible}\n        placement={placement}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <div>Here is an example text. </div>\n        <div>Here is an example text.</div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Auto-adjusting Font Size in Avatar Component with React\nDESCRIPTION: This example shows how to create an Avatar component that automatically adjusts its font size based on the text content. It uses a button to cycle through different text values of varying lengths, demonstrating how the component adapts to fit each string.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/__demo__/autoFixFontSize.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Avatar, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [index, setIndex] = useState(0);\n  const list = ['B', 'Arco', 'Design', 'Tom', 'AD'];\n  return (\n    <Space>\n      <Avatar>\n        {list[index]}\n      </Avatar>\n      <Button\n        type=\"secondary\"\n        onClick={() => setIndex(index >= 4 ? 0 : index + 1)}\n      >\n        Change\n      </Button>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Icons from Iconfont using addFromIconFontCn\nDESCRIPTION: This snippet demonstrates how to set up an icon loading from iconfont.cn using the `Icon.addFromIconFontCn` function. The `src` parameter requires the URL provided by iconfont.cn and configures additional properties using `extraProps` as needed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst IconFont = Icon.addFromIconFontCn({ src:'url' });\n```\n\n----------------------------------------\n\nTITLE: Defining Form Structure and Options Using React and Arco Design\nDESCRIPTION: This snippet imports necessary dependencies, sets up form item layouts, and defines the options for a cascader component. These options represent different geographical locations and form layouts used within the application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef, useEffect, useState } from 'react';\nimport {\n  Form,\n  AutoComplete,\n  Input,\n  Select,\n  Button,\n  Tooltip,\n  Checkbox,\n  Switch,\n  Radio,\n  Cascader,\n  Message,\n  InputNumber,\n  Rate,\n  Slider,\n  Upload,\n  Grid,\n  DatePicker,\n  Modal,\n} from '@arco-design/web-react';\nconst FormItem = Form.Item;\nconst cascaderOptions = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'beijingshi',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\nconst formItemLayout = {\n  labelCol: {\n    span: 7,\n  },\n  wrapperCol: {\n    span: 17,\n  },\n};\nconst noLabelLayout = {\n  wrapperCol: {\n    span: 17,\n    offset: 7,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentsProps TypeScript Interface\nDESCRIPTION: Defines the complex TypeScript interface for customizing table components and operations with detailed configuration options for headers and body sections.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentsProps = {\n  table?: any;\n  header?: {\n    operations?: (nodes: {\n      selectionNode?: ReactNode;\n      expandNode?: ReactNode;\n    }) => {\n      name?: string;\n      node?: ReactNode;\n      width?: number;\n    }[];\n    wrapper?: any;\n    thead?: any;\n    row?: any;\n    th?: any;\n    cell?: any;\n  };\n  body?: {\n    operations?: (nodes: {\n      selectionNode?: ReactNode;\n      expandNode?: ReactNode;\n    }) => {\n      name?: string;\n      node?: ReactNode | ((record) => ReactNode);\n      width?: number;\n    }[];\n    wrapper?: any;\n    tbody?: any;\n    row?: any;\n    td?: any;\n    cell?: any;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline with Customizable Pending Node in React\nDESCRIPTION: This example demonstrates a Timeline component with a pending (ghost) node representing tasks in progress. The implementation includes interactive controls allowing users to toggle horizontal/vertical direction, reverse order, pending status, and customize the pending dot with an icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/pending.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Timeline, Grid, Checkbox } from '@arco-design/web-react';\nimport { IconFire } from '@arco-design/web-react/icon';\n\nconst TimelineItem = Timeline.Item;\nconst { Row } = Grid;\n\nfunction App() {\n  const [pendingProps, setPendingProps] = React.useState({});\n  return (\n    <div>\n      <Row\n        align=\"center\"\n        style={{ marginBottom: 24, }} >\n        <Checkbox\n          checked={pendingProps.direction==='horizontal'}\n          onChange={(v) => {\n            setPendingProps({\n              ...pendingProps,\n              direction: v ? 'horizontal' : 'vertical',\n            });\n          }}\n        >\n          horizontal &nbsp; &nbsp;\n        </Checkbox>\n\n        <Checkbox\n          checked={!!pendingProps.reverse}\n          onChange={(v) => {\n            setPendingProps({ ...pendingProps, reverse: v });\n          }}\n        >\n          reverse &nbsp; &nbsp;\n        </Checkbox>\n\n        <Checkbox\n          checked={!!pendingProps.pending}\n          onChange={(v) => {\n            setPendingProps({\n              ...pendingProps,\n              pending: v ? 'This is a pending dot' : false,\n            });\n          }}\n        >\n          pending &nbsp; &nbsp;\n        </Checkbox>\n\n        <Checkbox\n          checked={!!pendingProps.pendingDot}\n          onChange={(v) => {\n            const newProps = { ...pendingProps };\n            delete newProps.pendingDot;\n\n            if (v) {\n              newProps.pendingDot = (\n                <IconFire\n                  style={{\n                    color: '#e70a0a',\n                  }}\n                />\n              );\n            }\n\n            setPendingProps(newProps);\n          }}\n        >\n          custom pendingDot\n        </Checkbox>\n      </Row>\n      <Timeline pending {...pendingProps}>\n        <TimelineItem label=\"2017-03-10\" dotColor=\"#52C419\">\n          The first milestone\n        </TimelineItem>\n        <TimelineItem label=\"2018-05-12\" dotColor=\"#F5222D\">\n          The second milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-09-30\">The third milestone</TimelineItem>\n      </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Managing Plugins Dialog in React\nDESCRIPTION: The main component that manages the visibility of a modal dialog, handles loading state, and displays fetched plugin data in a table format. The modal includes a loading spinner and a button to load data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/load_data.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  const [loading, setLoading] = React.useState(false); // table\n\n  const [data, setData] = React.useState([]);\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    {\n      title: 'Version',\n      dataIndex: 'version',\n      sorter: (a, b) => {\n        const aVersion = a.version.split('.');\n        const bVersion = b.version.split('.');\n\n        for (let i = 0; i < aVersion.length; i++) {\n          if (aVersion[i] === bVersion[i]) continue;\n          return aVersion[i] - bVersion[i];\n        }\n\n        return 1;\n      },\n    },\n    {\n      title: 'Author',\n      dataIndex: 'author',\n      sorter: (a, b) => a.author.length - b.author.length,\n    },\n  ];\n\n  function loadData() {\n    setLoading(true);\n    getDataFromServer().then((res) => {\n      setData(res);\n      setLoading(false);\n    });\n  }\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setVisible(true);\n          loadData();\n        }}\n        type=\"primary\"\n      >\n        Open Modal\n      </Button>\n      <Modal\n        title=\"Manage Plugins\"\n        visible={visible}\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n        afterClose={() => setData([])}\n      >\n        <Spin tip=\"loading Data...\" loading={loading}>\n          <div style={{ height: 266, visibility: !loading ? 'visible' : 'hidden' }}>\n            <p>\n              You can select multiple plugins for the current project so that our app will verify\n              that the plugins are installed and enabled.\n            </p>\n            <p\n              style={{\n                marginTop: 20,\n                marginBottom: 8,\n                fontWeight: 600,\n              }}\n            >\n              List of plugins\n            </p>\n            <Table\n              columns={columns}\n              data={data}\n              pagination={false}\n              border={{\n                headerCell: true,\n                wrapper: true,\n              }}\n              rowKey=\"id\"\n              rowSelection={{\n                type: 'checkbox',\n                checkAll: true,\n              }}\n            ></Table>\n          </div>\n        </Spin>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pagination Navigation in React with Arco Design\nDESCRIPTION: Demonstrates how to use the itemRender prop to customize pagination navigation buttons. The function receives page number, button type, and original element as parameters and returns custom JSX for 'prev' and 'next' buttons while preserving default rendering for other elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/itemRender.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nfunction itemRender(page, type, originElement) {\n  if (type === 'prev') {\n    return <a style={{ fontSize: 14, margin: '0 8px' }}>Prev</a>;\n  }\n\n  if (type === 'next') {\n    return <a style={{ fontSize: 14, margin: '0 8px' }}>Next</a>;\n  }\n\n  return originElement;\n}\n\nconst App = () => {\n  return <Pagination itemRender={itemRender} total={200} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix to React Select Component\nDESCRIPTION: New prefix prop allows setting a prefix element for the Select, Cascader and TreeSelect components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Select prefix={<Icon type=\"search\" />}>\n  {/* Options */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Switch with Icons in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a Switch component with custom icons using the Arco Design library in React. It imports the Switch and Space components from '@arco-design/web-react' and IconCheck and IconClose from '@arco-design/web-react/icon'. It then defines a functional component App that renders a Space component containing three Switch components, each with different types and custom checkedIcon and uncheckedIcon properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch, Space } from '@arco-design/web-react';\nimport { IconCheck, IconClose } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Switch checkedIcon={<IconCheck />} uncheckedIcon={<IconClose />} defaultChecked />\n      <Switch\n        type=\"round\"\n        checkedIcon={<IconCheck />}\n        uncheckedIcon={<IconClose />}\n        defaultChecked\n      />\n      <Switch\n        type=\"line\"\n        checkedIcon={<IconCheck />}\n        uncheckedIcon={<IconClose />}\n        defaultChecked\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing Arco Design React Library using NPM and Yarn\nDESCRIPTION: These commands demonstrate how to install the Arco Design React component library using either npm or yarn. These commands will add the `@arco-design/web-react` package as a dependency to your project, allowing you to use its components in your React application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// npm\nnpm i @arco-design/web-react\n\n// yarn\nyarn add @arco-design/web-react\n```\n\n----------------------------------------\n\nTITLE: Styling Custom BackTop Button with CSS\nDESCRIPTION: This CSS snippet styles the custom BackTop button with a clean, modern appearance. It includes hover and focus states for better user interaction, using CSS variables from the Arco Design system for consistent theming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/BackTop/__demo__/easing.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-backtop {\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  background: var(--color-fill-2);\n  border: 1px solid var(--color-border);\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  border-radius: 2px;\n  text-align: center;\n  font-weight: 800;\n  font-size: 12px;\n  color: #86909c;\n  transition: all 0.1s ease;\n}\n\n.custom-backtop:hover {\n  background: var(--color-fill-3);\n}\n\n.custom-backtop:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Borderless Collapse Panel with Arco Design\nDESCRIPTION: Implements a borderless collapse panel using @arco-design/web-react components. The example shows three collapsible sections containing company information, with dividers between content blocks. The panel is configured with no borders and a default active key.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/borderless.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse, Divider } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      bordered={false}\n      defaultActiveKey={['1']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}\n        />\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}\n        />\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem header=\"Introduce\" name=\"2\">\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem header=\"The Underlying AI Technology\" name=\"3\">\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Arco Design Collapse with destroyOnHide in React\nDESCRIPTION: This snippet demonstrates how to use the Collapse component from Arco Design with the destroyOnHide property. It creates a collapsible panel with three items, where hidden panels are destroyed when collapsed. The example includes content about Beijing Toutiao Technology Co., Ltd. and its AI technology.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/destoryOnHide.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapse } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      destroyOnHide\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem header=\"Introduce\" name=\"2\">\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem header=\"The Underlying AI Technology\" name=\"3\">\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Status with TimePicker in React - JavaScript\nDESCRIPTION: This code snippet demonstrates a React component using Arco Design's TimePicker to display input elements with varying statuses: 'error' and 'warning'. The component imports `TimePicker` and `Space` from '@arco-design/web-react' to create a UI where each TimePicker or RangePicker has a specific placeholder and style, allowing users to visualize status-driven styles. Dependencies include the '@arco-design/web-react' library. There are no specific input parameters, as the component renders predefined pickers. Outputs involve rendered UI elements styled according to the specified statuses.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TimePicker, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n    <Space wrap>\n      <TimePicker status=\"error\" placeholder=\"error status\" style={{ width: 200 }}/>\n      <TimePicker.RangePicker status=\"error\"  placeholder={[\"error status\", \"error status\"]}  style={{ width: 250 }}/>\n    </Space>\n    <br/>\n    <Space wrap>\n      <TimePicker status=\"warning\"  placeholder=\"warning status\"  style={{ width: 200 }}/>\n      <TimePicker.RangePicker status=\"warning\"  placeholder={[\"warning status\", \"warning status\"]}  style={{ width: 250 }}/>\n    </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Components with Custom Trigger Icons\nDESCRIPTION: This code snippet demonstrates how to create Avatar components with customizable trigger icons and types. It shows various configurations including button and mask trigger types, custom styling, and click event handling that displays messages when the avatar is clicked.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/__demo__/triggerIcon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar, Message, Space } from '@arco-design/web-react';\nimport { IconUser, IconCamera, IconEdit, IconClose } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Avatar\n        triggerIcon={<IconCamera />}\n        triggerIconStyle={{\n          color: '#3491FA',\n        }}\n        onClick={() => Message.info('Upload...')}\n        autoFixFontSize={false}\n        style={{\n          backgroundColor: '#168CFF',\n        }}\n      >\n        A\n      </Avatar>\n      <Avatar\n        triggerIcon={<IconEdit />}\n        onClick={() => Message.info('Upload...')}\n        style={{ backgroundColor: '#14C9C9' }}\n      >\n        <IconUser />\n      </Avatar>\n      <Avatar\n        shape=\"square\"\n        triggerIcon={<IconEdit />}\n        onClick={() => Message.info('Upload...')}\n        style={{ backgroundColor: '#FFC72E' }}\n      >\n        <IconUser />\n      </Avatar>\n      <Avatar triggerIcon={<IconCamera />} triggerType=\"mask\">\n        <img\n          alt=\"avatar\"\n          src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp\"\n        />\n      </Avatar>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker with Different Sizes in React\nDESCRIPTION: Example showing how to create ColorPicker components with four different size options (mini, small, default, large). Each ColorPicker is initialized with a default blue color value (#165DFF) and demonstrates the various size options available in the Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ColorPicker, Radio } from '@arco-design/web-react';\n\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <ColorPicker defaultValue={'#165DFF'} size={'mini'} />\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker defaultValue={'#165DFF'} size={'small'} />\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker defaultValue={'#165DFF'} size={'default'} />\n      <div style={{ marginTop: 10 }}/>\n      <ColorPicker defaultValue={'#165DFF'} size={'large'} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Success Result Component with Arco Design in React\nDESCRIPTION: Demonstrates how to implement a success result page using Arco Design's Result component with custom buttons. The component displays a success status message with a title, subtitle, and action buttons for 'Again' and 'Back' options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"success\"\n        title=\"Success message\"\n        subTitle=\"This is a success description.\"\n        extra={[\n          <Button key=\"again\" type=\"secondary\" style={{ margin: '0 16px' }}>\n            Again\n          </Button>,\n          <Button key=\"back\" type=\"primary\">\n            Back\n          </Button>,\n        ]}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Avatar Groups with Custom Styling in Arco Design React\nDESCRIPTION: This example demonstrates how to implement avatar groups using the Avatar.Group component from Arco Design's React library. It shows two groups with different sizes (32px and 24px) and custom background colors for each avatar. The example includes five avatars in each group with text content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/__demo__/group.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Avatar } from '@arco-design/web-react';\nconst AvatarGroup = Avatar.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <AvatarGroup\n        size={32}\n        style={{ margin: 10 }}\n      >\n        <Avatar style={{ backgroundColor: '#7BC616' }}>\n          A\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#14C9C9' }}>\n          B\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#168CFF' }}>\n          C\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#FF7D00' }}>\n          Arco\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#FFC72E' }}>\n          Design\n        </Avatar>\n      </AvatarGroup>\n      <br />\n      <AvatarGroup\n        size={24}\n        style={{ margin: 10 }}>\n        <Avatar style={{ backgroundColor: '#7BC616' }}>\n          A\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#14C9C9' }}>\n          B\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#168CFF' }}>\n          C\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#FF7D00' }}>\n          Arco\n        </Avatar>\n        <Avatar style={{ backgroundColor: '#FFC72E' }}>\n          Design\n        </Avatar>\n      </AvatarGroup>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Selection for InputNumber in ArcoDesign React\nDESCRIPTION: This snippet creates a React component using the Arco Design library to manage different sizes of InputNumber components. It allows users to select a size via radio buttons, which then dynamically adjusts the size of the InputNumber components. Dependencies include React and the @arco-design/web-react package. Key parameters include the selected size, influencing the height of the input boxes. The component does not handle size values outside the predefined options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { InputNumber, Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        type=\"button\"\n        name=\"size\"\n        value={size}\n        onChange={(value) => setSize(value)}\n        style={{ marginBottom: 20, borderRadius: 4 }}\n      >\n        <Radio value=\"mini\">mini</Radio>\n        <Radio value=\"small\">small</Radio>\n        <Radio value=\"default\">default</Radio>\n        <Radio value=\"large\">large</Radio>\n      </RadioGroup>\n      <div>\n        <InputNumber\n          defaultValue={2}\n          max={20}\n          size={size}\n          style={{ width: 160, margin: '10px 24px 10px 0' }}\n        />\n        <InputNumber\n          mode=\"button\"\n          defaultValue={2}\n          max={20}\n          size={size}\n          style={{ width: 160, margin: '10px 24px 10px 0' }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing Responsive Grid Layout in React\nDESCRIPTION: Creates a responsive grid using Arco Design's Grid component with varying column widths across different screen sizes\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/adaptation.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <Row className=\"grid-demo\">\n      <Col xs={2} sm={4} md={6} lg={8} xl={10} xxl={8}>\n        Col\n      </Col>\n      <Col xs={20} sm={16} md={12} lg={8} xl={4} xxl={8}>\n        Col\n      </Col>\n      <Col xs={2} sm={4} md={6} lg={8} xl={10} xxl={8}>\n        Col\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Integrating Arco Design Countdown in React Application\nDESCRIPTION: This snippet demonstrates how to integrate the Countdown component from the '@arco-design/web-react' package in a React application. It initializes various countdown timers with different formats and event triggers using the Countdown component of the Statistic module. Dependencies include React, @arco-design/web-react, and its sub-components such as Countdown, Button, and Space. Key functionalities showcased include displaying countdowns with different formats, rendering custom time remaining messages, and handling countdown completion events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/countdown.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Statistic, Message, Button, Space } from '@arco-design/web-react';\n\nconst Countdown = Statistic.Countdown;\nconst now = Date.now();\n\nfunction App() {\n  const [start, setStart] = React.useState(false);\n\n  const _now = Date.now();\n\n  return (\n    <Space direction=\"vertical\" size={40}>\n      <Space size={60}>\n        <Countdown title=\"Countdown\" value={now + 1000 * 60 * 60 * 2} now={now} />\n        <Countdown\n          value={now + 1000 * 60 * 60 * 2}\n          now={now}\n          renderFormat={(_diff, _value) => {\n            const minutes = Math.floor(_diff / (1000 * 60));\n            const seconds = Math.floor(_diff / 1000);\n            let diffTimes = '';\n            if (minutes) {\n              diffTimes = `${minutes}min 后`;\n            } else {\n              diffTimes = `${seconds}s 后`;\n            }\n            return <Statistic title=\"Countdown renderFormat\" value={_value} suffix={diffTimes} />;\n          }}\n        />\n        <Countdown\n          title=\"Milliseconds\"\n          value={now + 1000 * 60 * 60 * 2}\n          format=\"HH:mm:ss.SSS\"\n          now={now}\n        />\n      </Space>\n      <Space align=\"start\" size={40}>\n        <Countdown\n          title=\"Days\"\n          value={now + 1000 * 60 * 60 * 24 * 4}\n          format=\"D 天 H 时 m 分 s 秒\"\n          now={now}\n        />\n        <div>\n          <Countdown\n            title=\"Trigger on finish\"\n            value={_now + 1000 * 5}\n            format=\"HH:mm:ss.SSS\"\n            start={start}\n            now={_now}\n            onFinish={() => {\n              Message.info({\n                content: 'Finish!',\n              });\n              setStart(false);\n            }}\n          />\n          <Button\n            onClick={() => {\n              setStart(true);\n            }}\n            style={{ display: 'block', marginTop: 10 }}\n            type=\"primary\"\n          >\n            Start\n          </Button>\n        </div>\n      </Space>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Card Carousel with Arco Design\nDESCRIPTION: Creates a vertical carousel with card animation using the Arco Design library. The component features autoplay functionality, custom indicator positioning, and responsive image display. Container dimensions are manually specified with a height of 300px and width of 600px, while image containers are set to 200px height.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/vertical-card.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\n\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nfunction App() {\n  return (\n    <Carousel\n      autoPlay\n      animation=\"card\"\n      showArrow=\"never\"\n      indicatorPosition=\"outer-right\"\n      indicatorType=\"line\"\n      direction=\"vertical\"\n      style={{ height: 300, width: 600 }}\n    >\n      {imageSrc.map((src, index) => (\n        <div\n          key={index}\n          style={{ height: 200 }}\n        >\n          <img\n            src={src}\n            style={{ height: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Button Component API TypeScript Interface\nDESCRIPTION: TypeScript interface defining the properties available for the Button component. Includes properties for styling, behavior, states and event handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonProps {\n  disabled?: boolean;\n  iconOnly?: boolean;\n  loading?: boolean;\n  loadingFixedWidth?: boolean;\n  long?: boolean;\n  href?: string;\n  target?: string;\n  htmlType?: 'button' | 'submit' | 'reset';\n  shape?: 'circle' | 'round' | 'square';\n  size?: 'mini' | 'small' | 'default' | 'large';\n  status?: 'warning' | 'danger' | 'success' | 'default';\n  type?: 'default' | 'primary' | 'secondary' | 'dashed' | 'text' | 'outline';\n  icon?: ReactNode;\n  anchorProps?: HTMLProps<HTMLAnchorElement>;\n  className?: string | string[];\n  style?: CSSProperties;\n  onClick?: (e: Event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS styling for the trigger popup\nDESCRIPTION: This CSS code defines the styling for the popup that is triggered by the button in the React component. It sets properties for padding, width, text alignment, background color, and box shadow, customizing the appearance of the popup skeleton.  The `:silent` suffix indicates that this css is only for demonstration purposes and not intended to be included in the main stylesheet.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/updateAtScroll.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Comments for react-docgen-typescript\nDESCRIPTION: This TypeScript code demonstrates how to write comments for documentation generation using `react-docgen-typescript`.  It requires TSDoc-style comments and exporting the component using `export const Component = (props: ComponentProps) => {}`.  Default values must be declared using `Component.defaultProps = {}` to be extracted.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonProps {\n  /**\n   * 按钮尺寸\n   */\n  size?: 'mini' | 'small' | 'default' | 'large';\n  /**\n   * 按钮状态\n   */\n  status?: 'danger' | 'error' | 'success';\n}\n\n// 需要将 Button 以 const 声明，并且 export，否则工具可能识别不到\nexport const Button = (props: ButtonProps) => {\n  ...\n};\n\n// 只有用 defaultProps 声明的默认值才能被工具提取\nButton.defaultProps = {\n  size: 'default';\n};\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with VerificationCode Component in React\nDESCRIPTION: React component implementing a form with VerificationCode input and validation. The code validates that the input matches '123456' and includes numeric validation. Uses Arco Design's Form, Button, Typography, and VerificationCode components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/with-form.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Form, Button, Typography, VerificationCode } from '@arco-design/web-react';\nconst App = () => {\n  return (\n    <div className=\"demo-verify-code-wrapper\">\n      <Typography.Title heading={5}>Verification Code</Typography.Title>\n      <Form wrapperCol={{ span: 24 }}>\n        <Form.Item\n          field=\"code\"\n          rules={[\n            {\n              validator: (v, cb) => {\n                return v !== '123456' ? cb('must be 123456') : cb();\n              },\n            },\n          ]}\n          validateTrigger={['onFinish']}\n        >\n          <VerificationCode size=\"large\" validate={({inputValue}) => /\\d/.test(inputValue)} />\n        </Form.Item>\n        <Button type=\"primary\" size=\"large\" htmlType=\"submit\" style={{marginTop: 20}}>\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse with Extra Nodes in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a Collapse component with multiple CollapseItems, each featuring an extra icon node. It uses the Arco Design library and its IconMoreVertical component for the extra node. The Collapse is configured with destroyOnHide and defaultActiveKey props.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/extra.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse } from '@arco-design/web-react';\nimport { IconMoreVertical } from '@arco-design/web-react/icon';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      destroyOnHide\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem\n        header=\"Beijing Toutiao Technology Co., Ltd.\"\n        name=\"1\"\n        extra={<IconMoreVertical />}\n      >\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem\n        header=\"Beijing Toutiao Technology Co., Ltd.\"\n        name=\"2\"\n        extra={<IconMoreVertical />}\n      >\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem\n        header=\"Beijing Toutiao Technology Co., Ltd.\"\n        name=\"3\"\n        extra={<IconMoreVertical />}\n      >\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Extending Component Props in TypeScript\nDESCRIPTION: Shows how to properly extend base component props when creating a new component. Inherit from base props and override or add new properties as needed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad Case\ninterface SelectWithCheckAllProps {\n  size?: 'default' | 'mini' | 'large';\n}\n\n// ✅ Good Case\nimport { SelectProps } from '@arco-design/web-react';\n\ninterface SelectWithCheckAllProps extends Omit<SelectProps, 'onChange'> {\n  /**\n   * @zh 值改变时的回调\n   */\n  onChange?: (value) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Option Rendering in Cascader Component\nDESCRIPTION: Demonstrates two implementations of Cascader component - one with single selection and another with multiple selection mode. Both examples use renderOption prop to customize how each option is displayed, showing both label and value in parentheses. The component uses a nested data structure representing geographical locations in China.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/render_option.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n          {\n            value: 'fengtai',\n            label: 'fengtai',\n          },\n          {\n            value: 'shijingshan',\n            label: 'Shijingshan',\n          },\n          {\n            value: 'mentougou',\n            label: 'Mentougou',\n          },\n          {\n            value: 'fangshan',\n            label: 'Fangshan',\n          },\n          {\n            value: 'tongzhou',\n            label: 'Tongzhou',\n          },\n          {\n            value: 'shunyi',\n            label: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n        showSearch\n        renderOption={(node, level) => {\n          console.log(node, level);\n          return (\n            <span>\n              {node.label}({node.value})\n            </span>\n          );\n        }}\n      />\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        showSearch\n        mode=\"multiple\"\n        renderOption={(node, level) => {\n          return (\n            <span>\n              {node.label}({node.value})\n            </span>\n          );\n        }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Adjustable Select Components in React\nDESCRIPTION: This code snippet demonstrates how to create a React component that allows users to change the size of Select components. It uses Radio buttons for size selection and renders both single and multiple Select components with dynamic sizing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Select, Radio } from '@arco-design/web-react';\n\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Wuhan'];\n\nclass App extends React.Component {\n  state = {\n    value: 'default',\n  };\n\n  render() {\n    return (\n      <div>\n        <RadioGroup\n          type=\"button\"\n          name=\"size\"\n          value={this.state.value}\n          onChange={(value) => {\n            this.setState({\n              value,\n            });\n          }}\n          style={{ marginBottom: 20, borderRadius: 4 }}\n        >\n          <Radio value=\"mini\">mini</Radio>\n          <Radio value=\"small\">small</Radio>\n          <Radio value=\"default\">default</Radio>\n          <Radio value=\"large\">large</Radio>\n        </RadioGroup>\n        <div>\n          <Select\n            size={this.state.value}\n            placeholder=\"Select city\"\n            showSearch\n            style={{ width: 345, marginBottom: 20 }}\n          >\n            {options.map((option) => (\n              <Option key={option} value={option}>\n                {option}\n              </Option>\n            ))}\n          </Select>\n          <br />\n          <Select\n            mode={'multiple'}\n            size={this.state.value}\n            placeholder=\"Select cities\"\n            showSearch\n            style={{ width: 345 }}\n          >\n            {options.map((option) => (\n              <Option key={option} value={option}>\n                {option}\n              </Option>\n            ))}\n          </Select>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the ComponentConfig type, which specifies the configuration options for various components in the Arco Design library. It includes props for components like Affix, Alert, AutoComplete, and many others.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentConfig = {\n  Affix?: AffixProps;\n  Alert?: AlertProps;\n  AutoComplete?: AutoCompleteProps;\n  Avatar?: AvatarProps;\n  \"Avatar.Group\"?: AvatarGroupProps;\n  Anchor?: AnchorProps;\n  \"Anchor.Link\"?: AnchorLinkProps;\n  BackTop?: BackTopProps;\n  Badge?: BadgeProps;\n  Breadcrumb?: BreadcrumbProps;\n  Button?: ButtonProps;\n  Calendar?: CalendarProps;\n  Card?: CardProps;\n  Carousel?: CarouselProps;\n  Cascader?: CascaderProps;\n  Checkbox?: CheckboxProps;\n  Collapse?: CollapseProps;\n  Comment?: CommentProps;\n  ColorPicker?: ColorPickerProps;\n  DatePicker?: Omit<\n    DatePickerCommonProps,\n    | \"placeholder\"\n    | \"onChange\"\n    | \"onSelect\"\n    | \"onOk\"\n    | \"defaultPickerValue\"\n    | \"pickerValue\"\n    | \"onPickerValueChange\"\n    | \"inputProps\"\n  >;\n  Descriptions?: DescriptionsProps;\n  Divider?: DividerProps;\n  Drawer?: DrawerProps;\n  Dropdown?: DropdownProps;\n  \"Dropdown.Button\"?: DropdownButtonProps;\n  Empty?: EmptyProps;\n  \"Typography.Ellipsis\"?: TypographyEllipsisProps;\n  Form?: FormProps;\n  \"Grid.Row\"?: RowProps;\n  \"Grid.Col\"?: ColProps;\n  Grid?: GridProps;\n  \"Grid.GridItem\"?: GridItemProps;\n  Image?: ImageProps;\n  Input?: InputProps;\n  InputNumber?: InputNumberProps;\n  VerificationCode?: VerificationCodeProps;\n  Watermark?: WatermarkProps;\n  InputTag?: InputTagProps;\n  Layout?: LayoutProps;\n  Link?: LinkProps;\n  List?: ListProps;\n  \"List.Item\"?: ListItemProps;\n  Mentions?: MentionsProps;\n  Menu?: MenuProps;\n  Modal?: ModalProps;\n  PageHeader?: PageHeaderProps;\n  Pagination?: PaginationProps;\n  Popconfirm?: PopconfirmProps;\n  Popover?: PopoverProps;\n  Progress?: ProgressProps;\n  Radio?: RadioProps;\n  \"Radio.Group\"?: RadioGroupProps;\n  Rate?: RateProps;\n  ResizeBox?: ResizeBoxProps;\n  Result?: ResultProps;\n  Select?: SelectProps;\n  Skeleton?: SkeletonProps;\n  Slider?: SliderProps;\n  Space?: SpaceProps;\n  Spin?: SpinProps;\n  Statistic?: StatisticProps;\n  Steps?: StepsProps;\n  Switch?: SwitchProps;\n  Table?: TableProps;\n  Tabs?: TabsProps;\n  TreeProps?: TreeProps;\n  TriggerProps?: TriggerProps;\n  Tag?: TagProps;\n  Timeline?: TimelineProps;\n  \"Timeline.Item\"?: TimelineItemProps;\n  TimePicker?: TimePickerCommonProps;\n  Tooltip?: TooltipProps;\n  Transfer?: TransferProps;\n  Tree?: TreeProps;\n  TreeSelect?: TreeSelectProps;\n  Trigger?: TriggerProps;\n  Upload?: UploadProps;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascader with Custom Field Names in React\nDESCRIPTION: Implements a multiple-select Cascader component with custom field mappings using fieldNames prop. The example uses a nested location data structure with custom field names 'child' for children, 'name' for label, and 'id' for value fields.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/filedNames.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader } from '@arco-design/web-react';\nconst options = [\n  {\n    id: 'beijing',\n    name: 'Beijing',\n    child: [\n      {\n        id: 'Beijing',\n        name: 'Beijing',\n        child: [\n          {\n            id: 'chaoyang',\n            name: 'Chaoyang',\n            child: [\n              {\n                id: 'datunli',\n                name: 'Datunli',\n              },\n            ],\n          },\n          {\n            id: 'dongcheng',\n            name: 'Dongcheng',\n          },\n          {\n            id: 'xicheng',\n            name: 'Xicheng',\n          },\n          {\n            id: 'haidian',\n            name: 'Haidian',\n          },\n          {\n            id: 'fengtai',\n            name: 'fengtai',\n          },\n          {\n            id: 'shijingshan',\n            name: 'Shijingshan',\n          },\n          {\n            id: 'mentougou',\n            name: 'Mentougou',\n          },\n          {\n            id: 'fangshan',\n            name: 'Fangshan',\n          },\n          {\n            id: 'tongzhou',\n            name: 'Tongzhou',\n          },\n          {\n            id: 'shunyi',\n            name: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'shanghai',\n    name: 'Shanghai',\n    child: [\n      {\n        id: 'shanghaishi',\n        name: 'Shanghai',\n        child: [\n          {\n            id: 'huangpu',\n            name: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Cascader\n        mode=\"multiple\"\n        placeholder=\"Please select ...\"\n        style={{ width: 300 }}\n        onChange={(x, y) => {\n          console.log(x, y);\n        }}\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        showSearch\n        allowClear\n        fieldNames={{\n          children: 'child',\n          label: 'name',\n          value: 'id',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Badge Counter with React in Arco Design\nDESCRIPTION: This code demonstrates how to create badges with animation effects when the count changes. It includes two examples: a toggleable dot badge and a numeric badge with increment/decrement buttons to adjust the count value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/animate.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Badge, Avatar, Button, Switch, Space } from '@arco-design/web-react';\nimport { IconPlus, IconMinus } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [count, setCount] = React.useState<number>(12);\n  const [dot, setDot] = React.useState<boolean>(true);\n\n  return (\n    <Space direction=\"vertical\" size=\"large\">\n      <Space size=\"large\">\n        <Badge dot={dot} count={dot ? count : 0}>\n          <Avatar shape=\"square\"> </Avatar>\n        </Badge>\n        <Switch checked={dot} onChange={setDot}></Switch>\n      </Space>\n      <Space size=\"large\">\n        <Badge count={count}>\n          <Avatar shape=\"square\"> </Avatar>\n        </Badge>\n        <Button.Group>\n          <Button icon={<IconPlus />} onClick={() => setCount((c) => c + 1)}></Button>\n          <Button icon={<IconMinus />} onClick={() => setCount((c) => Math.max(c - 1, 0))}></Button>\n        </Button.Group>\n      </Space>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Transfer Component with React\nDESCRIPTION: This code demonstrates how to use the Transfer component from Arco Design with pagination enabled for handling large datasets. It creates a Transfer component with 30 data items, sets default selected and target keys, and customizes the title texts for both panels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/pagination.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const dataSource = new Array(30).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      pagination\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '3', '4']}\n      defaultSelectedKeys={['2', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Front Labels in React\nDESCRIPTION: This code snippet demonstrates how to use the Cascader component from Arco Design with front labels. It shows examples of single and multiple selection modes, and includes a hover-to-expand feature. The component uses a predefined options array for city selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/addon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        addBefore=\"Select city\"\n        placeholder=\"Please select ...\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n      />\n      <Cascader\n        placeholder=\"Hover to expand\"\n        expandTrigger=\"hover\"\n        addBefore=\"Select city\"\n        style={{ width: 300, marginBottom: 20 }}\n        options={options}\n        mode=\"multiple\"\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Controlling Options Removal in Tags Mode of Select - TypeScript\nDESCRIPTION: This snippet fixes the issue where options entered by the user were not removed properly in the tags mode of the Select component, improving the component's usability.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the options entered by the user were not removed normally when the `value` mode of the `tags` mode of the `Select` component is controlled.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Empty State Rendering in React with Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the ConfigProvider component to customize empty state rendering for various Arco Design components. It defines a renderEmpty function that returns different elements based on the component name, and applies it to multiple components including Cascader, Select, TreeSelect, List, and Table.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/renderEmpty.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport {\n  ConfigProvider,\n  Cascader,\n  Select,\n  TreeSelect,\n  List,\n  Table,\n  Space,\n  Empty,\n  Typography,\n} from '@arco-design/web-react';\n\nfunction renderEmpty(componentName) {\n  switch (componentName) {\n    case 'Cascader':\n      return <Typography.Text>Cascader no data!</Typography.Text>;\n\n    case 'Select':\n      return <Typography.Text>Select no data!</Typography.Text>;\n\n    case 'TreeSelect':\n      return <Typography.Text>TreeSelect no data!</Typography.Text>;\n\n    case 'List':\n      return <Empty description=\"List no data!\" />;\n\n    case 'Table':\n      return <Empty description=\"Table no data!\" />;\n\n    default:\n      return <Empty />;\n  }\n}\n\nconst App = () => {\n  return (\n    <ConfigProvider renderEmpty={renderEmpty}>\n      <Space>\n        <Cascader style={{ width: 200 }} placeholder=\"Cascader\" />\n        <Select style={{ width: 200 }} placeholder=\"Select\" />\n        <TreeSelect style={{ width: 200 }} placeholder=\"TreeSelect\" />\n      </Space>\n      <List header=\"Empty List\" style={{ marginTop: 20 }}/>\n      <Table\n        data={[]}\n        columns={[\n          {\n            title: 'Name',\n            key: 'name',\n          },\n          {\n            title: 'Age',\n            key: 'age',\n          },\n        ]}\n        style={{ marginTop: 20 }} />\n    </ConfigProvider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Switching Carousel with Arco Design\nDESCRIPTION: Creates a carousel component that automatically cycles through images with customizable transition effects. Uses the Carousel component from Arco Design with autoPlay functionality, dot indicators, and hover-activated arrows. Renders a list of images with custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/auto.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nconst App = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 240 }}\n      autoPlay={true}\n      indicatorType=\"dot\"\n      showArrow=\"hover\"\n    >\n      {imageSrc.map((src, index) => (\n        <div key={index}>\n          <img\n            src={src}\n            style={{ width: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring previewContextProvider in arco.workspace.jsonc\nDESCRIPTION: This code snippet demonstrates how to configure a `previewContextProvider` in `arco.workspace.jsonc`.  The `previewContextProvider` specifies the path to a module that exports a default React component to wrap the preview documentation, injecting context into the preview.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": [\n{\n\"rootDir\": \"src\",\n\"entries\": {\n\"base\": \".\",\n\"preview\": \"__docs__/index.mdx\",\n// Path relative to component base directory\n// The default export module of this document will wrap index.mdx when rendered\n\"previewContextProvider\": \"../globalContext/index.tsx\"\n}\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Server with Promise in JavaScript\nDESCRIPTION: Defines a function that simulates a server response by returning a promise that resolves with an array of plugin data after a timeout. This is used to mock fetching data asynchronously.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/load_data.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDataFromServer() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve([\n        {\n          id: '1',\n          name: 'EduTools',\n          version: '12.18.1',\n          author: 'Dickens',\n        },\n        {\n          id: '2',\n          name: 'BashSupport',\n          version: '12.19.2',\n          author: 'Aristotle',\n        },\n        {\n          id: '3',\n          name: 'GitToolBox',\n          version: '12.20.3',\n          author: 'Hemingway',\n        },\n      ]);\n    }, 1500);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Event Bubbling - Stop Propagation Example\nDESCRIPTION: This code snippet demonstrates how to prevent event bubbling in React, specifically when using Modals.  By using e.stopPropagation() on the inner element's onClick, the outer div's onClick is not triggered.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"<div onClick={() => {}}>\n    <Modal>aaaa</Modal> // 点击 aaa 会触发外层 div 的 onClick\n</div>\n\n<div onClick={() => {}}>\n   <span onClick={(e) => {e.stopPropagation()}}>\n        <Modal>aaaa</Modal>  // 点击 aaa 不会触发外层 div 上的 onClick\n   </span>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeSelect with Custom Check Strategy in React\nDESCRIPTION: This example demonstrates how to customize the return value of TreeSelect using the treeCheckedStrategy property. It allows users to switch between different strategies (show all, show parent, or show child) to control how selected values are displayed and returned.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/checkedStrategy.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TreeSelect, Radio } from '@arco-design/web-react';\nimport { useState } from 'react';\nconst treeData = [\n  {\n    title: 'Trunk 0-0',\n    value: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Leaf 0-0-1',\n        value: 'Leaf 0-0-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Branch 0-0-2',\n        value: 'Branch 0-0-2',\n        key: '0-0-2',\n        children: [\n          {\n            title: 'Leaf 0-0-2-1',\n            value: 'Leaf 0-0-2-1',\n            key: '0-0-2-1',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    value: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        value: 'Branch 0-1-1',\n        key: '0-1-1',\n        checkable: false,\n        children: [\n          {\n            title: 'Leaf 0-1-1-1',\n            value: 'Leaf 0-1-1-1',\n            key: '0-1-1-1',\n          },\n          {\n            title: 'Leaf 0-1-1-2',\n            value: 'Leaf 0-1-1-2',\n            key: '0-1-1-2',\n            disabled: true,\n          },\n        ],\n      },\n      {\n        title: 'Leaf 0-1-2',\n        value: 'Leaf 0-1-2',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeCheckedStrategy, setTreeCheckedStrategy] = useState(TreeSelect.SHOW_CHILD);\n  const [value, setValue] = useState(['0-0']);\n  return (\n    <div>\n      <div\n        style={{ marginBottom: 20, }}\n      >\n        <Radio.Group\n          type=\"button\"\n          value={treeCheckedStrategy}\n          onChange={setTreeCheckedStrategy}\n          options={[\n            {\n              value: TreeSelect.SHOW_ALL,\n              label: 'show all',\n            },\n            {\n              value: TreeSelect.SHOW_PARENT,\n              label: 'show parent',\n            },\n            {\n              value: TreeSelect.SHOW_CHILD,\n              label: 'show child',\n            },\n          ]}\n        />\n      </div>\n      <TreeSelect\n        showSearch\n        allowClear\n        treeCheckable\n        treeData={treeData}\n        value={value}\n        treeCheckedStrategy={treeCheckedStrategy}\n        onChange={(value) => {\n          console.log(value);\n          setValue(value);\n        }}\n        style={{ width: 300, }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-line Watermark with Arco Design in React\nDESCRIPTION: Shows how to implement a watermark with multiple lines of text using the Watermark component from Arco Design. The example demonstrates setting multiple content strings that will be displayed as separate lines in the watermark over a div element with 300px height.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/__demo__/contents.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Watermark } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Watermark\n  content={[\"Arco Design\", \"ByteDance\"]}\n  >\n   <div style={{height: 300}}></div>\n  </Watermark>\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React\nDESCRIPTION: This snippet imports necessary components from the @arco-design/web-react library to be used in the application, including Form, Grid, Input, and others for creating the UI.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-provider.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {\\\n  Form,\\\n  Grid,\\\n  Input,\\\n  Button,\\\n  Modal,\\\n  Message,\\\n  Tag,\\\n  Typography,\\\n  Table,\\\n  Select,\\\n  InputNumber,\\\n  Space,\\\n} from '@arco-design/web-react';\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeSelect Search Functionality - React\nDESCRIPTION: This snippet initializes a React component that uses the TreeSelect from the @arco-design/web-react library with a search function based on user input. The TreeSelect is configured to show a search input, filter tree nodes, and handle selection changes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/search.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { TreeSelect, Space } from '@arco-design/web-react';\nimport { IconCalendar } from '@arco-design/web-react/icon';\n\nconst treeData = [\n  {\n    title: 'Trunk 0-0',\n    value: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Branch 0-0-1',\n        value: 'Branch 0-0-1',\n        key: '0-0-1',\n        children: [\n          {\n            title: 'Leaf 0-0-1-1',\n            value: 'Leaf 0-0-1-1',\n            key: '0-0-1-1',\n          },\n          {\n            title: 'Leaf 0-0-1-2',\n            value: 'Leaf 0-0-1-2',\n            key: '0-0-1-2',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    value: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        value: 'Branch 0-1-1',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf 0-1-1-0',\n            value: 'Leaf 0-1-1-0',\n            key: '0-1-1-0',\n          },\n        ],\n      },\n      {\n        title: 'Branch 0-1-2',\n        value: 'Branch 0-1-2',\n        key: '0-1-2',\n        children: [\n          {\n            title: 'Leaf 0-1-2-0',\n            value: 'Leaf 0-1-2-0',\n            key: '0-1-2-0',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass App extends React.Component {\n  handleChange = (value) => {\n    console.log(value);\n    this.setState({\n      value,\n    });\n  };\n  filterTreeNode = (inputText, node) => {\n    return node.props.title.toLowerCase().indexOf(inputText.toLowerCase()) > -1;\n  };\n\n  render() {\n    return (\n      <Space size=\"large\">\n        <TreeSelect\n          showSearch={true}\n          placeholder=\"Please select ...\"\n          allowClear={true}\n          treeData={treeData}\n          onChange={this.handleChange}\n          treeProps={{\n            onSelect: (v, n) => {\n              console.log(n);\n            },\n          }}\n          style={{ width: 300 }}\n        />\n        <TreeSelect\n          showSearch={true}\n          placeholder=\"Please select ...\"\n          allowClear={true}\n          treeProps={{\n            onSelect: (v, n) => {\n              console.log(n);\n            },\n          }}\n          treeData={treeData}\n          filterTreeNode={this.filterTreeNode}\n          onChange={this.handleChange}\n          style={{ width: 300 }}\n        />\n      </Space>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Updating Message Notifications with ID in React\nDESCRIPTION: This snippet demonstrates how to update an existing Message notification by specifying the same ID. It first displays a loading message, then updates it to a success message after a 2-second timeout. Uses the Arco Design UI library for React.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/update_message.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message, Button } from '@arco-design/web-react';\n\nfunction updateMessage() {\n  Message.loading({\n    id: 'need_update',\n    content: 'Will update after 2 seconds...',\n  });\n  setTimeout(() => {\n    Message.success({\n      id: 'need_update',\n      content: 'Update success!',\n    });\n  }, 2000);\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateMessage} type=\"primary\">\n      Update message\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Component and Managing Focus\nDESCRIPTION: Demonstrates how to create a reference to an Input component and use focus and blur methods\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Input ref={(ref) => (this.input = ref)} />;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.focus();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing DatePicker with Different Status States in React\nDESCRIPTION: This code snippet demonstrates how to use the DatePicker and DatePicker.RangePicker components from Arco Design with different status states. It shows examples of error and warning states applied to both single date and date range pickers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n   <div>\n    <Space wrap>\n      <DatePicker status=\"error\" placeholder=\"error status\" style={{ width: 200 }}/>\n      <DatePicker.RangePicker status=\"error\"  placeholder=\"warning status\"  style={{ width: 250 }}/>\n    </Space>\n    <br/>\n    <Space wrap>\n      <DatePicker status=\"warning\"  placeholder=\"warning status\"  style={{ width: 200 }}/>\n      <DatePicker.RangePicker status=\"warning\"  placeholder=\"warning status\"  style={{ width: 250 }}/>\n    </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic PageHeader with ArcoDesign React\nDESCRIPTION: Creates a basic page header component with a title, subtitle, and radio button group for size selection. The component is styled with background colors and includes extra content area with interactive controls.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PageHeader, Message, Radio } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ background: 'var(--color-fill-2)', padding: 40 }}>\n      <PageHeader\n        style={{ background: 'var(--color-bg-2)' }}\n        title=\"ArcoDesign\"\n        subTitle=\"This is a description\"\n        extra={\n          <div>\n            <Radio.Group mode=\"fill\" type=\"button\" defaultValue=\"small\">\n              <Radio value=\"large\">Large</Radio>\n              <Radio value=\"medium\">Medium</Radio>\n              <Radio value=\"small\">Small</Radio>\n            </Radio.Group>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Usage with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to use the Tag component from the @arco-design/web-react library. It includes importing necessary components like Tag, Space, and IconCheckCircleFill, and renders a series of Tag components within a Space component for visual arrangement. The example showcases default tags and a tag with an icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag, Space } from '@arco-design/web-react';\nimport { IconCheckCircleFill } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Tag>Default</Tag>\n      <Tag>Tag 1</Tag>\n      <Tag>Tag 2</Tag>\n      <Tag icon={<IconCheckCircleFill />}>Complete</Tag>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing React Transfer Component\nDESCRIPTION: Demonstrates creating a Transfer component with a generated data source, default target keys, and selected keys. Includes custom title texts for source and target lists.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const dataSource = new Array(8).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      dataSource={dataSource}\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Variants for Progress Component - React\nDESCRIPTION: A React component demo showcasing Progress components with different sizes and types. Includes a radio group for size selection, linear and circular progress indicators with various states (normal, error, success), and a slider to control progress value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Progress, Slider, Grid, Radio, Typography } from '@arco-design/web-react';\n\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nfunction Demo() {\n  const [value, setValue] = React.useState(90);\n  const [size, setSize] = React.useState('default');\n  return (\n    <div>\n      <Row align=\"center\" style={{ marginBottom: 44 }}>\n        <Typography.Text>Size: &nbsp; &nbsp;</Typography.Text>\n        <Radio.Group options={['small', 'default', 'large']} value={size} onChange={setSize} />\n      </Row>\n      <Row gutter={44} style={{ marginBottom: 44 }}>\n        <Col span={7}>\n          <div>\n            <Progress\n              color=\"#C9CDD4\"\n              percent={value}\n              size={size}\n              formatText={() => 'waiting...'}\n              style={{\n                marginBottom: 44,\n              }}\n            />\n          </div>\n          <div>\n            <Progress percent={value} size={size} status=\"error\" />\n          </div>\n        </Col>\n        <Col span={7}>\n          <div>\n            <Progress\n              percent={value}\n              size={size}\n              style={{\n                marginBottom: 44,\n              }}\n            />\n          </div>\n          <div>\n            <Progress percent={value} size={size} status=\"success\" />\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Progress\n          type=\"circle\"\n          size={size}\n          percent={value}\n          style={{\n            margin: \"0 20px\",\n          }}\n        />\n        <Progress\n          type=\"circle\"\n          size={size}\n          percent={value}\n          status=\"error\"\n          style={{\n            margin: \"0 20px\",\n          }}\n        />\n        <Progress\n          type=\"circle\"\n          size={size}\n          percent={value}\n          status=\"success\"\n          style={{\n            margin: \"0 20px\",\n          }}/>\n      </Row>\n      <div style={{ width: 100, marginTop: 44 }}>\n        <Slider value={value} onChange={setValue}></Slider>\n      </div>\n    </div>\n  );\n}\n\nconst App = () => {\n  return <Demo />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining FieldError for Arco Design Form\nDESCRIPTION: This type definition defines `FieldError` as an object representing a form field error. It includes properties for the field value, error message, error type, and a flag indicating if the error is due to a required field.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport type FieldError<FieldValue = any> = {\n  value?: FieldValue;\n  message?: ReactNode;\n  type?: string;\n  requiredError?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Array Move Function\nDESCRIPTION: This function moves an element within an array from one index to another, returning a new array.  It creates a copy of the original array and then calls the `arrayMoveMutate` function to modify the copied array. This ensures that the original array is not mutated.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrayMove = (array, from, to) => {\n  array = [...array];\n  arrayMoveMutate(array, from, to);\n  return array;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns and Data for Expandable Rows in React\nDESCRIPTION: This snippet sets up columns and sample data for a table component using the Arco Design framework. It defines the structure of the columns and the data records that will be displayed in the table. Each column is specified with a title and a data index for referencing data fields.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/expandable.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Basic Popup Component in CSS\nDESCRIPTION: This CSS snippet provides styling for the popup component used in the Arco Design Trigger example. The '.demo-trigger-popup' class defines padding, width, text alignment, background color, and a shadow effect, providing a visual enhancement for popup elements. It assumes the use of CSS variables such as --color-bg-popup for theming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing positioned Message components with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create Message notifications with different position options (top and bottom) using Arco Design's Message component. It creates a simple React component with two buttons that trigger messages at different positions when clicked.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message, Button, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Button\n        onClick={() =>\n          Message.info({\n            content: 'This is a message!',\n            showIcon: true,\n            position: 'top',\n          })\n        }\n        type=\"primary\"\n      >\n        Top\n      </Button>\n      <Button\n        onClick={() =>\n          Message.info({\n            content: 'This is a message!',\n            showIcon: true,\n            position: 'bottom',\n          })\n        }\n        type=\"primary\"\n      >\n        Bottom\n      </Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Statistic Component with Animation in React\nDESCRIPTION: This code demonstrates the usage of the `Statistic` component from `@arco-design/web-react` to display animated numerical data. It showcases both automatic animation on mount via the `countUp` prop and manual animation control via refs. Two Statistic components are rendered, one showing user growth rate and the other showing population growth rate.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/countUp.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Statistic, Grid, Button } from '@arco-design/web-react';\nimport { IconArrowRise, IconArrowFall } from '@arco-design/web-react/icon';\n\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Row>\n        <Col span={4}>\n          <Statistic\n            ref={(ref) => (this.refGrowth = ref)}\n            title=\"User Growth Rate\"\n            value={50.32}\n            precision={2}\n            prefix={<IconArrowRise />}\n            suffix=\"%\"\n            countUp\n            styleValue={{ color: '#0fbf60' }}\n          />\n          <Button\n            onClick={() => {\n              this.refGrowth.countUp();\n            }}\n            style={{ display: 'block', marginTop: 10 }}\n            type=\"primary\"\n          >\n            Start\n          </Button>\n        </Col>\n        <Col span={4}>\n          <Statistic\n            ref={(ref) => (this.refBugs = ref)}\n            title=\"Population Growth Rate\"\n            value={2.59}\n            precision={2}\n            prefix={<IconArrowFall />}\n            suffix=\"%\"\n            countUp\n            styleValue={{ color: '#ee4d38' }}\n          />\n          <Button\n            onClick={() => {\n              this.refBugs.countUp();\n            }}\n            style={{ display: 'block', marginTop: 10 }}\n            type=\"primary\"\n          >\n            Start\n          </Button>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Specific Permissions in TypeScript\nDESCRIPTION: Shows how to implement permissions for specific objects within a list or collection using PermissionWrapper and dynamic resource naming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport PermissionWrapper from '@/components/permissionWrapper';\n\nreturn (\n  <div>\n    {data.map((item) => {\n      const { key, ...rest } = item;\n      return (\n        <PermissionWrapper\n          requiredPermissions={[\n            { resource: `list-card-${key}`, actions: ['write'] },\n          ]}\n        >\n          <Card {...rest} />\n        </PermissionWrapper>\n      );\n    })}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Switches with Different Sizes in Arco Design\nDESCRIPTION: This code snippet demonstrates how to create different sizes of the Switch component from the `@arco-design/web-react` library. The `size` property is used to specify the size of the switch, with options like `small` and the default size being available. The `type` property is used to change the look of the switch.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Switch />\n      <Switch size=\"small\" />\n      <Switch type=\"round\" />\n      <Switch size=\"small\" type=\"round\" />\n      <Switch type=\"line\" />\n      <Switch size=\"small\" type=\"line\" />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazyload Collapse Component with Arco Design\nDESCRIPTION: Implementation of a Collapse component using Arco Design that demonstrates lazy loading of content. The component includes three collapsible sections with different content, where children are only rendered when the section is first expanded. Default active keys are set for sections 1 and 2.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/lazyload.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      lazyload\n      defaultActiveKey={['1', '2']}\n      style={{ maxWidth: 1180 }}\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n\n      <CollapseItem header=\"Introduce\" name=\"2\">\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats, such as texts, images, question-and-answer\n        posts, microblogs, and videos.\n      </CollapseItem>\n\n      <CollapseItem header=\"The Underlying AI Technology\" name=\"3\">\n        In 2016, ByteDance's AI Lab and Peking University co-developed Xiaomingbot (张小明), an\n        artificial intelligence bot that writes news articles. The bot published 450 articles during\n        the 15-day 2016 Summer Olympics in Rio de Janeiro. In general, Xiaomingbot published stories\n        approximately two seconds after the event ended.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing TimePicker Step Values in React\nDESCRIPTION: This snippet demonstrates how to customize the step length (increment/decrement value) for hour, minute, and second in an Arco Design TimePicker component. The `step` prop accepts an object with `hour`, `minute`, and `second` keys to define the step for each time unit.  The TimePicker component is imported from '@arco-design/web-react'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/step.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <TimePicker\n      defaultValue=\"10:25:30\"\n      step={{\n        hour: 2,\n        minute: 5,\n        second: 10,\n      }}\n      style={{ width: 194, }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with Custom TextArea Input in React\nDESCRIPTION: Creates an AutoComplete component using a TextArea input element. Implements dynamic search functionality that generates suggestions based on user input by appending indices to the input value. Uses React hooks for state management.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__demo__/custom-input.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { AutoComplete, Input } from '@arco-design/web-react';\nconst { TextArea } = Input;\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  const handleSearch = (inputValue) => {\n    setData(\n      inputValue && inputValue.trim()\n        ? new Array(5).fill(null).map((_, index) => `${inputValue}_${index}`)\n        : []\n    );\n  };\n\n  return (\n    <AutoComplete\n      style={{ width: 320, height: 80 }}\n      data={data}\n      triggerElement={<TextArea />}\n      placeholder=\"Customize this with your words\"\n      onSearch={handleSearch}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: TreeSelect: Setting different sizes with React\nDESCRIPTION: This code snippet demonstrates how to use the `size` prop in Arco Design's `TreeSelect` component to control its dimensions. The example uses React hooks (`useState`) and the `Radio` component to create a user interface for selecting the size, which then dynamically updates the `TreeSelect` component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect, Radio } from '@arco-design/web-react';\nconst TreeNode = TreeSelect.Node;\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        type=\"button\"\n        name=\"size\"\n        value={size}\n        onChange={setSize}\n        style={{ marginBottom: 20, }}\n      >\n        <Radio value=\"mini\">mini</Radio>\n        <Radio value=\"small\">small</Radio>\n        <Radio value=\"default\">default</Radio>\n        <Radio value=\"large\">large</Radio>\n      </RadioGroup>\n      <div>\n        <TreeSelect\n          size={size}\n          defaultValue=\"node1\"\n          style={{ width: 300, }}\n        >\n          <TreeNode key=\"node1\" title=\"Trunk\">\n            <TreeNode key=\"node2\" title=\"Leaf\" />\n          </TreeNode>\n          <TreeNode key=\"node3\" title=\"Trunk2\">\n            <TreeNode key=\"node4\" title=\"Leaf\" />\n            <TreeNode key=\"node5\" title=\"Leaf\" />\n          </TreeNode>\n        </TreeSelect>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu with onClickMenuItem Control\nDESCRIPTION: Shows how to prevent menu closure by returning false in onClickMenuItem callback for specific menu items\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/control.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DemoWithOnClickMenuItem() {\n  const dropList = (\n    <Menu\n      onClickMenuItem={(key) => {\n        if (key === '1') {\n          return false;\n        }\n      }}\n    >\n      <Menu.Item key=\"1\">Return false in onClickMenuItem callback</Menu.Item>\n      <Menu.Item key=\"2\">Will close the menu</Menu.Item>\n    </Menu>\n  );\n  return (\n    <Dropdown droplist={dropList} trigger=\"click\" position=\"bl\">\n      <Button type=\"text\">\n        Click\n        <IconDown />\n      </Button>\n    </Dropdown>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Arco Design TimePicker with Custom Format\nDESCRIPTION: Demonstrates how to set a custom time format using the TimePicker component from Arco Design web react library. Uses dayjs for time value initialization with a specific 'HH:mm' format.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/format.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\n\nconst App = () => {\n  return (\n    <TimePicker\n      format=\"HH:mm\"\n      defaultValue={dayjs('09:24', 'HH:mm')}\n      style={{ width: 130, }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props with JSDoc annotations\nDESCRIPTION: This TypeScript code demonstrates how to define component properties with JSDoc-style annotations. These annotations are used to automatically generate API documentation. Includes `@title`, `@zh`, `@en`, `@defaultValue`, and `@version` tags.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @title Button (必填，带有 `title` 描述的接口或者类型才会被收集)\n */\ninterface ButtonProps {\n  /**\n   * @zh 按钮尺寸 (属性的中文描述)\n   * @en Size of Button (可选，属性的英文描述)\n   * @version 1.2.0 (可选，新增的属性在哪个版本开始支持)\n   * @defaultValue 'default' (可选，属性的默认值)\n   */\n  size?: 'mini' | 'small' | 'default' | 'large';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mini-Sized Tooltip in React with Arco Design\nDESCRIPTION: This example demonstrates how to create a mini-sized tooltip using the Arco Design UI library. The mini property is set on the Tooltip component to create a smaller tooltip size, which is useful for compact displays or digital bubble styles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tooltip/__demo__/mini.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tooltip, Typography } from '@arco-design/web-react';\nconst { Text } = Typography;\n\nconst App = () => {\n  return (\n    <Tooltip mini content=\"123456789\">\n      <Text>Mouse over to display tooltip</Text>\n    </Tooltip>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for On-Demand Style Loading\nDESCRIPTION: This code demonstrates the configuration required for babel-plugin-import to load styles on demand for the Arco Design React library. By setting `libraryName` to `@arco-design/web-react` and `style` to `true`, only the necessary CSS for the imported components will be included in the bundle, reducing the overall bundle size.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n  [\n    'babel-plugin-import',\n    {\n      libraryName: '@arco-design/web-react',\n      libraryDirectory: 'es',\n      camel2DashComponentName: false,\n      style: true, // style\n    },\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic List with Arco Design in JavaScript\nDESCRIPTION: This example shows how to create a basic list using the List component from Arco Design. The list displays text items with a header and uses the small size variant. It demonstrates how to supply data through the dataSource prop and render individual list items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { List } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <List\n      style={{ width: 622 }}\n      size=\"small\"\n      header=\"List title\"\n      dataSource={[\n        'Beijing Bytedance Technology Co., Ltd.',\n        'Bytedance Technology Co., Ltd.',\n        'Beijing Toutiao Technology Co., Ltd.',\n        'Beijing Volcengine Technology Co., Ltd.',\n        'China Beijing Bytedance Technology Co., Ltd.',\n      ]}\n      render={(item, index) => <List.Item key={index}>{item}</List.Item>}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Close with Tag in React\nDESCRIPTION: This code snippet defines a React functional component that implements an asynchronous closure for a Tag. It utilizes a Promise in the `onClose` handler to simulate closing behavior that can succeed or fail. Dependencies include `@arco-design/web-react` for Tag and Message components. Key parameters include the `onClose` function that returns a Promise, and it provides visual feedback during the closure process.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/close-async.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag, Message } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Tag\n      closable\n      onClose={() => {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (Math.random() >= 0.5) {\n              resolve();\n            } else {\n              Message.error('Close failed');\n              reject();\n            }\n          }, 3000);\n        });\n      }}\n    >\n      Tag 1\n    </Tag>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Dividers with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to use vertical dividers from the Arco Design library in a React component. It creates a layout with three text items separated by vertical dividers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/vertical.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider, Typography } from '@arco-design/web-react';\nconst { Text } = Typography;\n\nconst App = () => {\n  return (\n    <div className=\"divider-demo\">\n      <Text>Item 1</Text>\n      <Divider type=\"vertical\" />\n      <Text>Item 2</Text>\n      <Divider type=\"vertical\" />\n      <Text>Item 3</Text>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Horizontal Menu with Arco Design\nDESCRIPTION: This snippet demonstrates how to create a horizontal menu using Arco Design's `Menu` component. It imports necessary components from `@arco-design/web-react` and sets the `mode` prop to `horizontal`. It also includes MenuItem components for each menu item.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/horizontal.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@arco-design/web-react';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\n\nfunction App() {\n  return (\n    <div className=\"menu-demo\">\n      <Menu mode=\"horizontal\" defaultSelectedKeys={['1']}>\n        <MenuItem\n          key=\"0\"\n          style={{ padding: 0, marginRight: 38, }}\n          disabled\n        >\n          <div\n            style={{\n              width: 80,\n              height: 30,\n              borderRadius: 2,\n              background: 'var(--color-fill-3)',\n              cursor: 'text',\n            }}\n          />\n        </MenuItem>\n        <MenuItem key=\"1\">Home</MenuItem>\n        <MenuItem key=\"2\">Solution</MenuItem>\n        <MenuItem key=\"3\">Cloud Service</MenuItem>\n        <MenuItem key=\"4\">Cooperation</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Switches with Arco Design\nDESCRIPTION: This snippet shows how to import and use the Switch component from the Arco Design framework to create customizable switches with different text and icons displayed based on their state. It demonstrates three different configurations, including standard text, numeric values, and icon-based representations. The Space component is utilized for layout spacing between switches.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/__demo__/checked_text.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch, Space } from '@arco-design/web-react';\nimport { IconCheck, IconClose } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Switch checkedText=\"ON\" uncheckedText=\"OFF\" />\n      <Switch checkedText=\"1\" uncheckedText=\"0\" type=\"round\" defaultChecked />\n      <Switch checkedText={<IconCheck />} uncheckedText={<IconClose />} defaultChecked />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Adjustable Pagination in React with Arco Design\nDESCRIPTION: Creates a component that demonstrates different pagination sizes using Arco Design's Pagination component. Uses a RadioGroup for size selection and implements state management for dynamic size updates. Includes total count display, jumper, and size changing functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Pagination, Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        value={size}\n        options={['large', 'default', 'small', 'mini']}\n        onChange={(value) => setSize(value)}\n        type=\"button\"\n        style={{\n          marginBottom: 20,\n        }}\n      />\n      <Pagination size={size} total={50} showTotal showJumper sizeCanChange />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Popconfirm Component in React\nDESCRIPTION: Implements a Popconfirm dialog with custom positioning, message handling, and container selection using Arco Design web react library\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/auto.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Button, Popconfirm, Message, ResizeBox } from '@arco-design/web-react';\n\nconst props = {\n  getPopupContainer: () => document.querySelector('.popup-container'),\n  title: '确认编辑该选项吗？',\n  onOk: () => {\n    Message.info({\n      content: '你点击了确认',\n    });\n  },\n  onCancel: () => {\n    Message.error({\n      content: '你点击了取消',\n    });\n  },\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"popup-container\"\n        directions={['right', 'bottom']}\n        style={{\n          width: 300,\n          height: 300,\n          overflow: 'auto',\n        }}\n      >\n        <div\n          style={{\n            width: 450,\n            height: 300,\n            position: 'relative',\n          }}\n        >\n          <Popconfirm position=\"bottom\" {...props} getPopupContainer={(node) => node.parentElement}>\n            <Button style={{ margin: '0 200px' }}>popover</Button>\n          </Popconfirm>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Popups in React - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a nested popup component in a React application using the Arco Design library. The component utilizes the Trigger, Button, Input, Skeleton, and Typography components from Arco Design to manage the visibility and positioning of the popups.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/nest.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trigger, Button, Input, Skeleton, Typography } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Trigger\n      popup={() => {\n        return (\n          <div className=\"demo-trigger-popup\">\n            <Trigger\n              trigger=\"click\"\n              position=\"right\"\n              popup={() => (\n                <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n                  <Skeleton />\n                  <Typography.Text>Two</Typography.Text>\n\n                  <Trigger\n                    trigger=\"focus\"\n                    blurToHide={false}\n                    position=\"right\"\n                    popup={() => (\n                      <div className=\"demo-trigger-popup\">\n                        <Typography.Text>Three</Typography.Text>\n                        <Skeleton />\n                      </div>\n                    )}\n                  >\n                    <Input placeholder=\"Focus Me\" />\n                  </Trigger>\n                </div>\n              )}\n            >\n              <Button>Click Me</Button>\n            </Trigger>\n          </div>\n        );\n      }}\n    >\n      <Button>Hover Me</Button>\n    </Trigger>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Component Hover States in Arco Design\nDESCRIPTION: This snippet demonstrates how to use the 'hoverable' property to control whether the background color is hidden when hovering over Link components. The example shows two Links with hoverable={false} - one with default status and one with error status.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Link/__demo__/hoverable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Link, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Link hoverable={false}> Link </Link>\n      <Link hoverable={false} status=\"error\">\n        Link\n      </Link>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Lerna Configuration for NPM Publishing\nDESCRIPTION: This JavaScript snippet is a configuration for the Arco project using Lerna. It specifies the packages to include, overrides certain commands, and sets initial metadata such as the team ID for publishing materials.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nmodule.exports = {\n  // globs to your packages\n  // e.g. ['packages/*']\n  packages: ['packages/*'],\n  // command you want to replace'arco subCommand'\n  // e.g. publish:'lerna publish'\n  alias: {\n    publish:'lerna publish',\n  },\n  // initial meta for'arco generate'\n  initialMeta: {\n    // Modify this to be your team ID\n    group: 1,\n  },\n  // path of arco block insertion, relative to /src ('myPath' will be resolved as'/src/myPath')\n  // pathBlockInsert:'pathRelativeToSrc',\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Nested Popups - CSS\nDESCRIPTION: This snippet provides the styling for the nested popup component, ensuring proper padding, width, text alignment, and background color consistent with the Arco Design theme. The box-shadow enhances the visual appearance of the popup.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/nest.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Progress Bars with Arco Design\nDESCRIPTION: Shows how to create animated progress bars using the Progress component from Arco Design. The animation effect is enabled by setting the animation prop to true and only works with type='line'. Demonstrates both regular and success status progress bars.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/animate.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Progress } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Progress percent={80} animation width={300} />\n      <br />\n      <br />\n      <Progress percent={80} status=\"success\" animation width={300} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Timeline with Arco Design in React\nDESCRIPTION: This code demonstrates how to implement a horizontal timeline using Arco Design's Timeline component with configurable display modes (top, bottom, alternate). The example includes radio buttons for switching between modes and shows timeline items with company information and images.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/direction.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Timeline, Grid, Radio, Typography } from '@arco-design/web-react';\n\nconst TimelineItem = Timeline.Item;\nconst { Row } = Grid;\n\nconst imageStyle = {\n  margin: '0 12px 12px 12px'\n}\n\nfunction App() {\n  const [mode, setMode] = React.useState('top');\n  return (\n    <div>\n      <Row\n        align=\"center\"\n        style={{ marginBottom: 24, }}\n      >\n        <Typography.Text>mode: &nbsp; &nbsp;</Typography.Text>\n        <Radio.Group\n          value={mode}\n          onChange={setMode}\n          options={[\n            {\n              label: 'top',\n              value: 'top',\n            },\n            {\n              label: 'bottom',\n              value: 'bottom',\n            },\n            {\n              label: 'alternate',\n              value: 'alternate',\n            },\n          ]}\n        />\n      </Row>\n      <Timeline direction=\"horizontal\" mode={mode} pending>\n        <TimelineItem>\n          <Row align=\"center\">\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/b5d834b83708a269b4562924436eac48.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12, }} >\n              Toutiao\n              <div style={{ fontSize: 12, color: '#4E5969', }} >\n                Founded in 2012\n              </div>\n            </div>\n          </Row>\n        </TimelineItem>\n        <TimelineItem>\n          <Row align=\"center\">\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/385ed540c359ec8a9b9ce2b5fe89b098.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12, }} >\n              Xigua Video\n              <div style={{ fontSize: 12, color: '#4E5969', }} >\n                Founded in 2017\n              </div>\n            </div>\n          </Row>\n        </TimelineItem>\n        <TimelineItem>\n          <Row align=\"center\">\n            <img\n              width=\"40\"\n              style={imageStyle}\n              src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/73a34d47f2885cf5182d755aa0c8a7d4.png~tplv-uwbnlip3yd-png.png\"\n            />\n            <div style={{ marginBottom: 12, }} >\n              Pipidance\n              <div style={{ fontSize: 12, color: '#4E5969', }} >\n                Founded in 2018\n              </div>\n            </div>\n          </Row>\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Radio Group with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to create a vertical radio group using the Radio component from Arco Design. It sets the direction prop to 'vertical' and includes four radio options, with the last one being disabled.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/direction.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nconst App = () => {\n  return (\n    <div>\n      <RadioGroup direction=\"vertical\" defaultValue=\"a\">\n        <Radio value=\"a\">A</Radio>\n        <Radio value=\"b\">B</Radio>\n        <Radio value=\"c\">C</Radio>\n        <Radio disabled value=\"d\">\n          D\n        </Radio>\n      </RadioGroup>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Mentions Input with Custom Prefixes in React\nDESCRIPTION: This React component utilizes the Mentions component from the @arco-design/web-react library. It demonstrates how to customize the trigger character for mentions by allowing the user to specify different prefixes such as '@', '#', '*', or '${'. The component also includes various input styles and placeholders to guide user input.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Mentions/__demo__/prefix.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Mentions, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Mentions\n        style={{ width: 154, marginBottom: 10 }}\n        placeholder=\"Input @\"\n        options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n      />\n      <Mentions\n        style={{ width: 154, marginBottom: 10 }}\n        prefix=\"#\"\n        placeholder=\"Input #\"\n        options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n      />\n      <Mentions\n        style={{ width: 154, marginBottom: 10 }}\n        prefix=\"*\"\n        placeholder=\"Input *\"\n        options={['Bytedance', 'Bytedesign', 'Bytedenumner']}\n      />\n       <Mentions\n        style={{ width: 154, marginBottom: 10 }}\n        prefix=\"${\"\n        placeholder=\"Input ${\"\n        options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Responsive Grid Items\nDESCRIPTION: CSS styles for configuring the appearance and layout of grid items with alternating background colors and consistent sizing\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/grid-responsive.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-responsive-demo .demo-item,\n.grid-responsive-demo .demo-suffix {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n.grid-responsive-demo .demo-item:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n.grid-responsive-demo .demo-item:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in React Component\nDESCRIPTION: Demonstrates how to use the 'useLocale' hook to implement internationalization in a React component. It imports the hook, initializes the locale, and uses it to display localized text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/i18n.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport React from'react';\n+ import useLocale from '@/utils/useLocale';\n\nexport default function Monitor() {\n\n+ const locale = useLocale();\n\n-return <div>Monitoring page</div>;\n\n+ return <div>{locale['menu.dashboard.monitor']}</div>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arco Design Input.Password Component\nDESCRIPTION: This code snippet demonstrates how to use the `Input.Password` component from the `@arco-design/web-react` library.  It imports the necessary components and renders two password input fields within a `Space` component for layout. The first password field has a default value, and the second has a default value, a placeholder, and is initially visible.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/password.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space wrap>\n      <Input.Password defaultValue=\"password\" style={{ width: 350 }} />\n      <Input.Password\n        defaultValue=\"password\"\n        defaultVisibility={true}\n        placeholder=\"Enter password\"\n        style={{ width: 350 }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Calendar with Arco Design Components\nDESCRIPTION: Shows how to create two calendar components in card format using the Calendar component from Arco Design. One calendar displays daily view with a today button, while the other shows yearly view. Both calendars use the panel property for card-style display.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Calendar/__demo__/panel.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Calendar, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space align=\"start\">\n      <Calendar\n        panel\n        defaultValue=\"2020-04-01\"\n        panelTodayBtn\n        style={{ marginRight: 50 }}\n        onChange={(a) => console.log(a)}\n      />\n      <Calendar panel defaultValue=\"2020-03\" mode=\"year\" />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Text Ellipsis Component with Expandable Functionality - React\nDESCRIPTION: This snippet defines a React component that uses the Typography.Ellipsis component from Arco Design to display a long text. It features action buttons for expanding and collapsing the text using state management with React hooks. The 'expandRender' function determines which icon to display based on the 'expanded' state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/ellipsis-action.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Typography } from '@arco-design/web-react';\nimport { IconDoubleUp, IconDoubleDown } from '@arco-design/web-react/icon';\n\nconst text = 'A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design. A design is a plan or specification for the construction of an object or system or for the implementation of an activity or process, or the result of that plan or specification in the form of a prototype, product or process. The verb to design expresses the process of developing a design. The verb to design expresses the process of developing a design.';\n\nfunction App() {\n  const [expanded, setExpanded] = useState(true);\n\n  const expandRender = (expanded) => {\n    if (!expanded) {\n      return <IconDoubleDown className=\"action-btn\"/>;\n    }\n    return <IconDoubleUp className=\"action-btn\"/>\n  }\n\n  return (\n    <div>\n      <Typography.Ellipsis\n        rows={4}\n        expanded={expanded}\n        expandRender={expandRender}\n        onExpand={setExpanded}\n      >{text}</Typography.Ellipsis>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Dotted Steps Bar with Arco Design\nDESCRIPTION: This code snippet demonstrates how to create a dotted step bar using the `Steps` and `Step` components from the `@arco-design/web-react` library. It includes examples for both horizontal and vertical orientations, setting the current step and providing titles and descriptions for each step. The `type` prop is set to \"dot\" to enable the dotted style.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/dot.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <div>\n      <Steps type=\"dot\" current={2} style={{ maxWidth: 780, marginBottom: 40 }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n      <Steps type=\"dot\" direction=\"vertical\" current={2} style={{ maxWidth: 780 }}>\n        <Step title=\"Succeeded\" description=\"This is a description\" />\n        <Step title=\"Processing\" description=\"This is a description\" />\n        <Step title=\"Pending\" description=\"This is a description\" />\n      </Steps>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Sorter Function Type in TypeScript\nDESCRIPTION: The SorterFn type defines the structure of a sorting function that takes two parameters and returns a numerical value indicating the order of comparison. This is crucial for enabling custom sorting logic within table components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SorterFn = (a: any, b: any) => number;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto Width Select Components in React\nDESCRIPTION: This code snippet demonstrates the usage of the Select component from Arco Design with autoWidth property. It showcases different configurations including minWidth and maxWidth settings, multiple selection mode, and additional UI elements like addBefore.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/autoWidth.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Typography, Space, Divider } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'BBBBBBBBBBBBBBBBBBBB', 'CCCCCCCCCCCC', 'DDDD', 'EEE', 'FF'];\n\nconst App = () => {\n  return (\n    <div >\n      <div style={{marginBottom: 32}}>\n        <Divider orientation=\"center\">\n          <Typography.Text code>{JSON.stringify({minWidth: 200, maxWidth: 500})}</Typography.Text>\n        </Divider>\n        <Select\n          autoWidth={{minWidth: 200, maxWidth: 500}}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          showSearch\n        >\n        </Select>\n        <br/><br/>\n        <Select\n          autoWidth={{minWidth: 200, maxWidth: 500}}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          showSearch\n          addBefore=\"Select\"\n        >\n        </Select>\n      </div>\n\n      <div style={{marginBottom: 32}}>\n        <Divider orientation=\"center\">\n          <Typography.Text code>{JSON.stringify({minWidth: 0, maxWidth: 500})}</Typography.Text>\n        </Divider>\n        <Select\n          autoWidth={{ maxWidth: 500}}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          showSearch\n        >\n        </Select>\n        <br/><br/>\n        <Select\n          autoWidth={{ maxWidth: 500}}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          showSearch\n          addBefore=\"Select\"\n        >\n        </Select>\n      </div>\n\n      <div style={{marginBottom: 32}}>\n      <Divider orientation=\"center\">\n          <Typography.Text code>{JSON.stringify({minWidth: 300, maxWidth: \"100%\"})}</Typography.Text>\n        </Divider>\n        <Select\n          autoWidth={{ minWidth: 300 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        >\n        </Select>\n        <br/>\n        <br/>\n        <Select\n          addBefore=\"Select\"\n          autoWidth={{ minWidth: 300 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        >\n        </Select>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: InputTag: Save on Blur in React\nDESCRIPTION: This code snippet demonstrates how to use the InputTag component with the `saveOnBlur` property enabled. When the input loses focus, the text is automatically saved as a tag. It imports the InputTag component from the '@arco-design/web-react' library and renders it with the `saveOnBlur` and `placeholder` props set.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/save-on-blur.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InputTag } from '@arco-design/web-react';\n\nconst App = () => {\n  return <InputTag saveOnBlur placeholder=\"Input and blur directly\" style={{ maxWidth: 350 }} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Selection in React - JavaScript\nDESCRIPTION: This code demonstrates a React component that allows users to select between different button sizes using a radio button group. It utilizes the Arco Design components 'Space' and 'Button' to display the buttons with the selected size. React's useState hook is used to manage the selected size state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Space/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Space, Button, Radio } from '@arco-design/web-react';\n\nfunction App() {\n  const [size, setSize] = useState('small');\n  return (\n    <div>\n      <div style={{ marginBottom: 20 }}>\n        <Radio.Group\n          options={['mini', 'small', 'medium', 'large']}\n          value={size}\n          onChange={(value) => setSize(value)}\n          type=\"button\"\n        />\n      </div>\n      <Space size={size}>\n        <Button type=\"primary\">Item1</Button>\n        <Button type=\"primary\">Item2</Button>\n        <Button type=\"primary\">Item3</Button>\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying Tags with Arco Design in JavaScript\nDESCRIPTION: This code snippet defines a React component that uses the Arco Design library to render tags of varying sizes within a 'Space' component. The 'Tag' component from Arco Design is used to display tags that are closable, with specified sizes including 'large', 'medium', 'default', and 'small'. No additional dependencies are required beyond '@arco-design/web-react'. Expected input is the inclusion within a React application, and the output is a visual display of tags with different sizes on the webpage.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tag, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Tag size=\"large\" closable>\n        Large\n      </Tag>\n      <Tag size=\"medium\" closable>\n        Medium\n      </Tag>\n      <Tag size=\"default\" closable>\n        default\n      </Tag>\n      <Tag size=\"small\" closable>\n        small\n      </Tag>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Table with React and Arco Design\nDESCRIPTION: This code defines the `EditableTable` component, which renders the main table with editable cells. It manages the table data using `useState` and defines the columns, specifying which columns are editable. It also includes functions for adding, deleting, and saving rows. The `components` prop of the `Table` component is used to override the default row and cell components with the `EditableRow` and `EditableCell` components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/table-edit.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction EditableTable() {\n  const [count, setCount] = useState(5);\n  const [data, setData] = useState([\n    {\n      key: '1',\n      name: 'Jane Doe',\n      salary: 23000,\n      address: '32 Park Road, London',\n      email: 'jane.doe@example.com',\n    },\n    {\n      key: '2',\n      name: 'Alisa Ross',\n      salary: 25000,\n      address: '35 Park Road, London',\n      email: 'alisa.ross@example.com',\n    },\n    {\n      key: '3',\n      name: 'Kevin Sandra',\n      salary: 22000,\n      address: '31 Park Road, London',\n      email: 'kevin.sandra@example.com',\n    },\n    {\n      key: '4',\n      name: 'Ed Hellen',\n      salary: 17000,\n      address: '42 Park Road, London',\n      email: 'ed.hellen@example.com',\n    },\n    {\n      key: '5',\n      name: 'William Smith',\n      salary: 27000,\n      address: '62 Park Road, London',\n      email: 'william.smith@example.com',\n    },\n  ]);\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      editable: true,\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      editable: true,\n    },\n    {\n      title: 'Address',\n      dataIndex: 'address',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n    },\n    {\n      title: 'Operation',\n      dataIndex: 'op',\n      render: (_, record) => (\n        <Button onClick={() => removeRow(record.key)} type=\"primary\" status=\"danger\">\n          Delete\n        </Button>\n      ),\n    },\n  ];\n\n  function handleSave(row) {\n    const newData = [...data];\n    const index = newData.findIndex((item) => row.key === item.key);\n    newData.splice(index, 1, { ...newData[index], ...row });\n    setData(newData);\n  }\n\n  function removeRow(key) {\n    setData(data.filter((item) => item.key !== key));\n  }\n\n  function addRow() {\n    setCount(count + 1);\n    setData(\n      data.concat({\n        key: `${count + 1}`,\n        name: 'Tom',\n        salary: 10000,\n        address: '33 Park Road, London',\n        email: 'tom@example.com',\n      })\n    );\n  }\n\n  return (\n    <>\n      <Button\n        style={{ marginBottom: 10, }}\n        type=\"primary\"\n        onClick={addRow}\n      >\n        Add\n      </Button>\n      <Table\n        data={data}\n        components={{\n          body: {\n            row: EditableRow,\n            cell: EditableCell,\n          },\n        }}\n        columns={columns.map((column) =>\n          column.editable\n            ? {\n                ...column,\n                onCell: () => ({\n                  onHandleSave: handleSave,\n                }),\n              }\n            : column\n        )}\n        className=\"table-demo-editable-cell\"\n      />\n    </>\n  );\n}\n\nexport default EditableTable;\n```\n\n----------------------------------------\n\nTITLE: Extending Style Build Process in JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the Less/Sass build process by adding custom preprocessing steps, such as adding content before compilation and applying PostCSS transformations after compilation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst postcss = require('postcss');\nconst prefixer = require('postcss-prefixer');\n\n// arco.env.config.js\nmodule.exports = function () {\n  return {\n    less: {\n      // 通过此字段，扩展编译流程\n      compile: async (file, defaultCompileFn) => {\n        // 通过覆盖 getContents 函数，在 less 文件编译前为其添加内容\n        const compiledLess = await defaultCompileFn({\n          ...file,\n          getContents: () => `/** contents prepend to less file */\\n${file.getContents()}`,\n        });\n\n        // 处理编译过后的 less 文件，例如为其添加统一类名前缀\n        const result = await postcss([\n          prefixer({\n            prefix: 'custom-prefix-',\n            ignore: ['arco-'],\n          }),\n        ]).process(compiledLess, { from: undefined });\n        return result.css;\n      },\n    },\n    sass: {\n      // 同 less 配置\n      compile: async () => {},\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing VChart Packages with npm\nDESCRIPTION: This snippet demonstrates the commands to install VChart and the corresponding Arco theme using npm. Ensure that npm is installed on your machine before executing these commands.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install VChart\n$ npm install @visactor/react-vchart\n# install @visactor/vchart-arco-theme\n$ npm install @visactor/vchart-arco-theme\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Trigger Mode with Arco Design in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a dropdown menu in a React application using Arco Design components. It includes two dropdowns with different trigger modes: hover and click. Dependencies include the Arco Design React library and its icon set.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Dropdown, Menu, Button, Space } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst dropList = (\n  <Menu>\n    <Menu.Item key=\"1\">Beijing</Menu.Item>\n    <Menu.Item key=\"2\">Shanghai</Menu.Item>\n    <Menu.Item key=\"3\">Guangzhou</Menu.Item>\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <Space size=\"large\" className=\"dropdown-demo\">\n      <Dropdown droplist={dropList} position=\"br\">\n        <Button type=\"text\">\n          Hover\n          <IconDown />\n        </Button>\n      </Dropdown>\n      <Dropdown droplist={dropList} trigger=\"click\" position=\"br\">\n        <Button type=\"text\">\n          Click\n          <IconDown />\n        </Button>\n      </Dropdown>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for On-Demand Style Loading with Arco Design Theme\nDESCRIPTION: This JavaScript snippet configures Webpack to use the Arco Design plugin for on-demand style loading with a custom theme. It specifies the theme package name in the plugin options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-theme-package.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ArcoWebpackPlugin = require('@arco-plugins/webpack-react');\n\n// webpack config\n{\n  plugins: [\n    new ArcoWebpackPlugin({\n        theme: '@arco-themes/theme-line'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card with Actions in React using Arco Design\nDESCRIPTION: This snippet shows how to create a Card component with a cover image, meta information, and action buttons using Arco Design components in React. It utilizes the 'actions' prop to add interactive icons at the bottom of the card.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/with-actions.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Avatar, Typography, Space } from '@arco-design/web-react';\nimport { IconThumbUp, IconShareInternal, IconMore } from '@arco-design/web-react/icon';\nconst { Meta } = Card;\n\nconst App = () => {\n  return (\n    <Card\n      className=\"card-with-icon-hover\"\n      style={{ width: 360 }}\n      cover={\n        <div style={{ height: 204, overflow: 'hidden' }}>\n          <img\n            style={{ width: '100%', transform: 'translateY(-20px)' }}\n            alt=\"dessert\"\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a20012a2d4d5b9db43dfc6a01fe508c0.png~tplv-uwbnlip3yd-webp.webp\"\n          />\n        </div>\n      }\n      actions={[\n        <span className=\"icon-hover\">\n          <IconThumbUp />\n        </span>,\n        <span className=\"icon-hover\">\n          <IconShareInternal />\n        </span>,\n        <span className=\"icon-hover\">\n          <IconMore />\n        </span>,\n      ]}\n    >\n      <Meta\n        avatar={\n          <Space>\n            <Avatar size={24}>A</Avatar>\n            <Typography.Text>Username</Typography.Text>\n          </Space>\n        }\n        title=\"Card Title\"\n        description=\"This is the description\"\n      />\n    </Card>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Bottom Positioning with Arco Design Affix\nDESCRIPTION: Creates a fixed-position button element using Arco Design's Affix component. The button is configured to remain fixed at 120 pixels from the bottom of the viewport when scrolling. Uses the offsetBottom prop to control the distance from bottom.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/__demo__/bottom.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Affix, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Affix offsetBottom={120}>\n      <Button type=\"primary\">120px to affix bottom</Button>\n    </Affix>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Size State Management React Hook\nDESCRIPTION: Uses useState hook to manage form size state, enabling dynamic size switching between mini, small, default, and large sizes\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/size.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [size, setSize] = useState('default');\n```\n\n----------------------------------------\n\nTITLE: Configuring 12-Hour TimePicker in Arco Design\nDESCRIPTION: Demonstrates multiple TimePicker implementations with 12-hour format using different time formats and default values\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/use-12-hours.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\nconst style = {\n  width: 194,\n  margin: '0 24px 24px 0',\n};\n\nconst App = () => {\n  return (\n    <div>\n      <TimePicker\n        use12Hours\n        format=\"hh:mm:ss A\"\n        defaultValue={dayjs('12:20:20 AM', 'hh:mm:ss A')}\n        placeholder=\"请选择时间\"\n        style={style}\n      />\n      <TimePicker\n        use12Hours\n        format=\"hh:mm:ss a\"\n        defaultValue={dayjs('09:20:20 pm', 'hh:mm:ss a')}\n        placeholder=\"请选择时间\"\n        style={style}\n      />\n      <TimePicker\n        use12Hours\n        format=\"h:mm A\"\n        defaultValue={dayjs('2:20 AM', 'h:mm A')}\n        placeholder=\"请选择时间\"\n        style={style}\n      />\n      <TimePicker.RangePicker\n        use12Hours\n        format=\"hh:mm:ss A\"\n        defaultValue={[dayjs('12:20:20 AM', 'hh:mm:ss A'), dayjs('08:30:30 PM', 'hh:mm:ss A')]}\n        style={{ ...style, width: 300 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Upload Component with Arco Design in React\nDESCRIPTION: Demonstrates two implementations of the Upload component - a basic version and a disabled version with custom styling. The component uses the root path (/) as the upload action endpoint.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <Upload action=\"/\" />\n      </div>\n      <div>\n        <Upload\n          action=\"/\"\n          disabled\n          style={{ marginTop: 40, }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Component with Smiley Grading\nDESCRIPTION: Demonstrates how to render a Rate component with smiley face icons using the grading property. This example shows the basic setup for displaying an interactive rating component that uses emoticon faces instead of standard stars.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/grading.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Rate grading />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Trigger with Arrow in React (Arco Design)\nDESCRIPTION: This code snippet demonstrates how to use the `Trigger` component from Arco Design to display an arrow element when the trigger is activated. The `showArrow` property enables the arrow, and the `trigger` and `position` props configure the trigger event and positioning. The popup content is a simple `Skeleton` component within a styled div.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/arrow.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trigger, Button, Input, Skeleton,Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <div style={{ background: 'var(--color-fill-2)', padding: 40 }}>\n      <Space size={40}>\n        <Trigger\n          showArrow\n          trigger=\"click\"\n          position=\"bl\"\n          popup={() => (\n            <div className=\"demo-trigger-popup\" style={{ width: 300 }}>\n              <Skeleton />\n            </div>\n          )}\n        >\n          <Button type=\"primary\">\n            Click Me\n          </Button>\n        </Trigger>\n        <Trigger\n          showArrow\n          arrowProps={{\n            style: {\n              background: 'red',\n            },\n          }}\n          trigger=\"click\"\n          position=\"bl\"\n          popup={() => (\n            <div className=\"demo-trigger-popup\">\n              <Skeleton />\n            </div>\n          )}\n        >\n          <Button type=\"primary\">Click Me（arrowProps）</Button>\n        </Trigger>\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing BackTop Component with Customizable Easing Effects and Duration in React\nDESCRIPTION: This code demonstrates how to implement a BackTop component with customizable easing effects and scroll duration. It uses React hooks to manage state for the easing type and duration, allowing users to select from multiple easing options and set a custom duration for the scroll animation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/BackTop/__demo__/easing.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { BackTop, Button, Select, Input, Typography, Space } from '@arco-design/web-react';\nimport { IconCaretUp } from '@arco-design/web-react/icon';\nconst { Paragraph, Text } = Typography;\nconst easingTypes = [\n  'linear',\n  'quadIn',\n  'quadOut',\n  'quadInOut',\n  'cubicIn',\n  'cubicOut',\n  'cubicInOut',\n  'quartIn',\n  'quartOut',\n  'quartInOut',\n  'quintIn',\n  'quintOut',\n  'quintInOut',\n  'sineIn',\n  'sineOut',\n  'sineInOut',\n  'bounceIn',\n  'bounceOut',\n  'bounceInOut',\n];\n\nfunction App() {\n  const [easing, setEasing] = useState('linear');\n  const [duration, setDuration] = useState(200);\n  return (\n    <div>\n      <Space size={10} style={{ margin: 12 }}>\n        <Text>\n          Easing\n        </Text>\n        <Select\n          onChange={setEasing}\n          defaultValue={easing}\n          style={{ width: 200 }}\n        >\n          {easingTypes.map((easing) => (\n            <Select.Option key={easing} value={easing}>\n              {easing}\n            </Select.Option>\n          ))}\n        </Select>\n        <Text>\n          Time\n        </Text>\n        <Input\n          onChange={setDuration}\n          style={{ width: 200 }}\n          value={duration}\n          placeholder=\"Please enter the easing time\"\n        />\n      </Space>\n      <div\n        style={{ position: 'relative' }}\n      >\n        <BackTop\n          easing={easing}\n          duration={duration}\n          style={{\n            position: 'absolute',\n            right: 60,\n            bottom: 60,\n          }}\n          visibleHeight={30}\n          target={() => document.getElementById('custom_backtop2')}\n        >\n          <div className=\"custom-backtop\" tabIndex={0} role=\"button\" aria-label=\"scroll to top\">\n            <IconCaretUp />\n            <br />\n            TOP\n          </div>\n        </BackTop>\n        <div\n          id=\"custom_backtop2\"\n          style={{\n            height: 300,\n            overflow: 'auto',\n            padding: '8px 12px',\n          }}\n        >\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n          <Paragraph>This is the content</Paragraph>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Upload Component\nDESCRIPTION: Defines the CSS styles for the custom upload trigger area, including background color, border, dimensions, and text alignment using CSS variables for theming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/trigger.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.upload-demo-trigger .trigger {\n  background-color: var(--color-fill-2);\n  color: var(--color-text-1);\n  border: 1px dashed var(--color-fill-4);\n  height: 158px;\n  width: 380px;\n  border-radius: 2;\n  line-height: 158px;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting MDX documentation with ArcoMDXPreviewSplit\nDESCRIPTION: This Markdown code shows how to split a MDX documentation page into multiple panes using the `ArcoMDXPreviewSplit` component. It imports different MDX files for each pane's content and specifies where the API documentation should be rendered using `apiPlaceholderElementId`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n// index.mdx\n---\ntitle: List\ndescription: Some description about this component.\nlabels: ['Keyword-1', 'Keyword-2']\napiPlaceholderElementId: api-placeholder\n---\n\nimport PartOne from './part1.mdx';\nimport PartTwo from './part2.mdx';\n\n<ArcoMDXPreviewSplit panes={\n  [\n    { title: 'Part One', content: <PartOne /> },\n    { title: 'Part Two', content: <PartTwo /> },\n    { title: 'API', content: <div id=\"api-placeholder\" /> }\n  ]\n} />\n```\n\n----------------------------------------\n\nTITLE: Radio Component API Table Structure\nDESCRIPTION: Markdown table defining the properties, types, and default values for the Radio component. Includes properties like checked, defaultChecked, disabled, className, style, value, and onChange.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|checked|Whether the radio is checked (Controlled)|boolean |`-`|\n|defaultChecked|Whether the radio is initially selected|boolean |`-`|\n|disabled|Whether the radio is disabled|boolean |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|value|The value of radio|T |`-`|\n|onChange|Callback when radio status change|(checked: boolean, event: ChangeEvent) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Data with setupMock in JavaScript\nDESCRIPTION: This snippet shows how to use the setupMock function to configure mock data for a user info API. It demonstrates how to disable mocking for debugging purposes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mock from'mockjs';\nimport setupMock from'../utils/setupMock';\n\nsetupMock({\n  mock: false\n  setup() {\n    // User Info\n    Mock.mock(new RegExp('/api/userInfo'), () => {\n      return {\n        name:'name',\n      };\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Mentions Component in React\nDESCRIPTION: This snippet demonstrates how to implement a basic Mentions component from the Arco Design library. It shows how to initialize the component with a default value '@Bytedance' and provide a list of options for mention suggestions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Mentions/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Mentions } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Mentions\n      style={{ width: 154 }}\n      defaultValue=\"@Bytedance\"\n      options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeline Component with Alternate and Right Display Modes in React\nDESCRIPTION: This code demonstrates how to use the Timeline component from Arco Design with different display modes. It creates a reusable Demo component to display Timeline items and then renders two instances with 'alternate' and 'right' modes in a Grid layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/mode.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Timeline, Grid } from '@arco-design/web-react';\nconst TimelineItem = Timeline.Item;\n\nfunction Demo({ mode }) {\n  return (\n    <Timeline mode={mode} style={{ flex: 1 }}>\n      <TimelineItem label=\"2017-03-10\">The first milestone</TimelineItem>\n      <TimelineItem label=\"2018-05-12\">The second milestone</TimelineItem>\n      <TimelineItem label=\"2020-09-30\">\n        The third milestone\n      </TimelineItem>\n    </Timeline>\n  );\n}\n\nconst App = () => {\n  return (\n    <Grid.Row justify=\"space-between\">\n      <Demo mode=\"alternate\" />\n      <Demo mode=\"right\" />\n    </Grid.Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Result Component with Action Buttons in React\nDESCRIPTION: This code snippet demonstrates how to use the Result component from Arco Design to display an error message with 'Again' and 'Back' action buttons. It imports necessary components, sets up the error status, and provides custom title and subtitle text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/error.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"error\"\n        title=\"Error message\"\n        subTitle=\"Something went wrong. Please try again. \"\n        extra={[\n          <Button key=\"again\" style={{ margin: '0 16px' }}>\n            Again\n          </Button>,\n          <Button key=\"back\" type=\"primary\">\n            Back\n          </Button>,\n        ]}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Floating Button Menu Components with CSS\nDESCRIPTION: This CSS defines the styling for the floating button menu example. It provides styles for the menu demo container, button triggers, and their active states. The styles include positioning, dimensions, colors, and transitions for the circular button triggers in two different color schemes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/button.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n\n.menu-demo-button {\n  position: relative;\n  width: 660px;\n  height: 300px;\n  background-color: var(--color-fill-2);\n}\n\n.button-trigger {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  bottom: 80px;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  font-size: 14px;\n  color: var(--color-white);\n  cursor: pointer;\n  transition: all 0.1s;\n}\n\n.button-trigger:nth-child(1) {\n  left: 150px;\n  background-color: var(--color-neutral-5);\n}\n\n.button-trigger:nth-child(1).button-trigger-active {\n  background-color: var(--color-neutral-4);\n}\n\n.button-trigger:nth-child(2) {\n  left: 372px;\n  background-color: rgb(var(--arcoblue-6));\n}\n\n.button-trigger:nth-child(2).button-trigger-active {\n  background-color: var(--color-primary-light-4);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Cards in Arco Design with React\nDESCRIPTION: Creates a parent card containing two inner cards, each with a title and 'More' link. The inner cards demonstrate the nesting capability of the Card component with consistent styling and extra content options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/inner-card.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Card, Link } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Card title=\"Arco Card\">\n      <Card\n        style={{ marginBottom: 20 }}\n        title=\"Inner Card Title\"\n        extra={<Link>More</Link>}\n      >\n        Inner Card Content\n      </Card>\n      <Card title=\"Inner Card Title\" extra={<Link>More</Link>}>\n        Inner Card Content\n      </Card>\n    </Card>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Manually Closing Arco Design Message Component in React\nDESCRIPTION: This snippet demonstrates how to manually control the closing of a Message notification in Arco Design. It creates a message with infinite duration and stores the returned close function, which is then called after a 2-second timeout to dismiss the message.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/hide.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message, Button } from '@arco-design/web-react';\n\nfunction updateMessage() {\n  const close = Message.info({\n    content: 'Close after 2 seconds...',\n    duration: 0,\n  });\n  setTimeout(() => {\n    close();\n  }, 2000);\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateMessage} type=\"primary\">\n      Close after 2 seconds\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Space with Arco Design in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Space component from the '@arco-design/web-react' library to arrange Button components in a vertical layout. The snippet requires '@arco-design/web-react' as a dependency. The Space component is configured to arrange items vertically using the 'direction' property. Each Button is set to a 'primary' type, and the expected output is a series of vertically stacked buttons. The snippet assumes familiarity with React for rendering components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Space/__demo__/vertical.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Space, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space direction=\"vertical\">\n      <Button type=\"primary\">Item1</Button>\n      <Button type=\"primary\">Item2</Button>\n      <Button type=\"primary\">Item3</Button>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Precision in Arco Design React InputNumber\nDESCRIPTION: This code snippet illustrates the usage of the InputNumber component from Arco Design in a React application. It demonstrates how to specify precision, which adjusts the decimal precision of the input based on 'step' and 'precision' properties. No additional dependencies are required apart from 'arco-design/web-react'. By default, the component displays input numbers with specified precision unless adjusted by 'step'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/precision.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputNumber } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <InputNumber\n        min={0}\n        max={40}\n        defaultValue={3.5}\n        step={0.1}\n        precision={1}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n      <InputNumber\n        min={0}\n        max={40}\n        defaultValue={1.11}\n        step={0.01}\n        precision={1}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic DatePicker in React with Arco Design\nDESCRIPTION: This snippet demonstrates how to import and use the DatePicker component from Arco Design in a React application. The DatePicker is rendered with a specified width of 200 pixels.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <DatePicker style={{ width: 200 }}/>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Arco Design Grid Responsive Example\nDESCRIPTION: This code snippet demonstrates how to use the `xs` and `lg` properties of the Arco Design `Col` component to create a responsive grid layout. The `span` and `offset` properties are used within the `xs` and `lg` objects to define the column widths and offsets for different screen sizes.  It imports `Grid` from `@arco-design/web-react`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/adaptation_object.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Row className=\"grid-demo\">\n        <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n          Col\n        </Col>\n        <Col xs={{ span: 11, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n          Col\n        </Col>\n        <Col xs={{ span: 5, offset: 1 }} lg={{ span: 6, offset: 2 }}>\n          Col\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Trigger Component with updateOnScroll in React\nDESCRIPTION: This code snippet demonstrates the usage of the Arco Design `Trigger` component with the `updateOnScroll` property enabled. It creates a button that, when clicked, displays a popup skeleton. The `updateOnScroll` property ensures that the popup's position is updated when the containing div scrolls. It uses `Trigger`, `Button`, `Input`, and `Skeleton` components from `@arco-design/web-react`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/updateAtScroll.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Trigger, Button, Input, Skeleton } from '@arco-design/web-react';\n\nfunction Popup() {\n  return <Skeleton className=\"demo-trigger-popup\" style={{ width: 300 }} />;\n}\n\nfunction App() {\n  return (\n    <div\n      style={{\n        background: 'var(--color-fill-2)',\n        padding: 40,\n        height: 100,\n        overflow: 'auto',\n      }}\n    >\n      <div style={{ height: 200 }}>\n        <Trigger trigger=\"click\" position=\"bottom\" popup={() => <Popup />} updateOnScroll>\n          <Button type=\"primary\" style={{ marginTop: 80 }}>\n            Button\n          </Button>\n        </Trigger>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Component Changelogs in Arco Workspace JSON\nDESCRIPTION: This snippet shows how to configure individual changelog files for each component. It sets up extra documentation entries for components, allowing separate version logs for each material.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/team.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.service/workspace\": {\n\"components\": {\n\"extends\": {\n// Declare the default version log document for the workspace component\n\"entries\": {\n\"extraDocs\": [\n{\n\"title\": \"Changelog\",\n\"entry\": \"./__docs__/changelog.md\"\n}\n]\n}\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Common npm Scripts for Arco Design Development\nDESCRIPTION: This snippet shows commonly used npm scripts for developing with Arco Design, including commands for starting the site locally, linting code, generating documentation, building components, and running tests.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# start and preview site locally\n$ yarn dev:site\n\n# checks the javascript code style.\n$ yarn eslint\n\n# checks the css code style\n$ yarn stylelint\n\n# automatically generate docs\n$ yarn docgen\n\n# format code with prettier\n$ yarn format\n\n# create a build of the components\n$ yarn build\n\n# run the complete test suite\n$ yarn test\n\n# start Storybook (no hot reload. To reflect changes, do `yarn build` first)\n$ yarn demo\n```\n\n----------------------------------------\n\nTITLE: Commands for Building and Previewing Materials\nDESCRIPTION: This section contains a series of bash commands necessary for building materials, generating documentation, and previewing the material locally to ensure it displays correctly on the material platform.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Build and generate documentation\nyarn prepublishOnly\n\n# If material information has not been generated, generate material information\nyarn generate\n\n# Preview material\narco preview\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom BackTop Button with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to create a custom 'Back to Top' button using Arco Design components. It utilizes BackTop, Button, and Typography components to create a scrollable content area with a customized 'UP' button that appears when scrolling down.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/BackTop/__demo__/custom_button.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BackTop, Button, Typography } from '@arco-design/web-react';\nconst { Paragraph } = Typography;\n\nconst App = () => {\n  return (\n    <div style={{ position: 'relative', padding: '8px 12px' }}>\n      <BackTop\n        style={{ position: 'absolute' }}\n        visibleHeight={30}\n        target={() => document.getElementById('custom_backtop')}\n      >\n        <Button\n          type=\"primary\"\n          iconOnly\n          style={{ width: 40, height: 40 }}\n        >\n          UP\n        </Button>\n      </BackTop>\n      <div\n        id=\"custom_backtop\"\n        style={{ height: 300, overflow: 'auto' }}\n      >\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n        <Paragraph>This is the content</Paragraph>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Theme Navigation with Arco Design - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the implementation of a horizontal navigation menu using the Arco Design library in a React application. It utilizes the `theme` attribute to set the menu's theme to 'dark'. The dependencies include the `@arco-design/web-react` library. The functionality centers around rendering a menu with various items like 'Home', 'Solution', 'Cloud Service', and 'Cooperation'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/dark-horizontal.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Menu } from '@arco-design/web-react';\nconst MenuItem = Menu.Item;\nconst SubMenu = Menu.SubMenu;\n\nfunction App() {\n  return (\n    <div className=\"menu-demo\">\n      <Menu mode=\"horizontal\" theme=\"dark\" defaultSelectedKeys={['1']}>\n        <MenuItem key=\"0\" style={{ padding: 0, marginRight: 38 }} disabled>\n          <div\n            style={{\n              width: 80,\n              height: 30,\n              background: 'var(--color-fill-3)',\n              cursor: 'text',\n            }}\n          />\n        </MenuItem>\n        <MenuItem key=\"1\">Home</MenuItem>\n        <MenuItem key=\"2\">Solution</MenuItem>\n        <MenuItem key=\"3\">Cloud Service</MenuItem>\n        <MenuItem key=\"4\">Cooperation</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Sortable Item Component\nDESCRIPTION: This component wraps each table row (tr) to make it a sortable item using `SortableElement` from `react-sortable-hoc`. It receives props and renders a `tr` element with those props.  The `index` prop is important for `react-sortable-hoc` to track the item's position.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst SortableItem = SortableElement((props) => {\n  return <tr {...props} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Alert Close Element in React with Arco Design\nDESCRIPTION: This snippet demonstrates how to use the 'closeElement' prop in Arco Design's Alert component to customize the close element. It shows two examples: one using an icon and another using text as the close element.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/closeElement.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Alert, Grid } from '@arco-design/web-react';\nimport { IconCheck } from '@arco-design/web-react/icon';\nconst { Row, Col } = Grid;\n\nconst App = () => {\n  return (\n    <Row gutter={40}>\n      <Col span={12}>\n        <Alert\n          closable\n          style={{ marginBottom: 20 }}\n          type=\"success\"\n          content=\"Here is a success text\"\n          closeElement={<IconCheck />}\n        />\n      </Col>\n      <Col span={12}>\n        <Alert\n          closable\n          style={{ marginBottom: 20 }}\n          type=\"success\"\n          content=\"Here is a success text\"\n          closeElement=\"Close\"\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Affix with Fixed State Change Callback in React\nDESCRIPTION: This code demonstrates the usage of the Affix component from @arco-design/web-react. It sets up an Affix with a bottom offset of 80px and includes a callback function that displays a Message when the fixed state changes. The Affix wraps a Button component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/__demo__/fixChange.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Affix, Button, Message } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Affix\n      offsetBottom={80}\n      onChange={(fixed) => {\n        Message.info({\n          content: `${fixed}`,\n          showIcon: true,\n        });\n      }}\n    >\n      <Button type=\"primary\">80px to affix bottom</Button>\n    </Affix>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination in ArcoDesign React\nDESCRIPTION: Basic implementation of the Pagination component from @arco-design/web-react. Creates a simple pagination control with a total of 200 items using default configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Pagination total={200} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Popover Trigger Methods in React\nDESCRIPTION: This snippet demonstrates how to create Popover components with different trigger methods (hover, click, and focus) using Arco Design's React library. It utilizes the Space component for layout and Button components as triggers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/__demo__/trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Popover, Button, Space } from '@arco-design/web-react';\nconst style = {\n  margin: 0,\n};\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Popover\n        trigger=\"hover\"\n        title=\"Title\"\n        content={\n          <span>\n            <p style={style}>Here is the text content</p>\n            <p style={style}>Here is the text content</p>\n          </span>\n        }\n      >\n        <Button>Hover</Button>\n      </Popover>\n      <Popover\n        trigger=\"click\"\n        title=\"Title\"\n        content={\n          <span>\n            <p style={style}>Here is the text content</p>\n            <p style={style}>Here is the text content</p>\n          </span>\n        }\n      >\n        <Button>Click</Button>\n      </Popover>\n      <Popover\n        trigger=\"focus\"\n        title=\"Title\"\n        content={\n          <span>\n            <p style={style}>Here is the text content</p>\n            <p style={style}>Here is the text content</p>\n          </span>\n        }\n      >\n        <Button>Focus</Button>\n      </Popover>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeline Label Position in Arco Design React\nDESCRIPTION: This example demonstrates how to configure the label position in a Timeline component using 'labelPosition' property. The demo allows switching between 'same' and 'relative' label positions, as well as 'left', 'right', and 'alternate' timeline modes through interactive radio buttons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/labelPosition.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Timeline, Grid, Radio, Typography } from '@arco-design/web-react';\n\nconst TimelineItem = Timeline.Item;\nconst { Row, Col } = Grid;\n\nfunction App() {\n  const [mode, setMode] = React.useState('left');\n  const [pos, setLabelPos] = React.useState('same');\n  return (\n    <div>\n      <Row align=\"center\">\n        <Typography.Text>labelPosition: &nbsp; &nbsp;</Typography.Text>\n        <Radio.Group\n          value={pos}\n          onChange={setLabelPos}\n          options={[\n            {\n              label: 'same',\n              value: 'same',\n            },\n            {\n              label: 'relative',\n              value: 'relative',\n            },\n          ]}\n        />\n      </Row>\n      <Row align=\"center\" style={{ margin: '20px 0 24px' }}>\n        <Typography.Text>mode: &nbsp; &nbsp;</Typography.Text>\n        <Radio.Group\n          value={mode}\n          onChange={setMode}\n          options={[\n            {\n              label: 'left',\n              value: 'left',\n            },\n            {\n              label: 'right',\n              value: 'right',\n            },\n            {\n              label: 'alternate',\n              value: 'alternate',\n            },\n          ]}\n        />\n      </Row>\n      <Timeline mode={mode} labelPosition={pos}>\n        <TimelineItem label=\"2017-03-10\" dotColor=\"#52C419\">\n          The first milestone\n        </TimelineItem>\n        <TimelineItem label=\"2018-05-12\" dotColor=\"#F5222D\" labelPosition=\"same\">\n          The second milestone\n        </TimelineItem>\n        <TimelineItem label=\"2020-09-30\">\n          The third milestone\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Markdown API Documentation for Popover Component\nDESCRIPTION: API documentation table defining the properties, types, default values and version information for the Popover component. Includes configuration options for visibility, positioning, triggers, and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|Version|\n|---|---|---|---|---|\n|blurToHide|Whether close the popup when the target element losing focus|boolean |`true`|-|\n|defaultPopupVisible|Whether the popup is visible by default|boolean |`-`|-|\n|disabled|Whether to disabled|boolean |`-`|2.11.0|\n|popupHoverStay|Whether the popup is visible when the mouse hovers over the popup|boolean |`true`|-|\n|popupVisible|Whether the popup is visible|boolean |`-`|-|\n|unmountOnExit|Whether to destroy the popup when hidden|boolean |`true`|-|\n|childrenPrefix|Set an additional class name(`${childrenPrefix}-open`) for the container of the popup.|string |`-`|-|\n|color|background color of the popup-layer|string |`-`|2.22.0|\n|position|The position of the popup relative to the target.|\\| 'top'\\| 'tl'\\| 'tr'\\| 'bottom'\\| 'bl'\\| 'br'\\| 'left'\\| 'lt'\\| 'lb'\\| 'right'\\| 'rt'\\| 'rb' |`top`|-|\n|trigger|Trigger mode|[TriggerProps](trigger#trigger)['trigger'] |`hover`|-|\n|content|The content shown in popup|ReactNode |`-`|-|\n|className|Additional css class|string \\| string[] |`-`|-|\n|style|Additional style|CSSProperties |`-`|-|\n|triggerProps|The Props of the `Trigger` component|Partial&lt;[TriggerProps](trigger#trigger)&gt; |`-`|-|\n|getPopupContainer|The parent node which the popup will be rendered to.|(node: HTMLElement) => Element |`-`|-|\n|onVisibleChange|Callback when the visibility of the popup is changed|(visible: boolean) => void |`-`|-|\n|title|Title of the popup card. Function types are supported in `2.48.0`|ReactNode \\| (() => ReactNode) |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Implementing Aligned Comment Component with React\nDESCRIPTION: React component implementation demonstrating a Comment component with right-aligned actions. Features interactive like and star buttons with state management, custom avatar, and formatted content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/align.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Comment, Avatar } from '@arco-design/web-react';\nimport {\n  IconHeartFill,\n  IconMessage,\n  IconStarFill,\n  IconHeart,\n  IconStar,\n} from '@arco-design/web-react/icon';\n\nconst App = () => {\n  const [like, setLike] = React.useState(true);\n  const [star, setStar] = React.useState(true);\n  const actions = [\n    <button className=\"custom-comment-action\" key=\"heart\" onClick={() => setLike(!like)}>\n      {like ? (\n        <IconHeartFill style={{ color: '#f53f3f' }}/>\n      ) : (\n        <IconHeart />\n      )}\n      {83 + (like ? 1 : 0)}\n    </button>,\n    <button className=\"custom-comment-action\" key=\"star\" onClick={() => setStar(!star)}>\n      {star ? (\n        <IconStarFill style={{ color: '#ffb400' }}/>\n      ) : (\n        <IconStar />\n      )}\n      {3 + (star ? 1 : 0)}\n    </button>,\n    <button className=\"custom-comment-action\" key=\"reply\">\n      <IconMessage /> Reply\n    </button>,\n  ];\n  return (\n    <Comment\n      actions={actions}\n      align=\"right\"\n      author=\"Balzac\"\n      avatar={\n        <Avatar>\n          <img\n            alt=\"avatar\"\n            src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/9eeb1800d9b78349b24682c3518ac4a3.png~tplv-uwbnlip3yd-webp.webp\"\n          />\n        </Avatar>\n      }\n      content={\n        <div>\n          A design is a plan or specification for the construction of an object or system or for the\n          implementation of an activity or process, or the result of that plan or specification in\n          the form of a prototype, product or process.\n        </div>\n      }\n      datetime=\"1 hour\"\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Workspace\nDESCRIPTION: This bash script shows how to initialize a React component workspace.  It uses the `npx` command to execute the `@arco-cli/generator` package, creating a new workspace with the specified name.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @arco-cli/generator new workspace-name\n```\n\n----------------------------------------\n\nTITLE: Creating Grid-based Cards with Arco Design\nDESCRIPTION: Implements a responsive grid layout using Card.Grid component, creating multiple cards with alternating hoverable states. Each grid item contains a nested card with a title, extra link, and dynamic content based on hover state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/card-grid.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Card, Link } from '@arco-design/web-react';\nconst { Grid } = Card;\n\nconst App = () => {\n  return (\n    <Card bordered={false} style={{ width: '100%' }}>\n      {new Array(7).fill(null).map((_, index) => {\n        const hoverable = index % 2 === 0;\n        return (\n          <Grid\n            key={index}\n            hoverable={hoverable}\n            style={{\n              width: '25%',\n            }}\n          >\n            <Card\n              className=\"card-demo-in-grid\"\n              style={{ width: '100%' }}\n              title=\"Arco Card\"\n              extra={<Link>More</Link>}\n              bordered={false}\n            >\n              {new Array(2).fill(null).map((_, index) => (\n                <p style={{ margin: 0 }} key={index}>\n                  {hoverable ? 'Card allow to hover' : 'Card content'}\n                </p>\n              ))}\n            </Card>\n          </Grid>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Exporting TypeScript Interfaces in React Components\nDESCRIPTION: Demonstrates the recommended approach for exporting TypeScript interfaces for React components. Maintain interfaces in a separate file and export them from the main component file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad Case\n// index.tsx\nexport interface ButtonProps {\n  // ...\n}\n\nexport default function Button() {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Good Case\n// interface.ts\nexport interface ButtonProps {\n  // ...\n}\n\n// index.tsx\nimport type { ButtonProps } from './interface.ts';\n\nexport default function Button() {}\n\nexport type { ButtonProps };\n```\n\n----------------------------------------\n\nTITLE: Adjusting List Size with Arco Design and React\nDESCRIPTION: This JavaScript snippet creates a React component that uses the Arco Design library to display a list with three different size options, namely 'small', 'default', and 'large'. It utilizes React state to manage the selected size and updates the list component accordingly. Dependencies include React and the Arco Design components (List, Radio). The primary input is the user's selection of size via radio buttons, and the output is a list rendered at the chosen size.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { List, Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <>\n      <RadioGroup\n        type=\"button\"\n        name=\"size\"\n        value={size}\n        onChange={(value) => setSize(value)}\n        style={{ marginBottom: 20, borderRadius: 4 }}\n      >\n        <Radio value=\"small\">small</Radio>\n        <Radio value=\"default\">default</Radio>\n        <Radio value=\"large\">large</Radio>\n      </RadioGroup>\n      <List\n        style={{ width: 622 }}\n        size={size}\n        header=\"List title\"\n        dataSource=[\n          'Beijing Bytedance Technology Co., Ltd.',\n          'Bytedance Technology Co., Ltd.',\n          'Beijing Toutiao Technology Co., Ltd.',\n          'Beijing Volcengine Technology Co., Ltd.',\n          'China Beijing Bytedance Technology Co., Ltd.',\n        ]\n        render={(item, index) => <List.Item key={index}>{item}</List.Item>}\n      />\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icon in Arco Design Result Component\nDESCRIPTION: Shows how to integrate a custom smile icon into the Result component using IconFaceSmileFill from Arco Design's icon package. The example includes styling the icon with a custom color and adding a primary button as extra content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\nimport { IconFaceSmileFill } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status={null}\n        icon={<IconFaceSmileFill style={{ color: 'rgb(var(--arcoblue-6))' }} />}\n        title=\"Your operation has been performed.\"\n        extra={<Button type=\"primary\">Back</Button>}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling the Table Transfer Component in CSS\nDESCRIPTION: This CSS code provides styling for the TableTransfer component. It removes default borders from the table container and customizes the background color of table headers to match the Arco Design system themes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/with-table.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.transfer-demo-with-table .arco-table-container {\n  border: none !important;\n  border-radius: 0 !important;\n}\n\n.transfer-demo-with-table .arco-table-th {\n  background-color: var(--color-bg-2);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Jest Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the Jest configuration by specifying a custom Jest configuration file path in the 'arco.env.config.js' file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\n\nmodule.exports = function defineConfig() {\n  return {\n    jest: {\n      // 相对于项目根目录的路径\n      jestConfigPath: './jest.config.js',\n    }\n  };\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// jest.config.js\nconst defaultConfig = require(require.resolve('@arco-cli/react/dist/jest/jest.cjs.config.js'));\n\n// 建议在 React Env 默认 Jest 配置基础上进行拓展\nconst finalConfig = {\n  ...defaultConfig,\n  // ... extend config\n};\n\nmodule.exports = finalConfig;\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Banner Alerts with Arco Design in React\nDESCRIPTION: This code demonstrates how to configure and style Alert components as top banners in multiple variations, including different information types, with/without icons, closable functionality, and with/without titles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__demo__/banner.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Alert\n        banner\n        type=\"info\"\n        showIcon\n        content=\"General text\"\n        style={{ marginTop: 4, marginBottom: 20 }}\n      />\n      <Alert\n        banner\n        type=\"info\"\n        showIcon\n        closable\n        content=\"General text\"\n        style={{ marginBottom: 20 }}\n      />\n      <Alert\n        banner\n        type=\"info\"\n        showIcon\n        title=\"General text\"\n        content=\"Here is an example text\"\n        style={{ marginBottom: 20 }}\n      />\n      <Alert\n        banner\n        type=\"success\"\n        showIcon\n        title=\"Success text\"\n        style={{ marginBottom: 20 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Icon-based Tags in Arco Design\nDESCRIPTION: Demonstrates how to add icons to Tag components using predefined social media icons from Arco Design icon library. The snippet shows creating multiple Tags with different colors and icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag, Space } from '@arco-design/web-react';\nimport { IconGitlab, IconTwitter, IconGithub, IconFacebook } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Tag color=\"gray\" icon={<IconGithub />}>\n        Github\n      </Tag>\n      <Tag color=\"orangered\" icon={<IconGitlab />}>\n        Gitlab\n      </Tag>\n      <Tag color=\"blue\" icon={<IconTwitter />}>\n        Twitter\n      </Tag>\n      <Tag color=\"arcoblue\" icon={<IconFacebook />}>\n        Facebook\n      </Tag>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Component with Arco Design\nDESCRIPTION: This snippet demonstrates the basic usage of the Steps component from the Arco Design library. It imports the Steps and Divider components, then renders a Steps component with three steps (Succeeded, Processing, and Pending). The 'current' prop is set to 2, indicating the second step is currently active. A Divider and placeholder content are also included for visual separation and context.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps, Divider } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <div>\n      <Steps current={2} style={{ maxWidth: 780, margin: '0 auto' }}>\n        <Step title=\"Succeeded\" />\n        <Step title=\"Processing\" />\n        <Step title=\"Pending\" />\n      </Steps>\n      <Divider />\n      <div\n        style={{\n          lineHeight: '140px',\n          textAlign: 'center',\n          color: '#C9CDD4',\n        }}\n      >\n        Step 2 Content\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Component with Search Box - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the Transfer component from the @arco-design/web-react library with the search box feature enabled. By setting the 'showSearch' prop to true, users can filter options within the Transfer component. It includes a sample data source and customizes the search placeholder and title texts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/show-search.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const dataSource = new Array(8).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      showSearch\n      dataSource={dataSource}\n      searchPlaceholder=\"Please select\"\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Gradient Progress Bars in React\nDESCRIPTION: This code snippet demonstrates how to create linear and circular progress bars with gradient colors using the Progress component from @arco-design/web-react. It shows examples of setting custom colors, percentages, and animations for different types of progress bars.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__demo__/line-gradient.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Progress } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Progress\n        percent={80}\n        color={{\n          '0%': 'rgb(var(--primary-6))',\n          '100%': 'rgb(var(--success-6))',\n        }}\n        animation\n        width={300}\n      />\n      <br />\n      <Progress\n        percent={100}\n        color={{\n          '0%': 'rgb(var(--primary-6))',\n          '100%': 'rgb(var(--success-6))',\n        }}\n        animation\n        width={300}\n      />\n      <br />\n      <br />\n      <Progress\n        style={{\n          margin: \"0 20px\",\n        }}\n        type=\"circle\"\n        color={{\n          '0%': 'rgb(var(--primary-6))',\n          '100%': 'rgb(var(--success-6))',\n        }}\n        percent={80}\n      />\n      <Progress\n        type=\"circle\"\n        color={{\n          '0%': 'rgb(var(--primary-6))',\n          '100%': 'rgb(var(--success-6))',\n        }}\n        percent={100}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Generating a Tree Component from TreeData in Arco Design\nDESCRIPTION: This code demonstrates how to use the Tree component from Arco Design by directly passing treeData. It creates a hierarchical tree structure with nested nodes, configures selectable properties, and sets default selected keys.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/treeData.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tree } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\nconst TreeData = [\n  {\n    title: 'Trunk 0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Branch 0-0-2',\n        key: '0-0-2',\n        selectable: false,\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-0-2-1',\n            children: [\n              {\n                title: 'Leafsss 0-0-2',\n                key: '0-0-2-1-0',\n                children: [\n                  {\n                    title: 'Leaf',\n                    key: '0-0-2-1-0-0',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Trunk 0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Branch 0-1-1',\n        key: '0-1-1',\n        children: [\n          {\n            title: 'Leaf',\n            key: '0-1-1-0',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [treeData, setTreeData] = useState(TreeData);\n  return (\n    <div>\n      <Tree defaultSelectedKeys={['0-0-1']} treeData={treeData}></Tree>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Loading State Control with React and Arco Design\nDESCRIPTION: This React component demonstrates how to use the `loading` prop to control the loading state of an Arco Design Statistic component. The `useState` hook is used to manage the loading state, which is toggled by a Switch component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/loading.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Statistic, Switch, Typography } from '@arco-design/web-react';\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <Switch checked={loading} onChange={setLoading} />\n        <Typography.Text style={{ margin: '0 10px' }}>Loading</Typography.Text>\n      </div>\n      <Statistic title=\"Downloads\" value={125670} groupSeparator loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Fields in Arco Design Form\nDESCRIPTION: This code snippet demonstrates how to use the `setFields` method to set the value, error, and warning messages for a form field in Arco Design. It allows for fine-grained control over the form field's state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthis.form.setFields({\n  name: {\n    value: 'pjy',\n    error: {\n      message: 'Yes, I know!'\n    },\n    warning: 'warning...'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Time in React Using dayjs\nDESCRIPTION: This snippet illustrates how to import components from the @arco-design/web-react library and utilize dayjs to format and display the current created time. It uses 'Statistic' for presenting the time and formats it using the 'format' prop. Dependencies required include React and dayjs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/time.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Statistic, Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return <Statistic title=\"CreatedTime\" value={1554869813383} format=\"YYYY/MM/DD HH:mm:ss\" />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Reverse Slider Implementation with Arco Design and React\nDESCRIPTION: This snippet shows how to create a reverse slider using Arco Design's Slider component and React. It utilizes the `reverse` property to swap the start and end points of the slider, controlled by a Switch component. The slider also includes ticks, max value, default value and marks for better user experience.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/reversed.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, Switch, Typography, Space } from '@arco-design/web-react';\nimport { IconSound, IconMute } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [reverse, setReverse] = useState(true);\n  return (\n    <>\n      <Space style={{ marginBottom: 24 }} size={4}>\n        <Switch checked={reverse} onChange={setReverse} />\n        <Typography.Text>Reversed</Typography.Text>\n      </Space>\n      <div>\n        <Slider\n          reverse={reverse}\n          showTicks\n          max={15}\n          defaultValue={10}\n          marks={{\n            0: '0km',\n            5: '5km',\n            10: '10km',\n            15: '15km',\n          }}\n          style={{ width: 200 }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Specific Permission Control in React TSX\nDESCRIPTION: This snippet demonstrates how to apply permissions to specific objects within a list, using a more granular resource definition.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport PermissionWrapper from '@/components/permissionWrapper';\n\nreturn (\n  <div>\n    {data.map((item) => {\n      const { key, ...rest } = item;\n      return (\n        <PermissionWrapper\n          requiredPermissions={[\n            { resource: `list-card-${key}`, actions: ['write'] },\n          ]}\n        >\n          <Card {...rest} />\n        </PermissionWrapper>\n      );\n    })}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Arco Workspace with CLI Commands\nDESCRIPTION: Bash commands for initializing an Arco workspace using the @arco-cli/generator package, including options for standard and Monorepo workspaces.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/workspace.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n## Create a standard workspace, which is a single package and multiple components\nnpx @arco-cli/generator new your-workspace-name\n\n## Create a Monorepo workspace\nnpx @arco-cli/generator new your-workspace-name --templateArgs=\"--monorepo\"\n\n## Create a new subpackage for Monorepo\n## --template specifies the template\n## --path Specify the parent directory where the new package will be created\ncd your-workspace-name\nnpx arco create your-package-name --template=react-package --path=packages\n```\n\n----------------------------------------\n\nTITLE: Using Consistent Class Name Prefixes in React\nDESCRIPTION: Shows how to use consistent class name prefixes across multiple components in a material library. This helps reduce the chance of naming conflicts with user styles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Good Case\nconst prefixCls = 'p-matirial';\n\nfunction Button() {\n  return <button className={`${prefixCls}-button-circle`} />;\n}\n\nfunction List() {\n  return <ul className={`${prefixCls}-list-pro`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API for Divider Component in Markdown\nDESCRIPTION: This code snippet defines the API for the Divider component, including its parameters, types, and default values. It covers orientation, type, className, and style properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Divider\n\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|orientation|分割线文字的位置|'left' \\| 'right' \\| 'center' |`center`|\n|type|分割线的类型，是水平还是竖直，分别对应 `horizontal` 和 `vertical`|'horizontal' \\| 'vertical' |`horizontal`|\n|className|节点类名|string \\| string[] |`-`|\n|style|节点样式|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Clear Functionality in React\nDESCRIPTION: Creates a cascading selector component with hierarchical data structure allowing users to clear their selection. The component is initialized with default values and includes location-based nested options for Beijing and Shanghai.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/clear.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Cascader\n      placeholder=\"Please select ...\"\n      style={{ width: 300 }}\n      options={options}\n      onChange={(value, option) => {\n        console.log(value, option);\n      }}\n      defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n      allowClear\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumb Navigation with Arco Design in JavaScript\nDESCRIPTION: Demonstrates how to create a basic breadcrumb navigation component using Arco Design's Breadcrumb component. Shows the implementation of three linked items with home, channel, and news sections, where the channel item includes an href attribute for navigation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Breadcrumb } from '@arco-design/web-react';\nconst BreadcrumbItem = Breadcrumb.Item;\n\nconst App = () => {\n  return (\n    <div>\n      <Breadcrumb>\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem href=\"#\">\n          Channel\n        </BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Message Component Container in Arco Design\nDESCRIPTION: This CSS snippet adjusts the position of the message wrapper within the demo container, setting its left position to 0px to ensure proper alignment of the message notifications.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/useMessage.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-holder-wrapper .arco-message-wrapper {\n  left: 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Affix Component in React with Arco Design\nDESCRIPTION: This snippet demonstrates the basic usage of the Affix component from Arco Design. It wraps a Button component with Affix, which will make the button stick to the top of the page when it's scrolled out of view. No specific positioning is set, so it defaults to the top of the page.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Affix, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Affix>\n      <Button type=\"primary\">Affix Top</Button>\n    </Affix>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumb with Max Count in React using Arco Design\nDESCRIPTION: This snippet demonstrates how to use the Breadcrumb component from Arco Design with a maxCount property. It creates a breadcrumb navigation with 5 items, but only displays 3 due to the maxCount setting, with the rest represented by an ellipsis.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/__demo__/max-count.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Breadcrumb } from '@arco-design/web-react';\nconst BreadcrumbItem = Breadcrumb.Item;\n\nconst App = () => {\n  return (\n    <div>\n      <Breadcrumb maxCount=\"3\">\n        <BreadcrumbItem>Home</BreadcrumbItem>\n        <BreadcrumbItem>Sub Home</BreadcrumbItem>\n        <BreadcrumbItem>All Channel</BreadcrumbItem>\n        <BreadcrumbItem>Channel</BreadcrumbItem>\n        <BreadcrumbItem>News</BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Message Component Methods in React\nDESCRIPTION: Examples of different ways to call the Message component methods including info, success, warning, error, normal, loading, and clear.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nMessage.info(content: String) / Message.info(config: Object)\nMessage.success(content: String) / Message.success(config: Object)\nMessage.warning(content: String) / Message.warning(config: Object)\nMessage.error(content: String) / Message.error(config: Object)\nMessage.normal(content: String) / Message.normal(config: Object)\nMessage.loading(content: String) / Message.loading(config: Object)\nMessage.clear()\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Column Descriptions in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to create single column description lists using the Descriptions component from Arco Design. It shows two different styles: one with left-aligned labels and another with right-aligned labels. The component uses a predefined data array to populate the descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/single.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Descriptions\n        column={1}\n        title=\"User Info\"\n        data={data}\n        style={{ marginBottom: 20 }}\n        labelStyle={{ paddingRight: 36 }}\n      />\n      <Descriptions\n        column={1}\n        title=\"User Info\"\n        data={data}\n        labelStyle={{ textAlign: 'right', paddingRight: 36 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Text Alignment in Arco Design Descriptions Component\nDESCRIPTION: This code snippet demonstrates how to use the Descriptions component from Arco Design to display user information with different label text alignments. It shows both right-aligned horizontal layout and inline-vertical layout examples.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/align.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Descriptions\n        colon=\" :\"\n        title=\"User Info\"\n        data={data}\n        labelStyle={{ textAlign: 'right' }}\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions title=\"User Info\" data={data} layout=\"inline-vertical\" />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Colored Badges with Preset and Custom Colors in React\nDESCRIPTION: This code snippet demonstrates how to create badges with both preset and custom colors using the Arco Design library in React. It maps through arrays of preset and custom colors to render badges with different color options, showcasing the flexibility of the Badge component's color property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/color.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, Divider } from '@arco-design/web-react';\nconst COLORS = [\n  'red',\n  'orangered',\n  'orange',\n  'gold',\n  'lime',\n  'green',\n  'cyan',\n  'arcoblue',\n  'purple',\n  'pinkpurple',\n  'magenta',\n  'gray',\n];\nconst COLORS_CUSTOM = [\n  '#F53F3F',\n  '#7816FF',\n  '#00B42A',\n  '#165DFF',\n  '#FF7D00',\n  '#EB0AA4',\n  '#7BC616',\n  '#86909C',\n  '#B71DE8',\n  '#0FC6C2',\n  '#FFB400',\n  '#168CFF',\n  '#FF5722',\n];\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        {COLORS.map((color) => {\n          return <Badge key={color} color={color} text={color} style={{ marginRight: 24 }}> </Badge>;\n        })}\n      </div>\n      <br />\n      <div>\n        {COLORS_CUSTOM.map((color) => {\n          return <Badge key={color} color={color} text={color} style={{ marginRight: 24 }}> </Badge>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: API Documentation for Material Component in TypeScript\nDESCRIPTION: Example of how to write API documentation for a material component using TypeScript and JSDoc comments.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n* @title Button (required, only interfaces or types with `title` description will be collected)\n*/\ninterface ButtonProps {\n/**\n* @zh Button size (Chinese description of the property)\n* @en Size of Button (optional, English description of the property)\n* @version 1.2.0 (optional, which version the new property is supported in)\n* @defaultValue 'default' (optional, default value of the property)\n*/\nsize?: 'mini' | 'small' | 'default' | 'large';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer with Custom Popup Container in React\nDESCRIPTION: This snippet shows how to create a React component that uses the Drawer component from Arco Design. It demonstrates setting up state for visibility, using a ref for the container, and configuring the Drawer with a custom popup container.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/__demo__/container.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useRef } from 'react';\nimport { Drawer, Button } from '@arco-design/web-react';\nconst wrapperStyle = {\n  width: '100%',\n  height: 300,\n  backgroundColor: 'var(--color-fill-2)',\n  position: 'relative',\n  overflow: 'hidden',\n  lineHeight: '300px',\n  textAlign: 'center',\n};\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const refWrapper = useRef(null);\n  return (\n    <div ref={refWrapper} style={wrapperStyle}>\n      <Button type=\"primary\" onClick={() => setVisible(true)}>\n        Open\n      </Button>\n      <Drawer\n        title=\"Basic\"\n        visible={visible}\n        getPopupContainer={() => refWrapper && refWrapper.current}\n        footer={null}\n        onOk={() => {\n          setVisible(false);\n        }}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      >\n        <div style={{ textAlign: 'left' }}>Here is an example text.</div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation\nDESCRIPTION: Setting up documentation generation configuration with specific entry and output path restrictions\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config) => {\n  config.entry = 'src';\n  config.output = 'docs/README.md';\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring prefix variable in less via modifyVars\nDESCRIPTION: This code demonstrates how to configure the CSS class name prefix for Arco Design components by modifying the `prefix` variable in Less using the `modifyVars` option.  This approach allows customizing the prefix during the Less compilation process, ensuring that all component styles are generated with the specified prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  rules: [{\n    test: /\\.less$/,\n    use: [{\n      loader: 'style-loader',\n    }, {\n      loader: 'css-loader',\n    }, {\n      loader: 'less-loader',\n+     options: {\n+       modifyVars: {\n+         prefix: 'byte',\n+       },\n+       javascriptEnabled: true\n+     },\n    }],\n    ...\n  }],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Image Carousel with Arco Design in JavaScript/JSX\nDESCRIPTION: This code snippet demonstrates how to create a basic image carousel using the Carousel component from Arco Design. It imports the necessary component, defines an array of image sources, and renders the Carousel with mapped image elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nconst App = () => {\n  return (\n    <Carousel\n      style={{ width: 600, height: 240 }}\n    >\n      {imageSrc.map((src, index) => (\n        <div key={index}>\n          <img\n            src={src}\n            style={{ width: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Anchor Component in React\nDESCRIPTION: Creates an Anchor component that stays in a fixed position by setting affix=false. The component contains multiple links to different sections of the page (Basic, Static, Lineless mode, etc.) without scrolling along with the page content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/static.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor affix={false}>\n      <AnchorLink href=\"#Basic\" title=\"Basic\" />\n      <AnchorLink href=\"#Static\" title=\"Static\" />\n      <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n      <AnchorLink href=\"#Affix\" title=\"Affix\" />\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Content - CSS\nDESCRIPTION: This CSS snippet removes the default padding from the content area of an Arco Design Modal. It targets the `.arco-modal-content` element within a modal that has the class `modal-demo-without-content-spacing`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/with_alert.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.modal-demo-without-content-spacing .arco-modal-content {\n  padding: 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Content to Tabs in React with Arco Design\nDESCRIPTION: This JavaScript snippet demonstrates the use of the Arco Design React library to create a tabbed interface with additional content on the right side. It introduces an extra button within the tabs component using the `extra` property of `Tabs` from Arco Design. Dependencies include @arco-design/web-react package, and the app uses `Tabs` and `Button` components. The configuration sets a default active tab and discretionary actions for each tab.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/extra.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tabs, Button, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nconst App = () => {\n  return (\n    <Tabs\n      defaultActiveTab=\"1\"\n      extra={\n        <Button size=\"small\" type=\"secondary\">\n          Action\n        </Button>\n      }\n    >\n      <TabPane key=\"1\" title=\"Tab 1\">\n        <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n      </TabPane>\n      <TabPane key=\"2\" title=\"Tab 2\" disabled>\n        <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n      </TabPane>\n      <TabPane key=\"3\" title=\"Tab 3\">\n        <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with Arco Design\nDESCRIPTION: This snippet demonstrates how to use the `Image` component from `@arco-design/web-react` to display an image. It sets the `width` and `src` properties to control the image's size and source URL, respectively. An `alt` text is provided for accessibility.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Image\n      width={200}\n      src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp\"\n      alt=\"lamp\"\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using InputTag with Max Tag Count in React\nDESCRIPTION: This snippet showcases the implementation of InputTag components that utilize the `maxTagCount` property. It demonstrates two usages: one with a simple maximum tag count and another with a customized rendering of excess tags. The key parameters include `defaultValue` for preset tags and `maxTagCount` for controlling the maximum visible tags.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/max-tag-count.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InputTag, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Space style={{marginBottom: 20}}>\n        <InputTag\n          style={{ width: 350 }}\n          placeholder=\"Please input\"\n          defaultValue={['1', '2', '3', '4', '5']}\n          maxTagCount={3}\n        />\n        <InputTag\n          style={{ width: 350 }}\n          placeholder=\"Please input\"\n          defaultValue={['11', '22', '33', '4', '55']}\n          maxTagCount={{\n            count: 3,\n            render: (invisibleTagCount) => <span key=\"more\" style={{ marginLeft: 4, fontSize: 12 }}>{invisibleTagCount} More</span>,\n          }}\n        />\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Page Jump in Arco Design Pagination\nDESCRIPTION: Demonstrates how to create a pagination component with jump functionality using Arco Design. The component allows users to quickly navigate to a specific page by entering the page number. Uses the showJumper prop to enable this feature.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/jumper.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Pagination total={200} showJumper />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icons to Arco Design Icon Component in React\nDESCRIPTION: This JavaScript snippet demonstrates how to use Arco Design React's Icon component to include custom icons from external sources like iconbox or iconfont.cn. It uses the `addFromIconFontCn` method to import a script that defines SVG symbols, enabling the use of these icons through the `IconFont` component. The required dependency is `@arco-design/web-react`, and the script URL should be passed to the `src` attribute. The icons can then be used in components by specifying the `type` corresponding to the desired icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/__demo__/iconfont.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Icon } from '@arco-design/web-react';\n\nconst IconFont = Icon.addFromIconFontCn({ src: '//sf1-cdn-tos.toutiaostatic.com/obj/iconfont/index_8132353a46ca4ac1314b8903202269af.js' });\n\nconst App = () => {\n  return <div>\n    <IconFont type=\"icon-person\" style={{ fontSize: 40, marginRight: 40 }} />\n    <IconFont type=\"icon-earth\" style={{ fontSize: 40, marginRight: 40 }} />\n    <IconFont type=\"icon-flag\" style={{ fontSize: 40 }} />\n  </div>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Handling Row Sorting Events in JavaScript\nDESCRIPTION: This snippet contains functionality for handling the end of a sorting action in the table. It updates the state of the data when a row is dragged and dropped in a new position. It captures the old and new indices of the dragged item and updates the table data accordingly, also logging the new data structure to the console.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onSortEnd({ oldIndex, newIndex }) {\n  if (oldIndex !== newIndex) {\n    const newData = arrayMove([].concat(data), oldIndex, newIndex).filter((el) => !!el);\n    console.log('New Data: ', newData);\n    setData(newData);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vendor Dependency Export\nDESCRIPTION: This code exports specific dependencies from the `arcoDemoVendor.js` file. These dependencies are then used in the demo component, allowing access to libraries not included by default in the runtime environment. The file must be created under `/src/demo/` directory.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// arcoDemoVendor.js\nexport { myDependency } from '@arco-design/somelib';\n```\n\n----------------------------------------\n\nTITLE: Card Component API Interface\nDESCRIPTION: Type definitions for the main Card component properties including styling, content, and behavior options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CardProps {\n  bordered?: boolean;\n  hoverable?: boolean;\n  loading?: boolean;\n  size?: 'default' | 'small';\n  cover?: ReactNode;\n  extra?: string | ReactNode;\n  title?: string | ReactNode;\n  actions?: ReactNode[];\n  bodyStyle?: CSSProperties;\n  className?: string | string[];\n  headerStyle?: CSSProperties;\n  style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for useVerificationCode\nDESCRIPTION: TypeScript interface definitions for the verification code hook options and return types. Includes configuration parameters for length, default value, value handling, and callbacks.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerificationCodeOptions {\n  length?: number;\n  defaultValue?: string;\n  value?: string;\n  getInputRefList?: () => (HTMLInputElement | HTMLTextAreaElement)[];\n  onChange?: (value: string) => void;\n  onFinish?: (value: string) => void;\n}\n\ninterface VerificationCodeReturnType {\n  filledValue: VerificationCodeOptions['value'][];\n  setValue: (v: VerificationCodeOptions['value']) => void;\n  getInputProps: (index: number) => {\n    key: string | number;\n    value: string;\n    onClick: (e: MouseEvent) => void;\n    onKeyDown: (e: KeyboardEvent) => void;\n    onChange: (v: string) => void;\n    onPaste: (e: ClipboardEvent) => void;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Skeleton Loading in React with Arco Design\nDESCRIPTION: This React component demonstrates the use of Arco Design's Skeleton component with animation. It includes a switch to toggle between the loading state and the actual content, showcasing how to create an animated loading placeholder for text and image content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/__demo__/animate.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Skeleton, Switch, Avatar, Typography } from '@arco-design/web-react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n  }\n\n  onChange = (value) => {\n    this.setState({\n      loading: !this.state.loading,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 40 }}>\n          <Typography.Text style={{ margin: '0 8px' }}>Animation</Typography.Text>\n          <Switch\n            style={{ verticalAlign: 'middle' }}\n            size=\"small\"\n            onChange={this.onChange}\n            checked={this.state.loading}\n          />\n        </div>\n        <Skeleton\n          loading={this.state.loading}\n          text={{ width: '90%' }}\n          image={{ shape: 'circle' }}\n          animation\n        >\n          <div style={{ display: 'flex' }}>\n            <Avatar size={50} style={{ margin: '0 20px' }}>\n              Arco\n            </Avatar>\n            <Typography>\n              <Typography.Paragraph style={{ margin: 0 }}>\n                This is content, this is content, this is content\n              </Typography.Paragraph>\n              <Typography.Paragraph style={{ margin: 0 }}>\n                This is content, this is content\n              </Typography.Paragraph>\n              <Typography.Paragraph style={{ margin: 0 }}>\n                This is content, this is content\n              </Typography.Paragraph>\n            </Typography>\n          </div>\n        </Skeleton>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual List Properties in Typescript\nDESCRIPTION: Interface for virtual list rendering, supporting dynamic height calculation, threshold for virtual scrolling, and static item height configuration\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__template__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VirtualListProps {\n  height?: number | string;\n  threshold?: number | null;\n  isStaticItemHeight?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Message Wrapper for Local RTL View in CSS\nDESCRIPTION: This CSS snippet adjusts the positioning of the message wrapper for the local RTL view. It sets the left property to 0 to align the messages correctly in the RTL context.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/local-setting.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-holder-wrapper .arco-message-wrapper {\n  left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Component in Arco Design Carousel\nDESCRIPTION: Shows how to create a custom image component that works with Carousel animations by supporting style and className props. The example includes an image carousel implementation using Arco Design's Carousel component with custom ImgComponent for displaying images.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/selfComponent.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nfunction ImgComponent(props) {\n  const { src, style, className } = props;\n  return (\n    <div style={style} className={className}>\n      <img\n        src={src}\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <Carousel style={{ width: 600, height: 240 }}>\n        {imageSrc.map((src, index) => (\n          <ImgComponent key={index} src={src} />\n        ))}\n      </Carousel>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Anchor Component with Nested Links in React\nDESCRIPTION: This code snippet demonstrates the basic implementation of the Anchor component from Arco Design's React library. It shows how to create nested anchor links with proper hierarchy and how to configure the component with offsetTop to control its positioning when scrolling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor\n      offsetTop={60}\n      style={{ backgroundColor: 'var(--color-bg-2)' }}\n    >\n      <AnchorLink href=\"#Basic\" title=\"Basic\">\n        <AnchorLink href=\"#Static\" title=\"Static\">\n          <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n          <AnchorLink href=\"#Affix\" title=\"Affix\" />\n        </AnchorLink>\n      </AnchorLink>\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining InnerMethodsReturnType for Arco Design Form\nDESCRIPTION: This type definition specifies the return type for inner methods used within the Arco Design Form component. It uses `Pick` to select specific methods from the `Store` type, including methods for registering fields, watchers, setting initial values, and accessing form state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport type InnerMethodsReturnType<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = Pick<\n  Store<FormData, FieldValue, FieldKey>,\n  | \"registerField\"\n  | \"registerStateWatcher\"\n  | \"registerFormWatcher\"\n  | \"registerWatcher\"\n  | \"innerSetInitialValues\"\n  | \"innerSetInitialValue\"\n  | \"innerSetCallbacks\"\n  | \"innerSetFieldValue\"\n  | \"innerGetStore\"\n  | \"innerGetStoreStatus\"\n  | \"innerCollectFormState\"\n  | \"innerGetFieldValue\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Descriptions Component with Size Options in React\nDESCRIPTION: This code snippet creates a React component that demonstrates the Descriptions component from Arco Design with different size options. It uses a radio group for size selection and renders two instances of the Descriptions component with different layouts and data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Descriptions, Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Date of Birth',\n    value: '2020-05-15',\n    span: 2,\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        value={size}\n        options={['mini', 'small', 'medium', 'default', 'large']}\n        onChange={(value) => setSize(value)}\n        type=\"button\"\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions\n        border\n        title=\"User Info\"\n        data={data}\n        size={size}\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions\n        column={1}\n        title=\"User Info\"\n        data={data}\n        size={size}\n        labelStyle={{ paddingRight: 40 }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning Result Component in React with Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the Result component from Arco Design to display a warning message with a primary button. It imports necessary components, creates a functional component, and renders the Result with specific props.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/warning.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"warning\"\n        title=\"There is a problem with your operation.\"\n        extra={<Button type=\"primary\">Back</Button>}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Material Documentation in MDX Format\nDESCRIPTION: Example of how to write material documentation using MDX, including markdown syntax, JSX, and component demos.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ndescription: Basic button ui component.\nlabels: ['ui', 'input', 'select-user']\n---\n\nHere is some description of this component. You can write:\n\nMarkdown syntax:\n\n[Arco](https://arco.design)\n\nor JSX:\n\n<div style={{ display: 'flex', alignItems: 'center', width: 150, height: 150, border: '1px solid grey' }}>\n  This box is written via JSX\n</div>\n\n## Basic Usage\n\nimport BasicUsage from './basicUsage';\n\n<div data-arco-demo=\"BasicUsage\">\n  <BasicUsage />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Step Bar in React with Arco Design\nDESCRIPTION: This snippet sets up a React component that renders an arrow type step bar using the Arco Design Steps component. The step bar contains three steps with specified titles and descriptions, and it indicates the current step visually. The component utilizes props for configuration. Required dependency: '@arco-design/web-react'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/arrow.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <Steps type=\"arrow\" current={2} style={{ maxWidth: 780 }}>\n      <Step title=\"Succeeded\" description=\"This is a description\" />\n      <Step title=\"Processing\" description=\"This is a description\" />\n      <Step title=\"Pending\" description=\"This is a description\" />\n    </Steps>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType for InputTag in Javascript\nDESCRIPTION: This code snippet defines the `ObjectValueType` type used by the InputTag component.  It includes optional properties for value, label and closable. It's used to represent individual tag values with optional metadata.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Palettes for VChart\nDESCRIPTION: This code snippet demonstrates how to render color palettes in a React component for both cases when the number of data groups is less than or equal to 10 or more than 10 data groups using Arco CSS variables for colors.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: react\nCODE:\n```\n<div style={{padding: 20}}>\n  <div style={{ fontSize: 24, color: 'var(--color-text-1)', fontFamily: 'Roboto Mono', fontWeight: '700', }}>N≤10</div>\n\n  <div style={{ gap: 12, marginTop: 12, marginBottom: 40, display: 'flex'}}>\n  {\n    [...new Array(10)].map((_, index) => {\n      return <div key={index} style={{width: 28, height: 28, background: `var(--color-data-${(index * 2)+1})`, borderRadius: 28}} />\n    })\n  }\n  </div>\n\n    <div style={{ fontSize: 24, color: 'var(--color-text-1)', fontFamily: 'Roboto Mono', fontWeight: '700', }}>10≤N≤20(Extended 20 colors)</div>\n\n  <div style={{ gap: 12, marginTop: 12, display: 'flex'}}>\n  {\n    [...new Array(20)].map((_, index) => {\n      return <div key={index} style={{width: 28, height: 28, background: `var(--color-data-${index+1})`, borderRadius: 28}} />\n    })\n  }\n  </div>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icons in Arco Design Popconfirm\nDESCRIPTION: Shows how to customize the Popconfirm component with different icon configurations. Demonstrates using a custom smile icon with specific styling and removing the icon completely. Includes message feedback on confirmation actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popconfirm, Message, Button, Space } from '@arco-design/web-react';\nimport { IconFaceSmileFill } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={24}>\n      <Popconfirm\n        focusLock\n        title=\"Are you sure you want to delete?\"\n        icon={<IconFaceSmileFill style={{ color: '#0057fe' }} />}\n        onOk={() => {\n          Message.info({\n            content: 'ok',\n          });\n        }}\n        onCancel={() => {\n          Message.error({\n            content: 'cancel',\n          });\n        }}\n      >\n        <Button>Delete</Button>\n      </Popconfirm>\n      <Popconfirm\n        icon={null}\n        title=\"Are you sure you want to delete?\"\n        onOk={() => {\n          Message.info({\n            content: 'ok',\n          });\n        }}\n        onCancel={() => {\n          Message.error({\n            content: 'cancel',\n          });\n        }}\n      >\n        <Button>Delete</Button>\n      </Popconfirm>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Front Labels in TreeSelect with Arco Design in React\nDESCRIPTION: This code demonstrates how to use the addBefore property (introduced in version 2.41.0) to add a 'TreeNode' text label before TreeSelect components. The example shows both a standard TreeSelect and a checkable TreeSelect with hierarchical tree data structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/addon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TreeSelect, Space } from '@arco-design/web-react';\n\nconst treeData = [\n  {\n    key: 'node1',\n    title: 'Trunk',\n    disabled: true,\n    children: [\n      {\n        key: 'node2',\n        title: 'Leaf',\n      },\n    ],\n  },\n  {\n    key: 'node3',\n    title: 'Trunk2',\n    children: [\n      {\n        key: 'node4',\n        title: 'Leaf',\n      },\n      {\n        key: 'node5',\n        title: 'Leaf',\n      },\n    ],\n  },\n];\n\n\nconst App = () => {\n  return <Space>\n  <TreeSelect addBefore={\"TreeNode\"} treeData={treeData} style={{ width: 350 }} />\n  <TreeSelect addBefore={\"TreeNode\"} treeData={treeData} treeCheckable style={{ width: 350 }} />\n  </Space>\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Sorting Items with Arco Design Grid in React\nDESCRIPTION: This JavaScript snippet illustrates the usage of the Grid component from the Arco Design library to arrange items in a specific order by setting the 'order' property on each column. The example creates a grid with four columns, each assigned a different order value to demonstrate how they can be reordered. It requires the 'arco-design/web-react' library for the Grid component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/order.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Row className=\"grid-demo\">\n        <Col span={6} order={4}>\n          <div>1 col-order-4</div>\n        </Col>\n        <Col span={6} order={3}>\n          <div>2 col-order-3</div>\n        </Col>\n        <Col span={6} order={2}>\n          <div>3 col-order-2</div>\n        </Col>\n        <Col span={6} order={1}>\n          <div>4 col-order-1</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component with Various Styles in React\nDESCRIPTION: This snippet demonstrates how to use the Divider component from Arco Design to separate paragraphs and create visual separations between content sections. It showcases different divider styles and includes examples with text and icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider, Typography } from '@arco-design/web-react';\nimport { IconFileImage, IconUser, IconPen } from '@arco-design/web-react/icon';\nconst { Paragraph, Title } = Typography;\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"divider-demo\">\n        <Paragraph>\n          A design is a plan or specification for the construction of an object.\n        </Paragraph>\n        <Divider />\n        <Paragraph>\n          A design is a plan or specification for the construction of an object.\n        </Paragraph>\n        <Divider\n          style={{\n            borderBottomStyle: 'dashed',\n          }}\n        />\n        <Paragraph>\n          A design is a plan or specification for the construction of an object.\n        </Paragraph>\n        <Divider\n          style={{\n            borderBottomWidth: 2,\n            borderBottomStyle: 'dotted',\n          }}\n        />\n        <Paragraph>\n          A design is a plan or specification for the construction of an object.\n        </Paragraph>\n      </div>\n      <div\n        className=\"divider-demo\"\n        style={{ marginTop: 48 }}\n      >\n        <div className=\"divider-demo-flex-content\">\n          <span className=\"avatar\">\n            <IconFileImage />\n          </span>\n          <div className=\"content\">\n            <Title heading={6}>Image</Title>May 4, 2010\n          </div>\n        </div>\n        <Divider className=\"half-divider\" />\n        <div className=\"divider-demo-flex-content\">\n          <span className=\"avatar\">\n            <IconUser />\n          </span>\n          <div className=\"content\">\n            <Title heading={6}>Avatar</Title>May 4, 2010\n          </div>\n        </div>\n        <Divider className=\"half-divider\" />\n        <div className=\"divider-demo-flex-content\">\n          <span className=\"avatar\">\n            <IconPen />\n          </span>\n          <div className=\"content\">\n            <Title heading={6}>Icon</Title>May 4, 2010\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Style Dependencies in TypeScript\nDESCRIPTION: This TypeScript snippet outlines importing all necessary styles for a component in src/style/index.ts to support on-demand style loading. It includes importing local and Arco component styles, ensuring components have all dependency styles loaded correctly when utilized.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// style/index.ts\n\n// Import the style file of the current component\nimport './index.less';\n\n// Import other component styles in this package that the current component depends on (if any)\nimport '../../AnotherComponent/style';\n\n// Import the Arco component style that the current component depends on (if any)\nimport '@arco-design/web-react/es/Button/style';\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Materials to Platform\nDESCRIPTION: Command to synchronize all materials in a workspace to the material platform, with options for CI token authentication\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n## Synchronize all materials in the workspace to the material platform\n$ arco sync\n```\n\nLANGUAGE: Bash\nCODE:\n```\nARCO_CONFIG_X_ARCO_ACCESS_TOKEN=YOUR_ACCESS_TOKEN arco sync\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation in Arco Design Carousel\nDESCRIPTION: Creates a carousel component with fade transition effects using Arco Design. The carousel auto-plays through a series of images with fade animation, hiding navigation arrows. The component is configured with specific dimensions and handles image rendering through array mapping.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__demo__/animation-fade.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Carousel } from '@arco-design/web-react';\nconst imageSrc = [\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp',\n  '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/24e0dd27418d2291b65db1b21aa62254.png~tplv-uwbnlip3yd-webp.webp',\n];\n\nfunction App() {\n  return (\n    <Carousel\n      autoPlay\n      animation=\"fade\"\n      showArrow=\"never\"\n      style={{ width: 600, height: 240 }}\n    >\n      {imageSrc.map((src, index) => (\n        <div\n          key={index}\n          style={{ width: '100%' }}\n        >\n          <img\n            src={src}\n            style={{ width: '100%' }}\n          />\n        </div>\n      ))}\n    </Carousel>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Arco Grid with CSS\nDESCRIPTION: This CSS snippet provides styling for the Arco Design Grid component, specifically targeting the `.grid-demo` and `.arco-col` classes. It sets the height, line-height, text color, and text alignment for the columns. Additionally, it applies alternating background colors to the columns using the `:nth-child` selector. The `.grid-demo-background` class sets a background image with a linear gradient to visually represent the grid structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n\n.grid-demo-background {\n  background-image: linear-gradient(\n    90deg,\n    var(--color-fill-2) 4.16666667%,\n    transparent 4.16666667%,\n    transparent 8.33333333%,\n    var(--color-fill-2) 8.33333333%,\n    var(--color-fill-2) 12.5%,\n    transparent 12.5%,\n    transparent 16.66666667%,\n    var(--color-fill-2) 16.66666667%,\n    var(--color-fill-2) 20.83333333%,\n    transparent 20.83333333%,\n    transparent 25%,\n    var(--color-fill-2) 25%,\n    var(--color-fill-2) 29.16666667%,\n    transparent 29.16666667%,\n    transparent 33.33333333%,\n    var(--color-fill-2) 33.33333333%,\n    var(--color-fill-2) 37.5%,\n    transparent 37.5%,\n    transparent 41.66666667%,\n    var(--color-fill-2) 41.66666667%,\n    var(--color-fill-2) 45.83333333%,\n    transparent 45.83333333%,\n    transparent 50%,\n    var(--color-fill-2) 50%,\n    var(--color-fill-2) 54.16666667%,\n    transparent 54.16666667%,\n    transparent 58.33333333%,\n    var(--color-fill-2) 58.33333333%,\n    var(--color-fill-2) 62.5%,\n    transparent 62.5%,\n    transparent 66.66666667%,\n    var(--color-fill-2) 66.66666667%,\n    var(--color-fill-2) 70.83333333%,\n    transparent 70.83333333%,\n    transparent 75%,\n    var(--color-fill-2) 75%,\n    var(--color-fill-2) 79.16666667%,\n    transparent 79.16666667%,\n    transparent 83.33333333%,\n    var(--color-fill-2) 83.33333333%,\n    var(--color-fill-2) 87.5%,\n    transparent 87.5%,\n    transparent 91.66666667%,\n    var(--color-fill-2) 91.66666667%,\n    var(--color-fill-2) 95.83333333%,\n    transparent 95.83333333%\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Icons in Arco Design Tree Component\nDESCRIPTION: This code demonstrates how to add custom icons to TreeNode components using the icon property. It imports the Tree component from Arco Design and the IconStar icon, then creates a tree structure with star icons applied to each node in the hierarchy.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tree } from '@arco-design/web-react';\nimport { IconStar } from '@arco-design/web-react/icon';\nconst TreeNode = Tree.Node;\n\nfunction App() {\n  return (\n    <Tree>\n      <TreeNode icon={<IconStar />} key=\"node1\" title=\"Trunk\">\n        <TreeNode icon={<IconStar />} key=\"node2\" title=\"Leaf\" />\n      </TreeNode>\n      <TreeNode icon={<IconStar />} key=\"node3\" title=\"Trunk\">\n        <TreeNode icon={<IconStar />} key=\"node4\" title=\"Leaf\" />\n        <TreeNode icon={<IconStar />} key=\"node5\" title=\"Leaf\" />\n      </TreeNode>\n    </Tree>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Mounting Watermark with Dynamic Container Selection in React\nDESCRIPTION: Implementation of a React component that demonstrates dynamic watermark mounting using Arco Design. The component allows users to click between two containers to change the watermark's mounting location using the getContainer property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/__demo__/container.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Watermark, Grid } from '@arco-design/web-react';\n\nconst App = () => {\n  const [current, setCurrent] = React.useState('#demo-watermark-1');\n\n  return (\n    <Grid.Row justify=\"space-between\">\n      <div\n        id=\"demo-watermark-1\"\n        style={{ width: 400, height: 300, lineHeight: '300px', textAlign: 'center', background: 'var(--color-primary-light-1)' }}\n        onClick={() => {\n          setCurrent('#demo-watermark-1');\n        }}\n      >\n        Click to mount the watermark here\n      </div>\n      <div\n        id=\"demo-watermark-2\"\n        style={{ width: 400, height: 300, lineHeight: '300px', textAlign: 'center',background: 'var(--color-warning-light-1)' }}\n        onClick={() => {\n          setCurrent('#demo-watermark-2');\n        }}\n      >\n        Click to mount the watermark here\n      </div>\n\n      <Watermark getContainer={() => document.querySelector(current)} content=\"Arco Design\"></Watermark>\n    </Grid.Row>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Borderless Select Components with Arco Design in React\nDESCRIPTION: This code snippet demonstrates the creation of borderless Select components using Arco Design's Select component. It includes two Select components: one with selectable options that triggers a message on change, and another in a disabled state with a default value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/no-border.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Select, Message, Space } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Wuhan'];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Select\n        placeholder=\"Select city\"\n        bordered={false}\n        style={{ width: 154 }}\n        onChange={(value) =>\n          Message.info({\n            content: `You select ${value}.`,\n            showIcon: true,\n          })\n        }\n      >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 3} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n      <Select\n        placeholder=\"Select city\"\n        bordered={false}\n        style={{ width: 154 }}\n        defaultValue=\"Beijing\"\n        disabled\n      >\n        {options.map((option, index) => (\n          <Option key={option} disabled={index === 4} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Type Definition - VerificationCodeReturnType Interface\nDESCRIPTION: TypeScript interface defining the return type of the useVerificationCode hook. Includes the filled value array, setValue function, and getInputProps function for managing input elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerificationCodeReturnType {\n  filledValue: VerificationCodeOptions['value'][];\n  setValue: (v: VerificationCodeOptions['value']) => void;\n  getInputProps: (index: number) => {\n    key: string | number;\n    value: string;\n    onClick: (e: MouseEvent) => void;\n    onKeyDown: (e: KeyboardEvent) => void;\n    onChange: (v: string) => void;\n    onPaste: (e: ClipboardEvent) => void;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Message Settings in React\nDESCRIPTION: Method to configure global settings for the Message component, including maxCount, container, duration, and class prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nMessage.config(options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Sort Feature with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to use the `dragToSort` property of the InputTag component from the Arco Design library to allow users to sort values by dragging. It requires the `@arco-design/web-react` package as a dependency. The example initializes an InputTag component with default values and a maximum width. The `allowClear` prop is also included to enable a clear button. The component expects an array of default values and outputs the sorted values based on user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/draggable.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <InputTag style={{ maxWidth: 350 }} allowClear dragToSort defaultValue={['a', 'b', 'c', 'd']} />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: React Card Component\nDESCRIPTION: This code snippet demonstrates how to use the ACCard component to display information about the Palette Utilities. It sets the title, description, link, icon, and button text for the card, providing a user interface element that directs users to the /palette page.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/palette/md/header.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ACCard from '../../../widget/Card';\n\n<ACCard\n  title=\"Palette Utilities\"\n  description=\"Use color utilities to easily configure color palettes and export multi-format color files.\"\n  link=\"/palette\"\n  icon=\"Palette\"\n  buttonText=\"Goto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox.useCheckbox Hook\nDESCRIPTION: Implementation of the useCheckbox hook for managing checkbox state. The hook provides methods for selection control and state checking. It accepts generic type T which can be string or number.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** T = string | number */\nconst result: ResultType = Checkbox.useCheckbox<T>(values: T[], defaultSelected?: T[]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Close in Arco Design Popconfirm\nDESCRIPTION: Demonstrates the implementation of an asynchronous closing mechanism for a Popconfirm component using Promises. The code includes a delay function that resolves after 2 seconds and displays a confirmation message, along with error handling for cancellation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__demo__/loading.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popconfirm, Message, Button } from '@arco-design/web-react';\n\nfunction delayClose() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n      Message.info({\n        content: 'ok',\n      });\n    }, 2000);\n  });\n}\n\nconst App = () => {\n  return (\n    <Popconfirm\n      title=\"Are you sure you want to delete?\"\n      onOk={delayClose}\n      onCancel={() => {\n        Message.error({\n          content: 'cancel',\n        });\n      }}\n      focusLock\n    >\n      <Button style={{ marginRight: 20 }}>Async close</Button>\n    </Popconfirm>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining NodeInstance Type for Tree Component\nDESCRIPTION: TypeScript type definition representing a tree node instance. It defines a React element of TreeNode type with NodeProps properties and potentially containing children.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeInstance = ReactElement<\n  PropsWithChildren<NodeProps>,\n  typeof TreeNode\n>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Count Rate Component in React\nDESCRIPTION: Creates a Rate component with 10 stars and half-star selection enabled. Uses the count prop to specify the total number of rating stars and allowHalf to enable half-star ratings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/count.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Rate count={10} allowHalf />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Typography Component API Overview\nDESCRIPTION: Defines the base Typography API with core properties for styling and customization of text elements including title, paragraph, and text components\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Typography {\n  className?: string | string[];\n  style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Move Mutate Function\nDESCRIPTION: This function mutates an array by moving an item from one index to another. It calculates the target index, handles negative indices, and uses splice to remove and insert the item. The function modifies the original array directly.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrayMoveMutate = (array, from, to) => {\n  const startIndex = to < 0 ? array.length + to : to;\n\n  if (startIndex >= 0 && startIndex < array.length) {\n    const item = array.splice(from, 1)[0];\n    array.splice(startIndex, 0, item);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Bordered Tags in React using Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the Arco Design React library to display bordered tags. The `bordered` prop is used to add a border around tags. It imports `Tag` and `Space` components from '@arco-design/web-react' and iterates over a predefined list of colors, creating a bordered tag for each color. The key dependencies include '@arco-design/web-react'. Inputs include various color strings; output is a collection of styled tag components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/bordered.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tag, Space } from '@arco-design/web-react';\nconst COLORS = [\n  'red',\n  'orangered',\n  'orange',\n  'gold',\n  'lime',\n  'green',\n  'cyan',\n  'blue',\n  'arcoblue',\n  'purple',\n  'pinkpurple',\n  'magenta',\n  'gray',\n];\n\nconst App = () => {\n  return (\n    <Space wrap>\n      <Tag bordered>Default</Tag>\n      {COLORS.map((color, i) => (\n        <Tag key={i} color={color} bordered>\n          {color}\n        </Tag>\n      ))}\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ColorPicker Trigger in React\nDESCRIPTION: Creates a color picker with a custom button trigger element that displays the current color value. Uses the Arco Design ColorPicker component with useState hook for managing the selected color state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__demo__/trigger.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, ColorPicker } from '@arco-design/web-react';\n\nconst App = () => {\n  const [value, setValue] = useState('#165DFF');\n\n  return (\n    <div>\n      <ColorPicker defaultValue={'#165DFF'} triggerElement={({ value }) => {\n        return <Button>Open Color Picker: {value}</Button>\n      }}>\n\n      </ColorPicker>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining FormItemChildrenFn Type in TypeScript\nDESCRIPTION: This type defines a function type that facilitates the rendering of children components based on form state and provided data. It allows for dynamic rendering based on the current state of the form.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FormItemChildrenFn<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = (\n  formData: any,\n  form: FormInstance<FormData, FieldValue, FieldKey>\n) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Skeleton Screen in React with Arco Design\nDESCRIPTION: This snippet demonstrates the basic usage of the Skeleton component from Arco Design's React library. It imports the Skeleton component and renders it within a functional React component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Skeleton } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Skeleton></Skeleton>;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Red Badge Indicators with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to use the Badge component from Arco Design to create red dot indicators. It shows two examples: one with a text link and another with an icon. The 'dot' prop is used to display a red dot instead of a count, and 'offset' is used to adjust the position of the dot.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/dot.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge, Space } from '@arco-design/web-react';\nimport { IconNotification } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Badge count={9} dot offset={[6, -2]}>\n        <a href=\"#\">Link</a>\n      </Badge>\n      <Badge count={9} dot offset={[2, -2]}>\n        <IconNotification\n          style={{\n            color: '#888',\n            fontSize: 18,\n            verticalAlign: -3,\n          }}\n        />\n      </Badge>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using allowCreate.formatter in Select Component\nDESCRIPTION: Demonstrates how to use the allowCreate.formatter property to format user-created options in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nallowCreate.formatter\n```\n\n----------------------------------------\n\nTITLE: Specifying Component Build Order in JSONC\nDESCRIPTION: Configuration for customizing the build order of components in an Arco workspace. This is useful when workspace NPM packages have dependencies and need to be built in a specific order to avoid TypeScript errors.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n// arco.workspace.jsonc\n{\n// This configuration item is used to specify the default behavior of TSCompilerESM / TSCompilerCJS\n\"arco.service/compiler\": {\n// Specify the compilation order of components. The fields received are: component ID, component ID keyword, component ID Glob matcher\n// Put the components that need to be built first in the array, and the unspecified components will be placed at the end of the build queue\n\"componentCompilationOrders\": [\"base-component/**\", \"second-base-component/**\"]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Range with React and Arco Design\nDESCRIPTION: This snippet implements a React functional component that allows users to set an optional range using minimum and maximum values. It utilizes the 'useState' hook for managing state, as well as 'Slider' and 'InputNumber' components from the Arco Design framework. Users can input numeric values for the range limits, and adjust a slider that reflects the current selection within those limits.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/set-range.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, InputNumber, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState(30);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(100);\n  return (\n    <Space size={16}>\n      <InputNumber\n        value={min}\n        onChange={(val) => setMin(val)}\n        style={{ width: 78 }}\n      />\n      <Slider\n        value={value}\n        min={min}\n        max={max}\n        onChange={(val) => setValue(val)}\n        style={{ width: 200 }}\n      />\n      <InputNumber\n        value={max}\n        onChange={(val) => setMax(val)}\n        style={{ width: 78 }}\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface defining options for upload requests including callbacks for progress, success, and error handling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RequestOptions = Pick<\n  UploadProps,\n  \"headers\" | \"name\" | \"data\" | \"withCredentials\" | \"action\" | \"method\"\n> & {\n  /** 更新当前文件的上传进度 。percent: 当前上传进度百分比 */\n  onProgress: (percent: number, event?: ProgressEvent) => void;\n  /** 上传成功后，调用onSuccess方法，传入的response参数将会附加到当前上传文件的reponse字段上 */\n  onSuccess: (response?: object) => void;\n  /** 上传失败后，调用onError方法，传入的 response 参数将会附加到当前上传文件的response字段 */\n  onError: (response?: object) => void;\n  /** 当前上传文件 */\n  file: File;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge with Custom Text in Arco Design React\nDESCRIPTION: This code demonstrates how to use the Badge component with custom text properties. It creates two square Avatars with IconUser, each wrapped in a Badge component with different text values ('NEW' and 'HOT').\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/text.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Badge, Avatar, Space } from '@arco-design/web-react';\nimport { IconUser } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Badge text=\"NEW\">\n        <Avatar shape=\"square\">\n          <span>\n            <IconUser />\n          </span>\n        </Avatar>\n      </Badge>\n      <Badge text=\"HOT\">\n        <Avatar shape=\"square\">\n          <span>\n            <IconUser />\n          </span>\n        </Avatar>\n      </Badge>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Checkbox Component with Arco Design React\nDESCRIPTION: Creates a React component that renders a disabled checkbox using the Arco Design library. The checkbox is set to disabled state using the disabled prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/disabled.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Checkbox } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Checkbox disabled>disabled Checkbox</Checkbox>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Documentation Entries in arco.workspace.jsonc\nDESCRIPTION: This code snippet demonstrates how to configure the documentation and API documentation parsing entries for a component within the `arco.workspace.jsonc` file. The \"preview\" field specifies the path to the component preview documentation (MDX file), while the \"jsdoc\" field specifies the entry point for parsing API documentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": [\n{\n\"name\": \"ComponentName\",\n\"entries\": {\n// Configure component documentation entry through this field\n\"preview\": \"./__docs__/index.mdx\"\n// Configure the entry for parsing API documentation through this field, supporting arrays\n\"jsdoc\": [\"./interface.ts\"]\n}\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Page with Arco Design in React\nDESCRIPTION: This code snippet creates a React component for a 404 error page using Arco Design's Result and Button components. It displays a '404' status, a custom subtitle, and two action buttons for navigation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/404.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"404\"\n        subTitle=\"Whoops, that page is gone. \"\n        extra={[\n          <Button key=\"again\" style={{ margin: '0 16px' }}>\n            Again\n          </Button>,\n          <Button key=\"back\" type=\"primary\">\n            Back\n          </Button>,\n        ]}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Drawer component, including various properties such as autoFocus, closable, confirmLoading, and more. It specifies the property names, descriptions, types, default values, and version information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|autoFocus|是否默认聚焦第一个可聚焦元素，只在 `focusLock` 开启时生效。|boolean |`true`|2.13.0|\n|closable|是否显示右上角关闭按钮|boolean |`true`|-|\n|confirmLoading|确认按钮是否为加载中状态|boolean |`-`|-|\n|escToExit|按 `ESC` 键关闭|boolean |`true`|2.10.0|\n|focusLock|是否将焦点锁定在弹出框内。|boolean |`true`|2.13.0|\n|mask|是否显示遮罩|boolean |`true`|-|\n|maskClosable|点击蒙层是否可以关闭|boolean |`true`|-|\n|mountOnEnter|是否在初次打开对话框时才渲染 dom。|boolean |`true`|-|\n|unmountOnExit|是否在隐藏的时候销毁 DOM 结构|boolean |`-`|-|\n|visible|是否显示弹出框|boolean |`-`|-|\n|zIndex|设置抽屉的 zIndex|number |`-`|2.42.0|\n|placement|抽屉的方向 `top` `right` `bottom` `left`|'top' \\| 'right' \\| 'bottom' \\| 'left' |`right`|-|\n|cancelText|取消按钮文案|ReactNode |`-`|-|\n|closeIcon|自定义右上角关闭按钮|ReactNode |`-`|2.49.0|\n|footer|自定义按钮确认和取消按钮，为 null 的话没有按钮组|ReactNode |`-`|-|\n|okText|确认按钮文案|ReactNode |`-`|-|\n|title|弹出框的标题（设置为 null 时，不显示标题栏）|ReactNode |`-`|-|\n|bodyStyle|内容区域的样式|CSSProperties |`-`|2.9.0|\n|cancelButtonProps|取消按钮的 props|ButtonProps |`-`|2.26.0|\n|className|节点类名|string \\| string[] |`-`|-|\n|headerStyle|头部的样式|CSSProperties |`-`|2.9.0|\n|height|抽屉的高度，`placement`为 `top` `bottom` 时生效|string \\| number |`250`|-|\n|maskStyle|设置遮罩层的样式|CSSProperties |`-`|-|\n|okButtonProps|确认按钮的 props|ButtonProps |`-`|2.26.0|\n|style|节点样式|CSSProperties |`-`|-|\n|width|抽屉的宽度，`placement`为 `left` `right` 时生效|string \\| number |`250`|-|\n|wrapClassName|设置外层容器的类名|string \\| string[] |`-`|-|\n|afterClose|抽屉关闭之后的回调|() => void |`-`|-|\n|afterOpen|抽屉打开之后的回调|() => void |`-`|-|\n|getChildrenPopupContainer|抽屉里的弹出框 `Select` `Tooltip` 等挂载的容器，默认挂载在对话框内。|(node: HTMLElement) => Element |`-`|-|\n|getPopupContainer|指定弹出框挂载的父节点|() => Element |`() => document.body`|-|\n|onCancel|关闭弹出框的回调|(e: MouseEvent \\| Event) => void |`-`|-|\n|onOk|点击确认按钮的回调|(e: Event) => void |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component with Max Count in React\nDESCRIPTION: This example demonstrates how to use the maxCount property with Badge components to limit the display value of the badge counter. When the count exceeds maxCount, it will display `${maxCount}+`. The example shows three cases: a count of 100 with maxCount of 10, a count of 100 with default maxCount (99), and a count of 1000 with maxCount of 999.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/max_count.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Badge, Avatar, Space } from '@arco-design/web-react';\nimport { IconUser } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Badge count={100} maxCount={10}>\n        <Avatar shape=\"square\">\n          <span>\n            <IconUser />\n          </span>\n        </Avatar>\n      </Badge>\n      <Badge count={100}>\n        <Avatar shape=\"square\">\n          <span>\n            <IconUser />\n          </span>\n        </Avatar>\n      </Badge>\n      <Badge count={1000} maxCount={999}>\n        <Avatar shape=\"square\">\n          <span>\n            <IconUser />\n          </span>\n        </Avatar>\n      </Badge>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Image.Preview Component in React\nDESCRIPTION: This code snippet showcases how to implement the Image.Preview component from the @arco-design/web-react library. It sets up the component to display an image preview that can be controlled through the state variable 'visible'. The Button allows users to toggle the visibility when clicked. Prerequisites include having React and the Arco Design library installed. The expected inputs are the 'src' for the image and the 'visible' boolean state, with outputs being the rendered UI reflecting the current state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/component-preview.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Image, Button } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setVisible(true)}>\n        Click me to preview image\n      </Button>\n      <Image.Preview\n        src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp\"\n        visible={visible}\n        onVisibleChange={setVisible}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Component Globally in JavaScript\nDESCRIPTION: Global configuration method for the Message component allowing customization of maximum count, container, duration, and className prefix for all message notifications.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMessage.config(options)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Page Component\nDESCRIPTION: This code snippet demonstrates the creation of a simple React component for a new page. The component returns a basic JSX structure containing a `div` element with the text \"Monitoring page\". This serves as a placeholder for the actual page content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/pages/monitor/index.tsx\nimport React from'react';\n\nexport default function Monitor() {\n  return <div>Monitoring page</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting MDX Document with ArcoMDXPreviewSplit\nDESCRIPTION: Demonstrates how to use ArcoMDXPreviewSplit component to organize and split MDX documentation into multiple panes with different content sections\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nimport PartOne from './part1.mdx';\nimport PartTwo from './part2.mdx';\n<ArcoMDXPreviewSplit panes={[\n{ title: 'Part One', content: <PartOne /> },\n{ title: 'Part Two', content: <PartTwo /> },\n{ title: 'API', content: <div id=\"api-placeholder\" /> }\n]} />\n```\n\n----------------------------------------\n\nTITLE: Affix Component Type Definition in TypeScript\nDESCRIPTION: Type definitions for the Affix component properties including offset positions, styling options, and event handlers. The component supports customization through various props like offsetBottom, offsetTop, className, and onChange callback.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AffixProps {\n  offsetBottom?: number;\n  offsetTop?: number;\n  affixClassName?: string | string[];\n  affixStyle?: CSSProperties;\n  className?: string | string[];\n  style?: CSSProperties;\n  onChange?: (affixed: boolean) => void;\n  target?: () => HTMLElement | null | Window;\n  targetContainer?: () => HTMLElement | null | Window;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Way Transfer Component in React with Arco Design\nDESCRIPTION: This example demonstrates how to create a one-way transfer list where items can only move in one direction by using the `oneWay` prop. It configures a transfer component with custom data source, default selected keys, default target keys, and custom title texts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/one-way.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Transfer } from '@arco-design/web-react';\n\nfunction App() {\n  const dataSource = new Array(8).fill(null).map((_, index) => ({\n    key: `${index + 1}`,\n    value: `Option ${index + 1}`,\n  }));\n  return (\n    <Transfer\n      oneWay\n      dataSource={dataSource}\n      searchPlaceholder=\"Please select\"\n      defaultTargetKeys={['1', '2', '3']}\n      defaultSelectedKeys={['4', '6', '7']}\n      titleTexts={['To-do list', 'Selected list']}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining GridRowGutter Type in TypeScript\nDESCRIPTION: Type definition for grid row gutter that supports numeric values or responsive breakpoint configurations\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GridRowGutter =\n  | number\n  | Partial<Record<GridResponsiveBreakpoint, number>>;\n```\n\n----------------------------------------\n\nTITLE: Importing a Material\nDESCRIPTION: This JavaScript snippet demonstrates how to import a material (NPM package) into your project. It uses the `import` statement to bring in the `SelectWithCheckAll` component from the `@arco-materials/select-with-check-all` package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectWithCheckAll from '@arco-materials/select-with-check-all';\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Custom Dashed Axis Lines in React\nDESCRIPTION: This code demonstrates how to implement a Timeline component with dashed line types using Arco Design. It creates a timeline with three milestones, each containing a label, title, and descriptive text with custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Timeline/__demo__/type.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Timeline, Typography } from '@arco-design/web-react';\nconst TimelineItem = Timeline.Item;\n\nconst App = () => {\n  return (\n    <div>\n      <Timeline>\n        <TimelineItem label=\"2017-03-10\" lineType=\"dashed\">\n          The first milestone\n          <br />\n          <Typography.Text\n            type=\"secondary\"\n            style={{\n              fontSize: 12,\n              marginTop: 4,\n            }}\n          >\n            This is a descriptive message\n          </Typography.Text>\n        </TimelineItem>\n        <TimelineItem label=\"2018-05-12\" lineType=\"dashed\">\n          The second milestone\n          <br />\n          <Typography.Text\n            type=\"secondary\"\n            style={{\n              fontSize: 12,\n              marginTop: 4,\n            }}\n          >\n            This is a descriptive message\n          </Typography.Text>\n        </TimelineItem>\n        <TimelineItem label=\"2020-09-30\" lineType=\"dashed\">\n          The third milestone\n          <br />\n          <Typography.Text\n            type=\"secondary\"\n            style={{\n              fontSize: 12,\n              marginTop: 4,\n            }}\n          >\n            This is a descriptive message\n          </Typography.Text>\n        </TimelineItem>\n      </Timeline>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining the App Component - JavaScript\nDESCRIPTION: This snippet is the main 'App' component that integrates everything. It wraps the 'Table' component inside a 'StickyContainer', passing the column definitions and data while also specifying scroll and border properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/header-sticky.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <StickyContainer>\n      <Table\n        components={components}\n        scroll={{\n          y: true,\n        }}\n        border={{\n          wrapper: true,\n          cell: true,\n        }}\n        columns={columns}\n        data={data}\n      />\n    </StickyContainer>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Radio Group for Form Size Selection\nDESCRIPTION: Implements a Radio.Group component to allow interactive selection of form sizes with button-style radio buttons\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/size.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Radio.Group type=\"button\" value={size} onChange={setSize}>\n  <Radio value=\"mini\">mini</Radio>\n  <Radio value=\"small\">small</Radio>\n  <Radio value=\"default\">default</Radio>\n  <Radio value=\"large\">large</Radio>\n</Radio.Group>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Rate Component - React\nDESCRIPTION: Demonstrates the minimal setup required to use the Rate component from Arco Design. The example shows how to import and render a basic rating component without any customization.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Rate />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Component with Custom Trigger Region in React\nDESCRIPTION: This snippet demonstrates the usage of the Collapse component from Arco Design, specifically focusing on setting the triggerRegion prop to 'header'. It creates a collapsible panel with a custom header and content, including dividers for separation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/triggerRegion.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Collapse, Divider } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse\n      style={{ maxWidth: 1180 }}\n      defaultActiveKey={['1']}\n      triggerRegion=\"header\"\n    >\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n        <Divider style={{ margin: '8px 0' }}/>\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-to-Sort in Select Component\nDESCRIPTION: The Select component adds dragToSort property to support sorting the entered value by dragging.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Select dragToSort={true} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Layout Modes with Arco Design Descriptions Component in React\nDESCRIPTION: This code snippet demonstrates the usage of the Descriptions component from Arco Design with different layout modes. It imports the component, defines sample data, and renders four instances of Descriptions with different layouts, props, and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/__demo__/layout.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descriptions } from '@arco-design/web-react';\nconst data = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Date of Birth',\n    value: '2020-05-15',\n    span: 2,\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\nconst data2 = [\n  {\n    label: 'Name',\n    value: 'Socrates',\n  },\n  {\n    label: 'Hometown',\n    value: 'Beijing',\n  },\n  {\n    label: 'Mobile',\n    value: '123-1234-1234',\n  },\n  {\n    label: 'Date of Birth',\n    value: '2020-05-15',\n  },\n  {\n    label: 'Residence',\n    value: 'Beijing',\n  },\n  {\n    label: 'Gender',\n    value: 'Male',\n  },\n  {\n    label: 'Ethnicity',\n    value: 'Han',\n  },\n  {\n    label: 'Address',\n    value: 'Yingdu Building, Zhichun Road, Beijing',\n  },\n];\n\nconst App = () => {\n  return (\n    <div>\n      <Descriptions\n        title=\"Inline Horizontal\"\n        colon=\":\"\n        data={data.slice(0, 5)}\n        layout=\"inline-horizontal\"\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions\n        title=\"Horizontal\"\n        data={data}\n        layout=\"horizontal\"\n        border\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions\n        title=\"Vertical\"\n        data={data2}\n        layout=\"vertical\"\n        border\n        column={5}\n        style={{ marginBottom: 20 }}\n      />\n      <Descriptions\n        title=\"Inline Vertical\"\n        data={data2}\n        layout=\"inline-vertical\"\n        border\n        column={5}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker Component in Markdown\nDESCRIPTION: This snippet introduces the DatePicker component, describing its purpose and functionality. It's written in Markdown format.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\n组件 / 数据输入\n\n# 日期选择器 DatePicker\n\n选择日期。支持年、月、周、日类型，支持范围选择等。\n`````\n```\n\n----------------------------------------\n\nTITLE: Initializing Slider Component with Segmented Intervals\nDESCRIPTION: This code snippet demonstrates how to use the Slider component from @arco-design/web-react and configure segmented intervals using the `getIntervalConfig` prop.  It also shows how to use marks to create the segments and how to control slider properties via a form.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/interval.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, Switch, Form, Typography } from '@arco-design/web-react';\nconst defaultConfig = {\n  showTicks: false,\n  showInput: false,\n  onlyMarkValue: false,\n  reverse: false,\n};\nconst marks = {\n  0: '0km',\n  10: '10km',\n  20: '20km',\n  30: '30km',\n  50: '50km',\n};\n\nfunction App() {\n  const [config, setConfig] = useState(defaultConfig);\n  return (\n    <div style={{ width: 600 }}>\n      <Form\n        style={{ margin: '20px' }}\n        layout=\"inline\"\n        onValuesChange={(_, values) => {\n          setConfig(values);\n        }}\n      >\n        {Object.keys(defaultConfig).map((key) => (\n          <Form.Item\n            label={key}\n            field={key}\n            triggerPropName=\"checked\"\n            key={key}\n            initialValue={config[key]}\n          >\n            <Switch />\n          </Form.Item>\n        ))}\n      </Form>\n\n      <div style={{ marginBottom: 20 }}>\n        <Typography.Text bold>分段区间-滑动输入条</Typography.Text>\n        <Slider\n          {...config}\n          max={50}\n          defaultValue={10}\n          marks={marks}\n          getIntervalConfig={([begin, end]) => {\n            const interval = `${begin}~${end}`;\n\n            switch (interval) {\n              case `0~10`: {\n                return {\n                  width: '50%',\n                };\n              }\n\n              default:\n                return {\n                  step: (end - begin) / 5,\n                };\n            }\n          }}\n        />\n      </div>\n      <Typography.Text bold>未分段-滑动输入条</Typography.Text>\n      <Slider {...config} max={50} defaultValue={10} marks={marks} />\n    </div>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the ComponentConfig interface, which specifies the configuration options for various Arco Design components. It includes props for components like Affix, Alert, AutoComplete, and many others.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentConfig = {\n  Affix?: AffixProps;\n  Alert?: AlertProps;\n  AutoComplete?: AutoCompleteProps;\n  Avatar?: AvatarProps;\n  \"Avatar.Group\"?: AvatarGroupProps;\n  Anchor?: AnchorProps;\n  \"Anchor.Link\"?: AnchorLinkProps;\n  BackTop?: BackTopProps;\n  Badge?: BadgeProps;\n  Breadcrumb?: BreadcrumbProps;\n  Button?: ButtonProps;\n  Calendar?: CalendarProps;\n  Card?: CardProps;\n  Carousel?: CarouselProps;\n  Cascader?: CascaderProps;\n  Checkbox?: CheckboxProps;\n  Collapse?: CollapseProps;\n  Comment?: CommentProps;\n  ColorPicker?: ColorPickerProps;\n  DatePicker?: Omit<\n    DatePickerCommonProps,\n    | \"placeholder\"\n    | \"onChange\"\n    | \"onSelect\"\n    | \"onOk\"\n    | \"defaultPickerValue\"\n    | \"pickerValue\"\n    | \"onPickerValueChange\"\n    | \"inputProps\"\n  >;\n  Descriptions?: DescriptionsProps;\n  Divider?: DividerProps;\n  Drawer?: DrawerProps;\n  Dropdown?: DropdownProps;\n  \"Dropdown.Button\"?: DropdownButtonProps;\n  Empty?: EmptyProps;\n  \"Typography.Ellipsis\"?: TypographyEllipsisProps;\n  Form?: FormProps;\n  \"Grid.Row\"?: RowProps;\n  \"Grid.Col\"?: ColProps;\n  Grid?: GridProps;\n  \"Grid.GridItem\"?: GridItemProps;\n  Image?: ImageProps;\n  Input?: InputProps;\n  InputNumber?: InputNumberProps;\n  VerificationCode?: VerificationCodeProps;\n  Watermark?: WatermarkProps;\n  InputTag?: InputTagProps;\n  Layout?: LayoutProps;\n  Link?: LinkProps;\n  List?: ListProps;\n  \"List.Item\"?: ListItemProps;\n  Mentions?: MentionsProps;\n  Menu?: MenuProps;\n  Modal?: ModalProps;\n  PageHeader?: PageHeaderProps;\n  Pagination?: PaginationProps;\n  Popconfirm?: PopconfirmProps;\n  Popover?: PopoverProps;\n  Progress?: ProgressProps;\n  Radio?: RadioProps;\n  \"Radio.Group\"?: RadioGroupProps;\n  Rate?: RateProps;\n  ResizeBox?: ResizeBoxProps;\n  Result?: ResultProps;\n  Select?: SelectProps;\n  Skeleton?: SkeletonProps;\n  Slider?: SliderProps;\n  Space?: SpaceProps;\n  Spin?: SpinProps;\n  Statistic?: StatisticProps;\n  Steps?: StepsProps;\n  Switch?: SwitchProps;\n  Table?: TableProps;\n  Tabs?: TabsProps;\n  TreeProps?: TreeProps;\n  TriggerProps?: TriggerProps;\n  Tag?: TagProps;\n  Timeline?: TimelineProps;\n  \"Timeline.Item\"?: TimelineItemProps;\n  TimePicker?: TimePickerCommonProps;\n  Tooltip?: TooltipProps;\n  Transfer?: TransferProps;\n  Tree?: TreeProps;\n  TreeSelect?: TreeSelectProps;\n  Trigger?: TriggerProps;\n  Upload?: UploadProps;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty State in Arco Design using React\nDESCRIPTION: This JavaScript React snippet demonstrates how to use the Arco Design Empty component to display a customizable empty state with a custom icon and description. The `Empty` component is augmented with an `icon`, utilizing CSS-in-JS styling for the icon container, and a custom description text. Dependencies are `@arco-design/web-react` and `@arco-design/web-react/icon`. No specific parameters are needed beyond standard React props. Outputs an empty state UI when included in a React component tree.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Empty/__demo__/custom_icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Empty } from '@arco-design/web-react';\nimport { IconExclamation } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <Empty\n      icon={\n        <div\n          style={{\n            background: '#f2994b',\n            display: 'inline-flex',\n            borderRadius: '50%',\n            width: 50,\n            height: 50,\n            fontSize: 30,\n            alignItems: 'center',\n            color: 'white',\n            justifyContent: 'center',\n          }}\n        >\n          <IconExclamation />\n        </div>\n      }\n      description=\"No data, please reload!\"\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling a Collapsible Layout with CSS in ArcoDesign\nDESCRIPTION: CSS styles for the collapsible layout demo, providing styling for different layout components such as sidebar, header, content, and footer. It uses CSS variables from ArcoDesign's theming system for consistent color application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/customIcon.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.layout-collapse-demo {\n  height: 500px;\n  border: 1px solid var(--color-border);\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-sider .logo {\n  height: 32px;\n  margin: 12px 8px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.layout-collapse-demo .arco-layout-sider-light .logo {\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-footer,\n.layout-collapse-demo .arco-layout-content {\n  color: var(--color-white);\n  text-align: center;\n  font-stretch: condensed;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.layout-collapse-demo .arco-layout-footer {\n  color: var(--color-text-2);\n  height: 48px;\n  line-height: 48px;\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-content {\n  background: var(--color-bg-3);\n  color: var(--color-text-2);\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-header {\n  height: 64px;\n  line-height: 64px;\n  background: var(--color-bg-3);\n}\n\n.layout-collapse-demo .arco-layout-header .trigger {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Material Workspace with Arco CLI\nDESCRIPTION: Command to initialize a new React component workspace using the Arco CLI generator.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @arco-cli/generator new workspace-name\n```\n\n----------------------------------------\n\nTITLE: Defining LabeledValue Type in TypeScript\nDESCRIPTION: Defines the structure for labeled values in the Select component, containing a value and a label.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LabeledValue = {\n  value: string | number;\n  label: ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Deleting Tags with React\nDESCRIPTION: This React component enables the addition and deletion of tags dynamically. Users can enter new tags, which are then added to a list displayed on the interface. Required dependencies include React and components from the '@arco-design/web-react' library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/active.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tag, Button, Input, Message, Space } from '@arco-design/web-react';\nimport { IconPlus } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [tags, setTags] = useState(['Tag 1', 'Tag 2', 'Tag 3']);\n  const [showInput, setShowInput] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  function addTag() {\n    if (inputValue) {\n      tags.push(inputValue);\n      setTags(tags);\n      setInputValue('');\n    }\n\n    setShowInput(false);\n  }\n\n  function removeTag(removeTag) {\n    const newTags = tags.filter((tag) => tag !== removeTag);\n    setTags(newTags);\n  }\n\n  return (\n    <Space size={20}>\n      {tags.map((tag, index) => {\n        return (\n          <Tag\n            key={tag}\n            closable={index !== 0}\n            onClose={() => removeTag(tag)}\n          >\n            {tag}\n          </Tag>\n        );\n      })}\n      {showInput ? (\n        <Input\n          autoFocus\n          size=\"mini\"\n          value={inputValue}\n          style={{ width: 84 }}\n          onPressEnter={addTag}\n          onBlur={addTag}\n          onChange={setInputValue}\n        />\n      ) : (\n        <Tag\n          icon={<IconPlus />}\n          style={{\n            width: 84,\n            backgroundColor: 'var(--color-fill-2)',\n            border: '1px dashed var(--color-fill-3)',\n            cursor: 'pointer',\n          }}\n          className=\"add-tag\"\n          tabIndex={0}\n          onClick={() => setShowInput(true)}\n          onKeyDown={e => {\n            const keyCode = e.keyCode || e.which;\n            if (keyCode === 13) { // enter\n              setShowInput(true)\n            }\n          }}\n        >\n          Add Tag\n        </Tag>\n      )}\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Steps Component with Error Status in React\nDESCRIPTION: This code snippet showcases how to implement an Arco Design Steps component with a specified error status. The `status` prop is set to 'error', indicating an error state. The component also uses the `current` prop to mark the active step and includes Step components with titles and descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/error.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <Steps current={2} status=\"error\" style={{ maxWidth: 780, marginBottom: 40 }}>\n      <Step title=\"Succeeded\" description=\"This is a description\" />\n      <Step title=\"Processing\" description=\"This is a description\" />\n      <Step title=\"Pending\" description=\"This is a description\" />\n    </Steps>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Button Text in Arco Design Modals with React\nDESCRIPTION: This example demonstrates how to customize the OK and Cancel button text in various modal types using the Modal component from Arco Design. It shows three different modal scenarios: a standard modal, a confirmation modal with custom button text, and an information modal with customized action button.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/custom_button_text.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { Modal, Button, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const [visible, setVisible] = React.useState(false);\n\n  function confirm() {\n    Modal.confirm({\n      title: 'Confirm deletion',\n      content:\n        'Are you sure you want to delete the 3 selected items? Once you press the delete button, the items will be deleted immediately. You can\\'t undo this action.',\n      okText: 'OK',\n      cancelText: 'Cancel',\n    });\n  }\n\n  function openInfo() {\n    Modal.info({\n      title: 'Info Notification',\n      okText: 'got it',\n      content:\n        'This is an info description which directly indicates a neutral informative change or action. (e.g., \"We are providing new services for all developers.\") ',\n    });\n  }\n\n  return (\n    <Space>\n      <Button onClick={() => setVisible(true)} type=\"primary\">\n        Modal\n      </Button>\n      <Modal\n        title=\"Modal Title\"\n        visible={visible}\n        okText=\"ok\"\n        cancelText=\"Cancel\"\n        onOk={() => setVisible(false)}\n        onCancel={() => setVisible(false)}\n      >\n        <p>\n          You can customize modal body text by the current situation. This modal will be closed\n          immediately once you press the OK button.\n        </p>\n      </Modal>\n\n      <Button type=\"primary\" onClick={confirm}>\n        Confirm\n      </Button>\n\n      <Button type=\"primary\" onClick={openInfo}>\n        info\n      </Button>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Skeleton Component with Text Rows and Image in React\nDESCRIPTION: This snippet demonstrates how to use the Skeleton component from @arco-design/web-react to create a loading placeholder. It sets up 3 rows of text with varying widths and includes an image placeholder. This is useful for presenting a loading state in a React application while waiting for content to load.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/__demo__/rows.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Skeleton } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Skeleton\n      text={{\n        rows: 3,\n        width: ['100%', 600, 400],\n      }}\n      image\n    ></Skeleton>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Limited File Upload with Arco Design\nDESCRIPTION: Sets up a file upload component that limits the maximum number of files to 3. Uses the limit prop to restrict uploads and displays a warning message when the limit is exceeded. The component supports multiple file selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/limit.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload, Message } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Upload\n      action=\"/\"\n      limit={3}\n      multiple\n      onExceedLimit={() => {\n        Message.warning('超过上传数量限制！最多上传3个');\n      }}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Form Ref Usage\nDESCRIPTION: This code snippet demonstrates how to access the Form instance using `ref` in React. By assigning the ref to `this.form`, you can then use `this.form` to call form methods such as `validate`, `submit`, and `setFieldValue`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Form ref={(ref) => (this.form = ref)}>\n  <FormItem>...</FormItem>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Ellipsis Configuration for Text Truncation\nDESCRIPTION: Advanced configuration for handling text overflow and ellipsis behavior with multiple options for display and interaction\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EllipsisConfig {\n  cssEllipsis?: boolean;\n  rows?: number;\n  expandable?: boolean;\n  ellipsisStr?: string;\n  onEllipsis?: (isEllipsis: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ACCard for Color Palette Tool - React\nDESCRIPTION: This snippet implements a React component called ACCard, which serves as a user interface for a color palette tool. It allows users to easily configure a color palette and export it in multiple formats. The component includes props such as title, description, link, icon, and buttonText to define its appearance and functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/palette/md/header.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ACCard from '../../../widget/Card';\n\n<ACCard\n  title=\"Palette 色彩工具\"\n  description=\"使用颜色实用工具，轻松配置色板，一键导出多格式色彩文件。\"\n  link=\"/palette\"\n  icon=\"Palette\"\n  buttonText=\"立即使用\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Input with Arco Design Slider in JavaScript\nDESCRIPTION: The code demonstrates how to use the Slider component from '@arco-design/web-react' to display input boxes based on the showInput property. The Slider component can be configured to show input controls depending on specific properties like defaultValue and range. Dependencies include React and the '@arco-design/web-react' library. Key parameters are showInput, defaultValue, and style. The Slider supports both single-value and range configurations, and the input style can be customized.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/input.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Slider, Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <>\n      <Space size={60}>\n        <Slider defaultValue={80} showInput style={{ width: 280 }} />\n        <Slider defaultValue={[10, 80]} range showInput style={{ width: 360 }} />\n      </Space>\n      <Space style={{ marginTop: '20px' }} size={60}>\n        <Slider\n          defaultValue={80}\n          showInput={{\n            hideControl: false,\n            style: {\n              width: 80,\n            },\n          }}\n          style={{ width: 280 }}\n        />\n        <Slider\n          defaultValue={[10, 80]}\n          showInput={{\n            hideControl: false,\n            style: {\n              width: 80,\n            },\n          }}\n          range\n          style={{ width: 360 }}\n        />\n      </Space>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Divider Component and Content in CSS\nDESCRIPTION: This CSS snippet provides styles for the Divider component demo. It includes styles for the demo container, flex content, avatars, and custom half-divider. The styles ensure proper layout and visual appearance of the divider examples.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.divider-demo {\n  box-sizing: border-box;\n  width: 560px;\n  padding: 24px;\n  border: 30px solid rgb(var(--gray-2));\n}\n\n.divider-demo-flex-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.divider-demo .avatar {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  margin-right: 16px;\n  border-radius: 50%;\n  font-size: 16px;\n  background-color: var(--color-fill-3);\n  color: var(--color-text-2);\n}\n\n.divider-demo .content {\n  flex: 1;\n  font-size: 12px;\n  line-height: 20px;\n  color: var(--color-text-2);\n}\n\n.divider-demo .title {\n  margin-bottom: 2px;\n  font-size: 16px;\n  line-height: 24px;\n  color: #1d2129;\n}\n\n.divider-demo .half-divider {\n  left: 55px;\n  min-width: auto;\n  width: calc(100% - 55px);\n  margin: 16px 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Document Page Events with window.__registerArcoPreviewEventListener\nDESCRIPTION: This code snippet demonstrates how to use the `window.__registerArcoPreviewEventListener` method to listen to events on the component preview page.  It showcases listening to 'switchDarkMode' event and logging the event data. The listener function returns an UnregisterFn to remove the listener.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype EventType =\n// Inject the style configured by the component entries.extraStyles into the page\n| 'appendExtraStyle'\n// Dark mode switch\n| 'switchDarkMode'\n// Tab switch event when the component document is split by ArcoMDXPreviewSplit\n| 'switchActiveTab'\n// Page scrolling\n| 'scrollIntoView'\n// Update the offset of the right anchor relative to the top of the page\n| 'updateAnchorOffset';\n\n// Remove event listener function\ntype UnregisterFn = () => void;\n\n// Event listener function\ntype RegisterFn = (\neventType: EventType,\ncallback: (event: { type: EventType; data: any }) => void\n) => UnregisterFn;\n\n(window.__registerArcoPreviewEventListener as RegisterFn)?.('switchDarkMode', (event) => {\nconsole.log('switch dark mode', event);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for On-Demand Style Loading\nDESCRIPTION: Babel configuration using babel-plugin-import to enable on-demand loading of material styles for users.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .babelrc is added to the babel configuration\nplugins: [\n  [\n    'import',\n    {\n      libraryName: '@some-namespace/material-package-name',\n      libraryDirectory: 'es',\n      camel2DashComponentName: false,\n      // Load styles on demand\n      style: true,\n    },\n    'some-unique-name'\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualListProps Interface API for Tree Component\nDESCRIPTION: API documentation table describing the properties of the VirtualListProps interface used for virtual scrolling in the Tree component. It specifies configuration options for height, threshold, and item height behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|Default|\n|---|:---:|:---:|---:|\n|height|Viewable area height (`2.11.0` starts to support `string` type such as `80%`)|`number`| `200` |\n|threshold|The threshold of the number of elements that automatically enable virtual scrolling, pass in `null` to disable virtual scrolling.|`number` \\| `null`| `100` |\n|isStaticItemHeight|Whether it is a static element of the same height|`boolean`|`true`|\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Message Config with ConfigProvider in React\nDESCRIPTION: This React component demonstrates how to use ConfigProvider to apply local settings for Message and Notification components. It uses useMessage and useNotification hooks to create local instances, and compares the RTL view with the normal view.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/local-setting.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Button, Message, Space, ConfigProvider, Notification, Typography } from '@arco-design/web-react';\n\nfunction App() {\n  const [message, messageHolder] = Message.useMessage();\n  const [notification, notificationHolder] = Notification.useNotification();\n\n  return (\n    <Space direction=\"vertical\" size={20}>\n      <ConfigProvider rtl effectGlobalNotice={false} effectGlobalModal={false}>\n        <Typography.Title heading={6}> 局部 RTL 视图</Typography.Title>\n        <div className=\"demo-holder-wrapper\">\n          {messageHolder}\n          {notificationHolder}\n        </div>\n        <Space>\n          <Button\n            onClick={() => {\n              message.info && message.info('This is an info message!');\n            }}\n            type=\"primary\"\n          >\n            Open Message\n          </Button>\n          <Button\n            onClick={() => {\n            notification.info && notification.info({\n                closable: true,\n                title: 'Notification',\n                content: 'This is a notification!',\n              });\n            }}\n            type=\"primary\"\n          >\n            Open Notification\n          </Button>\n        </Space>\n      </ConfigProvider>\n      <div>\n        <Typography.Title heading={6}> 正常视图 </Typography.Title>\n        <Space>\n          <Button\n            onClick={() => {\n              Message.info('This is an info message!');\n            }}\n          >\n            Open Message\n          </Button>\n\n          <Button\n            onClick={() => {\n              Notification.info({\n                closable: true,\n                title: 'Notification',\n                content: 'This is a notification!',\n              });\n            }}\n          >\n            Open Notification\n          </Button>\n        </Space>\n      </div>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeBox.Split API in Markdown\nDESCRIPTION: Markdown table detailing the API for the ResizeBox.Split component, including parameters, types, descriptions, default values, and version information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|disabled|禁用|boolean |`-`|-|\n|component|分割框的 html 标签|string |`div`|-|\n|direction|分割方向分为水平 `horizontal` 和垂直 `vertical`，默认是水平分割|'horizontal' \\| 'vertical' \\| 'horizontal-reverse' \\| 'vertical-reverse' |`horizontal`|`reverse` in `2.35.0`|\n|icon|定制伸缩杆的图标|ReactNode |`-`|-|\n|trigger|定制伸缩杆的内容|ReactNode |`-`|-|\n|className|节点类名|string \\| string[] |`-`|-|\n|max|最大阈值|number \\| string |`-`|-|\n|min|最小阈值|number \\| string |`-`|-|\n|panes|面板，[firstPane, secondPane]|ReactNode[]  **(必填)**|`-`|-|\n|size|分割的大小，可以是 0~1 代表百分比，或具体数值的像素，如 300px|number \\| string |`0.5`|-|\n|style|节点样式|CSSProperties |`-`|-|\n|onMoving|拖拽中的回调|(e: MouseEvent, size: number \\| string) => void |`-`|`size` in `2.14.0`|\n|onMovingEnd|拖拽结束之后的回调|() => void |`-`|-|\n|onMovingStart|开始拖拽之前的回调|() => void |`-`|-|\n|onPaneResize|面板大小变化的回调|(paneContainers: HTMLElement[]) => void |`-`|2.25.0|\n```\n\n----------------------------------------\n\nTITLE: Implementing Site Hook in TypeScript\nDESCRIPTION: Shows the structure of a hook function that can be executed before site initialization, including type definitions for parameters.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// hooks/beforeAll.ts\ntype Params = {\n  // Current site language\n  language: string;\n};\n\nexport default function beforeAll({ language }: Params) {\n  // return Promise\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arco Design Table with Custom Expand Props\nDESCRIPTION: Configure a table with customized expansion behavior, including custom expand icons, column width, and row expansion conditions\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/expandprops.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nimport { IconRight, IconDown } from '@arco-design/web-react/icon';\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  // ... other data entries\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      expandedRowRender={(record) => record.email}\n      expandProps={{\n        icon: ({ expanded, record, ...restProps }) =>\n          expanded ? (\n            <button {...restProps}>\n              <IconDown />\n            </button>\n          ) : (\n            <button {...restProps}>\n              <IconRight />\n            </button>\n          ),\n        width: 60,\n        columnTitle: 'Expand',\n        rowExpandable: (record) => record.key !== '4',\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns and Data - JavaScript\nDESCRIPTION: This snippet defines the column structure for the table and populates it with example data. Each column is linked to specific fields in the data objects, such as 'name', 'salary', 'address', and 'email'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/header-sticky.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    address: '32 Park Road, London',\n    email: 'jane.doe@example.com',\n  },\n  {\n    key: '2',\n    name: 'Alisa Ross',\n    salary: 25000,\n    address: '35 Park Road, London',\n    email: 'alisa.ross@example.com',\n  },\n  {\n    key: '3',\n    name: 'Kevin Sandra',\n    salary: 22000,\n    address: '31 Park Road, London',\n    email: 'kevin.sandra@example.com',\n  },\n  {\n    key: '4',\n    name: 'Ed Hellen',\n    salary: 17000,\n    address: '42 Park Road, London',\n    email: 'ed.hellen@example.com',\n  },\n  {\n    key: '5',\n    name: 'William Smith',\n    salary: 27000,\n    address: '62 Park Road, London',\n    email: 'william.smith@example.com',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentType Type in TypeScript\nDESCRIPTION: This type definition specifies the acceptable types for components rendered within forms, either directly as intrinsic JSX elements or as custom React components, providing flexibility in form design.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentType =\n  | keyof JSX.IntrinsicElements\n  | React.ComponentType<any>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Statistics with Arco Design\nDESCRIPTION: This code snippet demonstrates how to use the `Statistic` component from `@arco-design/web-react` to display numerical data with titles and formatting options. It showcases the use of `groupSeparator`, `style`, `extra`, and `precision` props to customize the appearance of the statistics.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Statistic } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Statistic title=\"Downloads\" value={125670} groupSeparator style={{ marginRight: 60 }} />\n      <Statistic extra=\"Comments\" value={40509} groupSeparator precision={2} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Demoing Input Component Methods in React\nDESCRIPTION: Demonstrates how to use methods on input components in Arco Design. This example shows setting a ref to input and invoking focus and blur methods on an Input component. This requires React environment setup and Arco Design components installed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Input ref={(ref) => (this.input = ref)} />;\\n\\nthis.input.focus();\\nthis.input.blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Tags using Arco Design in JavaScript\nDESCRIPTION: This snippet showcases the use of the Arco Design InputTag component to dynamically display tags according to the container size. Dependencies include the `@arco-design/web-react` library. The `maxTagCount` property accepts a value of \"responsive\" or an object with custom rendering logic using `render` to handle overflow tags. The main input is an array of default tags, while the output displays tags adjusted to fit the available container size, with performance limitations when handling large numbers of tags.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/responsive-tag.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Space style={{marginBottom: 20}}>\n        <InputTag\n          style={{ width: 300 }}\n          placeholder=\"Please input\"\n          defaultValue={['label 1', 'label 2', 'label 3', 'label 4', 'label 5']}\n          maxTagCount=\"responsive\"\n        />\n        <InputTag\n          style={{ width: 300 }}\n          placeholder=\"Please input\"\n          defaultValue={['label 1', 'label 2', 'label 3', 'label 4', 'label 5']}\n          maxTagCount={{\n            count: 'responsive',\n            render: (invisibleTagCount) => <span style={{ marginLeft: 4, fontSize: 12 }}>+{invisibleTagCount} More</span>,\n          }}\n        />\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType TypeScript Interface\nDESCRIPTION: Defines the structure for tag objects with optional value, label, and closable properties\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar with Dropdown Header in Arco Design React\nDESCRIPTION: Shows how to create a Calendar component with a dropdown header type instead of the default switch header. The component is initialized with a default date and uses headerType='select' for dropdown navigation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Calendar/__demo__/select-header.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Calendar } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%', overflow: 'auto' }}>\n      <Calendar defaultValue=\"2020-04-01\" headerType=\"select\" />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Tasks in JSON\nDESCRIPTION: This JSON configuration specifies a post-build task for the Arco compiler service, allowing custom actions to be performed after the build process is complete.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  // 此配置项用于指定 TSCompilerESM / TSCompilerCJS 的默认行为\n  \"arco.service/compiler\": {\n    // 指定组件构建完成之后的后续任务，接收一个字符串，为脚本文件相对于 Arco 工作区根目录的路径\n    \"postBuild\": \"./postBuild.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DatePicker Shortcuts with Left Placement\nDESCRIPTION: Implements a DatePicker with custom shortcut options positioned on the left side, using dayjs for date calculations and Arco Design React components\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/__demo__/shortcuts-placement-left.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DatePicker } from '@arco-design/web-react';\nimport dayjs from 'dayjs';\n\nconst App = () => {\n  return (\n    <div>\n      <DatePicker\n        style={{ width: 254, marginBottom: 20 }}\n        shortcutsPlacementLeft\n        shortcuts={[\n          {\n            text: 'yesterday',\n            value: () => dayjs().subtract(1, 'day'),\n          },\n          {\n            text: 'today',\n            value: () => dayjs(),\n          },\n          {\n            text: 'a week later',\n            value: () => dayjs().add(1, 'week'),\n          },\n          {\n            text: 'a month later',\n            value: () => dayjs().add(1, 'month'),\n          },\n          {\n            text: '2 months later',\n            value: () => dayjs().add(2, 'month'),\n          },\n        ]}\n      />\n      <br />\n      <DatePicker.RangePicker\n        style={{ width: 300 }}\n        shortcutsPlacementLeft\n        shortcuts={[\n          {\n            text: 'next 2 days',\n            value: () => [dayjs(), dayjs().add(2, 'day')],\n          },\n          {\n            text: 'next 7 days',\n            value: () => [dayjs(), dayjs().add(1, 'week')],\n          },\n          {\n            text: 'next 30 days',\n            value: () => [dayjs(), dayjs().add(1, 'month')],\n          },\n          {\n            text: 'next 6 months',\n            value: () => [dayjs(), dayjs().add(6, 'month')],\n          },\n          {\n            text: 'next 12 months',\n            value: () => [dayjs(), dayjs().add(1, 'year')],\n          },\n          {\n            text: 'next 10 years',\n            value: () => [dayjs(), dayjs().add(10, 'year')],\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Columns with CSS in Arco Design\nDESCRIPTION: This CSS code provides styling for the grid columns within the Arco Design framework. It defines the height, text color, and background colors for the columns. The `nth-child` selector is used to apply alternating background colors to the columns.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/gutter.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-gutter-demo .arco-col {\n  height: 48px;\n  color: var(--color-white);\n}\n\n.grid-gutter-demo .arco-col > div {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.grid-gutter-demo .arco-col:nth-child(2n + 1) > div {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n\n.grid-gutter-demo .arco-col:nth-child(2n) > div {\n  background-color: var(--color-primary-light-4);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps Type in TypeScript\nDESCRIPTION: The AvailableVirtualListProps type specifies a subset of properties for virtual list functionality, allowing specification of dimensions and scroll options for a virtualized table component, enhancing performance for large datasets.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Render Checkbox with Tags and Cards in React\nDESCRIPTION: This snippet demonstrates how to create custom checkbox renderings using Arco Design components. It includes examples of checkbox groups with tags and card-like layouts, utilizing the 'children' prop as a render function.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/custom_render.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Checkbox, Tag, Space, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <div\n        style={{ marginBottom: 20 }}\n      >\n        <Checkbox.Group defaultValue={['Beijing']} >\n          {['Beijing', 'Shanghai', 'Guangzhou'].map((item) => {\n            return (\n              <Checkbox key={item} value={item}>\n                {({ checked }) => {\n                  return (\n                    <Tag key={item} color={checked ? 'arcoblue' : ''}>\n                      {item}\n                    </Tag>\n                  );\n                }}\n              </Checkbox>\n            );\n          })}\n        </Checkbox.Group>\n      </div>\n      <Checkbox.Group>\n        {[1, 2].map((item) => {\n          return (\n            <Checkbox key={item} value={item}>\n              {({ checked }) => {\n                return (\n                  <Space\n                    align=\"start\"\n                    className={`custom-checkbox-card ${\n                      checked ? 'custom-checkbox-card-checked' : ''\n                    }`}\n                  >\n                    <div className=\"custom-checkbox-card-mask\">\n                      <div className=\"custom-checkbox-card-mask-dot\"></div>\n                    </div>\n                    <div>\n                      <div className=\"custom-checkbox-card-title\">Checkbox Card {item}</div>\n                      <Typography.Text type=\"secondary\">this is a text</Typography.Text>\n                    </div>\n                  </Space>\n                );\n              }}\n            </Checkbox>\n          );\n        })}\n      </Checkbox.Group>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Typography Text Styling Options\nDESCRIPTION: Comprehensive set of styling and interaction properties for text components supporting various visual modifications\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TextStyles {\n  bold?: boolean;\n  code?: boolean;\n  delete?: boolean;\n  underline?: boolean;\n  type?: 'primary' | 'secondary' | 'success' | 'error' | 'warning';\n  mark?: boolean | { color: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Closing Modal with Method API in JavaScript\nDESCRIPTION: Example showing how to create, update, and close a modal dialog using Modal.info method. The returned object allows dynamically changing modal content or closing it programmatically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = Modal.info({ title: 'Info' });\ninfo.update({ title: 'Updated Title' });\ninfo.close();\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType Type in TypeScript\nDESCRIPTION: Defines the ObjectValueType type, representing the structure of object values used in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType Interface for Tree Component Field Mapping\nDESCRIPTION: TypeScript interface that allows customizing the field names used in the tree data structure. This enables using tree data that might have different property names than the defaults.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldNamesType = {\n  key?: string;\n  title?: string;\n  disabled?: string;\n  children?: string;\n  isLeaf?: string;\n  disableCheckbox?: string;\n  checkable?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Message Wrapper for Demo in CSS\nDESCRIPTION: This CSS snippet adjusts the positioning of the message wrapper in the demo. It sets the left property to 0 for the message wrapper within the demo holder wrapper.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__demo__/modal-setting.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-holder-wrapper .arco-message-wrapper {\n  left: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Component Configuration with ConfigProvider in React\nDESCRIPTION: This code snippet demonstrates how to import the componentConfig from a custom theme package and apply it using the ConfigProvider component from @arco-design/web-react. This allows for global configuration of component properties across the application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-config-provider.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider } from '@arco-design/web-react';\nimport { componentConfig } from '@arco-design/theme-line/config'; // you'r theme package name\n\nexport default () => {\n    return <ConfigProvider componentConfig={componentConfig}>\n      {...}\n    </ConfigProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Menu Demo Container with CSS\nDESCRIPTION: This CSS snippet styles the menu demo container with proper padding and background color. It also ensures the menu's inner content has scrollable overflow for cases when the menu content exceeds the container height.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/size.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Materials with Arco CLI\nDESCRIPTION: Command to build all materials within a workspace using Arco CLI's build functionality\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n## Build all materials in the workspace\n$ arco build\n```\n\n----------------------------------------\n\nTITLE: Configuring InputTag with Label In Value\nDESCRIPTION: Demonstrates how to configure an InputTag component to return label and value information using labelInValue prop\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/labelInValue.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InputTag } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <InputTag\n      allowClear\n      labelInValue\n      defaultValue={[\n        {\n          label: 'a',\n          value: '1',\n        },\n      ]}\n      placeholder=\"Please input\"\n      style={{ maxWidth: 350 }}\n      onChange={(v) => {\n        console.log(v);\n      }}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining UploadRequestReturn Interface\nDESCRIPTION: TypeScript interface for upload request return value with optional abort method.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface UploadRequestReturn {\n  abort?: () => void;\n  [key: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration - Resolving Arco Styles\nDESCRIPTION: This code shows how to modify the webpack less-loader configuration to resolve Arco Design style files. Specifically, it addresses the \"Can't resolve './@arco-design/web-react/es/style/theme/default.less'\" error by specifying the correct paths.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"// **解决方式：**通过修改 webpack less-loader 配置项解决，将查找路径指定为组件库实际安装的位置。其他打包工具类似，这个 `paths` 是 `less` 本身支持的属性。\n// ![image](https://p9-arcosite.byteimg.com/tos-cn-i-goo7wpa0wc/11403203bebb48c88e6bbb7d3243229f~tplv-goo7wpa0wc-image.image)\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Cascader Selected Values with renderFormat\nDESCRIPTION: Implementation of a Cascader component with custom value formatting. Uses renderFormat to join selected values with '>' delimiter. The example includes a nested options structure for locations in Beijing and Shanghai, with default selection and clear functionality enabled.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/format.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Cascader\n      placeholder=\"Please select ...\"\n      style={{ width: 300 }}\n      options={options}\n      defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n      renderFormat={(valueShow) => `${valueShow.join(' > ')}`}\n      allowClear\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Rate Component in React\nDESCRIPTION: Creates a read-only rating display using Arco Design's Rate component. The component is set to display a default value of 3.5 stars and allows half-star ratings through the allowHalf prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/readonly.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Rate readonly defaultValue={3.5} allowHalf />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Slider component in a markdown table format. It includes properties such as disabled, onlyMarkValue, reverse, showTicks, tooltipVisible, vertical, max, min, step, tooltipPosition, formatTooltip, className, defaultValue, marks, range, showInput, style, value, getIntervalConfig, getTooltipContainer, onAfterChange, and onChange.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|Version|\n|---|---|---|---|---|\n|disabled|Whether to disable the component|boolean |`-`|-|\n|onlyMarkValue|Whether only the mark value can be selected|boolean |`-`|-|\n|reverse|Reverse axis, default `true` in `rtl`|boolean |`-`|-|\n|showTicks|Whether to display step tick marks|boolean |`-`|-|\n|tooltipVisible|If true, `Tooltip` will show always, or it will hidden anyway,even if dragging or hovering|boolean |`-`|-|\n|vertical|Whether to display the slider in the vertical direction|boolean |`-`|-|\n|max|Maximum value of sliding range|number |`100`|-|\n|min|Minimum value of sliding range|number |`0`|-|\n|step|Slide the value of one step|number |`1`|-|\n|tooltipPosition|The position of the tooltip|\\| 'top'\\| 'tl'\\| 'tr'\\| 'bottom'\\| 'bl'\\| 'br'\\| 'left'\\| 'lt'\\| 'lb'\\| 'right'\\| 'rt'\\| 'rb' |`-`|-|\n|formatTooltip|Format the content of `tooltip`|(value: number) => string \\| ReactNode |`-`|-|\n|className|Additional css class|string \\| string[] |`-`|-|\n|defaultValue|To set default value|number \\| number[] |`-`|-|\n|marks|The labels on the render ruler. `marks` is an Object, it's `key` is an integer within [min, max].|Record&lt;number, ReactNode&gt; |`-`|-|\n|range|Whether to allow range selection|boolean \\| { draggableBar: boolean } |`-`|2.14.0|\n|showInput|Whether to display the input box. When setting `onlyMarkValue` to `true` or selecting multiple points within the range, the input box will never be displayed. Accepts `props` for `InputNumber`.|boolean \\| [InputNumberProps](input-number#inputnumber) \\| [InputNumberProps](input-number#inputnumber)[] |`-`|`InputNumberProps` in `2.32.0`|\n|style|Additional style|CSSProperties |`-`|-|\n|value|To set value|number \\| number[] |`-`|-|\n|getIntervalConfig|For interval configuration, returns the interval step size and the ratio of the width relative to the entire sliding axis (e.g. 0.5 or \"50%\"). **Only valid in `marks` scene**|(range: number[],index: number) => { step?: number; width?: number \\| string } |`-`|2.30.0|\n|getTooltipContainer|The parent node which the `tooltip` will be rendered to|() => Element |`-`|-|\n|onAfterChange|Callback when `onmouseup` is fired|(val: number \\| number[]) => void |`-`|2.20.0|\n|onChange|Callback when the user changed the slider's value|(val: number \\| number[]) => void |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Spin: Setting Different Sizes\nDESCRIPTION: This code snippet shows how to use the `size` property of the `Spin` component from `@arco-design/web-react` to create loading icons with different sizes (20, 30, and 40). It places these Spin components within a `Space` component to provide spacing between them. The `Space` component's size is set to 40.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Spin, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Spin size={20} />\n      <Spin size={30} />\n      <Spin size={40} />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lineless Mode in Arco Design Anchor Component\nDESCRIPTION: This code demonstrates how to create an Anchor component without the left axis line by setting the lineless prop to true. The example includes multiple anchor links with different destinations. The affix property is set to false to prevent the component from sticking to the viewport during scrolling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/lineless.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor affix={false} lineless>\n      <AnchorLink href=\"#Basic\" title=\"Basic\" />\n      <AnchorLink href=\"#Static\" title=\"Static\" />\n      <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n      <AnchorLink href=\"#Affix\" title=\"Affix\" />\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ShortcutType Interface in TypeScript\nDESCRIPTION: Definition of the ShortcutType interface used in DatePicker props. It includes text and value properties, along with any additional record entries.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ShortcutType = {\n  text: ReactNode;\n  value: () => Dayjs | Dayjs[];\n} & Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Upload with Arco Design Upload Component\nDESCRIPTION: A React component example showing how to set up directory upload functionality using Arco Design's Upload component. The component is configured with the directory prop and points to the root path as the upload destination.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/directory.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Upload } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n        <Upload directory action=\"/\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: CSS Style Declaration for User Overrides\nDESCRIPTION: This CSS code example shows a declaration using normal class names, allowing users to override styles via class name selectors. It contrasts with CSS Modules, which obscure class names and complicate user style overrides.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.arco-btn {\nfont-size: 12px;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Comments for react-docgen-typescript\nDESCRIPTION: This snippet shows how to write comments in TypeScript for use with the `react-docgen-typescript` tool. It highlights the requirements for TSDoc-style comments, exporting components as constants, and declaring default values using `Component.defaultProps`.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonProps {\n  /**\n   * Button size\n   */\n  size?:'mini' |'small' |'default' |'large';\n  /**\n   * Button state\n   */\n  status?:'danger' |'error' |'success';\n}\n\n// Need to declare Button as const and export, otherwise the tool may not recognize\nexport const Button = (props: ButtonProps) => {\n  ...\n};\n\n// Only the default value declared with defaultProps can be extracted by the tool\nButton.defaultProps = {\n  size:'default';\n};\n\nexport default Button;\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Methods in React with Refs\nDESCRIPTION: This code snippet demonstrates how to access the `focus` and `blur` methods of the Input component using React refs. A ref is created and assigned to the Input component, allowing programmatic control over the input field's focus.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Input ref={(ref) => (this.input = ref)} />;\n\nthis.input.focus();\nthis.input.blur();\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascader with Empty Children Display in React\nDESCRIPTION: A React component demonstrating the Cascader's showEmptyChildren functionality. Uses a hierarchical data structure for location selection and includes a checkbox to toggle the display of empty child menus. The component uses the @arco-design/web-react library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/showEmptyChildren.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Cascader, Checkbox } from '@arco-design/web-react';\n\nconst options = [\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n            children: [],\n          },\n          {\n            value: 'jingan',\n            label: 'Jingan',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [],\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const [checked, setChecked] = React.useState(false);\n  const [value, setValue] = React.useState();\n  return (\n    <div>\n      <div style={{ marginBottom: 20 }}>\n        <Checkbox\n          onChange={(v) => {\n            setChecked(v);\n            setValue();\n          }}\n        >\n          showEmptyChildren\n        </Checkbox>\n      </div>\n      <Cascader\n        showSearch\n        allowClear\n        value={value}\n        onChange={setValue}\n        placeholder=\"Please select ...\"\n        showEmptyChildren={checked}\n        style={{ width: 300 }}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Demo in CSS\nDESCRIPTION: This CSS snippet provides custom styling for a dropdown demo component using Arco Design. It ensures the dropdown button's padding and font weight are set, and the dropdown icon rotates when visible. Ensure styles apply within the context of the application's component tree.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/group.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Less Variables in ArcoDesign\nDESCRIPTION: This diff snippet shows how to configure the 'prefix' parameter in Less through 'modifyVars' in the webpack configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  rules: [{\n    test: /\\.less$/,\n    use: [{\n      loader: 'style-loader',\n    }, {\n      loader: 'css-loader',\n    }, {\n      loader: 'less-loader',\n+     options: {\n+       modifyVars: {\n+         prefix: 'byte',\n+       },\n+       javascriptEnabled: true\n+     },\n    }],\n    ...\n  }],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Interface in TypeScript\nDESCRIPTION: This code snippet defines the Locale interface, which specifies the structure for localization settings in Arco Design. It includes properties for various components and their localized strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Locale {\n  locale: string;\n  dayjsLocale?: string;\n  Calendar: CalendarType;\n  DatePicker: {\n    Calendar: CalendarType;\n    [key: string]: any;\n  };\n  Drawer: Record<string, any>;\n  Empty: Record<string, any>;\n  Modal: Record<string, any>;\n  Pagination: Record<string, any>;\n  Popconfirm: Record<string, any>;\n  Table: Record<string, any>;\n  TimePicker: Record<string, any>;\n  Upload: Record<string, any>;\n  Progress: Record<string, any>;\n  Typography: Record<string, any>;\n  Transfer: Record<string, any>;\n  ImagePreview: Record<string, any>;\n  Form?: Record<string, any>;\n  ColorPicker: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using TimePicker Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the TimePicker component from the @arco-design/web-react library in a functional React component. It utilizes the useState hook to manage the selected time value, ensuring that the TimePicker operates as a controlled component. Inputs are handled via the onChange method, which updates the state with the chosen time.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { TimePicker } from '@arco-design/web-react';\n\nfunction App() {\n  const [value, setValue] = useState();\n  return (\n    <TimePicker\n      style={{ width: 194 }}\n      value={value}\n      onChange={(valueString) => setValue(valueString)}\n    />\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Typography Component Introduction in Chinese\nDESCRIPTION: Markdown content introducing the Typography component's purpose for displaying titles, paragraphs, and text content\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n组件 / 通用\n\n# 排版 Typography\n\n用于展示标题、段落、文本内容。\n```\n\n----------------------------------------\n\nTITLE: Creating Borderless Cards with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create borderless cards using the Arco Design library's Card component in a React application. It shows two card variations: a standard card and a hoverable card, both without borders. The cards are arranged using the Space component for layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/no-border.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Card, Link, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space\n      style={{\n        padding: 40,\n        backgroundColor: 'var(--color-fill-2)',\n      }}\n      size=\"large\"\n    >\n      <Card\n        style={{ width: 360 }}\n        title=\"Arco Card\"\n        extra={<Link>More</Link>}\n        bordered={false}\n      >\n        Card content\n        <br />\n        Card content\n      </Card>\n      <Card\n        style={{ width: 360 }}\n        title=\"Hover me\"\n        hoverable\n        extra={<Link>More</Link>}\n        bordered={false}\n      >\n        Card content\n        <br />\n        Card content\n      </Card>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining SorterInfo Interface in TypeScript\nDESCRIPTION: The SorterInfo interface defines the structure for sorting metadata, which includes direction, field, sorter function, and priority. This structure is essential for implementing sorting functionality in table interactions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SorterInfo {\n  direction?: SortDirection;\n  field?: string | number;\n  sorterFn?: SorterFn;\n  priority?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionOnClick Type for Tree Component in TypeScript\nDESCRIPTION: Type definition for the actionOnClick property of the Tree component, specifying what action should be taken when a node is clicked.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionOnClick = \"select\" | \"check\" | \"expand\";\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Meta Component API in Markdown\nDESCRIPTION: This snippet details the API for the Card.Meta subcomponent, which is used for displaying meta information within a card.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Meta\n\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|avatar|头像|ReactNode |`-`|\n|description|描述|string \\| ReactNode |`-`|\n|title|标题|string \\| ReactNode |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|style|节点样式|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Styling Arco Design Layout Components with CSS\nDESCRIPTION: Provides CSS styling for the layout components to visually distinguish different sections. Defines colors, alignment, and dimensions for headers, footers, sidebars, and content areas using Arco Design's CSS variables for consistent theming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.layout-basic-demo .arco-layout-header,\n.layout-basic-demo .arco-layout-footer,\n.layout-basic-demo .arco-layout-sider,\n.layout-basic-demo .arco-layout-sider-children,\n.layout-basic-demo .arco-layout-content {\n  color: var(--color-white);\n  text-align: center;\n  font-stretch: condensed;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.layout-basic-demo .arco-layout-header,\n.layout-basic-demo .arco-layout-footer {\n  height: 64px;\n  background-color: var(--color-primary-light-4);\n}\n\n.layout-basic-demo .arco-layout-sider {\n  width: 206px;\n  background-color: var(--color-primary-light-3);\n}\n\n.layout-basic-demo .arco-layout-content {\n  background-color: rgb(var(--arcoblue-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Row and Header Row Events in Table Component\nDESCRIPTION: This code snippet demonstrates how to handle various events on table rows and header rows in the Arco Design Table component. It shows how to define event handlers for click, double click, context menu, mouse enter, and mouse leave events for both the body rows and the header rows. The `onRow` and `onHeaderRow` props accept a function that returns an object containing the event handlers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Table\n  onRow={(record, index) => {\n    return {\n      onClick: (event) => {}, // Click on the body row\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n  onHeaderRow={(column, index) => {\n    return {\n      onClick: (event) => {}, // Click on the head row\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Message Duration in Arco Design with React\nDESCRIPTION: This code demonstrates how to update an existing Message component by specifying the same id. It first displays a loading message that lasts for 3 seconds, then updates it to a success message after 2 seconds. The example uses the Arco Design UI library with React.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/update_duration.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message, Button } from '@arco-design/web-react';\n\nfunction updateMessage() {\n  Message.loading({\n    id: 'need_update',\n    content: 'Will update after 2 seconds...',\n    duration: 3000,\n  });\n  setTimeout(() => {\n    Message.success({\n      id: 'need_update',\n      content: 'Will update after 3 seconds!',\n      duration: 3000,\n    });\n  }, 2000);\n}\n\nconst App = () => {\n  return (\n    <Button onClick={updateMessage} type=\"primary\">\n      Update message\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for SVG Icon Support\nDESCRIPTION: Webpack configuration to enable SVG import using @svgr/webpack for custom icon processing\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  test: /\\.svg$/,\n  use: ['@svgr/webpack'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Tasks in JSONC\nDESCRIPTION: Configuration for specifying tasks to execute after component builds are completed. The postBuild option allows customizing subsequent tasks by specifying a script path relative to the workspace root.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n// arco.workspace.jsonc\n{\n// This configuration item is used to specify the default behavior of TSCompilerESM / TSCompilerCJS\n\"arco.service/compiler\": {\n// Specify the subsequent tasks after the component is built, receive a string, which is the path of the script file relative to the root directory of the Arco workspace\n\"postBuild\": './postBuild.js'\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Tooltip with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to use the Slider component from Arco Design and customize its tooltip content using the formatTooltip prop. The formatter function adds a percentage sign to the slider value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/format-tooltip.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Slider } from '@arco-design/web-react';\n\nfunction App() {\n  function formatTooltip(val) {\n    return <span>{val}%</span>;\n  }\n\n  return (\n    <div style={{ width: 200 }}>\n      <Slider defaultValue={20} formatTooltip={formatTooltip} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Arco Design Button Component in React\nDESCRIPTION: Example of how to import and use the Arco Design Button component in a React application. It demonstrates importing the component, its styles, and rendering a secondary button.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from '@arco-design/web-react';\nimport '@arco-design/web-react/dist/css/arco.css';\n\nfunction App() {\n  return (\n    <Button type='secondary'>\n      Hello World\n    </Button>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Defining OptionInfo Interface in TypeScript\nDESCRIPTION: Defines the structure for option information, extending OptionProps with additional properties for internal use.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface OptionInfo extends PropsWithChildren<OptionProps> {\n  child?: ReactElement;\n  _valid: boolean;\n  _index: number;\n  _origin: \"children\" | \"options\" | \"userCreatedOptions\" | \"userCreatingOption\";\n}\n```\n\n----------------------------------------\n\nTITLE: Updating NPM Package for ArcoDesign v2 in Bash\nDESCRIPTION: This command removes the old ByteDesign package and installs the new ArcoDesign package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove @bytedesign/web-react && npm i @arco-design/web-react\n```\n\n----------------------------------------\n\nTITLE: Using Empty Component with Arco Design in React\nDESCRIPTION: This snippet showcases how to import and use the Empty component from the Arco Design library in a React application. It requires the '@arco-design/web-react' package. The code initializes the component within a React functional component and renders it. Key functionality involves rendering the Empty component, which is typically used to signify an empty state in the UI.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Empty/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Empty } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Empty />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Switch Properties in React with TypeScript\nDESCRIPTION: Describes the configuration options and prop types for the Switch component, including checked state, disabled mode, size, and styling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Switch/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SwitchProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  disabled?: boolean;\n  loading?: boolean;\n  size?: 'small' | 'default';\n  type?: 'circle' | 'round' | 'line';\n  checkedIcon?: ReactNode;\n  checkedText?: ReactNode;\n  uncheckedIcon?: ReactNode;\n  uncheckedText?: ReactNode;\n  className?: string | string[];\n  style?: CSSProperties;\n  onChange?: (value: boolean, event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding onSelect Callback to Select Component\nDESCRIPTION: Demonstrates how to use the onSelect callback in multi-select mode of the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nonSelect\n```\n\n----------------------------------------\n\nTITLE: Rendering TimePicker Arco Design JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and use the TimePicker component from the '@arco-design/web-react' library in a React application. The TimePicker is rendered with a specified style width of 194 pixels. This snippet does not have any parameters, but it is essential to have the 'arco-design' library installed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TimePicker } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <TimePicker style={{ width: 194 }} />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Dialog with Steps in CSS\nDESCRIPTION: This CSS snippet provides styling for the modal dialog, specifically removing the default padding from the modal content. This customization is necessary for creating a consistent look and spacing within the dialog interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__demo__/with_step.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.modal-demo-without-content-spacing .arco-modal-content {\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering components using Arco CLI commands\nDESCRIPTION: This set of bash commands demonstrates how to filter components when using Arco CLI commands like `start`. It shows different filtering rules, including substring matching, glob patterns, and exact matching.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\n## 默认过滤规则为组件 ID 包含给定的字符\n## 将得到 library/Button、library/ButtonPro\narco start library\n\n## 规则中包含 * 字符时，将通过 Glob 规则进行过滤\n## 将得到 library/Button、library/ButtonPro\narco start Button*\n\n## 手动指定过滤规则（CLI Version >= 2.4.1）\n\n## is: 进行精确匹配，将得到 library/Button\narco start is:library/Button\n## reg: 进行正则匹配，将得到 library/Button、library/ButtonPro\narco start reg:Button$\n## glob: 进行 Glob 匹配，将得到 library/Button、library/ButtonPro\narco start glob:library/*\n\n## 多个过滤规则之间可以通过逗号分隔\narco start reg:Button$,ButtonPro$\narco start is:library/Button,pro-table/Table\n```\n\n----------------------------------------\n\nTITLE: Defining CarouselHandle Type in JavaScript\nDESCRIPTION: This code snippet defines the CarouselHandle type, which includes methods for manipulating the Carousel component. It specifies the structure of the dom element and the goto function for navigating between slides.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport type CarouselHandle = {\n  dom: HTMLElement;\n  goto: (options: {\n    /** 目标索引 */\n    index: number;\n    /** 是否为逆向 */\n    isNegative?: boolean;\n    /** 是否由用户触发，将决定 onChange 回调的第三个参数 */\n    isManual?: boolean;\n    /** 是否重置自动播放的 interval */\n    resetAutoPlayInterval?: boolean;\n  }) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Standalone Badges with Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to use the Badge component from Arco Design as a standalone element. It shows various configurations including different counts, custom styling, and maximum count display. The Space component is used to arrange the badges with consistent spacing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/__demo__/no-children.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Badge, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Badge count={2} />\n      <Badge\n        count={2}\n        dotStyle={{ background: '#E5E6EB', color: '#86909C' }}\n      />\n      <Badge count={16} />\n      <Badge maxCount={99} count={1000} />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Cascader Dropdown Menu with Arco Design in React\nDESCRIPTION: This snippet demonstrates how to use the Cascader component from Arco Design with custom dropdown rendering. It includes two examples: one using dropdownRender to add a footer to the entire menu, and another using dropdownColumnRender to add a footer to each column of the cascading menu. The code also defines a set of nested options for the Cascader.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/dropdown.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Divider, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ width: 300 }}\n        options={options}\n        dropdownRender={(menu) => {\n          return (\n            <div>\n              {menu}\n              <Divider style={{ margin: 0 }} />\n              <div style={{ margin: 4 }}>\n                The footer content\n              </div>\n            </div>\n          );\n        }}\n      />\n      <Cascader\n        style={{ width: 300 }}\n        dropdownColumnRender={(menu, level) => {\n          return (\n            <div\n              style={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              <div style={{ flex: 1 }} >\n                {menu}\n              </div>\n              <Divider style={{ margin: 0 }}/>\n              <div style={{ margin: 4 }}>\n                The footer content(Level {level})\n              </div>\n            </div>\n          );\n        }}\n        options={options}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling the Collapsed Menu Component with CSS\nDESCRIPTION: This CSS snippet styles the menu demo component. It sets the box-sizing, width, padding, and background color for the menu. Additionally, it manages the overflow behavior of the inner menu to allow for scrolling when necessary. No external dependencies are required beyond standard CSS.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/collapse-control.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Outer Layer Height Issue in Select Component - TypeScript\nDESCRIPTION: This snippet corrects an issue with the height of the outer layer of the Select component's div when the value is an empty string, ensuring the UI appears as intended regardless of the component's state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the problem that the height of the outer layer of the `div` is stretched out when the `value` of the `Select` component is an empty string and there is an extra height.\n```\n\n----------------------------------------\n\nTITLE: Customizing Style Build Process with PostCSS in JavaScript\nDESCRIPTION: Example of extending the Less/Sass compilation process to apply additional processing. This configuration shows how to preprocess style files by adding content before compilation and applying PostCSS transformations after compilation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst postcss = require('postcss');\nconst prefixer = require('postcss-prefixer');\n\n// arco.env.config.js\nmodule.exports = function () {\nreturn {\nless: {\n// Extend the compilation process through this field\ncompile: async (file, defaultCompileFn) => {\n// Add content to the less file before compiling by overriding the getContents function\nconst compiledLess = await defaultCompileFn({\n...file,\ngetContents: () => `/** contents prepend to less file */\\n${file.getContents()}`,\n});\n\n// Process the compiled less file, for example, add a unified class name prefix to it\nconst result = await postcss([\nprefixer({\nprefix: 'custom-prefix-',\nignore: ['arco-'],\n}),\n]).process(compiledLess, { from: undefined });\nreturn result.css;\n},\n},\nsass: {\n// Same as less configuration\ncompile: async () => {},\n},\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Feature Evolution\nDESCRIPTION: Track the progression of features and improvements in the Arco Design Tabs component across multiple releases\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Changelog Highlights\n- Custom underline size support\n- Tab header content customization\n- Scroll interaction improvements\n- RTL and styling fixes\n```\n\n----------------------------------------\n\nTITLE: Rendering Routes using Switch and Route\nDESCRIPTION: This code snippet uses React Router's `<Switch>` and `<Route>` components to render the routes. It iterates through the `flattenRoutes` array and creates a `<Route>` for each route, mapping the route's `key` to a path and rendering the corresponding `component`.  The `<Redirect>` component redirects to a default route if no other route matches.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Switch>\n  {flattenRoutes.map((route) => {\n    return <Route key={route.key} path={`/${route.key}`} component={route.component} />;\n  })}\n  <Redirect push to={`/${defaultRoute}`} />\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Collapse.Item Component\nDESCRIPTION: Type definitions for the Collapse.Item subcomponent properties including content destruction, disable state, custom icons, and styling options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollapseItemProps {\n  destroyOnHide?: boolean;\n  disabled?: boolean;\n  showExpandIcon?: boolean;\n  name: string;\n  expandIcon?: ReactNode;\n  extra?: ReactNode;\n  header?: ReactNode;\n  className?: string | string[];\n  contentStyle?: CSSProperties;\n  style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: List Component API Properties in Markdown\nDESCRIPTION: Markdown table displaying the ListGridProps properties, including gutter, span, and responsive span options (xs, sm, md, lg, xl, xxl).\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|Default|\n|---|:---:|:---:|---:|\n|gutter|Spacing between grids|`number`|`-`|\n|span|Raster number of cells to occupy|`number`|`-`|\n|xs|`span` for `xs`|`number`|`-`|\n|sm|`span` for `sm`|`number`|`-`|\n|md|`span` for `md`|`number`|`-`|\n|lg|`span` for `lg`|`number`|`-`|\n|xl|`span` for `xl`|`number`|`-`|\n|xxl|`span` for `xxl`|`number`|`-`|\n```\n\n----------------------------------------\n\nTITLE: Styling for Responsive Layout with CSS Variables in Arco Design\nDESCRIPTION: CSS styles for the responsive layout demo that uses Arco Design CSS variables for theming. The styles define the appearance of the layout components including the sidebar, logo, header, content, and footer with appropriate spacing, colors, and typography.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/breakpoint.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.layout-collapse-demo {\n  height: 500px;\n  border: 1px solid var(--color-border);\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-sider .logo {\n  height: 32px;\n  margin: 12px 8px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.layout-collapse-demo .arco-layout-sider-light .logo {\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-footer,\n.layout-collapse-demo .arco-layout-content {\n  color: var(--color-white);\n  text-align: center;\n  font-stretch: condensed;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.layout-collapse-demo .arco-layout-footer {\n  color: var(--color-text-2);\n  height: 48px;\n  line-height: 48px;\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-content {\n  background: var(--color-bg-3);\n  color: var(--color-text-2);\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-header {\n  height: 64px;\n  line-height: 64px;\n  background: var(--color-bg-3);\n}\n\n.layout-collapse-demo .arco-layout-header .trigger {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance with Ref in React\nDESCRIPTION: Example of how to access form instance methods by storing the form reference. This allows access to validation, value setting, and other form operations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Form ref={(ref) => (this.form = ref)}>\n  <FormItem>...</FormItem>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: package.json - Resolving React Types Versions\nDESCRIPTION: This code snippet shows the resolutions section in package.json file, it forces a single version of @types/react to resolve conflicts due to multiple versions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\" \\\"resolutions\\\": {\n    \\\"@types/react\\\": \\\"^17.0.0\\\"\n }\"\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason in JavaScript\nDESCRIPTION: Enumerates the reasons for changes in input values as a type, including manual entry and option selection. Used in callbacks for input change handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 造成输入框值改变的原因：用户输入、选中选项、选项下拉框收起\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionChecked\"\n  | \"optionListHide\";\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for On-Demand Icon Loading\nDESCRIPTION: This code demonstrates the configuration required for babel-plugin-import to load icons on demand for the Arco Design React library. By setting `libraryName` to `@arco-design/web-react/icon` and `libraryDirectory` to `react-icon`, only the necessary icons for the imported components will be included in the bundle, reducing the overall bundle size.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n  [\n    'babel-plugin-import',\n    {\n      libraryName: '@arco-design/web-react/icon',\n      libraryDirectory: 'react-icon',\n      camel2DashComponentName: false,\n    },\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ColorPickerMode Enum in TypeScript\nDESCRIPTION: This snippet defines the ColorPickerMode enum used in the ColorPicker component. It specifies the available modes for color picking: Single and Gradient.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum ColorPickerMode {\n  Single = \"single\",\n  Gradient = \"gradient\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Parser\nDESCRIPTION: This JavaScript code configures the TypeScript parser used by arco-scripts for documentation generation. It allows specifying either `ts-document` or `react-docgen-typescript` as the parsing tool. The `tsParseTool` property determines which tool will be used.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/docgen.config.js\nmodule.exports = (config) => {\n  ...\n  // ['react-docgen-typescript'] 为默认值\n  config.tsParseTool = ['ts-document']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Steps Component with Hidden Connection Lines\nDESCRIPTION: Creates a Steps component with three steps and disables connection lines using the `lineless` prop. Sets the current step to index 2 and applies a max-width style.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__demo__/lineless.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@arco-design/web-react';\nconst Step = Steps.Step;\n\nconst App = () => {\n  return (\n    <Steps lineless current={2} style={{ maxWidth: 780, marginBottom: 40 }}>\n      <Step title=\"Succeeded\" description=\"This is a description\" />\n      <Step title=\"Processing\" description=\"This is a description\" />\n      <Step title=\"Pending\" description=\"This is a description\" />\n    </Steps>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Globally\nDESCRIPTION: Demonstrates how to configure the Modal component globally using `Modal.config`. This allows setting default properties such as `prefixCls` and `simple` for all Modal instances. Useful for applying consistent styling or behavior across the application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nModal.config({\n  // Custom prefix\n  prefixCls: 'arco',\n  // Display in Simple Mode\n  simple: true\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Options in Single-select React Select\nDESCRIPTION: New allowCreate prop enables creating new options by typing in single-select mode.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select allowCreate={true}>\n  {/* Existing options */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Dropdown Button\nDESCRIPTION: These CSS styles customize the appearance of the dropdown button component. It modifies the padding and font weight of the button, and it rotates the dropdown icon when the dropdown menu is visible. It relies on the `.arco-btn`, `.arco-dropdown-popup-visible`, and `.arco-icon-down` class names provided by the Arco Design library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/dropdown-button.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Component with CSS\nDESCRIPTION: This snippet provides CSS styles for the dropdown component, focusing on button padding and hover states for the dropdown icon. The styles are meant to enhance the visual presentation of the dropdown button in the demo application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Obscured Delete Button in Multi-Select - TypeScript\nDESCRIPTION: This snippet fixes an issue where the delete button is obscured when the tag text is too long in multi-select mode, enhancing accessibility and user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the delete button is obscured when the tag text is too long in the multi-select mode of the `Select` component.\n```\n\n----------------------------------------\n\nTITLE: Multiple Select with Custom Option Creation Formatter\nDESCRIPTION: Shows a multiple select component with advanced option creation, including a custom formatter to modify the appearance of newly created options\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/allow-create.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Select\n  allowClear\n  mode=\"multiple\"\n  placeholder=\"Create an item\"\n  defaultValue={['a10', 'b11']}\n  allowCreate={{\n    formatter: (inputValue, creating) => {\n      return {\n        value: inputValue,\n        label: `${creating ? 'Enter to create: ' : 'Created: '}${inputValue}`\n      };\n    },\n  }}\n  style={{ width: 345 }}\n>\n  {options.map((option) => (\n    <Option key={option} value={option} disabled={option === 'b11' ? true : false}>\n      {option}\n    </Option>\n  ))}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Upgrading ArcoDesign Package via NPM\nDESCRIPTION: This snippet shows how to remove the old ByteDesign package and install the new ArcoDesign package using npm.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove @bytedesign/web-react && npm i @arco-design/web-react\n```\n\n----------------------------------------\n\nTITLE: Creating Sliders with Icons using Arco Design in React\nDESCRIPTION: This code snippet demonstrates how to create sliders with icons using the Arco Design library in React. It includes two examples: one with static images and another with dynamic icons that change based on the slider value. The component uses React hooks for state management and Arco Design components for layout and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Slider, Space } from '@arco-design/web-react';\nimport { IconSound, IconMute } from '@arco-design/web-react/icon';\n\nfunction App() {\n  const [value, setValue] = useState(10);\n  return (\n    <Space size={60}>\n      <Space>\n        <img\n          style={{ width: 22, verticalAlign: 'bottom' }}\n          src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/48872c084d77494ebc0ddd0892d97e3d~tplv-uwbnlip3yd-image.image\"\n        />\n        <Slider defaultValue={50} style={{ width: 200 }} />\n        <img\n          style={{ width: 22, verticalAlign: 'bottom' }}\n          src=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/40b91e0c13cb4069976ae726da62aa75~tplv-uwbnlip3yd-image.image\"\n        />\n      </Space>\n      <Space>\n        <IconMute\n          style={{\n            fontSize: 16,\n            color: value > 0 ? 'var(--color-text-4)' : 'var(--color-text-1)',\n          }}\n        />\n        <Slider value={value} onChange={setValue} style={{ width: 200 }} />\n        <IconSound\n          style={{\n            fontSize: 16,\n            color: value === 0 ? 'var(--color-text-4)' : 'var(--color-text-1)',\n          }}\n        />\n      </Space>\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Arco Design Floating Menu\nDESCRIPTION: This CSS code snippet provides styling for the Arco Design floating menu, including box sizing, width, padding, and background color. It also styles the inner menu, collapse button, and adjusts the appearance for collapsed and non-collapsed states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/pop.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo-round {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo-round .arco-menu-inner {\n  overflow-y: auto;\n}\n\n.menu-demo-round .arco-menu {\n  height: 100%;\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.3);\n}\n\n.menu-demo-round .arco-menu:not(.arco-menu-collapse) .arco-menu-collapse-button {\n  right: 0;\n  bottom: 8px;\n  transform: translateX(50%);\n}\n\n.menu-demo-round .arco-menu:not(.arco-menu-collapse)::before {\n  content: '';\n  position: absolute;\n  width: 48px;\n  height: 48px;\n  right: 0;\n  bottom: 0;\n  border-radius: 50%;\n  background-color: inherit;\n  box-shadow: -4px 0 2px var(--color-bg-2), 0 0 1px rgba(0, 0, 0, 0.3);\n  transform: translateX(50%);\n}\n\n.menu-demo-round .arco-menu-collapse {\n  height: auto;\n  padding-top: 24px;\n  padding-bottom: 138px;\n  border-radius: 22px;\n}\n\n.menu-demo-round .arco-menu-collapse-button {\n  right: 8px;\n  bottom: 8px;\n}\n\n.menu-demo-round .arco-menu-collapse-button {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason Type in TypeScript\nDESCRIPTION: Defines the InputValueChangeReason type, representing reasons for input value changes in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionChecked\"\n  | \"optionListHide\"\n  | \"tokenSeparator\";\n```\n\n----------------------------------------\n\nTITLE: Installing Arco CLI for Project Setup in Node.js Environment\nDESCRIPTION: This snippet describes how to install the Arco CLI globally using npm, which is essential for creating Arco Design Pro project templates.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g arco-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Component Environment Configuration in JavaScript\nDESCRIPTION: Basic structure of arco.env.config.js file that serves as the configuration entry for all component environments. The file exports a function that returns a configuration object and can receive a parameter to distinguish different environments.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\n\nmodule.exports = function defineConfig(envId) {\nreturn {\n// ... configs for component env\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing maxTag Content in Select Component\nDESCRIPTION: The Select component now supports customizing the maxTag content display through the maxTagCount property of the object type.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nSelect.maxTagCount = { content: (count: number) => `+${count}` };\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Titles with Arco Design in React\nDESCRIPTION: Example showing how to use Typography.Title component to render headings from H1 to H6. The code demonstrates the different heading levels available in Arco Design's Typography component, using both default H1 and explicit heading prop values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/title.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Typography>\n      <Typography.Title>H1. The Pragmatic Romanticism</Typography.Title>\n      <Typography.Title heading={2}>H2. The Pragmatic Romanticism</Typography.Title>\n      <Typography.Title heading={3}>H3. The Pragmatic Romanticism</Typography.Title>\n      <Typography.Title heading={4}>H4. The Pragmatic Romanticism</Typography.Title>\n      <Typography.Title heading={5}>H5. The Pragmatic Romanticism</Typography.Title>\n      <Typography.Title heading={6}>H6. The Pragmatic Romanticism</Typography.Title>\n    </Typography>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Collapse Component\nDESCRIPTION: Type definitions for the Collapse component properties including accordion behavior, border rendering, expansion control, and event handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollapseProps {\n  accordion?: boolean;\n  bordered?: boolean;\n  destroyOnHide?: boolean;\n  lazyload?: boolean;\n  expandIconPosition?: 'left' | 'right';\n  triggerRegion?: 'header' | 'icon';\n  expandIcon?: ReactNode;\n  activeKey?: string | string[];\n  className?: string | string[];\n  defaultActiveKey?: string | string[];\n  style?: CSSProperties;\n  onChange?: (key: string, keys: string[], e) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageHeader with Breadcrumb Navigation in React\nDESCRIPTION: Creates a page header component with breadcrumb navigation, title, subtitle, and radio button group. The component uses Arco Design's PageHeader and Radio components, featuring customizable styling and navigation routes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__demo__/breadcrumb.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PageHeader, Radio } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div style={{ background: 'var(--color-fill-2)', padding: 40 }}>\n      <PageHeader\n        style={{ background: 'var(--color-bg-2)' }}\n        title=\"ArcoDesign\"\n        subTitle=\"This is a description\"\n        breadcrumb={{\n          routes: [\n            {\n              path: '/',\n              breadcrumbName: 'Home',\n            },\n            {\n              path: '/channel',\n              breadcrumbName: 'Channel',\n            },\n            {\n              path: '/news',\n              breadcrumbName: 'News',\n            },\n          ],\n        }}\n        extra={\n          <div>\n            <Radio.Group mode=\"fill\" type=\"button\" defaultValue=\"small\">\n              <Radio value=\"large\">Large</Radio>\n              <Radio value=\"medium\">Medium</Radio>\n              <Radio value=\"small\">Small</Radio>\n            </Radio.Group>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualListProps Type for Tree Component in TypeScript\nDESCRIPTION: Type definition for the virtualListProps property of the Tree component, specifying which properties can be passed to the virtual list implementation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Component in Markdown\nDESCRIPTION: This snippet defines the Comment component as part of the Data Display category in the Arco Design system. It provides a brief description of the component's purpose.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\nComponent / Data Display\n\n# Comment\n\nDisplay a comment.\n`````\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Buffer Size with Arco Design in JavaScript\nDESCRIPTION: Demonstrates using the bufferSize prop to control how many page numbers are displayed between the current page and ellipsis (...). Shows three examples with different buffer sizes (0, 1, and 2) to illustrate how it affects page number display when pages are omitted.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/more-buffer.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pagination, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Space direction=\"vertical\" size=\"large\">\n        <Pagination sizeCanChange total={200} bufferSize={0} defaultCurrent={10} />\n        <Pagination sizeCanChange total={200} bufferSize={1} defaultCurrent={10} />\n        <Pagination sizeCanChange total={200} bufferSize={2} defaultCurrent={10} />\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Notification Global Configuration\nDESCRIPTION: Global configuration method for setting up notification defaults including maximum count, container element, duration, and className prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nNotification.config({\n  maxCount: number,\n  getContainer: () => HTMLElement,\n  duration: number,\n  prefixCls: string\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Sizes and Shapes with Arco Design React\nDESCRIPTION: Demonstrates the implementation of Avatar components with various sizes (24px to 64px) and shapes (circle and square) using Arco Design's React components. Uses Space component for layout organization and shows both circular and square avatar variations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Avatar, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <Space size=\"large\">\n        <Avatar size={64}>Arco</Avatar>\n        <Avatar size={40}>Arco</Avatar>\n        <Avatar size={32}>Arco</Avatar>\n        <Avatar size={24}>Arco</Avatar>\n      </Space>\n      <Space size=\"large\">\n        <Avatar size={64} shape=\"square\">\n          Arco\n        </Avatar>\n        <Avatar size={40} shape=\"square\">\n          Arco\n        </Avatar>\n        <Avatar size={32} shape=\"square\">\n          Arco\n        </Avatar>\n        <Avatar size={24} shape=\"square\">\n          Arco\n        </Avatar>\n      </Space>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Component\nDESCRIPTION: This bash command is used to create a new, blank component within the Arco Design Material Market workspace.  It utilizes `npx` to execute the `arco create` command, generating a component with the specified name.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n## 创建空白组件\nnpx arco create ComponentName\n```\n\n----------------------------------------\n\nTITLE: Building and Synchronizing Components using Arco CLI (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to build and synchronize components using the Arco CLI. The `arco build` command builds the component, and the `arco sync` command synchronizes the component's documentation to the material platform. You can specify a component name to build or sync a specific component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n## After completing the document adjustment, rebuild the component preview document\n## You can specify the component name to build a specific component arco build Button\narco build\n\n## Synchronize the new component preview document to the material platform\n## You can specify the component name to synchronize a specific component arco sync Button\narco sync\n\n```\n\n----------------------------------------\n\nTITLE: Popconfirm Event Callback Parameters - TypeScript\nDESCRIPTION: Addition of event parameter exposure in onOk and onCancel callback methods. Released in version 2.29.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__changelog__/index.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopconfirmProps {\n  onOk?: (e: Event) => void | Promise<void>;\n  onCancel?: (e: Event) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Arco Design Repository\nDESCRIPTION: Commands for cloning the Arco Design repository and initializing the development environment. This includes installing dependencies, building icon components, and compiling the component library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:arco-design/arco-design.git\n$ cd arco-design && yarn run init\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Modal Settings in JavaScript\nDESCRIPTION: Example demonstrating how to globally configure Modal settings using Modal.config. This allows setting default properties like custom prefix and simple mode for all modal dialogs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nModal.config({\n  // Custom prefix\n  prefixCls: 'arco',\n  // Display in Simple Mode\n  simple: true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining User Permissions Structure in TypeScript\nDESCRIPTION: This snippet defines the structure for user permissions as a Record type, mapping resources to arrays of action strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UserPermission = Record<string, string[]>;\n\nuserInfo.permission = {\n  'data-analysis': ['read', 'write'],\n  'search-table': ['read'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Size Selector for TimePicker using React\nDESCRIPTION: This snippet defines a React component that comprises a RadioGroup for size selection and a TimePicker that responds to the selected size. It uses React's useState hook to manage the size state. The RadioGroup options allow switching between 'large', 'default', 'small', and 'mini' sizes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TimePicker/__demo__/size.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TimePicker, Radio } from '@arco-design/web-react';\nconst RadioGroup = Radio.Group;\n\nfunction App() {\n  const [size, setSize] = useState('default');\n  return (\n    <div>\n      <RadioGroup\n        value={size}\n        options={['large', 'default', 'small', 'mini']}\n        onChange={(value) => setSize(value)}\n        type=\"button\"\n        style={{ marginBottom: 24, }}\n      />\n      <br />\n      <TimePicker\n        style={{ width: 194, }}\n        size={size}\n        placeholder=\"请选择时间\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Less Loader for Arco Design Dark Mode\nDESCRIPTION: This snippet shows how to configure the webpack.config.js file to override the 'arco-theme-tag' variable in less-loader. This is a crucial step in implementing partial dark mode with Arco Design.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/partial-dark.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  rules: [{\n    test: /.less$/,\n    use: [{\n      loader:'style-loader',\n    }, {\n      loader:'css-loader',\n    }, {\n      loader:'less-loader',\n+ options: {\n+ modifyVars: {// The modifyVars configuration in less-loader@6 is moved to lessOptions\n+'arco-theme-tag':'.arco-theme',\n+ },\n+ javascriptEnabled: true\n+ },\n    }],\n    ...\n  }],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Option Value in Select Component\nDESCRIPTION: The Select component ref references the new activeOptionValue property to mount the value of the current hovered option.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectRef = useRef();\nconsole.log(selectRef.current.activeOptionValue);\n```\n\n----------------------------------------\n\nTITLE: Defining ValueChangeReason type for InputTag in Javascript\nDESCRIPTION: This snippet defines the `ValueChangeReason` type used in the `onChange` event of the InputTag component. It specifies the possible reasons for a value change.  Possible values are \"add\", \"remove\", \"clear\", and \"sort\".\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport type ValueChangeReason = \"add\" | \"remove\" | \"clear\" | \"sort\";\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the Collapsible Layout in Arco Design\nDESCRIPTION: CSS styles for the layout-collapse-demo that define the appearance of different layout components including the sidebar, header, content, and footer. It includes styling for the logo, text colors, and the custom trigger button positioning.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/collapsed.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.layout-collapse-demo {\n  height: 500px;\n  border: 1px solid var(--color-border);\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-sider .logo {\n  height: 32px;\n  margin: 12px 8px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.layout-collapse-demo .arco-layout-sider-light .logo {\n  background: var(--color-fill-2);\n}\n\n.layout-collapse-demo .arco-layout-footer,\n.layout-collapse-demo .arco-layout-content {\n  color: var(--color-white);\n  text-align: center;\n  font-stretch: condensed;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.layout-collapse-demo .arco-layout-footer {\n  color: var(--color-text-2);\n  height: 48px;\n  line-height: 48px;\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-content {\n  background: var(--color-bg-3);\n  color: var(--color-text-2);\n  font-weight: 400;\n  font-size: 14px;\n}\n\n.layout-collapse-demo .arco-layout-header {\n  height: 64px;\n  line-height: 64px;\n  background: var(--color-bg-3);\n}\n\n.layout-collapse-demo .arco-layout-header .trigger {\n  margin-left: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Footer in Arco Design Cascader Component\nDESCRIPTION: Example showing how to use renderFooter prop to customize footer content in Cascader dropdowns. Demonstrates both single and multiple selection modes with hierarchical city data, including interactive links that trigger message notifications.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/footer.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cascader, Message, Link, Space } from '@arco-design/web-react';\nconst options = [\n  {\n    value: 'beijing',\n    label: 'Beijing',\n    children: [\n      {\n        value: 'Beijing',\n        label: 'Beijing',\n        children: [\n          {\n            value: 'chaoyang',\n            label: 'Chaoyang',\n            children: [\n              {\n                value: 'datunli',\n                label: 'Datunli',\n              },\n            ],\n          },\n          {\n            value: 'dongcheng',\n            label: 'Dongcheng',\n          },\n          {\n            value: 'xicheng',\n            label: 'Xicheng',\n          },\n          {\n            value: 'haidian',\n            label: 'Haidian',\n          },\n          {\n            value: 'fengtai',\n            label: 'fengtai',\n          },\n          {\n            value: 'shijingshan',\n            label: 'Shijingshan',\n          },\n          {\n            value: 'mentougou',\n            label: 'Mentougou',\n          },\n          {\n            value: 'fangshan',\n            label: 'Fangshan',\n          },\n          {\n            value: 'tongzhou',\n            label: 'Tongzhou',\n          },\n          {\n            value: 'shunyi',\n            label: 'Shunyi',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'shanghai',\n    label: 'Shanghai',\n    children: [\n      {\n        value: 'shanghaishi',\n        label: 'Shanghai',\n        children: [\n          {\n            value: 'huangpu',\n            label: 'Huangpu',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'guangzhou',\n    label: 'guangzhou',\n  },\n  {\n    value: 'shenzhen',\n    label: 'Shenzhen',\n  },\n  {\n    value: 'hangzhou',\n    label: 'Hangzhou',\n  },\n];\n\nconst App = () => {\n  return (\n    <Space size=\"large\">\n      <Cascader\n        placeholder=\"Please select ...\"\n        style={{ maxWidth: 300 }}\n        options={options}\n        defaultValue={['shanghai', 'shanghaishi', 'huangpu']}\n        showSearch\n        allowClear\n        renderFooter={(level, activeNode) => {\n          console.log(level, activeNode);\n\n          if (level < 2) {\n            return (\n              <Link\n                type=\"text\"\n                onClick={() => {\n                  Message.info('Click me');\n                }}\n              >\n                Click me\n              </Link>\n            );\n          }\n\n          return null;\n        }}\n      />\n      <Cascader\n        mode=\"multiple\"\n        placeholder=\"Please select ...\"\n        style={{ maxWidth: 300 }}\n        options={options}\n        defaultValue={[['beijing', 'Beijing', 'chaoyang', 'datunli']]}\n        showSearch\n        allowClear\n        renderFooter={(level, activeNode) => {\n          console.log(level, activeNode);\n\n          if (level < 2) {\n            return (\n              <Link\n                type=\"text\"\n                onClick={() => {\n                  Message.info('Click me');\n                }}\n              >\n                Click me\n              </Link>\n            );\n          }\n\n          return null;\n        }}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling React Components with LESS\nDESCRIPTION: Demonstrates the recommended approach for styling React components using LESS. Use class-based styling with a consistent prefix to avoid conflicts and allow for easier overrides.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@am-button-prefix-cls: ~'am-button';\n\n.@{am-button-prefix-cls} {\n  padding: 10px;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button() {\n  const prefxiCls = 'am-button';\n  return <button className={prefxiCls} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Input Fields with Different Statuses in React\nDESCRIPTION: This snippet defines a functional React component named `App`, which utilizes the `Input` and `Space` components from the `@arco-design/web-react` library to render multiple input fields. Each input field is styled and provided with specific statuses such as 'error', 'warning', and 'disabled'. The required library, `@arco-design/web-react`, must be installed. The component returns a space that wraps the input fields, demonstrating different user interaction states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Input, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space wrap>\n      <Input style={{ width: 350 }} status=\"error\" placeholder=\"error status\" />\n      <Input style={{ width: 350 }} status=\"warning\" placeholder=\"warning status\" />\n      <Input style={{ width: 350 }} disabled placeholder=\"disabled input\" />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Fixing Children Rendering in Spin Component\nDESCRIPTION: Resolves an issue where child nodes were not rendered when passing 0 as children to the Spin component in version 2.54.2\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__changelog__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- 修复 `Spin` 组件传入 Children 为 `0` 时，其子节点未渲染的问题。([#2301](https://github.com/arco-design/arco-design/pull/2301))\n```\n\n----------------------------------------\n\nTITLE: Styling Arco Grid Columns with CSS\nDESCRIPTION: This CSS snippet provides styling for the grid columns in the example that utilizes Arco Design Grid. It sets visual properties like height, line height, color, and text alignment for '.arco-col' elements and uses nth-child selectors to apply alternating background colors. These styles ensure that the grid displays correctly with the intended aesthetic.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/order.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason Type in TypeScript\nDESCRIPTION: Defines the possible reasons for input value changes in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionChecked\"\n  | \"optionListHide\"\n  | \"tokenSeparator\";\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Material Documentation\nDESCRIPTION: This markdown code shows an example of a generated component documentation. It includes a table describing component props and a code snippet demonstrating how to use the component in a demo. It provides a clear and concise overview of the component's API and usage.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# TooltipButton\n\n## 属性/Props\n\n### `<TooltipButton>`\n\n| 参数名 |    描述    |    类型     | 默认值 |\n| ------ | :--------: | :---------: | -----: |\n| title  | 按钮的提示 | `ReactNode` |    `-` |\n\n## Demos\n\n~~~jsx\nimport React from 'react';\nimport TooltipButton from '@arco-design/rc-xxx';\n\n/**\n * 基本用法\n */\nexport default () => {\n  return <TooltipButton title=\"tooltip title\">Demo Basic</TooltipButton>;\n};\n~~~\n```\n\n----------------------------------------\n\nTITLE: Defining List Grid Properties in Typescript\nDESCRIPTION: Interface for configuring grid layout properties of a list component, including gutter, span, and responsive breakpoint settings\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ListGridProps {\n  gutter?: number;\n  span?: number;\n  xs?: number;\n  sm?: number;\n  md?: number;\n  lg?: number;\n  xl?: number;\n  xxl?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checking Logic in TypeScript\nDESCRIPTION: This code implements the core logic for checking user permissions against required permissions, supporting both string and regex-based resource matching.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Auth = {\n  resource: string | RegExp;\n  actions?: string[];\n};\n\ninterface AuthParams {\n  requiredPermissions?: Array<Auth>;\n  oneOfPerm?: boolean;\n}\n\nconst judge = (actions: string[], perm: string[]) => {\n  if (!perm || !perm.length) {\n    return false;\n  }\n\n  if (perm.join('') === '*') {\n    return true;\n  }\n\n  return actions.every((action) => perm.includes(action));\n};\n\nconst auth = (params: Auth, userPermission: UserPermission) => {\n  const { resource, actions = [] } = params;\n  if (resource instanceof RegExp) {\n    const permKeys = Object.keys(userPermission);\n    const matchPermissions = permKeys.filter((item) => item.match(resource));\n    return matchPermissions.every((key) => {\n      const perm = userPermission[key];\n      return judge(actions, perm);\n    });\n  }\n  const perm = userPermission[resource];\n  return judge(actions, perm);\n};\n\nexport default (params: AuthParams, userPermission: UserPermission) => {\n  const { requiredPermissions, oneOfPerm } = params;\n  if (Array.isArray(requiredPermissions) && requiredPermissions.length) {\n    let count = 0;\n    for (const rp of requiredPermissions) {\n      if (auth(rp, userPermission)) {\n        count++;\n      }\n    }\n    return oneOfPerm ? count > 0 : count === requiredPermissions.length;\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarValue Type in TypeScript\nDESCRIPTION: Definition of the CalendarValue type used in DatePicker props. It can be a number, string, Date object, or Dayjs object.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarValue = number | string | Date | Dayjs;\n```\n\n----------------------------------------\n\nTITLE: Defining SpaceSize TypeScript Type\nDESCRIPTION: Defines a custom type for space sizes with predefined string literals and numeric options, allowing flexible spacing configuration\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Space/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type SpaceSize = \"mini\" | \"small\" | \"medium\" | \"large\" | number;\n```\n\n----------------------------------------\n\nTITLE: Defining Tree Data for Transfer Component\nDESCRIPTION: This code defines the tree data structure used within the TreeTransfer component. Each node in the tree has a 'key', 'title', and optionally 'children'. This data represents the items available for transfer between the source and target lists.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__demo__/with-tree.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst treeData = [\n  {\n    key: '1',\n    title: 'Trunk 1',\n    children: [\n      {\n        key: '1-1',\n        title: 'Branch',\n        children: [\n          {\n            key: '1-1-1',\n            title: 'Leaf',\n          },\n          {\n            key: '1-1-2',\n            title: 'Leaf',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    key: '2',\n    title: 'Trunk 2',\n    children: [\n      {\n        key: '2-1',\n        title: 'Trunk 2-1',\n      },\n      {\n        key: '2-2',\n        title: 'Trunk 2-2',\n      },\n      {\n        key: '2-3',\n        title: 'Trunk 2-3',\n      },\n    ],\n  },\n  {\n    key: '3',\n    title: 'Trunk 3',\n  },\n  {\n    key: '4',\n    title: 'Trunk 4',\n  },\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring prefixCls for static Modal via Modal.config\nDESCRIPTION: This code snippet demonstrates how to configure the CSS class name prefix for dialogs created using the static `Modal.config` method in Arco Design. This allows you to customize the CSS class names specifically for modals created in this way, ensuring consistent styling across your application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nModal.config({\n   prefixCls: 'byte',\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Input Focus and Blur Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to reference an input component using a ref and calls the focus and blur methods on that input. The code shows how to set the ref, as well as how to trigger these methods programmatically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Input/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n```\n<Input ref={(ref) => (this.input = ref)} />;\n\nthis.input.focus();\nthis.input.blur();\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Jest CLI via Bash\nDESCRIPTION: This Bash command showcases how to pass command-line parameters to Jest CLI using the arco test command with --rawTesterArgs. This approach allows customization of test execution while using Arco’s test infrastructure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\narco test --rawTesterArgs=\"jest -u --silent=false\"\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests with Arco-Scripts\nDESCRIPTION: This section provides commands to run unit tests using arco-scripts with Jest. It includes separate commands for running tests in the jsdom and node environments, as well as a combination of both. Dependencies include arco-scripts and Jest.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.test.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# jest --env=jsdom\narco-scripts test:client\n\n# jest --env=node\narco-scripts test:node\n\n# This command is a combination of test:client and test:node\narco-scripts test\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Documentation Entries in arco.workspace.jsonc\nDESCRIPTION: This code snippet demonstrates how to configure extra documentation entries for a component using the `extraDocs` field in the `arco.workspace.jsonc` file.  It specifies a \"Changelog\" document located at \"./__docs__/changelog.md\", allowing it to be displayed alongside the component preview documentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": [\n{\n\"name\": \"ComponentName\",\n\"entries\": {\n// Use this field to configure the matching rules for unit test files\n// Default value: ['**/?(*.)+(spec|test).[jt]s?(x)']\n\"extraDocs\": [\n{\n\"title\": \"Changelog\",\n\"entry\": \"./__docs__/changelog.md\"\n}\n]\n}\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: JSDoc for I18N\nDESCRIPTION: Illustrates how to use JSDoc comments for internationalization (I18N), including translations for component names, classifications, and descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n\"/**\n * @file\n * @title\n * zh-CN: component name\n * en-US: Name of Component\n *\n * @memberOf\n * zh-CN: component classification, for example: data input, navigation\n * en-US: Sort of this component\n *\n * @description\n * zh-CN: description information of the component\n * en-US: Description of this component\n */\n\n/**\n * @title\n * zh-CN: The title of this demo\n * en-US: Title of this demo\n *\n * @description\n * zh-CN: Descriptive information of Demo, which can describe its usage and precautions\n * en-US: Description of this demo\n */\nexport {default as Basic} from'./basic';\"\n```\n\n----------------------------------------\n\nTITLE: Using setupMock for Configuring Mock Data in JavaScript\nDESCRIPTION: This snippet shows how to use the setupMock function to configure mock data. It includes an example of mocking a user info API endpoint and demonstrates how to disable mocking.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mock from 'mockjs';\nimport setupMock from '../utils/setupMock';\n\nsetupMock({\n  mock: false\n  setup() {\n    // 用户信息\n    Mock.mock(new RegExp('/api/userInfo'), () => {\n      return {\n        name: 'name',\n      };\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Comment Actions with CSS\nDESCRIPTION: This CSS snippet provides styles for the custom comment action buttons. It includes styling for the button's appearance, hover state, and focus state. The styles use CSS variables for colors, allowing for easy theming and consistency with the Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-comment-action {\n  padding: 0 4px;\n  line-height: 24px;\n  border-radius: 2px;\n  background: transparent;\n  transition: all 0.1s ease;\n  color: var(--color-text-1);\n  cursor: pointer;\n  display: inline-block;\n  border: none;\n}\n\n.custom-comment-action:focus-visible {\n  box-shadow: inset 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-comment-action:hover {\n  background: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Component Change History\nDESCRIPTION: A chronological list of changes including gradient color support, step progress implementation, trail color customization, and various bug fixes for the Progress component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.25.0\n\n2021-11-19\n\n### 🐛 BugFix\n\n- `Progress`  gix the bug that the'trailColor 'attribute does not take effect on the circular progress bar and the step progress bar.([#175](https://github.com/arco-design/arco-design/pull/175))\n- Fix the bug that the steps of the `Progress` component are displayed incorrectly.([#170](https://github.com/arco-design/arco-design/pull/170))\n\n## 2.24.0\n\n2021-11-05\n\n### 🆕 Feature\n\n- add trailColor to change the rest of progress bar([#107](https://github.com/arco-design/arco-design/pull/107))\n\n## 2.16.0\n\n2021-05-28\n\n### 🆕 Feature\n\n- The `Progress` supports warning status.\n\n## 2.13.2\n\n2021-04-01\n\n### 🐛 Bugfix\n\n- Optimize the display of the gradient color of the `Progress` component.\n\n### 🆎 TypeScript\n\n- Correct the ts definition of `formatText` of `Progress`.\n\n## 2.10.0 🏮\n\n2020-02-26\n\n### 🆕 Feature\n\n- The `Progress` component supports gradient colors.\n- `Progress` supports step progress bar.\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor with Custom Scroll Boundary in React\nDESCRIPTION: This code creates an Anchor component with a custom scroll boundary set to 'center'. It includes multiple AnchorLink components as children, each with a specific href and title.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/boundary.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor affix={false} boundary=\"center\">\n      <AnchorLink href=\"#Basic\" title=\"Basic\" />\n      <AnchorLink href=\"#Static\" title=\"Static\" />\n      <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n      <AnchorLink href=\"#Affix\" title=\"Affix\" />\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Rate Component API Table in Markdown\nDESCRIPTION: API documentation table detailing all available properties for the Rate component, including types, descriptions, and default values. Properties include configuration for clearing, half-selection, disabled state, grading display, and custom character rendering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|allowClear|Whether to allow clear when click again|boolean |`-`|\n|allowHalf|Whether to allow half selection|boolean |`-`|\n|disabled|Whether is disabled|boolean |`-`|\n|grading|Whether to show score with smiley icon|boolean |`-`|\n|readonly|Whether is readonly|boolean |`-`|\n|count|Star count|number |`5`|\n|defaultValue|To set default value|number |`-`|\n|value|To set value|number |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|tooltips|Customize tooltip by each character|string[] |`-`|\n|character|The custom character of rate|ReactNode \\| ((index: number) => ReactNode) |`<IconStarFill />`|\n|onChange|Callback when score is changed|(value: number) => void |`-`|\n|onHoverChange|Callback when the score user hovered is changed|(value: number) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: CSS Font Family Definition\nDESCRIPTION: This CSS snippet defines a font family named 'nunito_for_arco' with a fallback list of fonts including 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, and sans-serif. This ensures consistent font rendering across different operating systems and browsers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs_spec/style-guideline.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"@font-family: 'nunito_for_arco', 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB',\n\n  'Microsoft YaHei', '微软雅黑', Arial, sans-serif;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing 403 Error Page with Arco Design Components\nDESCRIPTION: Creates a 403 error page using Arco Design's Result component with a status of '403' and a back button. The component displays an access denied message and provides a primary button for navigation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__demo__/403.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Result, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Result\n        status=\"403\"\n        subTitle=\"Access to this resource on the server is denied.\"\n        extra={<Button type=\"primary\">Back</Button>}\n      ></Result>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarType Interface in TypeScript\nDESCRIPTION: This code snippet defines the CalendarType interface, which specifies the structure for calendar-related localization settings in Arco Design. It includes properties for today, view, month, week, and formatting options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CalendarType = {\n  today: string;\n  view: Record<string, any>;\n  month: {\n    short: Record<string, any>;\n    long: Record<string, any>;\n  };\n  week: {\n    short: Record<string, any>;\n    long: Record<string, any>;\n  };\n  formatYear?: string;\n  formatMonth?: string;\n  monthBeforeYear?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Upload Progress Bar\nDESCRIPTION: CSS styles for customizing the appearance and behavior of the upload progress bar, including responsive layouts, RTL support, and animation transitions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/progress.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-upload-progress .arco-upload-list-item-text-content {\n  flex-wrap: wrap;\n}\n\n.custom-upload-progress .arco-upload-list-start-icon,\n.custom-upload-progress .arco-upload-list-cancel-icon {\n  right: 0;\n  left: unset;\n  top: -22px;\n  transform: none;\n}\n\n.custom-upload-progress .arco-upload-list-rtl .arco-upload-list-start-icon,\n.custom-upload-progress .arco-upload-list-rtl .arco-upload-list-cancel-icon {\n  right: unset;\n  left: 0;\n}\n\n.custom-upload-progress .arco-upload-list-status {\n  display: block;\n}\n\n.custom-upload-progress .arco-upload-list-progress {\n  display: block;\n  height: 0;\n  margin-top: 0;\n  transition: all 0.2s ease;\n  opacity: 0;\n  overflow: hidden;\n}\n\n.custom-upload-progress .arco-upload-list-item-uploading .arco-upload-list-progress {\n  margin-top: 8px;\n  opacity: 1;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Icons with Arco Design React\nDESCRIPTION: This JavaScript snippet demonstrates how to import and use icons in a React application using the @arco-design/web-react library. It shows how to display an icon with a tooltip, applying styles such as font size and color. The snippet requires dependencies like @arco-design/web-react and assumes familiarity with React functional components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Tooltip } from '@arco-design/web-react';\nimport { IconStar } from '@arco-design/web-react/icon';\n\nconst App = () => {\n\n  return <div style={{ color: 'var(--color-text-1)' }}>\n    <Tooltip content=\"This is IconStar\">\n      <IconStar style={{ fontSize: 24, marginRight: 20 }} />\n    </Tooltip>\n    <IconStar style={{ fontSize: 24, color: '#ffcd00' }} />\n  </div>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Responsive Breakpoint type in Javascript\nDESCRIPTION: This code snippet defines a TypeScript type `GridResponsiveBreakpoint` which is a union of string literals representing different screen size breakpoints used in responsive grid layouts. These breakpoints are 'xxxl', 'xxl', 'xl', 'lg', 'md', 'sm', and 'xs'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport type GridResponsiveBreakpoint =\n  | \"xxxl\"\n  | \"xxl\"\n  | \"xl\"\n  | \"lg\"\n  | \"md\"\n  | \"sm\"\n  | \"xs\";\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a New Route Configuration\nDESCRIPTION: This snippet shows how to add a new route configuration to the existing routing table. A new entry is added to the `children` array with the `name` and `key` properties defined. The `name` property corresponds to a key in the language pack, and the `key` is used for the route's path.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes.ts\nexport const routes = [\n  {\n    name:'menu.dashboard',\n    key:'dashboard',\n    children: [\n      {\n        name:'menu.dashboard.workplace',\n        key:'dashboard/workplace',\n      },\n+     {\n+       name:'menu.dashboard.monitor',\n+       key:'dashboard/monitor',\n+     },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining InputTag Component in React\nDESCRIPTION: Interface definition for InputTag component with properties and behavior specifications for tag input functionality\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InputTag\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Collapse in React with Arco Design\nDESCRIPTION: This snippet demonstrates how to create an accordion-style collapse component using the Arco Design library in a React application. It imports the Collapse component, sets up an App component with three collapsible items, and applies accordion behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__demo__/accordion.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Collapse } from '@arco-design/web-react';\nconst CollapseItem = Collapse.Item;\n\nconst App = () => {\n  return (\n    <Collapse accordion style={{ maxWidth: 1180 }}>\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"1\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"2\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n      <CollapseItem header=\"Beijing Toutiao Technology Co., Ltd.\" name=\"3\">\n        Beijing Toutiao Technology Co., Ltd.\n      </CollapseItem>\n    </Collapse>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Transitions for Message Component Animation\nDESCRIPTION: This CSS snippet defines the animation classes used by the Message component. It specifies enter and exit animations with opacity transitions, creating a fade-in effect over 1 second and a fade-out with height reduction over 0.5 seconds.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Message/__demo__/transition.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.my-animation-enter {\n  opacity: 0;\n}\n\n.my-animation-enter-active {\n  opacity: 1;\n  transition: opacity 1s linear;\n}\n\n.my-animation-exit {\n  opacity: 0;\n}\n\n.my-animation-exit-active {\n  opacity: 0;\n  height: 0;\n  transition: all 0.5s linear;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and closing Modal\nDESCRIPTION: Illustrates how to use the return object of Modal methods to update the modal's properties or close it.  It showcases using `update` to change the title and `close` to dismiss the modal.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = Modal.info({ title: 'Info' });\ninfo.update({ title: 'Updated Title' });\ninfo.close();\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentConfig Type in TypeScript\nDESCRIPTION: TypeScript definition for the ComponentConfig type, which specifies the structure for configuring individual components in the workspace.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/workspace.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ComponentConfig = {\n/**\n* The relative path of the NPM package source directory relative to the workspace root directory\n* e.g. packages/library/components\n*/\nrootDir: string;\n/**\n* Component name, which will be concatenated with the NPM package name as the component ID\n*/\nname: string;\n/**\n* Component author\n*/\nauthor?: string;\n/**\n* Component keywords\n*/\nlabels?: string[];\n/**\n* Component team\n*/\ngroup?: number;\n/**\n* Component code repository address\n*/\nrepository?: string;\n/**\n* Component design draft address\n*/\nuiResource?: string;\n/**\n* Whether the component is allowed to be forked by other users\n* The source code directory corresponding to the current component can be configured through the srouces field. They will be uploaded to the material platform, and the default is rootDir\n*/\nforkable?: boolean | { sources: [] };\n/**\n* Configuration related to component entry files\n*/\nentries: {\n/**\n* The relative path of the component directory relative to rootDir, the default value is ./\n* e.g In a single-package component, the component entry is directly located at ./src/index.ts. rootDir is src, base is ./\n* e.g In a component library, the component entry is located at ./components/Button/index.ts. rootDir is components, base is Button\n*/\nbase?: string;\n/**\n* Relative path of component main entry file relative to base\n* e.g. if the entry file path is components/Button/index.ts, then rootDir is components, base is Button, and main is index.ts\n*/\nmain?: string;\n/**\n* Relative path of component style entry file relative to base\n* e.g. style/index.less\n*/\nstyle?: string;\n/**\n* Relative path of component preview file relative to base\n* e.g. __docs__/index.mdx\n*/\npreview?: string;\n/**\n* Relative path of component type declaration file relative to base (automatic parsing and extraction of TypeScript documents will only analyze files configured by this field)\n* e.g. interface.ts\n*/\njsdoc?: string | string[];\n/**\n* Glob matching rules for unit test files\n* e.g. ['__test__/index.test.tsx']\n*/\ntestFilePatterns?: string[];\n/**\n* Extra document entry configuration, such as \"version record\" configuration\n* e.g. [{ title: 'Changelog', entry: '__docs__/changelog.md' }]\n*/\nextraDocs?: Array<{ title: string; entry: string }>;\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Using Color Variables for Dark Theme Support\nDESCRIPTION: Example of using Arco's built-in color variables to define colors in component development for dark theme support.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: css\nCODE:\n```\ntable {\n  border: 1px solid var(--color-border);\n  background-color: var(--color-bg-1);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Arco Design Pro Project\nDESCRIPTION: This snippet demonstrates how to navigate to a directory and initialize a new Arco Design Pro project using the arco CLI command.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd someDir\narco init hello-arco-pro\n```\n\n----------------------------------------\n\nTITLE: Displaying Captions using Arco Design in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Arco Design framework components, specifically the Image and Space components, to display images with captions. The captions are set using the properties `title` and `description`, while the position is controlled via the `footerPosition` property. This setup requires the installation of the @arco-design/web-react package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/caption.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Image, Space } from '@arco-design/web-react';\n\nfunction App() {\n  const src =\n    '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp';\n  const title = 'A user\\u2019s avatar';\n  const description = 'Present by Arco Design';\n  return (\n    <Space size={60} align=\"start\">\n      <Image width={200} src={src} title={title} description={description} alt=\"lamp\" />\n      <Image\n        width={200}\n        src={src}\n        title={title}\n        description={description}\n        footerPosition=\"outer\"\n        alt=\"lamp\"\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining DataType Interface for Descriptions Component in TypeScript\nDESCRIPTION: This code snippet defines the DataType interface used in the Descriptions component. It specifies the structure of the data array that can be passed to the component, including optional keys for label, value, and span.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DataType = {\n  key?: React.Key;\n  label?: ReactNode;\n  value?: ReactNode;\n  span?: number;\n}[];\n```\n\n----------------------------------------\n\nTITLE: Improving Option Parameter Type in Select Callback - TypeScript\nDESCRIPTION: This snippet improves the type definition of the option parameter in the callback function used within the Select component, enhancing type safety and code readability.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Improve the type of the `option` parameter in the callback function of the `Select` component.\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface with Icons - React\nDESCRIPTION: This code snippet defines a React functional component that renders a tabbed interface using Arco Design's Tabs. It customizes tab titles with icons from the Arco Design icon library, showcasing how to enhance the UI with visual elements. It requires the '@arco-design/web-react' package for Tabs and Typography components, as well as specific icon components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/icon.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tabs, Typography } from '@arco-design/web-react';\nimport { IconCalendar, IconClockCircle, IconUser } from '@arco-design/web-react/icon';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nconst App = () => {\n  return (\n    <Tabs defaultActiveTab=\"1\">\n      <TabPane\n        key=\"1\"\n        title={\n          <span>\n            <IconCalendar style={{ marginRight: 6 }} />\n            Tab 1\n          </span>\n        }\n      >\n        <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n      </TabPane>\n      <TabPane\n        key=\"2\"\n        title={\n          <span>\n            <IconClockCircle style={{ marginRight: 6 }} />\n            Tab 2\n          </span>\n        }\n        disabled\n      >\n        <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n      </TabPane>\n      <TabPane\n        key=\"3\"\n        title={\n          <span>\n            <IconUser style={{ marginRight: 6 }} />\n            Tab 3\n          </span>\n        }\n      >\n        <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to NPM\nDESCRIPTION: Steps to publish a package to NPM after building materials, including directory structure and publishing command\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: Plain Text\nCODE:\n```\n├── es ## Products that comply with the ESModule specification\n├── lib ## Products that comply with the CommonJS specification\n└── artifacts ## Material documents and their preview files (only for material previews on the material platform)\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm publish\n```\n\n----------------------------------------\n\nTITLE: Defining Material Query Parameters in TypeScript\nDESCRIPTION: This snippet defines the structure for material query parameters, including options for fuzzy search, filtering by various attributes, pagination, sorting, and dependency matching.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ComplexMaterialQueryParamPeerDependencies = {\n  value: string[];\n  match?:'or' |'and';\n};\n\ntype MaterialQueryParams = {\n  like?: string;\n  name?: string | string[];\n  title?: string;\n  author?: string;\n  type?: string | string[];\n  category?: string[];\n  group?: number | number[];\n  peerDependencies?: string | string[] | ComplexMaterialQueryParamPeerDependencies;\n  page?: number;\n  pageSize?: number;\n  sortDirection?: 1 | -1;\n  sortBy?:'name' |'title' |'downloadTimes' |'createAt' |'updateAt';\n  needPackageInfo?: boolean;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: Debugging Local Arco Template using CLI\nDESCRIPTION: Command for initializing an Arco project using a local template for debugging purposes. This allows developers to test their custom templates before publishing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Use the template parameter to specify the local path as a template\narco init hello-arco --template file:../path/to/your/template\n```\n\n----------------------------------------\n\nTITLE: Cropper Component Styling\nDESCRIPTION: CSS styles for the EasyCropper component, defining the layout and appearance of the cropping interface. Includes styles for the container, image/video elements, crop area, and grid overlay.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__demo__/crop.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.reactEasyCrop_Container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  user-select: none;\n  touch-action: none;\n  cursor: move;\n}\n\n.reactEasyCrop_Image,\n.reactEasyCrop_Video {\n  max-width: 100%;\n  max-height: 100%;\n  margin: auto;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  will-change: transform;\n}\n\n.reactEasyCrop_CropArea {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  box-sizing: border-box;\n  box-shadow: 0 0 0 9999em;\n  color: rgba(0, 0, 0, 0.5);\n  overflow: hidden;\n}\n\n.reactEasyCrop_CropAreaRound {\n  border-radius: 50%;\n}\n\n.reactEasyCrop_CropAreaGrid::before {\n  content: ' ';\n  box-sizing: border-box;\n  position: absolute;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  top: 0;\n  bottom: 0;\n  left: 33.33%;\n  right: 33.33%;\n  border-top: 0;\n  border-bottom: 0;\n}\n\n.reactEasyCrop_CropAreaGrid::after {\n  content: ' ';\n  box-sizing: border-box;\n  position: absolute;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  top: 33.33%;\n  bottom: 33.33%;\n  left: 0;\n  right: 0;\n  border-left: 0;\n  border-right: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Action Items in Arco Design Lists with CSS\nDESCRIPTION: This CSS code styles the action items in the list examples. It defines styles for both icon-based and text-based action buttons, including hover states, focus indicators for accessibility, and separators between action items. The styles use CSS variables from Arco Design's theming system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/actions.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.list-demo-actions-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  transition: all 0.1s;\n}\n\n.list-demo-actions-icon:hover {\n  background-color: var(--color-fill-3);\n}\n\n.list-demo-actions-button[tabindex]:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n.list-demo-actions-button {\n  position: relative;\n  padding: 0 4px;\n  border-radius: 2px;\n  color: rgb(var(--arcoblue-6));\n  cursor: pointer;\n  transition: all 0.1s;\n}\n\n.list-demo-actions-button:hover {\n  background-color: var(--color-fill-3);\n}\n\n.list-demo-actions .arco-list-item-action li:not(:last-child) .list-demo-actions-button::after {\n  content: '';\n  position: absolute;\n  top: 3px;\n  right: -10px;\n  width: 1px;\n  height: 12px;\n  background-color: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with webpack-merge\nDESCRIPTION: Customizing Webpack configuration using webpack-merge for more flexible and less intrusive configuration modifications\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\nconst merge = require('webpack-merge');\n\nmodule.exports = (config) => {\n  return merge(config, {\n    entry: path.resolve(__dirname,'../src/index.tsx'),\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Styling ResizeBox SplitGroup Components\nDESCRIPTION: Defines the CSS styles for the ResizeBox SplitGroup demo, including panel layouts, trigger styling, and responsive sizing for both horizontal and vertical layouts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/splitGroup.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.resizebox-split-group-demo {\n  border: 1px solid var(--color-neutral-4);\n  height: 400px;\n}\n\n.resizebox-split-group-demo-content {\n  text-align: center;\n  padding: 20px 0;\n  min-width: 130px;\n  overflow-x: auto;\n}\n\n.resizebox-split-group-demo-trigger {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n  height: 100%;\n  width: 12px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.resizebox-split-group-demo-trigger .arco-resizebox-trigger-icon {\n  color: #ffffff;\n}\n\n.resizebox-split-group-demo-horizontal {\n  height: 100%;\n}\n\n.resizebox-split-group-demo-vertical {\n  height: 237px;\n}\n```\n\n----------------------------------------\n\nTITLE: RulesProps Interface Definition\nDESCRIPTION: Defines the structure for validation rules used in the Arco Design Form component. It includes properties for specifying validation triggers, levels, required status, data types, length constraints, and custom validators.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport interface RulesProps {\n  // 触发校验的时机\n  validateTrigger?: string | string[];\n  // 校验失败时候以 `error` 或 `warning` 形式展示错误信息。当设置为 `warning` 时不会阻塞表单提交\n  validateLevel?: 'error' | 'warning';\n  required?: boolean;\n  type?: string;\n  length?: number;\n  // Array\n  maxLength?: number;\n  minLength?: number;\n  includes?: boolean;\n  deepEqual?: any;\n  empty?: boolean;\n  // Number\n  min?: number;\n  max?: number;\n  equal?: number;\n  positive?: boolean;\n  negative?: boolean;\n  // Object\n  hasKeys?: string[];\n  // String\n  match?: RegExp;\n  uppercase?: boolean;\n  lowercase?: boolean;\n  // Boolean\n  true?: boolean;\n  false?: boolean;\n  // custom\n  validator?: (value, callback: (error?: ReactNode) => void) => void;\n  message?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType Interface for Tree Component in TypeScript\nDESCRIPTION: Type definition for the fieldNames property of the Tree component, allowing customization of field names for node properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldNamesType = {\n  key?: string;\n  title?: string;\n  disabled?: string;\n  children?: string;\n  isLeaf?: string;\n  disableCheckbox?: string;\n  checkable?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider - Global Component Prefix Configuration\nDESCRIPTION: This code shows how to configure the prefixCls property of the ConfigProvider component.  This changes the class name prefix for all Arco Design components within the application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"// 这样所有组件的类名前缀都会变为 byte，默认是 arco。\n<ConfigProvider prefixCls=\\\"byte\\\">\n  <App />\n</ConfigProvider>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading State with Spin Component in React\nDESCRIPTION: This code snippet demonstrates how to import and use the Spin component from the Arco Design library to render a simple loading spinner in a React application. No additional dependencies are required as long as @arco-design/web-react is installed. The component will display a loading spinner when rendered in a React application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Spin } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Spin />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling for Drag-and-Drop Visual Feedback with CSS Animation\nDESCRIPTION: CSS styles that provide visual feedback when a tree node is dropped. It implements a blinking background animation that alternates between transparent and a light primary color, giving users clear indication of the drop operation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/drag.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tree-node-dropover > .arco-tree-node-title,\n.tree-node-dropover > .arco-tree-node-title:hover {\n  animation: blinkBg 0.4s 2;\n}\n\n@keyframes blinkBg {\n  0% {\n    background-color: transparent;\n  }\n\n  100% {\n    background-color: var(--color-primary-light-1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building all materials in the workspace\nDESCRIPTION: This bash command shows how to build all the materials within the current workspace. It uses the `arco build` command to trigger the build process, which compiles the source code, generates artifacts, and prepares the materials for publishing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n## 构建工作区内的所有物料\n$ arco build\n```\n\n----------------------------------------\n\nTITLE: Using Consistent Class Name Prefixes in React Components\nDESCRIPTION: Shows how to use consistent class name prefixes across multiple components in a material library to minimize conflicts with user class names.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Good Case\nconst prefixCls = 'p-matirial';\n\nfunction Button() {\n  return <button className={`${prefixCls}-button-circle`} />;\n}\n\nfunction List() {\n  return <ul className={`${prefixCls}-list-pro`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Focused Tag with CSS\nDESCRIPTION: This CSS snippet defines the focus-visible styles for the add tag button, ensuring it has a shadow effect when focused. This enhances accessibility and user experience.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__demo__/active.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.add-tag:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Masked Password Mode with VerificationCode Component\nDESCRIPTION: Shows how to create a password-style verification code input using the masked property. The component handles value changes through onChange and completion through onFinish callbacks.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/mask.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VerificationCode, Message } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <VerificationCode\n        defaultValue=\"123\"\n        masked\n        style={{ width: 300 }}\n        onChange={(v) => {\n          console.log(v);\n        }}\n        onFinish={(v) => {\n          Message.info('onFinish: ' + v);\n        }}\n      />\n    </div>\n  );\n};\n\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Component Properties in Markdown\nDESCRIPTION: This code snippet defines the properties, types, and default values for the Badge component in a markdown table format. It includes properties such as dot, maxCount, text, color, status, count, className, dotClassName, dotStyle, offset, and style.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Badge/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|dot|Whether to display a red dot instead of `count`|boolean |`-`|\n|maxCount|Max count to show. If count is larger than this value, it will be displayed as `${maxCount}+`|number |`99`|\n|text|Set the display text of the status dot|string |`-`|\n|color|Customize dot color|\\| 'red'\\| 'orangered'\\| 'orange'\\| 'gold'\\| 'lime'\\| 'green'\\| 'cyan'\\| 'arcoblue'\\| 'purple'\\| 'pinkpurple'\\| 'magenta'\\| 'gray'\\| string |`-`|\n|status|Set badge as a status dot|'default' \\| 'processing' \\| 'success' \\| 'warning' \\| 'error' |`-`|\n|count|Number to show in badge|number \\| ReactNode |`0`|\n|className|Additional css class|string \\| string[] |`-`|\n|dotClassName|Customize Badge dot className|string \\| string[] |`-`|\n|dotStyle|Customize Badge dot style|CSSProperties |`-`|\n|offset|Set offset of the badge dot|[number, number] |`-`|\n|style|Additional style|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Unit Test File Pattern Configuration in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to define patterns for matching unit test files using the arco.workspace.jsonc file. It specifies directory paths and file name patterns, ensuring tests are correctly identified and run.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": [\n{\n\"name\": \"ComponentName\",\n\"entries\": {\n// Use this field to configure the matching rules for unit test files\n// Default value: ['**/?(*.)+(spec|test).[jt]s?(x)']\n\"testFilePatterns\": [\"__test__/*.test.tsx\"];\n}\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Divider Demo Container\nDESCRIPTION: This CSS snippet defines the styling for the divider demo container. It sets the width, padding, and adds a border to create a visual container for the example.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/with-text.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.divider-demo {\n  box-sizing: border-box;\n  width: 560px;\n  padding: 24px;\n  border: 30px solid rgb(var(--gray-2));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataType Interface for Descriptions Component in JavaScript\nDESCRIPTION: This code snippet defines the DataType interface used in the Descriptions component. It specifies the structure of the data prop, including optional key, label, value, and span properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Descriptions/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport type DataType = {\n  key?: React.Key;\n  label?: ReactNode;\n  value?: ReactNode;\n  span?: number;\n}[];\n```\n\n----------------------------------------\n\nTITLE: Specifying Component Build Order in JSON\nDESCRIPTION: This JSON configuration allows customization of the component build order, which is useful when there are dependencies between packages in the workspace.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  // 此配置项用于指定 TSCompilerESM / TSCompilerCJS 的默认行为\n  \"arco.service/compiler\": {\n    // 指定组件的编译顺序，接收的字段为：组件 ID、组件 ID 关键词、组件 ID Glob 匹配符\n    // 将需要优先构建的组件置于数组前列，未指定的组件将置于构建队列末尾\n    \"componentCompilationOrders\": [\"base-component/**\", \"second-base-component/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Material Component with Arco CLI\nDESCRIPTION: Command to create a new blank component within the workspace using Arco CLI.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx arco create ComponentName\n```\n\n----------------------------------------\n\nTITLE: Exporting Material Demos in JavaScript\nDESCRIPTION: Example of exporting component demos with descriptions in index.js. This defines the component name, category, description and individual demo exports with titles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n /**\n * @file\n * @title CloudIcon\n * @memberOf general\n * @description byte cloud icon\n */\n\n/**\n * @title basic application\n * @description `CloudIcon` example\n */\nexport {default as Basic} from'./basic';\n\n/**\n * @title all icons\n * @description `CloudIcon` includes all icons\n */\nexport {default as AllIcon} from'./icon';\n\n```\n\n----------------------------------------\n\nTITLE: Material directory structure\nDESCRIPTION: This represents the file system structure of the material\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_12\n\nLANGUAGE: Plain Text\nCODE:\n```\n├── package.json\n├── src\n│   ├── __docs__ ## 组件文档目录\n│   │   ├── index.mdx ## 组件帮助文档\n│   │   └── basicUsage.tsx ## 单个组件 Demo 置于单个文件内\n│   │\n│   ├── __test__ ## 组件单元测试目录\n│   │   └── index.test.tsx\n│   │\n│   ├── UserSelect.tsx ## 组件源码\n│   ├── index.ts ## 组件主入口\n│   ├── interface.ts ## 组件类型定义入口\n│   │\n│   └── style ## 组件样式入口\n│       ├── index.scss\n│       └── index.ts\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Radio Components with CSS\nDESCRIPTION: Defines styles for custom radio buttons including hover states, focus indicators, and checked states. Implements both button-style and card-style radio appearances with consistent design system variables.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__demo__/custom_render.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ninput[name='button-radio-group']:focus-visible + .arco-btn {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-radio-card {\n  padding: 10px 16px;\n  border: 1px solid var(--color-border-2);\n  border-radius: 4px;\n  width: 250px;\n  box-sizing: border-box;\n}\n\n.custom-radio-card-mask {\n  height: 14px;\n  width: 14px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 100%;\n  border: 1px solid var(--color-border-2);\n  box-sizing: border-box;\n}\n\n.custom-radio-card-mask-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 100%;\n}\n\n.custom-radio-card-title {\n  color: var(--color-text-1);\n  font-size: 14px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\ninput[name='card-radio-group']:focus-visible + .custom-radio-card {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-radio-card:hover,\n.custom-radio-card-checked,\n.custom-radio-card:hover .custom-radio-card-mask,\n.custom-radio-card-checked .custom-radio-card-mask {\n  border-color: rgb(var(--primary-6));\n}\n\n.custom-radio-card-checked {\n  background-color: var(--color-primary-light-1);\n}\n\n.custom-radio-card:hover .custom-radio-card-title,\n.custom-radio-card-checked .custom-radio-card-title {\n  color: rgb(var(--primary-6));\n}\n\n.custom-radio-card-checked .custom-radio-card-mask-dot {\n  background-color: rgb(var(--primary-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Steps Component Interface\nDESCRIPTION: Interface for configuring the Steps component with various properties to control step navigation and display\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StepsProps {\n  // Component configuration properties\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler\nDESCRIPTION: Setting TypeScript compiler configuration for ESM and CommonJS compilation, including custom tsconfig path\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config) => {\n  config.project = 'path/to/your/tsconfig.json';\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Layout with Arco Design in CSS\nDESCRIPTION: The CSS snippet styles the grid layout by defining styles for the '.grid-demo .arco-col' elements. It sets a height, line height, text color, and text alignment to style the cells consistently. Background colors alternate between rows for visual distinction. These styles ensure uniformity in the grid demo appearance when using Arco Design components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/flex.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icons Configuration\nDESCRIPTION: Type definition for customizing various icons and rendering functions in the upload interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Custom icons\ntype CustomIconType = {\n  previewIcon?: ReactNode;\n  removeIcon?: ReactNode;\n  fileIcon?: ReactNode;\n  reuploadIcon?: ReactNode;\n  cancelIcon?: ReactNode;\n  startIcon?: ReactNode;\n  errorIcon?: ReactNode;\n  fileName?: (file: UploadItem) => ReactNode;\n  progressRender?: (file: UploadItem, originDom: ReactNode) => ReactElement; // 2.34.0\n  imageRender?: (file: UploadItem) => ReactNode; // 2.34.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Query Parameters in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for team site query parameters, including optional fields for ID and creation date ranges.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  id?: number;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: InputTag Input Formatting and Custom Return\nDESCRIPTION: Demonstrates returning a non-boolean value to transform input and trigger onChange with modified value\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/validate.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvalidate={(v) => {\n  return { word: v }\n}}\nonChange={(value) => {\n  Message.info(`Paramster of onChange: ${JSON.stringify(value)}`)\n}}\n```\n\n----------------------------------------\n\nTITLE: Modal - Static Method Prefix Configuration\nDESCRIPTION: This code demonstrates how to configure the prefixCls property of the Modal using the config method. This changes the class name prefix for modals created using static methods.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"Modal.config({\n   prefixCls: 'byte',\n})\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Max Tag Count in Arco Design Select Component\nDESCRIPTION: This snippet demonstrates various ways to configure the maximum number of tags displayed in an Arco Design Select component. It includes examples of fixed tag count, custom rendering of hidden tags, popover display for hidden tags, and responsive tag count based on container width.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/maxTag.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Select, Space, Divider } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst options = [...new Array(20)].map((_, index) => `label ${index}`);\n\nconst App = () => {\n  return (\n    <Space size=\"large\" direction=\"vertical\">\n      <div>\n        <Divider orientation=\"left\"> 最多显示三个 Tag </Divider>\n        <Select\n          defaultValue={options.slice(0, 4)}\n          maxTagCount={3}\n          style={{ width: 350 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        ></Select>\n      </div>\n      <div>\n        <Divider orientation=\"left\"> 最多显示三个 Tag，并自定义渲染省略节点 </Divider>\n        <Select\n          defaultValue={options.slice(0, 4)}\n          maxTagCount={{ count: 3, render: (invisibleCount) => `+${invisibleCount}` }}\n          style={{ width: 350 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        ></Select>\n      </div>\n\n      <div>\n        <Divider orientation=\"left\"> 最多显示三个 Tag，隐藏节点以 Popover 展示 </Divider>\n        <Select\n          defaultValue={options.slice(0, 4)}\n          maxTagCount={{ count: 3, showPopover: true,  }}\n          style={{ width: 350 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        ></Select>\n      </div>\n      <div>\n        <Divider orientation=\"left\"> 根据 select 宽度自适应渲染 Tag 个数 </Divider>\n        <Select\n          defaultValue={options.slice(0, 5)}\n          maxTagCount=\"responsive\"\n          style={{ width: 350 }}\n          placeholder=\"Select an item\"\n          options={options}\n          allowClear\n          mode=\"multiple\"\n          allowCreate\n        ></Select>\n      </div>\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Management with useCheckbox Hook in React\nDESCRIPTION: Comprehensive example showing three different use cases of the useCheckbox hook: checkbox group with select all functionality, individual checkbox control with inverse selection, and handling disabled checkboxes. The code demonstrates various checkbox management features including bulk selection, inverse selection, and conditional disabling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/useCheckbox.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Checkbox, Divider, Button, Typography } from '@arco-design/web-react';\nconst CheckboxGroup = Checkbox.Group;\nconst useCheckbox = Checkbox.useCheckbox;\nconst options = [...Array(6)].map((_, i) => ({\n  label: `Option ${i}`,\n  value: i,\n}));\n\nfunction Demo1() {\n  const {\n    selected,\n    selectAll,\n    setSelected,\n    unSelectAll,\n    isAllSelected,\n    isPartialSelected,\n    toggle,\n  } = useCheckbox(\n    options.map((x) => x.value),\n    [1, 2]\n  );\n  return (\n    <div>\n      <div style={{ marginBottom: 16 }}>\n        <Checkbox\n          onChange={(checked) => {\n            if (checked) {\n              selectAll();\n            } else {\n              unSelectAll();\n            }\n          }}\n          checked={isAllSelected()}\n          indeterminate={isPartialSelected()}\n        >\n          Check All\n        </Checkbox>\n        <Button\n          size=\"small\"\n          type=\"primary\"\n          style={{ margin: '0 16px' }}\n          onClick={() => { toggle() }}\n        >\n          Inverse Check\n        </Button>\n      </div>\n      <CheckboxGroup value={selected} options={options} onChange={setSelected} />\n    </div>\n  );\n}\n\nfunction Demo2() {\n  const {\n    selectAll,\n    isSelected,\n    unSelectAll,\n    isAllSelected,\n    isPartialSelected,\n    toggle,\n    setValueSelected,\n  } = Checkbox.useCheckbox(\n    options.map((x) => x.value),\n    [1, 2]\n  );\n  return (\n    <div>\n      <div style={{ marginBottom: 16 }}>\n        <Checkbox\n          onChange={(checked) => {\n            if (checked) {\n              selectAll();\n            } else {\n              unSelectAll();\n            }\n          }}\n          checked={isAllSelected()}\n          indeterminate={isPartialSelected()}\n        >\n          Check All\n        </Checkbox>\n\n        <Button\n          size=\"small\"\n          type=\"primary\"\n          style={{ margin: '0 16px' }}\n          onClick={() => {\n            toggle();\n          }}\n        >\n          Inverse Check\n        </Button>\n      </div>\n      {options.map((option) => {\n        return (\n          <Checkbox\n            key={option.value}\n            style={{ margin: '0 16px' }}\n            checked={isSelected(option.value)}\n            value={option.value}\n            onChange={(checked) => {\n              setValueSelected(option.value, checked);\n            }}\n          >\n            {option.label}\n          </Checkbox>\n        );\n      })};\n    </div>\n  );\n}\n\nfunction Demo3() {\n  const options2 = options.map((x, i) => {\n    return {\n      value: x.value,\n      label: 'Option' + x.value,\n      disabled: !(i % 2),\n    };\n  });\n  const { selected, setSelected } = Checkbox.useCheckbox(\n    options2.map((x) => x.value),\n    [1, 2]\n  );\n  return (\n    <div>\n      <div\n        style={{ margin: '16px 0' }}\n      >\n        <Button\n          size=\"small\"\n          type=\"primary\"\n          onClick={() => {\n            setSelected(options2.filter((x) => !x.disabled).map((x) => x.value));\n          }}\n        >\n          Check undisabled Options\n        </Button>\n      </div>\n      <CheckboxGroup value={selected} onChange={setSelected} options={options2}></CheckboxGroup>\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <div>\n      <Typography.Paragraph\n        style={{ margin: '20px 0' }}\n      >\n        Checkbox group\n      </Typography.Paragraph>\n      <Demo1 />\n      <Divider />\n      <Typography.Paragraph\n        style={{ margin: '20px 0' }}\n      >\n        Checkbox\n      </Typography.Paragraph>\n      <Demo2 />\n      <Divider />\n      <Typography.Paragraph>Checkbox group with disabled items</Typography.Paragraph>\n      <Demo3 />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Destroying All Modal Instances in JavaScript\nDESCRIPTION: Example showing how to close all confirm modals at once using Modal.destroyAll method. This is useful when changing routes to ensure all popups are closed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nModal.destroyAll();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Arco React Environment Configuration\nDESCRIPTION: This TypeScript interface defines all the allowed configuration fields for the Arco React environment, including Jest, Webpack, TypeScript, Less, Sass, and ts-document settings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype WebpackConfigTransformer = (\n  config: WebpackConfigMutator,\n  context: WebpackConfigTransformContext\n) => WebpackConfigMutator\n\ntype TsConfigTransformer = (\n  config: TypescriptConfigMutator,\n  context: TsConfigTransformContext\n) => TypescriptConfigMutator;\n\n/**\n * React Env 允许接受的所有配置字段\n */\ntype ArcoReactEnvConfig = {\n  /**\n   * 拓展 Jest 配置\n   */\n  jest?: {\n    /**\n     * Jest 配置文件路径\n     */\n    jestConfigPath?: string;\n    /**\n     * Jest 模块路径（用以替代 arco-cli 内部依赖的 Jest）\n     */\n    jestModulePath?: string;\n  };\n  /**\n   * 拓展 Webpack 的构建配置\n   * 注意：Webpack 仅用于工作区组件文档的预览和构建，不参与组件产物的构建\n   */\n  webpack?: {\n    /**\n     * 拓展组件文档产物构建的配置\n     */\n    previewConfig?: WebpackConfigTransformer[];\n    /**\n     * 拓展组件本地预览时的配置\n     */\n    devServerConfig?: WebpackConfigTransformer[];\n  };\n  /**\n   * extend config of TypeScript compiler\n   */\n  typescript?: {\n    /**\n     * 传入 TypeScript 模块以替代 arco-cli 内部依赖的 TypsScript\n     */\n    tsModule?: any;\n    /**\n     * 拓展物料产物构建时的配置\n     */\n    buildConfig?: TsConfigTransformer[];\n  };\n  /**\n   * 拓展 Less 构建配置\n   */\n  less?: {\n    /**\n     * less.render 所需的参数。详情：https://lesscss.org/usage/##programmatic-usage\n     */\n    lessOptions?: Record<string, any>;\n    /**\n     * 是否需要自动创建包含了所有 Raw 样式文件的入口文件，并构建其产物\n     * 例如，源码包含 ComponentA/style.less 和 ComponentB/style.less，此选项将自动创建聚合了上述文件的 index.less，并构建对应的 index.css\n     */\n    combine?:\n      | boolean\n      | {\n          /**\n           * 聚合文件的文件名，也可以是一个相对路径。（默认值：index.less）\n           */\n          filename: string;\n        };\n    /**\n     * 自定义样式文件编译过程\n     */\n    compile?: (fileInfo, defaultCompileFn) => Promise<string>;\n  };\n  /**\n   * 拓展 Sass 构建配置\n   */\n  sass?: {\n    /**\n     * sass.compile 所需的参数。详情：https://sass-lang.com/documentation/js-api/modules##compile\n     */\n    sassOptions?: Record<string, any>;\n    /**\n     * 同 less 字段的同名配置\n     */\n    combine?:\n      | boolean\n      | {\n          filename: string;\n        };\n    /**\n     * 自定义样式文件编译过程\n     */\n    compile?: (fileInfo, defaultCompileFn) => Promise<string>;\n  };\n  /**\n   * 拓展生成 API 文档时，ts-document的相关配置\n   */\n  tsDocument?: {\n    /**\n     * 接受 ts-document 工具的解析配置\n     * https://www.npmjs.com/package/ts-document\n     */\n    tsDocumentOptions?: Record<string, any>;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Single Select with Option Creation\nDESCRIPTION: Demonstrates a single select component that allows creating new options with basic configuration and placeholder\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/allow-create.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select allowCreate placeholder=\"Create an item\" allowClear style={{ width: 345 }}>\n  {options.map((option) => (\n    <Option key={option} value={option} disabled={option === 'b11' ? true : false}>\n      {option}\n    </Option>\n  ))}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Nested Popconfirm, Tooltip, and Popover Components: span tag solution\nDESCRIPTION: This code demonstrates a solution for when nested `Popconfirm`, `Tooltip`, and `Popover` components don't all take effect. Wrapping the `Tooltip` component with a `span` tag ensures that both the `Tooltip` and `Popover` components function as expected when nested.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Popover\n  // ...\n>\n  <Tooltip\n    // ....\n  >\n    <Button>click</Button>\n  </Tooltip>\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Arco Design Grid Styling\nDESCRIPTION: This CSS snippet provides styling for the Arco Design Grid example. It defines the height, line-height, color, and text alignment for the grid columns. Additionally, it sets different background colors for odd and even columns.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/adaptation_object.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Panel Splits with ResizeBox in React\nDESCRIPTION: This snippet demonstrates how to create a nested panel split layout using the ResizeBox.Split component from Arco Design. It includes both horizontal and vertical splits, with the right pane containing a vertical split.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/nested_split.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResizeBox, Typography } from '@arco-design/web-react';\nconst rightPane = (\n  <div>\n    <ResizeBox.Split\n      direction=\"vertical\"\n      style={{ height: 200 }}\n      panes={[\n        <Typography.Paragraph>Top</Typography.Paragraph>,\n        <Typography.Paragraph>Bottom</Typography.Paragraph>,\n      ]}\n    ></ResizeBox.Split>\n  </div>\n);\n\nconst App = () => {\n  return (\n    <div>\n      <ResizeBox.Split\n        style={{\n          height: 200,\n          width: 500,\n          border: '1px solid var(--color-border)',\n        }}\n        panes={[<Typography.Paragraph>Right</Typography.Paragraph>, rightPane]}\n      ></ResizeBox.Split>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing setupMock Function for Mock Configuration in JavaScript\nDESCRIPTION: This snippet defines a setupMock function that allows easy configuration of mock data. It provides an option to enable or disable mocking based on the environment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function setupMock(config: {\n  mock?: boolean;\n  setup: () => void\n}) {\n  const {mock = !__PRODUCTION__, setup} = config;\n\n  if (mock === false) return;\n\n  setup();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Watermark in React with Arco Design\nDESCRIPTION: Creates a watermark overlay with the text 'Arco Design' on a container div element. The Watermark component wraps a div with a height of 300 pixels and applies the specified watermark content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Watermark } from '@arco-design/web-react';\n\nconst App = () => {\n  return <Watermark\n  content=\"Arco Design\"\n  >\n   <div style={{height: 300}}></div>\n  </Watermark>\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Adding onKeyDown Callback to Select Component\nDESCRIPTION: Demonstrates how to listen to the onKeyDown callback in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nonKeyDown\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Component in Arco Workspace JSON\nDESCRIPTION: This snippet demonstrates how to add a unified changelog entry for all materials in a project. It configures a new MDX file as a separate component for version logs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/team.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": {\n\"members\": [\n{\n\"name\": \"Changelog\"\n\"rootDir\": \"src\",\n\"entries\": {\n\"base\": \"__changelog__\",\n\"preview\": \"index.mdx\"\n}\n}\n]\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table Summary Function\nDESCRIPTION: Implements a summary function that calculates total values for salary, count, and stars using reduce method\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/summary.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction summary(currentData) {\n  return (\n    <Table.Summary.Row>\n      <Table.Summary.Cell>Total</Table.Summary.Cell>\n      <Table.Summary.Cell\n        style={{\n          backgroundColor: 'rgb(var(--success-1))'\n        }}\n      >\n        <Typography.Text type=\"success\" bold>\n          {currentData.reduce((prev, next) => prev + next.salary, 0)}\n        </Typography.Text>\n      </Table.Summary.Cell>\n      <Table.Summary.Cell>\n        {currentData.reduce((prev, next) => prev + next.count, 0)}\n      </Table.Summary.Cell>\n      <Table.Summary.Cell>\n        {currentData.reduce((prev, next) => prev + next.stars, 0)}\n      </Table.Summary.Cell>\n    </Table.Summary.Row>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error State with Arco Design Image\nDESCRIPTION: This code snippet demonstrates how to use the Arco Design Image component to display an error state when an image fails to load. It imports the Image and Space components from '@arco-design/web-react' and renders two Image components with a broken image source ('some-error.png'). The Space component is used to provide spacing between the images.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/error.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image, Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Space size={20}>\n      <Image width={400} height={300} src=\"some-error.png\" alt=\"some-error\" />\n      <Image\n        width={400}\n        height={300}\n        src=\"some-error.png\"\n        alt=\"This is a picture of humans eating ice cream. The humans on the screen are very happy just now. The ice cream is green, it seems to be flavored with matcha. The gender of the human is unknown. It has very long hair and the human hair is brown.\"\n      />\n    </Space>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining Available Virtual List Properties for Tree Component\nDESCRIPTION: TypeScript type that picks specific properties from the VirtualListProps interface to be used with the Tree component's virtual scrolling functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for Language Packs in Bash\nDESCRIPTION: Shows the directory structure for language pack files and the utility file for using locales. The language packs are defined in 'src/locale' and imported into 'useLocale' to take effect.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/i18n.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── locale\n│ ├── en-US.ts\n│ └── zh-CN.ts\n└── utils\n     └── useLocale.ts\n```\n\n----------------------------------------\n\nTITLE: Defining ValueChangeReason TypeScript Type\nDESCRIPTION: Specifies the possible reasons for tag value changes in the InputTag component\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ValueChangeReason = \"add\" | \"remove\" | \"clear\" | \"sort\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Authentication in TypeScript\nDESCRIPTION: Contains the core logic for permission checking, including support for string and regex-based resource matching, and handling multiple required permissions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Auth = {\n  resource: string | RegExp;\n  actions?: string[];\n};\n\ninterface AuthParams {\n  // Array of permissions required for an operation\n  requiredPermissions?: Array<Auth>;\n  // Whether one needs to be satisfied, that is or is and.\n  oneOfPerm?: boolean;\n}\n\n/**\n * Authenticate an operation on a resource\n * actions: Action permissions required by the current resource\n * perm: the permissions the user has on the current resource\n **/\nconst judge = (actions: string[], perm: string[]) => {\n  if (!perm || !perm.length) {\n    return false;\n  }\n\n  // The user has full permissions to this resource.\n  // perm = ['*']\n  if (perm.join('') === '*') {\n    return true;\n  }\n\n  return actions.every((action) => perm.includes(action));\n};\n\n/**\n * Authenticate to a resource\n * params: resource + actions\n * userPermission: the permissions the user has\n **/\nconst auth = (params: Auth, userPermission: UserPermission) => {\n  const { resource, actions = [] } = params;\n  // current resource is a regular\n  if (resource instanceof RegExp) {\n    const permKeys = Object.keys(userPermission);\n\n  // Get the resource that the user matches\n    const matchPermissions = permKeys.filter((item) => item.match(resource));\n\n    // Judge the permissions of all matching resources.\n    return matchPermissions.every((key) => {\n      const perm = userPermission[key];\n      return judge(actions, perm);\n    });\n  }\n\n  // resource is a simple string.\n  const perm = userPermission[resource];\n  return judge(actions, perm);\n};\n\n/**\n * Multiple resource combination authentication\n * params: resource + actions array\n * userPermission: user permission\n **/\nexport default (params: AuthParams, userPermission: UserPermission) => {\n  const { requiredPermissions, oneOfPerm } = params;\n  if (Array.isArray(requiredPermissions) && requiredPermissions.length) {\n    let count = 0;\n    for (const rp of requiredPermissions) {\n      if (auth(rp, userPermission)) {\n        count++;\n      }\n    }\n    // or operation or and operation\n    return oneOfPerm ? count > 0 : count === requiredPermissions.length;\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Teams with Conditions in Material Platform API (POST)\nDESCRIPTION: This endpoint allows querying teams based on specific conditions such as id, name, and creation date range. It returns an array of team data matching the query parameters.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group\n\nReturn { result: Array }\n```\n\n----------------------------------------\n\nTITLE: Setting autoWidth in Select Component\nDESCRIPTION: Shows how to use the autoWidth property to enable width adaptation for the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nautoWidth\n```\n\n----------------------------------------\n\nTITLE: Styling Arco Design Layout Components with CSS\nDESCRIPTION: CSS styling for the Arco Design Layout components, providing visual differentiation between header, footer, sider, and content areas with different background colors and consistent text styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Layout/__demo__/resize.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.layout-basic-demo .arco-layout-header,\n.layout-basic-demo .arco-layout-footer,\n.layout-basic-demo .arco-layout-sider,\n.layout-basic-demo .arco-layout-sider-children,\n.layout-basic-demo .arco-layout-content {\n  color: var(--color-white);\n  text-align: center;\n  font-stretch: condensed;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.layout-basic-demo .arco-layout-header,\n.layout-basic-demo .arco-layout-footer {\n  height: 64px;\n  background-color: var(--color-primary-light-4);\n}\n\n.layout-basic-demo .arco-layout-sider {\n  width: 206px;\n  background-color: var(--color-primary-light-3);\n}\n\n.layout-basic-demo .arco-layout-content {\n  background-color: rgb(var(--arcoblue-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageHeader Component Structure\nDESCRIPTION: Markdown documentation defining the PageHeader component as a navigation element with built-in actions and design elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Navigation\n\n# PageHeader\n\nA header with common actions and design elements built in.\n```\n\n----------------------------------------\n\nTITLE: Configuring Less and Static Resources\nDESCRIPTION: Customizing Less compilation entry points, dev mode file watching, and static resource paths for project assets\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config) => {\n  config.less.entry = ['src/**/index.less'];\n  config.less.watch = ['src/**/*.{less,woff,png,jpg}'];\n  config.asset.entry = ['src/**/*.{woff,png,jpg}'];\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the Grid Layout for better visual representation\nDESCRIPTION: This CSS snippet styles the grid columns within the grid layout, setting their height, line height, color, and text alignment. It also applies alternating background colors to enhance visual separation between grid columns. This snippet is crucial for ensuring the grid layout remains visually appealing and user-friendly.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/offset.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\ngrid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason Enum in TypeScript\nDESCRIPTION: Defines the reasons for input value changes in the TreeSelect component, including manual input, option selection, and dropdown menu hide events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// 造成输入框值改变的原因：用户输入、选中选项、选项下拉框收起\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionChecked\"\n  | \"optionListHide\";\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualListProps Interface for Select Component in Markdown\nDESCRIPTION: This snippet defines the properties of the VirtualListProps interface used in the Select component. It includes properties for configuring the virtual list functionality, such as height, threshold, and item height type.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|------|:----------:|:--------:|-----:|\n|height|可视区高度 (`2.11.0` 开始支持如 `80%` 的 `string` 类型)|`number`|200|\n|threshold|自动开启虚拟滚动的元素数量阈值，传入`null`以禁用虚拟滚动。|`number`\\|`null`|100|\n|isStaticItemHeight|是否为相同高度的静态元素|`boolean`|true|\n```\n\n----------------------------------------\n\nTITLE: Styling for Dropdown Demo\nDESCRIPTION: This CSS snippet provides styling for the Dropdown demo, specifically targeting the button and the dropdown icon.  It adjusts the button's padding and font-weight, and it rotates the dropdown icon when the dropdown popup is visible, providing a visual cue that the dropdown is open.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/sub-menu.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing VerificationCode States in React with Arco Design\nDESCRIPTION: Demonstrates three different states of the VerificationCode component: disabled, readonly, and error. The component is rendered within Space containers with Typography labels and custom styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VerificationCode, Space, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Space>\n        <div style={{width: 80}}>\n          <Typography.Text >Disabled</Typography.Text>\n        </div>\n        <VerificationCode defaultValue={'123456'} disabled style={{width: 300}}/>\n      </Space>\n      <br/>\n      <br/>\n      <Space>\n        <div style={{width: 80}}>\n          <Typography.Text>ReadOnly</Typography.Text>\n        </div>\n        <VerificationCode defaultValue={'123456'} readOnly style={{width: 300}}/>\n      </Space>\n      <br/>\n      <br/>\n      <Space>\n        <div style={{width: 80}}>\n          <Typography.Text>Error</Typography.Text>\n        </div>\n        <VerificationCode status=\"error\" style={{width: 300}}/>\n      </Space>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TransferItem Type in TypeScript\nDESCRIPTION: Type definition for TransferItem which represents individual items in the Transfer component with key, value, and optional disabled properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TransferItem = {\n  key: string;\n  value: string;\n  disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Watermark Component API Definition - Markdown\nDESCRIPTION: API documentation table defining the configuration parameters for the Watermark component. Includes properties like rotation, image source, content, styling, dimensions, and container options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|rotate|单个水印旋转角度|number |`-20`|\n|image|水印图片源，优先级比文字内容高|string |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|content|水印的文字内容|string \\| string[] |`-`|\n|fontStyle|水印文字样式|{color?: string;fontFamily?: string;fontSize?: number \\| string;fontWeight?: number \\| string;} |`{color:`rgba(0, 0, 0, 0.12)`, fontFamily: `sans-serif`, fontSize: `14px`, fontWeight: `normal` }`|\n|gap|水印间的间距|[number, number] |`[100, 100]`|\n|height|单个水印的高度|number \\| string |`-`|\n|offset|水印相对于 `container` 容器的偏移量。|[number, number] |`[`gaps[0] / 2`, `gaps[1] / 2`]`|\n|style|节点样式|CSSProperties |`-`|\n|width|单个水印的宽度。`image` 时默认为 100，content 时默认为文本宽度|number \\| string |`-`|\n|zIndex|zIndex|string \\| number |`-`|\n|getContainer|添加水印的容器 `wrapper`，会把水印 `dom` 作为 `container` 的第一个子节点展示|() => HTMLElement |`-`|\n```\n\n----------------------------------------\n\nTITLE: Selecting Project Type in Arco Design Pro Setup\nDESCRIPTION: This snippet illustrates the choice of project type within the Arco Design Pro setup, focusing on selecting the 'Arco Pro project' category.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n? Please select the type of project you want to create\n  Business component\n  Block\n  page\n  Component library\n  Lerna Monorepo project\n❯ Arco Pro project\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Prefix for ArcoDesign Components\nDESCRIPTION: This JavaScript snippet demonstrates how to globally configure the 'prefixCls' for ArcoDesign components using ConfigProvider.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// 这样所有组件的类名前缀都会变为 byte，默认是 arco\n<ConfigProvider prefixCls=\"byte\">\n  <App />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring prefixCls globally via ConfigProvider\nDESCRIPTION: This code demonstrates how to configure the CSS class name prefix for all Arco Design components globally using the ConfigProvider component. By setting the `prefixCls` prop to a desired value (e.g., \"byte\"), all components will use the specified prefix for their CSS classes. This allows for customization and avoids potential conflicts with other libraries.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// In this way, the css class name prefix of all components will become byte, and the default is arco.\n<ConfigProvider prefixCls=\"byte\">\n  <App />\n</ConfigProvider>\n```\n\n----------------------------------------\n\nTITLE: Arco Grid: Styling with CSS\nDESCRIPTION: This CSS snippet provides styling for the Arco Design Grid component, specifically targeting the `.grid-demo` class and its child `.arco-col` elements. It sets the height, line-height, text color, and text alignment for the columns, and uses `nth-child` selectors to apply alternating background colors to the columns for better visualization.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/flex-justify.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Key Warning Fix for Select Component - TypeScript\nDESCRIPTION: This snippet resolves a warning in the console regarding the necessity of a unique key when using maxTagCount in the Select component. The fix ensures that React's key management works correctly to prevent performance issues.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the problem that the console shows the warning that the element needs a unique key when `Select` uses `maxTagCount`.\n```\n\n----------------------------------------\n\nTITLE: Querying All Materials with GET Request in TypeScript\nDESCRIPTION: This snippet demonstrates how to query all materials using a GET request to the Material Market API. It returns an array of results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGET https://arco.design/material/api/material\n\nReturn {result: Array}\n```\n\n----------------------------------------\n\nTITLE: Defining ListGridProps Type in TypeScript\nDESCRIPTION: Type definition for ListGridProps that combines column configuration with Row and Col props from grid system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListGridProps = {\n  column?: number;\n} & Pick<RowProps, \"gutter\" | \"justify\" | \"align\"> &\n  Pick<\n    ColProps,\n    \"span\" | \"offset\" | \"order\" | \"pull\" | \"push\" | GridResponsiveBreakpoint\n  >;\n```\n\n----------------------------------------\n\nTITLE: Global Context Provider in TypeScript\nDESCRIPTION: This TypeScript code defines a global context provider for an Arco design system component. It creates a React context with a specific value (appName) and provides a component (GlobalContextProvider) that wraps its children within the context provider, making the context value available to all child components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/globalContext/index.tsx\nimport React, { createContext, PropsWithChildren, useMemo } from 'react';\n\nexport const GlobalContext = createContext({ appName: '' });\n\n// The default exported component will wrap the content of index.mdx\nexport default function GlobalContextProvider({ children }: PropsWithChildren) {\nconst contextValue = useMemo<GlobalContextType>(() => {\nreturn { appName: 'Example Project' };\n}, []);\nreturn <GlobalContext.Provider children={children} value={contextValue} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType for TreeSelect in TypeScript\nDESCRIPTION: Defines the FieldNamesType for customizing field names in TreeSelect component, allowing mapping of key, title, disabled, children, and other properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FieldNamesType = {\n  key?: string;\n  title?: string;\n  disabled?: string;\n  children?: string;\n  isLeaf?: string;\n  disableCheckbox?: string;\n  checkable?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Styles in arco.workspace.jsonc\nDESCRIPTION: This code snippet demonstrates how to configure extra styles for components that can be dynamically injected. It is done by adding a configuration to the component in `arco.workspace.jsonc` to provide a list of themes to choose from. The `.css` file corresponding to the theme will be introduced as an outline style.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": [\n{\n\"name\": \"ComponentName\",\n// Use this field to configure the extra styles of components that can be dynamically injected\n\"extraStyles\": [\n{\n\"title\": \"Linear Theme\",\n\"href\": \"https://sf-unpkg-src.bytedance.net/@arco-design/theme-line@latest/css/arco.css\",\n}\n]\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Behaviors for Component Creation in JSON\nDESCRIPTION: JSON configuration in arco.workspace.jsonc for setting default behaviors when creating new components, including default path and template.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/workspace.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.service/generator\": {\n// Default directory for adding new components, equivalent to arco create --path=\"workspace-path/defaultPath\"\n\"defaultPath\": \"src\",\n// Default template used when adding new components\n// Currently only supports specifying local directories as templates, please use file: as the template path prefix\n\"defaultTemplate\": \"file:.scripts/templates/component\",\n\"hooks\": {\n// Hook function executed after component creation\n\"afterComponen\ntCreated\": \"./.scripts/workspaceHooks/afterComponentCreated.js\"\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Data with Mock.js in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Mock.js to intercept AJAX requests and generate mock data. It creates a mock response for a chat list API endpoint.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mock from 'mockjs';\n\nMock.mock(new RegExp('/api/chatList'), () => {\n  const data = Mock.mock({\n    'data|4-6': [\n      {\n        'id|+1': 1,\n        username: '用户7352772',\n        content: '马上就开始了，好激动！',\n        time: '13:09:12',\n        'isCollect|2': true,\n      },\n    ],\n  });\n\n  return data.data;\n});\n```\n\n----------------------------------------\n\nTITLE: Feature: Virtual List Support in Transfer\nDESCRIPTION: Adds virtual list scrolling capability to the Transfer component, allowing efficient rendering of large lists by supporting virtual scrolling properties\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvirtualListProps: VirtualListProps\n```\n\n----------------------------------------\n\nTITLE: Sortable Wrapper Component\nDESCRIPTION: This component wraps the table body (tbody) to make it sortable using `SortableContainer` from `react-sortable-hoc`.  It receives props and renders a `tbody` element with those props.  It's a necessary wrapper for `react-sortable-hoc` to manage the sorting.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst SortableWrapper = SortableContainer((props) => {\n  return <tbody {...props} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Tree Component Introduction in Markdown\nDESCRIPTION: Introduces the Tree component, which is used to display hierarchical data with interactions like expanding, collapsing, and selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\n组件 / 数据展示\n\n# 树 Tree\n\n对于文件夹、分类目录、组织架构等层级较多的内容，树可以清楚显示他们的层级关系，并具有展开、收起、选择等交互功能。\n`````\n```\n\n----------------------------------------\n\nTITLE: Linking Arco CLI to a Team\nDESCRIPTION: Commands to link Arco CLI to a specific team for customized material creation and publishing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Choose one of the joined teams to associate\narco group --link\n\n# Associate the specified team, the parameter is not your team ID\narco group --link 1\n\n# unlink team\narco group --link 0\n```\n\n----------------------------------------\n\nTITLE: Styling Comment Reply Actions\nDESCRIPTION: Defines CSS styles for the comment reply action button, including hover effects and transitions. Uses CSS variables for theming compatibility with Arco Design.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/editor.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-comment-action {\n  padding: 0 4px;\n  line-height: 24px;\n  border-radius: 2px;\n  background: transparent;\n  transition: all 0.1s ease;\n  color: var(--color-text-1);\n  cursor: pointer;\n  display: inline-block;\n}\n\n.custom-comment-action:hover {\n  background: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigProvider Changelog Entries\nDESCRIPTION: Chronological listing of changes made to the ConfigProvider component including new features for global component configuration, language support additions, and bug fixes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.61.0\n\n2024-03-15\n\n### 🆕 Feature\n\n- `ConfigProvider` component adds `effectGlobalModal` attribute([#2562](https://github.com/arco-design/arco-design/pull/2562))\n\n## 2.59.1\n\n2024-01-26\n\n### 🐛 BugFix\n\n- Fixed a bug where the default value of `ConfigProvider` was mistakenly changed when Notice was called.([#2511](https://github.com/arco-design/arco-design/pull/2511))\n\n## 2.41.0\n\n2022-10-28\n\n### 🆕 Feature\n\n- Add Malay.([#1465](https://github.com/arco-design/arco-design/pull/1465))\n\n## 2.33.0\n\n2022-05-13\n\n### 🆕 Feature\n\n- The `componentConfig` of the `ConfigProvider` component supports configuring `Timeline.Item`.([#862](https://github.com/arco-design/arco-design/pull/862))\n\n## 2.28.0\n\n2022-01-07\n\n### 🆕 Feature\n\n- Support setting French, Italian, German, Spanish([#413](https://github.com/arco-design/arco-design/pull/413))\n\n## 2.23.0\n\n2021-09-27\n\n### 🆕 Feature\n\n- `ConfigProvider` component adds the parameter `componentConfig`, which can configure the default configuration of all components globally.\n\n## 2.13.0\n\n2021-03-26\n\n## 2.10.0 🏮\n\n2020-02-26\n\n### 🆕 Feature\n\n- `ConfigProvider` supports `renderEmpty` to set empty elements in the component globally.\n```\n\n----------------------------------------\n\nTITLE: Styling Card Actions with CSS for Hover Effects\nDESCRIPTION: This CSS snippet provides styles for the action icons in the Card component. It creates a circular hover effect for the icons, enhancing the interactivity of the card.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/with-actions.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.card-with-icon-hover .icon-hover {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  transition: all 0.1s;\n}\n\n.card-with-icon-hover .icon-hover:hover {\n  background-color: rgb(var(--gray-2));\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Popup Position with Arco Design - JavaScript\nDESCRIPTION: This snippet demonstrates creating popups with adjustable alignments using Arco Design's React components. It specifies dependencies on the 'arco-design/web-react' package. Key functionality includes setting the 'popupAlign' property to adjust popup offsets vertically and horizontally. Inputs include alignment configuration, and it outputs visually adjusted popups based on user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/popupAlign.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Trigger, Button, Input, Skeleton, Space } from '@arco-design/web-react';\n\nfunction Popup() {\n  return <Skeleton className=\"demo-trigger-popup\" style={{ width: 300 }} />;\n}\n\nfunction App() {\n  return (\n    <div style={{ background: 'var(--color-fill-2)', padding: 40 }}>\n      <Space size={[40, 10]} wrap>\n        <Trigger\n          trigger=\"click\"\n          position=\"top\"\n          popupAlign={{\n            top: 20,\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Top\n          </Button>\n        </Trigger>\n        <Trigger\n          trigger=\"click\"\n          position=\"top\"\n          popupAlign={{\n            top: [100, 20],\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Top offset [100, 20]\n          </Button>\n        </Trigger>\n        <Trigger\n          trigger=\"click\"\n          position=\"top\"\n          popupAlign={{\n            top: [-100, 20],\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Top offset [-100, 20]\n          </Button>\n        </Trigger>\n        <Trigger\n          trigger=\"click\"\n          position=\"right\"\n          popupAlign={{\n            right: 30,\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Right\n          </Button>\n        </Trigger>\n        <Trigger\n          trigger=\"click\"\n          position=\"right\"\n          popupAlign={{\n            right: [30, 50],\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Right offset [30, 50]\n          </Button>\n        </Trigger>\n        <Trigger\n          trigger=\"click\"\n          position=\"right\"\n          popupAlign={{\n            right: [30, -50],\n          }}\n          popup={() => <Popup />}\n        >\n          <Button type=\"primary\">\n            Right offset [30, -50]\n          </Button>\n        </Trigger>\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType Interface in TypeScript\nDESCRIPTION: This code snippet defines the ObjectValueType interface, which represents the structure of value objects used in the Cascader component, including properties for value, label, and closable.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AllowDrop Type for Tree Component in TypeScript\nDESCRIPTION: Type definition for the allowDrop property of the Tree component, which determines whether a node can be dropped at a specific position.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AllowDrop = (options: {\n  dropNode: NodeInstance;\n  dragNode: NodeInstance | null;\n  dropPosition: number;\n}) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarValue Type in TypeScript\nDESCRIPTION: Specifies the allowed types for calendar values in the DatePicker component, including number, string, Date, and Dayjs objects.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CalendarValue = number | string | Date | Dayjs;\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeBox.SplitGroup.Pane API in Markdown\nDESCRIPTION: Markdown table detailing the API for the ResizeBox.SplitGroup.Pane component, including parameters, types, descriptions, and default values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|disabled|禁用，将不会展示伸缩杆。|boolean |`-`|\n|resizable|是否支持拖拽伸缩|boolean |`true`|\n|content|当前面板的内容|ReactNode  **(必填)**|`-`|\n|collapsible|是否支持快速折叠;|\\| boolean\\| {prev?: boolean \\| [CollapsedConfig](resize-box#resizeboxsplitgroupcollapsedconfig);next?: boolean \\| [CollapsedConfig](resize-box#resizeboxsplitgroupcollapsedconfig);} |`-`|\n|max|最大阈值|number \\| string |`-`|\n|min|最小阈值，优先级比 `max`高，并且会影响相邻面板的阈值。|number \\| string |`-`|\n|size|分割的大小，可以是 0~1 代表百分比，或具体数值的像素，如 300px|number \\| string |`-`|\n|trigger|定制伸缩杆内容, 参数分别表示向前快速收缩、拖拽伸缩触发器、向后快速收缩的触发器|(prevNode: ReactNode, resizeNode: ReactNode, nextNode: ReactNode) => ReactNode |`-`|\n```\n\n----------------------------------------\n\nTITLE: Initializing Arco Design Statistic Component with Custom Styling\nDESCRIPTION: Renders multiple Statistic components with custom icons, value display, and styling for user metrics visualization\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__demo__/prefix_suffix.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Statistic } from '@arco-design/web-react';\nimport { IconArrowRise, IconArrowFall } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div>\n      <Statistic\n        title=\"New Users\"\n        value={192393}\n        suffix={<IconArrowRise style={{ color: '#ee4d38' }} />}\n        style={{ marginRight: 60, marginBottom: 20 }}\n      />\n      <Statistic\n        title=\"Active Users\"\n        value={934230}\n        suffix={<IconArrowFall style={{ color: '#0fbf60' }} />}\n        style={{ marginRight: 60, marginBottom: 20 }}\n      />\n      <Statistic\n        title=\"User Growth Rate\"\n        value={50.32}\n        precision={2}\n        prefix={<IconArrowRise style={{ color: '#ee4d38' }} />}\n        suffix=\"%\"\n        styleValue={{ color: '#ee4d38' }}\n        style={{ marginRight: 60, marginBottom: 20 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Demo for Material Component\nDESCRIPTION: Example of a basic usage demo for a material component, typically placed in a separate file within the __docs__ directory.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// basicUsage.tsx\nimport React from 'react';\nimport UserSelect from '..';\n\nexport default function () {\n  return <UserSelect selectProps={{ placeholder: 'Please select a user' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeBox.SplitGroup API in Markdown\nDESCRIPTION: Markdown table detailing the API for the ResizeBox.SplitGroup component, including parameters, types, descriptions, and default values. This component was introduced in version 2.27.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|component|分割框的 html 标签|string |`div`|\n|direction|分割方向分为水平 `horizontal` 和垂直 `vertical`，默认是水平分割|'horizontal' \\| 'vertical' |`horizontal`|\n|icon|定制伸缩杆的图标|ReactNode |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|panes|面板|[SplitGroupPane](resize-box#resizeboxsplitgrouppane)[]  **(必填)**|`-`|\n|style|节点样式|CSSProperties |`-`|\n|onMoving|拖拽中的回调, `size` 参数是各个面板占的像素值|(e: MouseEvent, size: string[], activeIndex: number) => void |`-`|\n|onMovingEnd|拖拽结束之后的回调|(activeIndex: number) => void |`-`|\n|onMovingStart|开始拖拽之前的回调|(activeIndex: number) => void |`-`|\n|onPaneResize|面板大小变化的回调|(paneContainers: HTMLElement[]) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon with Arco Design Spin in JavaScript\nDESCRIPTION: This example demonstrates how to use the Arco Design library's Spin component with a custom icon. It imports necessary components such as Spin, Card, and Link from '@arco-design/web-react', along with the IconLoading from '@arco-design/web-react/icon'. The App function uses the Spin component wrapped around a Card to display a loading state with the custom IconLoading, indicating while content is being loaded. It requires '@arco-design/web-react' and '@arco-design/web-react/icon' packages. Users can modify the icon, size, and loading state as needed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__demo__/custom-icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Spin, Card, Link } from '@arco-design/web-react';\nimport { IconLoading } from '@arco-design/web-react/icon';\n\nfunction App() {\n  return (\n    <Spin loading={true} size={30} icon={<IconLoading />}>\n      <Card\n        style={{ width: 360, }}\n        title=\"Arco Card\"\n        extra={<Link> More </Link>}\n      >\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats.\n      </Card>\n    </Spin>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining GradientColor Interface in TypeScript\nDESCRIPTION: This snippet defines the GradientColor interface used in the ColorPicker component. It specifies the structure for gradient colors with color and percent properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GradientColor {\n  color: string;\n  percent: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Material Site Viewer in React Application\nDESCRIPTION: This code snippet demonstrates how to set up and render the SiteViewer component from @arco-materials/material-site-viewer in a React application. It includes necessary imports, global dependency injection, and component configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as arco from '@arco-design/web-react';\nimport * as arcoicon from '@arco-design/web-react/icon';\n\nimport { createBrowserHistory } from 'history';\nimport { Router } from 'react-router-dom';\nimport SiteViewer from '@arco-materials/material-site-viewer';\n\n// 确保当前项目中全局引入了 arco 的样式\n// 如果使用了 Design Lab 主题，可引入主题包的 css 文件\nimport '@arco-design/web-react/dist/css/arco.min.css';\n\n// 由于站点产物文件已经将 React/ReactDOM/Arco 去除，需要在全局作用域将其暴露\n(function injectGlobalDependencies() {\n  const globalDependencies = {\n    React,\n    ReactDOM,\n    arco,\n    arcoicon,\n  };\n\n  Object.entries(globalDependencies).forEach(([key, value]) => {\n    window[key] = value;\n  });\n})();\n\nexport default () => {\n  return (\n    <Router history={createBrowserHistory({ basename: '' })}>\n      <SiteViewer\n        // 文档站页面的基础路由\n        routerHistoryBasename=\"/doc/\"\n        // 指定站点产物的 URL（非文件路径\n        siteFileUrl={{\n          js: 'https://unpkg.com/@arco-materials/material-team-site@latest/dist/arcoSite.zh-CN.js',\n          css: 'https://unpkg.com/@arco-materials/material-team-site@latest/dist/arcoSite.css',\n        }}\n        // route 中包含了所点击的菜单项对应的页面路径信息，可以根据这个信息自行修改页面路由\n        onClickMenuItem={(route) => {\n          console.log(route);\n        }}\n      />\n    </Router>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Querying All Groups in Material Market API\nDESCRIPTION: This snippet shows how to query all groups using a GET request to the Material Market API. It returns an array of results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://arco.design/material/api/group\n\nReturn {result: Array}\n```\n\n----------------------------------------\n\nTITLE: Defining InputNumber Value Change Reasons in JavaScript\nDESCRIPTION: This code snippet defines a TypeScript type `InputNumberValueChangeReason` that represents the possible reasons for a change in the value of an InputNumber component. It includes 'manual' (user input), 'increase', 'decrease', and 'outOfRange' as possible reasons. This type is used in the onChange event to provide context about the value change.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"// 造成输入框值改变的原因：用户输入、增加、减少、超出范围值修正\nexport type InputNumberValueChangeReason =\n  | \\\"manual\\\"\n  | \\\"increase\\\"\n  | \\\"decrease\\\"\n  | \\\"outOfRange\\\";\"\n```\n\n----------------------------------------\n\nTITLE: Using Arco Design Empty Component with Custom Image\nDESCRIPTION: This code snippet demonstrates how to use the Empty component from Arco Design's web library in a React application. It shows how to pass an image URL to the imgSrc property and includes a Button as a description component. The required dependency is '@arco-design/web-react'. The snippet expects a valid image URL and renders the Empty component along with a button for refreshing the view.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Empty/__demo__/image.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Empty, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Empty\n      imgSrc=\"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a0082b7754fbdb2d98a5c18d0b0edd25.png~tplv-uwbnlip3yd-webp.webp\"\n      description={<Button type=\"primary\">Refresh</Button>}\n    />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TreeSelectDataType in JavaScript\nDESCRIPTION: Defines the TreeSelectDataType which extends TreeDataType and includes an optional value attribute. This is used to structure data for the TreeSelect component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport type TreeSelectDataType = TreeDataType & {\n  value?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Workspace Preview Server\nDESCRIPTION: Commands to enter the workspace directory and start the preview server for all materials.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd arco-cli-next-demo\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Hide Selected Items in Arco Design Select (React)\nDESCRIPTION: This React component creates a Select dropdown that hides options once they are selected. It uses the Arco Design library and manages the available options using useState hook. The component updates the list of available options on each selection change.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/hide-selected-option.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { Select } from '@arco-design/web-react';\nconst Option = Select.Option;\nconst OPTIONS = new Array(10).fill(null).map((_, index) => `Option ${index + 1}`);\n\nfunction App() {\n  const [options, setOptions] = useState(OPTIONS);\n  return (\n    <>\n      <Select\n        placeholder=\"Select an item\"\n        style={{ width: 345, marginRight: 20 }}\n        mode=\"multiple\"\n        onChange={(value) => setOptions(OPTIONS.filter((option) => value.indexOf(option) === -1))}\n      >\n        {options.map((option, index) => (\n          <Option wrapperClassName=\"select-demo-hide-option-checkbox\" key={index} value={option}>\n            {option}\n          </Option>\n        ))}\n      </Select>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with JSDoc Type Hints\nDESCRIPTION: Leveraging TypeScript type definitions for intellisense in configuration files using JSDoc type annotations\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n  * @param config {import('arco-scripts').DocgenConfig}\n  */\nmodule.exports = (config) => {};\n```\n\n----------------------------------------\n\nTITLE: Displaying Arco Pro Directory Structure Using Bash Tree Command\nDESCRIPTION: This bash snippet shows the directory structure of an Arco Pro project based on create-react-app architecture. It includes key directories and files such as config files, public assets, source code, and package management files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/directory.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md\n├── config-overrides.js\n├── package-lock.json\n├── package.json\n├── public\n│ └── index.html          # cra packaging template\n├── react-app-env.d.ts\n├── src\n│ ├── assets              # static resources\n│ ├── components          # General business components\n│ ├── context.tsx         # global configuration\n│ ├── declaration.d.ts\n│ ├── index.tsx           # Entry file\n│ ├── layout.tsx          # layout\n│ ├── locale              # Internationalized language pack\n│ ├── mock                # public component mock data\n│ ├── pages               # page template\n│ ├── react-app-env.d.ts\n│ ├── routes.ts           # Route configuration\n│ ├── settings.json       # configuration file\n│ ├── store               # redux state management\n│ ├── style               # Global style\n│ └── utils               # Tool library\n├── tsconfig-base.json\n├── tsconfig.json\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Variable Prefix in Less\nDESCRIPTION: Support modifying the CSS variable prefix through the 'arco-vars-prefix' Less variable.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/changelog.common.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: Less\nCODE:\n```\n@arco-vars-prefix: my-prefix;\n```\n\n----------------------------------------\n\nTITLE: Select Component - Handling Null and Empty Values\nDESCRIPTION: This snippet demonstrates how the Select component treats null and empty strings as valid values. Options are provided for 'null', 'empty string', 'male' and 'female'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<Select>\n  <Option value={null}>未选择</Option>\n  <Option value={''}>留空</Option>\n  <Option value=\\\"male\\\">男</Option>\n  <Option value=\\\"female\\\">女</Option>\n</Select>\"\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the ThemeConfig type, which is a generic Record type for storing theme configuration options in the Arco Design library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ThemeConfig = Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Defining Divider Component in Markdown\nDESCRIPTION: This markdown snippet introduces the Divider component, describing its purpose in layout design. It's used to divide content areas and separate modules within a user interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\n组件 / 布局\n\n# 分割线 Divider\n\n划分内容区域，对模块做分隔。\n`````\n```\n\n----------------------------------------\n\nTITLE: Popconfirm Title and Content Function Type Support - TypeScript\nDESCRIPTION: Adds support for title and content properties to accept function types in the Popconfirm component. Released in version 2.48.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopconfirmProps {\n  title?: ReactNode | (() => ReactNode);\n  content?: ReactNode | (() => ReactNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Calendar Component API Table in Markdown\nDESCRIPTION: Markdown table documenting the API properties of the Calendar component, including property names, descriptions, types, and default values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Calendar/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|allowSelect|Whether to allow the selection and switching of the date. It's enabled by default in `panel` mode|boolean |`-`|\n|isWeek|Select Week date|boolean |`-`|\n|panel|Whether to be displayed in a container.|boolean |`-`|\n|panelTodayBtn|Whether to display the button to jump to today|boolean |`-`|\n|defaultMode|The default display mode of the calendar|'day' \\| 'week' \\| 'month' \\| 'year' |`month`|\n|headerType|There are two types of headers to choose from. Only work in full-screen calendar mode.|'button' \\| 'select' |`button`|\n|mode|The display mode of the calendar|'day' \\| 'week' \\| 'month' \\| 'year' |`-`|\n|panelOperations|Operation buttons configuration in card mode|Array<'left' \\| 'double-left' \\| 'right' \\| 'double-right'> |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|dayStartOfWeek|The first day of the week starts on the day of the week, `0`-Sunday, `1`-Monday.|0 \\| 1 |`0`|\n|locale|Internationalization configuration.|Record&lt;string, any&gt; |`-`|\n|panelWidth|The width of the calendar in card mode|number \\| string |`265`|\n|style|Additional style|CSSProperties |`-`|\n|dateInnerContent|Customize the date cell, the content will be added to the cell, and it will only work in the full-screen calendar mode.|(currentDate: Dayjs) => ReactNode |`-`|\n|dateRender|Customize the date display, which will completely cover the date cell.|(currentDate: Dayjs) => ReactNode |`-`|\n|disabledDate|Function that specifies the dates that cannot be selected|(current: Dayjs) => boolean |`-`|\n|headerRender|Custom header renderer.|(props: {value?: Dayjs;pageShowDate?: Dayjs;mode?: string;onChange;onChangePageDate;onChangeMode;}) => ReactNode |`-`|\n|monthRender|Customize the month display, which will completely cover the month cell.|(currentDate: Dayjs) => ReactNode |`-`|\n|onChange|Callback when date change.|(date: Dayjs) => void |`-`|\n|onPanelChange|Callback when the panel date changes.|(date: Dayjs) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for object values in the Cascader component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Carriage Return Submission in Select Component - TypeScript\nDESCRIPTION: This snippet fixes the issue where pressing the carriage return in the Select component causes the form to submit in React 17. The fix ensures that selecting options behaves correctly without triggering unwanted form submissions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the `Select` component uses the carriage return to select the option in React 17 will trigger the form submission event.\n```\n\n----------------------------------------\n\nTITLE: Defining UploadStatus Type\nDESCRIPTION: Type definition for possible upload status values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport type UploadStatus = \"init\" | \"uploading\" | \"done\" | \"error\";\n```\n\n----------------------------------------\n\nTITLE: Avatar Component API Parameters Table\nDESCRIPTION: API documentation table detailing the configuration parameters for the Avatar component including size, shape, triggers and styling options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|autoFixFontSize|是否自动根据头像尺寸调整字体大小。|boolean |`true`|\n|size|头像的尺寸大小，单位是 `px`|number |`-`|\n|shape|头像的形状，有圆形(circle)和正方形(square)两种|'circle' \\| 'square' |`circle`|\n|triggerType|可点击的头像交互类型。|'mask' \\| 'button' |`button`|\n|triggerIcon|可点击的头像交互图标。|ReactNode |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|style|节点样式|CSSProperties |`-`|\n|triggerIconStyle|交互图标的样式|CSSProperties |`-`|\n|onClick|点击回调|(e) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining SkeletonImageProps Interface in JavaScript\nDESCRIPTION: This code snippet defines the interface for SkeletonImageProps, which specifies the properties for image placeholders in the Skeleton component. It includes options for style, className, shape, size, position, and prefixCls.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface SkeletonImageProps {\n  style?: CSSProperties;\n  className?: string;\n  /** 图片形状 */\n  shape?: \"circle\" | \"square\";\n  /** 图片尺寸 */\n  size?: \"small\" | \"default\" | \"large\";\n  /** 图片位置 */\n  position?: \"left\" | \"right\";\n  prefixCls?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Materials in Material Platform API\nDESCRIPTION: This endpoint retrieves all materials from the Material Platform. It uses a GET request and returns an array of results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://arco.design/material/api/material\n\nReturn { result: Array }\n```\n\n----------------------------------------\n\nTITLE: ListHandle Type Definition for List Component\nDESCRIPTION: Type definition for the List component handle, which includes a reference to the DOM element and a method to scroll to specific list items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport type ListHandle = {\n  dom: HTMLDivElement;\n  scrollIntoView: (index: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: PageHeader Component API Documentation\nDESCRIPTION: API documentation table showing all available properties, their descriptions, types, and default values for the PageHeader component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|extra|Customize the extra content. The extra element will be rendered to the end of the title line|ReactNode |`-`|\n|footer|The footer element|ReactNode |`-`|\n|subTitle|The subtitle element|ReactNode |`-`|\n|title|The title element|ReactNode |`-`|\n|backIcon|Customize back icon, if false The back icon will not be displayed|ReactNode \\| boolean |`-`|\n|breadcrumb|The props of [Breadcrumb](/react/components/breadcrumb) component|[BreadcrumbProps](breadcrumb#breadcrumb) |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|onBack|Callback when click the back icon|(e: MouseEvent) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Function Material Demo\nDESCRIPTION: Illustrates the structure of a function material demo, which includes JSDoc comments for material descriptions and exports a basic example with an execution method and expected result.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n\"// index.js\n// Add description information for materials and Demo in the form of JSDoc\n\n/**\n * @file\n * @title function name\n * @memberOf function classification, for example: array processing\n * @description describes your function\n */\nimport add from'../../../src/add';\n\n/**\n * @title basic usage\n * @description describe your example\n */\nexport const basic = {\n  // Function execution method\n  exec: () => add(),\n  // Expected return of function execution\n  result: null,\n};\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Configuration with arco.config.js\nDESCRIPTION: Global configuration file for customizing Arco CLI command behavior, including package paths, command aliases, and initial metadata settings\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  packages: [],\n  alias: {\n    publish: '',\n  },\n  initialMeta: {\n    group: 0,\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TimePickerRangeProps Type in TypeScript\nDESCRIPTION: Extends TimePickerProps for range selection, omitting the original defaultValue and adding a new defaultValue property for arrays.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TimePickerRangeProps = Omit<TimePickerProps, \"defaultValue\"> & {\n  defaultValue?: CalendarValue[];\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example with Arco Design in React\nDESCRIPTION: This snippet shows how to embed a CodeSandbox example that uses the Arco Design React library within a React component. The `iframe` tag is used to load the CodeSandbox environment, allowing users to interact with and explore the code directly within the documentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: js:react\nCODE:\n```\n<div style={{ padding: 20, borderRadius: 4, backgroundColor: 'var(--color-neutral-2)' }}>\n  <iframe src=\"https://codesandbox.io/embed/reverent-voice-v2yzx?fontsize=14&hidenavigation=1&theme=dark\"\n    style={{ width: '100%', height: 500, border: 0, borderRadius: 4, overflow: 'hidden' }}\n    title=\"reverent-voice-v2yzx\"\n    allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n    sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pagination Component Type Definition\nDESCRIPTION: TypeScript interface definition showing all available properties for the Pagination component including disabled state, page size controls, navigation options, styling, and event handlers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationProps {\n  disabled?: boolean;\n  hideOnSinglePage?: boolean;\n  pageSizeChangeResetCurrent?: boolean;\n  showJumper?: boolean;\n  showMore?: boolean;\n  simple?: boolean;\n  sizeCanChange?: boolean;\n  bufferSize?: number;\n  current?: number;\n  defaultCurrent?: number;\n  defaultPageSize?: number;\n  pageSize?: number;\n  total?: number;\n  itemRender?: (page: number, type: 'page' | 'more' | 'prev' | 'next', originElement: ReactNode) => ReactNode;\n  size?: 'mini' | 'small' | 'default' | 'large';\n  activePageItemStyle?: CSSProperties;\n  className?: string | string[];\n  icons?: {\n    prev?: ReactNode;\n    next?: ReactNode;\n    more?: ReactNode;\n  };\n  pageItemStyle?: CSSProperties;\n  selectProps?: Partial<SelectProps>;\n  sizeOptions?: number[];\n  style?: CSSProperties;\n  onChange?: (pageNumber: number, pageSize: number) => void;\n  onPageSizeChange?: (size: number, current: number) => void;\n  showTotal?: boolean | ((total: number, range: number[]) => ReactNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Build Process in JavaScript\nDESCRIPTION: This example shows how to extend the TypeScript build process using the 'tsc-alias' tool to transform path aliases configured in 'tsconfig.compilerOptions.paths'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\nconst { replaceTscAliasPaths } = require('tsc-alias');\n\nmodule.exports = function defineConfig() {\n  return {\n    typescript: {\n      // TSCompiler config transformers\n      buildConfig: [\n        (config) => {\n          // 通过自定义 compile 函数，拓展 NPM 包 TS 编译流程\n          config.raw.compile = async ({ configFilePath }, defaultCompileFn) => {\n            // !!!默认的编译函数必须执行\n            defaultCompileFn();\n            // 转化通过 tsconfig.json compilerOptions.paths 字段配置的路径别名\n            await replaceTscAliasPaths({ configFile: configFilePath });\n          };\n        },\n      ]\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Type Comments in TypeScript\nDESCRIPTION: Demonstrates how to write proper type comments for interface properties, which will be automatically extracted as API documentation during the material build phase.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad Case\ninterfaceButtonProps {\n  size?: 'default' | 'mini' | 'large';\n}\n\n// ✅ Good Case\n/**\n * @titleButtonProps\n */\ninterfaceButtonProps {\n  /**\n   * @en button size\n   * @en Size of Button\n   * @defaultValue default\n   * @version 1.2.0\n   */\n  size?: 'default' | 'mini' | 'large';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in React Component\nDESCRIPTION: This diff snippet demonstrates how to modify a React component to use internationalization. It shows the import of the useLocale hook and how to replace hardcoded text with localized strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/i18n.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\n+ import useLocale from '@/utils/useLocale';\n\nexport default function Monitor() {\n\n+ const locale = useLocale();\n\n- return <div>监控页</div>;\n\n+ return <div>{locale['menu.dashboard.monitor']}</div>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Form within Modal Issue\nDESCRIPTION: Illustrates a common issue where a Form component nested within a Modal component cannot be accessed. The solution is to set `mountOnEnter=false` on the Modal component to ensure the Form is mounted when the Modal is rendered.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\nconst [form] = Form.useForm();\nuseEffect(() => {\n  form.setFieldsValue({})\n}, [])\nreturn <div>\n  <Modal visible={visible}>\n    <Form form={form}>\n      {/** ... */}\n    </Form>\n  </Modal>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Select Component: Handling null and empty string values\nDESCRIPTION: This code demonstrates how the Select component in Arco Design treats `null` and `''` (empty string) as valid values rather than placeholders. It provides an example of defining options with `null` and `''` values, which can be useful for representing 'not selected' or 'empty' states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Select>\n  <Option value={null}>未选择</Option>\n  <Option value={''}>留空</Option>\n  <Option value=\"male\">男</Option>\n  <Option value=\"female\">女</Option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Defining Popover Component API Schema in Markdown\nDESCRIPTION: Markdown table defining the API properties, types, default values and version information for the Popover component. Documents key configuration options like visibility control, positioning, triggers and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|blurToHide|是否在失去焦点的时候关闭弹出框|boolean |`true`|-|\n|defaultPopupVisible|默认的弹出框状态|boolean |`-`|-|\n|disabled|是否禁用|boolean |`-`|2.11.0|\n|popupHoverStay|鼠标移入弹出框的话，弹出框会保留而不销毁|boolean |`true`|-|\n|popupVisible|弹出框是打开还是关闭状态|boolean |`-`|-|\n|unmountOnExit|是否在隐藏的时候销毁 DOM 结构|boolean |`true`|-|\n|childrenPrefix|会在打开状态给元素加上一个类，格式为 `${childrenPrefix}-open`。|string |`-`|-|\n|color|弹出层背景色|string |`-`|2.22.0|\n|position|弹出框的方位，有 12 个方位可供选择|\\| 'top'\\| 'tl'\\| 'tr'\\| 'bottom'\\| 'bl'\\| 'br'\\| 'left'\\| 'lt'\\| 'lb'\\| 'right'\\| 'rt'\\| 'rb' |`top`|-|\n|trigger|触发方式|[TriggerProps](trigger#trigger)['trigger'] |`hover`|-|\n|content|弹出的内容|ReactNode |`-`|-|\n|className|节点类名|string \\| string[] |`-`|-|\n|style|节点样式|CSSProperties |`-`|-|\n|triggerProps|可以接受所有 `Trigger` 组件的参数|Partial&lt;[TriggerProps](trigger#trigger)&gt; |`-`|-|\n|getPopupContainer|弹出框挂载的节点|(node: HTMLElement) => Element |`-`|-|\n|onVisibleChange|显示或隐藏时触发的回调|(visible: boolean) => void |`-`|-|\n|title|标题.函数类型在 `2.48.0` 支持|ReactNode \\| (() => ReactNode) |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Simple Mode Transfer with Selected Items Retention\nDESCRIPTION: Introduces an option to retain selected items in the left panel when using Transfer in simple mode\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__changelog__/index.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsimple: boolean | { retainSelectedItems: true }\n```\n\n----------------------------------------\n\nTITLE: Defining ActionOnClick Type for Tree Component Click Behavior\nDESCRIPTION: TypeScript type definition for specifying what happens when a tree node is clicked. It can trigger selection, checkbox checking, or expansion/collapse of the node.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ActionOnClick = \"select\" | \"check\" | \"expand\";\n```\n\n----------------------------------------\n\nTITLE: Defining TreeSelectDataType in TypeScript\nDESCRIPTION: Extends TreeDataType to create the TreeSelectDataType, adding an optional value property for use in the TreeSelect component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeSelectDataType = TreeDataType & {\n  value?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LabelValue Type in JavaScript\nDESCRIPTION: Defines the LabelValue type used in TreeSelect. It includes a label, value, and an optional disabled flag as part of its structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport type LabelValue = {\n  label: ReactNode;\n  value: string;\n  disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FormItemChildrenFn for Arco Design Form\nDESCRIPTION: This type definition defines `FormItemChildrenFn` as a function that returns a React node. This function receives form data and form instance as arguments and is used to render the children of a Form.Item component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport type FormItemChildrenFn<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = (\n  formData: any,\n  form: FormInstance<FormData, FieldValue, FieldKey>\n) => React.ReactNode;\n```\n\n----------------------------------------\n\nTITLE: Popconfirm Component API Interface\nDESCRIPTION: TypeScript interface definitions for the Popconfirm component properties, including visibility controls, styling options, button configurations, and event handlers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopconfirmProps {\n  autoFocus?: boolean;\n  defaultPopupVisible?: boolean;\n  disabled?: boolean;\n  focusLock?: boolean;\n  popupVisible?: boolean;\n  unmountOnExit?: boolean;\n  okType?: ButtonProps['type'];\n  position?: 'top' | 'tl' | 'tr' | 'bottom' | 'bl' | 'br' | 'left' | 'lt' | 'lb' | 'right' | 'rt' | 'rb';\n  trigger?: TriggerProps['trigger'];\n  cancelText?: ReactNode;\n  icon?: ReactNode;\n  okText?: ReactNode;\n  cancelButtonProps?: ButtonProps;\n  className?: string | string[];\n  okButtonProps?: ButtonProps;\n  onOk?: (e: React.MouseEvent) => Promise<any> | void;\n  style?: CSSProperties;\n  triggerProps?: Partial<TriggerProps>;\n  content?: ReactNode | (() => ReactNode);\n  getPopupContainer?: (node: HTMLElement) => Element;\n  onCancel?: (e: React.MouseEvent) => void;\n  onVisibleChange?: (visible: boolean) => void;\n  title?: ReactNode | (() => ReactNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Material Market 2.0 Header in Markdown\nDESCRIPTION: This snippet shows the header for the Material Market 2.0 changes document, including the title and a section indicating the 2.0 changes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/change.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMaterial Market 2.0\n\n# 2.0 Changes\n\nThis document introduces some changes in Arco Material 2.x.\n```\n\n----------------------------------------\n\nTITLE: Viewing Arco Scripts Help\nDESCRIPTION: Output of the 'arco-scripts --help' command, showing available commands and options for arco-scripts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ arco-scripts --help\n\nUsage: arco-scripts command [options]\n\nOptions:\n  -V, --version             output the version number\n  -h, --help                output usage information\n\nCommands:\n  dev:component [options]   build components with watch mode\n  dev:art                   copy art template with watch mode\n  build:component           build all these sources: es, cjs, dist, icon and css\n  build:component:css\n  build:component:dist\n  build:component:es\n  build:component:cjs\n  build:art\n  dev:site [options]        build your website with watch mode. e.g. arco-scripts dev:site --ip 127.0.0.1 --port 9090\n  build:site\n  build:icon\n  docgen [options]          generate document of component. e.g. arco-scripts docgen --components Alert,Affix,Button\n  test                      A command which contains test:client and test:node, any option you entered will be passed to Jest. e.g. arco-scripts test --updateSnapshot\n  test:client               Any option you entered will be passed to Jest. e.g. arco-scripts test:client --updateSnapshot\n  test:node                 Any option you entered will be passed to Jest. e.g. arco-scripts test:node --bail\n  show:config <configType>  Show your current config for arco-scripts. Valid type: babel|style|webpack.component|webpack.site|webpack.icon|jest|docgen\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Buttons for Arco Design using CSS\nDESCRIPTION: This CSS snippet modifies the appearance of dropdown buttons when they are activated. It targets elements within the 'dropdown-demo' class and changes properties such as padding and transform on the down icon. No additional dependencies are needed beyond standard CSS support.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/trigger.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Drag Handle Component\nDESCRIPTION: This component renders a drag handle icon using `IconDragDotVertical` from `@arco-design/web-react/icon`. The icon has a `move` cursor style and a gray color. It is wrapped by `SortableHandle` from `react-sortable-hoc` to enable dragging.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag-handle.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst DragHandle = SortableHandle(() => (\n  <IconDragDotVertical\n    style={{\n      cursor: 'move',\n      color: '#555',\n    }}\n  />\n));\n```\n\n----------------------------------------\n\nTITLE: Styling Comment Action Buttons\nDESCRIPTION: Defines the styling for comment action buttons, including hover effects and transitions. Uses CSS variables for consistent theming with Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/inline.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-comment-action {\n  padding: 0 4px;\n  line-height: 24px;\n  border-radius: 2px;\n  background: transparent;\n  transition: all 0.1s ease;\n  color: var(--color-text-1);\n  cursor: pointer;\n  display: inline-block;\n}\n\n.custom-comment-action:hover {\n  background: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Abnormal Selected Value Display in Controlled Select - TypeScript\nDESCRIPTION: This fix resolves the issue where the selected value displayed in the select box becomes abnormal after modifying the value directly while it's controlled, ensuring the display remains accurate.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that when the `value` of the `Select` component is under control, modifying the `value` directly after searching may cause the selected value displayed in the select box to be abnormal.\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Hooks in JavaScript\nDESCRIPTION: Demonstrates how to configure hooks to execute functions at specific times during the site runtime, such as site initialization.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\nmodule.exports = {\n  build: {\n    globs: {\n      hook: {\n        // The path to execute the function when the site is initialized\n        beforeAll:'hooks/beforeAll.ts',\n      },\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for ArcoDesign\nDESCRIPTION: This diff snippet demonstrates how to update import statements from ByteDesign to ArcoDesign, including component imports and CSS imports.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { Transfer } from '@bytedesign/web-react';\n+ import { Transfer } from '@arco-design/web-react';\n\n- import { IconRight, IconLeft } from '@bytedesign/web-react/icon';\n+ import { IconRight, IconLeft } from '@arco-design/web-react/icon';\n\n- @import '~@bytedesign/web-react/dist/css/byteui.css';\n+ @import '~@arco-design/web-react/dist/css/byteui.css';\n\n- import '@bytedesign/web-react/dist/css/byteui.css';\n+ import '@arco-design/web-react/dist/css/byteui.css';\n```\n\n----------------------------------------\n\nTITLE: Defining CalendarType Interface in TypeScript\nDESCRIPTION: This code snippet defines the CalendarType interface, which specifies the structure for calendar-related localization options in the Arco Design library. It includes properties for days, months, weeks, and formatting options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CalendarType = {\n  today: string;\n  view: Record<string, any>;\n  month: {\n    short: Record<string, any>;\n    long: Record<string, any>;\n  };\n  week: {\n    short: Record<string, any>;\n    long: Record<string, any>;\n  };\n  formatYear?: string;\n  formatMonth?: string;\n  monthBeforeYear?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Arco Design Pagination Styles in JavaScript\nDESCRIPTION: Shows how to customize pagination appearance using style properties for both regular and active page items. Uses CSS variables for colors and demonstrates spacing adjustments.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__demo__/style.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Pagination } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Pagination\n        total={200}\n        style={{ marginBottom: 20 }}\n        pageItemStyle={{ background: 'var(--color-bg-2)', marginRight: 2 }}\n        activePageItemStyle={{ background: 'var(--color-fill-2)' }}\n      />\n      <Pagination\n        total={200}\n        pageItemStyle={{ background: 'var(--color-bg-2)' }}\n        activePageItemStyle={{ background: 'var(--color-fill-2)' }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining API Properties for Divider Component in Markdown\nDESCRIPTION: This snippet outlines the API properties for the Divider component, including orientation, type, className, and style. It describes the purpose, types, and default values for each property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|orientation|The position of description content in Divider|'left' \\| 'right' \\| 'center' |`center`|\n|type|Two types are available: `horizontal` and `vertical`|'horizontal' \\| 'vertical' |`horizontal`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for custom field names in the Cascader component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldNamesType = {\n  /* Custom field name for label */\n  label?: string;\n  /** Custom field name for value */\n  value?: string;\n  /** Custom field name for children */\n  children?: string;\n  /** Custom field name for disabled  */\n  disabled?: string;\n  /** Custom field name for isLeaf */\n  isLeaf?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RowCallbackProps Type in TypeScript\nDESCRIPTION: The RowCallbackProps type outlines event callback properties for table rows, enabling interactions such as clicks, double clicks, and context menu actions. This flexibility allows developers to easily handle row-specific events in the table.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RowCallbackProps = {\n  onClick?: (event) => void;\n  onDoubleClick?: (event) => void;\n  onContextMenu?: (event) => void;\n  onMouseEnter?: (event) => void;\n  onMouseLeave?: (event) => void;\n  onHandleSave?: (row) => void;\n  [name: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Arco Design Theme Package\nDESCRIPTION: Command to install the @arco-themes/theme-line theme package using npm.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-theme-package.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @arco-themes/theme-line\n```\n\n----------------------------------------\n\nTITLE: Defining AllowDrop Type for Tree Component in TypeScript\nDESCRIPTION: TypeScript type definition for the AllowDrop function used in the Tree component. This function determines whether a node can be dropped at a specific position during drag and drop operations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AllowDrop = (options: {\n  dropNode: NodeInstance;\n  dragNode: NodeInstance | null;\n  dropPosition: number;\n}) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of UserSelect component in React\nDESCRIPTION: This TypeScript code defines a React component that renders a `UserSelect` component. It imports the `UserSelect` component and configures it with a placeholder. This demonstrates a basic integration of the `UserSelect` component within a functional component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// basicUsage.tsx\nimport React from 'react';\nimport UserSelect from '..';\n\nexport default function () {\n  return <UserSelect selectProps={{ placeholder: 'Please select a user' }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: VirtualListProps API Table in Markdown\nDESCRIPTION: Defines the properties for the VirtualList component used in Tree, including height, threshold, and static item height configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__template__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|------|:----------:|:--------:|-----:|\n|height|可视区高度 (`2.11.0` 开始支持如 `80%` 的 `string` 类型)|`number`|`200`|\n|threshold|自动开启虚拟滚动的元素数量阈值，传入`null`以禁用虚拟滚动。|`number`\\|`null`|`100`|\n|isStaticItemHeight|是否为相同高度的静态元素|`boolean`|`true`|\n```\n\n----------------------------------------\n\nTITLE: Setting Default Popup Visibility in Select Component\nDESCRIPTION: Select adds defaultPopupVisible property to control whether the drop-down box pops up by default.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Select defaultPopupVisible={true} />\n```\n\n----------------------------------------\n\nTITLE: Defining TransferListTitle Type in TypeScript\nDESCRIPTION: Type definition for TransferListTitle that can be either a string or a function returning ReactNode, allowing for custom title rendering in Transfer lists.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TransferListTitle =\n  | string\n  | ((params: {\n      countTotal: number;\n      countSelected: number;\n      clear: () => void;\n      checkbox: ReactNode;\n      searchInput: ReactNode;\n    }) => ReactNode);\n```\n\n----------------------------------------\n\nTITLE: Defining SkeletonTextProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the SkeletonTextProps interface, which specifies the properties for the text placeholder in the Skeleton component. It includes style, className, rows, width, and prefixCls properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SkeletonTextProps {\n  style?: CSSProperties;\n  className?: string;\n  /** 文本行数 */\n  rows?: number;\n  /** 文本行宽度 */\n  width?: number | string | (string | number)[];\n  prefixCls?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Data and Columns\nDESCRIPTION: Defines table columns and sample data for employee information with properties like name, salary, count, and stars\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/summary.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    fixed: 'left',\n    width: 200,\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n  },\n  {\n    title: 'Count',\n    dataIndex: 'count',\n  },\n  {\n    title: 'Stars',\n    dataIndex: 'stars',\n  }\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'Jane Doe',\n    salary: 23000,\n    count: 66,\n    stars: 5,\n  },\n  // ... additional data entries\n];\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Documentation Header\nDESCRIPTION: Markdown documentation header defining the component category and basic description of the Calendar component\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Calendar/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Display\n\n# Calendar\n\nContainer for displaying data in calendar form.\n```\n\n----------------------------------------\n\nTITLE: Defining FieldError Type in TypeScript\nDESCRIPTION: FieldError type provides a structure for errors that can occur during form validation, allowing developers to manage error messages, types, and additional metadata associated with validation failures.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldError<FieldValue = any> = {\n  value?: FieldValue;\n  message?: ReactNode;\n  type?: string;\n  requiredError?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Component README Template Structure for Arco Design\nDESCRIPTION: This markdown template is used to generate component README files using the docgen script. It includes placeholders for component demos and props documentation that get filled automatically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nfile: index (Inform react-docgen-typescript where to look up interfaces information)\n---\n\n`````\nComponent / Feedback\n\n# Alert\n\nUsed to display warning information in a way that attracts attention.\n`````\n\n%%Content%% (Placeholder for demos)\n\n## Props\n\n%%Props%% (Placeholder for props)\n```\n\n----------------------------------------\n\nTITLE: React 19 Adapter Import for Arco Design\nDESCRIPTION: This code snippet demonstrates how to import the React 19 adapter for the Arco Design React component library. This adapter is necessary to ensure compatibility with React 19 and should be included at the top of the entry file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/start.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@arco-design/web-react/es/_util/react-19-adapter';\n```\n\n----------------------------------------\n\nTITLE: Defining TreeDataType in TypeScript\nDESCRIPTION: Defines the TreeDataType used for structuring hierarchical data in the TreeSelect component, extending NodeProps with children array and allowing additional properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type TreeDataType = NodeProps & {\n  key?: string;\n  _index?: number;\n  children?: TreeDataType[];\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Progress Component Description\nDESCRIPTION: Markdown documentation block describing the Progress component's purpose and use case for providing visual feedback during running tasks.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Progress/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Feedback\n\n# Progress\n\nGive users feedback on the current running tasks, which is mostly used in scenes that run for a period of time, effectively reducing the anxiety of users in waiting.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Module Path in JavaScript\nDESCRIPTION: Shows how to specify a custom module entry file in the main configuration to expose custom modules for site rendering.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//.config/main.js\nmodule.exports = {\n  // build configuration\n  build: {\n    // ...\n    customModulePath: './customModule.tsx',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Prefix for ArcoDesign\nDESCRIPTION: This JavaScript snippet shows how to configure the 'prefixCls' prefix for dialog boxes created by static methods using Modal.config.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nModal.config({\n   prefixCls: 'byte',\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Content with CSS (Arco Design)\nDESCRIPTION: This CSS snippet styles the popup content that is displayed when the trigger is activated. It sets padding, width, text alignment, background color, and box shadow to create a visually appealing popup box. The background color utilizes an Arco Design variable.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/arrow.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Component Definition - Markdown\nDESCRIPTION: Defines the basic structure and purpose of the Pagination component, which is used to control and display paginated content in a user interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Pagination/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Navigation\n\n# Pagination\n\nUse pagination to control the amount of information in a single page.\n```\n\n----------------------------------------\n\nTITLE: Defining InnerMethodsReturnType Type in TypeScript\nDESCRIPTION: The InnerMethodsReturnType type defines additional methods related to form state management in TypeScript. It focuses on methods that are critical for managing the internal workings of the form instance, ensuring encapsulation and type safety.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InnerMethodsReturnType<\n  FormData = any,\n  FieldValue = FormData[keyof FormData],\n  FieldKey extends KeyType = keyof FormData\n> = Pick<\n  Store<FormData, FieldValue, FieldKey>,\n  | \"registerField\"\n  | \"registerStateWatcher\"\n  | \"registerFormWatcher\"\n  | \"registerWatcher\"\n  | \"innerSetInitialValues\"\n  | \"innerSetInitialValue\"\n  | \"innerSetCallbacks\"\n  | \"innerSetFieldValue\"\n  | \"innerGetStore\"\n  | \"innerGetStoreStatus\"\n  | \"innerCollectFormState\"\n  | \"innerGetFieldValue\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Interface in TypeScript\nDESCRIPTION: This code snippet defines the Locale interface, which specifies the structure for localization options in the Arco Design library. It includes properties for various components and their localized strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Locale {\n  locale: string;\n  dayjsLocale?: string;\n  Calendar: CalendarType;\n  DatePicker: {\n    Calendar: CalendarType;\n    [key: string]: any;\n  };\n  Drawer: Record<string, any>;\n  Empty: Record<string, any>;\n  Modal: Record<string, any>;\n  Pagination: Record<string, any>;\n  Popconfirm: Record<string, any>;\n  Table: Record<string, any>;\n  TimePicker: Record<string, any>;\n  Upload: Record<string, any>;\n  Progress: Record<string, any>;\n  Typography: Record<string, any>;\n  Transfer: Record<string, any>;\n  ImagePreview: Record<string, any>;\n  Form?: Record<string, any>;\n  ColorPicker: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Migration with Arco CLI Commands\nDESCRIPTION: Bash commands to verify the successful migration of components using Arco CLI tools.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx arco start\n\nnpx arco build\n\nnpx arco test\n```\n\n----------------------------------------\n\nTITLE: Form within Modal issue resolution\nDESCRIPTION: This code shows the incorrect use of Form inside a Modal, and explains that Form methods cannot be called immediately after the Modal is mounted, and the suggested solution is to add 'mountOnEnter=false' to Modal\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst [form] = Form.useForm();\nuseEffect(() => {\n  form.setFieldsValue({})\n}, [])\nreturn <div>\n  <Modal visible={visible}>\n    <Form form={form}>\n      {/** ... */}\n    </Form>\n  </Modal>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown with JSX and Component Import\nDESCRIPTION: This Markdown code demonstrates how to include documentation, JSX elements, and imported React components within a MDX file. It showcases how to write Markdown syntax, embed JSX, import React components, and use the `<div data-arco-demo=\"YourDemoName\" />` tag to indicate a demo that should have its source code displayed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ndescription: Basic button ui component.\nlabels: ['ui', 'input', 'select-user']\n---\n\nHere is some description of this component. You can write:\n\nMarkdown syntax:\n\n[Arco](https://arco.design)\n\nor JSX:\n\n<div style={{ display: 'flex', alignItems: 'center', width: 150, height: 150, border: '1px solid grey' }}>\n  This box is written via JSX\n</div>\n\n## Basic Usage\n\nimport BasicUsage from './basicUsage';\n\n<div data-arco-demo=\"BasicUsage\">\n  <BasicUsage />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Transfer List Title Configuration\nDESCRIPTION: Defines flexible title configuration for transfer list with static strings or dynamic render functions\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransferListTitle =\n  | string\n  | ((params: {\n      countTotal: number;\n      countSelected: number;\n      clear: () => void;\n      checkbox: ReactNode;\n      searchInput: ReactNode;\n    }) => ReactNode);\n```\n\n----------------------------------------\n\nTITLE: Block-Level Element Support\nDESCRIPTION: Added support for displaying the Spin component as a block-level element in version 2.29.0\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__changelog__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- 支持作为块级元素展示([#493](https://github.com/arco-design/arco-design/pull/493))\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason Type in TypeScript\nDESCRIPTION: This code snippet defines the InputValueChangeReason type, which represents the reasons for input value changes in the Cascader component, such as manual input, option list hiding, or option checking.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionListHide\"\n  | \"optionChecked\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Layout with Arco Design in React\nDESCRIPTION: This JavaScript snippet demonstrates the use of the `Grid` component from `@arco-design/web-react` to create a responsive layout with specific ordering of columns using `push` and `pull` properties. Dependencies include the React library and the Arco Design component library. The main parameters are `span`, `push`, and `pull`, which define the grid's size and order respectively. The expected input is a React component rendering the grid, and it outputs an HTML structure with styled columns.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/push_pull.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Row\n        className=\"grid-demo\"\n        style={{ marginBottom: 16, backgroundColor: 'var(--color-fill-2)' }}\n      >\n        <Col span={8} push={16}>\n          col - 8 | push - 16\n        </Col>\n        <Col span={16} pull={8}>\n          col - 16 | pull - 8\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining TimePickerRangeProps Type in TypeScript\nDESCRIPTION: Definition of the TimePickerRangeProps type used in RangePicker props. It extends TimePickerProps with a modified defaultValue property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TimePickerRangeProps = Omit<TimePickerProps, \"defaultValue\"> & {\n  defaultValue?: CalendarValue[];\n};\n```\n\n----------------------------------------\n\nTITLE: Component Definition\nDESCRIPTION: Basic component definition for Typography component used to display titles, paragraphs, and text content.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\nComponent / General\n\n# Typography\n\nUsed to display titles, paragraphs, and text content.\n`````\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Pack Structure in Bash\nDESCRIPTION: This snippet shows the directory structure for language packs in Arco Pro. It illustrates where language files are stored and how they are organized.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/i18n.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── locale\n│   ├── en-US.ts\n│   └── zh-CN.ts\n└── utils\n    └── useLocale.ts\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeBox API in Markdown\nDESCRIPTION: Markdown table detailing the API for the ResizeBox component, including parameters, types, descriptions, default values, and version information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|height|高度，受控属性|number |`-`|2.7.0|\n|width|宽度，受控属性|number |`-`|2.7.0|\n|component|伸缩框的 html 标签|string |`div`|-|\n|directions|可以进行伸缩的边，有上、下、左、右可以使用，默认是右方向。|Array<'left' \\| 'right' \\| 'top' \\| 'bottom'> |`['right']`|-|\n|className|节点类名|string \\| string[] |`-`|-|\n|resizeIcons|定制伸缩杆的图标，四个方向都支持定制。|{top?: ReactNode;bottom?: ReactNode;left?: ReactNode;right?: ReactNode;} |`{}`|-|\n|resizeTriggers|定制伸缩杆的内容，四个方向都支持定制。|{top?: ReactNode;bottom?: ReactNode;left?: ReactNode;right?: ReactNode;} |`{}`|-|\n|style|节点样式|CSSProperties |`-`|-|\n|onMoving|拖拽中的回调|(e: MouseEvent, size: { width: number; height: number }) => void |`-`|`size` in `2.7.0`|\n|onMovingEnd|拖拽结束之后的回调|() => void |`-`|-|\n|onMovingStart|开始拖拽之前的回调|() => void |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Customizing TreeSelect Trigger with Dynamic Text\nDESCRIPTION: Implements a TreeSelect component with a custom trigger element that displays the selected node's label using React state and Arco Design components\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/self-input.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect, Typography, Link } from '@arco-design/web-react';\nconst TreeNode = TreeSelect.Node;\n\nconst DemoTreeSelect = () => {\n  const [text, setText] = useState('node1');\n  return (\n    <TreeSelect\n      allowClear\n      onChange={(value) => {\n        setText(value.label);\n      }}\n      labelInValue\n      triggerElement={\n        <Typography.Paragraph style={{ width: '300px' }}>\n          You selected: <Link>{text}</Link>\n        </Typography.Paragraph>\n      }\n    >\n      <TreeNode key=\"node1\" title=\"Trunk\">\n        <TreeNode key=\"node2\" title=\"Leaf\" />\n      </TreeNode>\n      <TreeNode key=\"node3\" title=\"Trunk2\">\n        <TreeNode key=\"node4\" title=\"Leaf\" />\n        <TreeNode key=\"node5\" title=\"Leaf\">\n          <TreeNode key=\"node6\" title=\"Leaf\" />\n          <TreeNode key=\"node7\" title=\"Leaf\" />\n        </TreeNode>\n      </TreeNode>\n    </TreeSelect>\n  );\n};\n\nexport default DemoTreeSelect;\n```\n\n----------------------------------------\n\nTITLE: Defining Arco React Environment Configuration in JavaScript\nDESCRIPTION: This snippet shows the basic structure of the 'arco.env.config.js' file, which is the entry point for all component environment configurations. It exports a function that returns a configuration object.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\n\nmodule.exports = function defineConfig(envId) {\n  return {\n  // ... configs for component env\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Material Query Parameters in TypeScript\nDESCRIPTION: This TypeScript code defines the structure for material query parameters, including options for filtering by name, title, author, type, category, and other properties. It also includes pagination and sorting options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/***************************************************************\n 根据 peerDependencies 查询物料信息, match 字段的含义如下（默认为 and）：\n or: 物料的依赖项包含 value 数组中的任意一个\n and: 物料的依赖项包含 value 数组中的全部\n****************************************************************/\n\ntype ComplexMaterialQueryParamPeerDependencies = {\n  value: string[];\n  match?: 'or' | 'and';\n};\n\ntype MaterialQueryParams = {\n  // 根据 name/title 进行模糊查询\n  like?: string;\n  // npm package name\n  name?: string | string[];\n  // 物料标题\n  title?: string;\n  author?: string;\n  // 物料种类：react-component / react-library / react-block 等\n  type?: string | string[];\n  // 物料描述性标签\n  category?: string[];\n  // 团队 ID\n  group?: number | number[];\n  peerDependencies?: string | string[] | ComplexMaterialQueryParamPeerDependencies;\n  page?: number;\n  pageSize?: number;\n  sortDirection?: 1 | -1;\n  sortBy?: 'name' | 'title' | 'downloadTimes' | 'createAt' | 'updateAt';\n  // 是否需要返回 packageInfo 字段，默认 true\n  needPackageInfo?: boolean;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Arco Project to Template using CLI\nDESCRIPTION: Demonstrates the use of the 'arco template --create' command to convert an existing Arco project into a custom template. This process involves specifying paths, package names, and monorepo preferences.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ arco template --create\n\n        ___ ____ _\n       / | ______________ / __ \\___ _____(_)___ _____\n      / /| | / ___/ ___/ __ \\/ / / / _ \\/ ___/ / __ `/ __ \\\n     / ___ |/ / / /__/ /_/ / /_/ / __(__) / /_/ / / / /\n    /_/ |_/_/ \\___/\\____/_____/\\___/____/_/\\__, /_/ /_/\n                                             /____/\n\n? Please enter the path of the existing project as a template ./hello-arco\n? Please enter the target path of the generated template ./my-template\n? Is the generated template used in the monorepo project? No\n? Please enter the NPM package name of this template my-template\n✔ The copy of the project content is complete!\n✔ Successfully converted the template!\n```\n\n----------------------------------------\n\nTITLE: Implementing ListHandle Interface for List Component\nDESCRIPTION: Interface definition for ListHandle that provides access to the DOM element and scroll functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ListHandle = {\n  dom: HTMLDivElement;\n  scrollIntoView: (index: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Filter Dropdown (CSS)\nDESCRIPTION: This CSS snippet provides styling for the custom filter dropdown within the Arco Design table. It sets the background color, adds padding, and applies a box shadow to visually distinguish the filter dropdown from the rest of the table.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/filter-dropdown.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.arco-table-custom-filter {\n  padding: 10px;\n  background-color: var(--color-bg-5);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Grid Layout Components in React\nDESCRIPTION: This snippet imports the Grid components from the Arco Design library and creates a responsive layout using Rows and Columns with specified offsets. It showcases the use of the offset property to adjust column positioning within rows in a structured grid system. The main dependencies are the '@arco-design/web-react' package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/offset.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Grid } from '@arco-design/web-react';\nconst Row = Grid.Row;\nconst Col = Grid.Col;\n\nconst App = () => {\n  return (\n    <div style={{ width: '100%' }}>\n      <Row\n        className=\"grid-demo\"\n        style={{ marginBottom: 16, backgroundColor: 'var(--color-fill-2)' }}\n      >\n        <Col span={8}>col - 8</Col>\n        <Col span={8} offset={8}>\n          col - 8 | offset - 8\n        </Col>\n      </Row>\n      <Row\n        className=\"grid-demo\"\n        style={{ marginBottom: 16, backgroundColor: 'var(--color-fill-2)' }}\n      >\n        <Col span={6} offset={8}>\n          col - 6 | offset - 8\n        </Col>\n        <Col span={6} offset={4}>\n          col - 6 | offset - 4\n        </Col>\n      </Row>\n      <Row className=\"grid-demo\" style={{ backgroundColor: 'var(--color-fill-2)' }}>\n        <Col span={12} offset={8}>\n          col - 12 | offset - 8\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining AutoComplete Component in Markdown\nDESCRIPTION: This snippet introduces the AutoComplete component, describing it as an auto-completion feature for input fields or custom input controls. It's categorized under 'Components / Data Input' in the Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\n组件 / 数据输入\n\n# 自动补全 AutoComplete\n\n输入框或自定义输入控件的自动补全功能。\n`````\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font Family in CSS\nDESCRIPTION: This CSS snippet defines a custom font family named 'nunito_for_arco' along with fallback fonts.  It ensures cross-platform font compatibility by specifying a list of fonts to use, starting with the preferred font and falling back to more common fonts if the preferred one is not available.  This increases the consistency of text rendering across different operating systems and browsers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs_spec/style-guideline.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n\"@font-family: 'nunito_for_arco', 'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB',\n\n  'Microsoft YaHei', '微软雅黑', Arial, sans-serif;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Component API in Markdown\nDESCRIPTION: This code snippet outlines the API for the Slider component, including various properties such as disabled, onlyMarkValue, reverse, showTicks, tooltipVisible, vertical, max, min, step, tooltipPosition, formatTooltip, className, defaultValue, marks, range, showInput, style, value, getIntervalConfig, getTooltipContainer, onAfterChange, and onChange. It provides details on their types, default values, and descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Slider\n\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|disabled|是否禁用|boolean |`-`|-|\n|onlyMarkValue|只能选择标签值，此时step将会被忽略|boolean |`-`|-|\n|reverse|反向坐标轴, `rtl` 场景默认为 `true`|boolean |`-`|-|\n|showTicks|是否显示步长刻度线|boolean |`-`|-|\n|tooltipVisible|控制 tooltip 的展示。设置为 `true` 时，将一直展示 tooltip。设置为 `false` 时，将一直隐藏 tooltip。|boolean |`-`|-|\n|vertical|是否竖直方向|boolean |`-`|-|\n|max|滑动范围最大值|number |`100`|-|\n|min|滑动范围最小值|number |`0`|-|\n|step|步长|number |`1`|-|\n|tooltipPosition|tooltip 的位置|\\| 'top'\\| 'tl'\\| 'tr'\\| 'bottom'\\| 'bl'\\| 'br'\\| 'left'\\| 'lt'\\| 'lb'\\| 'right'\\| 'rt'\\| 'rb' |`-`|-|\n|formatTooltip|格式化 `tooltip` 内容|(value: number) => string \\| ReactNode |`-`|-|\n|className|节点类名|string \\| string[] |`-`|-|\n|defaultValue|默认值|number \\| number[] |`-`|-|\n|marks|标签。是一个对象。key 为在[min, max]内的整数。|Record&lt;number, ReactNode&gt; |`-`|-|\n|range|是否是范围选择|boolean \\| { draggableBar: boolean } |`-`|2.14.0|\n|showInput|是否展示输入框，`onlyMarkValue` 为 `true` 或范围内多点选择时输入框始终隐藏。可接受 `InputNumber` 的 `props`。|boolean \\| [InputNumberProps](input-number#inputnumber) \\| [InputNumberProps](input-number#inputnumber)[] |`-`|`InputNumberProps` in `2.32.0`|\n|style|节点样式|CSSProperties |`-`|-|\n|value|值|number \\| number[] |`-`|-|\n|getIntervalConfig|针对区间配置，返回区间步长和相对于整个滑动轴的宽度比例(如 0.5 或 \"50%\")。**只在`marks`场景下生效**|(range: number[],index: number) => { step?: number; width?: number \\| string } |`-`|2.30.0|\n|getTooltipContainer|设置 `tooltip` 所插入的父元素|() => Element |`-`|-|\n|onAfterChange|触发时机在 `mouseup`，参数是当前值|(val: number \\| number[]) => void |`-`|2.20.0|\n|onChange|选择值变化时触发|(val: number \\| number[]) => void |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: ListGridProps Type Definition in TypeScript\nDESCRIPTION: Type definition for grid properties in List component, including column configuration and responsive layout properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype ListGridProps = {\n  column?: number;\n} & Pick<RowProps, \"gutter\" | \"justify\" | \"align\"> &\n  Pick<\n    ColProps,\n    \"span\" | \"offset\" | \"order\" | \"pull\" | \"push\" | GridResponsiveBreakpoint\n  >;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support Enhancements for Form Components\nDESCRIPTION: Added generic support for Form and its sub-components, fixing type errors in several components including InputNumber's onChange definition.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Type improvements in version 2.0.0:\n\n// Added generic support for Form and its sub-components\n// Example usage:\nForm<FormData>; // Now supports generics\n\n// Fixed InputNumber onChange definition\n// Before:\nonChange: (value: number) => void;\n// After (more accurate):\nonChange: (value: number, input: string) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining TreeDataType Interface for Tree Component in TypeScript\nDESCRIPTION: Type definition for the treeData property of the Tree component, representing the structure of node data including keys, children, and custom properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TreeDataType = NodeProps & {\n  key?: string;\n  _index?: number;\n  children?: TreeDataType[];\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component API in Markdown\nDESCRIPTION: This code snippet defines the API for the Drawer component, including properties, their descriptions, types, default values, and version information. It covers various aspects such as visibility, placement, styling, and event handlers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Drawer/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|Version|\n|---|---|---|---|---|\n|autoFocus|Whether to focus on the first focusable element by default. Only works when `focusLock` is turned on.|boolean |`true`|2.13.0|\n|closable|Whether to show the close button on top-right of the drawer dialog|boolean |`true`|-|\n|confirmLoading|Whether the OK button is in loading state|boolean |`-`|-|\n|escToExit|Whether to enable pressing `ESC` to close the drawer.|boolean |`true`|2.10.0|\n|focusLock|Whether to lock the focus in the drawer box.|boolean |`true`|2.13.0|\n|mask|Whether to show mask|boolean |`true`|-|\n|maskClosable|Whether to close the drawer when the mask is clicked|boolean |`true`|-|\n|mountOnEnter|Whether to render the drawer component only when it is opened initially.|boolean |`true`|-|\n|unmountOnExit|Whether to unmount component when hidden|boolean |`-`|-|\n|visible|Visibility of the drawer|boolean |`-`|-|\n|zIndex|Set the zIndex of the drawer|number |`-`|2.42.0|\n|placement|The placement of the drawer: `top` `right` `bottom` `left`|'top' \\| 'right' \\| 'bottom' \\| 'left' |`right`|-|\n|cancelText|Text of the Cancel button|ReactNode |`-`|-|\n|closeIcon|Custom the close button on top-right of the drawer dialog|ReactNode |`-`|2.49.0|\n|footer|The footer element. Drawer will not render the footer element when `footer` is `null`|ReactNode |`-`|-|\n|okText|Text of the OK button|ReactNode |`-`|-|\n|title|The title element. Drawer will not render the title element when `title` is `null`|ReactNode |`-`|-|\n|bodyStyle|The additional css style for content|CSSProperties |`-`|2.9.0|\n|cancelButtonProps|The props of `cancel` button|ButtonProps |`-`|2.26.0|\n|className|Additional css class|string \\| string[] |`-`|-|\n|headerStyle|The additional css style for header|CSSProperties |`-`|2.9.0|\n|height|The height of the drawer dialog. Only works when `placement` is `top` or `bottom`|string \\| number |`250`|-|\n|maskStyle|Style of the drawer mask|CSSProperties |`-`|-|\n|okButtonProps|The props of `ok` button|ButtonProps |`-`|2.26.0|\n|style|Additional style|CSSProperties |`-`|-|\n|width|The width of the drawer dialog. Only works when `placement` is `left` or `right`|string \\| number |`250`|-|\n|wrapClassName|The additional class name of the container of the drawer dialog|string \\| string[] |`-`|-|\n|afterClose|Callback when drawer is closed|() => void |`-`|-|\n|afterOpen|Callback when drawer is opened|() => void |`-`|-|\n|getChildrenPopupContainer|Set the mount node for popup such as `Select`, `Tooltip`, etc. Default to the drawer dialog.|(node: HTMLElement) => Element |`-`|-|\n|getPopupContainer|Parent node which the drawer should be rendered to.|() => Element |`() => document.body`|-|\n|onCancel|Callback when the Cancel button is clicked|(e: MouseEvent \\| Event) => void |`-`|-|\n|onOk|Callback when the OK button is clicked|(e: Event) => void |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Adding onPaste Callback to Select Component - TypeScript\nDESCRIPTION: This snippet introduces an onPaste callback to the Select component, allowing developers to define behavior upon pasting content into the input field.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Added `onPaste` callback to `Select` component.\n```\n\n----------------------------------------\n\nTITLE: Flattening Routes for Menu Generation\nDESCRIPTION: This function `getFlattenRoutes` transforms the hierarchical routing configuration into a flat array of routes.  It iterates through the routes, recursively processing child routes, and dynamically imports components based on the route key. The `lazyload` function is assumed to handle asynchronous component loading.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getFlattenRoutes() {\n  const res = [];\n  function travel(_routes) {\n    _routes.forEach((route) => {\n      if (route.key && !route.children) {\n        route.component = lazyload(() => import(`./pages/${route.key}`));\n        res.push(route);\n      } else if (isArray(route.children) && route.children.length) {\n        travel(route.children);\n      }\n    });\n  }\n  travel(routes);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components with On-Demand Style Loading in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates importing a Button component from @arco-design/web-react with on-demand style loading. The compilation from Babel transforms the import to include necessary style files automatically, enabling efficient loading of component styles without manual imports.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button } from '@arco-design/web-react';\nReactDOM.render(<Button>xxxx</Button>);\n\n↓ ↓ ↓ ↓ ↓ ↓\n\nvar _button = require('@arco-design/web-react/lib/button');\nrequire('@arco-design/web-react/lib/button/style/index.js');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n----------------------------------------\n\nTITLE: Defining SortDirection Type in TypeScript\nDESCRIPTION: The SortDirection type defines acceptable values for sorting direction, specifically 'ascend' and 'descend'. This strongly-typed approach ensures the correct usage of sorting directions in the application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type SortDirection = \"descend\" | \"ascend\";\n```\n\n----------------------------------------\n\nTITLE: Styling Card Grid Headers\nDESCRIPTION: CSS styles to remove borders from card headers within the grid layout for a cleaner appearance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/card-grid.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.card-demo-in-grid .arco-card-header {\n  border: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing UI Jitter in Select Component - TypeScript\nDESCRIPTION: This snippet addresses jitter in the UI when switching modes of the Select component and changing the placeholder, providing a smoother user experience.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the jitter bug in the UI when the `Select` component mode is switched and the placeholder is changed.\n```\n\n----------------------------------------\n\nTITLE: Defining InputNumberValueChangeReason TypeScript Type\nDESCRIPTION: This snippet defines a TypeScript type named InputNumberValueChangeReason. It enumerates possible reasons for changes in the InputNumber component's value: manual user input, increase, decrease, or correction when the value is out of range. This type is useful for understanding changes in an InputNumber component for custom handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 造成输入框值改变的原因：用户输入、增加、减少、超出范围值修正\nexport type InputNumberValueChangeReason =\n  | \"manual\"\n  | \"increase\"\n  | \"decrease\"\n  | \"outOfRange\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Table rowKey\nDESCRIPTION: Optimized TypeScript type definition for Table component's rowKey property, supporting key generation from record or direct React.Key\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrowKey: React.Key | ((record: T) => React.Key)\n```\n\n----------------------------------------\n\nTITLE: Closing All Modal Dialogs in JavaScript\nDESCRIPTION: Example of using Modal.destroyAll() method to close all active modal dialogs, typically used during route changes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nModal.destroyAll();\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox TypeScript Props\nDESCRIPTION: TypeScript type definition update for the Checkbox component's children property and native label attribute inheritance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CheckboxProps extends Omit<React.LabelHTMLAttributes<HTMLLabelElement>, 'children'> {\n  children?: React.ReactNode | ((checked: boolean) => React.ReactNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Jest CLI Parameters with Arco-Scripts\nDESCRIPTION: Illustrates how to pass CLI parameters to Jest through arco-scripts commands. Parameters such as --bail and --updateSnapshot can be used to modify Jest's behavior. The shell commands assume that Jest and arco-scripts are installed.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.test.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\narco-scripts test --bail --updateSnapshot --passWithNoTests\n\narco-scripts test:client --updateSnapshot --coverage\n\narco-scripts test:node --bail\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Site for Theme Association in JavaScript\nDESCRIPTION: Configuration for associating a specific team and theme in the local site project's main.js file for the team site feature.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\n/**\n * @type {import('arco-material-doc-site').MainConfig}\n */\nmodule.exports = {\n  // ... Other settings...\n  // 通过 group 字段配置本地预览或者 Dev 时所需关联的团队配置\n  group: {\n    id: 1,\n    // 是否为内网团队\n    private: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: VerificationCode Component API Table\nDESCRIPTION: Markdown table defining the API properties for the VerificationCode component, including types, descriptions, and default values for each prop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|disabled|disabled|boolean |`-`|\n|masked|Password mode|boolean |`-`|\n|readOnly|readOnly|boolean |`-`|\n|length|The length of the verification code, rendering the corresponding number of input boxes according to the length|number |`6`|\n|defaultValue|The initial input content|string |`-`|\n|value|The input content value|string |`-`|\n|size|Size|[InputProps](input#input)['size'] |`-`|\n|status|Status|'error' |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|onChange|Callback triggered when input value changes|(value: string) => void |`-`|\n|onFinish|A callback triggered after the input boxes are filled in|(value: string) => void |`-`|\n|separator|Separator. Customizable rendering separators after input boxes with different indexes|(data: { index: number; character: string }) => ReactNode |`-`|\n|validate|Verification function, triggered when the user input value changes|(data: { inputValue: string; value: string; index: number }) => boolean \\| string |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining SkeletonImageProps Interface in TypeScript\nDESCRIPTION: This code snippet defines the SkeletonImageProps interface, which specifies the properties for the image placeholder in the Skeleton component. It includes style, className, shape, size, position, and prefixCls properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SkeletonImageProps {\n  style?: CSSProperties;\n  className?: string;\n  /** 图片形状 */\n  shape?: \"circle\" | \"square\";\n  /** 图片尺寸 */\n  size?: \"small\" | \"default\" | \"large\";\n  /** 图片位置 */\n  position?: \"left\" | \"right\";\n  prefixCls?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Background and Font Colors for Dark Mode with CSS\nDESCRIPTION: This CSS snippet shows how to adjust the background and font colors of the page to complement the Arco Design dark theme. It uses CSS variables (`--color-bg-1` and `--color-text-1`) for easy customization and the `color-scheme` property to enable dark mode for scrollbars and other system UI elements. The `color-scheme` property indicates that the element can comfortably render in dark mode.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/dark/md/header.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: var(--color-bg-1);\n  color: var(--color-text-1);\n  color-scheme: dark; // 这个属性设置后，滚动条也能表现为暗色模式\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps Type in TypeScript\nDESCRIPTION: TypeScript type definition that picks specific properties from VirtualListProps for virtual scrolling functionality. Includes properties for height, item height, threshold, and scroll behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Styling Responsive Grid Columns\nDESCRIPTION: CSS styling for grid columns with alternating background colors and consistent height and line height\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/adaptation.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferItem Type in TypeScript\nDESCRIPTION: Defines the structure for transfer list items with required key and value properties and optional disabled flag\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TransferItem = {\n  key: string;\n  value: string;\n  disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DisabledTimeProps Interface in TypeScript\nDESCRIPTION: Definition of the DisabledTimeProps interface used in DatePicker props. It includes optional methods for disabling hours, minutes, and seconds.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DisabledTimeProps = {\n  disabledHours?: () => number[];\n  disabledMinutes?: () => number[];\n  disabledSeconds?: () => number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Avatar.Group Component API Parameters Table\nDESCRIPTION: API documentation table for the Avatar.Group component, describing group-specific configurations including maximum count, size settings and z-index behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Avatar/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|autoFixFontSize|是否自动根据头像尺寸调整字体大小，(优先级低于 Avatar 组件本身)|boolean |`true`|-|\n|zIndexAscend|头像组内的头像 `z-index` 递增，默认是递减。|boolean |`-`|2.3.0|\n|maxCount|头像组最多显示的头像数量，多余头像将以 `+x` 的形式展示。|number |`-`|2.4.0|\n|size|头像的尺寸大小，单位是 `px`，(优先级低于 Avatar 组件本身)|number |`-`|-|\n|shape|头像的形状，(优先级低于 Avatar 组件本身)|'circle' \\| 'square' |`circle`|-|\n|className|节点类名|string \\| string[] |`-`|-|\n|maxPopoverTriggerProps|多余头像气泡的 `TriggerProps`。|[TriggerProps](trigger#trigger) |`-`|2.4.0|\n|maxStyle|多余头像样式。|CSSProperties |`-`|2.4.0|\n|style|节点样式|CSSProperties |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Defining TreeDataType in JavaScript\nDESCRIPTION: Defines the TreeDataType structure, which includes properties like key, index, children, and additional custom keys. Used in TreeSelect for hierarchical data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport type TreeDataType = NodeProps & {\n  key?: string;\n  _index?: number;\n  children?: TreeDataType[];\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Monitoring Arco Design Component Changes for Development\nDESCRIPTION: Command for monitoring Arco Design component code changes during development using arco-scripts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Monitoring component code changes-tsc & gulp-less\narco-scripts dev:component\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Card Layout with Arco Design in React\nDESCRIPTION: This snippet creates a responsive grid layout using Arco Design's Card and Grid components. It demonstrates how to arrange cards in different column spans and apply custom styling. The layout is suitable for system overview pages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/with-row.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Grid, Link } from '@arco-design/web-react';\nconst { Row, Col } = Grid;\nconst extra = <Link>More</Link>;\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        boxSizing: 'border-box',\n        width: '100%',\n        padding: 40,\n        backgroundColor: 'var(--color-fill-2)',\n      }}\n    >\n      <Row\n        gutter={20}\n        style={{ marginBottom: 20 }}\n      >\n        <Col span={8}>\n          <Card\n            title=\"Arco Card\"\n            extra={extra}\n            bordered={false}\n            style={{\n              width: '100%',\n            }}\n          >\n            Card content\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title=\"Arco Card\"\n            extra={extra}\n            bordered={false}\n            style={{ width: '100%' }}\n          >\n            Card content\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title=\"Arco Card\"\n            extra={extra}\n            bordered={false}\n            style={{ width: '100%' }}\n          >\n            Card content\n          </Card>\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col span={16}>\n          <Card\n            title=\"Arco Card\"\n            extra={extra}\n            bordered={false}\n            style={{ width: '100%' }}\n          >\n            Card content\n          </Card>\n        </Col>\n        <Col span={8}>\n          <Card\n            title=\"Arco Card\"\n            extra={extra}\n            bordered={false}\n            style={{ width: '100%' }}\n          >\n            Card content\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: DOM Structure Example\nDESCRIPTION: Example showing the DOM structure when cssEllipsis is enabled, demonstrating the addition of span elements for text overflow handling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span/>\n.arco-typography\n<span/>\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the main Card component, including properties for customizing appearance, content, and behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Card\n\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|bordered|是否有边框|boolean |`true`|\n|hoverable|是否可悬浮|boolean |`-`|\n|loading|是否为加载中|boolean |`-`|\n|size|卡片尺寸|'default' \\| 'small' |`default`|\n|cover|卡片封面|ReactNode |`-`|\n|extra|卡片右上角的操作区域|string \\| ReactNode |`-`|\n|title|卡片标题|string \\| ReactNode |`-`|\n|actions|卡片底部的操作组|ReactNode[] |`-`|\n|bodyStyle|内容区域自定义样式|CSSProperties |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|headerStyle|自定义标题区域样式|CSSProperties |`-`|\n|style|节点样式|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Using addBefore Property in Select Component\nDESCRIPTION: Shows how to set a front tag for the Select component using the addBefore property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\naddBefore\n```\n\n----------------------------------------\n\nTITLE: Radio.Group Component API Table Structure\nDESCRIPTION: Markdown table defining the properties, types, and default values for the Radio.Group component. Includes properties like disabled, name, direction, size, type, className, defaultValue, options, style, value, and onChange.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|disabled|disabled|boolean |`-`|\n|name|`Radio`'s name attr|string |`-`|\n|direction|Arrangement direction|'vertical' \\| 'horizontal' |`horizontal`|\n|size|The size of radio button style(Only effective under `button` type)|'small' \\| 'default' \\| 'large' \\| 'mini' |`-`|\n|type|type of `Radio`|'radio' \\| 'button' |`radio`|\n|className|Additional css class|string \\| string[] |`-`|\n|defaultValue|To set default value|any |`-`|\n|options|Set children options|(string \\| number \\| { label: ReactNode; value: any; disabled?: boolean })[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|value|To set value|any |`-`|\n|onChange|Callback when radio status change|(value: any, event: ChangeEvent) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Trigger Component Scroll Update Configuration\nDESCRIPTION: Adding updateOnScroll property to allow updating popup position during container scrolling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupdateOnScroll?: boolean\n```\n\n----------------------------------------\n\nTITLE: Destroying All Modals\nDESCRIPTION: Shows how to close all active confirm modals (including `Modal.confirm`, `Modal.info`, `Modal.success`, `Modal.error`, `Modal.warning`) using `Modal.destroyAll`. This is typically used during route changes to ensure no modals remain open when navigating to a new page.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/__template__/index.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nModal.destroyAll();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TreeSelect with Nested Tree Nodes in React\nDESCRIPTION: Creates a simple TreeSelect component with nested TreeNode children. The component allows for hierarchical data selection with a clearable dropdown that displays trunk and leaf nodes in a tree structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TreeSelect } from '@arco-design/web-react';\nconst TreeNode = TreeSelect.Node;\n\nconst App = () => {\n  return (\n    <TreeSelect defaultValue=\"node1\" style={{ width: 300 }} allowClear>\n      <TreeNode key=\"node1\" title=\"Trunk\">\n        <TreeNode key=\"node2\" title=\"Leaf\" />\n      </TreeNode>\n      <TreeNode key=\"node3\" title=\"Trunk2\">\n        <TreeNode key=\"node4\" title=\"Leaf\" />\n        <TreeNode key=\"node5\" title=\"Leaf\" />\n      </TreeNode>\n    </TreeSelect>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Icon with IconAt in React\nDESCRIPTION: This snippet demonstrates how to use a custom icon (IconAt) for the Checkbox component in Arco Design. It imports necessary components from Arco Design and creates a simple React component that renders a Checkbox with a custom icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/custom_icon.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Checkbox } from '@arco-design/web-react';\nimport { IconAt } from '@arco-design/web-react/icon';\n\nconst App = () => {\n  return (\n    <div>\n      <Checkbox icon={<IconAt />}>Checkbox</Checkbox>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps for Virtual Scrolling\nDESCRIPTION: Type that selects specific properties from VirtualListProps to configure virtual scrolling behavior in List component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Site for Theme Association\nDESCRIPTION: Configuration for associating a specific team and theme in the local site project's main.js file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\n/**\n * @type {import('arco-material-doc-site').MainConfig}\n */\nmodule.exports = {\n  // ... Other settings...\n  // Configure the associated team configuration when configuring local preview or Dev through the group field\n  group: {\n    id: 1,\n    // Whether it is an intranet team\n    private: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ScrollOptions to VirtualList in TypeScript\nDESCRIPTION: VirtualList component added 'scrollOptions' property to specify default scrolling behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/changelog.common.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface VirtualListProps {\n  scrollOptions?: ScrollIntoViewOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom SVG Icons\nDESCRIPTION: This code snippet shows how to import and use a custom SVG icon as a React component within the application. It demonstrates applying a class name for styling the icon. Ensure the SVG file is available in the specified path.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IconIronMan from'./Iron Man.svg';\n\n<IconIronMan className=\"arco-icon\" style={{ fontSize: '50px' }} />\n```\n\n----------------------------------------\n\nTITLE: Custom Transfer List Props Interface\nDESCRIPTION: Describes the properties and methods available for custom transfer list rendering and interaction\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransferCustomListProps\n  extends Pick<\n    TransferListProps,\n    | \"disabled\"\n    | \"listType\"\n    | \"selectedKeys\"\n    | \"validKeys\"\n    | \"selectedDisabledKeys\"\n  > {\n  filteredItems: TransferItem[];\n  onItemSelect: (key: string, selected: boolean) => void;\n  onItemRemove: (key: string) => void;\n  onItemSelectAll: (keys: string[], selected: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation with React and Arco Design\nDESCRIPTION: Creates a basic popover component that displays a title and content when hovering over a button. The content includes styled paragraphs within a span element.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popover/__demo__/basic.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Popover, Button } from '@arco-design/web-react';\nconst style = {\n  margin: 0,\n};\n\nconst App = () => {\n  return (\n    <Popover\n      title=\"Title\"\n      content={\n        <span>\n          <p style={style}>Here is the text content</p>\n          <p style={style}>Here is the text content</p>\n        </span>\n      }\n    >\n      <Button type=\"primary\">Hover</Button>\n    </Popover>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: ColorPicker Component Definition\nDESCRIPTION: Basic markdown definition of the ColorPicker component section, indicating it belongs to the Data Entry category of components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ColorPicker/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Entry\n\n# ColorPicker\n\nUsed for select and display colors\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix to Select Component\nDESCRIPTION: Select, Cascader, and TreeSelect components now support the prefix property to set a prefix.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Select prefix={<Icon />} />\n```\n\n----------------------------------------\n\nTITLE: Custom Image Loading Animation CSS\nDESCRIPTION: CSS animation for creating a gradient loading effect with keyframe animation for image placeholders\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/loader.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.image-demo-loader-animate {\n  background: linear-gradient(\n    -60deg,\n    var(--color-fill-2) 25%,\n    var(--color-neutral-3) 40%,\n    var(--color-fill-3) 55%\n  );\n  background-size: 400% 100%;\n  animation: image-demo-loader-circle 1.5s cubic-bezier(0.34, 0.69, 0.1, 1) infinite;\n}\n\n@keyframes image-demo-loader-circle {\n  0% {\n    background-position: 100% 50%;\n  }\n\n  100% {\n    background-position: 0 50%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferCustomListProps Interface in TypeScript\nDESCRIPTION: Interface for custom list props in Transfer component that extends from TransferListProps, defining the structure for implementing custom transfer lists.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TransferCustomListProps\n  extends Pick<\n    TransferListProps,\n    | \"disabled\"\n    | \"listType\"\n    | \"selectedKeys\"\n    | \"validKeys\"\n    | \"selectedDisabledKeys\"\n  > {\n  filteredItems: TransferItem[];\n  onItemSelect: (key: string, selected: boolean) => void;\n  onItemRemove: (key: string) => void;\n  onItemSelectAll: (keys: string[], selected: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RouteProps Interface for Breadcrumb Component in JavaScript\nDESCRIPTION: Interface definition for the RouteProps object used in the Breadcrumb component's routes property. It defines the structure for breadcrumb navigation items, including path, breadcrumbName and optional children for nested routes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport interface RouteProps {\n  path: string;\n  breadcrumbName: string;\n  children?: Array<{\n    path: string;\n    breadcrumbName: string;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimePickerProps Type in TypeScript\nDESCRIPTION: Definition of the TimePickerProps type used in DatePicker props. It combines BaseTimePickerProps and PickerProps.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TimePickerProps = BaseTimePickerProps & PickerProps;\n```\n\n----------------------------------------\n\nTITLE: Defining DisabledTimeProps Interface in TypeScript\nDESCRIPTION: Specifies the structure for disabling specific hours, minutes, and seconds in time selection.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type DisabledTimeProps = {\n  disabledHours?: () => number[];\n  disabledMinutes?: () => number[];\n  disabledSeconds?: () => number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Demo Index for Arco Design Component\nDESCRIPTION: Example of a demo index file for an Arco Design component, including metadata for the material platform.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/demo/index.js\n/**\n * @file\n * @title The name of the group, for example: EmployeeSelect\n * @memberOf component type, for example: data input\n * @description describes your component\n */\n\n/**\n * @title basic usage\n * @description describe your example\n */\nexport { default as Basic } from './basic';\n```\n\n----------------------------------------\n\nTITLE: Result Component API Table in Markdown\nDESCRIPTION: API documentation table showing all available properties for the Result component including status, extra, icon, title, subtitle and styling options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|status|The result status, if `null` the icon and the background color will not be displayed. [example](/react/en-US/components/result#custom-icon)|'success' \\| 'error' \\| 'info' \\| 'warning' \\| '404' \\| '403' \\| '500' \\| null |`info`|\n|extra|The operating area|ReactNode |`-`|\n|icon|Customize the icon|ReactNode |`-`|\n|subTitle|The subTitle|ReactNode |`-`|\n|title|The title|ReactNode |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Tag Component Description\nDESCRIPTION: This snippet provides a description of the Tag component. It outlines the component's purpose in information selection, screening, and classification. Users can use tags for information feedback and interactive operations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tag/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\"Component / Data Display\\n\\n# Tag\\n\\nUsed for information selection, screening and classification. Users use tags for information feedback and interactive operations.\"\n```\n\n----------------------------------------\n\nTITLE: Dot Animation Style Fix\nDESCRIPTION: Corrected the animation style for the 'dot' type of the Spin component in version 2.10.0\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__changelog__/index.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- 修复 `Spin` 组件 `dot` 类型动画样式有误的 bug。\n```\n\n----------------------------------------\n\nTITLE: Defining OptionInfo Interface in TypeScript\nDESCRIPTION: Defines the OptionInfo interface extending OptionProps with additional properties for internal use in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptionInfo extends PropsWithChildren<OptionProps> {\n  child?: ReactElement;\n  _valid: boolean;\n  _index: number;\n  _origin: \"children\" | \"options\" | \"userCreatedOptions\" | \"userCreatingOption\";\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition Update - Table Component Column Types\nDESCRIPTION: TypeScript type fixes for Table component's column definition, including children property for grouped headers and filters property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTable.column.children // Type modification for nested header groups\nTable.column.filters // Type correction for filter definitions\n```\n\n----------------------------------------\n\nTITLE: Creating a React Form with Various Inputs and Validation\nDESCRIPTION: This snippet contains the main functional component 'App' which renders the form. It includes various fields such as input, select, checkbox, radio, etc., each associated with validation rules to ensure user inputs are valid before submission.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/disabled.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const formRef = useRef();\n  const [size, setSize] = useState('default');\n  useEffect(() => {\n    formRef.current.setFieldsValue({\n      rate: 5,\n    });\n  }, []);\n\n  const onValuesChange = (changeValue, values) => {\n    console.log('onValuesChange: ', changeValue, values);\n  };\n\n  return (\n    <div style={{ maxWidth: 650 }}>\n      <Form\n        disabled\n        autoComplete=\"off\"\n        ref={formRef}\n        {...formItemLayout}\n        size={size}\n        initialValues={{\n          slider: 20,\n          'a.b[0].c': ['b'],\n        }}\n        onValuesChange={onValuesChange}\n        scrollToFirstError\n      >\n        <FormItem label=\"Form size\">\n          <Radio.Group type=\"button\" value={size} onChange={setSize}>\n            <Radio value=\"mini\">mini</Radio>\n            <Radio value=\"small\">small</Radio>\n            <Radio value=\"default\">default</Radio>\n            <Radio value=\"large\">large</Radio>\n          </Radio.Group>\n        </FormItem>\n        <FormItem\n          label=\"Username\"\n          field=\"name\"\n          rules={[{ required: true, message: 'username is required' }]}\n        >\n          <Input placeholder=\"please enter...\" />\n        </FormItem>\n        <FormItem label=\"Age\" field=\"age\" rules={[{ type: 'number', required: true }]}> \n          <InputNumber placeholder=\"please enter\" />\n        </FormItem>\n        <FormItem\n          label=\"Province\"\n          field=\"province\"\n          rules={[\n            {\n              type: 'array',\n              required: true,\n            },\n            {\n              type: 'array',\n              length: 4,\n              message: 'Must choose a node of length four',\n            },\n          ]}\n        >\n          <Cascader showSearch placeholder=\"please select\" allowClear options={cascaderOptions} />\n        </FormItem>\n        <FormItem label=\"Auto-complete\" field=\"autocomplete\" rules={[{ required: true }]}> \n          <AutoComplete placeholder=\"please enter\" data={['123', '234', '345', '456']} />\n        </FormItem>\n        <FormItem label=\"Post\" field=\"post\" rules={[{ required: true }]}> \n          <Select\n            placeholder=\"please select\"\n            options={[\n              {\n                label: 'one',\n                value: 0,\n              },\n              {\n                label: 'two',\n                value: 1,\n              },\n              {\n                label: 'three',\n                value: 2,\n              },\n            ]}\n            allowClear\n          />\n        </FormItem>\n        <FormItem\n          label=\"Multiple Choice\"\n          required\n          field=\"a.b[0].c\"\n          rules={[{ type: 'array', minLength: 1, message: 'choice is required' }]}\n        >\n          <Select\n            mode=\"multiple\"\n            allowCreate\n            placeholder=\"please select\"\n            options={['a', 'b', 'c', 'd', 'e']}\n          />\n        </FormItem>\n        <FormItem label=\"Score\" field=\"score\" rules={[{ required: true, type: 'number' }]}> \n          <Rate />\n        </FormItem>\n        <FormItem\n          label=\"Date\"\n          field=\"date\"\n          rules={[{ required: true, message: 'date is required' }]}\n        >\n          <DatePicker showTime />\n        </FormItem>\n        <FormItem\n          label=\"Switch\"\n          field=\"switch\"\n          triggerPropName=\"checked\"\n          rules={[{ type: 'boolean', true: true, message: 'must be true' }]}\n        >\n          <Switch />\n        </FormItem>\n        <FormItem\n          label=\"Radio\"\n          field=\"radio\"\n          rules={[\n            {\n              validator: (value, callback) => {\n                if (value !== 'b') {\n                  callback('you can only choose b');\n                }\n              },\n            },\n          ]}\n        >\n          <Radio.Group>\n            <Radio value=\"a\">A</Radio>\n            <Radio value=\"b\">B</Radio>\n            <Radio disabled value=\"c\">\n              C\n            </Radio>\n            <Radio value=\"d\"> D </Radio>\n          </Radio.Group>\n        </FormItem>\n        <FormItem\n          label=\"Slide\"\n          field=\"slider\"\n          rules={[\n            {\n              validator: (value, callback) => {\n                if (value < 50) {\n                  callback('must be greater than 50!');\n                }\n              },\n            },\n          ]}\n        >\n          <Slider></Slider>\n        </FormItem>\n        <Form.Item\n          label=\"Upload\"\n          field=\"upload\"\n          triggerPropName=\"fileList\"\n          initialValue={[\n            {\n              uid: '-1',\n              url: '//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/e278888093bef8910e829486fb45dd69.png~tplv-uwbnlip3yd-webp.webp',\n              name: '20200717',\n            },\n          ]}\n        >\n          <Upload\n            listType=\"picture-card\"\n            multiple\n            name=\"files\"\n            action=\"/\"\n            onPreview={(file) => {\n              Modal.info({\n                title: 'Preview',\n                content: (\n                  <img\n                    src={file.url || URL.createObjectURL(file.originFile)}\n                    style={{\n                      maxWidth: '100%',\n                    }}\n                  ></img>\n                ),\n              });\n            }}\n          />\n        </Form.Item>\n        <FormItem\n          {...noLabelLayout}\n          field=\"readme\"\n          triggerPropName=\"checked\"\n          rules={[\n            {\n              type: 'boolean',\n              true: true,\n              message: 'must be true',\n            },\n          ]}\n        >\n          <Checkbox>I have read the employee manual</Checkbox>\n        </FormItem>\n        <FormItem {...noLabelLayout}>\n          <Button\n            onClick={async () => {\n              if (formRef.current) {\n                try {\n                  await formRef.current.validate();\n                  Message.info('pass verification, submit succeed!');\n                } catch (_) {\n                  console.log(formRef.current.getFieldsError());\n                  Message.error('verification failed, Please check the fields!');\n                }\n              }\n            }}\n            type=\"primary\"\n            style={{\n              marginRight: 24,\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              formRef.current.resetFields();\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"text\"\n            onClick={() => {\n              Message.info(`fields: ${formRef.current.getTouchedFields().join(',')}`);\n            }}\n          >\n            Get touched fields\n          </Button>\n        </FormItem>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Customizing Clear Icon in Select Component\nDESCRIPTION: The Select component adds the clearIcon property to customize the clear button icon.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Select clearIcon={<CustomIcon />} />\n```\n\n----------------------------------------\n\nTITLE: Declaring Arco Component Style Dependencies\nDESCRIPTION: Example of how to declare dependent Arco component styles in a material's style index file to support on-demand loading.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/style/index.ts\nimport './index.less';\n\n// If the material uses Arco components, declare its dependencies\nimport '@arco-design/web-react/es/Button/style';\n\n// If the material uses other materials, also declare its style dependency\nimport '@namespace/some-other-material/es/style';\n```\n\n----------------------------------------\n\nTITLE: Carousel - Controlled Paging with API\nDESCRIPTION: This snippet demonstrates how to control Carousel paging with the API. You should get component reference with carousel property and call `goto` API to change page.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"import { Carousel } from '@arco-design/web-react';\nimport type { CarouselHandle } from \\\"@arco-design/web-react/es/Carousel/interface\\\";\n\nfunction Demo() {\n  const refCarousel = useRef<CarouselHandle>(null);\n\n  const goto = (index) => {\n    refCarousel.current?.goto({{ index }});\n  };\n\n  return <Carousel carousel={refCarousel} />;\nreturn <}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Icon Loading with webpack\nDESCRIPTION: This snippet demonstrates the Webpack configuration for handling SVG files using @svgr/webpack, allowing custom SVG icons to be included in the project. Ensure @svgr/webpack is included in the project's dependencies.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  test: /\\.svg$/,\n  use: ['@svgr/webpack'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps Type in TypeScript\nDESCRIPTION: Type definition that picks specific properties from VirtualListProps for use in Transfer component's virtual list implementation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Updating CSS File Names for ArcoDesign v2\nDESCRIPTION: This diff snippet shows how to update the CSS file names from 'byteui' to 'arco'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- @import '~@arco-design/web-react/dist/css/byteui.css';\n+ @import '~@arco-design/web-react/dist/css/arco.css';\n\n- import '@arco-design/web-react/dist/css/byteui.css';\n+ import '@arco-design/web-react/dist/css/arco.css';\n```\n\n----------------------------------------\n\nTITLE: Popup Styling with CSS\nDESCRIPTION: Defines styling for the trigger popup container, including padding, width, background color, and shadow\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/triggers.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Component in Markdown\nDESCRIPTION: This snippet defines the Carousel component in markdown format, describing its purpose and functionality for displaying multiple content items in a loop.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\n组件 / 数据展示\n\n# 图片轮播 Carousel\n\n用于展示多张图片、视频或内嵌框架等内容的循环播放，支持系统自动播放或用户手动切换。\n`````\n```\n\n----------------------------------------\n\nTITLE: Calendar Component API Table in Markdown\nDESCRIPTION: API documentation table showing all available props for the Calendar component including types, descriptions and default values\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Calendar/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|allowSelect|是否允许选中和切换日期，`panel` 模式下默认可选中切换|boolean |`-`|\n|isWeek|周选择|boolean |`-`|\n|panel|是否放在容器中进行展示。|boolean |`-`|\n|panelTodayBtn|是否显示跳转到今天的按钮|boolean |`-`|\n|defaultMode|选择日期的月日历和选择月份的年日历。|'day' \\| 'week' \\| 'month' \\| 'year' |`month`|\n|headerType|有两种头部可供选择，默认的按钮类型和下拉框类型，只在全屏日历模式下生效。|'button' \\| 'select' |`button`|\n|mode|选择日期的月日历和选择月份的年日历，受控模式。|'day' \\| 'week' \\| 'month' \\| 'year' |`-`|\n|panelOperations|卡片模式下配置操作按钮|Array<'left' \\| 'double-left' \\| 'right' \\| 'double-right'> |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|dayStartOfWeek|每周的第一天开始于周几，0 - 周日，1 - 周一。|0 \\| 1 |`0`|\n|locale|国际化配置|Record&lt;string, any&gt; |`-`|\n|panelWidth|卡片模式的宽度|number \\| string |`265`|\n|style|节点样式|CSSProperties |`-`|\n|dateInnerContent|定制日期单元格，内容会被添加到单元格内，只在全屏日历模式下生效。|(currentDate: Dayjs) => ReactNode |`-`|\n|dateRender|定制日期显示，会完全覆盖日期单元格。|(currentDate: Dayjs) => ReactNode |`-`|\n|disabledDate|不可选取的时间|(current: Dayjs) => boolean |`-`|\n|headerRender|自定义头部渲染。|(props: {value?: Dayjs;pageShowDate?: Dayjs;mode?: string;onChange;onChangePageDate;onChangeMode;}) => ReactNode |`-`|\n|monthRender|定制月份显示，会完全覆盖月份单元格。|(currentDate: Dayjs) => ReactNode |`-`|\n|onChange|日期变化触发的回调。|(date: Dayjs) => void |`-`|\n|onPanelChange|面板日期发生改变触发的回调。|(date: Dayjs) => void |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType Interface in TypeScript\nDESCRIPTION: This code snippet defines the FieldNamesType interface, which allows customization of field names for label, value, children, disabled, and isLeaf properties in the Cascader component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FieldNamesType = {\n  /* Custom field name for label */\n  label?: string;\n  /** Custom field name for value */\n  value?: string;\n  /** Custom field name for children */\n  children?: string;\n  /** Custom field name for disabled  */\n  disabled?: string;\n  /** Custom field name for isLeaf */\n  isLeaf?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding getOptionInfoByValue Method to Select Ref - TypeScript\nDESCRIPTION: This snippet adds the getOptionInfoByValue method to the ref of the Select component, providing a way to retrieve option information easily based on its value.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Added `getOptionInfoByValue` method in `Select` component ref.\n```\n\n----------------------------------------\n\nTITLE: Defining ThemeConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the ThemeConfig type, which is a simple Record type for storing theme configuration options in Arco Design.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ConfigProvider/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ThemeConfig = Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Permissions in TypeScript\nDESCRIPTION: Shows how to add required permissions to menu items in the routes configuration, including examples of single and multiple permission requirements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst routes = [\n  {\n    name: 'menu.visualization',\n    key: 'visualization',\n    children: [\n      {\n        name: 'menu.visualization.dataAnalysis',\n        key: 'visualization/data-analysis',\n        requiredPermissions: [\n          { resource: 'menu.visualization.dataAnalysis', actions: ['read'] },\n        ],\n      },\n      {\n        name: 'menu.visualization.multiDimensionDataAnalysis',\n        key: 'visualization/multi-dimension-data-analysis',\n        requiredPermissions: [\n          {\n            resource: 'menu.visualization.dataAnalysis',\n            actions: ['read', 'write'],\n          },\n          {\n            resource: 'menu.visualization.multiDimensionDataAnalysis',\n            actions: ['write'],\n          },\n        ],\n        oneOfPerm: true,\n      },\n    ],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps Type in TypeScript\nDESCRIPTION: Defines the available props for virtual list functionality in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Popconfirm onOk Promise Return Type - TypeScript\nDESCRIPTION: TypeScript definition modification to support Promise<void> return type for the onOk callback parameter. Released in version 2.31.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__changelog__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PopconfirmProps {\n  onOk?: (e: Event) => void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputNumber Component for Numeric Entry\nDESCRIPTION: A component that restricts input to numeric values, providing built-in validation and user interaction methods\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nComponent / Data Entry\\n\\n# InputNumber\\n\\nAn input box which only allows to enter number.\n```\n\n----------------------------------------\n\nTITLE: Defining RouteProps Interface for Breadcrumb in JavaScript\nDESCRIPTION: This code snippet defines the RouteProps interface for the Breadcrumb component. It specifies the structure of route objects that can be passed to the Breadcrumb component, including path, breadcrumbName, and optional children routes.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Breadcrumb/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport interface RouteProps {\n  path: string;\n  breadcrumbName: string;\n  children?: Array<{\n    path: string;\n    breadcrumbName: string;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Trigger Elements with CSS\nDESCRIPTION: This CSS snippet provides styling for the demo components used in the React app, specifically for the trigger and popup elements. The styling includes properties for dimensions, text alignment, background colors, and shadows, leveraging CSS variables for color management. It ensures visually distinct styling for the popup appearance and trigger responsiveness. Expected inputs are class selectors applied to the corresponding HTML elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/mouse.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n\n.demo-trigger-manual {\n  width: 100%;\n  height: 400px;\n  background-color: var(--color-fill-2);\n  line-height: 400px;\n  text-align: center;\n  font-size: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Table and Sticky from Arco Design and React Sticky - JavaScript\nDESCRIPTION: This snippet imports necessary components from the Arco Design library and react-sticky to create a sticky table header. 'Table' is used for rendering the data in a tabular format, while 'StickyContainer' and 'Sticky' are used to enable sticky behavior for the table header.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/header-sticky.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Table } from '@arco-design/web-react';\nimport { StickyContainer, Sticky } from 'react-sticky';\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Form with Mentions in React\nDESCRIPTION: This code snippet demonstrates how to create a controlled form using the Mentions component from the Arco Design library within a React application. It includes input fields for tasks and names with validation rules for required inputs. The form handles value changes through a defined callback function.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Mentions/__demo__/control.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Form, Input, Button, Mentions } from '@arco-design/web-react';\nconst FormItem = Form.Item;\n\nfunction App() {\n  const onValuesChange = (changeValue, values) => {\n    console.log('onValuesChange: ', changeValue, values);\n  };\n\n  return (\n    <Form\n      style={{ width: 360 }}\n      initialValues={{ task: 'Component usage' }}\n      onValuesChange={onValuesChange}\n    >\n      <FormItem label=\"Task\" field=\"task\" rules={[{ required: true, message: 'Task is required' }]}>\\n        <Input />\n      </FormItem>\n      <FormItem label=\"Name\" field=\"name\" rules={[{ required: true, message: 'Name is required' }]}>\\n        <Mentions\n          placeholder=\"You can use @ Plato to mention Platon\"\n          options={['Jack', 'Steven', 'Platon', 'Mary']}\n          alignTextarea={false}\n          rows={2}\n        />\n      </FormItem>\n      <FormItem wrapperCol={{ offset: 5 }}>\n        <Button style={{ margin: '0 12px' }} type=\"primary\">\n          Submit\n        </Button>\n        <Button>Reset</Button>\n      </FormItem>\n    </Form>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Watermark Component TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the Watermark component props, including properties for customizing watermark appearance, position, and container.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WatermarkProps {\n  rotate?: number; // -20\n  image?: string;\n  className?: string | string[];\n  content?: string | string[];\n  fontStyle?: {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: number | string;\n    fontWeight?: number | string;\n  }; // Default: {color: 'rgba(0, 0, 0, 0.12)', fontFamily: 'sans-serif', fontSize: '14px', fontWeight: 'normal'}\n  gap?: [number, number]; // [100, 100]\n  height?: number | string;\n  offset?: [number, number]; // [gaps[0] / 2, gaps[1] / 2]\n  style?: CSSProperties;\n  width?: number | string;\n  zIndex?: string | number;\n  getContainer?: () => HTMLElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Team Site in Material Market API\nDESCRIPTION: This snippet shows how to query team sites using a POST request. It accepts parameters for filtering and returns an array of site information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group/queryGroupSite\n\nReturn {result: Array}\n```\n\n----------------------------------------\n\nTITLE: Default Data Definition\nDESCRIPTION: This snippet defines default data for a table using an array of objects, where each object represents a user's details like name, salary, and gender.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__demo__/form-provider.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultData = [...new Array(5)].map((_, index) => {\\\n  return {\\\n    key: index,\\\n    name: 'Jane Doe ' + index,\\\n    salary: 23000,\\\n    email: 'jane.doe@example.com',\\\n    gender: index % 2 > 0 ? 'male' : 'female',\\\n    age: 20 + index,\\\n  };\\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Component Template in JavaScript\nDESCRIPTION: JavaScript code for creating a custom component template, including file naming and content generation based on context.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/workspace.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = (context) => {\nreturn {\n// The file name after creation\nfilename: `${context.name}.tsx`,\n// The content of the file after creation\ncontents: '// your file contenst',\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider with Text in React\nDESCRIPTION: This snippet demonstrates how to use the Divider component from Arco Design with text in different orientations (left, center, right). It also includes Typography components for paragraph text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/with-text.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Divider, Typography } from '@arco-design/web-react';\nconst { Paragraph } = Typography;\nconst orientations = ['left', 'center', 'right'];\n\nconst App = () => {\n  return (\n    <div className=\"divider-demo\">\n      <Paragraph>A design is a plan or specification for the construction of an object.</Paragraph>\n      <Divider orientation={orientations[0]}>Text</Divider>\n      <Paragraph>A design is a plan or specification for the construction of an object.</Paragraph>\n      <Divider orientation={orientations[1]}>Text</Divider>\n      <Paragraph>A design is a plan or specification for the construction of an object.</Paragraph>\n      <Divider orientation={orientations[2]}>Text</Divider>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Menu Component Introduction in Arco Design\nDESCRIPTION: Introduction to the Menu component in Arco Design, categorized under navigation components. The Menu is described as a component that collects, arranges, and displays a list of options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n组件 / 导航\n\n# 菜单 Menu\n\n收纳、排列并展示一系列选项的列表。\n```\n\n----------------------------------------\n\nTITLE: Styling Comment Action Buttons with CSS\nDESCRIPTION: CSS styles for the comment action buttons, including hover and focus states. Implements a clean, minimal design with smooth transitions and accessibility features.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/list.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-comment-action {\n  padding: 0 4px;\n  line-height: 24px;\n  border-radius: 2px;\n  background: transparent;\n  transition: all 0.1s ease;\n  color: var(--color-text-1);\n  cursor: pointer;\n  display: inline-block;\n  border: none;\n}\n\n.custom-comment-action:focus-visible {\n  box-shadow: inset 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-comment-action:hover {\n  background: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Overflow Hidden from PageHeader Extra Content - CSS\nDESCRIPTION: Style change that removes overflow: hidden from PageHeader's extra content area to prevent content from being cut off or hidden when rendered.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/PageHeader/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: css\nCODE:\n```\noverflow: hidden\n```\n\n----------------------------------------\n\nTITLE: Defining ResizeBox.SplitGroup.CollapsedConfig API in Markdown\nDESCRIPTION: Markdown table detailing the API for the ResizeBox.SplitGroup.CollapsedConfig component, including parameters, types, descriptions, and default values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|onClick|点击快速折叠的回调|(e, collapsed, activeIndex, direction: 'prev' \\| 'next') => void |`-`|\n|icon|快速折叠按钮的icon|ReactNode |`-`|\n```\n\n----------------------------------------\n\nTITLE: Defining TreeDataType Interface for Tree Component in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of tree node data. Each node can have properties like key, children, and any additional custom properties needed for rendering the tree structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TreeDataType = NodeProps & {\n  key?: string;\n  _index?: number;\n  children?: TreeDataType[];\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Carousel Handle Type Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the CarouselHandle type that specifies the carousel control methods and properties. Includes DOM reference and goto function for programmatic carousel control.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport type CarouselHandle = {\n  dom: HTMLElement;\n  goto: (options: {\n    /** 目标索引 */\n    index: number;\n    /** 是否为逆向 */\n    isNegative?: boolean;\n    /** 是否由用户触发，将决定 onChange 回调的第三个参数 */\n    isManual?: boolean;\n    /** 是否重置自动播放的 interval */\n    resetAutoPlayInterval?: boolean;\n  }) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: VirtualListProps API Properties in Markdown\nDESCRIPTION: Markdown table describing the VirtualListProps properties, including height, threshold, and isStaticItemHeight, with their types and default values.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|Default|\n|---|:---:|:---:|---:|\n|height|Viewable area height (`2.11.0` starts to support `string` type such as `80%`)|`number`| `200` |\n|threshold|The threshold of the number of elements that automatically enable virtual scrolling, pass in `null` to disable virtual scrolling.|`number` \\| `null`| `100` |\n|isStaticItemHeight|Whether it is a static element of the same height|`boolean`|`true`|\n```\n\n----------------------------------------\n\nTITLE: Defining User Permissions in TypeScript\nDESCRIPTION: Demonstrates the structure of user permission data, mapping resources to arrays of allowed actions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/permission.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * { data-analysis:  ['read', 'write'] }\n */\nexport type UserPermission = Record<string, string[]>;\n\nuserInfo.permission = {\n  'data-analysis': ['read', 'write'],\n  'search-table': ['read'],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UploadRequestReturn Interface\nDESCRIPTION: Interface for the upload request return value with optional abort method\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadRequestReturn {\n  abort?: () => void;\n  [key: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Semantic Naming in JavaScript\nDESCRIPTION: Examples of good and bad practices for semantically naming components in JavaScript. Avoid generic names and use descriptive, functional names instead.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Bad Case\nfunction SelectV2() {}\n\n// ✅ Good Case\nfunction SelectWithCheckAll() {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Draggable Tabs with DndProvider\nDESCRIPTION: Renders draggable tabs using DndProvider from react-dnd, mapping initial tabs and allowing dynamic reordering through the moveTabNode function.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/drag.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst App = () => {\n    const [tabs, setTabs] = useState(initTabs);\n\n    const moveTabNode = (dragIndex: number, hoverIndex: number) =>\n        setTabs(prevTabs => {\n            const newCards = [...prevTabs];\n            newCards.splice(hoverIndex, 0, ...newCards.splice(dragIndex, 1));\n\n            return newCards;\n        });\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Tabs>\n                {tabs.map((tabPane, index) => (\n                    <TabPane\n                        key={tabPane.key}\n                        title={\n                            <WrapTabNode key={index} index={index} moveTabNode={moveTabNode}>\n                                {tabPane.title}\n                            </WrapTabNode>\n                        }\n                    >\n                        {tabPane.children}\n                    </TabPane>\n                ))}\n            </Tabs>\n        </DndProvider>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Webpack and Jest\nDESCRIPTION: Extending Babel configuration for shared Webpack and Jest Babel settings, allowing plugin additions and modifications\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config) => {\n  config.plugins.push('@babel/plugin-proposal-class-properties');\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomIconType for Upload Component\nDESCRIPTION: Type definition for customizing icons and renderers in the upload component interface\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomIconType = {\n  previewIcon?: ReactNode;\n  removeIcon?: ReactNode;\n  fileIcon?: ReactNode;\n  reuploadIcon?: ReactNode;\n  cancelIcon?: ReactNode;\n  startIcon?: ReactNode;\n  errorIcon?: ReactNode;\n  fileName?: (file: UploadItem) => ReactNode;\n  progressRender?: (file: UploadItem, originDom: ReactNode) => ReactElement; // 2.34.0\n  imageRender?: (file: UploadItem) => ReactNode; // 2.34.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Group Query Parameters in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for group query parameters, including optional fields for ID, name, and creation date ranges.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  id?: number;\n  name?: string;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Image Action Buttons\nDESCRIPTION: This CSS snippet provides styles for button actions used in the image component. It sets dimensions, flex properties, and visual effects for focus states. The styles are critical for maintaining consistent interactive behavior and appearance in the UI components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/extra-actions.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.image-demo-action-item {\n  height: 22px;\n  width: 22px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border: unset;\n  background: unset;\n  color: inherit;\n  cursor: pointer;\n  border-radius: 50%;\n}\n\n.image-demo-action-item:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n.image-demo-props table:nth-of-type(2) thead th:last-child,\n.image-demo-props table:nth-of-type(3) thead th:last-child {\n  width: 20%;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Arco Components in JavaScript\nDESCRIPTION: Example of extending Jest configuration for Arco components. The configuration specifies a custom Jest configuration file path in arco.env.config.js, and shows how to extend the default Jest configuration from React Env.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\n\nmodule.exports = function defineConfig() {\nreturn {\njest: {\n// Path relative to the project root\njestConfigPath: './jest.config.js',\n}\n};\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// jest.config.js\nconst defaultConfig = require(require.resolve('@arco-cli/react/dist/jest/jest.cjs.config.js'));\n\n// It is recommended to extend the default Jest configuration of React Env\nconst finalConfig = {\n...defaultConfig,\n// ... extend config\n};\n\nmodule.exports = finalConfig;\n```\n\n----------------------------------------\n\nTITLE: Styling to Hide Checkboxes in Arco Design Select Options\nDESCRIPTION: This CSS snippet hides the checkbox elements within the Select component's options. It targets elements with the class 'select-demo-hide-option-checkbox' and sets the display property of the checkbox to none.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/hide-selected-option.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.select-demo-hide-option-checkbox .arco-checkbox {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Comment Action Buttons with CSS\nDESCRIPTION: CSS styles for custom comment action buttons including hover states, focus indicators, and transition effects. Implements a clean, minimal design with proper spacing and interaction feedback.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/__demo__/align.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-comment-action {\n  padding: 0 4px;\n  line-height: 24px;\n  border-radius: 2px;\n  background: transparent;\n  transition: all 0.1s ease;\n  color: var(--color-text-1);\n  cursor: pointer;\n  display: inline-block;\n  border: none;\n}\n\n.custom-comment-action:focus-visible {\n  box-shadow: inset 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-comment-action:hover {\n  background: var(--color-fill-3);\n}\n```\n\n----------------------------------------\n\nTITLE: Marking User-Created Options in Select Component\nDESCRIPTION: The Select component uses DOM Attributes to mark options that the user is creating and has already created.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelect.Option.setAttribute('aria-created', 'true');\n```\n\n----------------------------------------\n\nTITLE: Defining BackTop Component Properties in Markdown\nDESCRIPTION: This snippet defines the API properties for the BackTop component, including their descriptions, types, and default values. It covers properties such as duration, visibleHeight, easing, className, style, onClick, and target.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/BackTop/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|duration|Duration to scroll to the top|number |`400`|\n|visibleHeight|When scrolling to this height, display the back to top button.|number |`400`|\n|easing|Scroll to the top of the easing method type, all types: [easing](https://github.com/PengJiyuan/b-tween).|string |`quartOut`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n|onClick|Callback when you click to return to the top.|() => void |`-`|\n|target|Set the element whose scroll event needs to be listened to. The value is a function that returns the corresponding `DOM` element|() => HTMLElement \\| Window |`() => window`|\n```\n\n----------------------------------------\n\nTITLE: Defining NodeInstance Type for Tree Component in TypeScript\nDESCRIPTION: Type definition for node instances in the Tree component, representing a React element with NodeProps.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/README.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NodeInstance = ReactElement<\n  PropsWithChildren<NodeProps>,\n  typeof TreeNode\n>;\n```\n\n----------------------------------------\n\nTITLE: Controlling Popup Visibility in React Select\nDESCRIPTION: New popupVisible prop added to directly control the expanded/collapsed state of the dropdown.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Select popupVisible={true}>\n  {/* Options */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: WatermarkOptions Type Definition in Markdown\nDESCRIPTION: API documentation table defining the configuration options for watermark implementation. Includes parameters for rotation, image source, z-index, content, font styling, spacing, dimensions, positioning, and container configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useWatermark/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|rotate|单个水印旋转角度|number |`-20`|\n|image|水印图片源，优先级比文字内容高|string |`-`|\n|zIndex|zIndex|CSSProperties['zIndex'] |`-`|\n|content|水印的文字内容|string \\| string[] |`-`|\n|fontStyle|水印文字样式|{color?: string;fontFamily?: string;fontSize?: number \\| string;fontWeight?: number \\| string;} |`{color:`rgba(0, 0, 0, 0.12)`, fontFamily: `sans-serif`, fontSize: `14px`, fontWeight: `normal` }`|\n|gap|水印间的间距|[number, number] |`[100, 100]`|\n|height|单个水印的高度|number \\| string |`-`|\n|offset|水印相对于 `container` 容器的偏移量。|[number, number] |`[`gaps[0] / 2`, `gaps[1] / 2`]`|\n|width|单个水印的宽度。`image` 时默认为 100，content 时默认为文本宽度|number \\| string |`-`|\n|getContainer|添加水印的容器 `wrapper`，会把水印 `dom` 作为 `container` 的第一个子节点展示|() => HTMLElement |`-`|\n```\n\n----------------------------------------\n\nTITLE: Form Component Validation Message Configuration\nDESCRIPTION: Adding support for customizing validation message templates in Form component through validateMessages property\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateMessages: Record<string, string>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType Type in TypeScript\nDESCRIPTION: Defines the structure for object values used in the Select component, including value, label, and closable properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Demo Vendor\nDESCRIPTION: This code demonstrates the Webpack configuration needed to include the `arcoDemoVendor` entry point. This configuration ensures that the dependencies exported from `arcoDemoVendor.js` are bundled correctly for the demo environment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Lerna Monorepo 模板中的物料构建配置\n\nconst fs = require('fs');\nconst path = require('path');\nconst merge = require('webpack-merge');\nconst { webpack } = require('../../../arco.scripts.config');\n\nmodule.exports = (config) => {\n  if (webpack) {\n    const commonConfig =\n      typeof webpack === 'function'\n        ? webpack\n        : typeof webpack.component === 'function'\n        ? webpack.component\n        : () => {};\n    config = commonConfig(config) || config;\n  }\n\n  const entry = {\n    arco: path.resolve(__dirname, '../src/index.tsx'),\n  };\n  const demoVendorPath = path.resolve(__dirname, '../src/demo/arcoDemoVendor.js');\n\n  if (fs.existsSync(demoVendorPath)) {\n    entry.arcoDemoVendor = demoVendorPath;\n  }\n\n  return merge(config, { entry });\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Arco Component Style Dependencies in TypeScript\nDESCRIPTION: Example of how to declare style dependencies for Arco components in a material's style index file to support on-demand loading of styles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/style/index.ts\nimport './index.less';\n\n// 如果物料使用到了 Arco 组件，声明它的依赖\nimport '@arco-design/web-react/es/Button/style';\n\n// 如果物料使用到了其他物料，也声明它的样式依赖\nimport '@namespace/some-other-material/es/style';\n```\n\n----------------------------------------\n\nTITLE: Creating Sliders with Default and Disabled States - React\nDESCRIPTION: This snippet defines a React functional component that renders two Slider components from the Arco Design library. One slider is enabled with a default value of 30, and the second slider is disabled with the same default value. The sliders are enclosed within a Space component that manages spacing between them.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Slider/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slider, Space } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Space size={60}>\n      <Slider defaultValue={30} style={{ width: 200 }} />\n      <Slider defaultValue={30} disabled={true} style={{ width: 200 }} />\n    </Space>\n  );\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Group Query in Material Market API\nDESCRIPTION: This snippet demonstrates how to perform a conditional query for groups using a POST request. It accepts various parameters for filtering and returns an array of results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group\n\nReturn {result: Array}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Mode in Arco Design React\nDESCRIPTION: The JavaScript snippet illustrates how to implement a numeric input box with button mode using the `InputNumber` component from the `@arco-design/web-react` package in a React application. The example includes a disabled input number as well. Dependencies are React and @arco-design/web-react library. The `mode` parameter is set to 'button' to enable button mode and `defaultValue` initializes the input. `style` is used for custom layout and styling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__demo__/mode.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputNumber } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <InputNumber\n        mode=\"button\"\n        defaultValue={500}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n      <InputNumber\n        mode=\"button\"\n        disabled\n        defaultValue={500}\n        style={{ width: 160, margin: '10px 24px 10px 0' }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting maxTagCount in Select Component\nDESCRIPTION: Shows how to use the maxTagCount property to display hidden tags in a Popover for Select, Cascader, and TreeSelect components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmaxTagCount.showPopover\n```\n\n----------------------------------------\n\nTITLE: Type Definition - VerificationCodeOptions Interface\nDESCRIPTION: TypeScript interface defining the configuration options for the verification code hook. Includes properties for length, default value, current value, input references, and callback functions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerificationCodeOptions {\n  length: number;\n  defaultValue?: string;\n  value?: string;\n  getInputRefList: () => (HTMLInputElement | HTMLTextAreaElement)[];\n  onChange?: (value: string) => void;\n  onFinish?: (value: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Outline Response Structure in TypeScript\nDESCRIPTION: This TypeScript type defines the structure of team site outline information returned by the API, including an example of document sections with their href, text, and depth.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  DocSearch: [\n    {\n      href: '/DocSearch#basic',\n      text: 'Basic',\n      depth: 2,\n    },\n    {\n      href: '/DocSearch#docsearchprops',\n      text: 'DocSearchProps',\n      depth: 2,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Menu with Icons using CSS\nDESCRIPTION: This CSS snippet is used to customize the appearance of the dropdown menu and button in the Arco Design components. It targets the dropdown button and menu popup visible state to adjust padding, font weight, and icon behavior, including rotating the 'IconDown' when the dropdown is clicked.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/item-icon.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Result Component Feature Addition - Version 2.3.0\nDESCRIPTION: New feature allowing Result component to accept status=null, which removes default background color and adjusts custom icon sizing.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__changelog__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.3.0\n\n2020-11-27\n\n### 🆕 Feature\n\n- `Result` 组件支持传入 `status = null` ，会不设置默认背景色并且调整自定义图标大小。\n```\n\n----------------------------------------\n\nTITLE: Defining OptionInfo Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the OptionInfo type that extends PropsWithChildren and OptionProps. Includes properties for child elements, validity, index and origin tracking.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OptionInfo extends PropsWithChildren<OptionProps> {\n  child?: ReactElement;\n  _valid: boolean;\n  _index: number;\n  _origin: \"children\" | \"options\" | \"userCreatedOptions\" | \"userCreatingOption\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Component with Emoji Tooltips\nDESCRIPTION: Shows how to use the Rate component from Arco Design with emoji tooltips. The component displays different emoji characters as tooltips when hovering over each rating star.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__demo__/tooltips.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Rate } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Rate tooltips={['😠', '🙂', '😊', '😘', '😍']} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Arco Design Grid Items with CSS\nDESCRIPTION: This CSS code provides styling for the Arco Design Grid items, including setting height, line height, text color, text alignment, and background colors. It also uses the `:nth-child` selector to apply different background colors to even and odd grid items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/grid.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid-demo-grid .demo-item,\n.grid-demo-grid .demo-suffix {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo-grid .demo-item:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n\n.grid-demo-grid .demo-item:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition Enhancement\nDESCRIPTION: Added TypeScript type definitions for the Tabs component, improving type safety and developer experience\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__changelog__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definition for renderTabHeader callback\ntype DefaultTabHeader = {\n  // Type details for tab header callback\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useWatermark Hook Interface\nDESCRIPTION: Markdown documentation structure defining the useWatermark hook implementation details and API specifications\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useWatermark/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHooks / useWatermark\n\n# useWatermark\n\nuseWatermark\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentsProps Type in TypeScript\nDESCRIPTION: The ComponentsProps type outlines the structure for table component properties, defining the types and functionalities for header and body sections. Dependencies include ReactNode for rendering custom elements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ComponentsProps = {\n  table?: any;\n  header?: {\n    operations?: (nodes: {\n      selectionNode?: ReactNode;\n      expandNode?: ReactNode;\n    }) => {\n      name?: string;\n      node?: ReactNode;\n      width?: number;\n    }[];\n    wrapper?: any;\n    thead?: any;\n    row?: any;\n    th?: any;\n    cell?: any;\n  };\n  body?: {\n    operations?: (nodes: {\n      selectionNode?: ReactNode;\n      expandNode?: ReactNode;\n    }) => {\n      name?: string;\n      node?: ReactNode | ((record) => ReactNode); // 2.17.0\n      width?: number;\n    }[];\n    wrapper?: any;\n    tbody?: any;\n    row?: any;\n    td?: any;\n    cell?: any;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Custom Filter Option Behavior in Select - TypeScript\nDESCRIPTION: This snippet fixes an issue where a custom filterOption function still applies even when the Select component allows searching with an empty input. The fix ensures proper functionality based on user input.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that custom `filterOption` still takes effect when the `Select` component allows searching and the input text is empty.\n```\n\n----------------------------------------\n\nTITLE: TEMPLATE.md Structure\nDESCRIPTION: This snippet shows the basic structure of the TEMPLATE.md file, which serves as a template for generating the material's documentation.  `%%Props%%` and `%%Demos%%` are placeholders that are replaced with the component's Props parameters and Demo code, respectively, during the documentation generation process.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nfile: index\n---\n\n# TooltipButton\n\n## Properties/Props\n\n%%Props%%\n\n## Demos\n\n%%Demos%%\n\n```\n\n----------------------------------------\n\nTITLE: Importing Material Component in JavaScript\nDESCRIPTION: Demonstrates how to import a material component from an NPM package.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SelectWithCheckAll from '@arco-materials/select-with-check-all';\n```\n\n----------------------------------------\n\nTITLE: Enhancing Transfer Component Customization\nDESCRIPTION: Extends Transfer component's configuration options to support different properties for source and target lists, including search, footer, and list styling\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/__changelog__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nshowSearch: string[] | boolean\nshowFooter: ReactNode[] | boolean\nlistStyle: CSSProperties[]\n```\n\n----------------------------------------\n\nTITLE: Implementing an After-Init Hook for Arco Material Template\nDESCRIPTION: This JavaScript code defines an after-init hook function for an Arco material template. It runs after project initialization, performs a build, and provides custom log messages based on whether the project is for a monorepo or not.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// hook/after-init.js\nconst { spawn } = require('child_process');\n\nconst logInfo = (messages) => {\n  messages.forEach((m) => {\n    console.log(`\\x1B[32m${m}\\x1B[0m`);\n  });\n};\n\nmodule.exports = ({ projectName, isForMonorepo }) => {\n  return new Promise((resolve, reject) => {\n    spawn('npm', ['run', 'build'], { stdio: 'inherit' }).on('close', (code) => {\n      if (code) {\n        reject();\n      } else {\n        if (isForMonorepo) {\n          logInfo([\n            '******************************************************************',\n            '  你可以在 Lerna 根目录重新执行以下命令，预览所有项目',\n            `    $ npm run dev`,\n            '******************************************************************',\n          ]);\n        } else {\n          logInfo([\n            '******************************************************************',\n            '  你可以执行如下命令，启动项目',\n            `    $ cd ${projectName}`,\n            `    $ npm run dev`,\n            '******************************************************************',\n          ]);\n        }\n        resolve();\n      }\n    });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Managing External Dependencies for Arco Design Demo\nDESCRIPTION: Example of how to handle external dependencies for Arco Design component demos using arcoDemoVendor.js.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// arcoDemoVendor.js\nexport { myDependency } from '@arco-design/somelib';\n\n// basic.jsx\nimport Component from '@arco-design/my-material';\nimport { myDependency } from './arcoDemoVendor';\n\nexport default () => {\n  return <Component option={myDependency} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Comments for ts-document\nDESCRIPTION: This snippet demonstrates how to write comments in TypeScript using TSDoc syntax, specifically for use with the `ts-document` tool.  The comments include tags like `@zh` for Chinese description, `@en` for English description, `@defaultValue` for the default value, and `@version` for the version the property was added.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @title Button (Required, only the interface or type described with `title` will be collected)\n */\ninterface ButtonProps {\n  /**\n   * @zh button size (Chinese description of the attribute)\n   * @en Size of Button (optional, English description of the attribute)\n   * @version 1.2.0 (optional, in which version the new attributes are supported)\n   * @defaultValue'default' (optional, the default value of the attribute)\n   */\n  size?:'mini' |'small' |'default' |'large';\n\n  /**\n   * @zh button state\n   * @en Status of Button\n   */\n  status?:'danger' |'error' |'success';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Grid Component Overview - Arco Design\nDESCRIPTION: This snippet provides a general description of the Grid component within the Arco Design framework. It highlights its role in ensuring page consistency and strengthening teamwork.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"Component / Layout\n\n# Grid\n\nGrid can effectively ensure the consistency and logic of the page, strengthen teamwork and unity.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component API with JSDoc in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to define component APIs using JSDoc-style comments. It shows the required `@title` tag for interface/type declarations to be extracted.  It also details the usage of tags like `@zh`, `@en`, `@defaultValue`, and `@version` for providing comprehensive property annotations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n* @title Button (required, only interfaces or types with `title` description will be collected)\n*/\ninterface ButtonProps {\n/**\n* @zh Button size (Chinese description of the property)\n* @en Size of Button (optional, English description of the property)\n* @version 1.2.0 (optional, which version the new property is supported in)\n* @defaultValue 'default' (optional, default value of the property)\n*/\nsize?: 'mini' | 'small' | 'default' | 'large';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Typography - Table Cell Width Configuration\nDESCRIPTION: This code configures the width and ellipsis behavior of Typography within a table cell. Setting a fixed width prevents a calculation loop with the table.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"{{\n    title: 'Address',\n    dataIndex: 'address',\n    width: 200,\n    render(x: any) {\n      return <Typography.Paragraph ellipsis={{ showTooltip: true }}>{x}</Typography.Paragraph>;\n    },\n  }}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Team Query Parameters in TypeScript\nDESCRIPTION: This TypeScript type defines the structure of query parameters for team searches, including optional fields for id, name, and creation date range.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  id?: number;\n  name?: string;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Trigger Element for Select Component\nDESCRIPTION: This CSS snippet provides styling for the custom trigger element of the Select component. It includes styles for normal state, hover state, and focus state to enhance user interaction.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__demo__/custom-trigger.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.trigger-element {\n  padding: 0 12px;\n  cursor: pointer;\n}\n\n.trigger-element:hover {\n  background-color: var(--color-fill-2);\n}\n\n.trigger-element:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries for Watermark Component\nDESCRIPTION: Chronological changelog entries detailing the development of the Watermark component, including feature additions, bug fixes, and TypeScript definition updates spanning multiple versions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Watermark/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.61.2\n\n2024-03-29\n\n### 🐛 BugFix\n\n- Fix the bug of incomplete display of `Watermark` when pixel ratio=1.([#2614](https://github.com/arco-design/arco-design/pull/2614))\n\n## 2.59.0\n\n2024-01-19\n\n### 🐛 BugFix\n\n- Fixed the bug of incomplete display of `Watermark` content in boundary scenes.([#2507](https://github.com/arco-design/arco-design/pull/2507))\n\n## 2.57.1\n\n2023-12-15\n\n### 🐛 BugFix\n\n- Fix the bug of text deformation after `Watermark` is rotated.([#2437](https://github.com/arco-design/arco-design/pull/2437))\n\n### 🆎 TypeScript\n\n- Adjust the `content` attribute ts definition of the Watermark component([#2430](https://github.com/arco-design/arco-design/pull/2430))\n\n## 2.56.0\n\n2023-11-17\n\n### 🆕 Feature\n\n- Add `Watermark` component.([#2363](https://github.com/arco-design/arco-design/pull/2363))\n```\n\n----------------------------------------\n\nTITLE: Defining FieldNamesType in JavaScript\nDESCRIPTION: This snippet defines the FieldNamesType used within the TreeSelect component. It allows customization of field names for keys, titles, and other properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport type FieldNamesType = {\n  key?: string;\n  title?: string;\n  disabled?: string;\n  children?: string;\n  isLeaf?: string;\n  disableCheckbox?: string;\n  checkable?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the Divider Demo Container with CSS\nDESCRIPTION: This CSS snippet provides styles for the container of the divider demo. It sets a fixed width, adds padding, and creates a border around the demo area.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Divider/__demo__/vertical.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.divider-demo {\n  box-sizing: border-box;\n  width: 560px;\n  padding: 24px;\n  border: 30px solid rgb(var(--gray-2));\n}\n```\n\n----------------------------------------\n\nTITLE: Arco Design Component Directory Structure\nDESCRIPTION: The expected file structure for an Arco Design component, including documentation, tests, demo files, and styles.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n├── README.zh-CN.md\n├── README.en-US.md\n├── TEMPLATE.md\n├── __test__\n│   ├── __snapshots__\n│   │   └── demo.test.js.snap\n│   ├── demo.test.js\n│   └── xxx.test.js\n├── demo\n│   ├── basic.md\n│   └── custom_icon.md\n├── index.tsx\n└── style\n    ├── token.less\n    └── index.less\n```\n\n----------------------------------------\n\nTITLE: Defining Popconfirm Component Structure\nDESCRIPTION: Markdown structure defining the Popconfirm component category and basic description in the component documentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Feedback\n\n# Popconfirm\n\nA simple confirmation box of an action.\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectValueType in JavaScript\nDESCRIPTION: Defines the ObjectValueType structure, which is used to represent a selectable option with properties like value, label, and closability within the TreeSelect component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport type ObjectValueType = {\n  value?: any;\n  label?: ReactNode;\n  closable?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Height Jitter in Multi-Select Box - TypeScript\nDESCRIPTION: This snippet addresses a height jitter issue caused by adding or deleting options when the width of the multi-select box of the Select component is narrow, improving stability.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the height jitter caused by adding or deleting options when the width of the multi-select box of the `Select` component is narrow.\n```\n\n----------------------------------------\n\nTITLE: Initialization of Material Information - JSON\nDESCRIPTION: This code snippet represents the structure of the 'arcoMeta.json' file that is generated when initializing material information. This file contains essential metadata about the NPM package including its name, author, and dependencies.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.publish.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": false,\n  \"name\": \"@arco-design/hello-arco\",\n  \"title\": \"Arco sample material\",\n  \"description\": \"\",\n  \"type\": \"react-component\",\n  \"category\": [\"Other\"],\n  \"group\": 0,\n  \"homepage\": \"\",\n  \"repository\": \"\",\n  \"author\": \"arco\",\n  \"package\": {\n    \"type\": \"npm\",\n    \"name\": \"\",\n    \"version\": \"\",\n    \"registry\": \"\",\n    \"peerDependencies\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Setup Function in JavaScript\nDESCRIPTION: This snippet defines a setupMock function that allows easy enabling and disabling of the mock functionality. It checks for production environment and mock configuration.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/mock.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function setupMock(config: { \n  mock?: boolean; \n  setup: () => void \n}) {\n  const { mock = !__PRODUCTION__, setup } = config;\n\n  if (mock === false) return;\n\n  setup();\n};\n```\n\n----------------------------------------\n\nTITLE: Updating and Closing Modal Dialogs using Method Calls in JavaScript\nDESCRIPTION: Example showing how to create a modal dialog using Modal.info() and then update or close it using the returned object's methods.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Modal/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = Modal.info({ title: 'Info' });\ninfo.update({ title: 'Updated Title' });\ninfo.close();\n```\n\n----------------------------------------\n\nTITLE: Import via React components\nDESCRIPTION: Shows the usage of the `@arco-materials/material-site-viewer` component for previewing the team site within a React application, including import statements and configuration options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n\"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as arco from '@arco-design/web-react';\nimport * as arcoicon from '@arco-design/web-react/icon';\n\nimport { createBrowserHistory } from 'history';\nimport { Router } from 'react-router-dom';\nimport SiteViewer from '@arco-materials/material-site-viewer';\n\n// Make sure the arco style is introduced globally in the current project\n// If the Design Lab theme is used, import the css file of the theme package\nimport '@arco-design/web-react/dist/css/arco.min.css';\n\n// Since the site product file has removed React/ReactDOM/Arco, it needs to be exposed in the global scope\n(function injectGlobalDependencies() {\n  const globalDependencies = {\n    React,\n    ReactDOM,\n    arco,\n    arcoicon,\n  };\n\n  Object.entries(globalDependencies).forEach(([key, value]) => {\n    window[key] = value;\n  });\n})();\n\nexport default () => {\n  return (\n    <Router history={createBrowserHistory({ basename: '' })}>      <SiteViewer\n        // Basic routing for documentation site pages\n        routerHistoryBasename=\"/doc/\"\n        // Specify the URL of the site product (not a file path\n        siteFileUrl={{\n          js: 'https://unpkg.com/@arco-materials/material-team-site@latest/dist/arcoSite.zh-CN.js',\n          css: 'https://unpkg.com/@arco-materials/material-team-site@latest/dist/arcoSite.css',\n        }}\n        // route contains the page path information corresponding to the clicked menu item, you can modify the page route according to this information\n        onClickMenuItem={(route) => {\n          console.log(route);\n        }}\n      />\n    </Router>\n  );\n};\"\n```\n\n----------------------------------------\n\nTITLE: Result Component Changes - Version 2.11.1\nDESCRIPTION: Bug fix for Result component where icon prop was incorrectly mapped to div tag causing console warnings. Includes style adjustments for custom icons when status is null.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Result/__changelog__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.11.1\n\n2021-03-15\n\n### 🐛 Bugfix\n\n- 修复 `Result` 组件传入的`icon`属性被映射到`div`标签，导致控制台warning的问题。\n\n### 💅 Style\n\n- 调整`Result`组件设置 `status=null`时，传入的自定义图标的样式层级(`font-size`、`color`)。\n```\n\n----------------------------------------\n\nTITLE: Cascader Component Features and Properties\nDESCRIPTION: Documentation of key functionality changes including autoWidth, icons, virtual lists, search controls, and multi-select features across multiple versions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CascaderProps {\n  autoWidth?: boolean; // Added in 2.54.0\n  icons?: CascaderIcons; // Added in 2.52.0\n  virtualListProps?: VirtualListProps; // Added in 2.35.0\n  dropdownMenuClassname?: string; // Added in 2.35.0\n  dropdownMenuColumnStyle?: CSSProperties; // Added in 2.35.0\n  showSearch?: {\n    panelMode?: boolean; // Added in 2.39.0\n    renderOption?: (option) => ReactNode; // Added in 2.39.0\n  };\n  checkedStrategy?: 'parent' | 'child'; // Added in 2.31.0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component Demo\nDESCRIPTION: This code snippet demonstrates a basic React component demo. It imports a component and renders it with specific props, showcasing its functionality. The demo file is located in the `/src/demo/` directory.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// /src/demo/basic.jsx\nimport React from 'react';\nimport TooltipButton from '@arco-design/rc-hello-arco';\n\nexport default () => {\n  return <TooltipButton title=\"tooltip title\">Demo Basic</TooltipButton>;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Tab Position with Arco Design in React\nDESCRIPTION: This React snippet demonstrates how to manage the position of tabs using the Arco Design library. It requires dependencies on React and Arco Design components such as Tabs, Radio, and Typography. The main functionality lies in the useState hook that keeps track of the tab position, allowing dynamic changes. The Radios let users select among 'left', 'top', 'bottom', and 'right' positions, applying this selection to the tabPosition attribute of the Tabs component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tabs/__demo__/position.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useState } from 'react';\nimport { Tabs, Radio, Typography } from '@arco-design/web-react';\nconst TabPane = Tabs.TabPane;\nconst style = {\n  textAlign: 'center',\n  marginTop: 20,\n};\n\nfunction App() {\n  const [position, setPosition] = useState('top');\n  return (\n    <div>\n      <Radio.Group\n        type=\"button\"\n        name=\"position\"\n        value={position}\n        onChange={setPosition}\n        style={{ marginBottom: 40 }}\n        options={['left', 'top', 'bottom', 'right']}\n      ></Radio.Group>\n\n      <Tabs key=\"card\" tabPosition={position}>\n        <TabPane key=\"1\" title=\"Tab 1\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 1</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"2\" title=\"Tab 2\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 2</Typography.Paragraph>\n        </TabPane>\n        <TabPane key=\"3\" title=\"Tab 3\">\n          <Typography.Paragraph style={style}>Content of Tab Panel 3</Typography.Paragraph>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Build Process with tsc-alias in JavaScript\nDESCRIPTION: Example of extending the TypeScript compilation process to handle path aliases. This configuration uses the tsc-alias package to transform path aliases configured in tsconfig.json during the build process.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\nconst { replaceTscAliasPaths } = require('tsc-alias');\n\nmodule.exports = function defineConfig() {\nreturn {\ntypescript: {\n// TSCompiler config transformers\nbuildConfig: [\n(config) => {\n// Expand the NPM package TS compilation process by customizing the compile function\nconfig.raw.compile = async ({ configFilePath }, defaultCompileFn) => {\n// !!!The default compilation function must be executed\ndefaultCompileFn();\n// Transform the path alias configured by the tsconfig.json compilerOptions.paths field\nawait replaceTscAliasPaths({ configFile: configFilePath });\n};\n},\n]\n}\n};\n};\n```\n\n----------------------------------------\n\nTITLE: Dropdown Styling CSS\nDESCRIPTION: Custom CSS styles for dropdown menu and icon rotation\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/control.md#2025-04-14_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Menu Demo Container in CSS\nDESCRIPTION: CSS styles for the menu demonstration container. It sets the box-sizing, width, padding, and background color for the container, and ensures the inner menu has scrollable overflow.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/sub-menu.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Team ID in Arco Workspace JSON\nDESCRIPTION: This snippet shows how to specify the team ID for publishing materials in the arco.workspace.jsonc file. It allows setting a default team for all components or individual teams for specific components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/team.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": {\n\"extends\": {\n// Specify the default team for all components, or set a different team for each component in members\n\"group\": 1\n},\n\"members\": []\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableVirtualListProps Type in TypeScript\nDESCRIPTION: Defines the AvailableVirtualListProps type, picking specific properties from VirtualListProps for use in the Select component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menu with Disabled Items and Dividers - React\nDESCRIPTION: This snippet demonstrates the implementation of a dropdown menu using React components from the Arco Design library. It defines a menu with cities, includes a disabled item, and uses a Divider component to clearly separate items. Key parameters include the 'droplist' which contains the menu items, and 'position' which controls the dropdown's placement.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/extra-element.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dropdown, Menu, Button, Divider } from '@arco-design/web-react';\nimport { IconDown } from '@arco-design/web-react/icon';\nconst dropList = (\n  <Menu>\n    <Menu.Item key=\"1\">Beijing</Menu.Item>\n    <Menu.Item key=\"2\">Shanghai</Menu.Item>\n    <Menu.Item key=\"3\">Guangzhou</Menu.Item>\n    <Divider style={{ margin: '4px 0' }} />\n    <Menu.Item key=\"4\" disabled>\n      Shenzhen\n    </Menu.Item>\n  </Menu>\n);\n\nfunction App() {\n  return (\n    <div className=\"dropdown-demo\">\n      <Dropdown droplist={dropList} position=\"br\">\n        <Button type=\"text\">\n          Hover\n          <IconDown />\n        </Button>\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Material Template using Arco CLI\nDESCRIPTION: This snippet demonstrates how to use the 'arco template --create' command to convert an existing Arco material project into a custom template. It includes prompts for specifying project paths and template details.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ arco template --create\n\n        ___                    ____            _\n       /   |  ______________  / __ \\___  _____(_)___ _____\n      / /| | / ___/ ___/ __ \\/ / / / _ \\/ ___/ / __ `/ __ \\\n     / ___ |/ /  / /__/ /_/ / /_/ /  __(__  ) / /_/ / / / /\n    /_/  |_/_/   \\___/\\____/_____/\\___/____/_/\\__, /_/ /_/\n                                             /____/\n\n? 请输入作为模板的现有项目路径 ./hello-arco\n? 请输入生成模板的目标路径 ./my-template\n? 生成的模板是否用于 monorepo 项目? No\n? 请输入此模板的 NPM 包名 my-template\n✔ 项目内容拷贝完成！\n✔ 转化模板成功！\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Array Manipulation in JavaScript\nDESCRIPTION: This snippet defines two functions, arrayMoveMutate and arrayMove, for modifying an array by moving an element from one index to another. It is useful for implementing drag-and-drop functionality in a sortable table. The arrayMoveMutate function modifies the array in place, while arrayMove creates a copy of the array and applies the mutation, returning the new array.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/drag.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst arrayMoveMutate = (array, from, to) => {\n  const startIndex = to < 0 ? array.length + to : to;\n\n  if (startIndex >= 0 && startIndex < array.length) {\n    const item = array.splice(from, 1)[0];\n    array.splice(startIndex, 0, item);\n  }\n};\n\nconst arrayMove = (array, from, to) => {\n  array = [...array];\n  arrayMoveMutate(array, from, to);\n  return array;\n};\n```\n\n----------------------------------------\n\nTITLE: Virtual List Props Configuration\nDESCRIPTION: Specifies available virtual scrolling properties for optimizing large transfer list performance\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Transfer/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AvailableVirtualListProps = Pick<\n  VirtualListProps<any>,\n  | \"height\"\n  | \"itemHeight\"\n  | \"threshold\"\n  | \"isStaticItemHeight\"\n  | \"scrollOptions\"\n  | \"onScroll\"\n  | \"wrapperChild\"\n>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Language Support\nDESCRIPTION: This JavaScript code shows how to configure dual language support in `docgen.config.js`. It specifies the languages to generate documentation for and the template and output file names. Separate template files can be used for each language, or a single template can be shared.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/docgen.config.js\nmodule.exports = (config) => {\n  config.tsParseTool = ['ts-document'];\n  config.languages = ['zh-CN', 'en-US'];\n\n  // 需分别准备 TEMPLATE.zh-CN.md 和 TEMPLATE.en-US.md 两份文件\n  config.template = 'TEMPLATE.[language].md';\n  // 也可中英文共用同一份模板文件（默认值）\n  // config.template = 'TEMPLATE.md';\n\n  // 将输出 README.zh-CN.md 和 README.en-US.md 两份文件\n  config.outputFileName = 'README.[language].md';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme for Team Site\nDESCRIPTION: Configuration to use a specific theme package for the team site in the local site project's main.js file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\n/**\n * @type {import('arco-material-doc-site').MainConfig}\n */\nmodule.exports = {\n  // ... Other settings...\n  site: {\n    // ... Other settings...\n    // NPM package name corresponding to the theme\n    arcoDesignLabTheme: '@arco-design/theme-volcengine-ui'\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Arco Design Theme via npm\nDESCRIPTION: This command installs a custom Arco Design theme package named '@arco-themes/theme-line' using npm.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-theme-package.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @arco-themes/theme-line\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Comment component, including properties for alignment, actions, author, avatar, content, datetime, and styling. It provides detailed information about the types and default values for each property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Comment/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|DefaultValue|\n|---|---|---|---|\n|align|Alignment of `datetime` and `actions`|`\"left\" \\| \"right\" \\| { datetime?: \"left\" \\| \"right\"; actions?: \"left\" \\| \"right\"; }`|`-`|\n|actions|List of action items rendered below the comment content|ReactNode |`-`|\n|author|Display as the comment author|ReactNode |`-`|\n|avatar|Display as the comment avatar|ReactNode |`-`|\n|content|The content of the comment|ReactNode |`-`|\n|datetime|Display as the comment datetime|ReactNode |`-`|\n|className|Additional css class|string \\| string[] |`-`|\n|style|Additional style|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration in JavaScript\nDESCRIPTION: Shows how to extend the webpack configuration to resolve module alias issues that may occur during material project building.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/webpack.config.js\nconst path = require('path');\n\nmodule.exports = (config) => {\n  config.resolve.alias = {\n    '@arco-design/rc-xxx': path.resolve('../components'),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedObject for Arco Design Form\nDESCRIPTION: This type definition defines `IndexedObject` as an object with string keys and values of any type. It is used to represent a generic object with string keys.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport type IndexedObject = {\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Arco Design README Template Structure\nDESCRIPTION: The template structure used for generating component README files, including placeholders for content and props.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nfile: interface\n---\n\n`````\n组件 / 反馈\n\n# 警告提示 Alert\n\n向用户显示警告的信息时，通过警告提示，展现需要关注的信息。\n`````\n\n%%Content%%\n\n## API\n\n%%Props%%\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for On-Demand Style Loading in JavaScript\nDESCRIPTION: Babel configuration example using babel-plugin-import to enable on-demand loading of material styles for users of the material.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .babelrc 在 babel 配置中加入\nplugins: [\n  [\n    'import',\n    {\n      libraryName: '@some-namespace/material-package-name',\n      libraryDirectory: 'es',\n      camel2DashComponentName: false,\n      // 按需加载样式\n      style: true,\n    },\n    'some-unique-name'\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Creating React Component for Token Separation - React - JavaScript\nDESCRIPTION: This snippet showcases a React functional component that uses `InputTag` and `Typography` from the Arco Design library to enable automatic word segmentation through configured token separators. The `tokenSeparators` prop allows users to define custom delimiters for parsing input text. The component renders a paragraph that is copyable and an input tag that allows for user interaction to paste or type text for segmentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputTag/__demo__/tokenSeparator.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { InputTag, Typography } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Typography.Paragraph copyable>\n        Beijing,Shenzhen|Nanjing/Xi'an\n      </Typography.Paragraph>\n      <InputTag\n        allowClear\n        tokenSeparators={[',', '|', '/']}\n        placeholder=\"Paste text here\"\n        style={{ width: 350 }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Example - CSS\nDESCRIPTION: This CSS snippet styles the dropdown component demo. It customizes the button padding, font weight, and the rotation of the icon when the dropdown is open. Key classes include '.dropdown-demo > .arco-btn' for button styles and '.arco-dropdown-popup-visible .arco-icon-down' for icon rotation effect.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/extra-element.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n\n't.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down' {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling for Horizontal Menu\nDESCRIPTION: This CSS snippet provides styling for the menu container (`menu-demo`) to control its width, padding, background color, and overflow behavior.  It targets the `.arco-menu-inner` class to manage vertical overflow within the menu.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/horizontal.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronization Commands for Material Information\nDESCRIPTION: This bash code shows the commands for synchronizing material information between the current package and the overall project, ensuring that all material data is accurately reflected on the material platform.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Synchronize the material information in the current directory\narco sync --from-current-package\n\n# or\nyarn sync\n\n# Synchronize all material information under the current project\narco sync\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ComponentType for Arco Design Form\nDESCRIPTION: This type definition defines `ComponentType` as either a key of JSX intrinsic elements or a React component type. It is used to represent the type of a component that can be used within the Arco Design Form.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport type ComponentType =\n  | keyof JSX.IntrinsicElements\n  | React.ComponentType<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining Material Information and User Types in TypeScript\nDESCRIPTION: This snippet defines the structure for material information, including user details, download statistics, and package information. It provides a comprehensive view of the data returned by the Material Market API.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BaseUser = {\n  email: string;\n  name: string;\n  enName: string;\n  username: string;\n  avatarUrl: string;\n};\n\ntype DownloadStatistics = {\n  all: number;\n  today: number;\n  thisWeek: number;\n  thisMonth: number;\n  lastDay: number;\n  lastWeek: number;\n  lastMonth: number;\n};\n\ntype MaterialInfo = {\n  name: string;\n  title: string;\n  description: string;\n  type: string;\n  category: string[];\n  group: number;\n  homepage: string;\n  repository: string;\n  author: string;\n  logo: string;\n  screenshot: string;\n  publishTime: number;\n  updateTime: number;\n  package: {\n    type: string;\n    name: string;\n    version: string;\n    registry: string;\n    peerDependencies: string[];\n  };\n  packageInfo: Object;\n  members: BaseUser[];\n  createdAt: string;\n  updatedAt: string;\n  downloadTimes: number;\n  favoriteTimes: number;\n  downloadStatistics: DownloadStatistics;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating CSS File Names for ArcoDesign\nDESCRIPTION: This diff snippet shows how to update the CSS file names from 'byteui' to 'arco' in import statements.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- @import '~@arco-design/web-react/dist/css/byteui.css';\n+ @import '~@arco-design/web-react/dist/css/arco.css';\n\n- import '@arco-design/web-react/dist/css/byteui.css';\n+ import '@arco-design/web-react/dist/css/arco.css';\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Query Parameters in TypeScript\nDESCRIPTION: This TypeScript type defines the structure of query parameters for team site searches, including optional fields for id and creation date range.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  id?: number;\n  createdBefore?: string | number;\n  createdAfter?: string | number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Document Outline Response Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for the response of a team site document outline query, including an array of document sections with text, depth, and href.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  DocSearch: [\n    {\n      href: '/DocSearch#basic',\n      text: 'Basic',\n      depth: 2,\n    },\n    {\n      href: '/DocSearch#docsearchprops',\n      text: 'DocSearchProps',\n      depth: 2,\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Entry in JavaScript\nDESCRIPTION: Demonstrates how to configure the material entry information in the main.js configuration file, including build settings and component globs.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\nmodule.exports = {\n  // Build configuration\n  build: {\n    // match the path of the document and component\n    globs: {\n      // Can be used for configuration of Arco Monorepo template\n      component: {\n        // Relative path relative to the site directory, an absolute path is also allowed\n        base:'../*',\n        doc:'docs/README.md',\n        demo:'src/demo/index.js',\n        style:'src/style/index.ts',\n      },\n      doc:'./docs/**/*.md',\n    },\n    // Whether to introduce the material style file\n    withMaterialStyle: true,\n  },\n  // Site configuration\n  site: {\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Arco CLI and Arco Scripts with NPM\nDESCRIPTION: Commands to install arco-cli and arco-scripts globally using npm.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install arco-cli -g\n\nnpm install arco-scripts -g\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project and Installing Dependencies\nDESCRIPTION: This snippet explains how to navigate into the newly created project directory and install the necessary dependencies using Yarn if they fail to install automatically due to potential Node version issues.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-arco-pro\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Table Variants with Summary\nDESCRIPTION: Demonstrates three different table configurations with summary rows, including fixed columns, scrollable tables, and bottom-fixed summary\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/summary.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <div>\n      <Table\n        columns={columns}\n        data={data}\n        border={{\n          wrapper: true,\n          cell: true\n        }}\n        summary={summary}\n      />\n      <Table\n        columns={columns.concat({\n          title: 'Operation',\n          dataIndex: 'operation',\n          render: () => (\n            <Button type=\"primary\" size=\"mini\">\n              Confirm\n            </Button>\n          ),\n          fixed: 'right',\n          width: 100\n        })}\n        data={data}\n        scroll={{ x: 1200 }}\n        border={{\n          wrapper: true,\n          cell: true\n        }}\n        summary={(currentData) => (\n          <Table.Summary>\n            {/* Multiple summary rows with total and average */}\n          </Table.Summary>\n        )}\n      />\n      <Table\n        columns={columns}\n        data={data}\n        scroll={{\n          x: 1200,\n          y: 150\n        }}\n        border={{\n          wrapper: true,\n          cell: true\n        }}\n        summary={(currentData) => (\n          <Table.Summary fixed=\"bottom\">{summary(currentData)}</Table.Summary>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Verification Code Input Fields\nDESCRIPTION: CSS styles for the verification code input fields, including bottom border styling and focus state highlighting using Arco Design's primary color variable.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/hook.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-code-input {\n  border: none;\n  width: 32px;\n  height: 32px;\n  display: block;\n  border-bottom: 2px solid var(--color-border-3);\n  text-align: center;\n}\n\n.custom-code-input:focus {\n  border-bottom-color: rgb(var(--primary-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox.useCheckbox Hook in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the Checkbox.useCheckbox hook. It takes an array of values and an optional array of default selected values, and returns an object with various methods for managing checkbox selections.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** T = string | number */\nconst result: ResultType = Checkbox.useCheckbox<T>(values: T[], defaultSelected?: T[]);\n```\n\n----------------------------------------\n\nTITLE: Installing Arco Design React UI Library\nDESCRIPTION: Commands to install the Arco Design React UI library using npm or yarn package managers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// npm\nnpm install @arco-design/web-react\n\n// yarn\nyarn add @arco-design/web-react\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Checkbox Cards with CSS\nDESCRIPTION: This CSS snippet provides styles for custom checkbox cards, including hover and checked states. It defines the layout, colors, and animations for the custom checkbox components created in the JavaScript code.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__demo__/custom_render.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ninput[type='checkbox']:focus-visible + .arco-tag {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\ninput[type='checkbox']:focus-visible + .custom-checkbox-card {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3);\n}\n\n.custom-checkbox-card {\n  padding: 10px 16px;\n  border: 1px solid var(--color-border-2);\n  border-radius: 4px;\n  width: 250px;\n  box-sizing: border-box;\n}\n\n.custom-checkbox-card-mask {\n  height: 14px;\n  width: 14px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 2px;\n  border: 1px solid var(--color-border-2);\n  box-sizing: border-box;\n}\n\n.custom-checkbox-card-mask-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 2px;\n}\n\n.custom-checkbox-card-title {\n  color: var(--color-text-1);\n  font-size: 14px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.custom-checkbox-card:hover,\n.custom-checkbox-card-checked,\n.custom-checkbox-card:hover .custom-checkbox-card-mask,\n.custom-checkbox-card-checked  .custom-checkbox-card-mask{\n  border-color: rgb(var(--primary-6));\n}\n\n.custom-checkbox-card-checked {\n  background-color: var(--color-primary-light-1);\n}\n\n.custom-checkbox-card:hover .custom-checkbox-card-title,\n.custom-checkbox-card-checked .custom-checkbox-card-title {\n  color: rgb(var(--primary-6));\n}\n\n.custom-checkbox-card-checked .custom-checkbox-card-mask-dot {\n  background-color: rgb(var(--primary-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Naming in JavaScript\nDESCRIPTION: Demonstrates proper semantic naming for material components, avoiding conflicts with base components and using descriptive names.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Bad Case\nfunction SelectV2() {}\n\n// ✅ Good Case\nfunction SelectWithCheckAll() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Arco Design Theme with On-Demand Loading\nDESCRIPTION: JavaScript configuration for webpack to use the Arco Design plugin with a custom theme package. This setup enables on-demand style loading for the specified theme.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-theme-package.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ArcoWebpackPlugin = require('@arco-plugins/webpack-react');\n\n// webpack config\n{\n  plugins: [\n    new ArcoWebpackPlugin({\n        theme:'@arco-themes/theme-line'\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Arco React Environment Configuration\nDESCRIPTION: TypeScript type definition for all configuration fields allowed by React Environment. Includes configurations for Jest, Webpack, TypeScript, Less, Sass, and TS-document settings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype WebpackConfigTransformer = (\nconfig: WebpackConfigMutator,\ncontext: WebpackConfigTransformContext\n) => WebpackConfigMutator\n\ntype TsConfigTransformer = (\nconfig: TypescriptConfigMutator,\ncontext: TsConfigTransformContext\n) => TypescriptConfigMutator;\n\n/**\n* All configuration fields allowed by React Env\n*/\ntype ArcoReactEnvConfig = {\n/**\n* Extend Jest configuration\n*/\njest?: {\n/**\n* Jest configuration file path\n*/\njestConfigPath?: string;\n/**\n* Jest module path (to replace arco-cli's internal dependency on Jest)\n*/\njestModulePath?: string;\n};\n/**\n* Extend Webpack's build configuration\n* Note: Webpack is only used for previewing and building component documents in the workspace, and does not participate in the construction of component products\n*/\nwebpack?: {\n/**\n* Extend component document product build configuration\n*/\npreviewConfig?: WebpackConfigTransformer[];\n/**\n* Extend component local preview configuration\n*/\ndevServerConfig?: WebpackConfigTransformer[];\n};\n/**\n* extend config of TypeScript compiler\n*/\ntypescript?: {\n/**\n* Pass in TypeScript module to replace arco-cli's internal dependency TypsScript\n*/\ntsModule?: any;\n/**\n* Extend the configuration of material product building\n*/\nbuildConfig?: TsConfigTransformer[];\n};\n/**\n* Extend the Less build configuration\n*/\nless?: {\n/**\n* Parameters required by less.render. Details: https://lesscss.org/usage/##programmatic-usage\n*/\nlessOptions?: Record<string, any>;\n/**\n* Whether to automatically create an entry file containing all Raw style files and build its products\n* For example, the source code contains ComponentA/style.less and ComponentB/style.less. This option will automatically create an index.less that aggregates the above files and build the corresponding index.css\n*/\ncombine?:\n| boolean\n| {\n/**\n* The file name of the aggregated file, which can also be a relative path. (Default value: index.less)\n*/\nfilename: string;\n};\n/**\n* Customize the style file compilation process\n*/\ncompile?: (fileInfo, defaultCompileFn) => Promise<string>;\n};\n/**\n* Extend Sass build configuration\n*/\nsass?: {\n/**\n* Parameters required by sass.compile. Details: https://sass-lang.com/documentation/js-api/modules##compile\n*/\nsassOptions?: Record<string, any>;\n/**\n* Same name configuration as less field\n*/\ncombine?:\n| boolean\n| {\nfilename: string;\n};\n/**\n* Customize style file compilation process\n*/\ncompile?: (fileInfo, defaultCompileFn) => Promise<string>;\n};\n/**\n* Extend ts-document related configuration when generating API documents\n*/\ntsDocument?: {\n/**\n* Accept parsing configuration of ts-document tool\n* https://www.npmjs.com/package/ts-document\n*/\ntsDocumentOptions?: Record<string, any>;\n}\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Team Site Document Outline in Material Market API\nDESCRIPTION: This snippet demonstrates how to query team site document outlines using a POST request. It returns a boolean status and a record of document outlines.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group/queryGroupSiteOutline\n\nReturn { ok: boolean, result: Record<string, { text: string; depth: number; href: string }[]> }\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for ArcoDesign v2 in JavaScript\nDESCRIPTION: These diff snippets show how to update import statements and CSS imports from ByteDesign to ArcoDesign.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/migrate_to_v2.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { Transfer } from '@bytedesign/web-react';\n+ import { Transfer } from '@arco-design/web-react';\n\n- import { IconRight, IconLeft } from '@bytedesign/web-react/icon';\n+ import { IconRight, IconLeft } from '@arco-design/web-react/icon';\n\n- @import '~@bytedesign/web-react/dist/css/byteui.css';\n+ @import '~@arco-design/web-react/dist/css/byteui.css';\n\n- import '@bytedesign/web-react/dist/css/byteui.css';\n+ import '@arco-design/web-react/dist/css/byteui.css';\n```\n\n----------------------------------------\n\nTITLE: Defining User and GroupInfo Types in TypeScript\nDESCRIPTION: These TypeScript types define the structure for User and GroupInfo objects, including detailed information about group members and material statistics.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = {\n  email: string;\n  name: string;\n  username: string;\n  avatarUrl: string;\n  role:'owner' |'master';\n};\n\n\ntype GroupInfo = {\n  id: number;\n  name: string;\n  logo: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n  members: User[];\n  materialStatistics: {\n    count: number;\n    downloadTimes: number;\n    favoriteTimes: number;\n    downloadStatistics: {\n      all: number;\n      today: number;\n      thisWeek: number;\n      thisMonth: number;\n      lastDay: number;\n      lastWeek: number;\n      lastMonth: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Site Directory Structure in JavaScript\nDESCRIPTION: Shows the basic directory structure created when initializing a team site project, highlighting the key configuration and documentation folders.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── .config // configuration file directory\n│ ├── main.js // site related configuration\n│ └── webpack.config.js // Extend webpack build configuration\n│\n├── docs // Custom document directory\n│ ├── en-US // Store documents in the corresponding language\n│ └── zh-CN // Store documents in corresponding languages\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash-free Anchor Navigation with Arco Design\nDESCRIPTION: Demonstrates setting up an Anchor component with hash mode disabled to prevent browser history changes when clicking anchor links. Uses the Anchor.Link subcomponent to create navigation links. The affix and hash props are set to false to disable fixed positioning and history recording.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Anchor/__demo__/hash.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Anchor } from '@arco-design/web-react';\nconst AnchorLink = Anchor.Link;\n\nconst App = () => {\n  return (\n    <Anchor affix={false} hash={false}>\n      <AnchorLink href=\"#Basic\" title=\"Basic\" />\n      <AnchorLink href=\"#Static\" title=\"Static\" />\n      <AnchorLink href=\"#Lineless-mode\" title=\"Lineless mode\" />\n      <AnchorLink href=\"#Affix\" title=\"Affix\" />\n      <AnchorLink href=\"#Scroll-boundary\" title=\"Scroll boundary\" />\n      <AnchorLink href=\"#Hash-mode\" title=\"Hash mode\" />\n    </Anchor>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Docgen Configuration for ts-document\nDESCRIPTION: This snippet shows how to configure `docgen.config.js` to use the `ts-document` tool for TypeScript parsing. This config is optional but important to take advantage of Arco's self-developed tooling.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/docgen.config.js\nmodule.exports = (config) => {\n  ...\n  // ['react-docgen-typescript'] is the default value\n  config.tsParseTool = ['ts-document']\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox.useCheckbox Hook in JavaScript\nDESCRIPTION: Demonstrates the usage of the Checkbox.useCheckbox hook. This hook manages the state of checkbox selections and provides utility functions for manipulating the selected items.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** T = string | number */\nconst result: ResultType = Checkbox.useCheckbox<T>(values: T[], defaultSelected?: T[]);\n```\n\n----------------------------------------\n\nTITLE: Publishing to NPM\nDESCRIPTION: This bash command publishes the current package to NPM. Before executing this command, ensure that the package version in `package.json` is correctly updated and that you have the necessary permissions to publish to NPM.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm publish\n```\n\n----------------------------------------\n\nTITLE: Custom Hover Animation Styles\nDESCRIPTION: Defines CSS styles for custom hover animation effect that moves the card upward on hover. Uses transform and transition properties for smooth animation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/__demo__/hoverable.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.card-custom-hover-style {\n  transition-property: all;\n}\n\n.card-custom-hover-style:hover {\n  transform: translateY(-4px);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Arco Design Development Environment\nDESCRIPTION: Commands for starting the development environment, including compiling the component library, launching the official website, and starting Storybook for component debugging.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev\n$ yarn dev:site\n$ yarn demo\n```\n\n----------------------------------------\n\nTITLE: Defining Card.Grid Component API in Markdown\nDESCRIPTION: This snippet outlines the API for the Card.Grid subcomponent, which is used for creating grid layouts within a card.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Card.Grid\n\n|参数名|描述|类型|默认值|\n|---|---|---|---|\n|hoverable|是否可以悬浮|boolean |`-`|\n|className|节点类名|string \\| string[] |`-`|\n|style|节点样式|CSSProperties |`-`|\n```\n\n----------------------------------------\n\nTITLE: Build Components in Arco Workspace via Bash\nDESCRIPTION: This Bash command outlines using arco build to selectively build components within the workspace. It demonstrates specifying components and tasks to build, which helps in targeting specific packages without rebuilding the entire environment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\narco build ComponentA,ComponentB\n\n## Use --tasks to specify the build tasks to be executed. Multiple task names can be separated by commas\n## The names of the characters for each task can be obtained through the output interface during the build\narco build --tasks=\"TSCompilerESM,TSCompilerCJS\"\n```\n\n----------------------------------------\n\nTITLE: Separating Styles from JavaScript in React Components\nDESCRIPTION: Demonstrates the proper way to separate styles from JavaScript files in React components, allowing users to import JS and CSS files separately.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Good Case\n// Pure JS\nfunction Button() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ACCard in React\nDESCRIPTION: This snippet showcases how to use the ACCard component within a React application to display a card with customizable properties like title, description, link, and button text. The ACCard is part of the Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/theme.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ACCard from '../src/widget/Card';\n\n<ACCard\n  title=\"Design Lab\"\n  description=\"Use the Design Lab platform to easily customize theme and calmly respond to a variety of business needs.\"\n  link=\"/themes\"\n  icon=\"DesignLab\"\n  buttonText=\"Goto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Cascader Component Methods in JavaScript\nDESCRIPTION: Example of how to use the focus and blur methods of the Cascader component in JavaScript.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Cascader ref={(ref) => (this.select = ref)} />;\n\nthis.select.focus();\nthis.select.blur();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cascader Component Focus and Blur Methods in JavaScript\nDESCRIPTION: This snippet shows how to use the focus() and blur() methods of the Cascader component. It demonstrates creating a reference to the component and calling these methods programmatically.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Cascader ref={(ref) => (this.select = ref)} />;\n\nthis.select.focus();\nthis.select.blur();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mentions Component in React\nDESCRIPTION: This snippet demonstrates the use of the Mentions component from the '@arco-design/web-react' library. It shows how to set the component as readOnly and disabled using props, along with initial default values and options. This is useful for creating input fields that should not allow modifications under certain conditions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Mentions/__demo__/status.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mentions, Space } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Space size={40}>\n      <Mentions\n        style={{ width: 154 }}\n        readOnly\n        defaultValue=\"Bytedance\"\n        options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n      />\n      <Mentions\n        style={{ width: 154 }}\n        disabled\n        defaultValue=\"Bytedance\"\n        options={['Bytedance', 'Bytedesign', 'Bytenumner']}\n      />\n    </Space>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for Localized Dark Mode in Arco Design\nDESCRIPTION: This snippet shows how to configure webpack's less-loader to override the 'arco-theme-tag' variable, enabling localized dark mode application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/partial-dark.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  rules: [{\n    test: /.less$/,\n    use: [{\n      loader: 'style-loader',\n    }, {\n      loader: 'css-loader',\n    }, {\n      loader: 'less-loader',\n     options: {\n       modifyVars: {  // 在less-loader@6 modifyVars 配置被移到 lessOptions 中\n         'arco-theme-tag': '.arco-theme',\n       },\n       javascriptEnabled: true\n     },\n    }],\n    ...\n  }],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Component with CSS for Arco Design\nDESCRIPTION: This CSS code snippet styles a popup component with padding, width, and alignment, as well as visual aesthetics provided by background color and shadow effects. It targets elements with the class 'demo-trigger-popup', contributing to a polished and consistent UI.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/control.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: ResizeBox Component Definition\nDESCRIPTION: Markdown documentation header defining the ResizeBox component under the Component/Other category\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Other\n\n# ResizeBox\n\nResizeBox components.\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Components using CSS\nDESCRIPTION: This CSS snippet styles the Grid components using Arco Design's class names for a responsive layout. The styles include height, line height, color, and text alignment for the grid columns. Additionally, it assigns alternating background colors for different columns using CSS nth-child selectors. There are no dependencies apart from basic CSS support in browsers.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/__demo__/push_pull.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.grid-demo .arco-col {\n  height: 48px;\n  line-height: 48px;\n  color: var(--color-white);\n  text-align: center;\n}\n\n.grid-demo .arco-col:nth-child(2n + 1) {\n  background-color: var(--color-primary-light-4);\n}\n\n.grid-demo .arco-col:nth-child(2n) {\n  background-color: rgba(var(--arcoblue-6), 0.9);\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Styling Approach for React Components\nDESCRIPTION: Demonstrates the recommended approach for styling React components using a consistent class name prefix and separate CSS files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: less\nCODE:\n```\n@am-button-prefix-cls: ~'am-button';\n\n.@{am-button-prefix-cls} {\n  padding: 10px;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button() {\n  const prefxiCls = 'am-button';\n  return <button className={prefxiCls} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Document Parsing in arco.workspace.jsonc (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the file entries for API document parsing within the `arco.workspace.jsonc` file.  It shows how to define global parsing rules under the `extends` section and component-specific rules under the `members` section. This configuration allows the system to locate and process the TypeScript definitions for API documentation generation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\n{\n\"arco.aspect/workspace\": {\n\"components\": {\n// This part is the rules inherited by all components\n\"extends\": {\n\"rootDir\": \"src\",\n\"entries\": {\n\"base\": \"./\",\n\"main\": \"index.ts\",\n\"style\": \"style/index.ts\",\n\"preview\": \"__docs__/index.mdx\",\n// Define the document parsing entry common to all components\n\"jsdoc\": [\n\"interface.ts\"\n]\n}\n},\n\"members\": [\n// This part is the specific rules for a single component\n{\n\"rootDir\": \"packages/arco-site-anchor/src\",\n\"name\": \"SiteAnchor\",\n\"entries\": {\n// Define the document parsing entry for a component\n\"jsdoc\": \"index.tsx\"\n}\n}\n]\n}\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Team and Author in arco.workspace.jsonc (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to specify the team ID and author for a component within the `arco.workspace.jsonc` file. The `group` field defines the team ID, while the `author` field indicates the material's author, which is expected to be the prefix of the employee's intranet email address.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"arco.aspect/workspace\": {\n\"components\": {\n// This part is the rules inherited by all components\n\"extends\": {\n\"rootDir\": \"src\",\n// Specify the team ID to which the material belongs\n\"group\": 1,\n// Specify the author of the material, the prefix of the employee email address in the intranet\n\"author\": \"misterluffy\"\n},\n\"members\": [\n// This part is the specific rules for a single component\n]\n}\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component: Deconstructing props in custom component\nDESCRIPTION: This code demonstrates the solution when Tooltip doesn't work when wrapping a custom component. Deconstructing props in the custom component, this ensures the `Tooltip` component and similar components pass the expected props to the underlying DOM element, which will make Tooltip component work as expected.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Tooltip>\n  <MyComponent />\n</Tooltip>\n\nfunction MyComponent(props) {\n   const { a,b,c, ...rest } = props;\n   return <div {...rest} />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering VChart Token Colors in a Table\nDESCRIPTION: This snippet returns a styled table using Arco Design components that demonstrates the default color palette for VChart by displaying the index, token names, and their corresponding colors. It utilizes a mapping of 20 color tokens defined in the VChart theme.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: react\nCODE:\n```\nimport { Table, Grid } from '@arco-design/web-react';\n\n<Table\n  pagination={false}\n  size=\"small\"\n  border={false}\n  columns={[{ title: 'index' , dataIndex: 'index', width: 100 },{ title: 'token' , dataIndex: 'token', width: 100 },{ title: 'color' , dataIndex: 'color', width: 100, render: (v, record) => {\n    return <Grid.Row key={v} align=\"center\"><div style={{width: 20, height: 20, borderRadius: 2, background: v}}></div> &nbsp; {window.getComputedStyle(document.body).getPropertyValue(record.token)}</Grid.Row>\n  } }]} \n  data={[...new Array(20)].map((_, index) => {\n      return {\n        key: index,\n        index: index + 1,\n        token: `--color-data-${index+1}`,\n        color: `var(--color-data-${index+1})`\n      }\n    })}>\n></Table>\n```\n\n----------------------------------------\n\nTITLE: Demo Entry File with Metadata\nDESCRIPTION: This code demonstrates how to create a demo entry file with component metadata and demo descriptions. These descriptions are extracted and shown on the material platform. Each demo should have a title and a description.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/demo/index.js\n/**\n * @file\n * @title 组将名，例如：EmployeeSelect\n * @memberOf 组件类型，例如：数据输入\n * @description 描述你的组件\n */\n\n/**\n * @title 基本用法\n * @description 描述你的例子\n */\nexport { default as Basic } from './basic';\n```\n\n----------------------------------------\n\nTITLE: Defining CustomIconType for Upload Component\nDESCRIPTION: Type definition for customizing icons and rendering functions in the upload component interface.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport type CustomIconType = {\n  previewIcon?: ReactNode;\n  removeIcon?: ReactNode;\n  fileIcon?: ReactNode;\n  reuploadIcon?: ReactNode;\n  cancelIcon?: ReactNode;\n  startIcon?: ReactNode;\n  errorIcon?: ReactNode;\n  successIcon?: ReactNode;\n  fileName?: (file: UploadItem) => ReactNode;\n  // 2.34.0\n  progressRender?: (\n    file: UploadItem,\n    originDom: ReactNode\n  ) => React.ReactElement;\n  // 2.34.0\n  imageRender?: (file: UploadItem) => React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Arco Workspace in JavaScript\nDESCRIPTION: Example of a workspace configuration file (arco.workspace.js) that defines workspace name and component configurations.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/workspace.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodules.exports = function () {\nreturn {\n'arco.aspect/workspace': {\nname: 'WorkspaceName',\ncomponents: {\n// To avoid duplication, you can put common component configurations here\n// Partial<ComponentConfig>\nextends: {},\n// Configuration list of all components in the current workspace\n// ComponentConfig[]\nmembers: []\n}\n}\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Material Information to NPM - Bash\nDESCRIPTION: This command is required when publishing to NPM for the first time or after modifying the 'arco.meta.json' fields. It ensures that the material information is in sync with the material platform.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.publish.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narco sync\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cascader Component Methods in JavaScript\nDESCRIPTION: This code snippet shows how to use the focus and blur methods of the Cascader component by accessing the component instance through a ref.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Cascader ref={(ref) => (this.select = ref)} />;\n\nthis.select.focus();\nthis.select.blur();\n```\n\n----------------------------------------\n\nTITLE: Avoiding Inline Styles in React Components\nDESCRIPTION: Illustrates why inline styles should be avoided in React components to ensure external styles can be overridden by class names.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button() {\n  return <button style={{ padding: 10 }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Initialization Hook in JavaScript\nDESCRIPTION: Example of a custom hook function (after-init.js) that runs after project initialization. It performs build tasks and provides guidance for starting the project based on whether it's in a monorepo or not.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// hook/after-init.js\nconst {spawn} = require('child_process');\n\nconst logInfo = (messages) => {\n  messages.forEach((m) => {\n    console.log(`\\x1B[32m${m}\\x1B[0m`);\n  });\n};\n\nmodule.exports = ({ projectName, isForMonorepo }) => {\n  return new Promise((resolve, reject) => {\n    spawn('npm', ['run','build'], {stdio:'inherit' }).on('close', (code) => {\n      if (code) {\n        reject();\n      } else {\n        if (isForMonorepo) {\n          logInfo([\n            '************************************************* *****************',\n            'You can re-execute the following command in the Lerna root directory to preview all items',\n            `$ npm run dev`,\n            '************************************************* *****************',\n          ]);\n        } else {\n          logInfo([\n            '************************************************* *****************',\n            'You can execute the following command to start the project',\n            `$ cd ${projectName}`,\n            `$ npm run dev`,\n            '************************************************* *****************',\n          ]);\n        }\n        resolve();\n      }\n    });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Spin Component Loading Tip in React\nDESCRIPTION: Demonstrates how to use the `tip` property to display a custom loading message while wrapping a Card component. The Spin component provides a loading state overlay with a configurable tip text.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__demo__/tip.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Spin, Card, Link } from '@arco-design/web-react';\n\nfunction App() {\n  return (\n    <Spin tip=\"This may take a while...\" loading>\n      <Card style={{ width: 360 }} title=\"Delay 500ms\" extra={<Link> More </Link>}>\n        ByteDance's core product, Toutiao (\"Headlines\"), is a content platform in China and around\n        the world. Toutiao started out as a news recommendation engine and gradually evolved into a\n        platform delivering content in various formats.\n      </Card>\n    </Spin>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Styling Custom ResizeBox Triggers with CSS\nDESCRIPTION: CSS styles for customizing the appearance of resize triggers. Defines styles for both vertical and horizontal trigger handles with custom borders, background colors, and layout.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/ResizeBox/__demo__/custom-triggers.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.resizebox-demo-custom-trigger {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--color-bg-2);\n}\n\n.resizebox-demo-custom-trigger::before,\n.resizebox-demo-custom-trigger::after {\n  content: '';\n  width: 6px;\n  height: 6px;\n  border: 1px solid rgb(var(--arcoblue-6));\n}\n\n.resizebox-demo-custom-trigger-line {\n  background-color: rgb(var(--arcoblue-6));\n  flex: 1;\n}\n\n.resizebox-demo-custom-trigger-vertical {\n  flex-direction: column;\n}\n\n.resizebox-demo-custom-trigger-vertical .resizebox-demo-custom-trigger-line {\n  width: 1px;\n  height: 100%;\n}\n\n.resizebox-demo-custom-trigger-horizontal .resizebox-demo-custom-trigger-line {\n  width: 100%;\n  height: 1px;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Components with Arco CLI\nDESCRIPTION: Demonstrates various filtering techniques for executing commands on specific components using Arco CLI\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.en-US.md#2025-04-14_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\n## Default filtering by component ID\narco start library\n\n## Glob filtering\narco start Button*\n\n## Advanced filtering techniques\narco start is:library/Button\narco start reg:Button$\narco start glob:library/*\n\n## Multiple filter rules\narco start reg:Button$,ButtonPro$\narco start is:library/Button,pro-table/Table\n```\n\n----------------------------------------\n\nTITLE: Dual-Language Configuration for ts-document\nDESCRIPTION: This snippet demonstrates how to configure `docgen.config.js` to generate dual-language documentation using the `ts-document` tool. It shows setting the `languages` array and configuring the `template` and `outputFileName` to include the language code.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/docgen.config.js\nmodule.exports = (config) => {\n  config.tsParseTool = ['ts-document'];\n  config.languages ​​= ['zh-CN','en-US'];\n\n  // Need to prepare TEMPLATE.zh-CN.md and TEMPLATE.en-US.md separately\n  config.template ='TEMPLATE.[language].md';\n  // You can also share the same template file in both Chinese and English (default value)\n  // config.template ='TEMPLATE.md';\n\n  // Will output two files README.zh-CN.md and README.en-US.md\n  config.outputFileName ='README.[language].md';\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Common Development Commands for Arco Design\nDESCRIPTION: A list of frequently used commands for developing Arco Design, including building, testing, generating documentation, and updating snapshots.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/CONTRIBUTING.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn dev\n$ yarn build\n$ yarn dev:site\n$ yarn demo\n$ yarn icon\n$ yarn test\n$ yarn test:client -- -u\n$ yarn docgen\n```\n\n----------------------------------------\n\nTITLE: Building Component with arco-scripts\nDESCRIPTION: This command initiates the build process for the component, generating ES, CommonJS, and UMD versions of the JavaScript files. It also bundles the styling files and builds the icons if an icon folder exists in the project.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narco-scripts build:component\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme for Team Site in JavaScript\nDESCRIPTION: Configuration for specifying a theme package for the team site in the local site project's main.js file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/main.js\n/**\n * @type {import('arco-material-doc-site').MainConfig}\n */\nmodule.exports = {\n  // ... Other settings...\n  site: {\n    // ... Other settings...\n    // 主题对应的 NPM 包名\n    arcoDesignLabTheme: '@arco-design/theme-volcengine-ui'\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript Interface Comments\nDESCRIPTION: Demonstrates how to write proper comments for TypeScript interfaces. Include descriptions, default values, and version information for better documentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad Case\ninterface ButtonProps {\n  size?: 'default' | 'mini' | 'large';\n}\n\n// ✅ Good Case\n/**\n * @title ButtonProps\n */\ninterface ButtonProps {\n  /**\n   * @zh 按钮尺寸\n   * @en Size of Button\n   * @defaultValue default\n   * @version 1.2.0\n   */\n  size?: 'default' | 'mini' | 'large';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Menu Item in Language Pack\nDESCRIPTION: This snippet demonstrates adding a new menu item to the Chinese language pack. A new key-value pair is added to the `export default` object, where the key corresponds to the `name` property in the routing configuration, and the value is the translated text for the menu item.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/routes-and-menu.en-US.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/local/zh-CN.ts\nexport default {\n  'menu.dashboard':'Dashboard',\n  'menu.dashboard.workplace':'Workbench',\n+ 'menu.dashboard.monitor':'Real-time monitoring',\n}\n```\n\n----------------------------------------\n\nTITLE: Example Generated Documentation\nDESCRIPTION: This snippet shows an example of the generated documentation for a TooltipButton component, including the Props table and the basic usage demo.  The Props table lists the parameter name, description, type, and default value for each property.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# TooltipButton\n\n## Properties/Props\n\n### `<TooltipButton>`\n\n| Parameter name | Description | Type | Default value |\n| ------ | :--------: | :---------: | -----: |\n| title | Tip of the button | `ReactNode` | `-` |\n\n## Demos\n\n~~~jsx\nimport React from'react';\nimport TooltipButton from'@arco-design/rc-xxx';\n\n/**\n * Basic usage\n */\nexport default () => {\n  return <TooltipButton title=\"tooltip title\">Demo Basic</TooltipButton>;\n};\n~~~\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Separator in VerificationCode Component\nDESCRIPTION: Creates a verification code input with custom separators using the separator prop. The separator function adds dashes between every three characters except after the 8th position, creating a grouped display pattern.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/seperator.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VerificationCode } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <VerificationCode style={{width: 400}} length={9}  separator={({ index, character }) => {\n    return ((index + 1) % 3 || index > 7 )? null : '-'\n  }}     />\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Individual Build Commands with arco-scripts\nDESCRIPTION: These commands offer more granular control over the build process. They allow building specific module formats (ES, CommonJS, UMD), styles, or icons separately using the corresponding arco-scripts command.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 构建对应的 ES 模块 - tsc\narco-scripts build:component:es\n\n# 构建 CommonJS 模块 - tsc\narco-scripts build:component:cjs\n\n# 构建 UMD 输出 - Webpack\narco-scripts build:component:dist\n\n# 样式构建 - gulp-less\narco-scripts build:component:css\n\n# 图标构建（如有）- Webpack\narco-scripts build:icon\n```\n\n----------------------------------------\n\nTITLE: Styling Dropdown Menu in Arco Design - CSS\nDESCRIPTION: This CSS snippet styles the dropdown demo, including the button padding and the rotation of the dropdown icon when it is visible. The styling ensures a consistent appearance for the dropdown components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Dropdown/__demo__/position.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dropdown-demo > .arco-btn {\n  padding: 0 8px;\n  font-weight: normal;\n}\n.dropdown-demo .arco-dropdown-popup-visible .arco-icon-down {\n  transform: rotate(180deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Preview Material Details Before Release - Bash\nDESCRIPTION: This command allows users to preview the material details page before the actual release. It ensures that all files are correctly prepared for public access, starting a file server from the current folder.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.publish.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\narco preview\n```\n\n----------------------------------------\n\nTITLE: Webpack - Less Variable Modification for Prefix\nDESCRIPTION: This diff snippet shows how to modify the 'prefix' variable in your Less configuration using webpack.  This changes the class name prefix for all Arco Design components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n\"// webpack.config.js\n\nmodule.exports = {\n  rules: [{\n    test: /\\.less$/,\n    use: [{\n      loader: 'style-loader',\n    }, {\n      loader: 'css-loader',\n    }, {\n      loader: 'less-loader',\n+     options: {\n+       modifyVars: {\n+         prefix: 'byte',\n+       },\n+       javascriptEnabled: true\n+     },\n    }],\n    ...\n  }],\n  ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Publishing NPM Package using Arco Scripts - Bash\nDESCRIPTION: This snippet showcases the command to publish an NPM package using the Arco scripts, which simplifies the package delivery process. The command prompts the user to select the version for publishing according to the Semver specification.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.publish.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narco publish\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Component with Block Nodes in React\nDESCRIPTION: This example demonstrates how to create a Tree component where each node occupies an entire row by setting the blockNode property. The tree has a hierarchical structure with a trunk, branches, and leaves, including a disabled branch.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Tree/__demo__/blocknode.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tree } from '@arco-design/web-react';\nconst TreeNode = Tree.Node;\n\nconst App = () => {\n  return (\n    <Tree blockNode>\n      <TreeNode title=\"Trunk 0-0\" key=\"0-0\">\n        <TreeNode title=\"Branch 0-0-0\" key=\"0-0-0\" disabled>\n          <TreeNode title=\"Leaf 0-0-0-0\" key=\"0-0-0-0\" />\n          <TreeNode title=\"Leaf 0-0-0-1\" key=\"0-0-0-1\" />\n        </TreeNode>\n        <TreeNode title=\"Branch 0-0-1\" key=\"0-0-1\">\n          <TreeNode title=\"Leaf 0-0-1-0\" key=\"0-0-1-0\" />\n        </TreeNode>\n      </TreeNode>\n    </Tree>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Demo Index File for React Component\nDESCRIPTION: Demonstrates the structure of the index.js file for a React component demo, which includes JSDoc comments for material and demo descriptions. It exports the default demo.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n\"// index.js\n// Summarize all demos by index.js, and add descriptions of materials and demos in the form of JSDoc\n\n/**\n * @file\n * @title ComponentOne\n * @memberOf component type, for example: data input\n * @description Describe your component.\n * @author Material author\n */\n\n/**\n * @title basic usage\n * @description describe your example\n */\nexport {default as Basic} from'./basic';\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Querying of Materials with POST Request in TypeScript\nDESCRIPTION: This snippet shows how to perform a conditional query for materials using a POST request to the Material Market API. It returns an array of results based on the specified conditions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPOST https://arco.design/material/api/material\n\nReturn {result: Array}\n```\n\n----------------------------------------\n\nTITLE: Selecting Technology Stack in Arco Design Pro Setup\nDESCRIPTION: This snippet shows the interactive command prompt that allows the selection of the technology stack to be used when creating a new project. In this example, React is selected.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Please select the technology stack you wish to use\n❯ React\n  Vue\n```\n\n----------------------------------------\n\nTITLE: Configuring ArcoWebpackPlugin in arco.env.config.js\nDESCRIPTION: This code snippet demonstrates how to configure the ArcoWebpackPlugin within the `arco.env.config.js` file. This plugin is used for on-demand loading of Arco component styles and application of themes. It shows how to specify the theme and the directory where the plugin takes effect.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// arco.env.config.js\n\nmodule.exports = function defineConfig() {\nconst commonWebpackConfig = {\nplugins: [\nnew ArcoWebpackPlugin({\ntheme: '@arco-design/theme-line',\nwebpackImplementation: config.webpack,\n// The directory where the plugin takes effect, the default value is src\n// If your component source directory is not src, you need to set this field\ninclude: 'packages',\n}),\n],\n};\n\nreturn {\nwebpack: {\ndevServerConfig: [\n(config) => {\nreturn config.merge(commonWebpackConfig);\n},\n],\npreviewConfig: [\n(config) => {\nreturn config.merge(commonWebpackConfig);\n},\n],\n}\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select with Default Popup Visibility in React\nDESCRIPTION: New defaultPopupVisible prop added to control whether the dropdown is open by default.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select defaultPopupVisible={true}>\n  {/* Options */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Popup Styling with Arco Design - CSS\nDESCRIPTION: This CSS snippet styles the popup component for consistent appearance in Arco Design applications. It includes properties for padding, width, text alignment, background color, and box shadow. These ensure the popup is visually appealing and aligns with the overall design aesthetic.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Trigger/__demo__/popupAlign.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.demo-trigger-popup {\n  padding: 10px;\n  width: 300px;\n  text-align: center;\n  background-color: var(--color-bg-popup);\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.15);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Comments for ts-document\nDESCRIPTION: This TypeScript code demonstrates how to write comments for documentation generation using `ts-document`.  It uses TSDoc-style comments with tags like `@zh`, `@en`, `@defaultValue`, and `@version` to provide detailed information about each property.  The `@title` tag is mandatory for the interface or type to be extracted.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @title Button (必填，带有 `title` 描述的接口或者类型才会被收集)\n */\ninterface ButtonProps {\n  /**\n   * @zh 按钮尺寸 (属性的中文描述)\n   * @en Size of Button (可选，属性的英文描述)\n   * @version 1.2.0 (可选，新增的属性在哪个版本开始支持)\n   * @defaultValue 'default' (可选，属性的默认值)\n   */\n  size?: 'mini' | 'small' | 'default' | 'large';\n\n  /**\n   * @zh 按钮状态\n   * @en Status of Button\n   */\n  status?: 'danger' | 'error' | 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Form Inside Modal Implementation Example\nDESCRIPTION: Demonstrates an implementation pattern for using a Form inside a Modal component, showing why methods might not be callable and the recommended solution using mountOnEnter=false.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\nconst [form] = Form.useForm();\nuseEffect(() => {\n  form.setFieldsValue({})\n}, [])\nreturn <div>\n  <Modal visible={visible}>\n    <Form form={form}>\n      {/** ... */}\n    </Form>\n  </Modal>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Choosing Output Architecture Template in Project Setup\nDESCRIPTION: This snippet depicts the selection of an output architecture template for the Arco Design Pro project, specifically using Create React App.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n? Please select the development framework you want to use (Use arrow keys)\n  Next (https://nextjs.org/)\n  Vite (https://vitejs.dev/)\n❯ Create React App (https://create-react-app.dev)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Client and Node Environments\nDESCRIPTION: Setting up Jest configuration for both client and node environments, including module name mapping for package resolution\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports.node = (config) => {\n  config.moduleNameMapper = {\n    '^@arco-design/hello-arco/(.+)$':'<rootDir>/$1',\n    '^@arco-design/hello-arco$':'<rootDir>',\n  };\n};\n\nexports.client = (config) => {\n  config.moduleNameMapper = {\n    '^@arco-design/hello-arco/(.+)$':'<rootDir>/$1',\n    '^@arco-design/hello-arco$':'<rootDir>',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Arco CLI to Latest Version in Bash\nDESCRIPTION: Command to update the Arco CLI to the latest version after installation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install arco-cli@latest -g\n```\n\n----------------------------------------\n\nTITLE: Installing Arco CLI Tools\nDESCRIPTION: Commands to install the arco-cli and arco-scripts packages globally using npm.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install arco-cli -g\n\nnpm install arco-scripts -g\n```\n\n----------------------------------------\n\nTITLE: Styling Dark Theme Navigation with Arco Design - CSS\nDESCRIPTION: This CSS snippet provides the styling necessary for a dark-themed navigation menu in a React application using the Arco Design library. It includes styles for the menu container to ensure full-width, padding, and background color adjustments. Additionally, it handles menu item overflow for better presentation. Key parameters involve utilizing CSS variables for consistent theming.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Menu/__demo__/dark-horizontal.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.menu-demo {\n  box-sizing: border-box;\n  width: 100%;\n  padding: 40px;\n  background-color: var(--color-neutral-2);\n}\n\n.menu-demo .arco-menu-inner {\n  overflow-y: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Teams in Material Platform API (GET)\nDESCRIPTION: This endpoint retrieves information about all teams in the Material Platform. It returns an array of team data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://arco.design/material/api/group\n\nReturn { result: Array }\n```\n\n----------------------------------------\n\nTITLE: Component Definition - Collapse\nDESCRIPTION: Markdown definition of the Collapse component, categorized under Component/Data Display section. Describes the basic purpose of the component for displaying collapsible content areas.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Collapse/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Display\n\n# Collapse\n\nThe content area that can be collapsed/expanded.\n```\n\n----------------------------------------\n\nTITLE: Material Documentation Template\nDESCRIPTION: This markdown template defines the structure for generating component documentation. It includes placeholders for props and demos which will be populated by arco-scripts. The `file` property specifies the entry point for documentation generation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nfile: index\n---\n\n# TooltipButton\n\n## 属性/Props\n\n%%Props%%\n\n## Demos\n\n%%Demos%%\n```\n\n----------------------------------------\n\nTITLE: Declaring Initialization Options for VChart Arco Theme\nDESCRIPTION: This snippet presents the TypeScript interface for the parameters that can be passed to the `initVChartArcoTheme` method. It defines options like mode, automatic theme switching, prefix for CSS variables, and optional theme manager.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninterface IInitVChartArcoThemeOption {\n  /** Initial light/dark mode */\n  defaultMode?: 'light' | 'dark';\n  /** Whether to listen for the light/dark mode switching and automatically change the chart theme. The default setting is true */\n  isWatchingMode?: boolean;\n  /** Arco CSS variable prefix, for example: the original variable name is --color-data-1, configured as \"arco\" and then changed to --arco-color-data-1 */\n  prefix?: string;\n  /** Specify a ThemeManager, usually not specified. If multiple versions of vchart coexist, it needs to be specified */\n  themeManager?: typeof ThemeManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing all materials to material platform\nDESCRIPTION: This bash command synchronizes all materials within the current workspace to the material platform. It uses the `arco sync` command, which requires user authentication via `arco login` or by providing an access token through the `ARCO_CONFIG_X_ARCO_ACCESS_TOKEN` environment variable.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n## 同步工作区的所有物料至物料平台\n$ arco sync\n```\n\n----------------------------------------\n\nTITLE: Styling Action Buttons for Text Ellipsis - CSS\nDESCRIPTION: This CSS snippet provides the styles for the action buttons used in the expandable text ellipsis component. It specifies the margin, color, and cursor style for normal and hover states of the buttons, enhancing the user experience by providing visual feedback.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Typography/__demo__/ellipsis-action.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.action-btn {\n    margin: 0 8px;\n    color: rgb(var(--primary-6));\n    cursor: pointer;\n}\n\n.action-btn:hover {\n    color: rgb(var(--primary-5));\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Trigger Element in Select Component\nDESCRIPTION: The Select component's triggerElement property now allows passing in a function to customize the component trigger node.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelect.triggerElement = (props) => <CustomTrigger {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Arco CLI Version in Bash\nDESCRIPTION: Commands to uninstall the old CLI package and install the latest version. The CLI package name has changed from '@arco-design/arco-cli' to 'arco-cli'.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 卸载旧版本 CLI\nnpm uninstall @arco-design/arco-cli -g\n\n# 安装最新版 CLI\nnpm install arco-cli -g\n```\n\n----------------------------------------\n\nTITLE: Display Name Updates - Component Naming\nDESCRIPTION: Updates to component displayName properties for better semantic clarity\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/version_v2.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nInput.Group -> InputGroup\nForm.Item -> FormItem\nMenu.Item -> MenuItem\nTimeline.Item -> TimelineItem\nTree.Node -> TreeNode\n```\n\n----------------------------------------\n\nTITLE: Creating Notification with Custom Style - React\nDESCRIPTION: This code snippet demonstrates the creation of a button that, when clicked, opens a notification with customized styles including a specific width. It utilizes components from the Arco Design library, specifically Button and Notification, to enhance user interactions within a React application.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Notification/__demo__/style.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Notification, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <Button\n      onClick={() =>\n        Notification.info({\n          style: { width: 500 },\n          title: 'Notification',\n          content:\n            'This is a notification! This is a notification! This is a notification! This is a notification! ',\n        })\n      }\n      type=\"primary\"\n    >\n      Open Notification\n    </Button>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Building Arco Design Components with arco-scripts\nDESCRIPTION: Commands for building Arco Design components using arco-scripts, including ES modules, CommonJS, UMD, CSS, and icons.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narco-scripts build:component\n\n# Build the corresponding ES module-tsc\narco-scripts build:component:es\n\n# Build CommonJS module-tsc\narco-scripts build:component:cjs\n\n# Build UMD output-Webpack\narco-scripts build:component:dist\n\n# Style construction-gulp-less\narco-scripts build:component:css\n\n# Icon build (if any)-Webpack\narco-scripts build:icon\n```\n\n----------------------------------------\n\nTITLE: Specify Material Version - Instructions\nDESCRIPTION: This section describes how to specify the version of the material used by the material platform. It covers two methods for writing the version: using 'latest' for automatic updates and a specific version number that requires manual synchronization.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.publish.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- `latest`: Incoming dist-tags, using this method can avoid the need to manually synchronize material information after each release. Use `npm view` to view the currently available dist-tags;\n- `1.0.0`: Pass in the specific version number. After each NPM release, you need to manually execute `arco sync` to update the version number.\n```\n\n----------------------------------------\n\nTITLE: Converting Demo Documentation to MDX Format\nDESCRIPTION: Example of converting a demo documentation entry from JavaScript format to MDX format for Material Market 2.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @file\n* @name AnimateWall\n* @memberOf Information display\n* @description Alternate fading animation wall, based on [gsap](https://github.com/greensock/GSAP) package\n* @author yuhan0709\n* @package @arco-materials/animate-wall\n*/\n\n/**\n* @name Basic usage\n* @description [`Arco official website`](https://arco.design/) example, alternate fading of icons.\n*/\nexport { default as Basic } from './basic';\n\n/**\n* @name Custom element\n* @description Alternate fading of custom elements.\n*/\nexport { default as Custom } from './custom';\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: AnimateWall\ndescription: Alternating and fading animation wall, based on [gsap](https://github.com/greensock/GSAP) package\nlabels: ['Information display']\n---\n\n## Basic usage\n\n[`Arco official website`](https://arco.design/) example, icons are alternately displayed.\n\nimport Basic from './basic';\n\n<div data-arco-demo=\"Basic\">\n<Basic />\n</div>\n\n## Custom elements\n\nimport Custom from './custom';\n\n<div data-arco-demo=\"Custom\">\n<Custom/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting the Workspace Preview\nDESCRIPTION: This bash commands navigates to created workspace and starts the development server to preview materials.  The `npm start` command triggers the workspace's development environment, typically using tools like Webpack to bundle and serve the components.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/quick-start.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd arco-cli-next-demo\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Less Variable Configuration\nDESCRIPTION: Example of configuring Less variable to customize CSS variable prefix in version 2.28.0\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/changelog.common.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@arco-vars-prefix: my-prefix;\n```\n\n----------------------------------------\n\nTITLE: Styling VerificationCode Form Container\nDESCRIPTION: CSS styles for the verification code form wrapper. Implements a flex container with shadow and rounded corners for better visual presentation.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__demo__/with-form.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.demo-verify-code-wrapper {\n  display: flex;\n  flex-direction: column;\n  width: 364px;\n  padding: 16px 24px;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n  border-radius: 4px 4px 0px 0px;\n  box-shadow: 0px 8px 20px 0px rgba(0, 0, 0, 0.10);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Icons from Iconfont.cn\nDESCRIPTION: Method to load icons from iconfont.cn using Icon.addFromIconFontCn method\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/icon/md/footer.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst IconFont = Icon.addFromIconFontCn({ src: 'url' });\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure Example\nDESCRIPTION: This code snippet demonstrates an example directory structure for a component within the Arco design system. It showcases the organization of source code, documentation, tests, and style files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/env.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n\"├── src\n│ ├── __docs__ ## Component document directory\n│ │ ├── index.mdx ## Component help document\n│ │ └── basicUsage.tsx ## Single component Demo is placed in a single file\n│ │\n│ ├── __test__ ## Component unit test directory\n│ │ └── index.test.tsx\n│ │\n│ ├── UserSelect.tsx ## Component source code\n│ ├── index.ts ## Component main entry\n│ ├── interface.ts ## Component type definition entry\n│ │\n│ └── style ## Component style entry\n│ ├── index.scss\n│ └── index.ts\"\n```\n\n----------------------------------------\n\nTITLE: Triggers and Selection Issues in Multi-Select Mode - TypeScript\nDESCRIPTION: This snippet addresses several bugs within the multi-select mode of the Select component, including ensuring the onVisibleChange callback triggers correctly and input text can be selected using the mouse.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the `onVisibleChange` callback is not triggered when the `Select` component clicks the option to hide the drop-down box.\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix the bug that the input text cannot be selected with the mouse in the multi-select mode of the `Select` component.\n```\n\n----------------------------------------\n\nTITLE: Importing Vendor Dependency\nDESCRIPTION: This code shows how to import a dependency from the `arcoDemoVendor.js` file within a demo component. This approach allows the demo to utilize dependencies beyond the default set provided by the material platform's runtime environment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// basic.jsx\n\nimport Component from '@arco-design/my-material';\nimport { myDependency } from './arcoDemoVendor';\n\nexport default () => {\n  return <Component option={myDependency} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Lodash Methods in JavaScript\nDESCRIPTION: Update lodash method imports from lodash.x to lodash/x for better tree-shaking.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/changelog.common.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport get from 'lodash/get';\n```\n\n----------------------------------------\n\nTITLE: Debugging Local Arco Material Template\nDESCRIPTION: This command demonstrates how to use the Arco CLI to initialize a project using a local template for debugging purposes. It specifies the template location using the 'file:' protocol.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.template-develop.zh-CN.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 使用 template 参数指定本地路径作为模板\narco init hello-arco --template file:../path/to/your/template\n```\n\n----------------------------------------\n\nTITLE: Declaring useVerificationCode Hook Header\nDESCRIPTION: Markdown declaration of the useVerificationCode hook documentation section with component name and title\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/__template__/index.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHooks / useVerificationCode\n\n# useVerificationCode\n\nuseVerificationCode\n```\n\n----------------------------------------\n\nTITLE: Statistic Component Feature Evolution\nDESCRIPTION: Tracks key changes in Statistic component functionality, including prefix/suffix rendering, decimal styling, custom rendering, and loading states\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Statistic/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Key features added to Statistic component\n// - Custom rendering support\n// - Decimal style configuration\n// - Loading state\n// - Value type flexibility (string, number, date)\n```\n\n----------------------------------------\n\nTITLE: Generated Material Documentation Example in Markdown\nDESCRIPTION: Example of a generated component documentation, showing the component name, props table, and a basic usage demo.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# TooltipButton\n\n## Properties/Props\n\n### `<TooltipButton>`\n\n| Parameter name | Description | Type | Default value |\n| ------ | :--------: | :---------: | -----: |\n| title | Tip of the button | `ReactNode` | `-` |\n\n## Demos\n\n~~~jsx\nimport React from'react';\nimport TooltipButton from'@arco-design/rc-xxx';\n\n/**\n * Basic usage\n */\nexport default () => {\n  return <TooltipButton title=\"tooltip title\">Demo Basic</TooltipButton>;\n};\n~~~\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Event Handlers in React Table\nDESCRIPTION: This React code snippet demonstrates how to implement row, header row, and cell event handlers for a table component. Developers can customize interactions such as clicks or mouse events easily within the table structure.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/README.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Table\n  onRow={(record, index) => {\n    return {\n      onClick: (event) => {}, // Click on the body row\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n  onHeaderRow={(column, index) => {\n    return {\n      onClick: (event) => {}, // Click on the head row\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {},\n      onMouseLeave: (event) => {},\n    };\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Arco Pro Project Directory Structure in Bash\nDESCRIPTION: This code snippet shows the directory structure of an Arco Pro project based on create-react-app architecture. It outlines the main directories and files, including the src folder structure with components, assets, and configuration files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/directory.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── README.md\n├── config-overrides.js\n├── package-lock.json\n├── package.json\n├── public\n│   └── index.html                  # cra打包模版文件\n├── react-app-env.d.ts\n├── src\n│   ├── assets                      # 静态资源\n│   ├── components                  # 通用业务组件\n│   ├── context.tsx                 # 全局配置\n│   ├── declaration.d.ts\n│   ├── index.tsx                   # 入口文件\n│   ├── layout.tsx                  # 布局\n│   ├── locale                      # 国际化语言包\n│   ├── mock                        # 公共组件模拟数据\n│   ├── pages                       # 页面模版\n│   ├── react-app-env.d.ts\n│   ├── routes.ts                   # 路由配置\n│   ├── settings.json               # 配置文件\n│   ├── store                       # redux状态管理\n│   ├── style                       # 全局样式\n│   └── utils                       # 工具库\n├── tsconfig-base.json\n├── tsconfig.json\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Optimizing Style for Disabled State in Multi-Select - TypeScript\nDESCRIPTION: This snippet optimizes the styling of the Select component in multi-select mode when disabled, ensuring a better visual experience for users.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__changelog__/index.en-US.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Optimize the style of `Select` multi-select mode in `disabled` state.\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component Structure in Markdown\nDESCRIPTION: Basic markdown structure defining the Button component documentation including its category and purpose.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Button/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / General\n\n# Button\n\nA button is a command component to trigger an operation.\n```\n\n----------------------------------------\n\nTITLE: Styling for Image Lazy Loading Demo\nDESCRIPTION: This CSS code provides styling for the image lazy loading demo. It sets the padding, width, height, and background color of the wrapper element, and configures overflow and alignment properties to improve the demo layout and appearance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Image/__demo__/lazyload.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.image-demo-wrapper {\n  padding: 100px 20px;\n  width: 100%;\n  height: 300px;\n  box-sizing: border-box;\n  background-color: var(--color-fill-1);\n  overflow: auto;\n  align-items: center;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Configuration with arco-scripts\nDESCRIPTION: Using arco-scripts CLI command to show current configuration for various build and development tools\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/init.config.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ arco-scripts show:config --help\n\nUsage: arco-scripts show:config <configType>\n\nShow your current config for arco-scripts. Valid type: babel|style|webpack.component|webpack.site|webpack.icon|jest|docgen\n\n$ npm run show:config - style\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component: Wrapping custom components with div\nDESCRIPTION: This code demonstrates the solution when Tooltip doesn't work when wrapping a custom component. Wrapping a div element around the custom component allows the Tooltip component to correctly apply its functionality. This approach ensures that the Tooltip can properly bind and trigger its pop-up behavior.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/question.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<Tooltip>\n  <div>\n    <MyComponent />\n  </div>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook and 1.0 Configuration Files\nDESCRIPTION: Instructions for removing Storybook-related files and 1.0 configuration files that are no longer needed in Material Market 2.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFiles to remove:\n- Storybook configuration and Stories files\n- arco-cli and arco-scripts configuration files in root directory\n- arco-scripts configuration files in material NPM package\n- Component API template files in component directory\n- arcoMeta.json metadata description file\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalized Popconfirm with Custom Button Text\nDESCRIPTION: Demonstrates setting up a Popconfirm component with custom confirmation text, cancel text, and message notifications using Arco Design components. Includes focus lock functionality and handles both confirmation and cancellation events.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Popconfirm/__demo__/text.md#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Popconfirm, Message, Button } from '@arco-design/web-react';\n\nconst App = () => {\n  return (\n    <div>\n      <Popconfirm\n        focusLock\n        title=\"Do you want to discard the draft?\"\n        okText=\"Discard\"\n        cancelText=\"Cancel\"\n        onOk={() => {\n          Message.info({\n            content: 'ok',\n          });\n        }}\n        onCancel={() => {\n          Message.error({\n            content: 'cancel',\n          });\n        }}\n      >\n        <Button>Discard</Button>\n      </Popconfirm>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: WatermarkOptions Type Definition\nDESCRIPTION: TypeScript interface defining the configuration options for the useWatermark hook. Includes properties for controlling watermark appearance, positioning, and container placement.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useWatermark/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WatermarkOptions {\n  rotate?: number; // defaults to -20\n  image?: string;\n  zIndex?: CSSProperties['zIndex'];\n  content?: string | string[];\n  fontStyle?: {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: number | string;\n    fontWeight?: number | string;\n  }; // defaults to {color: 'rgba(0, 0, 0, 0.12)', fontFamily: 'sans-serif', fontSize: '14px', fontWeight: 'normal'}\n  gap?: [number, number]; // defaults to [100, 100]\n  height?: number | string;\n  offset?: [number, number]; // defaults to [gaps[0]/2, gaps[1]/2]\n  width?: number | string;\n  getContainer?: () => HTMLElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Cascader Trigger Element\nDESCRIPTION: CSS styles for the custom trigger element of the Cascader component, including padding, cursor styling, and focus state appearance.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/__demo__/custom_children.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.trigger-element {\n  padding: 0 12px;\n  cursor: pointer;\n}\n\n\n.trigger-element:focus-visible {\n  box-shadow: 0 0 0 2px var(--color-primary-light-3)\n}\n```\n\n----------------------------------------\n\nTITLE: Card.Meta Component API Interface\nDESCRIPTION: Type definitions for the Card.Meta subcomponent properties used for structured content display within cards.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CardMetaProps {\n  avatar?: ReactNode;\n  description?: string | ReactNode;\n  title?: string | ReactNode;\n  className?: string | string[];\n  style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Tool for Component Migration\nDESCRIPTION: Bash command to run the migration tool for automatically migrating a component from Material Market 1.x to 2.0.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @arco-cli/migration-helper migrate --include=\"packages/arco-site-anchor/src\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Arco CLI and Dependencies\nDESCRIPTION: Commands to uninstall the old CLI package, install the latest version, and update dependencies for Arco Design material projects.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.qa.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstall old version CLI\nnpm uninstall @arco-design/arco-cli -g\n\n# Install the latest version of the CLI\nnpm install arco-cli -g\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install arco-cli@latest -g\n```\n\n----------------------------------------\n\nTITLE: Styling List Item Layout with CSS\nDESCRIPTION: This CSS code provides styling for the layout of list items, specifically targeting the `.list-demo-action-layout` and its child elements. It defines dimensions for the image area to maintain aesthetic consistency and prevents overflow with a hidden setting, alongside styling margin for icons within actions. The CSS is crucial for the visual presentation of the Arco Design list, ensuring correct sizes and placement.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/List/__demo__/action-layout.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.list-demo-action-layout .image-area {\n  width: 183px;\n  height: 119px;\n  border-radius: 2px;\n  overflow: hidden;\n}\n\n.list-demo-action-layout .image-area img {\n  width: 100%;\n}\n\n.list-demo-action-layout .arco-list-item-action .arco-icon {\n  margin: 0 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding CSS Modules in React Components\nDESCRIPTION: Shows why CSS Modules should be avoided in React components to ensure external styles can be overridden by class names.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport style from './style/index.module.less';\n\nfunction Button() {\n  return <button className={style.padding} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox.useCheckbox Hook in JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of the Checkbox.useCheckbox hook. It takes an array of values and an optional array of default selected values, and returns an object with various methods for managing checkbox state.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** T = string | number */\nconst result: ResultType = Checkbox.useCheckbox<T>(values: T[], defaultSelected?: T[]);\n```\n\n----------------------------------------\n\nTITLE: Card.Grid Component API Interface\nDESCRIPTION: Type definitions for the Card.Grid subcomponent properties used for creating grid layouts within cards.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Card/README.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CardGridProps {\n  hoverable?: boolean;\n  className?: string | string[];\n  style?: CSSProperties;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useWatermark Hook in Markdown\nDESCRIPTION: This code snippet defines the useWatermark hook in a markdown format. It provides a title and brief description of the hook's purpose.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useWatermark/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\nHooks / useWatermark\n\n# useWatermark\n\nuseWatermark hook\n\n`````\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Alias for Component Preview\nDESCRIPTION: JavaScript function to automatically generate Webpack alias configuration for all components in the workspace.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/2.x/migration.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs-extra');\nconst path = require('path');\nconst glob = require('glob');\n\nfunction tryCollectPackageWebpackAlias() {\nconst packages = glob.sync(path.resolve(__dirname, 'packages/*'));\nconst aliasRules = {};\nfor (const packageDir of packages) {\ntry { const packageJson = fs.readJsonSync(path.resolve(packageDir, 'package.json'));\nconst [packageSourceDir] = glob.sync(path.resolve(packageDir, '{src,components}'));\nif (packageSourceDir) {\naliasRules[`${packageJson.name}$`] = packageSourceDir;\n}\n} catch (err) {\nconsole.error(`arco.env.js [tryCollectPackageWebpackAlias]:\\n${err.toString()}`);\n}\n}\nreturn aliasRules;\n}\n```\n\n----------------------------------------\n\nTITLE: Site Product File Structure\nDESCRIPTION: Illustrates the file structure of the site project's product, including CSS and JavaScript files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n\"./dist\n├── arcoSite.css\n├── arcoSite.zh-CN.js\n└── index.html\"\n```\n\n----------------------------------------\n\nTITLE: Creating the Sticky Wrapper Component - JavaScript\nDESCRIPTION: This snippet defines the 'Wrapper' component that is responsible for rendering sticky behavior. It uses the 'Sticky' component to dynamically adjust its style based on whether it is currently sticky or not.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Table/__demo__/header-sticky.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Wrapper(props) {\n  return (\n    <Sticky topOffset={-60}>\n      {({ style, isSticky }) => (\n        <div\n          style={{\n            ...style,\n            top: isSticky ? 60 : 0,\n            zIndex: 3,\n            overflow: 'auto',\n          }}\n        >\n          {props.children}\n        </div>\n      )}\n    </Sticky>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance via Ref\nDESCRIPTION: Demonstrates how to access the Form instance using a ref in React. This allows direct manipulation of the form, such as validation and setting field values.  The ref is assigned to the form element and can be used to call form methods.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/__template__/index.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n<Form ref={(ref) => (this.form = ref)}>\n  <FormItem>...</FormItem>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Affix Component API in Markdown\nDESCRIPTION: This snippet defines the API for the Affix component, including parameters, types, default values, and descriptions. It covers properties such as offsetBottom, offsetTop, affixClassName, affixStyle, className, style, onChange, target, and targetContainer.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Affix/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|参数名|描述|类型|默认值|版本|\n|---|---|---|---|---|\n|offsetBottom|距离窗口底部达到指定偏移量后触发|number |`-`|-|\n|offsetTop|距离窗口顶部达到指定偏移量后触发|number |`0`|-|\n|affixClassName|给 `fixed` 的元素设置 className。|string \\| string[] |`-`|2.8.0|\n|affixStyle|给 `fixed` 的元素设置 style，注意不要设置 `position` `top` `width` `height`， 因为这几个属性是在元素 fixed 时候用于定位的。|CSSProperties |`-`|2.8.0|\n|className|节点类名|string \\| string[] |`-`|-|\n|style|节点样式|CSSProperties |`-`|-|\n|onChange|固定状态发生改变时触发|(affixed: boolean) => void |`-`|-|\n|target|滚动容器|() => HTMLElement \\| null \\| Window |`() => window`|-|\n|targetContainer|`target` 的外层滚动元素。`Affix` 将会监听该元素的滚动事件，并实时更新固钉的位置。主要是为了解决 `target` 属性指定为非 `window` 元素时，如果外层元素滚动，可能会导致固钉跑出容器问题。|() => HTMLElement \\| null \\| Window |`-`|-|\n```\n\n----------------------------------------\n\nTITLE: Defining IndexedObject Type in TypeScript\nDESCRIPTION: The IndexedObject type is a generic type definition that allows for dynamic keys with any associated values, facilitating the creation of objects where the structure is not strictly defined ahead of time.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Form/README.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IndexedObject = {\n  [key: string]: any;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptions Type Interface\nDESCRIPTION: TypeScript type definition for upload request options including headers, callbacks, and file data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport type RequestOptions = Pick<\n  UploadProps,\n  \"headers\" | \"name\" | \"data\" | \"withCredentials\" | \"action\" | \"method\"\n> & {\n  /** 更新当前文件的上传进度 。percent: 当前上传进度百分比 */\n  onProgress: (percent: number, event?: ProgressEvent) => void;\n  /** 上传成功后，调用onSuccess方法，传入的response参数将会附加到当前上传文件的reponse字段上 */\n  onSuccess: (response?: object) => void;\n  /** 上传失败后，调用onError方法，传入的 response 参数将会附加到当前上传文件的response字段 */\n  onError: (response?: object) => void;\n  /** 当前上传文件 */\n  file: File;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Radio Component Description\nDESCRIPTION: Markdown documentation defining the Radio component's purpose and category within the component library.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Radio/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Entry\n\n# Radio\n\nIn a set of related and mutually exclusive data, the user can only select one option.\n```\n\n----------------------------------------\n\nTITLE: Defining FlexType for Flexible Grid Layouts\nDESCRIPTION: Type definition for flexible grid item flex properties supporting various value types\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Grid/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FlexType = string | number | \"auto\" | \"none\";\n```\n\n----------------------------------------\n\nTITLE: Defining CustomDotRecord Type\nDESCRIPTION: This code snippet defines the TypeScript type CustomDotRecord. It specifies the structure for customizing the dots in the Steps component, including properties for index, status, title, and description, all related to React nodes or strings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Steps/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nexport type CustomDotRecord = {\n  index: number;\n  status: string;\n  title: ReactNode;\n  description: ReactNode;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Component Structure in Markdown\nDESCRIPTION: Markdown structure defining the Rate component section in the documentation, categorizing it under Component/Data Entry and providing a basic description of its purpose.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Rate/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Entry\n\n# Rate\n\nRate is used for scoring.\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Demo for Arco Design Component\nDESCRIPTION: Example of a basic demo file for an Arco Design component, demonstrating how to import and use the component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// /src/demo/basic.jsx\nimport React from 'react';\nimport TooltipButton from '@arco-design/rc-hello-arco';\n\nexport default () => {\n  return <TooltipButton title=\"tooltip title\">Demo Basic</TooltipButton>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SkeletonTextProps Interface in JavaScript\nDESCRIPTION: This code snippet defines the interface for SkeletonTextProps, which specifies the properties for text placeholders in the Skeleton component. It includes options for style, className, number of rows, width of text lines, and prefixCls.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Skeleton/README.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface SkeletonTextProps {\n  style?: CSSProperties;\n  className?: string;\n  /** 文本行数 */\n  rows?: number;\n  /** 文本行宽度 */\n  width?: number | string | (string | number)[];\n  prefixCls?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VChart Packages with yarn\nDESCRIPTION: This snippet demonstrates the commands to install VChart and the corresponding Arco theme using yarn. Ensure that yarn is installed on your machine before executing these commands.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/src/pages/vchart/md/doc.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @visactor/react-vchart\n$ yarn add @visactor/vchart-arco-theme\n```\n\n----------------------------------------\n\nTITLE: React Component Demo\nDESCRIPTION: Shows the structure of a React component demo with import statements and a default export function that returns the component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n\"// basic.jsx\n// Each Demo corresponds to a JSX file\nimport React from'react';\n\nimport {ComponentOne} from'@arco-design/rc-xxx';\n\nexport default () => {\n  return <ComponentOne />;\n};\"\n```\n\n----------------------------------------\n\nTITLE: Spin Component Centering and Layout Fixes\nDESCRIPTION: Addressed styling issues with centering and layout for the Spin component, particularly for very small heights and dot type displays\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Spin/__changelog__/index.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 修复 `Spin` 组件在高度极小的情况下会撑开不居中的样式。\n- 修复 `Spin` 组件 `dot` 类型没有水平居中的样式。\n```\n\n----------------------------------------\n\nTITLE: Defining ShortcutType Interface in TypeScript\nDESCRIPTION: Defines the structure for shortcut options in the DatePicker component, including text and value properties.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/DatePicker/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ShortcutType = {\n  text: ReactNode;\n  value: () => Dayjs | Dayjs[];\n} & Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Type Inheritance in TypeScript for Material Components\nDESCRIPTION: Shows how to properly inherit types from base components when creating materials, avoiding redeclaration and ensuring consistency.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.spec.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad Case\ninterface SelectWithCheckAllProps {\n  size?: 'default' | 'mini' | 'large';\n}\n\n// ✅ Good Case\nimport { SelectProps } from '@arco-design/web-react';\n\ninterface SelectWithCheckAllProps extends Omit<SelectProps, 'onChange'> {\n  /**\n   * Callback when @zh value changes\n   */\n  onChange?: (value) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualListProps Interface for Select Component in TypeScript\nDESCRIPTION: This code snippet defines the VirtualListProps interface for the Select component's virtual list functionality. It includes properties for height, threshold, and static item height.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Description|Type|Default|\n|---|:---:|:---:|---:|\n|height|Viewable area height (`2.11.0` starts to support `string` type such as `80%`)|`number`| 200 |\n|threshold|The threshold of the number of elements that automatically enable virtual scrolling, pass in `null` to disable virtual scrolling.|`number` \\| `null`| 100 |\n|isStaticItemHeight|Whether it is a static element of the same height|`boolean`|true|\n```\n\n----------------------------------------\n\nTITLE: Styling Verification Code Input Fields\nDESCRIPTION: Provides custom CSS styling for the verification code input fields, including border styling, dimensions, and focus states.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/__demo__/basic.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.custom-code-input {\n  border: none;\n  width: 32px;\n  height: 32px;\n  display: block;\n  border-bottom: 2px solid var(--color-border-3);\n  text-align: center;\n}\n\n.custom-code-input:focus {\n  border-bottom-color: rgb(var(--primary-6));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Arco Design Pro Project\nDESCRIPTION: This snippet describes how to start the development server for the Arco Design Pro project, allowing users to view the application in a local environment.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/pro/start.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-arco-pro\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Material Information Data Structure in TypeScript\nDESCRIPTION: This TypeScript code defines the data structure for material information returned by the API. It includes details about the material, its package, download statistics, and associated users.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BaseUser = {\n  email: string;\n  // 中文用户名\n  name: string;\n  // 英文用户名\n  enName: string;\n  // 邮箱前缀的部分\n  username: string;\n  avatarUrl: string;\n};\n\ntype DownloadStatistics = {\n  all: number;\n  today: number;\n  thisWeek: number;\n  thisMonth: number;\n  lastDay: number;\n  lastWeek: number;\n  lastMonth: number;\n};\n\ntype MaterialInfo = {\n  name: string;\n  title: string;\n  description: string;\n  type: string;\n  category: string[];\n  group: number;\n  homepage: string;\n  repository: string;\n  author: string;\n  logo: string;\n  screenshot: string;\n  publishTime: number;\n  updateTime: number;\n  // 物料平台所需的 NPM 信息\n  package: {\n    type: string;\n    name: string;\n    version: string;\n    registry: string;\n    peerDependencies: string[];\n  };\n  // 从 NPM 获取的完整的包信息\n  packageInfo: Object;\n  members: BaseUser[];\n  createdAt: string;\n  updatedAt: string;\n  downloadTimes: number;\n  favoriteTimes: number;\n  downloadStatistics: DownloadStatistics;\n};\n```\n\n----------------------------------------\n\nTITLE: Describing Carousel Component in Markdown\nDESCRIPTION: This snippet provides a markdown description of the Carousel component, explaining its purpose and functionality within the Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Carousel/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`````\nComponent / Data Display\n\n# Carousel\n\nCarousel is used to display multiple contents such as pictures, videos, or embedded frames on a rotating timer. It supports both automatic playback and manual switching.\n`````\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Arco Design Material Building\nDESCRIPTION: Example of a Webpack configuration for building Arco Design materials, including handling of arcoDemoVendor.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.en-US.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst path = require('path');\nconst merge = require('webpack-merge');\nconst { webpack } = require('../../../arco.scripts.config');\n\nmodule.exports = (config) => {\n  if (webpack) {\n    const commonConfig =\n      typeof webpack === 'function'\n        ? webpack\n        : typeof webpack.component === 'function'\n        ? webpack.component\n        : () => {};\n    config = commonConfig(config) || config;\n  }\n\n  const entry = {\n    arco: path.resolve(__dirname, '../src/index.tsx'),\n  };\n  const demoVendorPath = path.resolve(__dirname, '../src/demo/arcoDemoVendor.js');\n\n  if (fs.existsSync(demoVendorPath)) {\n    entry.arcoDemoVendor = demoVendorPath;\n  }\n\n  return merge(config, { entry });\n};\n```\n\n----------------------------------------\n\nTITLE: AutoComplete Component Description in Markdown\nDESCRIPTION: Markdown description of the AutoComplete component, categorizing it as a Data Entry component. The component is described as an input box or custom input control with enhanced automatic completion functionality.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/AutoComplete/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Data Entry\n\n# AutoComplete\n\nAn input box or custom input control, with enhanced automatic completion functionality.\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Information Structure in TypeScript\nDESCRIPTION: This TypeScript type defines the structure of team site information returned by the API, including site id and an array of site pages.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: number;\n  site: Array<{\n    key: string;\n    path: string;\n    link?: boolean;\n  }>\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Querying of Materials in Material Platform API\nDESCRIPTION: This endpoint allows querying materials with specific conditions. It uses a POST request and returns an array of results.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.material.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/material\n\nReturn { result: Array }\n```\n\n----------------------------------------\n\nTITLE: Defining LabelValue Type for TreeSelect in TypeScript\nDESCRIPTION: Defines the LabelValue type used in TreeSelect component for structured value representation with label, value, and optional disabled status.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/TreeSelect/README.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type LabelValue = {\n  label: ReactNode;\n  value: string;\n  disabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Component Dev Watcher with arco-scripts\nDESCRIPTION: This command sets up a watcher that automatically rebuilds the component whenever changes are detected in the code or styles. This is valuable for seeing changes in real time during development, requiring tsc and gulp-less.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.build.zh-CN.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# 监测组件代码的变动 - tsc & gulp-less\narco-scripts dev:component\n```\n\n----------------------------------------\n\nTITLE: InputNumber Component Methods\nDESCRIPTION: Two core interaction methods for managing focus state of the numeric input component\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/InputNumber/__template__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nblur(): Remove focus\\nfocus(): Get focus\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Outline Query Parameters in TypeScript\nDESCRIPTION: This TypeScript type defines the structure of query parameters for team site outline searches, including required team id and optional keyword.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  /**\n   * 团队 ID\n   */\n  id: number;\n  /**\n   * 查询关键词\n   */\n  keyword?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Upload Component Changelog Documentation\nDESCRIPTION: Markdown documentation detailing version history and changes to Upload component including feature additions, bug fixes, and style changes\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Upload/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.63.2\n\n2024-08-08\n\n### 💎 Enhancement\n\n- Optimize the error message display of `Upload` component\n- Optimize the logic of judging empty files when reading files in folder upload\n\n## 2.57.0\n\n2023-12-08\n\n### 🐛 BugFix\n\n- Fixed the issue that `Upload` would add the folder to the list as a file when `directory = false`\n\n## 2.56.0\n\n2023-11-17\n\n### 🐛 BugFix\n\n- Fixed the issue that the uploaded file status was overwritten to init during batch upload\n```\n\n----------------------------------------\n\nTITLE: Displaying Arco CLI Help Information\nDESCRIPTION: Output of the 'arco --help' command, showing available commands and options for arco-cli.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ arco --help\n\n        ___ ____ _\n       / | ______________ / __ \\___ _____(_)___ _____\n      / /| | / ___/ ___/ __ \\/ / / / _ \\/ ___/ / __ `/ __ \\\n     / ___ |/ / / /__/ /_/ / /_/ / __(__) / /_/ / / / /\n    /_/ |_/_/ \\___/\\____/_____/\\___/____/_/\\__, /_/ /_/\n                                             /____/\n\nUsage: arco [commands] [options]\n\nOptions:\n  -v, --version View the current version\n  -h, --help output usage information\n\nCommands:\n  init [options] <projectName> Create a template project in the current folder.\n  generate [options] Generate metadata\n  publish Publish to npm\n  sync [options] Synchronize information to the material market\n  preview [options] Preview material details page with locally built products\n  login SSO user login\n  logout Exit SSO login\n  whoami view current user information\n  group [options] Related operations of user group\n  template [options] Related operations of the material template\n  block material block related commands\n  help [cmd] display help for [cmd]\n-------------------------------------------------- -------------------------------------\nIf you need to view a subcommand, you can use the subcommand help, such as: arco sync -h\nExamples:\n  $ arco sync -h\n-------------------------------------------------- -------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Querying Team Sites in Material Platform API (POST)\nDESCRIPTION: This endpoint retrieves information about team sites based on team id and creation date range. It returns an array of team site data.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group/queryGroupSite\n\nReturn { result: Array }\n```\n\n----------------------------------------\n\nTITLE: Alert Component Definition\nDESCRIPTION: Markdown definition of the Alert component categorized under Component/Feedback section, used for displaying warning information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Alert/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent / Feedback\n\n# Alert\n\nUsed to display warning information in a way that attracts attention.\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Entry\nDESCRIPTION: Release notes entry documenting the addition of VerificationCode component in version 2.55.0\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/VerificationCode/__changelog__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.55.0\n\n2023-10-27\n\n### 🆕 Feature\n\n- Add `VerificationCode` component([#2308](https://github.com/arco-design/arco-design/pull/2308))\n```\n\n----------------------------------------\n\nTITLE: Querying Team Site Outlines in Material Platform API (POST)\nDESCRIPTION: This endpoint retrieves the outline of team site documents based on team id and an optional keyword. It returns a boolean status and a record of document outlines.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST https://arco.design/material/api/group/queryGroupSiteOutline\n\nReturn { ok: boolean, result: Record<string, { text: string; depth: number; href: string }[]> }\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Resolve Alias in JavaScript\nDESCRIPTION: Demonstrates how to use webpack's resolve.alias configuration to specify the path for finding modules in the material development mode.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// .config/webpack.config.js\nmodule.exports = (config) => {\n   config.resolve.alias['@arco-design/my-material'] ='/project-root/packages/my-material/src';\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Checkbox Icon\nDESCRIPTION: Implementation of the icon prop for customizing the checked state icon in Checkbox component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Checkbox/__changelog__/index.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CheckboxProps {\n  icon?: React.ReactNode;\n  checked?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LabeledValue Type in TypeScript\nDESCRIPTION: Defines the LabeledValue type used in the Select component for labeled options.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Select/README.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type LabeledValue = {\n  value: string | number;\n  label: ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User and Group Information Types in TypeScript\nDESCRIPTION: These TypeScript types define the structure of user and group information returned by the API, including details about team members and material statistics.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.zh-CN.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype User = {\n  email: string;\n  name: string;\n  username: string;\n  avatarUrl: string;\n  role: 'owner' | 'master';\n};\n\ntype GroupInfo = {\n  id: number;\n  name: string;\n  logo: string;\n  description: string;\n  createdAt: string;\n  updatedAt: string;\n  members: User[];\n  materialStatistics: {\n    count: number;\n    downloadTimes: number;\n    favoriteTimes: number;\n    downloadStatistics: {\n      all: number;\n      today: number;\n      thisWeek: number;\n      thisMonth: number;\n      lastDay: number;\n      lastWeek: number;\n      lastMonth: number;\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface with JSDoc\nDESCRIPTION: Shows a TypeScript interface with JSDoc comments, used for documenting component properties and their descriptions.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n\"export interface ComponentOneProps {\n  /** Child node of the component */\n  children?: ReactNode;\n  /** Additional style of the component */\n  style?: CSSProperties;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Demo file structure\nDESCRIPTION: Illustrates the directory structure for demos, showing the organization of README.md and index.js files within each material's folder.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"demos\n├── add // Each material corresponds to a separate folder\n│ ├── README.md // write any material help file\n│ └── index.js // Write Demo for materials\"\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Document Outline Query Parameters in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for team site document outline query parameters, including team ID and optional search keyword.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype GroupQueryParams = {\n  /**\n   * Team ID\n   */\n  id: number;\n  /**\n   * Search keywords\n   */\n  keyword?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Modify site configuration\nDESCRIPTION: Demonstrates the structure of the main.js file, which is used to configure the build and site settings, including globs for component and document paths.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\"module.exports = {\n  // Build configuration\n  build: {\n    // match the path of the document and component\n    globs: {\n      component: {\n        base:'demos/*',\n        doc:'README.md',\n        demo:'index.js',\n      },\n      doc:'docs/**/*.md',\n    },\n    ...\n  },\n  // Site configuration\n  site: {\n    ...\n  },\n};\"\n```\n\n----------------------------------------\n\nTITLE: Configure Team Info\nDESCRIPTION: Demonstrates how to configure team information (ID and private status) in the site project's configuration file.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.team-site.en-US.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n\"//.config/main.js\nmodule.exports = {\n  // ...\n  // configure your team info\n  group: {\n    // team ID\n    id: 1,\n    // Whether it is the intranet team of the material platform\n    private: false,\n  },\n};\"\n```\n\n----------------------------------------\n\nTITLE: Declaring useVerificationCode Hook Interface\nDESCRIPTION: Markdown declaration and documentation structure for the useVerificationCode hook interface in Arco Design system.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/_hooks/useVerificationCode/__template__/index.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHooks / useVerificationCode\n\n# useVerificationCode\n\nuseVerificationCode hook\n```\n\n----------------------------------------\n\nTITLE: Defining Team Site Response Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for the response of a team site query, including site ID and an array of site information.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/api.group.en-US.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: number;\n  site: Array<{\n    key: string;\n    path: string;\n    link?: boolean;\n  }>\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Arco CLI Help\nDESCRIPTION: Output of the 'arco --help' command, showing available commands and options for arco-cli.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ arco --help\n\n        ___                    ____            _\n       /   |  ______________  / __ \\___  _____(_)___ _____\n      / /| | / ___/ ___/ __ \\/ / / / _ \\/ ___/ / __ `/ __ \\\n     / ___ |/ /  / /__/ /_/ / /_/ /  __(__  ) / /_/ / / / /\n    /_/  |_/_/   \\___/\\____/_____/\\___/____/_/\\__, /_/ /_/\n                                             /____/\n\nUsage: arco [commands] [options]\n\nOptions:\n  -v, --version                 查看当前版本\n  -h, --help                    output usage information\n\nCommands:\n  init [options] <projectName>  在当前文件夹创建一个模版项目。\n  generate [options]            生成元数据\n  publish                       发布到 npm\n  sync [options]                同步信息到物料市场\n  preview [options]             以本地构建产物预览物料详情页\n  login                         SSO 用户登陆\n  logout                        退出 SSO 登陆\n  whoami                        查看当前用户信息\n  group [options]               用户分组的相关操作\n  template [options]            物料模板的相关操作\n  block                         物料区块相关命令\n  help [cmd]                    display help for [cmd]\n---------------------------------------------------------------------------------------\n如需查看某个子命令，可以使用子命令帮助，如：arco sync -h\nExamples:\n  $ arco sync -h\n---------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Material Directory Structure\nDESCRIPTION: This snippet shows the typical directory structure for a material project, including the location of test files, TEMPLATE.md, demo components, the main component file (index.tsx), and styling files.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/develop.docgen.en-US.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n─ /src\n  ├── __test__\n  ├── TEMPLATE.md\n  ├── demo\n  │ └── basic.jsx\n  ├── index.tsx\n  └── style\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Arco Scripts Help Information\nDESCRIPTION: Output of the 'arco-scripts --help' command, showing available commands and options for arco-scripts.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/advanced.command.en-US.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ arco-scripts --help\n\nUsage: arco-scripts command [options]\n\nOptions:\n  -V, --version output the version number\n  -h, --help output usage information\n\nCommands:\n  dev:component [options] build components with watch mode\n  dev:art copy art template with watch mode\n  build:component build all these sources: es, cjs, dist, icon and css\n  build:component:css\n  build:component:dist\n  build:component:es\n  build:component:cjs\n  build:art\n  dev:site [options] build your website with watch mode. e.g. arco-scripts dev:site --ip 127.0.0.1 --port 9090\n  build:site\n  build:icon\n  docgen [options] generate document of component. e.g. arco-scripts docgen --components Alert,Affix,Button\n  test A command which contains test:client and test:node, any option you entered will be passed to Jest. e.g. arco-scripts test --updateSnapshot\n  test:client Any option you entered will be passed to Jest. e.g. arco-scripts test:client --updateSnapshot\n  test:node Any option you entered will be passed to Jest. e.g. arco-scripts test:node --bail\n  show:config <configType> Show your current config for arco-scripts. Valid type: babel|style|webpack.component|webpack.site|webpack.icon|jest|docgen\n```\n\n----------------------------------------\n\nTITLE: Material Documentation Template in Markdown\nDESCRIPTION: Template for generating component documentation, including placeholders for props and demos that will be filled in during the build process.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nfile: index\n---\n\n# TooltipButton\n\n## Properties/Props\n\n%%Props%%\n\n## Demos\n\n%%Demos%%\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Configuration with ConfigProvider in React\nDESCRIPTION: This code snippet demonstrates how to use the ConfigProvider component from Arco Design to apply global configuration settings. It imports the componentConfig from a custom theme package and wraps the application with ConfigProvider.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/designlab/use-config-provider.zh-CN.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConfigProvider } from '@arco-design/web-react';\nimport { componentConfig } from '@arco-design/theme-line/config'; // 此处需要配置为自己的主题包名\n\nexport default () => {\n    return <ConfigProvider componentConfig={componentConfig}>\n      {...}\n    </ConfigProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying docgen Command for Block Preview\nDESCRIPTION: This snippet outlines the steps required to modify the package.json file to set up the docgen command for a block, ensuring that it uses the correct version of arco-scripts. It also specifies the configuration needed in the docgen settings.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/site/docs/material/1.x/start.guide.en-US.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n ## Demos\n\n %%Demos%%\n```\n```\n\n----------------------------------------\n\nTITLE: Defining InputValueChangeReason Type in TypeScript\nDESCRIPTION: TypeScript type definition for reasons causing input value changes in the Cascader component.\nSOURCE: https://github.com/arco-design/arco-design/blob/main/components/Cascader/README.zh-CN.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type InputValueChangeReason =\n  | \"manual\"\n  | \"optionListHide\"\n  | \"optionChecked\";\n```"
  }
]