[
  {
    "owner": "lastmile-ai",
    "repo": "openai-agents-mcp",
    "content": "TITLE: Creating an Agent with MCP Servers in Python\nDESCRIPTION: This Python code demonstrates how to instantiate an Agent using the agents_mcp library and configure it to use specific MCP servers.  It defines the agent's name, instructions, local tools, and specifies the MCP servers to access. The specified MCP servers need to be defined in the mcp_agent.config.yaml file. The example also shows the integration of local tools with MCP servers. Requires the agents_mcp library to be installed.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agents_mcp import Agent\n\n# Create an agent with specific MCP servers you want to use\n# These must be defined in your mcp_agent.config.yaml file\nagent = Agent(\n    name=\"MCP Agent\",\n    instructions=\"\"\"You are a helpful assistant with access to both local/OpenAI tools and tools from MCP servers. Use these tools to help the user.\"\"\",\n    # Local/OpenAI tools\n    tools=[get_current_weather],\n    # Specify which MCP servers to use\n    # These must be defined in your mcp_agent config\n    mcp_servers=[\"fetch\", \"filesystem\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Agent with MCP Tools Configuration in Python\nDESCRIPTION: This Python code demonstrates how to create an agent using the agents_mcp library and configure it to use specific MCP servers along with regular tools. It defines the agent's name, instructions, regular tools, and the names of the MCP servers to access. The MCP servers are defined in a configuration file (mcp_agent.config.yaml). Requires the agents_mcp library to be installed.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\n    name=\"MCP Assistant\",\n    instructions=\"You are a helpful assistant with access to MCP tools.\",\n    tools=[your_other_tools], # Regular tool use for Agent SDK\n    mcp_servers=[\"fetch\", \"filesystem\"]  # Names of MCP servers from your config file (see below)\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Server Registry in Python\nDESCRIPTION: This Python code demonstrates how to create and configure a custom MCP server registry. This involves getting the settings from a configuration file using `get_settings` and then creating a `ServerRegistry` instance, which is then passed to the Agent. This allows for a more customized setup and control over how MCP servers are managed.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_agent.mcp_server_registry import ServerRegistry\nfrom mcp_agent.config import get_settings\n\nfrom agents_mcp import Agent\n\n# Create a custom server registry\nsettings = get_settings(\"/path/to/config.yaml\")\nserver_registry = ServerRegistry(config=settings)\n\n# Create an agent with this registry\nagent = Agent(\n    name=\"Custom Registry Agent\",\n    instructions=\"You have access to custom MCP servers.\",\n    mcp_servers=[\"fetch\", \"filesystem\"],\n    mcp_server_registry=server_registry  # Use custom registry\n)\n```\n\n----------------------------------------\n\nTITLE: Automatic Discovery Configuration in Python\nDESCRIPTION: This Python code demonstrates the simplest approach for configuring MCP servers by letting the SDK automatically find the configuration file named mcp_agent.config.yaml. It creates an agent and specifies the MCP servers to use. Requires the agents_mcp library to be installed.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agents_mcp import Agent, RunnerContext\n\n# Create an agent that references MCP servers\nagent = Agent(\n    name=\"MCP Assistant\",\n    instructions=\"You are a helpful assistant with access to MCP tools.\",\n    mcp_servers=[\"fetch\", \"filesystem\"]  # Names of servers from your config file\n)\n\nresult = await Runner.run(agent, input=\"Hello world\", context=RunnerContext())\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World example in Python\nDESCRIPTION: This Python code demonstrates a basic \"Hello World\" example using the openai-agents-mcp package. It creates an agent, configures it with local and MCP tools, and runs the agent with a specific input. Requires the agents_mcp library to be installed.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom agents_mcp import Agent, RunnerContext\n\n# Create an agent with MCP servers\nagent = Agent(\n    name=\"MCP Assistant\",\n    instructions=\"You are a helpful assistant with access to tools.\",\n    tools=[get_current_weather],  # Local tools\n    mcp_servers=[\"fetch\", \"filesystem\"],  # MCP servers\n)\n\n# Run the agent\nresult = await Runner.run(\n    agent,\n    input=\"What's the weather in Miami? Also, can you fetch the OpenAI website?\",\n    context=RunnerContext(),\n)\n\nprint(result.response.value)\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses in Python\nDESCRIPTION: This Python code demonstrates how to stream responses from an agent configured with openai-agents-mcp. The `Runner.run_streamed` method is used to get a stream of events. This example prints the delta of each `ResponseTextDeltaEvent` as it becomes available.  Note that `Runner.run_streamed` is not awaited directly, but its result provides an asynchronous iterator.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresult = Runner.run_streamed(  # Note: No await here\n    agent,\n    input=\"Print the first paragraph of https://openai.github.io/openai-agents-python/\",\n    context=context,\n)\n\n# Stream the events\nasync for event in result.stream_events():\n    if event.type == \"raw_response_event\" and isinstance(event.data, ResponseTextDeltaEvent):\n        print(event.data.delta, end=\"\", flush=True)\n```\n\n----------------------------------------\n\nTITLE: Programmatic Configuration in Python\nDESCRIPTION: This Python code demonstrates how to programmatically define MCP settings instead of using a configuration file. It defines MCPSettings and MCPServerSettings objects and passes them to the RunnerContext. This allows for more dynamic and flexible configurations.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_agent.config import MCPSettings, MCPServerSettings\nfrom agents_mcp import RunnerContext\n\n# Define MCP config programmatically\nmcp_config = MCPSettings(\n    servers={\n        \"fetch\": MCPServerSettings(\n            command=\"uvx\",\n            args=[\"mcp-server-fetch\"]\n        ),\n        \"filesystem\": MCPServerSettings(\n            command=\"npx\",\n            args=[\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"]\n        )\n    }\n)\n\ncontext = RunnerContext(mcp_config=mcp_config)\n```\n\n----------------------------------------\n\nTITLE: MCP Server Configuration in YAML\nDESCRIPTION: This YAML code defines the structure for configuring MCP servers. It specifies the command and arguments to run each server. The mcp section contains the servers' configurations, including the command to execute and any necessary arguments.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmcp:\n  servers:\n    fetch:\n      command: npx\n      args: [\"-y\", \"@modelcontextprotocol/server-fetch\"]\n    filesystem:\n      command: npx\n      args: [\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"]\n```\n\n----------------------------------------\n\nTITLE: Explicit Config Path in Python\nDESCRIPTION: This Python code demonstrates how to explicitly specify the path to the MCP configuration file using the RunnerContext. This allows the user to define where the SDK should look for the config file.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom agents_mcp import RunnerContext\n\ncontext = RunnerContext(mcp_config_path=\"/path/to/mcp_agent.config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: MCP Configuration File Example in YAML\nDESCRIPTION: This YAML code defines a configuration file that lists three MCP servers along with their corresponding commands and arguments. The $schema property provides the JSON schema for the configuration. This example shows how to define multiple MCP server configurations in a single file.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: \"https://raw.githubusercontent.com/lastmile-ai/mcp-agent/main/schema/mcp-agent.config.schema.json\"\n\nmcp:\n  servers:\n    fetch:\n      command: \"uvx\"\n      args: [\"mcp-server-fetch\"]\n    filesystem:\n      command: \"npx\"\n      args: [\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"]\n    slack:\n      command: \"npx\"\n      args: [\"-y\", \"@modelcontextprotocol/server-slack\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Agent class (diff)\nDESCRIPTION: This code snippet demonstrates how to replace the default Agent import from the OpenAI Agents SDK with the one provided by the openai-agents-mcp extension. This is essential for using MCP server integration.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- from agents import Agent\n+ from agents_mcp import Agent\n```\n\n----------------------------------------\n\nTITLE: Running an example\nDESCRIPTION: This command changes the directory to examples, copies an example secrets file, and then executes a Python example script using uv. This is a quick way to test and see examples in action. Update API keys if needed in the secrets file.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\ncp mcp_agent.secrets.yaml.example mcp_agent.secrets.yaml # Update API keys if needed\nuv run hello_world_mcp.py # Or any other example\n```\n\n----------------------------------------\n\nTITLE: Installing openai-agents-mcp using pip\nDESCRIPTION: This command installs the openai-agents-mcp package using the pip package installer.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install openai-agents-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing openai-agents-mcp using uv\nDESCRIPTION: This command installs the openai-agents-mcp package using the uv package manager.\nSOURCE: https://github.com/lastmile-ai/openai-agents-mcp/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv add openai-agents-mcp\n```"
  }
]